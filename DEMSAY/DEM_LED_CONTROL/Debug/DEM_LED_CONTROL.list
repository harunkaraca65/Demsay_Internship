
DEM_LED_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002278  08002278  00003278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022cc  080022cc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080022cc  080022cc  000032cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022d4  080022d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000032d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022d8  080022d8  000032d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000010  080022e8  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080022e8  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000527d  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001713  00000000  00000000  000092b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  0000a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000044d  00000000  00000000  0000afa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ccf  00000000  00000000  0000b3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008120  00000000  00000000  0001f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c539  00000000  00000000  000271e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a371d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000131c  00000000  00000000  000a3760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000a4a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002260 	.word	0x08002260

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08002260 	.word	0x08002260

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__aeabi_uldivmod>:
 8000218:	2b00      	cmp	r3, #0
 800021a:	d111      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 800021c:	2a00      	cmp	r2, #0
 800021e:	d10f      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 8000220:	2900      	cmp	r1, #0
 8000222:	d100      	bne.n	8000226 <__aeabi_uldivmod+0xe>
 8000224:	2800      	cmp	r0, #0
 8000226:	d002      	beq.n	800022e <__aeabi_uldivmod+0x16>
 8000228:	2100      	movs	r1, #0
 800022a:	43c9      	mvns	r1, r1
 800022c:	0008      	movs	r0, r1
 800022e:	b407      	push	{r0, r1, r2}
 8000230:	4802      	ldr	r0, [pc, #8]	@ (800023c <__aeabi_uldivmod+0x24>)
 8000232:	a102      	add	r1, pc, #8	@ (adr r1, 800023c <__aeabi_uldivmod+0x24>)
 8000234:	1840      	adds	r0, r0, r1
 8000236:	9002      	str	r0, [sp, #8]
 8000238:	bd03      	pop	{r0, r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)
 800023c:	ffffffd9 	.word	0xffffffd9
 8000240:	b403      	push	{r0, r1}
 8000242:	4668      	mov	r0, sp
 8000244:	b501      	push	{r0, lr}
 8000246:	9802      	ldr	r0, [sp, #8]
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	469e      	mov	lr, r3
 8000250:	b002      	add	sp, #8
 8000252:	bc0c      	pop	{r2, r3}
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__udivmoddi4>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	0004      	movs	r4, r0
 8000266:	000d      	movs	r5, r1
 8000268:	4692      	mov	sl, r2
 800026a:	4699      	mov	r9, r3
 800026c:	b083      	sub	sp, #12
 800026e:	428b      	cmp	r3, r1
 8000270:	d830      	bhi.n	80002d4 <__udivmoddi4+0x7c>
 8000272:	d02d      	beq.n	80002d0 <__udivmoddi4+0x78>
 8000274:	4649      	mov	r1, r9
 8000276:	4650      	mov	r0, sl
 8000278:	f000 f8ba 	bl	80003f0 <__clzdi2>
 800027c:	0029      	movs	r1, r5
 800027e:	0006      	movs	r6, r0
 8000280:	0020      	movs	r0, r4
 8000282:	f000 f8b5 	bl	80003f0 <__clzdi2>
 8000286:	1a33      	subs	r3, r6, r0
 8000288:	4698      	mov	r8, r3
 800028a:	3b20      	subs	r3, #32
 800028c:	d434      	bmi.n	80002f8 <__udivmoddi4+0xa0>
 800028e:	469b      	mov	fp, r3
 8000290:	4653      	mov	r3, sl
 8000292:	465a      	mov	r2, fp
 8000294:	4093      	lsls	r3, r2
 8000296:	4642      	mov	r2, r8
 8000298:	001f      	movs	r7, r3
 800029a:	4653      	mov	r3, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001e      	movs	r6, r3
 80002a0:	42af      	cmp	r7, r5
 80002a2:	d83b      	bhi.n	800031c <__udivmoddi4+0xc4>
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d100      	bne.n	80002aa <__udivmoddi4+0x52>
 80002a8:	e079      	b.n	800039e <__udivmoddi4+0x146>
 80002aa:	465b      	mov	r3, fp
 80002ac:	1ba4      	subs	r4, r4, r6
 80002ae:	41bd      	sbcs	r5, r7
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da00      	bge.n	80002b6 <__udivmoddi4+0x5e>
 80002b4:	e076      	b.n	80003a4 <__udivmoddi4+0x14c>
 80002b6:	2200      	movs	r2, #0
 80002b8:	2300      	movs	r3, #0
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2301      	movs	r3, #1
 80002c0:	465a      	mov	r2, fp
 80002c2:	4093      	lsls	r3, r2
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	4642      	mov	r2, r8
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	e029      	b.n	8000324 <__udivmoddi4+0xcc>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	d9cf      	bls.n	8000274 <__udivmoddi4+0x1c>
 80002d4:	2200      	movs	r2, #0
 80002d6:	2300      	movs	r3, #0
 80002d8:	9200      	str	r2, [sp, #0]
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <__udivmoddi4+0x8e>
 80002e2:	601c      	str	r4, [r3, #0]
 80002e4:	605d      	str	r5, [r3, #4]
 80002e6:	9800      	ldr	r0, [sp, #0]
 80002e8:	9901      	ldr	r1, [sp, #4]
 80002ea:	b003      	add	sp, #12
 80002ec:	bcf0      	pop	{r4, r5, r6, r7}
 80002ee:	46bb      	mov	fp, r7
 80002f0:	46b2      	mov	sl, r6
 80002f2:	46a9      	mov	r9, r5
 80002f4:	46a0      	mov	r8, r4
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	4642      	mov	r2, r8
 80002fa:	469b      	mov	fp, r3
 80002fc:	2320      	movs	r3, #32
 80002fe:	1a9b      	subs	r3, r3, r2
 8000300:	4652      	mov	r2, sl
 8000302:	40da      	lsrs	r2, r3
 8000304:	4641      	mov	r1, r8
 8000306:	0013      	movs	r3, r2
 8000308:	464a      	mov	r2, r9
 800030a:	408a      	lsls	r2, r1
 800030c:	0017      	movs	r7, r2
 800030e:	4642      	mov	r2, r8
 8000310:	431f      	orrs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d9c3      	bls.n	80002a4 <__udivmoddi4+0x4c>
 800031c:	2200      	movs	r2, #0
 800031e:	2300      	movs	r3, #0
 8000320:	9200      	str	r2, [sp, #0]
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	4643      	mov	r3, r8
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0d8      	beq.n	80002dc <__udivmoddi4+0x84>
 800032a:	07fb      	lsls	r3, r7, #31
 800032c:	0872      	lsrs	r2, r6, #1
 800032e:	431a      	orrs	r2, r3
 8000330:	4646      	mov	r6, r8
 8000332:	087b      	lsrs	r3, r7, #1
 8000334:	e00e      	b.n	8000354 <__udivmoddi4+0xfc>
 8000336:	42ab      	cmp	r3, r5
 8000338:	d101      	bne.n	800033e <__udivmoddi4+0xe6>
 800033a:	42a2      	cmp	r2, r4
 800033c:	d80c      	bhi.n	8000358 <__udivmoddi4+0x100>
 800033e:	1aa4      	subs	r4, r4, r2
 8000340:	419d      	sbcs	r5, r3
 8000342:	2001      	movs	r0, #1
 8000344:	1924      	adds	r4, r4, r4
 8000346:	416d      	adcs	r5, r5
 8000348:	2100      	movs	r1, #0
 800034a:	3e01      	subs	r6, #1
 800034c:	1824      	adds	r4, r4, r0
 800034e:	414d      	adcs	r5, r1
 8000350:	2e00      	cmp	r6, #0
 8000352:	d006      	beq.n	8000362 <__udivmoddi4+0x10a>
 8000354:	42ab      	cmp	r3, r5
 8000356:	d9ee      	bls.n	8000336 <__udivmoddi4+0xde>
 8000358:	3e01      	subs	r6, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2e00      	cmp	r6, #0
 8000360:	d1f8      	bne.n	8000354 <__udivmoddi4+0xfc>
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	465b      	mov	r3, fp
 8000368:	1900      	adds	r0, r0, r4
 800036a:	4169      	adcs	r1, r5
 800036c:	2b00      	cmp	r3, #0
 800036e:	db24      	blt.n	80003ba <__udivmoddi4+0x162>
 8000370:	002b      	movs	r3, r5
 8000372:	465a      	mov	r2, fp
 8000374:	4644      	mov	r4, r8
 8000376:	40d3      	lsrs	r3, r2
 8000378:	002a      	movs	r2, r5
 800037a:	40e2      	lsrs	r2, r4
 800037c:	001c      	movs	r4, r3
 800037e:	465b      	mov	r3, fp
 8000380:	0015      	movs	r5, r2
 8000382:	2b00      	cmp	r3, #0
 8000384:	db2a      	blt.n	80003dc <__udivmoddi4+0x184>
 8000386:	0026      	movs	r6, r4
 8000388:	409e      	lsls	r6, r3
 800038a:	0033      	movs	r3, r6
 800038c:	0026      	movs	r6, r4
 800038e:	4647      	mov	r7, r8
 8000390:	40be      	lsls	r6, r7
 8000392:	0032      	movs	r2, r6
 8000394:	1a80      	subs	r0, r0, r2
 8000396:	4199      	sbcs	r1, r3
 8000398:	9000      	str	r0, [sp, #0]
 800039a:	9101      	str	r1, [sp, #4]
 800039c:	e79e      	b.n	80002dc <__udivmoddi4+0x84>
 800039e:	42a3      	cmp	r3, r4
 80003a0:	d8bc      	bhi.n	800031c <__udivmoddi4+0xc4>
 80003a2:	e782      	b.n	80002aa <__udivmoddi4+0x52>
 80003a4:	4642      	mov	r2, r8
 80003a6:	2320      	movs	r3, #32
 80003a8:	2100      	movs	r1, #0
 80003aa:	1a9b      	subs	r3, r3, r2
 80003ac:	2200      	movs	r2, #0
 80003ae:	9100      	str	r1, [sp, #0]
 80003b0:	9201      	str	r2, [sp, #4]
 80003b2:	2201      	movs	r2, #1
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	9201      	str	r2, [sp, #4]
 80003b8:	e785      	b.n	80002c6 <__udivmoddi4+0x6e>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	002a      	movs	r2, r5
 80003c2:	4646      	mov	r6, r8
 80003c4:	409a      	lsls	r2, r3
 80003c6:	0023      	movs	r3, r4
 80003c8:	40f3      	lsrs	r3, r6
 80003ca:	4644      	mov	r4, r8
 80003cc:	4313      	orrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	dad4      	bge.n	8000386 <__udivmoddi4+0x12e>
 80003dc:	4642      	mov	r2, r8
 80003de:	002f      	movs	r7, r5
 80003e0:	2320      	movs	r3, #32
 80003e2:	0026      	movs	r6, r4
 80003e4:	4097      	lsls	r7, r2
 80003e6:	1a9b      	subs	r3, r3, r2
 80003e8:	40de      	lsrs	r6, r3
 80003ea:	003b      	movs	r3, r7
 80003ec:	4333      	orrs	r3, r6
 80003ee:	e7cd      	b.n	800038c <__udivmoddi4+0x134>

080003f0 <__clzdi2>:
 80003f0:	b510      	push	{r4, lr}
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d103      	bne.n	80003fe <__clzdi2+0xe>
 80003f6:	f000 f807 	bl	8000408 <__clzsi2>
 80003fa:	3020      	adds	r0, #32
 80003fc:	e002      	b.n	8000404 <__clzdi2+0x14>
 80003fe:	0008      	movs	r0, r1
 8000400:	f000 f802 	bl	8000408 <__clzsi2>
 8000404:	bd10      	pop	{r4, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__clzsi2>:
 8000408:	211c      	movs	r1, #28
 800040a:	2301      	movs	r3, #1
 800040c:	041b      	lsls	r3, r3, #16
 800040e:	4298      	cmp	r0, r3
 8000410:	d301      	bcc.n	8000416 <__clzsi2+0xe>
 8000412:	0c00      	lsrs	r0, r0, #16
 8000414:	3910      	subs	r1, #16
 8000416:	0a1b      	lsrs	r3, r3, #8
 8000418:	4298      	cmp	r0, r3
 800041a:	d301      	bcc.n	8000420 <__clzsi2+0x18>
 800041c:	0a00      	lsrs	r0, r0, #8
 800041e:	3908      	subs	r1, #8
 8000420:	091b      	lsrs	r3, r3, #4
 8000422:	4298      	cmp	r0, r3
 8000424:	d301      	bcc.n	800042a <__clzsi2+0x22>
 8000426:	0900      	lsrs	r0, r0, #4
 8000428:	3904      	subs	r1, #4
 800042a:	a202      	add	r2, pc, #8	@ (adr r2, 8000434 <__clzsi2+0x2c>)
 800042c:	5c10      	ldrb	r0, [r2, r0]
 800042e:	1840      	adds	r0, r0, r1
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	02020304 	.word	0x02020304
 8000438:	01010101 	.word	0x01010101
	...

08000444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044a:	f000 fc8d 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044e:	f000 f953 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000452:	f000 f9cb 	bl	80007ec <MX_GPIO_Init>
  MX_RTC_Init();
 8000456:	f000 f99b 	bl	8000790 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RGB_LED_Control(Active, Passive, Passive);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fba0 	bl	8000ba4 <RGB_LED_Control>
  LED_Control(Active, Passive, Passive, Passive, Passive);
 8000464:	2300      	movs	r3, #0
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2300      	movs	r3, #0
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	2001      	movs	r0, #1
 8000470:	f000 fbe6 	bl	8000c40 <LED_Control>
  Buzzer_Control(Active);
 8000474:	2001      	movs	r0, #1
 8000476:	f000 fc57 	bl	8000d28 <Buzzer_Control>
  HAL_Delay(500);
 800047a:	23fa      	movs	r3, #250	@ 0xfa
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fcf8 	bl	8000e74 <HAL_Delay>
  RGB_LED_Control(Passive, Active, Passive);
 8000484:	2200      	movs	r2, #0
 8000486:	2101      	movs	r1, #1
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fb8b 	bl	8000ba4 <RGB_LED_Control>
  LED_Control(Active, Active, Passive, Passive, Passive);
 800048e:	2300      	movs	r3, #0
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2300      	movs	r3, #0
 8000494:	2200      	movs	r2, #0
 8000496:	2101      	movs	r1, #1
 8000498:	2001      	movs	r0, #1
 800049a:	f000 fbd1 	bl	8000c40 <LED_Control>
  Buzzer_Control(Passive);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 fc42 	bl	8000d28 <Buzzer_Control>
  HAL_Delay(500);
 80004a4:	23fa      	movs	r3, #250	@ 0xfa
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fce3 	bl	8000e74 <HAL_Delay>
  RGB_LED_Control(Passive, Passive, Active);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2100      	movs	r1, #0
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 fb76 	bl	8000ba4 <RGB_LED_Control>
  LED_Control(Active, Active, Active, Passive, Passive);
 80004b8:	2300      	movs	r3, #0
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2300      	movs	r3, #0
 80004be:	2201      	movs	r2, #1
 80004c0:	2101      	movs	r1, #1
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 fbbc 	bl	8000c40 <LED_Control>
  Buzzer_Control(Active);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fc2d 	bl	8000d28 <Buzzer_Control>
  HAL_Delay(500);
 80004ce:	23fa      	movs	r3, #250	@ 0xfa
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fcce 	bl	8000e74 <HAL_Delay>
  RGB_LED_Control(Active, Active, Active);
 80004d8:	2201      	movs	r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 fb61 	bl	8000ba4 <RGB_LED_Control>
  LED_Control(Active, Active, Active, Active, Passive);
 80004e2:	2300      	movs	r3, #0
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2301      	movs	r3, #1
 80004e8:	2201      	movs	r2, #1
 80004ea:	2101      	movs	r1, #1
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 fba7 	bl	8000c40 <LED_Control>
  Buzzer_Control(Passive);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fc18 	bl	8000d28 <Buzzer_Control>
  HAL_Delay(500);
 80004f8:	23fa      	movs	r3, #250	@ 0xfa
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fcb9 	bl	8000e74 <HAL_Delay>
  LED_Control(Active, Active, Active, Active, Active);
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2301      	movs	r3, #1
 8000508:	2201      	movs	r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fb97 	bl	8000c40 <LED_Control>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (SysClkTim._1000sn == 1) {
 8000512:	4b73      	ldr	r3, [pc, #460]	@ (80006e0 <main+0x29c>)
 8000514:	799b      	ldrb	r3, [r3, #6]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d10a      	bne.n	8000530 <main+0xec>
	  HAL_GPIO_TogglePin(LED1_RED_GPIO_Port, LED1_RED_Pin);
 800051a:	2380      	movs	r3, #128	@ 0x80
 800051c:	021a      	lsls	r2, r3, #8
 800051e:	23a0      	movs	r3, #160	@ 0xa0
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f000 ff06 	bl	8001336 <HAL_GPIO_TogglePin>
	  SysClkTim._1000sn = 0;
 800052a:	4b6d      	ldr	r3, [pc, #436]	@ (80006e0 <main+0x29c>)
 800052c:	2200      	movs	r2, #0
 800052e:	719a      	strb	r2, [r3, #6]
	  }
	  if (SysClkTim._50msn == 1) {
 8000530:	4b6b      	ldr	r3, [pc, #428]	@ (80006e0 <main+0x29c>)
 8000532:	789b      	ldrb	r3, [r3, #2]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d107      	bne.n	8000548 <main+0x104>
	  HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 8000538:	4b6a      	ldr	r3, [pc, #424]	@ (80006e4 <main+0x2a0>)
 800053a:	2101      	movs	r1, #1
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fefa 	bl	8001336 <HAL_GPIO_TogglePin>
	  SysClkTim._50msn = 0;
 8000542:	4b67      	ldr	r3, [pc, #412]	@ (80006e0 <main+0x29c>)
 8000544:	2200      	movs	r2, #0
 8000546:	709a      	strb	r2, [r3, #2]
	  }
	  if (SysClkTim._100msn == 1) {
 8000548:	4b65      	ldr	r3, [pc, #404]	@ (80006e0 <main+0x29c>)
 800054a:	78db      	ldrb	r3, [r3, #3]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d107      	bne.n	8000560 <main+0x11c>
	  HAL_GPIO_TogglePin(LED3_BLUE_GPIO_Port, LED3_BLUE_Pin);
 8000550:	4b64      	ldr	r3, [pc, #400]	@ (80006e4 <main+0x2a0>)
 8000552:	2102      	movs	r1, #2
 8000554:	0018      	movs	r0, r3
 8000556:	f000 feee 	bl	8001336 <HAL_GPIO_TogglePin>
	  SysClkTim._100msn = 0;
 800055a:	4b61      	ldr	r3, [pc, #388]	@ (80006e0 <main+0x29c>)
 800055c:	2200      	movs	r2, #0
 800055e:	70da      	strb	r2, [r3, #3]
	  }
	  if (SysClkTim._250msn == 1) {
 8000560:	4b5f      	ldr	r3, [pc, #380]	@ (80006e0 <main+0x29c>)
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d107      	bne.n	8000578 <main+0x134>
	  HAL_GPIO_TogglePin(LED4_WHITE_GPIO_Port, LED4_WHITE_Pin);
 8000568:	4b5e      	ldr	r3, [pc, #376]	@ (80006e4 <main+0x2a0>)
 800056a:	2104      	movs	r1, #4
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fee2 	bl	8001336 <HAL_GPIO_TogglePin>
	  SysClkTim._250msn = 0;
 8000572:	4b5b      	ldr	r3, [pc, #364]	@ (80006e0 <main+0x29c>)
 8000574:	2200      	movs	r2, #0
 8000576:	711a      	strb	r2, [r3, #4]
	  }
	  if (SysClkTim._500msn == 1) {
 8000578:	4b59      	ldr	r3, [pc, #356]	@ (80006e0 <main+0x29c>)
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d123      	bne.n	80005c8 <main+0x184>
	  counter++;
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <main+0x2a4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <main+0x2a4>)
 800058a:	701a      	strb	r2, [r3, #0]
	  if (counter % 2 == 1)
 800058c:	4b56      	ldr	r3, [pc, #344]	@ (80006e8 <main+0x2a4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <main+0x164>
	  HAL_GPIO_WritePin(LED5_YELLOW_GPIO_Port, LED5_YELLOW_Pin, 1);
 800059a:	4b52      	ldr	r3, [pc, #328]	@ (80006e4 <main+0x2a0>)
 800059c:	2201      	movs	r2, #1
 800059e:	2108      	movs	r1, #8
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 feab 	bl	80012fc <HAL_GPIO_WritePin>
 80005a6:	e005      	b.n	80005b4 <main+0x170>
	  else
	  HAL_GPIO_WritePin(LED5_YELLOW_GPIO_Port, LED5_YELLOW_Pin, 0);
 80005a8:	4b4e      	ldr	r3, [pc, #312]	@ (80006e4 <main+0x2a0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	2108      	movs	r1, #8
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fea4 	bl	80012fc <HAL_GPIO_WritePin>

	  if (counter > 2) {
 80005b4:	4b4c      	ldr	r3, [pc, #304]	@ (80006e8 <main+0x2a4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d902      	bls.n	80005c2 <main+0x17e>
	  counter = 0;
 80005bc:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <main+0x2a4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	  }

	  SysClkTim._500msn = 0;
 80005c2:	4b47      	ldr	r3, [pc, #284]	@ (80006e0 <main+0x29c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	715a      	strb	r2, [r3, #5]
	  }
	  if (SysClkTim._2000sn == 1) {
 80005c8:	4b45      	ldr	r3, [pc, #276]	@ (80006e0 <main+0x29c>)
 80005ca:	79db      	ldrb	r3, [r3, #7]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d1a0      	bne.n	8000512 <main+0xce>
	  rgbcounter++;
 80005d0:	4b46      	ldr	r3, [pc, #280]	@ (80006ec <main+0x2a8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b44      	ldr	r3, [pc, #272]	@ (80006ec <main+0x2a8>)
 80005da:	701a      	strb	r2, [r3, #0]
	  switch (rgbcounter) {
 80005dc:	4b43      	ldr	r3, [pc, #268]	@ (80006ec <main+0x2a8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d872      	bhi.n	80006ca <main+0x286>
 80005e4:	009a      	lsls	r2, r3, #2
 80005e6:	4b42      	ldr	r3, [pc, #264]	@ (80006f0 <main+0x2ac>)
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	469f      	mov	pc, r3
	  case 0:
	  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 1);
 80005ee:	23a0      	movs	r3, #160	@ 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2201      	movs	r2, #1
 80005f4:	2140      	movs	r1, #64	@ 0x40
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fe80 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	0059      	lsls	r1, r3, #1
 8000600:	23a0      	movs	r3, #160	@ 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2200      	movs	r2, #0
 8000606:	0018      	movs	r0, r3
 8000608:	f000 fe78 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
 800060c:	4b39      	ldr	r3, [pc, #228]	@ (80006f4 <main+0x2b0>)
 800060e:	2200      	movs	r2, #0
 8000610:	2108      	movs	r1, #8
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fe72 	bl	80012fc <HAL_GPIO_WritePin>
	  break;
 8000618:	e057      	b.n	80006ca <main+0x286>
	  case 1:
	  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 0);
 800061a:	23a0      	movs	r3, #160	@ 0xa0
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	2140      	movs	r1, #64	@ 0x40
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fe6a 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 1);
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	0059      	lsls	r1, r3, #1
 800062c:	23a0      	movs	r3, #160	@ 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2201      	movs	r2, #1
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fe62 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <main+0x2b0>)
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fe5c 	bl	80012fc <HAL_GPIO_WritePin>
	  break;
 8000644:	e041      	b.n	80006ca <main+0x286>
	  case 2:
	  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 0);
 8000646:	23a0      	movs	r3, #160	@ 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2200      	movs	r2, #0
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fe54 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	0059      	lsls	r1, r3, #1
 8000658:	23a0      	movs	r3, #160	@ 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2200      	movs	r2, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fe4c 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 1);
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <main+0x2b0>)
 8000666:	2201      	movs	r2, #1
 8000668:	2108      	movs	r1, #8
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fe46 	bl	80012fc <HAL_GPIO_WritePin>
	  break;
 8000670:	e02b      	b.n	80006ca <main+0x286>
	  case 3:
	  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 1);
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2201      	movs	r2, #1
 8000678:	2140      	movs	r1, #64	@ 0x40
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fe3e 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 1);
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	0059      	lsls	r1, r3, #1
 8000684:	23a0      	movs	r3, #160	@ 0xa0
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2201      	movs	r2, #1
 800068a:	0018      	movs	r0, r3
 800068c:	f000 fe36 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 1);
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <main+0x2b0>)
 8000692:	2201      	movs	r2, #1
 8000694:	2108      	movs	r1, #8
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fe30 	bl	80012fc <HAL_GPIO_WritePin>
	  break;
 800069c:	e015      	b.n	80006ca <main+0x286>
	  case 4:
	  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 0);
 800069e:	23a0      	movs	r3, #160	@ 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	2200      	movs	r2, #0
 80006a4:	2140      	movs	r1, #64	@ 0x40
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fe28 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	0059      	lsls	r1, r3, #1
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2200      	movs	r2, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fe20 	bl	80012fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <main+0x2b0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	2108      	movs	r1, #8
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fe1a 	bl	80012fc <HAL_GPIO_WritePin>
	  break;
 80006c8:	46c0      	nop			@ (mov r8, r8)
	  }
	  if (rgbcounter > 4) {
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <main+0x2a8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d902      	bls.n	80006d8 <main+0x294>
	  rgbcounter = 0;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <main+0x2a8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
	  }

	  SysClkTim._2000sn = 0;
 80006d8:	4b01      	ldr	r3, [pc, #4]	@ (80006e0 <main+0x29c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	71da      	strb	r2, [r3, #7]
	  if (SysClkTim._1000sn == 1) {
 80006de:	e718      	b.n	8000512 <main+0xce>
 80006e0:	2000005c 	.word	0x2000005c
 80006e4:	50000c00 	.word	0x50000c00
 80006e8:	2000002c 	.word	0x2000002c
 80006ec:	2000002d 	.word	0x2000002d
 80006f0:	08002278 	.word	0x08002278
 80006f4:	50000400 	.word	0x50000400

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b093      	sub	sp, #76	@ 0x4c
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	2414      	movs	r4, #20
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	2334      	movs	r3, #52	@ 0x34
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f001 fd7d 	bl	8002208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	0018      	movs	r0, r3
 8000712:	2310      	movs	r3, #16
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f001 fd76 	bl	8002208 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2380      	movs	r3, #128	@ 0x80
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fe23 	bl	800136c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	220a      	movs	r2, #10
 800072a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	0052      	lsls	r2, r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000734:	0021      	movs	r1, r4
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2240      	movs	r2, #64	@ 0x40
 8000740:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2201      	movs	r2, #1
 8000746:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	187b      	adds	r3, r7, r1
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fe4b 	bl	80013ec <HAL_RCC_OscConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800075a:	f000 f971 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f946 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000784:	f000 f95c 	bl	8000a40 <Error_Handler>
  }
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b013      	add	sp, #76	@ 0x4c
 800078e:	bd90      	pop	{r4, r7, pc}

08000790 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_RTC_Init+0x54>)
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <MX_RTC_Init+0x58>)
 8000798:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800079a:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_RTC_Init+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007a2:	227f      	movs	r2, #127	@ 0x7f
 80007a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007a8:	22ff      	movs	r2, #255	@ 0xff
 80007aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	05d2      	lsls	r2, r2, #23
 80007c4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_RTC_Init+0x54>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f001 fbcc 	bl	8001f6c <HAL_RTC_Init>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f932 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	20000030 	.word	0x20000030
 80007e8:	40002800 	.word	0x40002800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b08b      	sub	sp, #44	@ 0x2c
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	2414      	movs	r4, #20
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f001 fd03 	bl	8002208 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b3f      	ldr	r3, [pc, #252]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000806:	4b3e      	ldr	r3, [pc, #248]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000808:	2104      	movs	r1, #4
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
 800080e:	4b3c      	ldr	r3, [pc, #240]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000812:	2204      	movs	r2, #4
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b39      	ldr	r3, [pc, #228]	@ (8000900 <MX_GPIO_Init+0x114>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800081e:	4b38      	ldr	r3, [pc, #224]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
 8000826:	4b36      	ldr	r3, [pc, #216]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b33      	ldr	r3, [pc, #204]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b2d      	ldr	r3, [pc, #180]	@ (8000900 <MX_GPIO_Init+0x114>)
 800084c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800084e:	4b2c      	ldr	r3, [pc, #176]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000850:	2108      	movs	r1, #8
 8000852:	430a      	orrs	r2, r1
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
 8000856:	4b2a      	ldr	r3, [pc, #168]	@ (8000900 <MX_GPIO_Init+0x114>)
 8000858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800085a:	2208      	movs	r2, #8
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin, GPIO_PIN_RESET);
 8000862:	4928      	ldr	r1, [pc, #160]	@ (8000904 <MX_GPIO_Init+0x118>)
 8000864:	23a0      	movs	r3, #160	@ 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fd46 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 8000870:	4925      	ldr	r1, [pc, #148]	@ (8000908 <MX_GPIO_Init+0x11c>)
 8000872:	4b26      	ldr	r3, [pc, #152]	@ (800090c <MX_GPIO_Init+0x120>)
 8000874:	2200      	movs	r2, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fd40 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin, GPIO_PIN_RESET);
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_GPIO_Init+0x124>)
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd3a 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_R_Pin RGB_G_Pin LED1_RED_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin;
 8000888:	193b      	adds	r3, r7, r4
 800088a:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <MX_GPIO_Init+0x118>)
 800088c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	193a      	adds	r2, r7, r4
 80008a2:	23a0      	movs	r3, #160	@ 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 fbc3 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RGB_B_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RGB_B_Pin;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	4a15      	ldr	r2, [pc, #84]	@ (8000908 <MX_GPIO_Init+0x11c>)
 80008b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2201      	movs	r2, #1
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	4a10      	ldr	r2, [pc, #64]	@ (800090c <MX_GPIO_Init+0x120>)
 80008ca:	0019      	movs	r1, r3
 80008cc:	0010      	movs	r0, r2
 80008ce:	f000 fbb1 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_GREEN_Pin LED3_BLUE_Pin LED4_WHITE_Pin LED5_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin;
 80008d2:	0021      	movs	r1, r4
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	220f      	movs	r2, #15
 80008d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2201      	movs	r2, #1
 80008de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <MX_GPIO_Init+0x124>)
 80008f0:	0019      	movs	r1, r3
 80008f2:	0010      	movs	r0, r2
 80008f4:	f000 fb9e 	bl	8001034 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b00b      	add	sp, #44	@ 0x2c
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	00008140 	.word	0x00008140
 8000908:	00001008 	.word	0x00001008
 800090c:	50000400 	.word	0x50000400
 8000910:	50000c00 	.word	0x50000c00

08000914 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
SYSTickTimer++;
 8000918:	4b46      	ldr	r3, [pc, #280]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2001      	movs	r0, #1
 8000920:	2100      	movs	r1, #0
 8000922:	1812      	adds	r2, r2, r0
 8000924:	414b      	adcs	r3, r1
 8000926:	4943      	ldr	r1, [pc, #268]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 8000928:	600a      	str	r2, [r1, #0]
 800092a:	604b      	str	r3, [r1, #4]

if (SYSTickTimer % 1 == 0) {
 800092c:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
SysClkTim._1msn = 1;
 8000932:	4b41      	ldr	r3, [pc, #260]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
}
if (SYSTickTimer % 10 == 0) {
 8000938:	4b3e      	ldr	r3, [pc, #248]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	6859      	ldr	r1, [r3, #4]
 800093e:	220a      	movs	r2, #10
 8000940:	2300      	movs	r3, #0
 8000942:	f7ff fc69 	bl	8000218 <__aeabi_uldivmod>
 8000946:	0010      	movs	r0, r2
 8000948:	0019      	movs	r1, r3
 800094a:	0003      	movs	r3, r0
 800094c:	430b      	orrs	r3, r1
 800094e:	d102      	bne.n	8000956 <HAL_SYSTICK_Callback+0x42>
SysClkTim._10msn = 1;
 8000950:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 8000952:	2201      	movs	r2, #1
 8000954:	705a      	strb	r2, [r3, #1]
}
if (SYSTickTimer % 50 == 0) {
 8000956:	4b37      	ldr	r3, [pc, #220]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	6859      	ldr	r1, [r3, #4]
 800095c:	2232      	movs	r2, #50	@ 0x32
 800095e:	2300      	movs	r3, #0
 8000960:	f7ff fc5a 	bl	8000218 <__aeabi_uldivmod>
 8000964:	0010      	movs	r0, r2
 8000966:	0019      	movs	r1, r3
 8000968:	0003      	movs	r3, r0
 800096a:	430b      	orrs	r3, r1
 800096c:	d102      	bne.n	8000974 <HAL_SYSTICK_Callback+0x60>
SysClkTim._50msn = 1;
 800096e:	4b32      	ldr	r3, [pc, #200]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 8000970:	2201      	movs	r2, #1
 8000972:	709a      	strb	r2, [r3, #2]
}
if (SYSTickTimer % 100 == 0) {
 8000974:	4b2f      	ldr	r3, [pc, #188]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	6859      	ldr	r1, [r3, #4]
 800097a:	2264      	movs	r2, #100	@ 0x64
 800097c:	2300      	movs	r3, #0
 800097e:	f7ff fc4b 	bl	8000218 <__aeabi_uldivmod>
 8000982:	0010      	movs	r0, r2
 8000984:	0019      	movs	r1, r3
 8000986:	0003      	movs	r3, r0
 8000988:	430b      	orrs	r3, r1
 800098a:	d102      	bne.n	8000992 <HAL_SYSTICK_Callback+0x7e>
SysClkTim._100msn = 1;
 800098c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 800098e:	2201      	movs	r2, #1
 8000990:	70da      	strb	r2, [r3, #3]
}
if (SYSTickTimer % 250 == 0) {
 8000992:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	6859      	ldr	r1, [r3, #4]
 8000998:	22fa      	movs	r2, #250	@ 0xfa
 800099a:	2300      	movs	r3, #0
 800099c:	f7ff fc3c 	bl	8000218 <__aeabi_uldivmod>
 80009a0:	0010      	movs	r0, r2
 80009a2:	0019      	movs	r1, r3
 80009a4:	0003      	movs	r3, r0
 80009a6:	430b      	orrs	r3, r1
 80009a8:	d102      	bne.n	80009b0 <HAL_SYSTICK_Callback+0x9c>
SysClkTim._250msn = 1;
 80009aa:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	711a      	strb	r2, [r3, #4]
}
if (SYSTickTimer % 500 == 0) {
 80009b0:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	6859      	ldr	r1, [r3, #4]
 80009b6:	22fa      	movs	r2, #250	@ 0xfa
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	2300      	movs	r3, #0
 80009bc:	f7ff fc2c 	bl	8000218 <__aeabi_uldivmod>
 80009c0:	0010      	movs	r0, r2
 80009c2:	0019      	movs	r1, r3
 80009c4:	0003      	movs	r3, r0
 80009c6:	430b      	orrs	r3, r1
 80009c8:	d102      	bne.n	80009d0 <HAL_SYSTICK_Callback+0xbc>
SysClkTim._500msn = 1;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	715a      	strb	r2, [r3, #5]
}
if (SYSTickTimer % 1000 == 0) {
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	6859      	ldr	r1, [r3, #4]
 80009d6:	22fa      	movs	r2, #250	@ 0xfa
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	2300      	movs	r3, #0
 80009dc:	f7ff fc1c 	bl	8000218 <__aeabi_uldivmod>
 80009e0:	0010      	movs	r0, r2
 80009e2:	0019      	movs	r1, r3
 80009e4:	0003      	movs	r3, r0
 80009e6:	430b      	orrs	r3, r1
 80009e8:	d102      	bne.n	80009f0 <HAL_SYSTICK_Callback+0xdc>
SysClkTim._1000sn = 1;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	719a      	strb	r2, [r3, #6]
}
if (SYSTickTimer % 2000 == 0) {
 80009f0:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	6859      	ldr	r1, [r3, #4]
 80009f6:	22fa      	movs	r2, #250	@ 0xfa
 80009f8:	00d2      	lsls	r2, r2, #3
 80009fa:	2300      	movs	r3, #0
 80009fc:	f7ff fc0c 	bl	8000218 <__aeabi_uldivmod>
 8000a00:	0010      	movs	r0, r2
 8000a02:	0019      	movs	r1, r3
 8000a04:	0003      	movs	r3, r0
 8000a06:	430b      	orrs	r3, r1
 8000a08:	d102      	bne.n	8000a10 <HAL_SYSTICK_Callback+0xfc>
SysClkTim._2000sn = 1;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	71da      	strb	r2, [r3, #7]
}
if (SYSTickTimer % 5000 == 0) {
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_SYSTICK_Callback+0x120>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	6859      	ldr	r1, [r3, #4]
 8000a16:	4a09      	ldr	r2, [pc, #36]	@ (8000a3c <HAL_SYSTICK_Callback+0x128>)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f7ff fbfd 	bl	8000218 <__aeabi_uldivmod>
 8000a1e:	0010      	movs	r0, r2
 8000a20:	0019      	movs	r1, r3
 8000a22:	0003      	movs	r3, r0
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d102      	bne.n	8000a2e <HAL_SYSTICK_Callback+0x11a>
SysClkTim._5000sn = 1;
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <HAL_SYSTICK_Callback+0x124>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	721a      	strb	r2, [r3, #8]
}
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000068 	.word	0x20000068
 8000a38:	2000005c 	.word	0x2000005c
 8000a3c:	00001388 	.word	0x00001388

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	0549      	lsls	r1, r1, #21
 8000a74:	430a      	orrs	r2, r1
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	055b      	lsls	r3, r3, #21
 8000a80:	4013      	ands	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b08b      	sub	sp, #44	@ 0x2c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	2410      	movs	r4, #16
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f001 fbae 	bl	8002208 <memset>
  if(hrtc->Instance==RTC)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a15      	ldr	r2, [pc, #84]	@ (8000b08 <HAL_RTC_MspInit+0x74>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d124      	bne.n	8000b00 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	0292      	lsls	r2, r2, #10
 8000abc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2280      	movs	r2, #128	@ 0x80
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 f929 	bl	8001d20 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ad2:	f7ff ffb5 	bl	8000a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <HAL_RTC_MspInit+0x78>)
 8000ad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <HAL_RTC_MspInit+0x78>)
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	0209      	lsls	r1, r1, #8
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_RTC_MspInit+0x78>)
 8000ae6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_RTC_MspInit+0x78>)
 8000aea:	2180      	movs	r1, #128	@ 0x80
 8000aec:	00c9      	lsls	r1, r1, #3
 8000aee:	430a      	orrs	r2, r1
 8000af0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_RTC_MspInit+0x78>)
 8000af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000af6:	2380      	movs	r3, #128	@ 0x80
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	4013      	ands	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b00b      	add	sp, #44	@ 0x2c
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	40002800 	.word	0x40002800
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f980 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000b3c:	f000 fa72 	bl	8001024 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b54:	f7ff fff7 	bl	8000b46 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7e:	f001 fb4b 	bl	8002218 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b82:	f7ff fc5f 	bl	8000444 <main>

08000b86 <LoopForever>:

LoopForever:
  b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b94:	080022dc 	.word	0x080022dc
  ldr r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b9c:	20000074 	.word	0x20000074

08000ba0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_IRQHandler>
	...

08000ba4 <RGB_LED_Control>:
 *  Created on: 11 Eki 2023
 *      Author: Onur
 */
#include "DigitalInputOutputs.h"

void RGB_LED_Control(uint8_t LED_Red, uint8_t LED_Green, uint8_t LED_Blue) {
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0004      	movs	r4, r0
 8000bac:	0008      	movs	r0, r1
 8000bae:	0011      	movs	r1, r2
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	1c22      	adds	r2, r4, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	1c02      	adds	r2, r0, #0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	1d7b      	adds	r3, r7, #5
 8000bbe:	1c0a      	adds	r2, r1, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
	if (LED_Red == 1)
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d107      	bne.n	8000bda <RGB_LED_Control+0x36>
		HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 1);
 8000bca:	23a0      	movs	r3, #160	@ 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fb92 	bl	80012fc <HAL_GPIO_WritePin>
 8000bd8:	e006      	b.n	8000be8 <RGB_LED_Control+0x44>
	else
		HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 0);
 8000bda:	23a0      	movs	r3, #160	@ 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2200      	movs	r2, #0
 8000be0:	2140      	movs	r1, #64	@ 0x40
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 fb8a 	bl	80012fc <HAL_GPIO_WritePin>

	if (LED_Green == 1)
 8000be8:	1dbb      	adds	r3, r7, #6
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d108      	bne.n	8000c02 <RGB_LED_Control+0x5e>
		HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 1);
 8000bf0:	2380      	movs	r3, #128	@ 0x80
 8000bf2:	0059      	lsls	r1, r3, #1
 8000bf4:	23a0      	movs	r3, #160	@ 0xa0
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fb7e 	bl	80012fc <HAL_GPIO_WritePin>
 8000c00:	e007      	b.n	8000c12 <RGB_LED_Control+0x6e>
	else
		HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
 8000c02:	2380      	movs	r3, #128	@ 0x80
 8000c04:	0059      	lsls	r1, r3, #1
 8000c06:	23a0      	movs	r3, #160	@ 0xa0
 8000c08:	05db      	lsls	r3, r3, #23
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fb75 	bl	80012fc <HAL_GPIO_WritePin>

	if (LED_Blue == 1)
 8000c12:	1d7b      	adds	r3, r7, #5
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d106      	bne.n	8000c28 <RGB_LED_Control+0x84>
		HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 1);
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <RGB_LED_Control+0x98>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2108      	movs	r1, #8
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fb6b 	bl	80012fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
}
 8000c26:	e005      	b.n	8000c34 <RGB_LED_Control+0x90>
		HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <RGB_LED_Control+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fb64 	bl	80012fc <HAL_GPIO_WritePin>
}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	50000400 	.word	0x50000400

08000c40 <LED_Control>:

void LED_Control(uint8_t LED1_Red, uint8_t LED2_Green, uint8_t LED3_Blue,
		uint8_t LED4_White, uint8_t LED5_Yellow) {
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0005      	movs	r5, r0
 8000c48:	000c      	movs	r4, r1
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	1c2a      	adds	r2, r5, #0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	1dbb      	adds	r3, r7, #6
 8000c56:	1c22      	adds	r2, r4, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	1d7b      	adds	r3, r7, #5
 8000c5c:	1c02      	adds	r2, r0, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	1c0a      	adds	r2, r1, #0
 8000c64:	701a      	strb	r2, [r3, #0]

	if (LED1_Red == 1)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d108      	bne.n	8000c80 <LED_Control+0x40>
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, 1);
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	0219      	lsls	r1, r3, #8
 8000c72:	23a0      	movs	r3, #160	@ 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	2201      	movs	r2, #1
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fb3f 	bl	80012fc <HAL_GPIO_WritePin>
 8000c7e:	e007      	b.n	8000c90 <LED_Control+0x50>
	else
		HAL_GPIO_WritePin(LED1_RED_GPIO_Port, LED1_RED_Pin, 0);
 8000c80:	2380      	movs	r3, #128	@ 0x80
 8000c82:	0219      	lsls	r1, r3, #8
 8000c84:	23a0      	movs	r3, #160	@ 0xa0
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	2200      	movs	r2, #0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fb36 	bl	80012fc <HAL_GPIO_WritePin>

	if (LED2_Green == 1)
 8000c90:	1dbb      	adds	r3, r7, #6
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d106      	bne.n	8000ca6 <LED_Control+0x66>
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, 1);
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <LED_Control+0xe4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fb2c 	bl	80012fc <HAL_GPIO_WritePin>
 8000ca4:	e005      	b.n	8000cb2 <LED_Control+0x72>
	else
		HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, 0);
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <LED_Control+0xe4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fb25 	bl	80012fc <HAL_GPIO_WritePin>

	if (LED3_Blue == 1)
 8000cb2:	1d7b      	adds	r3, r7, #5
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d106      	bne.n	8000cc8 <LED_Control+0x88>
		HAL_GPIO_WritePin(LED3_BLUE_GPIO_Port, LED3_BLUE_Pin, 1);
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <LED_Control+0xe4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f000 fb1b 	bl	80012fc <HAL_GPIO_WritePin>
 8000cc6:	e005      	b.n	8000cd4 <LED_Control+0x94>
	else

		HAL_GPIO_WritePin(LED3_BLUE_GPIO_Port, LED3_BLUE_Pin, 0);
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <LED_Control+0xe4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2102      	movs	r1, #2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fb14 	bl	80012fc <HAL_GPIO_WritePin>

	if (LED4_White == 1)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d106      	bne.n	8000cea <LED_Control+0xaa>
		HAL_GPIO_WritePin(LED4_WHITE_GPIO_Port, LED4_WHITE_Pin, 1);
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <LED_Control+0xe4>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fb0a 	bl	80012fc <HAL_GPIO_WritePin>
 8000ce8:	e005      	b.n	8000cf6 <LED_Control+0xb6>
	else
		HAL_GPIO_WritePin(LED4_WHITE_GPIO_Port, LED4_WHITE_Pin, 0);
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <LED_Control+0xe4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	2104      	movs	r1, #4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fb03 	bl	80012fc <HAL_GPIO_WritePin>

	if (LED5_Yellow == 1)
 8000cf6:	2318      	movs	r3, #24
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d106      	bne.n	8000d0e <LED_Control+0xce>
		HAL_GPIO_WritePin(LED5_YELLOW_GPIO_Port, LED5_YELLOW_Pin, 1);
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <LED_Control+0xe4>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	2108      	movs	r1, #8
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 faf8 	bl	80012fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED5_YELLOW_GPIO_Port, LED5_YELLOW_Pin, 0);
}
 8000d0c:	e005      	b.n	8000d1a <LED_Control+0xda>
		HAL_GPIO_WritePin(LED5_YELLOW_GPIO_Port, LED5_YELLOW_Pin, 0);
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <LED_Control+0xe4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 faf1 	bl	80012fc <HAL_GPIO_WritePin>
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bdb0      	pop	{r4, r5, r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	50000c00 	.word	0x50000c00

08000d28 <Buzzer_Control>:

void Buzzer_Control(uint8_t BuzzerState) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	701a      	strb	r2, [r3, #0]
	if (BuzzerState == 1)
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d107      	bne.n	8000d4c <Buzzer_Control+0x24>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000d3c:	2380      	movs	r3, #128	@ 0x80
 8000d3e:	015b      	lsls	r3, r3, #5
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <Buzzer_Control+0x3c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	0019      	movs	r1, r3
 8000d46:	f000 fad9 	bl	80012fc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);

}
 8000d4a:	e006      	b.n	8000d5a <Buzzer_Control+0x32>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <Buzzer_Control+0x3c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	0019      	movs	r1, r3
 8000d56:	f000 fad1 	bl	80012fc <HAL_GPIO_WritePin>
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	50000400 	.word	0x50000400

08000d68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_Init+0x3c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <HAL_Init+0x3c>)
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0049      	lsls	r1, r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d82:	2003      	movs	r0, #3
 8000d84:	f000 f810 	bl	8000da8 <HAL_InitTick>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e001      	b.n	8000d98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe5a 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <HAL_InitTick+0x88>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02b      	beq.n	8000e18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <HAL_InitTick+0x8c>)
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <HAL_InitTick+0x88>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	0019      	movs	r1, r3
 8000dca:	23fa      	movs	r3, #250	@ 0xfa
 8000dcc:	0098      	lsls	r0, r3, #2
 8000dce:	f7ff f997 	bl	8000100 <__udivsi3>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f7ff f992 	bl	8000100 <__udivsi3>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f913 	bl	800100a <HAL_SYSTICK_Config>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d112      	bne.n	8000e0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d80a      	bhi.n	8000e04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2301      	movs	r3, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	2200      	movs	r2, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f8f2 	bl	8000fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_InitTick+0x90>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e00d      	b.n	8000e20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e008      	b.n	8000e20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e003      	b.n	8000e20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	18d2      	adds	r2, r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000070 	.word	0x20000070

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	@ (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	20000070 	.word	0x20000070

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001a      	movs	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed0:	d828      	bhi.n	8000f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8000f90 <__NVIC_SetPriority+0xd4>)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	33c0      	adds	r3, #192	@ 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	589b      	ldr	r3, [r3, r2]
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	400a      	ands	r2, r1
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	21ff      	movs	r1, #255	@ 0xff
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	22ff      	movs	r2, #255	@ 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4003      	ands	r3, r0
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f10:	481f      	ldr	r0, [pc, #124]	@ (8000f90 <__NVIC_SetPriority+0xd4>)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	33c0      	adds	r3, #192	@ 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f22:	e031      	b.n	8000f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	400b      	ands	r3, r1
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3306      	adds	r3, #6
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	@ 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	@ 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	001c      	movs	r4, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	4023      	ands	r3, r4
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	045b      	lsls	r3, r3, #17
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d301      	bcc.n	8000fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2301      	movs	r3, #1
 8000fae:	e010      	b.n	8000fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <SysTick_Config+0x44>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff7c 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x44>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	210f      	movs	r1, #15
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ffbf 	bl	8000f98 <SysTick_Config>
 800101a:	0003      	movs	r3, r0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001028:	f7ff fc74 	bl	8000914 <HAL_SYSTICK_Callback>
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e147      	b.n	80012d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4091      	lsls	r1, r2
 800104e:	000a      	movs	r2, r1
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <HAL_GPIO_Init+0x28>
 800105a:	e138      	b.n	80012ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2203      	movs	r2, #3
 8001062:	4013      	ands	r3, r2
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x40>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2203      	movs	r2, #3
 800106e:	4013      	ands	r3, r2
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	409a      	lsls	r2, r3
 8001082:	0013      	movs	r3, r2
 8001084:	43da      	mvns	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	2201      	movs	r2, #1
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2203      	movs	r2, #3
 80010dc:	4013      	ands	r3, r2
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d017      	beq.n	8001112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2203      	movs	r2, #3
 8001118:	4013      	ands	r3, r2
 800111a:	2b02      	cmp	r3, #2
 800111c:	d123      	bne.n	8001166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	58d3      	ldr	r3, [r2, r3]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2207      	movs	r2, #7
 8001130:	4013      	ands	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2107      	movs	r1, #7
 800114a:	400b      	ands	r3, r1
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	6939      	ldr	r1, [r7, #16]
 8001164:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	401a      	ands	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	23c0      	movs	r3, #192	@ 0xc0
 80011a0:	029b      	lsls	r3, r3, #10
 80011a2:	4013      	ands	r3, r2
 80011a4:	d100      	bne.n	80011a8 <HAL_GPIO_Init+0x174>
 80011a6:	e092      	b.n	80012ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011a8:	4a50      	ldr	r2, [pc, #320]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3318      	adds	r3, #24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	589b      	ldr	r3, [r3, r2]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2203      	movs	r2, #3
 80011ba:	4013      	ands	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	220f      	movs	r2, #15
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	43da      	mvns	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	23a0      	movs	r3, #160	@ 0xa0
 80011d0:	05db      	lsls	r3, r3, #23
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x1ca>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a45      	ldr	r2, [pc, #276]	@ (80012f0 <HAL_GPIO_Init+0x2bc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x1c6>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a44      	ldr	r2, [pc, #272]	@ (80012f4 <HAL_GPIO_Init+0x2c0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x1c2>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a43      	ldr	r2, [pc, #268]	@ (80012f8 <HAL_GPIO_Init+0x2c4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x1be>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x1cc>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x1cc>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x1cc>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x1cc>
 80011fe:	2300      	movs	r3, #0
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	2103      	movs	r1, #3
 8001204:	400a      	ands	r2, r1
 8001206:	00d2      	lsls	r2, r2, #3
 8001208:	4093      	lsls	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001210:	4936      	ldr	r1, [pc, #216]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3318      	adds	r3, #24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	035b      	lsls	r3, r3, #13
 8001236:	4013      	ands	r3, r2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001242:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001248:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43da      	mvns	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	039b      	lsls	r3, r3, #14
 8001260:	4013      	ands	r3, r2
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001272:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 8001274:	2384      	movs	r3, #132	@ 0x84
 8001276:	58d3      	ldr	r3, [r2, r3]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43da      	mvns	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	029b      	lsls	r3, r3, #10
 800128c:	4013      	ands	r3, r2
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001298:	4914      	ldr	r1, [pc, #80]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 800129a:	2284      	movs	r2, #132	@ 0x84
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012a0:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	58d3      	ldr	r3, [r2, r3]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43da      	mvns	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	4013      	ands	r3, r2
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c6:	4909      	ldr	r1, [pc, #36]	@ (80012ec <HAL_GPIO_Init+0x2b8>)
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	40da      	lsrs	r2, r3
 80012dc:	1e13      	subs	r3, r2, #0
 80012de:	d000      	beq.n	80012e2 <HAL_GPIO_Init+0x2ae>
 80012e0:	e6b0      	b.n	8001044 <HAL_GPIO_Init+0x10>
  }
}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b006      	add	sp, #24
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40021800 	.word	0x40021800
 80012f0:	50000400 	.word	0x50000400
 80012f4:	50000800 	.word	0x50000800
 80012f8:	50000c00 	.word	0x50000c00

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	0008      	movs	r0, r1
 8001306:	0011      	movs	r1, r2
 8001308:	1cbb      	adds	r3, r7, #2
 800130a:	1c02      	adds	r2, r0, #0
 800130c:	801a      	strh	r2, [r3, #0]
 800130e:	1c7b      	adds	r3, r7, #1
 8001310:	1c0a      	adds	r2, r1, #0
 8001312:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001314:	1c7b      	adds	r3, r7, #1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131c:	1cbb      	adds	r3, r7, #2
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001326:	1cbb      	adds	r3, r7, #2
 8001328:	881a      	ldrh	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	000a      	movs	r2, r1
 8001340:	1cbb      	adds	r3, r7, #2
 8001342:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	1cb9      	adds	r1, r7, #2
 800135a:	8809      	ldrh	r1, [r1, #0]
 800135c:	400b      	ands	r3, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b004      	add	sp, #16
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800137a:	4013      	ands	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d11f      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	0013      	movs	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	189b      	adds	r3, r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4912      	ldr	r1, [pc, #72]	@ (80013e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f7fe feae 	bl	8000100 <__udivsi3>
 80013a4:	0003      	movs	r3, r0
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013aa:	e008      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e001      	b.n	80013be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e009      	b.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	401a      	ands	r2, r3
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d0ed      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b004      	add	sp, #16
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	40007000 	.word	0x40007000
 80013e0:	fffff9ff 	.word	0xfffff9ff
 80013e4:	20000000 	.word	0x20000000
 80013e8:	000f4240 	.word	0x000f4240

080013ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e2f3      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x1e>
 8001408:	e07c      	b.n	8001504 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140a:	4bc3      	ldr	r3, [pc, #780]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2238      	movs	r2, #56	@ 0x38
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001414:	4bc0      	ldr	r3, [pc, #768]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2203      	movs	r2, #3
 800141a:	4013      	ands	r3, r2
 800141c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x3e>
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d002      	beq.n	8001430 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d10b      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4bb9      	ldr	r3, [pc, #740]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	d062      	beq.n	8001502 <HAL_RCC_OscConfig+0x116>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d15e      	bne.n	8001502 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e2ce      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	025b      	lsls	r3, r3, #9
 8001450:	429a      	cmp	r2, r3
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x78>
 8001454:	4bb0      	ldr	r3, [pc, #704]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4baf      	ldr	r3, [pc, #700]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	0249      	lsls	r1, r1, #9
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e020      	b.n	80014a6 <HAL_RCC_OscConfig+0xba>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	23a0      	movs	r3, #160	@ 0xa0
 800146a:	02db      	lsls	r3, r3, #11
 800146c:	429a      	cmp	r2, r3
 800146e:	d10e      	bne.n	800148e <HAL_RCC_OscConfig+0xa2>
 8001470:	4ba9      	ldr	r3, [pc, #676]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4ba8      	ldr	r3, [pc, #672]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	02c9      	lsls	r1, r1, #11
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	4ba6      	ldr	r3, [pc, #664]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4ba5      	ldr	r3, [pc, #660]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	0249      	lsls	r1, r1, #9
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e00b      	b.n	80014a6 <HAL_RCC_OscConfig+0xba>
 800148e:	4ba2      	ldr	r3, [pc, #648]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4ba1      	ldr	r3, [pc, #644]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001494:	49a1      	ldr	r1, [pc, #644]	@ (800171c <HAL_RCC_OscConfig+0x330>)
 8001496:	400a      	ands	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	4b9f      	ldr	r3, [pc, #636]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b9e      	ldr	r3, [pc, #632]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	499f      	ldr	r1, [pc, #636]	@ (8001720 <HAL_RCC_OscConfig+0x334>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d014      	beq.n	80014d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fcd7 	bl	8000e60 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcd2 	bl	8000e60 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e28d      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ca:	4b93      	ldr	r3, [pc, #588]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	4013      	ands	r3, r2
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xcc>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcc2 	bl	8000e60 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fcbd 	bl	8000e60 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	@ 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e278      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f4:	4b88      	ldr	r3, [pc, #544]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	029b      	lsls	r3, r3, #10
 80014fc:	4013      	ands	r3, r2
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0xf6>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2202      	movs	r2, #2
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x124>
 800150e:	e099      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001510:	4b81      	ldr	r3, [pc, #516]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2238      	movs	r2, #56	@ 0x38
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800151a:	4b7f      	ldr	r3, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d102      	bne.n	8001530 <HAL_RCC_OscConfig+0x144>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d002      	beq.n	8001536 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d135      	bne.n	80015a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001536:	4b78      	ldr	r3, [pc, #480]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4013      	ands	r3, r2
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x162>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e24b      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b72      	ldr	r3, [pc, #456]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a74      	ldr	r2, [pc, #464]	@ (8001724 <HAL_RCC_OscConfig+0x338>)
 8001554:	4013      	ands	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	021a      	lsls	r2, r3, #8
 800155e:	4b6e      	ldr	r3, [pc, #440]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d112      	bne.n	8001590 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800156a:	4b6b      	ldr	r3, [pc, #428]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6e      	ldr	r2, [pc, #440]	@ (8001728 <HAL_RCC_OscConfig+0x33c>)
 8001570:	4013      	ands	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	4b67      	ldr	r3, [pc, #412]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800157e:	4b66      	ldr	r3, [pc, #408]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0adb      	lsrs	r3, r3, #11
 8001584:	2207      	movs	r2, #7
 8001586:	4013      	ands	r3, r2
 8001588:	4a68      	ldr	r2, [pc, #416]	@ (800172c <HAL_RCC_OscConfig+0x340>)
 800158a:	40da      	lsrs	r2, r3
 800158c:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <HAL_RCC_OscConfig+0x344>)
 800158e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001590:	4b68      	ldr	r3, [pc, #416]	@ (8001734 <HAL_RCC_OscConfig+0x348>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fc07 	bl	8000da8 <HAL_InitTick>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d051      	beq.n	8001642 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e221      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d030      	beq.n	800160c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001728 <HAL_RCC_OscConfig+0x33c>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	4b57      	ldr	r3, [pc, #348]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015be:	4b56      	ldr	r3, [pc, #344]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015c4:	2180      	movs	r1, #128	@ 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc48 	bl	8000e60 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fc43 	bl	8000e60 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1fe      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b48      	ldr	r3, [pc, #288]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001724 <HAL_RCC_OscConfig+0x338>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	021a      	lsls	r2, r3, #8
 8001604:	4b44      	ldr	r3, [pc, #272]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e01b      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800160c:	4b42      	ldr	r3, [pc, #264]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001612:	4949      	ldr	r1, [pc, #292]	@ (8001738 <HAL_RCC_OscConfig+0x34c>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fc22 	bl	8000e60 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fc1d 	bl	8000e60 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1d8      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001634:	4b38      	ldr	r3, [pc, #224]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4013      	ands	r3, r2
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x236>
 8001640:	e000      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001642:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2208      	movs	r2, #8
 800164a:	4013      	ands	r3, r2
 800164c:	d047      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800164e:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2238      	movs	r2, #56	@ 0x38
 8001654:	4013      	ands	r3, r2
 8001656:	2b18      	cmp	r3, #24
 8001658:	d10a      	bne.n	8001670 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d03c      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d138      	bne.n	80016de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e1ba      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d019      	beq.n	80016ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800167a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 800167e:	2101      	movs	r1, #1
 8001680:	430a      	orrs	r2, r1
 8001682:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fbec 	bl	8000e60 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fbe7 	bl	8000e60 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1a2      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d0f1      	beq.n	800168e <HAL_RCC_OscConfig+0x2a2>
 80016aa:	e018      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbd2 	bl	8000e60 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fbcd 	bl	8000e60 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e188      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f1      	bne.n	80016c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x2fe>
 80016e8:	e0c6      	b.n	8001878 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	231f      	movs	r3, #31
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2238      	movs	r2, #56	@ 0x38
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d11e      	bne.n	800173c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x31e>
 8001708:	e0b6      	b.n	8001878 <HAL_RCC_OscConfig+0x48c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d000      	beq.n	8001714 <HAL_RCC_OscConfig+0x328>
 8001712:	e0b1      	b.n	8001878 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e166      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
 8001718:	40021000 	.word	0x40021000
 800171c:	fffeffff 	.word	0xfffeffff
 8001720:	fffbffff 	.word	0xfffbffff
 8001724:	ffff80ff 	.word	0xffff80ff
 8001728:	ffffc7ff 	.word	0xffffc7ff
 800172c:	00f42400 	.word	0x00f42400
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004
 8001738:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800173c:	4bac      	ldr	r3, [pc, #688]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800173e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	055b      	lsls	r3, r3, #21
 8001744:	4013      	ands	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_RCC_OscConfig+0x360>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x362>
 800174c:	2300      	movs	r3, #0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d011      	beq.n	8001776 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4ba7      	ldr	r3, [pc, #668]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001756:	4ba6      	ldr	r3, [pc, #664]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001758:	2180      	movs	r1, #128	@ 0x80
 800175a:	0549      	lsls	r1, r1, #21
 800175c:	430a      	orrs	r2, r1
 800175e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001760:	4ba3      	ldr	r3, [pc, #652]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	055b      	lsls	r3, r3, #21
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800176e:	231f      	movs	r3, #31
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001776:	4b9f      	ldr	r3, [pc, #636]	@ (80019f4 <HAL_RCC_OscConfig+0x608>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	@ 0x80
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d11a      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001782:	4b9c      	ldr	r3, [pc, #624]	@ (80019f4 <HAL_RCC_OscConfig+0x608>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b9b      	ldr	r3, [pc, #620]	@ (80019f4 <HAL_RCC_OscConfig+0x608>)
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	0049      	lsls	r1, r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001790:	f7ff fb66 	bl	8000e60 <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fb61 	bl	8000e60 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e11c      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b91      	ldr	r3, [pc, #580]	@ (80019f4 <HAL_RCC_OscConfig+0x608>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	@ 0x80
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4013      	ands	r3, r2
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x3e2>
 80017c0:	4b8b      	ldr	r3, [pc, #556]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017c4:	4b8a      	ldr	r3, [pc, #552]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017cc:	e01c      	b.n	8001808 <HAL_RCC_OscConfig+0x41c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x404>
 80017d6:	4b86      	ldr	r3, [pc, #536]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017da:	4b85      	ldr	r3, [pc, #532]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017dc:	2104      	movs	r1, #4
 80017de:	430a      	orrs	r2, r1
 80017e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017e2:	4b83      	ldr	r3, [pc, #524]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017e6:	4b82      	ldr	r3, [pc, #520]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0x41c>
 80017f0:	4b7f      	ldr	r3, [pc, #508]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017f4:	4b7e      	ldr	r3, [pc, #504]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017f6:	2101      	movs	r1, #1
 80017f8:	438a      	bics	r2, r1
 80017fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017fc:	4b7c      	ldr	r3, [pc, #496]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001800:	4b7b      	ldr	r3, [pc, #492]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001802:	2104      	movs	r1, #4
 8001804:	438a      	bics	r2, r1
 8001806:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d014      	beq.n	800183a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fb26 	bl	8000e60 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001818:	e009      	b.n	800182e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb21 	bl	8000e60 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	4a74      	ldr	r2, [pc, #464]	@ (80019f8 <HAL_RCC_OscConfig+0x60c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0db      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182e:	4b70      	ldr	r3, [pc, #448]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x42e>
 8001838:	e013      	b.n	8001862 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fb11 	bl	8000e60 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001842:	e009      	b.n	8001858 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff fb0c 	bl	8000e60 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a6a      	ldr	r2, [pc, #424]	@ (80019f8 <HAL_RCC_OscConfig+0x60c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0c6      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	4b65      	ldr	r3, [pc, #404]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800185a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001862:	231f      	movs	r3, #31
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b60      	ldr	r3, [pc, #384]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800186e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001870:	4b5f      	ldr	r3, [pc, #380]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001872:	4962      	ldr	r1, [pc, #392]	@ (80019fc <HAL_RCC_OscConfig+0x610>)
 8001874:	400a      	ands	r2, r1
 8001876:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x496>
 8001880:	e0b0      	b.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001882:	4b5b      	ldr	r3, [pc, #364]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2238      	movs	r2, #56	@ 0x38
 8001888:	4013      	ands	r3, r2
 800188a:	2b10      	cmp	r3, #16
 800188c:	d100      	bne.n	8001890 <HAL_RCC_OscConfig+0x4a4>
 800188e:	e078      	b.n	8001982 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d153      	bne.n	8001940 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b55      	ldr	r3, [pc, #340]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b54      	ldr	r3, [pc, #336]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800189e:	4958      	ldr	r1, [pc, #352]	@ (8001a00 <HAL_RCC_OscConfig+0x614>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fadc 	bl	8000e60 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff fad7 	bl	8000e60 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e092      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	4b4b      	ldr	r3, [pc, #300]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	049b      	lsls	r3, r3, #18
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b48      	ldr	r3, [pc, #288]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001a04 <HAL_RCC_OscConfig+0x618>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1a      	ldr	r2, [r3, #32]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	431a      	orrs	r2, r3
 80018f4:	4b3e      	ldr	r3, [pc, #248]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	0449      	lsls	r1, r1, #17
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001908:	4b39      	ldr	r3, [pc, #228]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800190e:	2180      	movs	r1, #128	@ 0x80
 8001910:	0549      	lsls	r1, r1, #21
 8001912:	430a      	orrs	r2, r1
 8001914:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff faa3 	bl	8000e60 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fa9e 	bl	8000e60 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e059      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	4b2f      	ldr	r3, [pc, #188]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	049b      	lsls	r3, r3, #18
 800193a:	4013      	ands	r3, r2
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x534>
 800193e:	e051      	b.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001946:	492e      	ldr	r1, [pc, #184]	@ (8001a00 <HAL_RCC_OscConfig+0x614>)
 8001948:	400a      	ands	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fa88 	bl	8000e60 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff fa83 	bl	8000e60 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e03e      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	049b      	lsls	r3, r3, #18
 8001970:	4013      	ands	r3, r2
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001974:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 800197a:	4923      	ldr	r1, [pc, #140]	@ (8001a08 <HAL_RCC_OscConfig+0x61c>)
 800197c:	400a      	ands	r2, r1
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	e030      	b.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e02b      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2203      	movs	r2, #3
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11e      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2270      	movs	r2, #112	@ 0x70
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d117      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	23fe      	movs	r3, #254	@ 0xfe
 80019b4:	01db      	lsls	r3, r3, #7
 80019b6:	401a      	ands	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d10e      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	23f8      	movs	r3, #248	@ 0xf8
 80019c6:	039b      	lsls	r3, r3, #14
 80019c8:	401a      	ands	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	0f5b      	lsrs	r3, r3, #29
 80019d6:	075a      	lsls	r2, r3, #29
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b008      	add	sp, #32
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	00001388 	.word	0x00001388
 80019fc:	efffffff 	.word	0xefffffff
 8001a00:	feffffff 	.word	0xfeffffff
 8001a04:	1fc1808c 	.word	0x1fc1808c
 8001a08:	effefffc 	.word	0xeffefffc

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0e9      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b76      	ldr	r3, [pc, #472]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d91e      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b73      	ldr	r3, [pc, #460]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2207      	movs	r2, #7
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b70      	ldr	r3, [pc, #448]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fa0e 	bl	8000e60 <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7ff fa09 	bl	8000e60 <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a6a      	ldr	r2, [pc, #424]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0ca      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5e:	4b67      	ldr	r3, [pc, #412]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d006      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a80:	4b60      	ldr	r3, [pc, #384]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b5f      	ldr	r3, [pc, #380]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	21e0      	movs	r1, #224	@ 0xe0
 8001a88:	01c9      	lsls	r1, r1, #7
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4a5d      	ldr	r2, [pc, #372]	@ (8001c08 <HAL_RCC_ClockConfig+0x1fc>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b59      	ldr	r3, [pc, #356]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d057      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab4:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d12b      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e097      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	049b      	lsls	r3, r3, #18
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d11f      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e08b      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	d113      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e07f      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afc:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e074      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e06d      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	4393      	bics	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f998 	bl	8000e60 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b36:	f7ff f993 	bl	8000e60 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a2f      	ldr	r2, [pc, #188]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e054      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2238      	movs	r2, #56	@ 0x38
 8001b50:	401a      	ands	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1ec      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2207      	movs	r2, #7
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d21e      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f970 	bl	8000e60 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b84:	e009      	b.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff f96b 	bl	8000e60 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a1b      	ldr	r2, [pc, #108]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e02c      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b9a:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2204      	movs	r2, #4
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4a15      	ldr	r2, [pc, #84]	@ (8001c0c <HAL_RCC_ClockConfig+0x200>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bc6:	f000 f829 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bca:	0001      	movs	r1, r0
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <HAL_RCC_ClockConfig+0x204>)
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	58d3      	ldr	r3, [r2, r3]
 8001bdc:	221f      	movs	r2, #31
 8001bde:	4013      	ands	r3, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff f8db 	bl	8000da8 <HAL_InitTick>
 8001bf2:	0003      	movs	r3, r0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	00001388 	.word	0x00001388
 8001c04:	40021000 	.word	0x40021000
 8001c08:	fffff0ff 	.word	0xfffff0ff
 8001c0c:	ffff8fff 	.word	0xffff8fff
 8001c10:	0800228c 	.word	0x0800228c
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2238      	movs	r2, #56	@ 0x38
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d10f      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c2c:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0adb      	lsrs	r3, r3, #11
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	2201      	movs	r2, #1
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	4835      	ldr	r0, [pc, #212]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c42:	f7fe fa5d 	bl	8000100 <__udivsi3>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e05d      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2238      	movs	r2, #56	@ 0x38
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c58:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e054      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2238      	movs	r2, #56	@ 0x38
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d138      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	4824      	ldr	r0, [pc, #144]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c8c:	f7fe fa38 	bl	8000100 <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	227f      	movs	r2, #127	@ 0x7f
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	434b      	muls	r3, r1
 8001ca0:	617b      	str	r3, [r7, #20]
        break;
 8001ca2:	e00d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	481c      	ldr	r0, [pc, #112]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca8:	f7fe fa2a 	bl	8000100 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	227f      	movs	r2, #127	@ 0x7f
 8001cb8:	4013      	ands	r3, r2
 8001cba:	434b      	muls	r3, r1
 8001cbc:	617b      	str	r3, [r7, #20]
        break;
 8001cbe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0f5b      	lsrs	r3, r3, #29
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	4013      	ands	r3, r2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	6978      	ldr	r0, [r7, #20]
 8001cd2:	f7fe fa15 	bl	8000100 <__udivsi3>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e015      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2238      	movs	r2, #56	@ 0x38
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d103      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	@ 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b18      	cmp	r3, #24
 8001cfa:	d103      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cfc:	23fa      	movs	r3, #250	@ 0xfa
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e001      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b006      	add	sp, #24
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200

08001d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d28:	2313      	movs	r3, #19
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d30:	2312      	movs	r3, #18
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	029b      	lsls	r3, r3, #10
 8001d40:	4013      	ands	r3, r2
 8001d42:	d100      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d44:	e0a3      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2011      	movs	r0, #17
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	055b      	lsls	r3, r3, #21
 8001d56:	4013      	ands	r3, r2
 8001d58:	d110      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d60:	2180      	movs	r1, #128	@ 0x80
 8001d62:	0549      	lsls	r1, r1, #21
 8001d64:	430a      	orrs	r2, r1
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d68:	4b78      	ldr	r3, [pc, #480]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	055b      	lsls	r3, r3, #21
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	183b      	adds	r3, r7, r0
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7c:	4b74      	ldr	r3, [pc, #464]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b73      	ldr	r3, [pc, #460]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	0049      	lsls	r1, r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d8a:	f7ff f869 	bl	8000e60 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d92:	e00b      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7ff f864 	bl	8000e60 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d904      	bls.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001da2:	2313      	movs	r3, #19
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	2203      	movs	r2, #3
 8001da8:	701a      	strb	r2, [r3, #0]
        break;
 8001daa:	e005      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dac:	4b68      	ldr	r3, [pc, #416]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0ed      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001db8:	2313      	movs	r3, #19
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d154      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dc2:	4b62      	ldr	r3, [pc, #392]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dc6:	23c0      	movs	r3, #192	@ 0xc0
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d019      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d014      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dde:	4b5b      	ldr	r3, [pc, #364]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001de8:	4b58      	ldr	r3, [pc, #352]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dec:	4b57      	ldr	r3, [pc, #348]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dee:	2180      	movs	r1, #128	@ 0x80
 8001df0:	0249      	lsls	r1, r1, #9
 8001df2:	430a      	orrs	r2, r1
 8001df4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001df6:	4b55      	ldr	r3, [pc, #340]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001df8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dfa:	4b54      	ldr	r3, [pc, #336]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dfc:	4956      	ldr	r1, [pc, #344]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e02:	4b52      	ldr	r3, [pc, #328]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d016      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f826 	bl	8000e60 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e18:	e00c      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f821 	bl	8000e60 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a4d      	ldr	r2, [pc, #308]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d904      	bls.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e2a:	2313      	movs	r3, #19
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2203      	movs	r2, #3
 8001e30:	701a      	strb	r2, [r3, #0]
            break;
 8001e32:	e004      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e34:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d0ed      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e3e:	2313      	movs	r3, #19
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e48:	4b40      	ldr	r3, [pc, #256]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	4a41      	ldr	r2, [pc, #260]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e5c:	e00c      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2213      	movs	r2, #19
 8001e64:	18ba      	adds	r2, r7, r2
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e005      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e6c:	2312      	movs	r3, #18
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2213      	movs	r2, #19
 8001e72:	18ba      	adds	r2, r7, r2
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e78:	2311      	movs	r3, #17
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e86:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e88:	4935      	ldr	r1, [pc, #212]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e98:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb6:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eba:	4a2a      	ldr	r2, [pc, #168]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	01db      	lsls	r3, r3, #7
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	0899      	lsrs	r1, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	05db      	lsls	r3, r3, #23
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ef4:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001efa:	2180      	movs	r1, #128	@ 0x80
 8001efc:	0249      	lsls	r1, r1, #9
 8001efe:	430a      	orrs	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d016      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f12:	4a15      	ldr	r2, [pc, #84]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	2380      	movs	r3, #128	@ 0x80
 8001f28:	01db      	lsls	r3, r3, #7
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	0249      	lsls	r1, r1, #9
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781b      	ldrb	r3, [r3, #0]
}
 8001f42:	0018      	movs	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b006      	add	sp, #24
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffffcff 	.word	0xfffffcff
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	efffffff 	.word	0xefffffff
 8001f64:	ffffcfff 	.word	0xffffcfff
 8001f68:	ffff3fff 	.word	0xffff3fff

08001f6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <HAL_RTC_Init+0x18>
 8001f82:	e08c      	b.n	800209e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2229      	movs	r2, #41	@ 0x29
 8001f88:	5c9b      	ldrb	r3, [r3, r2]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2228      	movs	r2, #40	@ 0x28
 8001f94:	2100      	movs	r1, #0
 8001f96:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2288      	movs	r2, #136	@ 0x88
 8001f9c:	0212      	lsls	r2, r2, #8
 8001f9e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7fe fd76 	bl	8000a94 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2229      	movs	r2, #41	@ 0x29
 8001fac:	2102      	movs	r1, #2
 8001fae:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d062      	beq.n	8002084 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	22ca      	movs	r2, #202	@ 0xca
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2253      	movs	r2, #83	@ 0x53
 8001fcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8001fce:	250f      	movs	r5, #15
 8001fd0:	197c      	adds	r4, r7, r5
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 f891 	bl	80020fc <RTC_EnterInitMode>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8001fde:	0028      	movs	r0, r5
 8001fe0:	183b      	adds	r3, r7, r0
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d12c      	bne.n	8002042 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	492e      	ldr	r1, [pc, #184]	@ (80020ac <HAL_RTC_Init+0x140>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6912      	ldr	r2, [r2, #16]
 800201e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6919      	ldr	r1, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002034:	183c      	adds	r4, r7, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f8a1 	bl	8002180 <RTC_ExitInitMode>
 800203e:	0003      	movs	r3, r0
 8002040:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002042:	230f      	movs	r3, #15
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d116      	bne.n	800207a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	00d2      	lsls	r2, r2, #3
 8002058:	08d2      	lsrs	r2, r2, #3
 800205a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6999      	ldr	r1, [r3, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	22ff      	movs	r2, #255	@ 0xff
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24
 8002082:	e003      	b.n	800208c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800208c:	230f      	movs	r3, #15
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2229      	movs	r2, #41	@ 0x29
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800209e:	230f      	movs	r3, #15
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bdb0      	pop	{r4, r5, r7, pc}
 80020ac:	fb8fffbf 	.word	0xfb8fffbf

080020b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0e      	ldr	r2, [pc, #56]	@ (80020f8 <HAL_RTC_WaitForSynchro+0x48>)
 80020be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80020c0:	f7fe fece 	bl	8000e60 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80020c8:	e00a      	b.n	80020e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80020ca:	f7fe fec9 	bl	8000e60 <HAL_GetTick>
 80020ce:	0002      	movs	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad2      	subs	r2, r2, r3
 80020d4:	23fa      	movs	r3, #250	@ 0xfa
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d901      	bls.n	80020e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e006      	b.n	80020ee <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0ee      	beq.n	80020ca <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	0001005f 	.word	0x0001005f

080020fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002104:	230f      	movs	r3, #15
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2240      	movs	r2, #64	@ 0x40
 8002114:	4013      	ands	r3, r2
 8002116:	d12c      	bne.n	8002172 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2180      	movs	r1, #128	@ 0x80
 8002124:	430a      	orrs	r2, r1
 8002126:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002128:	f7fe fe9a 	bl	8000e60 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002130:	e014      	b.n	800215c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002132:	f7fe fe95 	bl	8000e60 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	200f      	movs	r0, #15
 800213e:	183b      	adds	r3, r7, r0
 8002140:	1839      	adds	r1, r7, r0
 8002142:	7809      	ldrb	r1, [r1, #0]
 8002144:	7019      	strb	r1, [r3, #0]
 8002146:	23fa      	movs	r3, #250	@ 0xfa
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	429a      	cmp	r2, r3
 800214c:	d906      	bls.n	800215c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800214e:	183b      	adds	r3, r7, r0
 8002150:	2203      	movs	r2, #3
 8002152:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2229      	movs	r2, #41	@ 0x29
 8002158:	2103      	movs	r1, #3
 800215a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2240      	movs	r2, #64	@ 0x40
 8002164:	4013      	ands	r3, r2
 8002166:	d104      	bne.n	8002172 <RTC_EnterInitMode+0x76>
 8002168:	230f      	movs	r3, #15
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d1df      	bne.n	8002132 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002172:	230f      	movs	r3, #15
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b004      	add	sp, #16
 800217e:	bd80      	pop	{r7, pc}

08002180 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	240f      	movs	r4, #15
 800218a:	193b      	adds	r3, r7, r4
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002190:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <RTC_ExitInitMode+0x84>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <RTC_ExitInitMode+0x84>)
 8002196:	2180      	movs	r1, #128	@ 0x80
 8002198:	438a      	bics	r2, r1
 800219a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <RTC_ExitInitMode+0x84>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2220      	movs	r2, #32
 80021a2:	4013      	ands	r3, r2
 80021a4:	d10d      	bne.n	80021c2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff ff81 	bl	80020b0 <HAL_RTC_WaitForSynchro>
 80021ae:	1e03      	subs	r3, r0, #0
 80021b0:	d021      	beq.n	80021f6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2229      	movs	r2, #41	@ 0x29
 80021b6:	2103      	movs	r1, #3
 80021b8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80021ba:	193b      	adds	r3, r7, r4
 80021bc:	2203      	movs	r2, #3
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e019      	b.n	80021f6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <RTC_ExitInitMode+0x84>)
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <RTC_ExitInitMode+0x84>)
 80021c8:	2120      	movs	r1, #32
 80021ca:	438a      	bics	r2, r1
 80021cc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff ff6d 	bl	80020b0 <HAL_RTC_WaitForSynchro>
 80021d6:	1e03      	subs	r3, r0, #0
 80021d8:	d007      	beq.n	80021ea <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2229      	movs	r2, #41	@ 0x29
 80021de:	2103      	movs	r1, #3
 80021e0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80021e2:	230f      	movs	r3, #15
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	2203      	movs	r2, #3
 80021e8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <RTC_ExitInitMode+0x84>)
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <RTC_ExitInitMode+0x84>)
 80021f0:	2120      	movs	r1, #32
 80021f2:	430a      	orrs	r2, r1
 80021f4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80021f6:	230f      	movs	r3, #15
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b005      	add	sp, #20
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	40002800 	.word	0x40002800

08002208 <memset>:
 8002208:	0003      	movs	r3, r0
 800220a:	1882      	adds	r2, r0, r2
 800220c:	4293      	cmp	r3, r2
 800220e:	d100      	bne.n	8002212 <memset+0xa>
 8002210:	4770      	bx	lr
 8002212:	7019      	strb	r1, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	e7f9      	b.n	800220c <memset+0x4>

08002218 <__libc_init_array>:
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	2600      	movs	r6, #0
 800221c:	4c0c      	ldr	r4, [pc, #48]	@ (8002250 <__libc_init_array+0x38>)
 800221e:	4d0d      	ldr	r5, [pc, #52]	@ (8002254 <__libc_init_array+0x3c>)
 8002220:	1b64      	subs	r4, r4, r5
 8002222:	10a4      	asrs	r4, r4, #2
 8002224:	42a6      	cmp	r6, r4
 8002226:	d109      	bne.n	800223c <__libc_init_array+0x24>
 8002228:	2600      	movs	r6, #0
 800222a:	f000 f819 	bl	8002260 <_init>
 800222e:	4c0a      	ldr	r4, [pc, #40]	@ (8002258 <__libc_init_array+0x40>)
 8002230:	4d0a      	ldr	r5, [pc, #40]	@ (800225c <__libc_init_array+0x44>)
 8002232:	1b64      	subs	r4, r4, r5
 8002234:	10a4      	asrs	r4, r4, #2
 8002236:	42a6      	cmp	r6, r4
 8002238:	d105      	bne.n	8002246 <__libc_init_array+0x2e>
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	00b3      	lsls	r3, r6, #2
 800223e:	58eb      	ldr	r3, [r5, r3]
 8002240:	4798      	blx	r3
 8002242:	3601      	adds	r6, #1
 8002244:	e7ee      	b.n	8002224 <__libc_init_array+0xc>
 8002246:	00b3      	lsls	r3, r6, #2
 8002248:	58eb      	ldr	r3, [r5, r3]
 800224a:	4798      	blx	r3
 800224c:	3601      	adds	r6, #1
 800224e:	e7f2      	b.n	8002236 <__libc_init_array+0x1e>
 8002250:	080022d4 	.word	0x080022d4
 8002254:	080022d4 	.word	0x080022d4
 8002258:	080022d8 	.word	0x080022d8
 800225c:	080022d4 	.word	0x080022d4

08002260 <_init>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr

0800226c <_fini>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr
