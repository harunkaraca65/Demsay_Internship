
DEM_PWM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002c68  08002c68  00003c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  00004264  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002cfc  08002cfc  00004264  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002cfc  08002cfc  00004264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08002d04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000264  08002f68  00004264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08002f68  00004348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a59e  00000000  00000000  0000428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bba  00000000  00000000  0000e82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  000103e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ca  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014af0  00000000  00000000  0001180a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d358  00000000  00000000  000262fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c36  00000000  00000000  00033652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002890  00000000  00000000  000ba2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000bcb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000264 	.word	0x20000264
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002c50 	.word	0x08002c50

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000268 	.word	0x20000268
 80000fc:	08002c50 	.word	0x08002c50

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fbfd 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f855 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fa1f 	bl	8000668 <MX_GPIO_Init>
  MX_RTC_Init();
 800022a:	f000 f8af 	bl	800038c <MX_RTC_Init>
  MX_TIM1_Init();
 800022e:	f000 f8db 	bl	80003e8 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000232:	f000 f991 	bl	8000558 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000236:	4b23      	ldr	r3, [pc, #140]	@ (80002c4 <main+0xac>)
 8000238:	2100      	movs	r1, #0
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fecc 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000240:	4b21      	ldr	r3, [pc, #132]	@ (80002c8 <main+0xb0>)
 8000242:	2100      	movs	r1, #0
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fec7 	bl	8001fd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800024a:	4b1e      	ldr	r3, [pc, #120]	@ (80002c4 <main+0xac>)
 800024c:	2104      	movs	r1, #4
 800024e:	0018      	movs	r0, r3
 8000250:	f001 fec2 	bl	8001fd8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 50; i++) {
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e02f      	b.n	80002ba <main+0xa2>
	         uint32_t red = colors[i][0];   // Kırmızı değeri
 800025a:	491c      	ldr	r1, [pc, #112]	@ (80002cc <main+0xb4>)
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	0013      	movs	r3, r2
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	189b      	adds	r3, r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	585b      	ldr	r3, [r3, r1]
 8000268:	60bb      	str	r3, [r7, #8]
	         uint32_t green = colors[i][1]; // Yeşil değeri
 800026a:	4918      	ldr	r1, [pc, #96]	@ (80002cc <main+0xb4>)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	0013      	movs	r3, r2
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	189b      	adds	r3, r3, r2
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	18cb      	adds	r3, r1, r3
 8000278:	3304      	adds	r3, #4
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	607b      	str	r3, [r7, #4]
	         uint32_t blue = colors[i][2];  // Mavi değeri
 800027e:	4913      	ldr	r1, [pc, #76]	@ (80002cc <main+0xb4>)
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	0013      	movs	r3, r2
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	189b      	adds	r3, r3, r2
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	18cb      	adds	r3, r1, r3
 800028c:	3308      	adds	r3, #8
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	603b      	str	r3, [r7, #0]

	         // PWM sinyallerini ayarla
	         __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, red);   // Kırmızı
 8000292:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <main+0xb0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	68ba      	ldr	r2, [r7, #8]
 8000298:	635a      	str	r2, [r3, #52]	@ 0x34
	         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, blue);  // Mavi
 800029a:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <main+0xac>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	683a      	ldr	r2, [r7, #0]
 80002a0:	635a      	str	r2, [r3, #52]	@ 0x34
	         __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, green); // Yeşil
 80002a2:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <main+0xac>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	639a      	str	r2, [r3, #56]	@ 0x38

	         // Belirli bir süre bekle (örneğin, 500 ms)
	         HAL_Delay(500);
 80002aa:	23fa      	movs	r3, #250	@ 0xfa
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fc3a 	bl	8000b28 <HAL_Delay>
	  for (int i = 0; i < 50; i++) {
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	3301      	adds	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	2b31      	cmp	r3, #49	@ 0x31
 80002be:	ddcc      	ble.n	800025a <main+0x42>
 80002c0:	e7c8      	b.n	8000254 <main+0x3c>
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	200002ac 	.word	0x200002ac
 80002c8:	200002f8 	.word	0x200002f8
 80002cc:	20000000 	.word	0x20000000

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b093      	sub	sp, #76	@ 0x4c
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	2414      	movs	r4, #20
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2334      	movs	r3, #52	@ 0x34
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f002 fc89 	bl	8002bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	2310      	movs	r3, #16
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f002 fc82 	bl	8002bf8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002f4:	2380      	movs	r3, #128	@ 0x80
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fe6f 	bl	8000fdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	220a      	movs	r2, #10
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	193b      	adds	r3, r7, r4
 8000306:	2280      	movs	r2, #128	@ 0x80
 8000308:	0052      	lsls	r2, r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2240      	movs	r2, #64	@ 0x40
 8000318:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2201      	movs	r2, #1
 800031e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2202      	movs	r2, #2
 8000324:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2208      	movs	r2, #8
 8000336:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2280      	movs	r2, #128	@ 0x80
 800033c:	0292      	lsls	r2, r2, #10
 800033e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2280      	movs	r2, #128	@ 0x80
 8000344:	0592      	lsls	r2, r2, #22
 8000346:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	0018      	movs	r0, r3
 800034c:	f000 fe86 	bl	800105c <HAL_RCC_OscConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000354:	f000 f9e6 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2202      	movs	r2, #2
 8000362:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2102      	movs	r1, #2
 8000374:	0018      	movs	r0, r3
 8000376:	f001 f981 	bl	800167c <HAL_RCC_ClockConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800037e:	f000 f9d1 	bl	8000724 <Error_Handler>
  }
}
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b013      	add	sp, #76	@ 0x4c
 8000388:	bd90      	pop	{r4, r7, pc}
	...

0800038c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000390:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <MX_RTC_Init+0x54>)
 8000392:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <MX_RTC_Init+0x58>)
 8000394:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000396:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <MX_RTC_Init+0x54>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800039c:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <MX_RTC_Init+0x54>)
 800039e:	227f      	movs	r2, #127	@ 0x7f
 80003a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <MX_RTC_Init+0x54>)
 80003a4:	22ff      	movs	r2, #255	@ 0xff
 80003a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <MX_RTC_Init+0x54>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_RTC_Init+0x54>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003b4:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <MX_RTC_Init+0x54>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003ba:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_RTC_Init+0x54>)
 80003bc:	2280      	movs	r2, #128	@ 0x80
 80003be:	05d2      	lsls	r2, r2, #23
 80003c0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003c2:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <MX_RTC_Init+0x54>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <MX_RTC_Init+0x54>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fc06 	bl	8001bdc <HAL_RTC_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80003d4:	f000 f9a6 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	20000280 	.word	0x20000280
 80003e4:	40002800 	.word	0x40002800

080003e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b098      	sub	sp, #96	@ 0x60
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ee:	2354      	movs	r3, #84	@ 0x54
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	230c      	movs	r3, #12
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f002 fbfd 	bl	8002bf8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003fe:	2338      	movs	r3, #56	@ 0x38
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	0018      	movs	r0, r3
 8000404:	231c      	movs	r3, #28
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f002 fbf5 	bl	8002bf8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	2334      	movs	r3, #52	@ 0x34
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f002 fbee 	bl	8002bf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800041c:	4b4b      	ldr	r3, [pc, #300]	@ (800054c <MX_TIM1_Init+0x164>)
 800041e:	4a4c      	ldr	r2, [pc, #304]	@ (8000550 <MX_TIM1_Init+0x168>)
 8000420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000422:	4b4a      	ldr	r3, [pc, #296]	@ (800054c <MX_TIM1_Init+0x164>)
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	4b48      	ldr	r3, [pc, #288]	@ (800054c <MX_TIM1_Init+0x164>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800042e:	4b47      	ldr	r3, [pc, #284]	@ (800054c <MX_TIM1_Init+0x164>)
 8000430:	4a48      	ldr	r2, [pc, #288]	@ (8000554 <MX_TIM1_Init+0x16c>)
 8000432:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000434:	4b45      	ldr	r3, [pc, #276]	@ (800054c <MX_TIM1_Init+0x164>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800043a:	4b44      	ldr	r3, [pc, #272]	@ (800054c <MX_TIM1_Init+0x164>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000440:	4b42      	ldr	r3, [pc, #264]	@ (800054c <MX_TIM1_Init+0x164>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000446:	4b41      	ldr	r3, [pc, #260]	@ (800054c <MX_TIM1_Init+0x164>)
 8000448:	0018      	movs	r0, r3
 800044a:	f001 fd6d 	bl	8001f28 <HAL_TIM_PWM_Init>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000452:	f000 f967 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000456:	2154      	movs	r1, #84	@ 0x54
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800046a:	187a      	adds	r2, r7, r1
 800046c:	4b37      	ldr	r3, [pc, #220]	@ (800054c <MX_TIM1_Init+0x164>)
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f002 fac3 	bl	80029fc <HAL_TIMEx_MasterConfigSynchronization>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800047a:	f000 f953 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800047e:	2138      	movs	r1, #56	@ 0x38
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2260      	movs	r2, #96	@ 0x60
 8000484:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	4b27      	ldr	r3, [pc, #156]	@ (800054c <MX_TIM1_Init+0x164>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fe69 	bl	8002188 <HAL_TIM_PWM_ConfigChannel>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80004ba:	f000 f933 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004be:	2338      	movs	r3, #56	@ 0x38
 80004c0:	18f9      	adds	r1, r7, r3
 80004c2:	4b22      	ldr	r3, [pc, #136]	@ (800054c <MX_TIM1_Init+0x164>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fe5e 	bl	8002188 <HAL_TIM_PWM_ConfigChannel>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80004d0:	f000 f928 	bl	8000724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	0192      	lsls	r2, r2, #6
 80004f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2280      	movs	r2, #128	@ 0x80
 8000510:	0492      	lsls	r2, r2, #18
 8000512:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000526:	1d3a      	adds	r2, r7, #4
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <MX_TIM1_Init+0x164>)
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f002 fac7 	bl	8002ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000536:	f000 f8f5 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800053a:	4b04      	ldr	r3, [pc, #16]	@ (800054c <MX_TIM1_Init+0x164>)
 800053c:	0018      	movs	r0, r3
 800053e:	f000 f999 	bl	8000874 <HAL_TIM_MspPostInit>

}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b018      	add	sp, #96	@ 0x60
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	200002ac 	.word	0x200002ac
 8000550:	40012c00 	.word	0x40012c00
 8000554:	0000ffff 	.word	0x0000ffff

08000558 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800055e:	2334      	movs	r3, #52	@ 0x34
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	231c      	movs	r3, #28
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f002 fb45 	bl	8002bf8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2334      	movs	r3, #52	@ 0x34
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f002 fb3e 	bl	8002bf8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800057c:	4b37      	ldr	r3, [pc, #220]	@ (800065c <MX_TIM16_Init+0x104>)
 800057e:	4a38      	ldr	r2, [pc, #224]	@ (8000660 <MX_TIM16_Init+0x108>)
 8000580:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000582:	4b36      	ldr	r3, [pc, #216]	@ (800065c <MX_TIM16_Init+0x104>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000588:	4b34      	ldr	r3, [pc, #208]	@ (800065c <MX_TIM16_Init+0x104>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800058e:	4b33      	ldr	r3, [pc, #204]	@ (800065c <MX_TIM16_Init+0x104>)
 8000590:	4a34      	ldr	r2, [pc, #208]	@ (8000664 <MX_TIM16_Init+0x10c>)
 8000592:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000594:	4b31      	ldr	r3, [pc, #196]	@ (800065c <MX_TIM16_Init+0x104>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800059a:	4b30      	ldr	r3, [pc, #192]	@ (800065c <MX_TIM16_Init+0x104>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a0:	4b2e      	ldr	r3, [pc, #184]	@ (800065c <MX_TIM16_Init+0x104>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005a6:	4b2d      	ldr	r3, [pc, #180]	@ (800065c <MX_TIM16_Init+0x104>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fc65 	bl	8001e78 <HAL_TIM_Base_Init>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80005b2:	f000 f8b7 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80005b6:	4b29      	ldr	r3, [pc, #164]	@ (800065c <MX_TIM16_Init+0x104>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fcb5 	bl	8001f28 <HAL_TIM_PWM_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f8af 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c6:	2134      	movs	r1, #52	@ 0x34
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2260      	movs	r2, #96	@ 0x60
 80005cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f2:	1879      	adds	r1, r7, r1
 80005f4:	4b19      	ldr	r3, [pc, #100]	@ (800065c <MX_TIM16_Init+0x104>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fdc5 	bl	8002188 <HAL_TIM_PWM_ConfigChannel>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000602:	f000 f88f 	bl	8000724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000606:	003b      	movs	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800060c:	003b      	movs	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000612:	003b      	movs	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800061e:	003b      	movs	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000624:	003b      	movs	r3, r7
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	0192      	lsls	r2, r2, #6
 800062a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800062c:	003b      	movs	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000632:	003b      	movs	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000638:	003a      	movs	r2, r7
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <MX_TIM16_Init+0x104>)
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fa3e 	bl	8002ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000648:	f000 f86c 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800064c:	4b03      	ldr	r3, [pc, #12]	@ (800065c <MX_TIM16_Init+0x104>)
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f910 	bl	8000874 <HAL_TIM_MspPostInit>

}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b014      	add	sp, #80	@ 0x50
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200002f8 	.word	0x200002f8
 8000660:	40014400 	.word	0x40014400
 8000664:	0000ffff 	.word	0x0000ffff

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b08b      	sub	sp, #44	@ 0x2c
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	2414      	movs	r4, #20
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fabd 	bl	8002bf8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b27      	ldr	r3, [pc, #156]	@ (800071c <MX_GPIO_Init+0xb4>)
 8000680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000682:	4b26      	ldr	r3, [pc, #152]	@ (800071c <MX_GPIO_Init+0xb4>)
 8000684:	2104      	movs	r1, #4
 8000686:	430a      	orrs	r2, r1
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
 800068a:	4b24      	ldr	r3, [pc, #144]	@ (800071c <MX_GPIO_Init+0xb4>)
 800068c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068e:	2204      	movs	r2, #4
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <MX_GPIO_Init+0xb4>)
 8000698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800069a:	4b20      	ldr	r3, [pc, #128]	@ (800071c <MX_GPIO_Init+0xb4>)
 800069c:	2120      	movs	r1, #32
 800069e:	430a      	orrs	r2, r1
 80006a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a2:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <MX_GPIO_Init+0xb4>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a6:	2220      	movs	r2, #32
 80006a8:	4013      	ands	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_GPIO_Init+0xb4>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_GPIO_Init+0xb4>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_GPIO_Init+0xb4>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_GPIO_Init+0xb4>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_GPIO_Init+0xb4>)
 80006cc:	2102      	movs	r1, #2
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_GPIO_Init+0xb4>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2202      	movs	r2, #2
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	015b      	lsls	r3, r3, #5
 80006e2:	480f      	ldr	r0, [pc, #60]	@ (8000720 <MX_GPIO_Init+0xb8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	0019      	movs	r1, r3
 80006e8:	f000 fc5a 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	@ 0x80
 80006f0:	0152      	lsls	r2, r2, #5
 80006f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000706:	193b      	adds	r3, r7, r4
 8000708:	4a05      	ldr	r2, [pc, #20]	@ (8000720 <MX_GPIO_Init+0xb8>)
 800070a:	0019      	movs	r1, r3
 800070c:	0010      	movs	r0, r2
 800070e:	f000 fae3 	bl	8000cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b00b      	add	sp, #44	@ 0x2c
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	40021000 	.word	0x40021000
 8000720:	50000400 	.word	0x50000400

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <HAL_MspInit+0x44>)
 8000738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_MspInit+0x44>)
 800073c:	2101      	movs	r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	641a      	str	r2, [r3, #64]	@ 0x40
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <HAL_MspInit+0x44>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	2201      	movs	r2, #1
 8000748:	4013      	ands	r3, r2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <HAL_MspInit+0x44>)
 8000750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_MspInit+0x44>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	0549      	lsls	r1, r1, #21
 8000758:	430a      	orrs	r2, r1
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_MspInit+0x44>)
 800075e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	055b      	lsls	r3, r3, #21
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b08b      	sub	sp, #44	@ 0x2c
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000780:	2410      	movs	r4, #16
 8000782:	193b      	adds	r3, r7, r4
 8000784:	0018      	movs	r0, r3
 8000786:	2318      	movs	r3, #24
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f002 fa34 	bl	8002bf8 <memset>
  if(hrtc->Instance==RTC)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <HAL_RTC_MspInit+0x74>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d124      	bne.n	80007e4 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	0292      	lsls	r2, r2, #10
 80007a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 f8ef 	bl	8001990 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80007b6:	f7ff ffb5 	bl	8000724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <HAL_RTC_MspInit+0x78>)
 80007bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_RTC_MspInit+0x78>)
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	0209      	lsls	r1, r1, #8
 80007c4:	430a      	orrs	r2, r1
 80007c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_RTC_MspInit+0x78>)
 80007ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_RTC_MspInit+0x78>)
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	00c9      	lsls	r1, r1, #3
 80007d2:	430a      	orrs	r2, r1
 80007d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_RTC_MspInit+0x78>)
 80007d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4013      	ands	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b00b      	add	sp, #44	@ 0x2c
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	40002800 	.word	0x40002800
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <HAL_TIM_PWM_MspInit+0x38>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d10d      	bne.n	8000822 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <HAL_TIM_PWM_MspInit+0x3c>)
 8000808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_TIM_PWM_MspInit+0x3c>)
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	0109      	lsls	r1, r1, #4
 8000810:	430a      	orrs	r2, r1
 8000812:	641a      	str	r2, [r3, #64]	@ 0x40
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_TIM_PWM_MspInit+0x3c>)
 8000816:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b004      	add	sp, #16
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	40012c00 	.word	0x40012c00
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <HAL_TIM_Base_MspInit+0x38>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d10d      	bne.n	8000862 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	0289      	lsls	r1, r1, #10
 8000850:	430a      	orrs	r2, r1
 8000852:	641a      	str	r2, [r3, #64]	@ 0x40
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 8000856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	029b      	lsls	r3, r3, #10
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	40014400 	.word	0x40014400
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08b      	sub	sp, #44	@ 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	2414      	movs	r4, #20
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f002 f9b6 	bl	8002bf8 <memset>
  if(htim->Instance==TIM1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a3a      	ldr	r2, [pc, #232]	@ (800097c <HAL_TIM_MspPostInit+0x108>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d145      	bne.n	8000922 <HAL_TIM_MspPostInit+0xae>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b3a      	ldr	r3, [pc, #232]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 8000898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800089a:	4b39      	ldr	r3, [pc, #228]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a2:	4b37      	ldr	r3, [pc, #220]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 80008a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 80008b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b2:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 80008b4:	2102      	movs	r1, #2
 80008b6:	430a      	orrs	r2, r1
 80008b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 80008bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008be:	2202      	movs	r2, #2
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2202      	movs	r2, #2
 80008d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2202      	movs	r2, #2
 80008e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	193a      	adds	r2, r7, r4
 80008e8:	23a0      	movs	r3, #160	@ 0xa0
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 f9f2 	bl	8000cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f4:	0021      	movs	r1, r4
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2208      	movs	r2, #8
 80008fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2202      	movs	r2, #2
 8000900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2201      	movs	r2, #1
 8000912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	187b      	adds	r3, r7, r1
 8000916:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <HAL_TIM_MspPostInit+0x110>)
 8000918:	0019      	movs	r1, r3
 800091a:	0010      	movs	r0, r2
 800091c:	f000 f9dc 	bl	8000cd8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM16_MspPostInit 1 */

    /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000920:	e027      	b.n	8000972 <HAL_TIM_MspPostInit+0xfe>
  else if(htim->Instance==TIM16)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a18      	ldr	r2, [pc, #96]	@ (8000988 <HAL_TIM_MspPostInit+0x114>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d122      	bne.n	8000972 <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 800092e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 8000932:	2101      	movs	r1, #1
 8000934:	430a      	orrs	r2, r1
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <HAL_TIM_MspPostInit+0x10c>)
 800093a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093c:	2201      	movs	r2, #1
 800093e:	4013      	ands	r3, r2
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000944:	2114      	movs	r1, #20
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2240      	movs	r2, #64	@ 0x40
 800094a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2202      	movs	r2, #2
 8000950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2205      	movs	r2, #5
 8000962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	187a      	adds	r2, r7, r1
 8000966:	23a0      	movs	r3, #160	@ 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f000 f9b3 	bl	8000cd8 <HAL_GPIO_Init>
}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b00b      	add	sp, #44	@ 0x2c
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	40012c00 	.word	0x40012c00
 8000980:	40021000 	.word	0x40021000
 8000984:	50000400 	.word	0x50000400
 8000988:	40014400 	.word	0x40014400

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f89c 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009cc:	f7ff fff7 	bl	80009be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	@ (8000a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <LoopForever+0xe>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <LoopForever+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f6:	f002 f907 	bl	8002c08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009fa:	f7ff fc0d 	bl	8000218 <main>

080009fe <LoopForever>:

LoopForever:
  b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8000a0c:	08002d04 	.word	0x08002d04
  ldr r2, =_sbss
 8000a10:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8000a14:	20000348 	.word	0x20000348

08000a18 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_Init+0x3c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_Init+0x3c>)
 8000a2e:	2180      	movs	r1, #128	@ 0x80
 8000a30:	0049      	lsls	r1, r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f810 	bl	8000a5c <HAL_InitTick>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d003      	beq.n	8000a48 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e001      	b.n	8000a4c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fe72 	bl	8000730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40022000 	.word	0x40022000

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	230f      	movs	r3, #15
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <HAL_InitTick+0x88>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d02b      	beq.n	8000acc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <HAL_InitTick+0x8c>)
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_InitTick+0x88>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	23fa      	movs	r3, #250	@ 0xfa
 8000a80:	0098      	lsls	r0, r3, #2
 8000a82:	f7ff fb3d 	bl	8000100 <__udivsi3>
 8000a86:	0003      	movs	r3, r0
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f7ff fb38 	bl	8000100 <__udivsi3>
 8000a90:	0003      	movs	r3, r0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f913 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d112      	bne.n	8000ac2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d80a      	bhi.n	8000ab8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 f8f2 	bl	8000c94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <HAL_InitTick+0x90>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e00d      	b.n	8000ad4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e008      	b.n	8000ad4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e003      	b.n	8000ad4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000acc:	230f      	movs	r3, #15
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b005      	add	sp, #20
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	20000260 	.word	0x20000260
 8000ae8:	20000258 	.word	0x20000258
 8000aec:	2000025c 	.word	0x2000025c

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	18d2      	adds	r2, r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <HAL_IncTick+0x20>)
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000260 	.word	0x20000260
 8000b10:	20000344 	.word	0x20000344

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	@ (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	20000344 	.word	0x20000344

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fff0 	bl	8000b14 <HAL_GetTick>
 8000b34:	0003      	movs	r3, r0
 8000b36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	001a      	movs	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	189b      	adds	r3, r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	f7ff ffe0 	bl	8000b14 <HAL_GetTick>
 8000b54:	0002      	movs	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b004      	add	sp, #16
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	20000260 	.word	0x20000260

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	0002      	movs	r2, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b84:	d828      	bhi.n	8000bd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b86:	4a2f      	ldr	r2, [pc, #188]	@ (8000c44 <__NVIC_SetPriority+0xd4>)
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	33c0      	adds	r3, #192	@ 0xc0
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	589b      	ldr	r3, [r3, r2]
 8000b96:	1dfa      	adds	r2, r7, #7
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	00d2      	lsls	r2, r2, #3
 8000ba2:	21ff      	movs	r1, #255	@ 0xff
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	22ff      	movs	r2, #255	@ 0xff
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <__NVIC_SetPriority+0xd4>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	33c0      	adds	r3, #192	@ 0xc0
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bd6:	e031      	b.n	8000c3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c48 <__NVIC_SetPriority+0xd8>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0019      	movs	r1, r3
 8000be0:	230f      	movs	r3, #15
 8000be2:	400b      	ands	r3, r1
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3306      	adds	r3, #6
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	3304      	adds	r3, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1dfa      	adds	r2, r7, #7
 8000bf4:	7812      	ldrb	r2, [r2, #0]
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	00d2      	lsls	r2, r2, #3
 8000bfe:	21ff      	movs	r1, #255	@ 0xff
 8000c00:	4091      	lsls	r1, r2
 8000c02:	000a      	movs	r2, r1
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	401a      	ands	r2, r3
 8000c08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	019b      	lsls	r3, r3, #6
 8000c0e:	22ff      	movs	r2, #255	@ 0xff
 8000c10:	401a      	ands	r2, r3
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	0018      	movs	r0, r3
 8000c18:	2303      	movs	r3, #3
 8000c1a:	4003      	ands	r3, r0
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c20:	4809      	ldr	r0, [pc, #36]	@ (8000c48 <__NVIC_SetPriority+0xd8>)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	001c      	movs	r4, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	4023      	ands	r3, r4
 8000c2c:	3b08      	subs	r3, #8
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	430a      	orrs	r2, r1
 8000c32:	3306      	adds	r3, #6
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	18c3      	adds	r3, r0, r3
 8000c38:	3304      	adds	r3, #4
 8000c3a:	601a      	str	r2, [r3, #0]
}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b003      	add	sp, #12
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	1e5a      	subs	r2, r3, #1
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	045b      	lsls	r3, r3, #17
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d301      	bcc.n	8000c64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c60:	2301      	movs	r3, #1
 8000c62:	e010      	b.n	8000c86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <SysTick_Config+0x44>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	3a01      	subs	r2, #1
 8000c6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	2103      	movs	r1, #3
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff ff7c 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SysTick_Config+0x44>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <SysTick_Config+0x44>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	1c02      	adds	r2, r0, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	0011      	movs	r1, r2
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff ffbf 	bl	8000c4c <SysTick_Config>
 8000cce:	0003      	movs	r3, r0
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e147      	b.n	8000f78 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <HAL_GPIO_Init+0x28>
 8000cfe:	e138      	b.n	8000f72 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d005      	beq.n	8000d18 <HAL_GPIO_Init+0x40>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d130      	bne.n	8000d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	2201      	movs	r2, #1
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d017      	beq.n	8000db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2203      	movs	r2, #3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d123      	bne.n	8000e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	691a      	ldr	r2, [r3, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2107      	movs	r1, #7
 8000dee:	400b      	ands	r3, r1
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	6939      	ldr	r1, [r7, #16]
 8000e08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	401a      	ands	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	23c0      	movs	r3, #192	@ 0xc0
 8000e44:	029b      	lsls	r3, r3, #10
 8000e46:	4013      	ands	r3, r2
 8000e48:	d100      	bne.n	8000e4c <HAL_GPIO_Init+0x174>
 8000e4a:	e092      	b.n	8000f72 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e4c:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3318      	adds	r3, #24
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	589b      	ldr	r3, [r3, r2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	220f      	movs	r2, #15
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	23a0      	movs	r3, #160	@ 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1ca>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a45      	ldr	r2, [pc, #276]	@ (8000f94 <HAL_GPIO_Init+0x2bc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1c6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a44      	ldr	r2, [pc, #272]	@ (8000f98 <HAL_GPIO_Init+0x2c0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1c2>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a43      	ldr	r2, [pc, #268]	@ (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1be>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1cc>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1cc>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1cc>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1cc>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	00d2      	lsls	r2, r2, #3
 8000eac:	4093      	lsls	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eb4:	4936      	ldr	r1, [pc, #216]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3318      	adds	r3, #24
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec2:	4b33      	ldr	r3, [pc, #204]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	035b      	lsls	r3, r3, #13
 8000eda:	4013      	ands	r3, r2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000eec:	4b28      	ldr	r3, [pc, #160]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	039b      	lsls	r3, r3, #14
 8000f04:	4013      	ands	r3, r2
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f16:	4a1e      	ldr	r2, [pc, #120]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000f18:	2384      	movs	r3, #132	@ 0x84
 8000f1a:	58d3      	ldr	r3, [r2, r3]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3c:	4914      	ldr	r1, [pc, #80]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	2284      	movs	r2, #132	@ 0x84
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f44:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	58d3      	ldr	r3, [r2, r3]
 8000f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	025b      	lsls	r3, r3, #9
 8000f5e:	4013      	ands	r3, r2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f6a:	4909      	ldr	r1, [pc, #36]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	40da      	lsrs	r2, r3
 8000f80:	1e13      	subs	r3, r2, #0
 8000f82:	d000      	beq.n	8000f86 <HAL_GPIO_Init+0x2ae>
 8000f84:	e6b0      	b.n	8000ce8 <HAL_GPIO_Init+0x10>
  }
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b006      	add	sp, #24
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021800 	.word	0x40021800
 8000f94:	50000400 	.word	0x50000400
 8000f98:	50000800 	.word	0x50000800
 8000f9c:	50000c00 	.word	0x50000c00

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	0008      	movs	r0, r1
 8000faa:	0011      	movs	r1, r2
 8000fac:	1cbb      	adds	r3, r7, #2
 8000fae:	1c02      	adds	r2, r0, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
 8000fb2:	1c7b      	adds	r3, r7, #1
 8000fb4:	1c0a      	adds	r2, r1, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb8:	1c7b      	adds	r3, r7, #1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc0:	1cbb      	adds	r3, r7, #2
 8000fc2:	881a      	ldrh	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e003      	b.n	8000fd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	1cbb      	adds	r3, r7, #2
 8000fcc:	881a      	ldrh	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a19      	ldr	r2, [pc, #100]	@ (8001050 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	2380      	movs	r3, #128	@ 0x80
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d11f      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	0013      	movs	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	189b      	adds	r3, r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4912      	ldr	r1, [pc, #72]	@ (8001058 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff f876 	bl	8000100 <__udivsi3>
 8001014:	0003      	movs	r3, r0
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800101a:	e008      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3b01      	subs	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e001      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e009      	b.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	401a      	ands	r2, r3
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	429a      	cmp	r2, r3
 800103e:	d0ed      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	40007000 	.word	0x40007000
 8001050:	fffff9ff 	.word	0xfffff9ff
 8001054:	20000258 	.word	0x20000258
 8001058:	000f4240 	.word	0x000f4240

0800105c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e2f3      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0x1e>
 8001078:	e07c      	b.n	8001174 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800107a:	4bc3      	ldr	r3, [pc, #780]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2238      	movs	r2, #56	@ 0x38
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001084:	4bc0      	ldr	r3, [pc, #768]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2203      	movs	r2, #3
 800108a:	4013      	ands	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b10      	cmp	r3, #16
 8001092:	d102      	bne.n	800109a <HAL_RCC_OscConfig+0x3e>
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d002      	beq.n	80010a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b08      	cmp	r3, #8
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4bb9      	ldr	r3, [pc, #740]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	029b      	lsls	r3, r3, #10
 80010a8:	4013      	ands	r3, r2
 80010aa:	d062      	beq.n	8001172 <HAL_RCC_OscConfig+0x116>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d15e      	bne.n	8001172 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e2ce      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	025b      	lsls	r3, r3, #9
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d107      	bne.n	80010d4 <HAL_RCC_OscConfig+0x78>
 80010c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4baf      	ldr	r3, [pc, #700]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80010ca:	2180      	movs	r1, #128	@ 0x80
 80010cc:	0249      	lsls	r1, r1, #9
 80010ce:	430a      	orrs	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e020      	b.n	8001116 <HAL_RCC_OscConfig+0xba>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	23a0      	movs	r3, #160	@ 0xa0
 80010da:	02db      	lsls	r3, r3, #11
 80010dc:	429a      	cmp	r2, r3
 80010de:	d10e      	bne.n	80010fe <HAL_RCC_OscConfig+0xa2>
 80010e0:	4ba9      	ldr	r3, [pc, #676]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4ba8      	ldr	r3, [pc, #672]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	2180      	movs	r1, #128	@ 0x80
 80010e8:	02c9      	lsls	r1, r1, #11
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	4ba6      	ldr	r3, [pc, #664]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0249      	lsls	r1, r1, #9
 80010f8:	430a      	orrs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e00b      	b.n	8001116 <HAL_RCC_OscConfig+0xba>
 80010fe:	4ba2      	ldr	r3, [pc, #648]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4ba1      	ldr	r3, [pc, #644]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001104:	49a1      	ldr	r1, [pc, #644]	@ (800138c <HAL_RCC_OscConfig+0x330>)
 8001106:	400a      	ands	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	4b9f      	ldr	r3, [pc, #636]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b9e      	ldr	r3, [pc, #632]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001110:	499f      	ldr	r1, [pc, #636]	@ (8001390 <HAL_RCC_OscConfig+0x334>)
 8001112:	400a      	ands	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d014      	beq.n	8001148 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fcf9 	bl	8000b14 <HAL_GetTick>
 8001122:	0003      	movs	r3, r0
 8001124:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fcf4 	bl	8000b14 <HAL_GetTick>
 800112c:	0002      	movs	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	@ 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e28d      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113a:	4b93      	ldr	r3, [pc, #588]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xcc>
 8001146:	e015      	b.n	8001174 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fce4 	bl	8000b14 <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001152:	f7ff fcdf 	bl	8000b14 <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	@ 0x64
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e278      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001164:	4b88      	ldr	r3, [pc, #544]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	029b      	lsls	r3, r3, #10
 800116c:	4013      	ands	r3, r2
 800116e:	d1f0      	bne.n	8001152 <HAL_RCC_OscConfig+0xf6>
 8001170:	e000      	b.n	8001174 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2202      	movs	r2, #2
 800117a:	4013      	ands	r3, r2
 800117c:	d100      	bne.n	8001180 <HAL_RCC_OscConfig+0x124>
 800117e:	e099      	b.n	80012b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001180:	4b81      	ldr	r3, [pc, #516]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2238      	movs	r2, #56	@ 0x38
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118a:	4b7f      	ldr	r3, [pc, #508]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2203      	movs	r2, #3
 8001190:	4013      	ands	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2b10      	cmp	r3, #16
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0x144>
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d002      	beq.n	80011a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d135      	bne.n	8001212 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a6:	4b78      	ldr	r3, [pc, #480]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4013      	ands	r3, r2
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x162>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e24b      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b72      	ldr	r3, [pc, #456]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a74      	ldr	r2, [pc, #464]	@ (8001394 <HAL_RCC_OscConfig+0x338>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0019      	movs	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	021a      	lsls	r2, r3, #8
 80011ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80011d0:	430a      	orrs	r2, r1
 80011d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d112      	bne.n	8001200 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011da:	4b6b      	ldr	r3, [pc, #428]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	@ (8001398 <HAL_RCC_OscConfig+0x33c>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	0019      	movs	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	4b67      	ldr	r3, [pc, #412]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	430a      	orrs	r2, r1
 80011ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	0adb      	lsrs	r3, r3, #11
 80011f4:	2207      	movs	r2, #7
 80011f6:	4013      	ands	r3, r2
 80011f8:	4a68      	ldr	r2, [pc, #416]	@ (800139c <HAL_RCC_OscConfig+0x340>)
 80011fa:	40da      	lsrs	r2, r3
 80011fc:	4b68      	ldr	r3, [pc, #416]	@ (80013a0 <HAL_RCC_OscConfig+0x344>)
 80011fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001200:	4b68      	ldr	r3, [pc, #416]	@ (80013a4 <HAL_RCC_OscConfig+0x348>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff fc29 	bl	8000a5c <HAL_InitTick>
 800120a:	1e03      	subs	r3, r0, #0
 800120c:	d051      	beq.n	80012b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e221      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d030      	beq.n	800127c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800121a:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a5e      	ldr	r2, [pc, #376]	@ (8001398 <HAL_RCC_OscConfig+0x33c>)
 8001220:	4013      	ands	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	4b57      	ldr	r3, [pc, #348]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800122e:	4b56      	ldr	r3, [pc, #344]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b55      	ldr	r3, [pc, #340]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001234:	2180      	movs	r1, #128	@ 0x80
 8001236:	0049      	lsls	r1, r1, #1
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fc6a 	bl	8000b14 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc65 	bl	8000b14 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e1fe      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001258:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4013      	ands	r3, r2
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	4a4a      	ldr	r2, [pc, #296]	@ (8001394 <HAL_RCC_OscConfig+0x338>)
 800126a:	4013      	ands	r3, r2
 800126c:	0019      	movs	r1, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	021a      	lsls	r2, r3, #8
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	e01b      	b.n	80012b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800127c:	4b42      	ldr	r3, [pc, #264]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b41      	ldr	r3, [pc, #260]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001282:	4949      	ldr	r1, [pc, #292]	@ (80013a8 <HAL_RCC_OscConfig+0x34c>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fc44 	bl	8000b14 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001292:	f7ff fc3f 	bl	8000b14 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e1d8      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a4:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4013      	ands	r3, r2
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x236>
 80012b0:	e000      	b.n	80012b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2208      	movs	r2, #8
 80012ba:	4013      	ands	r3, r2
 80012bc:	d047      	beq.n	800134e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2238      	movs	r2, #56	@ 0x38
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b18      	cmp	r3, #24
 80012c8:	d10a      	bne.n	80012e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ce:	2202      	movs	r2, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d03c      	beq.n	800134e <HAL_RCC_OscConfig+0x2f2>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d138      	bne.n	800134e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e1ba      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d019      	beq.n	800131c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc0e 	bl	8000b14 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc09 	bl	8000b14 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1a2      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d0f1      	beq.n	80012fe <HAL_RCC_OscConfig+0x2a2>
 800131a:	e018      	b.n	800134e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 800131e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001322:	2101      	movs	r1, #1
 8001324:	438a      	bics	r2, r1
 8001326:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fbf4 	bl	8000b14 <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fbef 	bl	8000b14 <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e188      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001348:	2202      	movs	r2, #2
 800134a:	4013      	ands	r3, r2
 800134c:	d1f1      	bne.n	8001332 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2204      	movs	r2, #4
 8001354:	4013      	ands	r3, r2
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x2fe>
 8001358:	e0c6      	b.n	80014e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135a:	231f      	movs	r3, #31
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2238      	movs	r2, #56	@ 0x38
 8001368:	4013      	ands	r3, r2
 800136a:	2b20      	cmp	r3, #32
 800136c:	d11e      	bne.n	80013ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_RCC_OscConfig+0x32c>)
 8001370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d100      	bne.n	800137a <HAL_RCC_OscConfig+0x31e>
 8001378:	e0b6      	b.n	80014e8 <HAL_RCC_OscConfig+0x48c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d000      	beq.n	8001384 <HAL_RCC_OscConfig+0x328>
 8001382:	e0b1      	b.n	80014e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e166      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
 8001388:	40021000 	.word	0x40021000
 800138c:	fffeffff 	.word	0xfffeffff
 8001390:	fffbffff 	.word	0xfffbffff
 8001394:	ffff80ff 	.word	0xffff80ff
 8001398:	ffffc7ff 	.word	0xffffc7ff
 800139c:	00f42400 	.word	0x00f42400
 80013a0:	20000258 	.word	0x20000258
 80013a4:	2000025c 	.word	0x2000025c
 80013a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013ac:	4bac      	ldr	r3, [pc, #688]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80013ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013b0:	2380      	movs	r3, #128	@ 0x80
 80013b2:	055b      	lsls	r3, r3, #21
 80013b4:	4013      	ands	r3, r2
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x360>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x362>
 80013bc:	2300      	movs	r3, #0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d011      	beq.n	80013e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4ba7      	ldr	r3, [pc, #668]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80013c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013c6:	4ba6      	ldr	r3, [pc, #664]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80013c8:	2180      	movs	r1, #128	@ 0x80
 80013ca:	0549      	lsls	r1, r1, #21
 80013cc:	430a      	orrs	r2, r1
 80013ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013d0:	4ba3      	ldr	r3, [pc, #652]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80013d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	055b      	lsls	r3, r3, #21
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013de:	231f      	movs	r3, #31
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e6:	4b9f      	ldr	r3, [pc, #636]	@ (8001664 <HAL_RCC_OscConfig+0x608>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	@ 0x80
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	d11a      	bne.n	8001428 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f2:	4b9c      	ldr	r3, [pc, #624]	@ (8001664 <HAL_RCC_OscConfig+0x608>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b9b      	ldr	r3, [pc, #620]	@ (8001664 <HAL_RCC_OscConfig+0x608>)
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	0049      	lsls	r1, r1, #1
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb88 	bl	8000b14 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fb83 	bl	8000b14 <HAL_GetTick>
 800140e:	0002      	movs	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e11c      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800141c:	4b91      	ldr	r3, [pc, #580]	@ (8001664 <HAL_RCC_OscConfig+0x608>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4013      	ands	r3, r2
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x3e2>
 8001430:	4b8b      	ldr	r3, [pc, #556]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001432:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001434:	4b8a      	ldr	r3, [pc, #552]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800143c:	e01c      	b.n	8001478 <HAL_RCC_OscConfig+0x41c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x404>
 8001446:	4b86      	ldr	r3, [pc, #536]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001448:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800144a:	4b85      	ldr	r3, [pc, #532]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800144c:	2104      	movs	r1, #4
 800144e:	430a      	orrs	r2, r1
 8001450:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001452:	4b83      	ldr	r3, [pc, #524]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001456:	4b82      	ldr	r3, [pc, #520]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001458:	2101      	movs	r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0x41c>
 8001460:	4b7f      	ldr	r3, [pc, #508]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001464:	4b7e      	ldr	r3, [pc, #504]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001466:	2101      	movs	r1, #1
 8001468:	438a      	bics	r2, r1
 800146a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800146c:	4b7c      	ldr	r3, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800146e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001470:	4b7b      	ldr	r3, [pc, #492]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001472:	2104      	movs	r1, #4
 8001474:	438a      	bics	r2, r1
 8001476:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d014      	beq.n	80014aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb48 	bl	8000b14 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001488:	e009      	b.n	800149e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb43 	bl	8000b14 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4a74      	ldr	r2, [pc, #464]	@ (8001668 <HAL_RCC_OscConfig+0x60c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e0db      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149e:	4b70      	ldr	r3, [pc, #448]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80014a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x42e>
 80014a8:	e013      	b.n	80014d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb33 	bl	8000b14 <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b2:	e009      	b.n	80014c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb2e 	bl	8000b14 <HAL_GetTick>
 80014b8:	0002      	movs	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4a6a      	ldr	r2, [pc, #424]	@ (8001668 <HAL_RCC_OscConfig+0x60c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0c6      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014c8:	4b65      	ldr	r3, [pc, #404]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80014ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014cc:	2202      	movs	r2, #2
 80014ce:	4013      	ands	r3, r2
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014d2:	231f      	movs	r3, #31
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	4b60      	ldr	r3, [pc, #384]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80014de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80014e2:	4962      	ldr	r1, [pc, #392]	@ (800166c <HAL_RCC_OscConfig+0x610>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x496>
 80014f0:	e0b0      	b.n	8001654 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2238      	movs	r2, #56	@ 0x38
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d100      	bne.n	8001500 <HAL_RCC_OscConfig+0x4a4>
 80014fe:	e078      	b.n	80015f2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d153      	bne.n	80015b0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b54      	ldr	r3, [pc, #336]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800150e:	4958      	ldr	r1, [pc, #352]	@ (8001670 <HAL_RCC_OscConfig+0x614>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fafe 	bl	8000b14 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff faf9 	bl	8000b14 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e092      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	049b      	lsls	r3, r3, #18
 8001538:	4013      	ands	r3, r2
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153c:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <HAL_RCC_OscConfig+0x618>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1a      	ldr	r2, [r3, #32]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	431a      	orrs	r2, r3
 8001564:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001566:	430a      	orrs	r2, r1
 8001568:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b3c      	ldr	r3, [pc, #240]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001570:	2180      	movs	r1, #128	@ 0x80
 8001572:	0449      	lsls	r1, r1, #17
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001578:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 800157e:	2180      	movs	r1, #128	@ 0x80
 8001580:	0549      	lsls	r1, r1, #21
 8001582:	430a      	orrs	r2, r1
 8001584:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fac5 	bl	8000b14 <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fac0 	bl	8000b14 <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e059      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	049b      	lsls	r3, r3, #18
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x534>
 80015ae:	e051      	b.n	8001654 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80015b6:	492e      	ldr	r1, [pc, #184]	@ (8001670 <HAL_RCC_OscConfig+0x614>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff faaa 	bl	8000b14 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff faa5 	bl	8000b14 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e03e      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d8:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	049b      	lsls	r3, r3, #18
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 80015ea:	4923      	ldr	r1, [pc, #140]	@ (8001678 <HAL_RCC_OscConfig+0x61c>)
 80015ec:	400a      	ands	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	e030      	b.n	8001654 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e02b      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_RCC_OscConfig+0x604>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2203      	movs	r2, #3
 8001608:	401a      	ands	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	429a      	cmp	r2, r3
 8001610:	d11e      	bne.n	8001650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2270      	movs	r2, #112	@ 0x70
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d117      	bne.n	8001650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	23fe      	movs	r3, #254	@ 0xfe
 8001624:	01db      	lsls	r3, r3, #7
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d10e      	bne.n	8001650 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	23f8      	movs	r3, #248	@ 0xf8
 8001636:	039b      	lsls	r3, r3, #14
 8001638:	401a      	ands	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	0f5b      	lsrs	r3, r3, #29
 8001646:	075a      	lsls	r2, r3, #29
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b008      	add	sp, #32
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	40021000 	.word	0x40021000
 8001664:	40007000 	.word	0x40007000
 8001668:	00001388 	.word	0x00001388
 800166c:	efffffff 	.word	0xefffffff
 8001670:	feffffff 	.word	0xfeffffff
 8001674:	1fc1808c 	.word	0x1fc1808c
 8001678:	effefffc 	.word	0xeffefffc

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0e9      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b76      	ldr	r3, [pc, #472]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2207      	movs	r2, #7
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d91e      	bls.n	80016dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b73      	ldr	r3, [pc, #460]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2207      	movs	r2, #7
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	4b70      	ldr	r3, [pc, #448]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fa30 	bl	8000b14 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b8:	e009      	b.n	80016ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ba:	f7ff fa2b 	bl	8000b14 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001870 <HAL_RCC_ClockConfig+0x1f4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0ca      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ce:	4b67      	ldr	r3, [pc, #412]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2207      	movs	r2, #7
 80016d4:	4013      	ands	r3, r2
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1ee      	bne.n	80016ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d015      	beq.n	8001712 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2204      	movs	r2, #4
 80016ec:	4013      	ands	r3, r2
 80016ee:	d006      	beq.n	80016fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016f0:	4b60      	ldr	r3, [pc, #384]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 80016f6:	21e0      	movs	r1, #224	@ 0xe0
 80016f8:	01c9      	lsls	r1, r1, #7
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	4a5d      	ldr	r2, [pc, #372]	@ (8001878 <HAL_RCC_ClockConfig+0x1fc>)
 8001704:	4013      	ands	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 800170e:	430a      	orrs	r2, r1
 8001710:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4013      	ands	r3, r2
 800171a:	d057      	beq.n	80017cc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001724:	4b53      	ldr	r3, [pc, #332]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	d12b      	bne.n	8001788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e097      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d107      	bne.n	800174c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173c:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	049b      	lsls	r3, r3, #18
 8001744:	4013      	ands	r3, r2
 8001746:	d11f      	bne.n	8001788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e08b      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001754:	4b47      	ldr	r3, [pc, #284]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4013      	ands	r3, r2
 800175e:	d113      	bne.n	8001788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e07f      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d106      	bne.n	800177a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176c:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 800176e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001770:	2202      	movs	r2, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d108      	bne.n	8001788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e074      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b3e      	ldr	r3, [pc, #248]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 800177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e06d      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001788:	4b3a      	ldr	r3, [pc, #232]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2207      	movs	r2, #7
 800178e:	4393      	bics	r3, r2
 8001790:	0019      	movs	r1, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800179c:	f7ff f9ba 	bl	8000b14 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a4:	e009      	b.n	80017ba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a6:	f7ff f9b5 	bl	8000b14 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001870 <HAL_RCC_ClockConfig+0x1f4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e054      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2238      	movs	r2, #56	@ 0x38
 80017c0:	401a      	ands	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1ec      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b27      	ldr	r3, [pc, #156]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2207      	movs	r2, #7
 80017d2:	4013      	ands	r3, r2
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d21e      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b24      	ldr	r3, [pc, #144]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2207      	movs	r2, #7
 80017e0:	4393      	bics	r3, r2
 80017e2:	0019      	movs	r1, r3
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ec:	f7ff f992 	bl	8000b14 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f4:	e009      	b.n	800180a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f6:	f7ff f98d 	bl	8000b14 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4a1b      	ldr	r2, [pc, #108]	@ (8001870 <HAL_RCC_ClockConfig+0x1f4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e02c      	b.n	8001864 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800180a:	4b18      	ldr	r3, [pc, #96]	@ (800186c <HAL_RCC_ClockConfig+0x1f0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2207      	movs	r2, #7
 8001810:	4013      	ands	r3, r2
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d1ee      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2204      	movs	r2, #4
 800181e:	4013      	ands	r3, r2
 8001820:	d009      	beq.n	8001836 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4a15      	ldr	r2, [pc, #84]	@ (800187c <HAL_RCC_ClockConfig+0x200>)
 8001828:	4013      	ands	r3, r2
 800182a:	0019      	movs	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001836:	f000 f829 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800183a:	0001      	movs	r1, r0
 800183c:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <HAL_RCC_ClockConfig+0x1f8>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	220f      	movs	r2, #15
 8001844:	401a      	ands	r2, r3
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <HAL_RCC_ClockConfig+0x204>)
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	58d3      	ldr	r3, [r2, r3]
 800184c:	221f      	movs	r2, #31
 800184e:	4013      	ands	r3, r2
 8001850:	000a      	movs	r2, r1
 8001852:	40da      	lsrs	r2, r3
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_RCC_ClockConfig+0x208>)
 8001856:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_RCC_ClockConfig+0x20c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff f8fd 	bl	8000a5c <HAL_InitTick>
 8001862:	0003      	movs	r3, r0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	00001388 	.word	0x00001388
 8001874:	40021000 	.word	0x40021000
 8001878:	fffff0ff 	.word	0xfffff0ff
 800187c:	ffff8fff 	.word	0xffff8fff
 8001880:	08002c68 	.word	0x08002c68
 8001884:	20000258 	.word	0x20000258
 8001888:	2000025c 	.word	0x2000025c

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001892:	4b3c      	ldr	r3, [pc, #240]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2238      	movs	r2, #56	@ 0x38
 8001898:	4013      	ands	r3, r2
 800189a:	d10f      	bne.n	80018bc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800189c:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0adb      	lsrs	r3, r3, #11
 80018a2:	2207      	movs	r2, #7
 80018a4:	4013      	ands	r3, r2
 80018a6:	2201      	movs	r2, #1
 80018a8:	409a      	lsls	r2, r3
 80018aa:	0013      	movs	r3, r2
 80018ac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	4835      	ldr	r0, [pc, #212]	@ (8001988 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018b2:	f7fe fc25 	bl	8000100 <__udivsi3>
 80018b6:	0003      	movs	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e05d      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018bc:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2238      	movs	r2, #56	@ 0x38
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018c8:	4b30      	ldr	r3, [pc, #192]	@ (800198c <HAL_RCC_GetSysClockFreq+0x100>)
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	e054      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2238      	movs	r2, #56	@ 0x38
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d138      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018da:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2203      	movs	r2, #3
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	2207      	movs	r2, #7
 80018ec:	4013      	ands	r3, r2
 80018ee:	3301      	adds	r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d10d      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	4824      	ldr	r0, [pc, #144]	@ (800198c <HAL_RCC_GetSysClockFreq+0x100>)
 80018fc:	f7fe fc00 	bl	8000100 <__udivsi3>
 8001900:	0003      	movs	r3, r0
 8001902:	0019      	movs	r1, r3
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	227f      	movs	r2, #127	@ 0x7f
 800190c:	4013      	ands	r3, r2
 800190e:	434b      	muls	r3, r1
 8001910:	617b      	str	r3, [r7, #20]
        break;
 8001912:	e00d      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	481c      	ldr	r0, [pc, #112]	@ (8001988 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001918:	f7fe fbf2 	bl	8000100 <__udivsi3>
 800191c:	0003      	movs	r3, r0
 800191e:	0019      	movs	r1, r3
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	227f      	movs	r2, #127	@ 0x7f
 8001928:	4013      	ands	r3, r2
 800192a:	434b      	muls	r3, r1
 800192c:	617b      	str	r3, [r7, #20]
        break;
 800192e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0f5b      	lsrs	r3, r3, #29
 8001936:	2207      	movs	r2, #7
 8001938:	4013      	ands	r3, r2
 800193a:	3301      	adds	r3, #1
 800193c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	6978      	ldr	r0, [r7, #20]
 8001942:	f7fe fbdd 	bl	8000100 <__udivsi3>
 8001946:	0003      	movs	r3, r0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e015      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2238      	movs	r2, #56	@ 0x38
 8001952:	4013      	ands	r3, r2
 8001954:	2b20      	cmp	r3, #32
 8001956:	d103      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2238      	movs	r2, #56	@ 0x38
 8001966:	4013      	ands	r3, r2
 8001968:	2b18      	cmp	r3, #24
 800196a:	d103      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800196c:	23fa      	movs	r3, #250	@ 0xfa
 800196e:	01db      	lsls	r3, r3, #7
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	e001      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001978:	693b      	ldr	r3, [r7, #16]
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b006      	add	sp, #24
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	40021000 	.word	0x40021000
 8001988:	00f42400 	.word	0x00f42400
 800198c:	007a1200 	.word	0x007a1200

08001990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001998:	2313      	movs	r3, #19
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019a0:	2312      	movs	r3, #18
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	d100      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80019b4:	e0a3      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b6:	2011      	movs	r0, #17
 80019b8:	183b      	adds	r3, r7, r0
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019be:	4b7f      	ldr	r3, [pc, #508]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	055b      	lsls	r3, r3, #21
 80019c6:	4013      	ands	r3, r2
 80019c8:	d110      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b7c      	ldr	r3, [pc, #496]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ce:	4b7b      	ldr	r3, [pc, #492]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	0549      	lsls	r1, r1, #21
 80019d4:	430a      	orrs	r2, r1
 80019d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019d8:	4b78      	ldr	r3, [pc, #480]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80019da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	055b      	lsls	r3, r3, #21
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e6:	183b      	adds	r3, r7, r0
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ec:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b73      	ldr	r3, [pc, #460]	@ (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019f2:	2180      	movs	r1, #128	@ 0x80
 80019f4:	0049      	lsls	r1, r1, #1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019fa:	f7ff f88b 	bl	8000b14 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a02:	e00b      	b.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a04:	f7ff f886 	bl	8000b14 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d904      	bls.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a12:	2313      	movs	r3, #19
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2203      	movs	r2, #3
 8001a18:	701a      	strb	r2, [r3, #0]
        break;
 8001a1a:	e005      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a1c:	4b68      	ldr	r3, [pc, #416]	@ (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	d0ed      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001a28:	2313      	movs	r3, #19
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d154      	bne.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a32:	4b62      	ldr	r3, [pc, #392]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a36:	23c0      	movs	r3, #192	@ 0xc0
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d019      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d014      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a58:	4b58      	ldr	r3, [pc, #352]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a5c:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a5e:	2180      	movs	r1, #128	@ 0x80
 8001a60:	0249      	lsls	r1, r1, #9
 8001a62:	430a      	orrs	r2, r1
 8001a64:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a66:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a6a:	4b54      	ldr	r3, [pc, #336]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a6c:	4956      	ldr	r1, [pc, #344]	@ (8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a72:	4b52      	ldr	r3, [pc, #328]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d016      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff f848 	bl	8000b14 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a88:	e00c      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff f843 	bl	8000b14 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a4d      	ldr	r2, [pc, #308]	@ (8001bcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d904      	bls.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001a9a:	2313      	movs	r3, #19
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	701a      	strb	r2, [r3, #0]
            break;
 8001aa2:	e004      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa4:	4b45      	ldr	r3, [pc, #276]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d0ed      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001aae:	2313      	movs	r3, #19
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ab8:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001abc:	4a41      	ldr	r2, [pc, #260]	@ (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	0019      	movs	r1, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001acc:	e00c      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ace:	2312      	movs	r3, #18
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	2213      	movs	r2, #19
 8001ad4:	18ba      	adds	r2, r7, r2
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e005      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001adc:	2312      	movs	r3, #18
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	2213      	movs	r2, #19
 8001ae2:	18ba      	adds	r2, r7, r2
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ae8:	2311      	movs	r3, #17
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d105      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af2:	4b32      	ldr	r3, [pc, #200]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001af6:	4b31      	ldr	r3, [pc, #196]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001af8:	4935      	ldr	r1, [pc, #212]	@ (8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001afa:	400a      	ands	r2, r1
 8001afc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2201      	movs	r2, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b08:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4393      	bics	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4b29      	ldr	r3, [pc, #164]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2220      	movs	r2, #32
 8001b22:	4013      	ands	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b26:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	01db      	lsls	r3, r3, #7
 8001b42:	4013      	ands	r3, r2
 8001b44:	d015      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b46:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	0899      	lsrs	r1, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	05db      	lsls	r3, r3, #23
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d106      	bne.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	0249      	lsls	r1, r1, #9
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d016      	beq.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b82:	4a15      	ldr	r2, [pc, #84]	@ (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	2380      	movs	r3, #128	@ 0x80
 8001b98:	01db      	lsls	r3, r3, #7
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d106      	bne.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	0249      	lsls	r1, r1, #9
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001bac:	2312      	movs	r3, #18
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	781b      	ldrb	r3, [r3, #0]
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b006      	add	sp, #24
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	fffffcff 	.word	0xfffffcff
 8001bc8:	fffeffff 	.word	0xfffeffff
 8001bcc:	00001388 	.word	0x00001388
 8001bd0:	efffffff 	.word	0xefffffff
 8001bd4:	ffffcfff 	.word	0xffffcfff
 8001bd8:	ffff3fff 	.word	0xffff3fff

08001bdc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001be4:	230f      	movs	r3, #15
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d100      	bne.n	8001bf4 <HAL_RTC_Init+0x18>
 8001bf2:	e08c      	b.n	8001d0e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2229      	movs	r2, #41	@ 0x29
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10b      	bne.n	8001c18 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2228      	movs	r2, #40	@ 0x28
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2288      	movs	r2, #136	@ 0x88
 8001c0c:	0212      	lsls	r2, r2, #8
 8001c0e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7fe fdb0 	bl	8000778 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2229      	movs	r2, #41	@ 0x29
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2210      	movs	r2, #16
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d062      	beq.n	8001cf4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	22ca      	movs	r2, #202	@ 0xca
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2253      	movs	r2, #83	@ 0x53
 8001c3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8001c3e:	250f      	movs	r5, #15
 8001c40:	197c      	adds	r4, r7, r5
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f891 	bl	8001d6c <RTC_EnterInitMode>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8001c4e:	0028      	movs	r0, r5
 8001c50:	183b      	adds	r3, r7, r0
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d12c      	bne.n	8001cb2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	492e      	ldr	r1, [pc, #184]	@ (8001d1c <HAL_RTC_Init+0x140>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6912      	ldr	r2, [r2, #16]
 8001c8e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6919      	ldr	r1, [r3, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	041a      	lsls	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8001ca4:	183c      	adds	r4, r7, r0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f8a1 	bl	8001df0 <RTC_ExitInitMode>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d116      	bne.n	8001cea <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	00d2      	lsls	r2, r2, #3
 8001cc8:	08d2      	lsrs	r2, r2, #3
 8001cca:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6999      	ldr	r1, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	22ff      	movs	r2, #255	@ 0xff
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cf2:	e003      	b.n	8001cfc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d103      	bne.n	8001d0e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2229      	movs	r2, #41	@ 0x29
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781b      	ldrb	r3, [r3, #0]
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b004      	add	sp, #16
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	fb8fffbf 	.word	0xfb8fffbf

08001d20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <HAL_RTC_WaitForSynchro+0x48>)
 8001d2e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001d30:	f7fe fef0 	bl	8000b14 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001d38:	e00a      	b.n	8001d50 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d3a:	f7fe feeb 	bl	8000b14 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1ad2      	subs	r2, r2, r3
 8001d44:	23fa      	movs	r3, #250	@ 0xfa
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d901      	bls.n	8001d50 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e006      	b.n	8001d5e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0ee      	beq.n	8001d3a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	0001005f 	.word	0x0001005f

08001d6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8001d74:	230f      	movs	r3, #15
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2240      	movs	r2, #64	@ 0x40
 8001d84:	4013      	ands	r3, r2
 8001d86:	d12c      	bne.n	8001de2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	430a      	orrs	r2, r1
 8001d96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001d98:	f7fe febc 	bl	8000b14 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001da0:	e014      	b.n	8001dcc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001da2:	f7fe feb7 	bl	8000b14 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1ad2      	subs	r2, r2, r3
 8001dac:	200f      	movs	r0, #15
 8001dae:	183b      	adds	r3, r7, r0
 8001db0:	1839      	adds	r1, r7, r0
 8001db2:	7809      	ldrb	r1, [r1, #0]
 8001db4:	7019      	strb	r1, [r3, #0]
 8001db6:	23fa      	movs	r3, #250	@ 0xfa
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d906      	bls.n	8001dcc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8001dbe:	183b      	adds	r3, r7, r0
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2229      	movs	r2, #41	@ 0x29
 8001dc8:	2103      	movs	r1, #3
 8001dca:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2240      	movs	r2, #64	@ 0x40
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d104      	bne.n	8001de2 <RTC_EnterInitMode+0x76>
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d1df      	bne.n	8001da2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001de2:	230f      	movs	r3, #15
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	781b      	ldrb	r3, [r3, #0]
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df8:	240f      	movs	r4, #15
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <RTC_ExitInitMode+0x84>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <RTC_ExitInitMode+0x84>)
 8001e06:	2180      	movs	r1, #128	@ 0x80
 8001e08:	438a      	bics	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <RTC_ExitInitMode+0x84>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2220      	movs	r2, #32
 8001e12:	4013      	ands	r3, r2
 8001e14:	d10d      	bne.n	8001e32 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff ff81 	bl	8001d20 <HAL_RTC_WaitForSynchro>
 8001e1e:	1e03      	subs	r3, r0, #0
 8001e20:	d021      	beq.n	8001e66 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2229      	movs	r2, #41	@ 0x29
 8001e26:	2103      	movs	r1, #3
 8001e28:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001e2a:	193b      	adds	r3, r7, r4
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e019      	b.n	8001e66 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <RTC_ExitInitMode+0x84>)
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <RTC_ExitInitMode+0x84>)
 8001e38:	2120      	movs	r1, #32
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff ff6d 	bl	8001d20 <HAL_RTC_WaitForSynchro>
 8001e46:	1e03      	subs	r3, r0, #0
 8001e48:	d007      	beq.n	8001e5a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2229      	movs	r2, #41	@ 0x29
 8001e4e:	2103      	movs	r1, #3
 8001e50:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001e52:	230f      	movs	r3, #15
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2203      	movs	r2, #3
 8001e58:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <RTC_ExitInitMode+0x84>)
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <RTC_ExitInitMode+0x84>)
 8001e60:	2120      	movs	r1, #32
 8001e62:	430a      	orrs	r2, r1
 8001e64:	619a      	str	r2, [r3, #24]
  }

  return status;
 8001e66:	230f      	movs	r3, #15
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b005      	add	sp, #20
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	40002800 	.word	0x40002800

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e04a      	b.n	8001f20 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223d      	movs	r2, #61	@ 0x3d
 8001e8e:	5c9b      	ldrb	r3, [r3, r2]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	223c      	movs	r2, #60	@ 0x3c
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7fe fcc7 	bl	8000834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	223d      	movs	r2, #61	@ 0x3d
 8001eaa:	2102      	movs	r1, #2
 8001eac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	0010      	movs	r0, r2
 8001eba:	f000 fa65 	bl	8002388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2248      	movs	r2, #72	@ 0x48
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	223e      	movs	r2, #62	@ 0x3e
 8001eca:	2101      	movs	r1, #1
 8001ecc:	5499      	strb	r1, [r3, r2]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	223f      	movs	r2, #63	@ 0x3f
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	5499      	strb	r1, [r3, r2]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2240      	movs	r2, #64	@ 0x40
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2241      	movs	r2, #65	@ 0x41
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2242      	movs	r2, #66	@ 0x42
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2243      	movs	r2, #67	@ 0x43
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2244      	movs	r2, #68	@ 0x44
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2245      	movs	r2, #69	@ 0x45
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2246      	movs	r2, #70	@ 0x46
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2247      	movs	r2, #71	@ 0x47
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	223d      	movs	r2, #61	@ 0x3d
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e04a      	b.n	8001fd0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223d      	movs	r2, #61	@ 0x3d
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	223c      	movs	r2, #60	@ 0x3c
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7fe fc4f 	bl	80007f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	223d      	movs	r2, #61	@ 0x3d
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	0019      	movs	r1, r3
 8001f68:	0010      	movs	r0, r2
 8001f6a:	f000 fa0d 	bl	8002388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2248      	movs	r2, #72	@ 0x48
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223e      	movs	r2, #62	@ 0x3e
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223f      	movs	r2, #63	@ 0x3f
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2240      	movs	r2, #64	@ 0x40
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2241      	movs	r2, #65	@ 0x41
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2242      	movs	r2, #66	@ 0x42
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2243      	movs	r2, #67	@ 0x43
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2244      	movs	r2, #68	@ 0x44
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2245      	movs	r2, #69	@ 0x45
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2246      	movs	r2, #70	@ 0x46
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2247      	movs	r2, #71	@ 0x47
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223d      	movs	r2, #61	@ 0x3d
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_TIM_PWM_Start+0x22>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	223e      	movs	r2, #62	@ 0x3e
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	1e5a      	subs	r2, r3, #1
 8001ff4:	4193      	sbcs	r3, r2
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	e037      	b.n	800206a <HAL_TIM_PWM_Start+0x92>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d108      	bne.n	8002012 <HAL_TIM_PWM_Start+0x3a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	223f      	movs	r2, #63	@ 0x3f
 8002004:	5c9b      	ldrb	r3, [r3, r2]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	4193      	sbcs	r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	e02b      	b.n	800206a <HAL_TIM_PWM_Start+0x92>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d108      	bne.n	800202a <HAL_TIM_PWM_Start+0x52>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2240      	movs	r2, #64	@ 0x40
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	4193      	sbcs	r3, r2
 8002026:	b2db      	uxtb	r3, r3
 8002028:	e01f      	b.n	800206a <HAL_TIM_PWM_Start+0x92>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d108      	bne.n	8002042 <HAL_TIM_PWM_Start+0x6a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2241      	movs	r2, #65	@ 0x41
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	1e5a      	subs	r2, r3, #1
 800203c:	4193      	sbcs	r3, r2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	e013      	b.n	800206a <HAL_TIM_PWM_Start+0x92>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d108      	bne.n	800205a <HAL_TIM_PWM_Start+0x82>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2242      	movs	r2, #66	@ 0x42
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	4193      	sbcs	r3, r2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	e007      	b.n	800206a <HAL_TIM_PWM_Start+0x92>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2243      	movs	r2, #67	@ 0x43
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	4193      	sbcs	r3, r2
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e07b      	b.n	800216a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <HAL_TIM_PWM_Start+0xaa>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	223e      	movs	r2, #62	@ 0x3e
 800207c:	2102      	movs	r1, #2
 800207e:	5499      	strb	r1, [r3, r2]
 8002080:	e023      	b.n	80020ca <HAL_TIM_PWM_Start+0xf2>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d104      	bne.n	8002092 <HAL_TIM_PWM_Start+0xba>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	223f      	movs	r2, #63	@ 0x3f
 800208c:	2102      	movs	r1, #2
 800208e:	5499      	strb	r1, [r3, r2]
 8002090:	e01b      	b.n	80020ca <HAL_TIM_PWM_Start+0xf2>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d104      	bne.n	80020a2 <HAL_TIM_PWM_Start+0xca>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2240      	movs	r2, #64	@ 0x40
 800209c:	2102      	movs	r1, #2
 800209e:	5499      	strb	r1, [r3, r2]
 80020a0:	e013      	b.n	80020ca <HAL_TIM_PWM_Start+0xf2>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d104      	bne.n	80020b2 <HAL_TIM_PWM_Start+0xda>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2241      	movs	r2, #65	@ 0x41
 80020ac:	2102      	movs	r1, #2
 80020ae:	5499      	strb	r1, [r3, r2]
 80020b0:	e00b      	b.n	80020ca <HAL_TIM_PWM_Start+0xf2>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d104      	bne.n	80020c2 <HAL_TIM_PWM_Start+0xea>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2242      	movs	r2, #66	@ 0x42
 80020bc:	2102      	movs	r1, #2
 80020be:	5499      	strb	r1, [r3, r2]
 80020c0:	e003      	b.n	80020ca <HAL_TIM_PWM_Start+0xf2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2243      	movs	r2, #67	@ 0x43
 80020c6:	2102      	movs	r1, #2
 80020c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	2201      	movs	r2, #1
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 fc6e 	bl	80029b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	@ (8002174 <HAL_TIM_PWM_Start+0x19c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_TIM_PWM_Start+0x11e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <HAL_TIM_PWM_Start+0x1a0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_TIM_PWM_Start+0x11e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a22      	ldr	r2, [pc, #136]	@ (800217c <HAL_TIM_PWM_Start+0x1a4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_PWM_Start+0x122>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_TIM_PWM_Start+0x124>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2180      	movs	r1, #128	@ 0x80
 800210c:	0209      	lsls	r1, r1, #8
 800210e:	430a      	orrs	r2, r1
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <HAL_TIM_PWM_Start+0x19c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIM_PWM_Start+0x14e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <HAL_TIM_PWM_Start+0x1a8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d116      	bne.n	8002154 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a15      	ldr	r2, [pc, #84]	@ (8002184 <HAL_TIM_PWM_Start+0x1ac>)
 800212e:	4013      	ands	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d016      	beq.n	8002166 <HAL_TIM_PWM_Start+0x18e>
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	429a      	cmp	r2, r3
 8002140:	d011      	beq.n	8002166 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	430a      	orrs	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002152:	e008      	b.n	8002166 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e000      	b.n	8002168 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002166:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40014400 	.word	0x40014400
 800217c:	40014800 	.word	0x40014800
 8002180:	40000400 	.word	0x40000400
 8002184:	00010007 	.word	0x00010007

08002188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002194:	2317      	movs	r3, #23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	223c      	movs	r2, #60	@ 0x3c
 80021a0:	5c9b      	ldrb	r3, [r3, r2]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0e5      	b.n	8002376 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	223c      	movs	r2, #60	@ 0x3c
 80021ae:	2101      	movs	r1, #1
 80021b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b14      	cmp	r3, #20
 80021b6:	d900      	bls.n	80021ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80021b8:	e0d1      	b.n	800235e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	009a      	lsls	r2, r3, #2
 80021be:	4b70      	ldr	r3, [pc, #448]	@ (8002380 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	0011      	movs	r1, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 f954 	bl	800247c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2108      	movs	r1, #8
 80021e0:	430a      	orrs	r2, r1
 80021e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2104      	movs	r1, #4
 80021f0:	438a      	bics	r2, r1
 80021f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6999      	ldr	r1, [r3, #24]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	619a      	str	r2, [r3, #24]
      break;
 8002206:	e0af      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	0011      	movs	r1, r2
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f9b3 	bl	800257c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	0109      	lsls	r1, r1, #4
 8002224:	430a      	orrs	r2, r1
 8002226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4954      	ldr	r1, [pc, #336]	@ (8002384 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002234:	400a      	ands	r2, r1
 8002236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6999      	ldr	r1, [r3, #24]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	021a      	lsls	r2, r3, #8
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	619a      	str	r2, [r3, #24]
      break;
 800224c:	e08c      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	0011      	movs	r1, r2
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fa0e 	bl	8002678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2108      	movs	r1, #8
 8002268:	430a      	orrs	r2, r1
 800226a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69d9      	ldr	r1, [r3, #28]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	61da      	str	r2, [r3, #28]
      break;
 800228e:	e06b      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f000 fa6f 	bl	800277c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2180      	movs	r1, #128	@ 0x80
 80022aa:	0109      	lsls	r1, r1, #4
 80022ac:	430a      	orrs	r2, r1
 80022ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4932      	ldr	r1, [pc, #200]	@ (8002384 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80022bc:	400a      	ands	r2, r1
 80022be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69d9      	ldr	r1, [r3, #28]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	021a      	lsls	r2, r3, #8
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	61da      	str	r2, [r3, #28]
      break;
 80022d4:	e048      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	0011      	movs	r1, r2
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fab0 	bl	8002844 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2108      	movs	r1, #8
 80022f0:	430a      	orrs	r2, r1
 80022f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2104      	movs	r1, #4
 8002300:	438a      	bics	r2, r1
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002316:	e027      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	0011      	movs	r1, r2
 8002320:	0018      	movs	r0, r3
 8002322:	f000 fae9 	bl	80028f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2180      	movs	r1, #128	@ 0x80
 8002332:	0109      	lsls	r1, r1, #4
 8002334:	430a      	orrs	r2, r1
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4910      	ldr	r1, [pc, #64]	@ (8002384 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002344:	400a      	ands	r2, r1
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	021a      	lsls	r2, r3, #8
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800235c:	e004      	b.n	8002368 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800235e:	2317      	movs	r3, #23
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
      break;
 8002366:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	223c      	movs	r2, #60	@ 0x3c
 800236c:	2100      	movs	r1, #0
 800236e:	5499      	strb	r1, [r3, r2]

  return status;
 8002370:	2317      	movs	r3, #23
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b006      	add	sp, #24
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	08002ca8 	.word	0x08002ca8
 8002384:	fffffbff 	.word	0xfffffbff

08002388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a32      	ldr	r2, [pc, #200]	@ (8002464 <TIM_Base_SetConfig+0xdc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x20>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a31      	ldr	r2, [pc, #196]	@ (8002468 <TIM_Base_SetConfig+0xe0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2270      	movs	r2, #112	@ 0x70
 80023ac:	4393      	bics	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a29      	ldr	r2, [pc, #164]	@ (8002464 <TIM_Base_SetConfig+0xdc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00f      	beq.n	80023e2 <TIM_Base_SetConfig+0x5a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a28      	ldr	r2, [pc, #160]	@ (8002468 <TIM_Base_SetConfig+0xe0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <TIM_Base_SetConfig+0x5a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a27      	ldr	r2, [pc, #156]	@ (800246c <TIM_Base_SetConfig+0xe4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x5a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <TIM_Base_SetConfig+0xe8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x5a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a25      	ldr	r2, [pc, #148]	@ (8002474 <TIM_Base_SetConfig+0xec>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a24      	ldr	r2, [pc, #144]	@ (8002478 <TIM_Base_SetConfig+0xf0>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2280      	movs	r2, #128	@ 0x80
 80023f8:	4393      	bics	r3, r2
 80023fa:	001a      	movs	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a11      	ldr	r2, [pc, #68]	@ (8002464 <TIM_Base_SetConfig+0xdc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0xaa>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <TIM_Base_SetConfig+0xe8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0xaa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <TIM_Base_SetConfig+0xec>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d103      	bne.n	800243a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2201      	movs	r2, #1
 8002452:	4393      	bics	r3, r2
 8002454:	001a      	movs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
  }
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40000400 	.word	0x40000400
 800246c:	40002000 	.word	0x40002000
 8002470:	40014400 	.word	0x40014400
 8002474:	40014800 	.word	0x40014800
 8002478:	fffffcff 	.word	0xfffffcff

0800247c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	2201      	movs	r2, #1
 8002492:	4393      	bics	r3, r2
 8002494:	001a      	movs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002564 <TIM_OC1_SetConfig+0xe8>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4393      	bics	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2202      	movs	r2, #2
 80024c4:	4393      	bics	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <TIM_OC1_SetConfig+0xec>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <TIM_OC1_SetConfig+0x6e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a23      	ldr	r2, [pc, #140]	@ (800256c <TIM_OC1_SetConfig+0xf0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_OC1_SetConfig+0x6e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a22      	ldr	r2, [pc, #136]	@ (8002570 <TIM_OC1_SetConfig+0xf4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10c      	bne.n	8002504 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2208      	movs	r2, #8
 80024ee:	4393      	bics	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2204      	movs	r2, #4
 8002500:	4393      	bics	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a18      	ldr	r2, [pc, #96]	@ (8002568 <TIM_OC1_SetConfig+0xec>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <TIM_OC1_SetConfig+0xa0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a17      	ldr	r2, [pc, #92]	@ (800256c <TIM_OC1_SetConfig+0xf0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_OC1_SetConfig+0xa0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a16      	ldr	r2, [pc, #88]	@ (8002570 <TIM_OC1_SetConfig+0xf4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d111      	bne.n	8002540 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4a15      	ldr	r2, [pc, #84]	@ (8002574 <TIM_OC1_SetConfig+0xf8>)
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4a14      	ldr	r2, [pc, #80]	@ (8002578 <TIM_OC1_SetConfig+0xfc>)
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	621a      	str	r2, [r3, #32]
}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	46bd      	mov	sp, r7
 800255e:	b006      	add	sp, #24
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	fffeff8f 	.word	0xfffeff8f
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40014400 	.word	0x40014400
 8002570:	40014800 	.word	0x40014800
 8002574:	fffffeff 	.word	0xfffffeff
 8002578:	fffffdff 	.word	0xfffffdff

0800257c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	2210      	movs	r2, #16
 8002592:	4393      	bics	r3, r2
 8002594:	001a      	movs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a2c      	ldr	r2, [pc, #176]	@ (800265c <TIM_OC2_SetConfig+0xe0>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002660 <TIM_OC2_SetConfig+0xe4>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2220      	movs	r2, #32
 80025c6:	4393      	bics	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a22      	ldr	r2, [pc, #136]	@ (8002664 <TIM_OC2_SetConfig+0xe8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10d      	bne.n	80025fa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	4393      	bics	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2240      	movs	r2, #64	@ 0x40
 80025f6:	4393      	bics	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <TIM_OC2_SetConfig+0xe8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <TIM_OC2_SetConfig+0x96>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a18      	ldr	r2, [pc, #96]	@ (8002668 <TIM_OC2_SetConfig+0xec>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <TIM_OC2_SetConfig+0x96>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a17      	ldr	r2, [pc, #92]	@ (800266c <TIM_OC2_SetConfig+0xf0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d113      	bne.n	800263a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4a16      	ldr	r2, [pc, #88]	@ (8002670 <TIM_OC2_SetConfig+0xf4>)
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <TIM_OC2_SetConfig+0xf8>)
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	621a      	str	r2, [r3, #32]
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b006      	add	sp, #24
 800265a:	bd80      	pop	{r7, pc}
 800265c:	feff8fff 	.word	0xfeff8fff
 8002660:	fffffcff 	.word	0xfffffcff
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40014400 	.word	0x40014400
 800266c:	40014800 	.word	0x40014800
 8002670:	fffffbff 	.word	0xfffffbff
 8002674:	fffff7ff 	.word	0xfffff7ff

08002678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a31      	ldr	r2, [pc, #196]	@ (8002754 <TIM_OC3_SetConfig+0xdc>)
 800268e:	401a      	ands	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002758 <TIM_OC3_SetConfig+0xe0>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2203      	movs	r2, #3
 80026ac:	4393      	bics	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4a27      	ldr	r2, [pc, #156]	@ (800275c <TIM_OC3_SetConfig+0xe4>)
 80026be:	4013      	ands	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a23      	ldr	r2, [pc, #140]	@ (8002760 <TIM_OC3_SetConfig+0xe8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d10d      	bne.n	80026f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4a22      	ldr	r2, [pc, #136]	@ (8002764 <TIM_OC3_SetConfig+0xec>)
 80026da:	4013      	ands	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002768 <TIM_OC3_SetConfig+0xf0>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002760 <TIM_OC3_SetConfig+0xe8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <TIM_OC3_SetConfig+0x92>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1b      	ldr	r2, [pc, #108]	@ (800276c <TIM_OC3_SetConfig+0xf4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_OC3_SetConfig+0x92>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1a      	ldr	r2, [pc, #104]	@ (8002770 <TIM_OC3_SetConfig+0xf8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d113      	bne.n	8002732 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4a19      	ldr	r2, [pc, #100]	@ (8002774 <TIM_OC3_SetConfig+0xfc>)
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a18      	ldr	r2, [pc, #96]	@ (8002778 <TIM_OC3_SetConfig+0x100>)
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	621a      	str	r2, [r3, #32]
}
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b006      	add	sp, #24
 8002752:	bd80      	pop	{r7, pc}
 8002754:	fffffeff 	.word	0xfffffeff
 8002758:	fffeff8f 	.word	0xfffeff8f
 800275c:	fffffdff 	.word	0xfffffdff
 8002760:	40012c00 	.word	0x40012c00
 8002764:	fffff7ff 	.word	0xfffff7ff
 8002768:	fffffbff 	.word	0xfffffbff
 800276c:	40014400 	.word	0x40014400
 8002770:	40014800 	.word	0x40014800
 8002774:	ffffefff 	.word	0xffffefff
 8002778:	ffffdfff 	.word	0xffffdfff

0800277c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4a24      	ldr	r2, [pc, #144]	@ (8002824 <TIM_OC4_SetConfig+0xa8>)
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a20      	ldr	r2, [pc, #128]	@ (8002828 <TIM_OC4_SetConfig+0xac>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a1f      	ldr	r2, [pc, #124]	@ (800282c <TIM_OC4_SetConfig+0xb0>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <TIM_OC4_SetConfig+0xb4>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	031b      	lsls	r3, r3, #12
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a17      	ldr	r2, [pc, #92]	@ (8002834 <TIM_OC4_SetConfig+0xb8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <TIM_OC4_SetConfig+0x70>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <TIM_OC4_SetConfig+0xbc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <TIM_OC4_SetConfig+0x70>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a15      	ldr	r2, [pc, #84]	@ (800283c <TIM_OC4_SetConfig+0xc0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d109      	bne.n	8002800 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <TIM_OC4_SetConfig+0xc4>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	621a      	str	r2, [r3, #32]
}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b006      	add	sp, #24
 8002820:	bd80      	pop	{r7, pc}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	ffffefff 	.word	0xffffefff
 8002828:	feff8fff 	.word	0xfeff8fff
 800282c:	fffffcff 	.word	0xfffffcff
 8002830:	ffffdfff 	.word	0xffffdfff
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800
 8002840:	ffffbfff 	.word	0xffffbfff

08002844 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a21      	ldr	r2, [pc, #132]	@ (80028e0 <TIM_OC5_SetConfig+0x9c>)
 800285a:	401a      	ands	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <TIM_OC5_SetConfig+0xa0>)
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4a19      	ldr	r2, [pc, #100]	@ (80028e8 <TIM_OC5_SetConfig+0xa4>)
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a15      	ldr	r2, [pc, #84]	@ (80028ec <TIM_OC5_SetConfig+0xa8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <TIM_OC5_SetConfig+0x66>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <TIM_OC5_SetConfig+0xac>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d003      	beq.n	80028aa <TIM_OC5_SetConfig+0x66>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a13      	ldr	r2, [pc, #76]	@ (80028f4 <TIM_OC5_SetConfig+0xb0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d109      	bne.n	80028be <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <TIM_OC5_SetConfig+0x9c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	46c0      	nop			@ (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b006      	add	sp, #24
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	fffeffff 	.word	0xfffeffff
 80028e4:	fffeff8f 	.word	0xfffeff8f
 80028e8:	fffdffff 	.word	0xfffdffff
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40014400 	.word	0x40014400
 80028f4:	40014800 	.word	0x40014800

080028f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a22      	ldr	r2, [pc, #136]	@ (8002998 <TIM_OC6_SetConfig+0xa0>)
 800290e:	401a      	ands	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a1e      	ldr	r2, [pc, #120]	@ (800299c <TIM_OC6_SetConfig+0xa4>)
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4a1a      	ldr	r2, [pc, #104]	@ (80029a0 <TIM_OC6_SetConfig+0xa8>)
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	051b      	lsls	r3, r3, #20
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a16      	ldr	r2, [pc, #88]	@ (80029a4 <TIM_OC6_SetConfig+0xac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_OC6_SetConfig+0x68>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <TIM_OC6_SetConfig+0xb0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_OC6_SetConfig+0x68>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <TIM_OC6_SetConfig+0xb4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d109      	bne.n	8002974 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	4a13      	ldr	r2, [pc, #76]	@ (80029b0 <TIM_OC6_SetConfig+0xb8>)
 8002964:	4013      	ands	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	029b      	lsls	r3, r3, #10
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b006      	add	sp, #24
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	ffefffff 	.word	0xffefffff
 800299c:	feff8fff 	.word	0xfeff8fff
 80029a0:	ffdfffff 	.word	0xffdfffff
 80029a4:	40012c00 	.word	0x40012c00
 80029a8:	40014400 	.word	0x40014400
 80029ac:	40014800 	.word	0x40014800
 80029b0:	fffbffff 	.word	0xfffbffff

080029b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	221f      	movs	r2, #31
 80029c4:	4013      	ands	r3, r2
 80029c6:	2201      	movs	r2, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	0013      	movs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	43d2      	mvns	r2, r2
 80029d6:	401a      	ands	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	211f      	movs	r1, #31
 80029e4:	400b      	ands	r3, r1
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4099      	lsls	r1, r3
 80029ea:	000b      	movs	r3, r1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b006      	add	sp, #24
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223c      	movs	r2, #60	@ 0x3c
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e04a      	b.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	223c      	movs	r2, #60	@ 0x3c
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	223d      	movs	r2, #61	@ 0x3d
 8002a20:	2102      	movs	r1, #2
 8002a22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2270      	movs	r2, #112	@ 0x70
 8002a54:	4393      	bics	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a11      	ldr	r2, [pc, #68]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10c      	bne.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	4393      	bics	r3, r2
 8002a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	223d      	movs	r2, #61	@ 0x3d
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	223c      	movs	r2, #60	@ 0x3c
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	ff0fffff 	.word	0xff0fffff
 8002abc:	40000400 	.word	0x40000400

08002ac0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	223c      	movs	r2, #60	@ 0x3c
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e06f      	b.n	8002bbc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	223c      	movs	r2, #60	@ 0x3c
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	22ff      	movs	r2, #255	@ 0xff
 8002ae8:	4393      	bics	r3, r2
 8002aea:	001a      	movs	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a33      	ldr	r2, [pc, #204]	@ (8002bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002af8:	401a      	ands	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a30      	ldr	r2, [pc, #192]	@ (8002bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002b06:	401a      	ands	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a2e      	ldr	r2, [pc, #184]	@ (8002bcc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002b14:	401a      	ands	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8002b22:	401a      	ands	r2, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a29      	ldr	r2, [pc, #164]	@ (8002bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8002b30:	401a      	ands	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	@ (8002bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002b3e:	401a      	ands	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a24      	ldr	r2, [pc, #144]	@ (8002bdc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a21      	ldr	r2, [pc, #132]	@ (8002be0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002be4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d11c      	bne.n	8002baa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002b74:	401a      	ands	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	051b      	lsls	r3, r3, #20
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	@ (8002bec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002b84:	401a      	ands	r2, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002b92:	401a      	ands	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a15      	ldr	r2, [pc, #84]	@ (8002bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	223c      	movs	r2, #60	@ 0x3c
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	fffffcff 	.word	0xfffffcff
 8002bc8:	fffffbff 	.word	0xfffffbff
 8002bcc:	fffff7ff 	.word	0xfffff7ff
 8002bd0:	ffffefff 	.word	0xffffefff
 8002bd4:	ffffdfff 	.word	0xffffdfff
 8002bd8:	ffffbfff 	.word	0xffffbfff
 8002bdc:	fff0ffff 	.word	0xfff0ffff
 8002be0:	efffffff 	.word	0xefffffff
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	ff0fffff 	.word	0xff0fffff
 8002bec:	feffffff 	.word	0xfeffffff
 8002bf0:	fdffffff 	.word	0xfdffffff
 8002bf4:	dfffffff 	.word	0xdfffffff

08002bf8 <memset>:
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	1882      	adds	r2, r0, r2
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <memset+0xa>
 8002c00:	4770      	bx	lr
 8002c02:	7019      	strb	r1, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	e7f9      	b.n	8002bfc <memset+0x4>

08002c08 <__libc_init_array>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	4c0c      	ldr	r4, [pc, #48]	@ (8002c40 <__libc_init_array+0x38>)
 8002c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c44 <__libc_init_array+0x3c>)
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	42a6      	cmp	r6, r4
 8002c16:	d109      	bne.n	8002c2c <__libc_init_array+0x24>
 8002c18:	2600      	movs	r6, #0
 8002c1a:	f000 f819 	bl	8002c50 <_init>
 8002c1e:	4c0a      	ldr	r4, [pc, #40]	@ (8002c48 <__libc_init_array+0x40>)
 8002c20:	4d0a      	ldr	r5, [pc, #40]	@ (8002c4c <__libc_init_array+0x44>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	42a6      	cmp	r6, r4
 8002c28:	d105      	bne.n	8002c36 <__libc_init_array+0x2e>
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	00b3      	lsls	r3, r6, #2
 8002c2e:	58eb      	ldr	r3, [r5, r3]
 8002c30:	4798      	blx	r3
 8002c32:	3601      	adds	r6, #1
 8002c34:	e7ee      	b.n	8002c14 <__libc_init_array+0xc>
 8002c36:	00b3      	lsls	r3, r6, #2
 8002c38:	58eb      	ldr	r3, [r5, r3]
 8002c3a:	4798      	blx	r3
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	e7f2      	b.n	8002c26 <__libc_init_array+0x1e>
 8002c40:	08002cfc 	.word	0x08002cfc
 8002c44:	08002cfc 	.word	0x08002cfc
 8002c48:	08002d00 	.word	0x08002d00
 8002c4c:	08002cfc 	.word	0x08002cfc

08002c50 <_init>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c56:	bc08      	pop	{r3}
 8002c58:	469e      	mov	lr, r3
 8002c5a:	4770      	bx	lr

08002c5c <_fini>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	46c0      	nop			@ (mov r8, r8)
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr
