
DEM_ACC_ANGLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b740  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800b7f8  0800b7f8  0000c7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc8  0800bcc8  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bcc8  0800bcc8  0000ccc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd0  0800bcd0  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd0  0800bcd0  0000ccd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bcd4  0800bcd4  0000ccd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bcd8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001d8  0800beac  0000d1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800beac  0000d56c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aaf  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260d  00000000  00000000  00020cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000232b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc3  00000000  00000000  00024480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018209  00000000  00000000  00025243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e2f  00000000  00000000  0003d44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009705a  00000000  00000000  0005127b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e82d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055cc  00000000  00000000  000e8318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ed8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d8 	.word	0x200001d8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800b7e0 	.word	0x0800b7e0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001dc 	.word	0x200001dc
 80000fc:	0800b7e0 	.word	0x0800b7e0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fd5f 	bl	8001ef8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fca3 	bl	8001d90 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fd51 	bl	8001ef8 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fd47 	bl	8001ef8 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fccd 	bl	8001e18 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fcc3 	bl	8001e18 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb81 	bl	8000bb0 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb09 	bl	8000ad0 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb73 	bl	8000bb0 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb69 	bl	8000bb0 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb17 	bl	8000b20 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb0d 	bl	8000b20 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_uldivmod>:
 8000514:	2b00      	cmp	r3, #0
 8000516:	d111      	bne.n	800053c <__aeabi_uldivmod+0x28>
 8000518:	2a00      	cmp	r2, #0
 800051a:	d10f      	bne.n	800053c <__aeabi_uldivmod+0x28>
 800051c:	2900      	cmp	r1, #0
 800051e:	d100      	bne.n	8000522 <__aeabi_uldivmod+0xe>
 8000520:	2800      	cmp	r0, #0
 8000522:	d002      	beq.n	800052a <__aeabi_uldivmod+0x16>
 8000524:	2100      	movs	r1, #0
 8000526:	43c9      	mvns	r1, r1
 8000528:	0008      	movs	r0, r1
 800052a:	b407      	push	{r0, r1, r2}
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <__aeabi_uldivmod+0x24>)
 800052e:	a102      	add	r1, pc, #8	@ (adr r1, 8000538 <__aeabi_uldivmod+0x24>)
 8000530:	1840      	adds	r0, r0, r1
 8000532:	9002      	str	r0, [sp, #8]
 8000534:	bd03      	pop	{r0, r1, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	fffffee9 	.word	0xfffffee9
 800053c:	b403      	push	{r0, r1}
 800053e:	4668      	mov	r0, sp
 8000540:	b501      	push	{r0, lr}
 8000542:	9802      	ldr	r0, [sp, #8]
 8000544:	f000 f806 	bl	8000554 <__udivmoddi4>
 8000548:	9b01      	ldr	r3, [sp, #4]
 800054a:	469e      	mov	lr, r3
 800054c:	b002      	add	sp, #8
 800054e:	bc0c      	pop	{r2, r3}
 8000550:	4770      	bx	lr
 8000552:	46c0      	nop			@ (mov r8, r8)

08000554 <__udivmoddi4>:
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	4657      	mov	r7, sl
 8000558:	464e      	mov	r6, r9
 800055a:	4645      	mov	r5, r8
 800055c:	46de      	mov	lr, fp
 800055e:	b5e0      	push	{r5, r6, r7, lr}
 8000560:	0004      	movs	r4, r0
 8000562:	000d      	movs	r5, r1
 8000564:	4692      	mov	sl, r2
 8000566:	4699      	mov	r9, r3
 8000568:	b083      	sub	sp, #12
 800056a:	428b      	cmp	r3, r1
 800056c:	d830      	bhi.n	80005d0 <__udivmoddi4+0x7c>
 800056e:	d02d      	beq.n	80005cc <__udivmoddi4+0x78>
 8000570:	4649      	mov	r1, r9
 8000572:	4650      	mov	r0, sl
 8000574:	f002 fdb6 	bl	80030e4 <__clzdi2>
 8000578:	0029      	movs	r1, r5
 800057a:	0006      	movs	r6, r0
 800057c:	0020      	movs	r0, r4
 800057e:	f002 fdb1 	bl	80030e4 <__clzdi2>
 8000582:	1a33      	subs	r3, r6, r0
 8000584:	4698      	mov	r8, r3
 8000586:	3b20      	subs	r3, #32
 8000588:	d434      	bmi.n	80005f4 <__udivmoddi4+0xa0>
 800058a:	469b      	mov	fp, r3
 800058c:	4653      	mov	r3, sl
 800058e:	465a      	mov	r2, fp
 8000590:	4093      	lsls	r3, r2
 8000592:	4642      	mov	r2, r8
 8000594:	001f      	movs	r7, r3
 8000596:	4653      	mov	r3, sl
 8000598:	4093      	lsls	r3, r2
 800059a:	001e      	movs	r6, r3
 800059c:	42af      	cmp	r7, r5
 800059e:	d83b      	bhi.n	8000618 <__udivmoddi4+0xc4>
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d100      	bne.n	80005a6 <__udivmoddi4+0x52>
 80005a4:	e079      	b.n	800069a <__udivmoddi4+0x146>
 80005a6:	465b      	mov	r3, fp
 80005a8:	1ba4      	subs	r4, r4, r6
 80005aa:	41bd      	sbcs	r5, r7
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	da00      	bge.n	80005b2 <__udivmoddi4+0x5e>
 80005b0:	e076      	b.n	80006a0 <__udivmoddi4+0x14c>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2300      	movs	r3, #0
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2301      	movs	r3, #1
 80005bc:	465a      	mov	r2, fp
 80005be:	4093      	lsls	r3, r2
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	4642      	mov	r2, r8
 80005c6:	4093      	lsls	r3, r2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	e029      	b.n	8000620 <__udivmoddi4+0xcc>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	d9cf      	bls.n	8000570 <__udivmoddi4+0x1c>
 80005d0:	2200      	movs	r2, #0
 80005d2:	2300      	movs	r3, #0
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <__udivmoddi4+0x8e>
 80005de:	601c      	str	r4, [r3, #0]
 80005e0:	605d      	str	r5, [r3, #4]
 80005e2:	9800      	ldr	r0, [sp, #0]
 80005e4:	9901      	ldr	r1, [sp, #4]
 80005e6:	b003      	add	sp, #12
 80005e8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ea:	46bb      	mov	fp, r7
 80005ec:	46b2      	mov	sl, r6
 80005ee:	46a9      	mov	r9, r5
 80005f0:	46a0      	mov	r8, r4
 80005f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f4:	4642      	mov	r2, r8
 80005f6:	469b      	mov	fp, r3
 80005f8:	2320      	movs	r3, #32
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	4652      	mov	r2, sl
 80005fe:	40da      	lsrs	r2, r3
 8000600:	4641      	mov	r1, r8
 8000602:	0013      	movs	r3, r2
 8000604:	464a      	mov	r2, r9
 8000606:	408a      	lsls	r2, r1
 8000608:	0017      	movs	r7, r2
 800060a:	4642      	mov	r2, r8
 800060c:	431f      	orrs	r7, r3
 800060e:	4653      	mov	r3, sl
 8000610:	4093      	lsls	r3, r2
 8000612:	001e      	movs	r6, r3
 8000614:	42af      	cmp	r7, r5
 8000616:	d9c3      	bls.n	80005a0 <__udivmoddi4+0x4c>
 8000618:	2200      	movs	r2, #0
 800061a:	2300      	movs	r3, #0
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	4643      	mov	r3, r8
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0d8      	beq.n	80005d8 <__udivmoddi4+0x84>
 8000626:	07fb      	lsls	r3, r7, #31
 8000628:	0872      	lsrs	r2, r6, #1
 800062a:	431a      	orrs	r2, r3
 800062c:	4646      	mov	r6, r8
 800062e:	087b      	lsrs	r3, r7, #1
 8000630:	e00e      	b.n	8000650 <__udivmoddi4+0xfc>
 8000632:	42ab      	cmp	r3, r5
 8000634:	d101      	bne.n	800063a <__udivmoddi4+0xe6>
 8000636:	42a2      	cmp	r2, r4
 8000638:	d80c      	bhi.n	8000654 <__udivmoddi4+0x100>
 800063a:	1aa4      	subs	r4, r4, r2
 800063c:	419d      	sbcs	r5, r3
 800063e:	2001      	movs	r0, #1
 8000640:	1924      	adds	r4, r4, r4
 8000642:	416d      	adcs	r5, r5
 8000644:	2100      	movs	r1, #0
 8000646:	3e01      	subs	r6, #1
 8000648:	1824      	adds	r4, r4, r0
 800064a:	414d      	adcs	r5, r1
 800064c:	2e00      	cmp	r6, #0
 800064e:	d006      	beq.n	800065e <__udivmoddi4+0x10a>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d9ee      	bls.n	8000632 <__udivmoddi4+0xde>
 8000654:	3e01      	subs	r6, #1
 8000656:	1924      	adds	r4, r4, r4
 8000658:	416d      	adcs	r5, r5
 800065a:	2e00      	cmp	r6, #0
 800065c:	d1f8      	bne.n	8000650 <__udivmoddi4+0xfc>
 800065e:	9800      	ldr	r0, [sp, #0]
 8000660:	9901      	ldr	r1, [sp, #4]
 8000662:	465b      	mov	r3, fp
 8000664:	1900      	adds	r0, r0, r4
 8000666:	4169      	adcs	r1, r5
 8000668:	2b00      	cmp	r3, #0
 800066a:	db24      	blt.n	80006b6 <__udivmoddi4+0x162>
 800066c:	002b      	movs	r3, r5
 800066e:	465a      	mov	r2, fp
 8000670:	4644      	mov	r4, r8
 8000672:	40d3      	lsrs	r3, r2
 8000674:	002a      	movs	r2, r5
 8000676:	40e2      	lsrs	r2, r4
 8000678:	001c      	movs	r4, r3
 800067a:	465b      	mov	r3, fp
 800067c:	0015      	movs	r5, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	db2a      	blt.n	80006d8 <__udivmoddi4+0x184>
 8000682:	0026      	movs	r6, r4
 8000684:	409e      	lsls	r6, r3
 8000686:	0033      	movs	r3, r6
 8000688:	0026      	movs	r6, r4
 800068a:	4647      	mov	r7, r8
 800068c:	40be      	lsls	r6, r7
 800068e:	0032      	movs	r2, r6
 8000690:	1a80      	subs	r0, r0, r2
 8000692:	4199      	sbcs	r1, r3
 8000694:	9000      	str	r0, [sp, #0]
 8000696:	9101      	str	r1, [sp, #4]
 8000698:	e79e      	b.n	80005d8 <__udivmoddi4+0x84>
 800069a:	42a3      	cmp	r3, r4
 800069c:	d8bc      	bhi.n	8000618 <__udivmoddi4+0xc4>
 800069e:	e782      	b.n	80005a6 <__udivmoddi4+0x52>
 80006a0:	4642      	mov	r2, r8
 80006a2:	2320      	movs	r3, #32
 80006a4:	2100      	movs	r1, #0
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	2200      	movs	r2, #0
 80006aa:	9100      	str	r1, [sp, #0]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	2201      	movs	r2, #1
 80006b0:	40da      	lsrs	r2, r3
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	e785      	b.n	80005c2 <__udivmoddi4+0x6e>
 80006b6:	4642      	mov	r2, r8
 80006b8:	2320      	movs	r3, #32
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	002a      	movs	r2, r5
 80006be:	4646      	mov	r6, r8
 80006c0:	409a      	lsls	r2, r3
 80006c2:	0023      	movs	r3, r4
 80006c4:	40f3      	lsrs	r3, r6
 80006c6:	4644      	mov	r4, r8
 80006c8:	4313      	orrs	r3, r2
 80006ca:	002a      	movs	r2, r5
 80006cc:	40e2      	lsrs	r2, r4
 80006ce:	001c      	movs	r4, r3
 80006d0:	465b      	mov	r3, fp
 80006d2:	0015      	movs	r5, r2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	dad4      	bge.n	8000682 <__udivmoddi4+0x12e>
 80006d8:	4642      	mov	r2, r8
 80006da:	002f      	movs	r7, r5
 80006dc:	2320      	movs	r3, #32
 80006de:	0026      	movs	r6, r4
 80006e0:	4097      	lsls	r7, r2
 80006e2:	1a9b      	subs	r3, r3, r2
 80006e4:	40de      	lsrs	r6, r3
 80006e6:	003b      	movs	r3, r7
 80006e8:	4333      	orrs	r3, r6
 80006ea:	e7cd      	b.n	8000688 <__udivmoddi4+0x134>

080006ec <__aeabi_fadd>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	024b      	lsls	r3, r1, #9
 80006f0:	0a5a      	lsrs	r2, r3, #9
 80006f2:	4694      	mov	ip, r2
 80006f4:	004a      	lsls	r2, r1, #1
 80006f6:	0fc9      	lsrs	r1, r1, #31
 80006f8:	46ce      	mov	lr, r9
 80006fa:	4647      	mov	r7, r8
 80006fc:	4689      	mov	r9, r1
 80006fe:	0045      	lsls	r5, r0, #1
 8000700:	0246      	lsls	r6, r0, #9
 8000702:	0e2d      	lsrs	r5, r5, #24
 8000704:	0e12      	lsrs	r2, r2, #24
 8000706:	b580      	push	{r7, lr}
 8000708:	0999      	lsrs	r1, r3, #6
 800070a:	0a77      	lsrs	r7, r6, #9
 800070c:	0fc4      	lsrs	r4, r0, #31
 800070e:	09b6      	lsrs	r6, r6, #6
 8000710:	1aab      	subs	r3, r5, r2
 8000712:	454c      	cmp	r4, r9
 8000714:	d020      	beq.n	8000758 <__aeabi_fadd+0x6c>
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd0c      	ble.n	8000734 <__aeabi_fadd+0x48>
 800071a:	2a00      	cmp	r2, #0
 800071c:	d134      	bne.n	8000788 <__aeabi_fadd+0x9c>
 800071e:	2900      	cmp	r1, #0
 8000720:	d02a      	beq.n	8000778 <__aeabi_fadd+0x8c>
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	2b01      	cmp	r3, #1
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x3e>
 8000728:	e08f      	b.n	800084a <__aeabi_fadd+0x15e>
 800072a:	2bff      	cmp	r3, #255	@ 0xff
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x44>
 800072e:	e0cd      	b.n	80008cc <__aeabi_fadd+0x1e0>
 8000730:	0013      	movs	r3, r2
 8000732:	e02f      	b.n	8000794 <__aeabi_fadd+0xa8>
 8000734:	2b00      	cmp	r3, #0
 8000736:	d060      	beq.n	80007fa <__aeabi_fadd+0x10e>
 8000738:	1b53      	subs	r3, r2, r5
 800073a:	2d00      	cmp	r5, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x54>
 800073e:	e0ee      	b.n	800091e <__aeabi_fadd+0x232>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x5a>
 8000744:	e13e      	b.n	80009c4 <__aeabi_fadd+0x2d8>
 8000746:	1e5c      	subs	r4, r3, #1
 8000748:	2b01      	cmp	r3, #1
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x62>
 800074c:	e16b      	b.n	8000a26 <__aeabi_fadd+0x33a>
 800074e:	2bff      	cmp	r3, #255	@ 0xff
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x68>
 8000752:	e0b9      	b.n	80008c8 <__aeabi_fadd+0x1dc>
 8000754:	0023      	movs	r3, r4
 8000756:	e0e7      	b.n	8000928 <__aeabi_fadd+0x23c>
 8000758:	2b00      	cmp	r3, #0
 800075a:	dc00      	bgt.n	800075e <__aeabi_fadd+0x72>
 800075c:	e0a4      	b.n	80008a8 <__aeabi_fadd+0x1bc>
 800075e:	2a00      	cmp	r2, #0
 8000760:	d069      	beq.n	8000836 <__aeabi_fadd+0x14a>
 8000762:	2dff      	cmp	r5, #255	@ 0xff
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x7c>
 8000766:	e0b1      	b.n	80008cc <__aeabi_fadd+0x1e0>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	04d2      	lsls	r2, r2, #19
 800076c:	4311      	orrs	r1, r2
 800076e:	2b1b      	cmp	r3, #27
 8000770:	dc00      	bgt.n	8000774 <__aeabi_fadd+0x88>
 8000772:	e0e9      	b.n	8000948 <__aeabi_fadd+0x25c>
 8000774:	002b      	movs	r3, r5
 8000776:	3605      	adds	r6, #5
 8000778:	08f7      	lsrs	r7, r6, #3
 800077a:	2bff      	cmp	r3, #255	@ 0xff
 800077c:	d100      	bne.n	8000780 <__aeabi_fadd+0x94>
 800077e:	e0a5      	b.n	80008cc <__aeabi_fadd+0x1e0>
 8000780:	027a      	lsls	r2, r7, #9
 8000782:	0a52      	lsrs	r2, r2, #9
 8000784:	b2d8      	uxtb	r0, r3
 8000786:	e030      	b.n	80007ea <__aeabi_fadd+0xfe>
 8000788:	2dff      	cmp	r5, #255	@ 0xff
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0xa2>
 800078c:	e09e      	b.n	80008cc <__aeabi_fadd+0x1e0>
 800078e:	2280      	movs	r2, #128	@ 0x80
 8000790:	04d2      	lsls	r2, r2, #19
 8000792:	4311      	orrs	r1, r2
 8000794:	2001      	movs	r0, #1
 8000796:	2b1b      	cmp	r3, #27
 8000798:	dc08      	bgt.n	80007ac <__aeabi_fadd+0xc0>
 800079a:	0008      	movs	r0, r1
 800079c:	2220      	movs	r2, #32
 800079e:	40d8      	lsrs	r0, r3
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	4099      	lsls	r1, r3
 80007a4:	000b      	movs	r3, r1
 80007a6:	1e5a      	subs	r2, r3, #1
 80007a8:	4193      	sbcs	r3, r2
 80007aa:	4318      	orrs	r0, r3
 80007ac:	1a36      	subs	r6, r6, r0
 80007ae:	0173      	lsls	r3, r6, #5
 80007b0:	d400      	bmi.n	80007b4 <__aeabi_fadd+0xc8>
 80007b2:	e071      	b.n	8000898 <__aeabi_fadd+0x1ac>
 80007b4:	01b6      	lsls	r6, r6, #6
 80007b6:	09b7      	lsrs	r7, r6, #6
 80007b8:	0038      	movs	r0, r7
 80007ba:	f002 fc75 	bl	80030a8 <__clzsi2>
 80007be:	003b      	movs	r3, r7
 80007c0:	3805      	subs	r0, #5
 80007c2:	4083      	lsls	r3, r0
 80007c4:	4285      	cmp	r5, r0
 80007c6:	dd4d      	ble.n	8000864 <__aeabi_fadd+0x178>
 80007c8:	4eb4      	ldr	r6, [pc, #720]	@ (8000a9c <__aeabi_fadd+0x3b0>)
 80007ca:	1a2d      	subs	r5, r5, r0
 80007cc:	401e      	ands	r6, r3
 80007ce:	075a      	lsls	r2, r3, #29
 80007d0:	d068      	beq.n	80008a4 <__aeabi_fadd+0x1b8>
 80007d2:	220f      	movs	r2, #15
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d064      	beq.n	80008a4 <__aeabi_fadd+0x1b8>
 80007da:	3604      	adds	r6, #4
 80007dc:	0173      	lsls	r3, r6, #5
 80007de:	d561      	bpl.n	80008a4 <__aeabi_fadd+0x1b8>
 80007e0:	1c68      	adds	r0, r5, #1
 80007e2:	2dfe      	cmp	r5, #254	@ 0xfe
 80007e4:	d154      	bne.n	8000890 <__aeabi_fadd+0x1a4>
 80007e6:	20ff      	movs	r0, #255	@ 0xff
 80007e8:	2200      	movs	r2, #0
 80007ea:	05c0      	lsls	r0, r0, #23
 80007ec:	4310      	orrs	r0, r2
 80007ee:	07e4      	lsls	r4, r4, #31
 80007f0:	4320      	orrs	r0, r4
 80007f2:	bcc0      	pop	{r6, r7}
 80007f4:	46b9      	mov	r9, r7
 80007f6:	46b0      	mov	r8, r6
 80007f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007fa:	22fe      	movs	r2, #254	@ 0xfe
 80007fc:	4690      	mov	r8, r2
 80007fe:	1c68      	adds	r0, r5, #1
 8000800:	0002      	movs	r2, r0
 8000802:	4640      	mov	r0, r8
 8000804:	4210      	tst	r0, r2
 8000806:	d16b      	bne.n	80008e0 <__aeabi_fadd+0x1f4>
 8000808:	2d00      	cmp	r5, #0
 800080a:	d000      	beq.n	800080e <__aeabi_fadd+0x122>
 800080c:	e0dd      	b.n	80009ca <__aeabi_fadd+0x2de>
 800080e:	2e00      	cmp	r6, #0
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x128>
 8000812:	e102      	b.n	8000a1a <__aeabi_fadd+0x32e>
 8000814:	2900      	cmp	r1, #0
 8000816:	d0b3      	beq.n	8000780 <__aeabi_fadd+0x94>
 8000818:	2280      	movs	r2, #128	@ 0x80
 800081a:	1a77      	subs	r7, r6, r1
 800081c:	04d2      	lsls	r2, r2, #19
 800081e:	4217      	tst	r7, r2
 8000820:	d100      	bne.n	8000824 <__aeabi_fadd+0x138>
 8000822:	e136      	b.n	8000a92 <__aeabi_fadd+0x3a6>
 8000824:	464c      	mov	r4, r9
 8000826:	1b8e      	subs	r6, r1, r6
 8000828:	d061      	beq.n	80008ee <__aeabi_fadd+0x202>
 800082a:	2001      	movs	r0, #1
 800082c:	4216      	tst	r6, r2
 800082e:	d130      	bne.n	8000892 <__aeabi_fadd+0x1a6>
 8000830:	2300      	movs	r3, #0
 8000832:	08f7      	lsrs	r7, r6, #3
 8000834:	e7a4      	b.n	8000780 <__aeabi_fadd+0x94>
 8000836:	2900      	cmp	r1, #0
 8000838:	d09e      	beq.n	8000778 <__aeabi_fadd+0x8c>
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	2b01      	cmp	r3, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x156>
 8000840:	e0ca      	b.n	80009d8 <__aeabi_fadd+0x2ec>
 8000842:	2bff      	cmp	r3, #255	@ 0xff
 8000844:	d042      	beq.n	80008cc <__aeabi_fadd+0x1e0>
 8000846:	0013      	movs	r3, r2
 8000848:	e791      	b.n	800076e <__aeabi_fadd+0x82>
 800084a:	1a71      	subs	r1, r6, r1
 800084c:	014b      	lsls	r3, r1, #5
 800084e:	d400      	bmi.n	8000852 <__aeabi_fadd+0x166>
 8000850:	e0d1      	b.n	80009f6 <__aeabi_fadd+0x30a>
 8000852:	018f      	lsls	r7, r1, #6
 8000854:	09bf      	lsrs	r7, r7, #6
 8000856:	0038      	movs	r0, r7
 8000858:	f002 fc26 	bl	80030a8 <__clzsi2>
 800085c:	003b      	movs	r3, r7
 800085e:	3805      	subs	r0, #5
 8000860:	4083      	lsls	r3, r0
 8000862:	2501      	movs	r5, #1
 8000864:	2220      	movs	r2, #32
 8000866:	1b40      	subs	r0, r0, r5
 8000868:	3001      	adds	r0, #1
 800086a:	1a12      	subs	r2, r2, r0
 800086c:	001e      	movs	r6, r3
 800086e:	4093      	lsls	r3, r2
 8000870:	40c6      	lsrs	r6, r0
 8000872:	1e5a      	subs	r2, r3, #1
 8000874:	4193      	sbcs	r3, r2
 8000876:	431e      	orrs	r6, r3
 8000878:	d039      	beq.n	80008ee <__aeabi_fadd+0x202>
 800087a:	0773      	lsls	r3, r6, #29
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x194>
 800087e:	e11b      	b.n	8000ab8 <__aeabi_fadd+0x3cc>
 8000880:	230f      	movs	r3, #15
 8000882:	2500      	movs	r5, #0
 8000884:	4033      	ands	r3, r6
 8000886:	2b04      	cmp	r3, #4
 8000888:	d1a7      	bne.n	80007da <__aeabi_fadd+0xee>
 800088a:	2001      	movs	r0, #1
 800088c:	0172      	lsls	r2, r6, #5
 800088e:	d57c      	bpl.n	800098a <__aeabi_fadd+0x29e>
 8000890:	b2c0      	uxtb	r0, r0
 8000892:	01b2      	lsls	r2, r6, #6
 8000894:	0a52      	lsrs	r2, r2, #9
 8000896:	e7a8      	b.n	80007ea <__aeabi_fadd+0xfe>
 8000898:	0773      	lsls	r3, r6, #29
 800089a:	d003      	beq.n	80008a4 <__aeabi_fadd+0x1b8>
 800089c:	230f      	movs	r3, #15
 800089e:	4033      	ands	r3, r6
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d19a      	bne.n	80007da <__aeabi_fadd+0xee>
 80008a4:	002b      	movs	r3, r5
 80008a6:	e767      	b.n	8000778 <__aeabi_fadd+0x8c>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d023      	beq.n	80008f4 <__aeabi_fadd+0x208>
 80008ac:	1b53      	subs	r3, r2, r5
 80008ae:	2d00      	cmp	r5, #0
 80008b0:	d17b      	bne.n	80009aa <__aeabi_fadd+0x2be>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fadd+0x1cc>
 80008b6:	e086      	b.n	80009c6 <__aeabi_fadd+0x2da>
 80008b8:	1e5d      	subs	r5, r3, #1
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x1d4>
 80008be:	e08b      	b.n	80009d8 <__aeabi_fadd+0x2ec>
 80008c0:	2bff      	cmp	r3, #255	@ 0xff
 80008c2:	d002      	beq.n	80008ca <__aeabi_fadd+0x1de>
 80008c4:	002b      	movs	r3, r5
 80008c6:	e075      	b.n	80009b4 <__aeabi_fadd+0x2c8>
 80008c8:	464c      	mov	r4, r9
 80008ca:	4667      	mov	r7, ip
 80008cc:	2f00      	cmp	r7, #0
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x1e6>
 80008d0:	e789      	b.n	80007e6 <__aeabi_fadd+0xfa>
 80008d2:	2280      	movs	r2, #128	@ 0x80
 80008d4:	03d2      	lsls	r2, r2, #15
 80008d6:	433a      	orrs	r2, r7
 80008d8:	0252      	lsls	r2, r2, #9
 80008da:	20ff      	movs	r0, #255	@ 0xff
 80008dc:	0a52      	lsrs	r2, r2, #9
 80008de:	e784      	b.n	80007ea <__aeabi_fadd+0xfe>
 80008e0:	1a77      	subs	r7, r6, r1
 80008e2:	017b      	lsls	r3, r7, #5
 80008e4:	d46b      	bmi.n	80009be <__aeabi_fadd+0x2d2>
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d000      	beq.n	80008ec <__aeabi_fadd+0x200>
 80008ea:	e765      	b.n	80007b8 <__aeabi_fadd+0xcc>
 80008ec:	2400      	movs	r4, #0
 80008ee:	2000      	movs	r0, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	e77a      	b.n	80007ea <__aeabi_fadd+0xfe>
 80008f4:	22fe      	movs	r2, #254	@ 0xfe
 80008f6:	1c6b      	adds	r3, r5, #1
 80008f8:	421a      	tst	r2, r3
 80008fa:	d149      	bne.n	8000990 <__aeabi_fadd+0x2a4>
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d000      	beq.n	8000902 <__aeabi_fadd+0x216>
 8000900:	e09f      	b.n	8000a42 <__aeabi_fadd+0x356>
 8000902:	2e00      	cmp	r6, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x21c>
 8000906:	e0ba      	b.n	8000a7e <__aeabi_fadd+0x392>
 8000908:	2900      	cmp	r1, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fadd+0x222>
 800090c:	e0cf      	b.n	8000aae <__aeabi_fadd+0x3c2>
 800090e:	1872      	adds	r2, r6, r1
 8000910:	0153      	lsls	r3, r2, #5
 8000912:	d400      	bmi.n	8000916 <__aeabi_fadd+0x22a>
 8000914:	e0cd      	b.n	8000ab2 <__aeabi_fadd+0x3c6>
 8000916:	0192      	lsls	r2, r2, #6
 8000918:	2001      	movs	r0, #1
 800091a:	0a52      	lsrs	r2, r2, #9
 800091c:	e765      	b.n	80007ea <__aeabi_fadd+0xfe>
 800091e:	2aff      	cmp	r2, #255	@ 0xff
 8000920:	d0d2      	beq.n	80008c8 <__aeabi_fadd+0x1dc>
 8000922:	2080      	movs	r0, #128	@ 0x80
 8000924:	04c0      	lsls	r0, r0, #19
 8000926:	4306      	orrs	r6, r0
 8000928:	2001      	movs	r0, #1
 800092a:	2b1b      	cmp	r3, #27
 800092c:	dc08      	bgt.n	8000940 <__aeabi_fadd+0x254>
 800092e:	0030      	movs	r0, r6
 8000930:	2420      	movs	r4, #32
 8000932:	40d8      	lsrs	r0, r3
 8000934:	1ae3      	subs	r3, r4, r3
 8000936:	409e      	lsls	r6, r3
 8000938:	0033      	movs	r3, r6
 800093a:	1e5c      	subs	r4, r3, #1
 800093c:	41a3      	sbcs	r3, r4
 800093e:	4318      	orrs	r0, r3
 8000940:	464c      	mov	r4, r9
 8000942:	0015      	movs	r5, r2
 8000944:	1a0e      	subs	r6, r1, r0
 8000946:	e732      	b.n	80007ae <__aeabi_fadd+0xc2>
 8000948:	0008      	movs	r0, r1
 800094a:	2220      	movs	r2, #32
 800094c:	40d8      	lsrs	r0, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4099      	lsls	r1, r3
 8000952:	000b      	movs	r3, r1
 8000954:	1e5a      	subs	r2, r3, #1
 8000956:	4193      	sbcs	r3, r2
 8000958:	4303      	orrs	r3, r0
 800095a:	18f6      	adds	r6, r6, r3
 800095c:	0173      	lsls	r3, r6, #5
 800095e:	d59b      	bpl.n	8000898 <__aeabi_fadd+0x1ac>
 8000960:	3501      	adds	r5, #1
 8000962:	2dff      	cmp	r5, #255	@ 0xff
 8000964:	d100      	bne.n	8000968 <__aeabi_fadd+0x27c>
 8000966:	e73e      	b.n	80007e6 <__aeabi_fadd+0xfa>
 8000968:	2301      	movs	r3, #1
 800096a:	494d      	ldr	r1, [pc, #308]	@ (8000aa0 <__aeabi_fadd+0x3b4>)
 800096c:	0872      	lsrs	r2, r6, #1
 800096e:	4033      	ands	r3, r6
 8000970:	400a      	ands	r2, r1
 8000972:	431a      	orrs	r2, r3
 8000974:	0016      	movs	r6, r2
 8000976:	0753      	lsls	r3, r2, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_fadd+0x298>
 800097a:	230f      	movs	r3, #15
 800097c:	4013      	ands	r3, r2
 800097e:	2b04      	cmp	r3, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_fadd+0x298>
 8000982:	e72a      	b.n	80007da <__aeabi_fadd+0xee>
 8000984:	0173      	lsls	r3, r6, #5
 8000986:	d500      	bpl.n	800098a <__aeabi_fadd+0x29e>
 8000988:	e72a      	b.n	80007e0 <__aeabi_fadd+0xf4>
 800098a:	002b      	movs	r3, r5
 800098c:	08f7      	lsrs	r7, r6, #3
 800098e:	e6f7      	b.n	8000780 <__aeabi_fadd+0x94>
 8000990:	2bff      	cmp	r3, #255	@ 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fadd+0x2aa>
 8000994:	e727      	b.n	80007e6 <__aeabi_fadd+0xfa>
 8000996:	1871      	adds	r1, r6, r1
 8000998:	0849      	lsrs	r1, r1, #1
 800099a:	074a      	lsls	r2, r1, #29
 800099c:	d02f      	beq.n	80009fe <__aeabi_fadd+0x312>
 800099e:	220f      	movs	r2, #15
 80009a0:	400a      	ands	r2, r1
 80009a2:	2a04      	cmp	r2, #4
 80009a4:	d02b      	beq.n	80009fe <__aeabi_fadd+0x312>
 80009a6:	1d0e      	adds	r6, r1, #4
 80009a8:	e6e6      	b.n	8000778 <__aeabi_fadd+0x8c>
 80009aa:	2aff      	cmp	r2, #255	@ 0xff
 80009ac:	d08d      	beq.n	80008ca <__aeabi_fadd+0x1de>
 80009ae:	2080      	movs	r0, #128	@ 0x80
 80009b0:	04c0      	lsls	r0, r0, #19
 80009b2:	4306      	orrs	r6, r0
 80009b4:	2b1b      	cmp	r3, #27
 80009b6:	dd24      	ble.n	8000a02 <__aeabi_fadd+0x316>
 80009b8:	0013      	movs	r3, r2
 80009ba:	1d4e      	adds	r6, r1, #5
 80009bc:	e6dc      	b.n	8000778 <__aeabi_fadd+0x8c>
 80009be:	464c      	mov	r4, r9
 80009c0:	1b8f      	subs	r7, r1, r6
 80009c2:	e6f9      	b.n	80007b8 <__aeabi_fadd+0xcc>
 80009c4:	464c      	mov	r4, r9
 80009c6:	000e      	movs	r6, r1
 80009c8:	e6d6      	b.n	8000778 <__aeabi_fadd+0x8c>
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d149      	bne.n	8000a62 <__aeabi_fadd+0x376>
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d068      	beq.n	8000aa4 <__aeabi_fadd+0x3b8>
 80009d2:	4667      	mov	r7, ip
 80009d4:	464c      	mov	r4, r9
 80009d6:	e77c      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 80009d8:	1870      	adds	r0, r6, r1
 80009da:	0143      	lsls	r3, r0, #5
 80009dc:	d574      	bpl.n	8000ac8 <__aeabi_fadd+0x3dc>
 80009de:	4930      	ldr	r1, [pc, #192]	@ (8000aa0 <__aeabi_fadd+0x3b4>)
 80009e0:	0840      	lsrs	r0, r0, #1
 80009e2:	4001      	ands	r1, r0
 80009e4:	0743      	lsls	r3, r0, #29
 80009e6:	d009      	beq.n	80009fc <__aeabi_fadd+0x310>
 80009e8:	230f      	movs	r3, #15
 80009ea:	4003      	ands	r3, r0
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d005      	beq.n	80009fc <__aeabi_fadd+0x310>
 80009f0:	2302      	movs	r3, #2
 80009f2:	1d0e      	adds	r6, r1, #4
 80009f4:	e6c0      	b.n	8000778 <__aeabi_fadd+0x8c>
 80009f6:	2301      	movs	r3, #1
 80009f8:	08cf      	lsrs	r7, r1, #3
 80009fa:	e6c1      	b.n	8000780 <__aeabi_fadd+0x94>
 80009fc:	2302      	movs	r3, #2
 80009fe:	08cf      	lsrs	r7, r1, #3
 8000a00:	e6be      	b.n	8000780 <__aeabi_fadd+0x94>
 8000a02:	2520      	movs	r5, #32
 8000a04:	0030      	movs	r0, r6
 8000a06:	40d8      	lsrs	r0, r3
 8000a08:	1aeb      	subs	r3, r5, r3
 8000a0a:	409e      	lsls	r6, r3
 8000a0c:	0033      	movs	r3, r6
 8000a0e:	1e5d      	subs	r5, r3, #1
 8000a10:	41ab      	sbcs	r3, r5
 8000a12:	4303      	orrs	r3, r0
 8000a14:	0015      	movs	r5, r2
 8000a16:	185e      	adds	r6, r3, r1
 8000a18:	e7a0      	b.n	800095c <__aeabi_fadd+0x270>
 8000a1a:	2900      	cmp	r1, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fadd+0x334>
 8000a1e:	e765      	b.n	80008ec <__aeabi_fadd+0x200>
 8000a20:	464c      	mov	r4, r9
 8000a22:	4667      	mov	r7, ip
 8000a24:	e6ac      	b.n	8000780 <__aeabi_fadd+0x94>
 8000a26:	1b8f      	subs	r7, r1, r6
 8000a28:	017b      	lsls	r3, r7, #5
 8000a2a:	d52e      	bpl.n	8000a8a <__aeabi_fadd+0x39e>
 8000a2c:	01bf      	lsls	r7, r7, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fb39 	bl	80030a8 <__clzsi2>
 8000a36:	003b      	movs	r3, r7
 8000a38:	3805      	subs	r0, #5
 8000a3a:	4083      	lsls	r3, r0
 8000a3c:	464c      	mov	r4, r9
 8000a3e:	3501      	adds	r5, #1
 8000a40:	e710      	b.n	8000864 <__aeabi_fadd+0x178>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fadd+0x35c>
 8000a46:	e740      	b.n	80008ca <__aeabi_fadd+0x1de>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fadd+0x362>
 8000a4c:	e741      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a4e:	2380      	movs	r3, #128	@ 0x80
 8000a50:	03db      	lsls	r3, r3, #15
 8000a52:	429f      	cmp	r7, r3
 8000a54:	d200      	bcs.n	8000a58 <__aeabi_fadd+0x36c>
 8000a56:	e73c      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a58:	459c      	cmp	ip, r3
 8000a5a:	d300      	bcc.n	8000a5e <__aeabi_fadd+0x372>
 8000a5c:	e739      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a5e:	4667      	mov	r7, ip
 8000a60:	e737      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x37c>
 8000a66:	e734      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a68:	2380      	movs	r3, #128	@ 0x80
 8000a6a:	03db      	lsls	r3, r3, #15
 8000a6c:	429f      	cmp	r7, r3
 8000a6e:	d200      	bcs.n	8000a72 <__aeabi_fadd+0x386>
 8000a70:	e72f      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a72:	459c      	cmp	ip, r3
 8000a74:	d300      	bcc.n	8000a78 <__aeabi_fadd+0x38c>
 8000a76:	e72c      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a78:	464c      	mov	r4, r9
 8000a7a:	4667      	mov	r7, ip
 8000a7c:	e729      	b.n	80008d2 <__aeabi_fadd+0x1e6>
 8000a7e:	2900      	cmp	r1, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fadd+0x398>
 8000a82:	e734      	b.n	80008ee <__aeabi_fadd+0x202>
 8000a84:	2300      	movs	r3, #0
 8000a86:	08cf      	lsrs	r7, r1, #3
 8000a88:	e67a      	b.n	8000780 <__aeabi_fadd+0x94>
 8000a8a:	464c      	mov	r4, r9
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	08ff      	lsrs	r7, r7, #3
 8000a90:	e676      	b.n	8000780 <__aeabi_fadd+0x94>
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fadd+0x3ac>
 8000a96:	e729      	b.n	80008ec <__aeabi_fadd+0x200>
 8000a98:	08ff      	lsrs	r7, r7, #3
 8000a9a:	e671      	b.n	8000780 <__aeabi_fadd+0x94>
 8000a9c:	fbffffff 	.word	0xfbffffff
 8000aa0:	7dffffff 	.word	0x7dffffff
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	20ff      	movs	r0, #255	@ 0xff
 8000aaa:	03d2      	lsls	r2, r2, #15
 8000aac:	e69d      	b.n	80007ea <__aeabi_fadd+0xfe>
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e666      	b.n	8000780 <__aeabi_fadd+0x94>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	08d7      	lsrs	r7, r2, #3
 8000ab6:	e663      	b.n	8000780 <__aeabi_fadd+0x94>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	0172      	lsls	r2, r6, #5
 8000abc:	d500      	bpl.n	8000ac0 <__aeabi_fadd+0x3d4>
 8000abe:	e6e7      	b.n	8000890 <__aeabi_fadd+0x1a4>
 8000ac0:	0031      	movs	r1, r6
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	08cf      	lsrs	r7, r1, #3
 8000ac6:	e65b      	b.n	8000780 <__aeabi_fadd+0x94>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	08c7      	lsrs	r7, r0, #3
 8000acc:	e658      	b.n	8000780 <__aeabi_fadd+0x94>
 8000ace:	46c0      	nop			@ (mov r8, r8)

08000ad0 <__eqsf2>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	024e      	lsls	r6, r1, #9
 8000ad6:	004c      	lsls	r4, r1, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	0a6d      	lsrs	r5, r5, #9
 8000adc:	0e12      	lsrs	r2, r2, #24
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a76      	lsrs	r6, r6, #9
 8000ae2:	0e24      	lsrs	r4, r4, #24
 8000ae4:	0fc9      	lsrs	r1, r1, #31
 8000ae6:	2aff      	cmp	r2, #255	@ 0xff
 8000ae8:	d010      	beq.n	8000b0c <__eqsf2+0x3c>
 8000aea:	2cff      	cmp	r4, #255	@ 0xff
 8000aec:	d00c      	beq.n	8000b08 <__eqsf2+0x38>
 8000aee:	2001      	movs	r0, #1
 8000af0:	42a2      	cmp	r2, r4
 8000af2:	d10a      	bne.n	8000b0a <__eqsf2+0x3a>
 8000af4:	42b5      	cmp	r5, r6
 8000af6:	d108      	bne.n	8000b0a <__eqsf2+0x3a>
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d00f      	beq.n	8000b1c <__eqsf2+0x4c>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d104      	bne.n	8000b0a <__eqsf2+0x3a>
 8000b00:	0028      	movs	r0, r5
 8000b02:	1e43      	subs	r3, r0, #1
 8000b04:	4198      	sbcs	r0, r3
 8000b06:	e000      	b.n	8000b0a <__eqsf2+0x3a>
 8000b08:	2001      	movs	r0, #1
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	2cff      	cmp	r4, #255	@ 0xff
 8000b10:	d1fb      	bne.n	8000b0a <__eqsf2+0x3a>
 8000b12:	4335      	orrs	r5, r6
 8000b14:	d1f9      	bne.n	8000b0a <__eqsf2+0x3a>
 8000b16:	404b      	eors	r3, r1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	e7f6      	b.n	8000b0a <__eqsf2+0x3a>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e7f4      	b.n	8000b0a <__eqsf2+0x3a>

08000b20 <__gesf2>:
 8000b20:	b530      	push	{r4, r5, lr}
 8000b22:	0042      	lsls	r2, r0, #1
 8000b24:	0244      	lsls	r4, r0, #9
 8000b26:	024d      	lsls	r5, r1, #9
 8000b28:	0fc3      	lsrs	r3, r0, #31
 8000b2a:	0048      	lsls	r0, r1, #1
 8000b2c:	0a64      	lsrs	r4, r4, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0a6d      	lsrs	r5, r5, #9
 8000b32:	0e00      	lsrs	r0, r0, #24
 8000b34:	0fc9      	lsrs	r1, r1, #31
 8000b36:	2aff      	cmp	r2, #255	@ 0xff
 8000b38:	d018      	beq.n	8000b6c <__gesf2+0x4c>
 8000b3a:	28ff      	cmp	r0, #255	@ 0xff
 8000b3c:	d00a      	beq.n	8000b54 <__gesf2+0x34>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d11e      	bne.n	8000b80 <__gesf2+0x60>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d10a      	bne.n	8000b5c <__gesf2+0x3c>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d029      	beq.n	8000b9e <__gesf2+0x7e>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d12d      	bne.n	8000baa <__gesf2+0x8a>
 8000b4e:	0048      	lsls	r0, r1, #1
 8000b50:	3801      	subs	r0, #1
 8000b52:	bd30      	pop	{r4, r5, pc}
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d125      	bne.n	8000ba4 <__gesf2+0x84>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d101      	bne.n	8000b60 <__gesf2+0x40>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d0f6      	beq.n	8000b4e <__gesf2+0x2e>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d019      	beq.n	8000b98 <__gesf2+0x78>
 8000b64:	2001      	movs	r0, #1
 8000b66:	425b      	negs	r3, r3
 8000b68:	4318      	orrs	r0, r3
 8000b6a:	e7f2      	b.n	8000b52 <__gesf2+0x32>
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d119      	bne.n	8000ba4 <__gesf2+0x84>
 8000b70:	28ff      	cmp	r0, #255	@ 0xff
 8000b72:	d1f7      	bne.n	8000b64 <__gesf2+0x44>
 8000b74:	2d00      	cmp	r5, #0
 8000b76:	d115      	bne.n	8000ba4 <__gesf2+0x84>
 8000b78:	2000      	movs	r0, #0
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d1f2      	bne.n	8000b64 <__gesf2+0x44>
 8000b7e:	e7e8      	b.n	8000b52 <__gesf2+0x32>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d0ef      	beq.n	8000b64 <__gesf2+0x44>
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d1ed      	bne.n	8000b64 <__gesf2+0x44>
 8000b88:	4282      	cmp	r2, r0
 8000b8a:	dceb      	bgt.n	8000b64 <__gesf2+0x44>
 8000b8c:	db04      	blt.n	8000b98 <__gesf2+0x78>
 8000b8e:	42ac      	cmp	r4, r5
 8000b90:	d8e8      	bhi.n	8000b64 <__gesf2+0x44>
 8000b92:	2000      	movs	r0, #0
 8000b94:	42ac      	cmp	r4, r5
 8000b96:	d2dc      	bcs.n	8000b52 <__gesf2+0x32>
 8000b98:	0058      	lsls	r0, r3, #1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7d9      	b.n	8000b52 <__gesf2+0x32>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d0d7      	beq.n	8000b52 <__gesf2+0x32>
 8000ba2:	e7df      	b.n	8000b64 <__gesf2+0x44>
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	e7d3      	b.n	8000b52 <__gesf2+0x32>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d1da      	bne.n	8000b64 <__gesf2+0x44>
 8000bae:	e7ee      	b.n	8000b8e <__gesf2+0x6e>

08000bb0 <__lesf2>:
 8000bb0:	b530      	push	{r4, r5, lr}
 8000bb2:	0042      	lsls	r2, r0, #1
 8000bb4:	0244      	lsls	r4, r0, #9
 8000bb6:	024d      	lsls	r5, r1, #9
 8000bb8:	0fc3      	lsrs	r3, r0, #31
 8000bba:	0048      	lsls	r0, r1, #1
 8000bbc:	0a64      	lsrs	r4, r4, #9
 8000bbe:	0e12      	lsrs	r2, r2, #24
 8000bc0:	0a6d      	lsrs	r5, r5, #9
 8000bc2:	0e00      	lsrs	r0, r0, #24
 8000bc4:	0fc9      	lsrs	r1, r1, #31
 8000bc6:	2aff      	cmp	r2, #255	@ 0xff
 8000bc8:	d017      	beq.n	8000bfa <__lesf2+0x4a>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d00a      	beq.n	8000be4 <__lesf2+0x34>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d11b      	bne.n	8000c0a <__lesf2+0x5a>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d10a      	bne.n	8000bec <__lesf2+0x3c>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d01d      	beq.n	8000c16 <__lesf2+0x66>
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d12d      	bne.n	8000c3a <__lesf2+0x8a>
 8000bde:	0048      	lsls	r0, r1, #1
 8000be0:	3801      	subs	r0, #1
 8000be2:	e011      	b.n	8000c08 <__lesf2+0x58>
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d10e      	bne.n	8000c06 <__lesf2+0x56>
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d101      	bne.n	8000bf0 <__lesf2+0x40>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d0f6      	beq.n	8000bde <__lesf2+0x2e>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d10c      	bne.n	8000c0e <__lesf2+0x5e>
 8000bf4:	0058      	lsls	r0, r3, #1
 8000bf6:	3801      	subs	r0, #1
 8000bf8:	e006      	b.n	8000c08 <__lesf2+0x58>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d103      	bne.n	8000c06 <__lesf2+0x56>
 8000bfe:	28ff      	cmp	r0, #255	@ 0xff
 8000c00:	d105      	bne.n	8000c0e <__lesf2+0x5e>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d015      	beq.n	8000c32 <__lesf2+0x82>
 8000c06:	2002      	movs	r0, #2
 8000c08:	bd30      	pop	{r4, r5, pc}
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d106      	bne.n	8000c1c <__lesf2+0x6c>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	425b      	negs	r3, r3
 8000c12:	4318      	orrs	r0, r3
 8000c14:	e7f8      	b.n	8000c08 <__lesf2+0x58>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d0f6      	beq.n	8000c08 <__lesf2+0x58>
 8000c1a:	e7f8      	b.n	8000c0e <__lesf2+0x5e>
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d1f6      	bne.n	8000c0e <__lesf2+0x5e>
 8000c20:	4282      	cmp	r2, r0
 8000c22:	dcf4      	bgt.n	8000c0e <__lesf2+0x5e>
 8000c24:	dbe6      	blt.n	8000bf4 <__lesf2+0x44>
 8000c26:	42ac      	cmp	r4, r5
 8000c28:	d8f1      	bhi.n	8000c0e <__lesf2+0x5e>
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	42ac      	cmp	r4, r5
 8000c2e:	d2eb      	bcs.n	8000c08 <__lesf2+0x58>
 8000c30:	e7e0      	b.n	8000bf4 <__lesf2+0x44>
 8000c32:	2000      	movs	r0, #0
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d1ea      	bne.n	8000c0e <__lesf2+0x5e>
 8000c38:	e7e6      	b.n	8000c08 <__lesf2+0x58>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d1e7      	bne.n	8000c0e <__lesf2+0x5e>
 8000c3e:	e7f2      	b.n	8000c26 <__lesf2+0x76>

08000c40 <__aeabi_fmul>:
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	464f      	mov	r7, r9
 8000c44:	4646      	mov	r6, r8
 8000c46:	46d6      	mov	lr, sl
 8000c48:	0044      	lsls	r4, r0, #1
 8000c4a:	b5c0      	push	{r6, r7, lr}
 8000c4c:	0246      	lsls	r6, r0, #9
 8000c4e:	1c0f      	adds	r7, r1, #0
 8000c50:	0a76      	lsrs	r6, r6, #9
 8000c52:	0e24      	lsrs	r4, r4, #24
 8000c54:	0fc5      	lsrs	r5, r0, #31
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x1c>
 8000c5a:	e0da      	b.n	8000e12 <__aeabi_fmul+0x1d2>
 8000c5c:	2cff      	cmp	r4, #255	@ 0xff
 8000c5e:	d074      	beq.n	8000d4a <__aeabi_fmul+0x10a>
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	00f6      	lsls	r6, r6, #3
 8000c64:	04db      	lsls	r3, r3, #19
 8000c66:	431e      	orrs	r6, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	3c7f      	subs	r4, #127	@ 0x7f
 8000c70:	027b      	lsls	r3, r7, #9
 8000c72:	0a5b      	lsrs	r3, r3, #9
 8000c74:	4698      	mov	r8, r3
 8000c76:	007b      	lsls	r3, r7, #1
 8000c78:	0e1b      	lsrs	r3, r3, #24
 8000c7a:	0fff      	lsrs	r7, r7, #31
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d074      	beq.n	8000d6a <__aeabi_fmul+0x12a>
 8000c80:	2bff      	cmp	r3, #255	@ 0xff
 8000c82:	d100      	bne.n	8000c86 <__aeabi_fmul+0x46>
 8000c84:	e08e      	b.n	8000da4 <__aeabi_fmul+0x164>
 8000c86:	4642      	mov	r2, r8
 8000c88:	2180      	movs	r1, #128	@ 0x80
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	04c9      	lsls	r1, r1, #19
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	3b7f      	subs	r3, #127	@ 0x7f
 8000c92:	002a      	movs	r2, r5
 8000c94:	18e4      	adds	r4, r4, r3
 8000c96:	464b      	mov	r3, r9
 8000c98:	407a      	eors	r2, r7
 8000c9a:	4688      	mov	r8, r1
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	dc75      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000ca2:	464b      	mov	r3, r9
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	dd0f      	ble.n	8000cca <__aeabi_fmul+0x8a>
 8000caa:	4649      	mov	r1, r9
 8000cac:	2301      	movs	r3, #1
 8000cae:	408b      	lsls	r3, r1
 8000cb0:	21a6      	movs	r1, #166	@ 0xa6
 8000cb2:	00c9      	lsls	r1, r1, #3
 8000cb4:	420b      	tst	r3, r1
 8000cb6:	d169      	bne.n	8000d8c <__aeabi_fmul+0x14c>
 8000cb8:	2190      	movs	r1, #144	@ 0x90
 8000cba:	0089      	lsls	r1, r1, #2
 8000cbc:	420b      	tst	r3, r1
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_fmul+0x82>
 8000cc0:	e100      	b.n	8000ec4 <__aeabi_fmul+0x284>
 8000cc2:	2188      	movs	r1, #136	@ 0x88
 8000cc4:	4219      	tst	r1, r3
 8000cc6:	d000      	beq.n	8000cca <__aeabi_fmul+0x8a>
 8000cc8:	e0f5      	b.n	8000eb6 <__aeabi_fmul+0x276>
 8000cca:	4641      	mov	r1, r8
 8000ccc:	0409      	lsls	r1, r1, #16
 8000cce:	0c09      	lsrs	r1, r1, #16
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	0008      	movs	r0, r1
 8000cd4:	0c35      	lsrs	r5, r6, #16
 8000cd6:	0436      	lsls	r6, r6, #16
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	0c36      	lsrs	r6, r6, #16
 8000cdc:	4370      	muls	r0, r6
 8000cde:	4369      	muls	r1, r5
 8000ce0:	435e      	muls	r6, r3
 8000ce2:	435d      	muls	r5, r3
 8000ce4:	1876      	adds	r6, r6, r1
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	199b      	adds	r3, r3, r6
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_fmul+0xb6>
 8000cee:	2180      	movs	r1, #128	@ 0x80
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	468c      	mov	ip, r1
 8000cf4:	4465      	add	r5, ip
 8000cf6:	0400      	lsls	r0, r0, #16
 8000cf8:	0419      	lsls	r1, r3, #16
 8000cfa:	0c00      	lsrs	r0, r0, #16
 8000cfc:	1809      	adds	r1, r1, r0
 8000cfe:	018e      	lsls	r6, r1, #6
 8000d00:	1e70      	subs	r0, r6, #1
 8000d02:	4186      	sbcs	r6, r0
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	0e89      	lsrs	r1, r1, #26
 8000d08:	195b      	adds	r3, r3, r5
 8000d0a:	430e      	orrs	r6, r1
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	d46c      	bmi.n	8000dee <__aeabi_fmul+0x1ae>
 8000d14:	0023      	movs	r3, r4
 8000d16:	337f      	adds	r3, #127	@ 0x7f
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dc00      	bgt.n	8000d1e <__aeabi_fmul+0xde>
 8000d1c:	e0b1      	b.n	8000e82 <__aeabi_fmul+0x242>
 8000d1e:	0015      	movs	r5, r2
 8000d20:	0771      	lsls	r1, r6, #29
 8000d22:	d00b      	beq.n	8000d3c <__aeabi_fmul+0xfc>
 8000d24:	200f      	movs	r0, #15
 8000d26:	0021      	movs	r1, r4
 8000d28:	4030      	ands	r0, r6
 8000d2a:	2804      	cmp	r0, #4
 8000d2c:	d006      	beq.n	8000d3c <__aeabi_fmul+0xfc>
 8000d2e:	3604      	adds	r6, #4
 8000d30:	0132      	lsls	r2, r6, #4
 8000d32:	d503      	bpl.n	8000d3c <__aeabi_fmul+0xfc>
 8000d34:	4b6e      	ldr	r3, [pc, #440]	@ (8000ef0 <__aeabi_fmul+0x2b0>)
 8000d36:	401e      	ands	r6, r3
 8000d38:	000b      	movs	r3, r1
 8000d3a:	3380      	adds	r3, #128	@ 0x80
 8000d3c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d3e:	dd00      	ble.n	8000d42 <__aeabi_fmul+0x102>
 8000d40:	e0bd      	b.n	8000ebe <__aeabi_fmul+0x27e>
 8000d42:	01b2      	lsls	r2, r6, #6
 8000d44:	0a52      	lsrs	r2, r2, #9
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	e048      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fmul+0x110>
 8000d4e:	e092      	b.n	8000e76 <__aeabi_fmul+0x236>
 8000d50:	2308      	movs	r3, #8
 8000d52:	4699      	mov	r9, r3
 8000d54:	3b06      	subs	r3, #6
 8000d56:	469a      	mov	sl, r3
 8000d58:	027b      	lsls	r3, r7, #9
 8000d5a:	0a5b      	lsrs	r3, r3, #9
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	007b      	lsls	r3, r7, #1
 8000d60:	24ff      	movs	r4, #255	@ 0xff
 8000d62:	0e1b      	lsrs	r3, r3, #24
 8000d64:	0fff      	lsrs	r7, r7, #31
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d18a      	bne.n	8000c80 <__aeabi_fmul+0x40>
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d164      	bne.n	8000e3a <__aeabi_fmul+0x1fa>
 8000d70:	4649      	mov	r1, r9
 8000d72:	3201      	adds	r2, #1
 8000d74:	4311      	orrs	r1, r2
 8000d76:	4689      	mov	r9, r1
 8000d78:	290a      	cmp	r1, #10
 8000d7a:	dc08      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000d7c:	407d      	eors	r5, r7
 8000d7e:	2001      	movs	r0, #1
 8000d80:	b2ea      	uxtb	r2, r5
 8000d82:	2902      	cmp	r1, #2
 8000d84:	dc91      	bgt.n	8000caa <__aeabi_fmul+0x6a>
 8000d86:	0015      	movs	r5, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e027      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000d8c:	0015      	movs	r5, r2
 8000d8e:	4653      	mov	r3, sl
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fmul+0x156>
 8000d94:	e093      	b.n	8000ebe <__aeabi_fmul+0x27e>
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d01a      	beq.n	8000dd0 <__aeabi_fmul+0x190>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d12c      	bne.n	8000df8 <__aeabi_fmul+0x1b8>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2200      	movs	r2, #0
 8000da2:	e01b      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000da4:	4643      	mov	r3, r8
 8000da6:	34ff      	adds	r4, #255	@ 0xff
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d055      	beq.n	8000e58 <__aeabi_fmul+0x218>
 8000dac:	2103      	movs	r1, #3
 8000dae:	464b      	mov	r3, r9
 8000db0:	430b      	orrs	r3, r1
 8000db2:	0019      	movs	r1, r3
 8000db4:	2b0a      	cmp	r3, #10
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_fmul+0x17a>
 8000db8:	e092      	b.n	8000ee0 <__aeabi_fmul+0x2a0>
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_fmul+0x180>
 8000dbe:	e08c      	b.n	8000eda <__aeabi_fmul+0x29a>
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	03d2      	lsls	r2, r2, #15
 8000dc4:	4216      	tst	r6, r2
 8000dc6:	d003      	beq.n	8000dd0 <__aeabi_fmul+0x190>
 8000dc8:	4643      	mov	r3, r8
 8000dca:	4213      	tst	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fmul+0x190>
 8000dce:	e07d      	b.n	8000ecc <__aeabi_fmul+0x28c>
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	03d2      	lsls	r2, r2, #15
 8000dd4:	4332      	orrs	r2, r6
 8000dd6:	0252      	lsls	r2, r2, #9
 8000dd8:	0a52      	lsrs	r2, r2, #9
 8000dda:	23ff      	movs	r3, #255	@ 0xff
 8000ddc:	05d8      	lsls	r0, r3, #23
 8000dde:	07ed      	lsls	r5, r5, #31
 8000de0:	4310      	orrs	r0, r2
 8000de2:	4328      	orrs	r0, r5
 8000de4:	bce0      	pop	{r5, r6, r7}
 8000de6:	46ba      	mov	sl, r7
 8000de8:	46b1      	mov	r9, r6
 8000dea:	46a8      	mov	r8, r5
 8000dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dee:	2301      	movs	r3, #1
 8000df0:	0015      	movs	r5, r2
 8000df2:	0871      	lsrs	r1, r6, #1
 8000df4:	401e      	ands	r6, r3
 8000df6:	430e      	orrs	r6, r1
 8000df8:	0023      	movs	r3, r4
 8000dfa:	3380      	adds	r3, #128	@ 0x80
 8000dfc:	1c61      	adds	r1, r4, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dd41      	ble.n	8000e86 <__aeabi_fmul+0x246>
 8000e02:	0772      	lsls	r2, r6, #29
 8000e04:	d094      	beq.n	8000d30 <__aeabi_fmul+0xf0>
 8000e06:	220f      	movs	r2, #15
 8000e08:	4032      	ands	r2, r6
 8000e0a:	2a04      	cmp	r2, #4
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_fmul+0x1d0>
 8000e0e:	e78e      	b.n	8000d2e <__aeabi_fmul+0xee>
 8000e10:	e78e      	b.n	8000d30 <__aeabi_fmul+0xf0>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d105      	bne.n	8000e22 <__aeabi_fmul+0x1e2>
 8000e16:	2304      	movs	r3, #4
 8000e18:	4699      	mov	r9, r3
 8000e1a:	3b03      	subs	r3, #3
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	469a      	mov	sl, r3
 8000e20:	e726      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000e22:	0030      	movs	r0, r6
 8000e24:	f002 f940 	bl	80030a8 <__clzsi2>
 8000e28:	2476      	movs	r4, #118	@ 0x76
 8000e2a:	1f43      	subs	r3, r0, #5
 8000e2c:	409e      	lsls	r6, r3
 8000e2e:	2300      	movs	r3, #0
 8000e30:	4264      	negs	r4, r4
 8000e32:	4699      	mov	r9, r3
 8000e34:	469a      	mov	sl, r3
 8000e36:	1a24      	subs	r4, r4, r0
 8000e38:	e71a      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	f002 f934 	bl	80030a8 <__clzsi2>
 8000e40:	464b      	mov	r3, r9
 8000e42:	1a24      	subs	r4, r4, r0
 8000e44:	3c76      	subs	r4, #118	@ 0x76
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	dca1      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000e4a:	4643      	mov	r3, r8
 8000e4c:	3805      	subs	r0, #5
 8000e4e:	4083      	lsls	r3, r0
 8000e50:	407d      	eors	r5, r7
 8000e52:	4698      	mov	r8, r3
 8000e54:	b2ea      	uxtb	r2, r5
 8000e56:	e724      	b.n	8000ca2 <__aeabi_fmul+0x62>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	002a      	movs	r2, r5
 8000e60:	407a      	eors	r2, r7
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	2b0a      	cmp	r3, #10
 8000e66:	dc92      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000e68:	4649      	mov	r1, r9
 8000e6a:	0015      	movs	r5, r2
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	d026      	beq.n	8000ebe <__aeabi_fmul+0x27e>
 8000e70:	4699      	mov	r9, r3
 8000e72:	2002      	movs	r0, #2
 8000e74:	e719      	b.n	8000caa <__aeabi_fmul+0x6a>
 8000e76:	230c      	movs	r3, #12
 8000e78:	4699      	mov	r9, r3
 8000e7a:	3b09      	subs	r3, #9
 8000e7c:	24ff      	movs	r4, #255	@ 0xff
 8000e7e:	469a      	mov	sl, r3
 8000e80:	e6f6      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000e82:	0015      	movs	r5, r2
 8000e84:	0021      	movs	r1, r4
 8000e86:	2201      	movs	r2, #1
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b1b      	cmp	r3, #27
 8000e8c:	dd00      	ble.n	8000e90 <__aeabi_fmul+0x250>
 8000e8e:	e786      	b.n	8000d9e <__aeabi_fmul+0x15e>
 8000e90:	319e      	adds	r1, #158	@ 0x9e
 8000e92:	0032      	movs	r2, r6
 8000e94:	408e      	lsls	r6, r1
 8000e96:	40da      	lsrs	r2, r3
 8000e98:	1e73      	subs	r3, r6, #1
 8000e9a:	419e      	sbcs	r6, r3
 8000e9c:	4332      	orrs	r2, r6
 8000e9e:	0753      	lsls	r3, r2, #29
 8000ea0:	d004      	beq.n	8000eac <__aeabi_fmul+0x26c>
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d000      	beq.n	8000eac <__aeabi_fmul+0x26c>
 8000eaa:	3204      	adds	r2, #4
 8000eac:	0153      	lsls	r3, r2, #5
 8000eae:	d510      	bpl.n	8000ed2 <__aeabi_fmul+0x292>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	e792      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000eb6:	003d      	movs	r5, r7
 8000eb8:	4646      	mov	r6, r8
 8000eba:	4682      	mov	sl, r0
 8000ebc:	e767      	b.n	8000d8e <__aeabi_fmul+0x14e>
 8000ebe:	23ff      	movs	r3, #255	@ 0xff
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	e78b      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	03d2      	lsls	r2, r2, #15
 8000eca:	e786      	b.n	8000dda <__aeabi_fmul+0x19a>
 8000ecc:	003d      	movs	r5, r7
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	e783      	b.n	8000dda <__aeabi_fmul+0x19a>
 8000ed2:	0192      	lsls	r2, r2, #6
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	0a52      	lsrs	r2, r2, #9
 8000ed8:	e780      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000eda:	003d      	movs	r5, r7
 8000edc:	4646      	mov	r6, r8
 8000ede:	e777      	b.n	8000dd0 <__aeabi_fmul+0x190>
 8000ee0:	002a      	movs	r2, r5
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	407a      	eors	r2, r7
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	2003      	movs	r0, #3
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	e6e9      	b.n	8000cc2 <__aeabi_fmul+0x82>
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	f7ffffff 	.word	0xf7ffffff

08000ef4 <__aeabi_f2iz>:
 8000ef4:	0241      	lsls	r1, r0, #9
 8000ef6:	0042      	lsls	r2, r0, #1
 8000ef8:	0fc3      	lsrs	r3, r0, #31
 8000efa:	0a49      	lsrs	r1, r1, #9
 8000efc:	2000      	movs	r0, #0
 8000efe:	0e12      	lsrs	r2, r2, #24
 8000f00:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f02:	dd03      	ble.n	8000f0c <__aeabi_f2iz+0x18>
 8000f04:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f06:	dd02      	ble.n	8000f0e <__aeabi_f2iz+0x1a>
 8000f08:	4a09      	ldr	r2, [pc, #36]	@ (8000f30 <__aeabi_f2iz+0x3c>)
 8000f0a:	1898      	adds	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	2080      	movs	r0, #128	@ 0x80
 8000f10:	0400      	lsls	r0, r0, #16
 8000f12:	4301      	orrs	r1, r0
 8000f14:	2a95      	cmp	r2, #149	@ 0x95
 8000f16:	dc07      	bgt.n	8000f28 <__aeabi_f2iz+0x34>
 8000f18:	2096      	movs	r0, #150	@ 0x96
 8000f1a:	1a82      	subs	r2, r0, r2
 8000f1c:	40d1      	lsrs	r1, r2
 8000f1e:	4248      	negs	r0, r1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f3      	bne.n	8000f0c <__aeabi_f2iz+0x18>
 8000f24:	0008      	movs	r0, r1
 8000f26:	e7f1      	b.n	8000f0c <__aeabi_f2iz+0x18>
 8000f28:	3a96      	subs	r2, #150	@ 0x96
 8000f2a:	4091      	lsls	r1, r2
 8000f2c:	e7f7      	b.n	8000f1e <__aeabi_f2iz+0x2a>
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	7fffffff 	.word	0x7fffffff

08000f34 <__aeabi_i2f>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d012      	beq.n	8000f60 <__aeabi_i2f+0x2c>
 8000f3a:	17c3      	asrs	r3, r0, #31
 8000f3c:	18c5      	adds	r5, r0, r3
 8000f3e:	405d      	eors	r5, r3
 8000f40:	0fc4      	lsrs	r4, r0, #31
 8000f42:	0028      	movs	r0, r5
 8000f44:	f002 f8b0 	bl	80030a8 <__clzsi2>
 8000f48:	239e      	movs	r3, #158	@ 0x9e
 8000f4a:	1a1b      	subs	r3, r3, r0
 8000f4c:	2b96      	cmp	r3, #150	@ 0x96
 8000f4e:	dc0f      	bgt.n	8000f70 <__aeabi_i2f+0x3c>
 8000f50:	2808      	cmp	r0, #8
 8000f52:	d038      	beq.n	8000fc6 <__aeabi_i2f+0x92>
 8000f54:	3808      	subs	r0, #8
 8000f56:	4085      	lsls	r5, r0
 8000f58:	026d      	lsls	r5, r5, #9
 8000f5a:	0a6d      	lsrs	r5, r5, #9
 8000f5c:	b2d8      	uxtb	r0, r3
 8000f5e:	e002      	b.n	8000f66 <__aeabi_i2f+0x32>
 8000f60:	2400      	movs	r4, #0
 8000f62:	2000      	movs	r0, #0
 8000f64:	2500      	movs	r5, #0
 8000f66:	05c0      	lsls	r0, r0, #23
 8000f68:	4328      	orrs	r0, r5
 8000f6a:	07e4      	lsls	r4, r4, #31
 8000f6c:	4320      	orrs	r0, r4
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	2b99      	cmp	r3, #153	@ 0x99
 8000f72:	dc14      	bgt.n	8000f9e <__aeabi_i2f+0x6a>
 8000f74:	1f42      	subs	r2, r0, #5
 8000f76:	4095      	lsls	r5, r2
 8000f78:	002a      	movs	r2, r5
 8000f7a:	4915      	ldr	r1, [pc, #84]	@ (8000fd0 <__aeabi_i2f+0x9c>)
 8000f7c:	4011      	ands	r1, r2
 8000f7e:	0755      	lsls	r5, r2, #29
 8000f80:	d01c      	beq.n	8000fbc <__aeabi_i2f+0x88>
 8000f82:	250f      	movs	r5, #15
 8000f84:	402a      	ands	r2, r5
 8000f86:	2a04      	cmp	r2, #4
 8000f88:	d018      	beq.n	8000fbc <__aeabi_i2f+0x88>
 8000f8a:	3104      	adds	r1, #4
 8000f8c:	08ca      	lsrs	r2, r1, #3
 8000f8e:	0149      	lsls	r1, r1, #5
 8000f90:	d515      	bpl.n	8000fbe <__aeabi_i2f+0x8a>
 8000f92:	239f      	movs	r3, #159	@ 0x9f
 8000f94:	0252      	lsls	r2, r2, #9
 8000f96:	1a18      	subs	r0, r3, r0
 8000f98:	0a55      	lsrs	r5, r2, #9
 8000f9a:	b2c0      	uxtb	r0, r0
 8000f9c:	e7e3      	b.n	8000f66 <__aeabi_i2f+0x32>
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	0029      	movs	r1, r5
 8000fa2:	1a12      	subs	r2, r2, r0
 8000fa4:	40d1      	lsrs	r1, r2
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	321b      	adds	r2, #27
 8000faa:	4095      	lsls	r5, r2
 8000fac:	002a      	movs	r2, r5
 8000fae:	1e55      	subs	r5, r2, #1
 8000fb0:	41aa      	sbcs	r2, r5
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	4906      	ldr	r1, [pc, #24]	@ (8000fd0 <__aeabi_i2f+0x9c>)
 8000fb6:	4011      	ands	r1, r2
 8000fb8:	0755      	lsls	r5, r2, #29
 8000fba:	d1e2      	bne.n	8000f82 <__aeabi_i2f+0x4e>
 8000fbc:	08ca      	lsrs	r2, r1, #3
 8000fbe:	0252      	lsls	r2, r2, #9
 8000fc0:	0a55      	lsrs	r5, r2, #9
 8000fc2:	b2d8      	uxtb	r0, r3
 8000fc4:	e7cf      	b.n	8000f66 <__aeabi_i2f+0x32>
 8000fc6:	026d      	lsls	r5, r5, #9
 8000fc8:	0a6d      	lsrs	r5, r5, #9
 8000fca:	308e      	adds	r0, #142	@ 0x8e
 8000fcc:	e7cb      	b.n	8000f66 <__aeabi_i2f+0x32>
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	fbffffff 	.word	0xfbffffff

08000fd4 <__aeabi_dadd>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	464f      	mov	r7, r9
 8000fd8:	4646      	mov	r6, r8
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	b5c0      	push	{r6, r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	9000      	str	r0, [sp, #0]
 8000fe2:	9101      	str	r1, [sp, #4]
 8000fe4:	030e      	lsls	r6, r1, #12
 8000fe6:	004c      	lsls	r4, r1, #1
 8000fe8:	0fcd      	lsrs	r5, r1, #31
 8000fea:	0a71      	lsrs	r1, r6, #9
 8000fec:	9e00      	ldr	r6, [sp, #0]
 8000fee:	005f      	lsls	r7, r3, #1
 8000ff0:	0f76      	lsrs	r6, r6, #29
 8000ff2:	430e      	orrs	r6, r1
 8000ff4:	9900      	ldr	r1, [sp, #0]
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	00c9      	lsls	r1, r1, #3
 8000ffc:	4689      	mov	r9, r1
 8000ffe:	0319      	lsls	r1, r3, #12
 8001000:	0d7b      	lsrs	r3, r7, #21
 8001002:	4698      	mov	r8, r3
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	0a49      	lsrs	r1, r1, #9
 8001008:	0fdb      	lsrs	r3, r3, #31
 800100a:	469c      	mov	ip, r3
 800100c:	9b00      	ldr	r3, [sp, #0]
 800100e:	9a00      	ldr	r2, [sp, #0]
 8001010:	0f5b      	lsrs	r3, r3, #29
 8001012:	430b      	orrs	r3, r1
 8001014:	4641      	mov	r1, r8
 8001016:	0d64      	lsrs	r4, r4, #21
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1a61      	subs	r1, r4, r1
 800101c:	4565      	cmp	r5, ip
 800101e:	d100      	bne.n	8001022 <__aeabi_dadd+0x4e>
 8001020:	e0a6      	b.n	8001170 <__aeabi_dadd+0x19c>
 8001022:	2900      	cmp	r1, #0
 8001024:	dd72      	ble.n	800110c <__aeabi_dadd+0x138>
 8001026:	4647      	mov	r7, r8
 8001028:	2f00      	cmp	r7, #0
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x5a>
 800102c:	e0dd      	b.n	80011ea <__aeabi_dadd+0x216>
 800102e:	4fcc      	ldr	r7, [pc, #816]	@ (8001360 <__aeabi_dadd+0x38c>)
 8001030:	42bc      	cmp	r4, r7
 8001032:	d100      	bne.n	8001036 <__aeabi_dadd+0x62>
 8001034:	e19a      	b.n	800136c <__aeabi_dadd+0x398>
 8001036:	2701      	movs	r7, #1
 8001038:	2938      	cmp	r1, #56	@ 0x38
 800103a:	dc17      	bgt.n	800106c <__aeabi_dadd+0x98>
 800103c:	2780      	movs	r7, #128	@ 0x80
 800103e:	043f      	lsls	r7, r7, #16
 8001040:	433b      	orrs	r3, r7
 8001042:	291f      	cmp	r1, #31
 8001044:	dd00      	ble.n	8001048 <__aeabi_dadd+0x74>
 8001046:	e1dd      	b.n	8001404 <__aeabi_dadd+0x430>
 8001048:	2720      	movs	r7, #32
 800104a:	1a78      	subs	r0, r7, r1
 800104c:	001f      	movs	r7, r3
 800104e:	4087      	lsls	r7, r0
 8001050:	46ba      	mov	sl, r7
 8001052:	0017      	movs	r7, r2
 8001054:	40cf      	lsrs	r7, r1
 8001056:	4684      	mov	ip, r0
 8001058:	0038      	movs	r0, r7
 800105a:	4657      	mov	r7, sl
 800105c:	4307      	orrs	r7, r0
 800105e:	4660      	mov	r0, ip
 8001060:	4082      	lsls	r2, r0
 8001062:	40cb      	lsrs	r3, r1
 8001064:	1e50      	subs	r0, r2, #1
 8001066:	4182      	sbcs	r2, r0
 8001068:	1af6      	subs	r6, r6, r3
 800106a:	4317      	orrs	r7, r2
 800106c:	464b      	mov	r3, r9
 800106e:	1bdf      	subs	r7, r3, r7
 8001070:	45b9      	cmp	r9, r7
 8001072:	4180      	sbcs	r0, r0
 8001074:	4240      	negs	r0, r0
 8001076:	1a36      	subs	r6, r6, r0
 8001078:	0233      	lsls	r3, r6, #8
 800107a:	d400      	bmi.n	800107e <__aeabi_dadd+0xaa>
 800107c:	e0ff      	b.n	800127e <__aeabi_dadd+0x2aa>
 800107e:	0276      	lsls	r6, r6, #9
 8001080:	0a76      	lsrs	r6, r6, #9
 8001082:	2e00      	cmp	r6, #0
 8001084:	d100      	bne.n	8001088 <__aeabi_dadd+0xb4>
 8001086:	e13c      	b.n	8001302 <__aeabi_dadd+0x32e>
 8001088:	0030      	movs	r0, r6
 800108a:	f002 f80d 	bl	80030a8 <__clzsi2>
 800108e:	0003      	movs	r3, r0
 8001090:	3b08      	subs	r3, #8
 8001092:	2120      	movs	r1, #32
 8001094:	0038      	movs	r0, r7
 8001096:	1aca      	subs	r2, r1, r3
 8001098:	40d0      	lsrs	r0, r2
 800109a:	409e      	lsls	r6, r3
 800109c:	0002      	movs	r2, r0
 800109e:	409f      	lsls	r7, r3
 80010a0:	4332      	orrs	r2, r6
 80010a2:	429c      	cmp	r4, r3
 80010a4:	dd00      	ble.n	80010a8 <__aeabi_dadd+0xd4>
 80010a6:	e1a6      	b.n	80013f6 <__aeabi_dadd+0x422>
 80010a8:	1b18      	subs	r0, r3, r4
 80010aa:	3001      	adds	r0, #1
 80010ac:	1a09      	subs	r1, r1, r0
 80010ae:	003e      	movs	r6, r7
 80010b0:	408f      	lsls	r7, r1
 80010b2:	40c6      	lsrs	r6, r0
 80010b4:	1e7b      	subs	r3, r7, #1
 80010b6:	419f      	sbcs	r7, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	408b      	lsls	r3, r1
 80010bc:	4337      	orrs	r7, r6
 80010be:	431f      	orrs	r7, r3
 80010c0:	40c2      	lsrs	r2, r0
 80010c2:	003b      	movs	r3, r7
 80010c4:	0016      	movs	r6, r2
 80010c6:	2400      	movs	r4, #0
 80010c8:	4313      	orrs	r3, r2
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0xfa>
 80010cc:	e1df      	b.n	800148e <__aeabi_dadd+0x4ba>
 80010ce:	077b      	lsls	r3, r7, #29
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0x100>
 80010d2:	e332      	b.n	800173a <__aeabi_dadd+0x766>
 80010d4:	230f      	movs	r3, #15
 80010d6:	003a      	movs	r2, r7
 80010d8:	403b      	ands	r3, r7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d004      	beq.n	80010e8 <__aeabi_dadd+0x114>
 80010de:	1d3a      	adds	r2, r7, #4
 80010e0:	42ba      	cmp	r2, r7
 80010e2:	41bf      	sbcs	r7, r7
 80010e4:	427f      	negs	r7, r7
 80010e6:	19f6      	adds	r6, r6, r7
 80010e8:	0233      	lsls	r3, r6, #8
 80010ea:	d400      	bmi.n	80010ee <__aeabi_dadd+0x11a>
 80010ec:	e323      	b.n	8001736 <__aeabi_dadd+0x762>
 80010ee:	4b9c      	ldr	r3, [pc, #624]	@ (8001360 <__aeabi_dadd+0x38c>)
 80010f0:	3401      	adds	r4, #1
 80010f2:	429c      	cmp	r4, r3
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dadd+0x124>
 80010f6:	e0b4      	b.n	8001262 <__aeabi_dadd+0x28e>
 80010f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001364 <__aeabi_dadd+0x390>)
 80010fa:	0564      	lsls	r4, r4, #21
 80010fc:	401e      	ands	r6, r3
 80010fe:	0d64      	lsrs	r4, r4, #21
 8001100:	0777      	lsls	r7, r6, #29
 8001102:	08d2      	lsrs	r2, r2, #3
 8001104:	0276      	lsls	r6, r6, #9
 8001106:	4317      	orrs	r7, r2
 8001108:	0b36      	lsrs	r6, r6, #12
 800110a:	e0ac      	b.n	8001266 <__aeabi_dadd+0x292>
 800110c:	2900      	cmp	r1, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_dadd+0x13e>
 8001110:	e07e      	b.n	8001210 <__aeabi_dadd+0x23c>
 8001112:	4641      	mov	r1, r8
 8001114:	1b09      	subs	r1, r1, r4
 8001116:	2c00      	cmp	r4, #0
 8001118:	d000      	beq.n	800111c <__aeabi_dadd+0x148>
 800111a:	e160      	b.n	80013de <__aeabi_dadd+0x40a>
 800111c:	0034      	movs	r4, r6
 800111e:	4648      	mov	r0, r9
 8001120:	4304      	orrs	r4, r0
 8001122:	d100      	bne.n	8001126 <__aeabi_dadd+0x152>
 8001124:	e1c9      	b.n	80014ba <__aeabi_dadd+0x4e6>
 8001126:	1e4c      	subs	r4, r1, #1
 8001128:	2901      	cmp	r1, #1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x15a>
 800112c:	e22e      	b.n	800158c <__aeabi_dadd+0x5b8>
 800112e:	4d8c      	ldr	r5, [pc, #560]	@ (8001360 <__aeabi_dadd+0x38c>)
 8001130:	42a9      	cmp	r1, r5
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x162>
 8001134:	e224      	b.n	8001580 <__aeabi_dadd+0x5ac>
 8001136:	2701      	movs	r7, #1
 8001138:	2c38      	cmp	r4, #56	@ 0x38
 800113a:	dc11      	bgt.n	8001160 <__aeabi_dadd+0x18c>
 800113c:	0021      	movs	r1, r4
 800113e:	291f      	cmp	r1, #31
 8001140:	dd00      	ble.n	8001144 <__aeabi_dadd+0x170>
 8001142:	e20b      	b.n	800155c <__aeabi_dadd+0x588>
 8001144:	2420      	movs	r4, #32
 8001146:	0037      	movs	r7, r6
 8001148:	4648      	mov	r0, r9
 800114a:	1a64      	subs	r4, r4, r1
 800114c:	40a7      	lsls	r7, r4
 800114e:	40c8      	lsrs	r0, r1
 8001150:	4307      	orrs	r7, r0
 8001152:	4648      	mov	r0, r9
 8001154:	40a0      	lsls	r0, r4
 8001156:	40ce      	lsrs	r6, r1
 8001158:	1e44      	subs	r4, r0, #1
 800115a:	41a0      	sbcs	r0, r4
 800115c:	1b9b      	subs	r3, r3, r6
 800115e:	4307      	orrs	r7, r0
 8001160:	1bd7      	subs	r7, r2, r7
 8001162:	42ba      	cmp	r2, r7
 8001164:	4192      	sbcs	r2, r2
 8001166:	4252      	negs	r2, r2
 8001168:	4665      	mov	r5, ip
 800116a:	4644      	mov	r4, r8
 800116c:	1a9e      	subs	r6, r3, r2
 800116e:	e783      	b.n	8001078 <__aeabi_dadd+0xa4>
 8001170:	2900      	cmp	r1, #0
 8001172:	dc00      	bgt.n	8001176 <__aeabi_dadd+0x1a2>
 8001174:	e09c      	b.n	80012b0 <__aeabi_dadd+0x2dc>
 8001176:	4647      	mov	r7, r8
 8001178:	2f00      	cmp	r7, #0
 800117a:	d167      	bne.n	800124c <__aeabi_dadd+0x278>
 800117c:	001f      	movs	r7, r3
 800117e:	4317      	orrs	r7, r2
 8001180:	d100      	bne.n	8001184 <__aeabi_dadd+0x1b0>
 8001182:	e0e4      	b.n	800134e <__aeabi_dadd+0x37a>
 8001184:	1e48      	subs	r0, r1, #1
 8001186:	2901      	cmp	r1, #1
 8001188:	d100      	bne.n	800118c <__aeabi_dadd+0x1b8>
 800118a:	e19b      	b.n	80014c4 <__aeabi_dadd+0x4f0>
 800118c:	4f74      	ldr	r7, [pc, #464]	@ (8001360 <__aeabi_dadd+0x38c>)
 800118e:	42b9      	cmp	r1, r7
 8001190:	d100      	bne.n	8001194 <__aeabi_dadd+0x1c0>
 8001192:	e0eb      	b.n	800136c <__aeabi_dadd+0x398>
 8001194:	2701      	movs	r7, #1
 8001196:	0001      	movs	r1, r0
 8001198:	2838      	cmp	r0, #56	@ 0x38
 800119a:	dc11      	bgt.n	80011c0 <__aeabi_dadd+0x1ec>
 800119c:	291f      	cmp	r1, #31
 800119e:	dd00      	ble.n	80011a2 <__aeabi_dadd+0x1ce>
 80011a0:	e1c7      	b.n	8001532 <__aeabi_dadd+0x55e>
 80011a2:	2720      	movs	r7, #32
 80011a4:	1a78      	subs	r0, r7, r1
 80011a6:	001f      	movs	r7, r3
 80011a8:	4684      	mov	ip, r0
 80011aa:	4087      	lsls	r7, r0
 80011ac:	0010      	movs	r0, r2
 80011ae:	40c8      	lsrs	r0, r1
 80011b0:	4307      	orrs	r7, r0
 80011b2:	4660      	mov	r0, ip
 80011b4:	4082      	lsls	r2, r0
 80011b6:	40cb      	lsrs	r3, r1
 80011b8:	1e50      	subs	r0, r2, #1
 80011ba:	4182      	sbcs	r2, r0
 80011bc:	18f6      	adds	r6, r6, r3
 80011be:	4317      	orrs	r7, r2
 80011c0:	444f      	add	r7, r9
 80011c2:	454f      	cmp	r7, r9
 80011c4:	4180      	sbcs	r0, r0
 80011c6:	4240      	negs	r0, r0
 80011c8:	1836      	adds	r6, r6, r0
 80011ca:	0233      	lsls	r3, r6, #8
 80011cc:	d557      	bpl.n	800127e <__aeabi_dadd+0x2aa>
 80011ce:	4b64      	ldr	r3, [pc, #400]	@ (8001360 <__aeabi_dadd+0x38c>)
 80011d0:	3401      	adds	r4, #1
 80011d2:	429c      	cmp	r4, r3
 80011d4:	d045      	beq.n	8001262 <__aeabi_dadd+0x28e>
 80011d6:	2101      	movs	r1, #1
 80011d8:	4b62      	ldr	r3, [pc, #392]	@ (8001364 <__aeabi_dadd+0x390>)
 80011da:	087a      	lsrs	r2, r7, #1
 80011dc:	401e      	ands	r6, r3
 80011de:	4039      	ands	r1, r7
 80011e0:	430a      	orrs	r2, r1
 80011e2:	07f7      	lsls	r7, r6, #31
 80011e4:	4317      	orrs	r7, r2
 80011e6:	0876      	lsrs	r6, r6, #1
 80011e8:	e771      	b.n	80010ce <__aeabi_dadd+0xfa>
 80011ea:	001f      	movs	r7, r3
 80011ec:	4317      	orrs	r7, r2
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x21e>
 80011f0:	e0ad      	b.n	800134e <__aeabi_dadd+0x37a>
 80011f2:	1e4f      	subs	r7, r1, #1
 80011f4:	46bc      	mov	ip, r7
 80011f6:	2901      	cmp	r1, #1
 80011f8:	d100      	bne.n	80011fc <__aeabi_dadd+0x228>
 80011fa:	e182      	b.n	8001502 <__aeabi_dadd+0x52e>
 80011fc:	4f58      	ldr	r7, [pc, #352]	@ (8001360 <__aeabi_dadd+0x38c>)
 80011fe:	42b9      	cmp	r1, r7
 8001200:	d100      	bne.n	8001204 <__aeabi_dadd+0x230>
 8001202:	e190      	b.n	8001526 <__aeabi_dadd+0x552>
 8001204:	4661      	mov	r1, ip
 8001206:	2701      	movs	r7, #1
 8001208:	2938      	cmp	r1, #56	@ 0x38
 800120a:	dd00      	ble.n	800120e <__aeabi_dadd+0x23a>
 800120c:	e72e      	b.n	800106c <__aeabi_dadd+0x98>
 800120e:	e718      	b.n	8001042 <__aeabi_dadd+0x6e>
 8001210:	4f55      	ldr	r7, [pc, #340]	@ (8001368 <__aeabi_dadd+0x394>)
 8001212:	1c61      	adds	r1, r4, #1
 8001214:	4239      	tst	r1, r7
 8001216:	d000      	beq.n	800121a <__aeabi_dadd+0x246>
 8001218:	e0d0      	b.n	80013bc <__aeabi_dadd+0x3e8>
 800121a:	0031      	movs	r1, r6
 800121c:	4648      	mov	r0, r9
 800121e:	001f      	movs	r7, r3
 8001220:	4301      	orrs	r1, r0
 8001222:	4317      	orrs	r7, r2
 8001224:	2c00      	cmp	r4, #0
 8001226:	d000      	beq.n	800122a <__aeabi_dadd+0x256>
 8001228:	e13d      	b.n	80014a6 <__aeabi_dadd+0x4d2>
 800122a:	2900      	cmp	r1, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x25c>
 800122e:	e1bc      	b.n	80015aa <__aeabi_dadd+0x5d6>
 8001230:	2f00      	cmp	r7, #0
 8001232:	d000      	beq.n	8001236 <__aeabi_dadd+0x262>
 8001234:	e1bf      	b.n	80015b6 <__aeabi_dadd+0x5e2>
 8001236:	464b      	mov	r3, r9
 8001238:	2100      	movs	r1, #0
 800123a:	08d8      	lsrs	r0, r3, #3
 800123c:	0777      	lsls	r7, r6, #29
 800123e:	4307      	orrs	r7, r0
 8001240:	08f0      	lsrs	r0, r6, #3
 8001242:	0306      	lsls	r6, r0, #12
 8001244:	054c      	lsls	r4, r1, #21
 8001246:	0b36      	lsrs	r6, r6, #12
 8001248:	0d64      	lsrs	r4, r4, #21
 800124a:	e00c      	b.n	8001266 <__aeabi_dadd+0x292>
 800124c:	4f44      	ldr	r7, [pc, #272]	@ (8001360 <__aeabi_dadd+0x38c>)
 800124e:	42bc      	cmp	r4, r7
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x280>
 8001252:	e08b      	b.n	800136c <__aeabi_dadd+0x398>
 8001254:	2701      	movs	r7, #1
 8001256:	2938      	cmp	r1, #56	@ 0x38
 8001258:	dcb2      	bgt.n	80011c0 <__aeabi_dadd+0x1ec>
 800125a:	2780      	movs	r7, #128	@ 0x80
 800125c:	043f      	lsls	r7, r7, #16
 800125e:	433b      	orrs	r3, r7
 8001260:	e79c      	b.n	800119c <__aeabi_dadd+0x1c8>
 8001262:	2600      	movs	r6, #0
 8001264:	2700      	movs	r7, #0
 8001266:	0524      	lsls	r4, r4, #20
 8001268:	4334      	orrs	r4, r6
 800126a:	07ed      	lsls	r5, r5, #31
 800126c:	432c      	orrs	r4, r5
 800126e:	0038      	movs	r0, r7
 8001270:	0021      	movs	r1, r4
 8001272:	b002      	add	sp, #8
 8001274:	bce0      	pop	{r5, r6, r7}
 8001276:	46ba      	mov	sl, r7
 8001278:	46b1      	mov	r9, r6
 800127a:	46a8      	mov	r8, r5
 800127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127e:	077b      	lsls	r3, r7, #29
 8001280:	d004      	beq.n	800128c <__aeabi_dadd+0x2b8>
 8001282:	230f      	movs	r3, #15
 8001284:	403b      	ands	r3, r7
 8001286:	2b04      	cmp	r3, #4
 8001288:	d000      	beq.n	800128c <__aeabi_dadd+0x2b8>
 800128a:	e728      	b.n	80010de <__aeabi_dadd+0x10a>
 800128c:	08f8      	lsrs	r0, r7, #3
 800128e:	4b34      	ldr	r3, [pc, #208]	@ (8001360 <__aeabi_dadd+0x38c>)
 8001290:	0777      	lsls	r7, r6, #29
 8001292:	4307      	orrs	r7, r0
 8001294:	08f0      	lsrs	r0, r6, #3
 8001296:	429c      	cmp	r4, r3
 8001298:	d000      	beq.n	800129c <__aeabi_dadd+0x2c8>
 800129a:	e24a      	b.n	8001732 <__aeabi_dadd+0x75e>
 800129c:	003b      	movs	r3, r7
 800129e:	4303      	orrs	r3, r0
 80012a0:	d059      	beq.n	8001356 <__aeabi_dadd+0x382>
 80012a2:	2680      	movs	r6, #128	@ 0x80
 80012a4:	0336      	lsls	r6, r6, #12
 80012a6:	4306      	orrs	r6, r0
 80012a8:	0336      	lsls	r6, r6, #12
 80012aa:	4c2d      	ldr	r4, [pc, #180]	@ (8001360 <__aeabi_dadd+0x38c>)
 80012ac:	0b36      	lsrs	r6, r6, #12
 80012ae:	e7da      	b.n	8001266 <__aeabi_dadd+0x292>
 80012b0:	2900      	cmp	r1, #0
 80012b2:	d061      	beq.n	8001378 <__aeabi_dadd+0x3a4>
 80012b4:	4641      	mov	r1, r8
 80012b6:	1b09      	subs	r1, r1, r4
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_dadd+0x2ea>
 80012bc:	e0b9      	b.n	8001432 <__aeabi_dadd+0x45e>
 80012be:	4c28      	ldr	r4, [pc, #160]	@ (8001360 <__aeabi_dadd+0x38c>)
 80012c0:	45a0      	cmp	r8, r4
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dadd+0x2f2>
 80012c4:	e1a5      	b.n	8001612 <__aeabi_dadd+0x63e>
 80012c6:	2701      	movs	r7, #1
 80012c8:	2938      	cmp	r1, #56	@ 0x38
 80012ca:	dc13      	bgt.n	80012f4 <__aeabi_dadd+0x320>
 80012cc:	2480      	movs	r4, #128	@ 0x80
 80012ce:	0424      	lsls	r4, r4, #16
 80012d0:	4326      	orrs	r6, r4
 80012d2:	291f      	cmp	r1, #31
 80012d4:	dd00      	ble.n	80012d8 <__aeabi_dadd+0x304>
 80012d6:	e1c8      	b.n	800166a <__aeabi_dadd+0x696>
 80012d8:	2420      	movs	r4, #32
 80012da:	0037      	movs	r7, r6
 80012dc:	4648      	mov	r0, r9
 80012de:	1a64      	subs	r4, r4, r1
 80012e0:	40a7      	lsls	r7, r4
 80012e2:	40c8      	lsrs	r0, r1
 80012e4:	4307      	orrs	r7, r0
 80012e6:	4648      	mov	r0, r9
 80012e8:	40a0      	lsls	r0, r4
 80012ea:	40ce      	lsrs	r6, r1
 80012ec:	1e44      	subs	r4, r0, #1
 80012ee:	41a0      	sbcs	r0, r4
 80012f0:	199b      	adds	r3, r3, r6
 80012f2:	4307      	orrs	r7, r0
 80012f4:	18bf      	adds	r7, r7, r2
 80012f6:	4297      	cmp	r7, r2
 80012f8:	4192      	sbcs	r2, r2
 80012fa:	4252      	negs	r2, r2
 80012fc:	4644      	mov	r4, r8
 80012fe:	18d6      	adds	r6, r2, r3
 8001300:	e763      	b.n	80011ca <__aeabi_dadd+0x1f6>
 8001302:	0038      	movs	r0, r7
 8001304:	f001 fed0 	bl	80030a8 <__clzsi2>
 8001308:	0003      	movs	r3, r0
 800130a:	3318      	adds	r3, #24
 800130c:	2b1f      	cmp	r3, #31
 800130e:	dc00      	bgt.n	8001312 <__aeabi_dadd+0x33e>
 8001310:	e6bf      	b.n	8001092 <__aeabi_dadd+0xbe>
 8001312:	003a      	movs	r2, r7
 8001314:	3808      	subs	r0, #8
 8001316:	4082      	lsls	r2, r0
 8001318:	429c      	cmp	r4, r3
 800131a:	dd00      	ble.n	800131e <__aeabi_dadd+0x34a>
 800131c:	e083      	b.n	8001426 <__aeabi_dadd+0x452>
 800131e:	1b1b      	subs	r3, r3, r4
 8001320:	1c58      	adds	r0, r3, #1
 8001322:	281f      	cmp	r0, #31
 8001324:	dc00      	bgt.n	8001328 <__aeabi_dadd+0x354>
 8001326:	e1b4      	b.n	8001692 <__aeabi_dadd+0x6be>
 8001328:	0017      	movs	r7, r2
 800132a:	3b1f      	subs	r3, #31
 800132c:	40df      	lsrs	r7, r3
 800132e:	2820      	cmp	r0, #32
 8001330:	d005      	beq.n	800133e <__aeabi_dadd+0x36a>
 8001332:	2340      	movs	r3, #64	@ 0x40
 8001334:	1a1b      	subs	r3, r3, r0
 8001336:	409a      	lsls	r2, r3
 8001338:	1e53      	subs	r3, r2, #1
 800133a:	419a      	sbcs	r2, r3
 800133c:	4317      	orrs	r7, r2
 800133e:	2400      	movs	r4, #0
 8001340:	2f00      	cmp	r7, #0
 8001342:	d00a      	beq.n	800135a <__aeabi_dadd+0x386>
 8001344:	077b      	lsls	r3, r7, #29
 8001346:	d000      	beq.n	800134a <__aeabi_dadd+0x376>
 8001348:	e6c4      	b.n	80010d4 <__aeabi_dadd+0x100>
 800134a:	0026      	movs	r6, r4
 800134c:	e79e      	b.n	800128c <__aeabi_dadd+0x2b8>
 800134e:	464b      	mov	r3, r9
 8001350:	000c      	movs	r4, r1
 8001352:	08d8      	lsrs	r0, r3, #3
 8001354:	e79b      	b.n	800128e <__aeabi_dadd+0x2ba>
 8001356:	2700      	movs	r7, #0
 8001358:	4c01      	ldr	r4, [pc, #4]	@ (8001360 <__aeabi_dadd+0x38c>)
 800135a:	2600      	movs	r6, #0
 800135c:	e783      	b.n	8001266 <__aeabi_dadd+0x292>
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	000007ff 	.word	0x000007ff
 8001364:	ff7fffff 	.word	0xff7fffff
 8001368:	000007fe 	.word	0x000007fe
 800136c:	464b      	mov	r3, r9
 800136e:	0777      	lsls	r7, r6, #29
 8001370:	08d8      	lsrs	r0, r3, #3
 8001372:	4307      	orrs	r7, r0
 8001374:	08f0      	lsrs	r0, r6, #3
 8001376:	e791      	b.n	800129c <__aeabi_dadd+0x2c8>
 8001378:	4fcd      	ldr	r7, [pc, #820]	@ (80016b0 <__aeabi_dadd+0x6dc>)
 800137a:	1c61      	adds	r1, r4, #1
 800137c:	4239      	tst	r1, r7
 800137e:	d16b      	bne.n	8001458 <__aeabi_dadd+0x484>
 8001380:	0031      	movs	r1, r6
 8001382:	4648      	mov	r0, r9
 8001384:	4301      	orrs	r1, r0
 8001386:	2c00      	cmp	r4, #0
 8001388:	d000      	beq.n	800138c <__aeabi_dadd+0x3b8>
 800138a:	e14b      	b.n	8001624 <__aeabi_dadd+0x650>
 800138c:	001f      	movs	r7, r3
 800138e:	4317      	orrs	r7, r2
 8001390:	2900      	cmp	r1, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0x3c2>
 8001394:	e181      	b.n	800169a <__aeabi_dadd+0x6c6>
 8001396:	2f00      	cmp	r7, #0
 8001398:	d100      	bne.n	800139c <__aeabi_dadd+0x3c8>
 800139a:	e74c      	b.n	8001236 <__aeabi_dadd+0x262>
 800139c:	444a      	add	r2, r9
 800139e:	454a      	cmp	r2, r9
 80013a0:	4180      	sbcs	r0, r0
 80013a2:	18f6      	adds	r6, r6, r3
 80013a4:	4240      	negs	r0, r0
 80013a6:	1836      	adds	r6, r6, r0
 80013a8:	0233      	lsls	r3, r6, #8
 80013aa:	d500      	bpl.n	80013ae <__aeabi_dadd+0x3da>
 80013ac:	e1b0      	b.n	8001710 <__aeabi_dadd+0x73c>
 80013ae:	0017      	movs	r7, r2
 80013b0:	4691      	mov	r9, r2
 80013b2:	4337      	orrs	r7, r6
 80013b4:	d000      	beq.n	80013b8 <__aeabi_dadd+0x3e4>
 80013b6:	e73e      	b.n	8001236 <__aeabi_dadd+0x262>
 80013b8:	2600      	movs	r6, #0
 80013ba:	e754      	b.n	8001266 <__aeabi_dadd+0x292>
 80013bc:	4649      	mov	r1, r9
 80013be:	1a89      	subs	r1, r1, r2
 80013c0:	4688      	mov	r8, r1
 80013c2:	45c1      	cmp	r9, r8
 80013c4:	41bf      	sbcs	r7, r7
 80013c6:	1af1      	subs	r1, r6, r3
 80013c8:	427f      	negs	r7, r7
 80013ca:	1bc9      	subs	r1, r1, r7
 80013cc:	020f      	lsls	r7, r1, #8
 80013ce:	d461      	bmi.n	8001494 <__aeabi_dadd+0x4c0>
 80013d0:	4647      	mov	r7, r8
 80013d2:	430f      	orrs	r7, r1
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dadd+0x404>
 80013d6:	e0bd      	b.n	8001554 <__aeabi_dadd+0x580>
 80013d8:	000e      	movs	r6, r1
 80013da:	4647      	mov	r7, r8
 80013dc:	e651      	b.n	8001082 <__aeabi_dadd+0xae>
 80013de:	4cb5      	ldr	r4, [pc, #724]	@ (80016b4 <__aeabi_dadd+0x6e0>)
 80013e0:	45a0      	cmp	r8, r4
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x412>
 80013e4:	e100      	b.n	80015e8 <__aeabi_dadd+0x614>
 80013e6:	2701      	movs	r7, #1
 80013e8:	2938      	cmp	r1, #56	@ 0x38
 80013ea:	dd00      	ble.n	80013ee <__aeabi_dadd+0x41a>
 80013ec:	e6b8      	b.n	8001160 <__aeabi_dadd+0x18c>
 80013ee:	2480      	movs	r4, #128	@ 0x80
 80013f0:	0424      	lsls	r4, r4, #16
 80013f2:	4326      	orrs	r6, r4
 80013f4:	e6a3      	b.n	800113e <__aeabi_dadd+0x16a>
 80013f6:	4eb0      	ldr	r6, [pc, #704]	@ (80016b8 <__aeabi_dadd+0x6e4>)
 80013f8:	1ae4      	subs	r4, r4, r3
 80013fa:	4016      	ands	r6, r2
 80013fc:	077b      	lsls	r3, r7, #29
 80013fe:	d000      	beq.n	8001402 <__aeabi_dadd+0x42e>
 8001400:	e73f      	b.n	8001282 <__aeabi_dadd+0x2ae>
 8001402:	e743      	b.n	800128c <__aeabi_dadd+0x2b8>
 8001404:	000f      	movs	r7, r1
 8001406:	0018      	movs	r0, r3
 8001408:	3f20      	subs	r7, #32
 800140a:	40f8      	lsrs	r0, r7
 800140c:	4684      	mov	ip, r0
 800140e:	2920      	cmp	r1, #32
 8001410:	d003      	beq.n	800141a <__aeabi_dadd+0x446>
 8001412:	2740      	movs	r7, #64	@ 0x40
 8001414:	1a79      	subs	r1, r7, r1
 8001416:	408b      	lsls	r3, r1
 8001418:	431a      	orrs	r2, r3
 800141a:	1e53      	subs	r3, r2, #1
 800141c:	419a      	sbcs	r2, r3
 800141e:	4663      	mov	r3, ip
 8001420:	0017      	movs	r7, r2
 8001422:	431f      	orrs	r7, r3
 8001424:	e622      	b.n	800106c <__aeabi_dadd+0x98>
 8001426:	48a4      	ldr	r0, [pc, #656]	@ (80016b8 <__aeabi_dadd+0x6e4>)
 8001428:	1ae1      	subs	r1, r4, r3
 800142a:	4010      	ands	r0, r2
 800142c:	0747      	lsls	r7, r0, #29
 800142e:	08c0      	lsrs	r0, r0, #3
 8001430:	e707      	b.n	8001242 <__aeabi_dadd+0x26e>
 8001432:	0034      	movs	r4, r6
 8001434:	4648      	mov	r0, r9
 8001436:	4304      	orrs	r4, r0
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x468>
 800143a:	e0fa      	b.n	8001632 <__aeabi_dadd+0x65e>
 800143c:	1e4c      	subs	r4, r1, #1
 800143e:	2901      	cmp	r1, #1
 8001440:	d100      	bne.n	8001444 <__aeabi_dadd+0x470>
 8001442:	e0d7      	b.n	80015f4 <__aeabi_dadd+0x620>
 8001444:	4f9b      	ldr	r7, [pc, #620]	@ (80016b4 <__aeabi_dadd+0x6e0>)
 8001446:	42b9      	cmp	r1, r7
 8001448:	d100      	bne.n	800144c <__aeabi_dadd+0x478>
 800144a:	e0e2      	b.n	8001612 <__aeabi_dadd+0x63e>
 800144c:	2701      	movs	r7, #1
 800144e:	2c38      	cmp	r4, #56	@ 0x38
 8001450:	dd00      	ble.n	8001454 <__aeabi_dadd+0x480>
 8001452:	e74f      	b.n	80012f4 <__aeabi_dadd+0x320>
 8001454:	0021      	movs	r1, r4
 8001456:	e73c      	b.n	80012d2 <__aeabi_dadd+0x2fe>
 8001458:	4c96      	ldr	r4, [pc, #600]	@ (80016b4 <__aeabi_dadd+0x6e0>)
 800145a:	42a1      	cmp	r1, r4
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x48c>
 800145e:	e0dd      	b.n	800161c <__aeabi_dadd+0x648>
 8001460:	444a      	add	r2, r9
 8001462:	454a      	cmp	r2, r9
 8001464:	4180      	sbcs	r0, r0
 8001466:	18f3      	adds	r3, r6, r3
 8001468:	4240      	negs	r0, r0
 800146a:	1818      	adds	r0, r3, r0
 800146c:	07c7      	lsls	r7, r0, #31
 800146e:	0852      	lsrs	r2, r2, #1
 8001470:	4317      	orrs	r7, r2
 8001472:	0846      	lsrs	r6, r0, #1
 8001474:	0752      	lsls	r2, r2, #29
 8001476:	d005      	beq.n	8001484 <__aeabi_dadd+0x4b0>
 8001478:	220f      	movs	r2, #15
 800147a:	000c      	movs	r4, r1
 800147c:	403a      	ands	r2, r7
 800147e:	2a04      	cmp	r2, #4
 8001480:	d000      	beq.n	8001484 <__aeabi_dadd+0x4b0>
 8001482:	e62c      	b.n	80010de <__aeabi_dadd+0x10a>
 8001484:	0776      	lsls	r6, r6, #29
 8001486:	08ff      	lsrs	r7, r7, #3
 8001488:	4337      	orrs	r7, r6
 800148a:	0900      	lsrs	r0, r0, #4
 800148c:	e6d9      	b.n	8001242 <__aeabi_dadd+0x26e>
 800148e:	2700      	movs	r7, #0
 8001490:	2600      	movs	r6, #0
 8001492:	e6e8      	b.n	8001266 <__aeabi_dadd+0x292>
 8001494:	4649      	mov	r1, r9
 8001496:	1a57      	subs	r7, r2, r1
 8001498:	42ba      	cmp	r2, r7
 800149a:	4192      	sbcs	r2, r2
 800149c:	1b9e      	subs	r6, r3, r6
 800149e:	4252      	negs	r2, r2
 80014a0:	4665      	mov	r5, ip
 80014a2:	1ab6      	subs	r6, r6, r2
 80014a4:	e5ed      	b.n	8001082 <__aeabi_dadd+0xae>
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d000      	beq.n	80014ac <__aeabi_dadd+0x4d8>
 80014aa:	e0c6      	b.n	800163a <__aeabi_dadd+0x666>
 80014ac:	2f00      	cmp	r7, #0
 80014ae:	d167      	bne.n	8001580 <__aeabi_dadd+0x5ac>
 80014b0:	2680      	movs	r6, #128	@ 0x80
 80014b2:	2500      	movs	r5, #0
 80014b4:	4c7f      	ldr	r4, [pc, #508]	@ (80016b4 <__aeabi_dadd+0x6e0>)
 80014b6:	0336      	lsls	r6, r6, #12
 80014b8:	e6d5      	b.n	8001266 <__aeabi_dadd+0x292>
 80014ba:	4665      	mov	r5, ip
 80014bc:	000c      	movs	r4, r1
 80014be:	001e      	movs	r6, r3
 80014c0:	08d0      	lsrs	r0, r2, #3
 80014c2:	e6e4      	b.n	800128e <__aeabi_dadd+0x2ba>
 80014c4:	444a      	add	r2, r9
 80014c6:	454a      	cmp	r2, r9
 80014c8:	4180      	sbcs	r0, r0
 80014ca:	18f3      	adds	r3, r6, r3
 80014cc:	4240      	negs	r0, r0
 80014ce:	1818      	adds	r0, r3, r0
 80014d0:	0011      	movs	r1, r2
 80014d2:	0203      	lsls	r3, r0, #8
 80014d4:	d400      	bmi.n	80014d8 <__aeabi_dadd+0x504>
 80014d6:	e096      	b.n	8001606 <__aeabi_dadd+0x632>
 80014d8:	4b77      	ldr	r3, [pc, #476]	@ (80016b8 <__aeabi_dadd+0x6e4>)
 80014da:	0849      	lsrs	r1, r1, #1
 80014dc:	4018      	ands	r0, r3
 80014de:	07c3      	lsls	r3, r0, #31
 80014e0:	430b      	orrs	r3, r1
 80014e2:	0844      	lsrs	r4, r0, #1
 80014e4:	0749      	lsls	r1, r1, #29
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x516>
 80014e8:	e129      	b.n	800173e <__aeabi_dadd+0x76a>
 80014ea:	220f      	movs	r2, #15
 80014ec:	401a      	ands	r2, r3
 80014ee:	2a04      	cmp	r2, #4
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x520>
 80014f2:	e0ea      	b.n	80016ca <__aeabi_dadd+0x6f6>
 80014f4:	1d1f      	adds	r7, r3, #4
 80014f6:	429f      	cmp	r7, r3
 80014f8:	41b6      	sbcs	r6, r6
 80014fa:	4276      	negs	r6, r6
 80014fc:	1936      	adds	r6, r6, r4
 80014fe:	2402      	movs	r4, #2
 8001500:	e6c4      	b.n	800128c <__aeabi_dadd+0x2b8>
 8001502:	4649      	mov	r1, r9
 8001504:	1a8f      	subs	r7, r1, r2
 8001506:	45b9      	cmp	r9, r7
 8001508:	4180      	sbcs	r0, r0
 800150a:	1af6      	subs	r6, r6, r3
 800150c:	4240      	negs	r0, r0
 800150e:	1a36      	subs	r6, r6, r0
 8001510:	0233      	lsls	r3, r6, #8
 8001512:	d406      	bmi.n	8001522 <__aeabi_dadd+0x54e>
 8001514:	0773      	lsls	r3, r6, #29
 8001516:	08ff      	lsrs	r7, r7, #3
 8001518:	2101      	movs	r1, #1
 800151a:	431f      	orrs	r7, r3
 800151c:	08f0      	lsrs	r0, r6, #3
 800151e:	e690      	b.n	8001242 <__aeabi_dadd+0x26e>
 8001520:	4665      	mov	r5, ip
 8001522:	2401      	movs	r4, #1
 8001524:	e5ab      	b.n	800107e <__aeabi_dadd+0xaa>
 8001526:	464b      	mov	r3, r9
 8001528:	0777      	lsls	r7, r6, #29
 800152a:	08d8      	lsrs	r0, r3, #3
 800152c:	4307      	orrs	r7, r0
 800152e:	08f0      	lsrs	r0, r6, #3
 8001530:	e6b4      	b.n	800129c <__aeabi_dadd+0x2c8>
 8001532:	000f      	movs	r7, r1
 8001534:	0018      	movs	r0, r3
 8001536:	3f20      	subs	r7, #32
 8001538:	40f8      	lsrs	r0, r7
 800153a:	4684      	mov	ip, r0
 800153c:	2920      	cmp	r1, #32
 800153e:	d003      	beq.n	8001548 <__aeabi_dadd+0x574>
 8001540:	2740      	movs	r7, #64	@ 0x40
 8001542:	1a79      	subs	r1, r7, r1
 8001544:	408b      	lsls	r3, r1
 8001546:	431a      	orrs	r2, r3
 8001548:	1e53      	subs	r3, r2, #1
 800154a:	419a      	sbcs	r2, r3
 800154c:	4663      	mov	r3, ip
 800154e:	0017      	movs	r7, r2
 8001550:	431f      	orrs	r7, r3
 8001552:	e635      	b.n	80011c0 <__aeabi_dadd+0x1ec>
 8001554:	2500      	movs	r5, #0
 8001556:	2400      	movs	r4, #0
 8001558:	2600      	movs	r6, #0
 800155a:	e684      	b.n	8001266 <__aeabi_dadd+0x292>
 800155c:	000c      	movs	r4, r1
 800155e:	0035      	movs	r5, r6
 8001560:	3c20      	subs	r4, #32
 8001562:	40e5      	lsrs	r5, r4
 8001564:	2920      	cmp	r1, #32
 8001566:	d005      	beq.n	8001574 <__aeabi_dadd+0x5a0>
 8001568:	2440      	movs	r4, #64	@ 0x40
 800156a:	1a61      	subs	r1, r4, r1
 800156c:	408e      	lsls	r6, r1
 800156e:	4649      	mov	r1, r9
 8001570:	4331      	orrs	r1, r6
 8001572:	4689      	mov	r9, r1
 8001574:	4648      	mov	r0, r9
 8001576:	1e41      	subs	r1, r0, #1
 8001578:	4188      	sbcs	r0, r1
 800157a:	0007      	movs	r7, r0
 800157c:	432f      	orrs	r7, r5
 800157e:	e5ef      	b.n	8001160 <__aeabi_dadd+0x18c>
 8001580:	08d2      	lsrs	r2, r2, #3
 8001582:	075f      	lsls	r7, r3, #29
 8001584:	4665      	mov	r5, ip
 8001586:	4317      	orrs	r7, r2
 8001588:	08d8      	lsrs	r0, r3, #3
 800158a:	e687      	b.n	800129c <__aeabi_dadd+0x2c8>
 800158c:	1a17      	subs	r7, r2, r0
 800158e:	42ba      	cmp	r2, r7
 8001590:	4192      	sbcs	r2, r2
 8001592:	1b9e      	subs	r6, r3, r6
 8001594:	4252      	negs	r2, r2
 8001596:	1ab6      	subs	r6, r6, r2
 8001598:	0233      	lsls	r3, r6, #8
 800159a:	d4c1      	bmi.n	8001520 <__aeabi_dadd+0x54c>
 800159c:	0773      	lsls	r3, r6, #29
 800159e:	08ff      	lsrs	r7, r7, #3
 80015a0:	4665      	mov	r5, ip
 80015a2:	2101      	movs	r1, #1
 80015a4:	431f      	orrs	r7, r3
 80015a6:	08f0      	lsrs	r0, r6, #3
 80015a8:	e64b      	b.n	8001242 <__aeabi_dadd+0x26e>
 80015aa:	2f00      	cmp	r7, #0
 80015ac:	d07b      	beq.n	80016a6 <__aeabi_dadd+0x6d2>
 80015ae:	4665      	mov	r5, ip
 80015b0:	001e      	movs	r6, r3
 80015b2:	4691      	mov	r9, r2
 80015b4:	e63f      	b.n	8001236 <__aeabi_dadd+0x262>
 80015b6:	1a81      	subs	r1, r0, r2
 80015b8:	4688      	mov	r8, r1
 80015ba:	45c1      	cmp	r9, r8
 80015bc:	41a4      	sbcs	r4, r4
 80015be:	1af1      	subs	r1, r6, r3
 80015c0:	4264      	negs	r4, r4
 80015c2:	1b09      	subs	r1, r1, r4
 80015c4:	2480      	movs	r4, #128	@ 0x80
 80015c6:	0424      	lsls	r4, r4, #16
 80015c8:	4221      	tst	r1, r4
 80015ca:	d077      	beq.n	80016bc <__aeabi_dadd+0x6e8>
 80015cc:	1a10      	subs	r0, r2, r0
 80015ce:	4282      	cmp	r2, r0
 80015d0:	4192      	sbcs	r2, r2
 80015d2:	0007      	movs	r7, r0
 80015d4:	1b9e      	subs	r6, r3, r6
 80015d6:	4252      	negs	r2, r2
 80015d8:	1ab6      	subs	r6, r6, r2
 80015da:	4337      	orrs	r7, r6
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dadd+0x60c>
 80015de:	e0a0      	b.n	8001722 <__aeabi_dadd+0x74e>
 80015e0:	4665      	mov	r5, ip
 80015e2:	2400      	movs	r4, #0
 80015e4:	2600      	movs	r6, #0
 80015e6:	e63e      	b.n	8001266 <__aeabi_dadd+0x292>
 80015e8:	075f      	lsls	r7, r3, #29
 80015ea:	08d2      	lsrs	r2, r2, #3
 80015ec:	4665      	mov	r5, ip
 80015ee:	4317      	orrs	r7, r2
 80015f0:	08d8      	lsrs	r0, r3, #3
 80015f2:	e653      	b.n	800129c <__aeabi_dadd+0x2c8>
 80015f4:	1881      	adds	r1, r0, r2
 80015f6:	4291      	cmp	r1, r2
 80015f8:	4192      	sbcs	r2, r2
 80015fa:	18f0      	adds	r0, r6, r3
 80015fc:	4252      	negs	r2, r2
 80015fe:	1880      	adds	r0, r0, r2
 8001600:	0203      	lsls	r3, r0, #8
 8001602:	d500      	bpl.n	8001606 <__aeabi_dadd+0x632>
 8001604:	e768      	b.n	80014d8 <__aeabi_dadd+0x504>
 8001606:	0747      	lsls	r7, r0, #29
 8001608:	08c9      	lsrs	r1, r1, #3
 800160a:	430f      	orrs	r7, r1
 800160c:	08c0      	lsrs	r0, r0, #3
 800160e:	2101      	movs	r1, #1
 8001610:	e617      	b.n	8001242 <__aeabi_dadd+0x26e>
 8001612:	08d2      	lsrs	r2, r2, #3
 8001614:	075f      	lsls	r7, r3, #29
 8001616:	4317      	orrs	r7, r2
 8001618:	08d8      	lsrs	r0, r3, #3
 800161a:	e63f      	b.n	800129c <__aeabi_dadd+0x2c8>
 800161c:	000c      	movs	r4, r1
 800161e:	2600      	movs	r6, #0
 8001620:	2700      	movs	r7, #0
 8001622:	e620      	b.n	8001266 <__aeabi_dadd+0x292>
 8001624:	2900      	cmp	r1, #0
 8001626:	d156      	bne.n	80016d6 <__aeabi_dadd+0x702>
 8001628:	075f      	lsls	r7, r3, #29
 800162a:	08d2      	lsrs	r2, r2, #3
 800162c:	4317      	orrs	r7, r2
 800162e:	08d8      	lsrs	r0, r3, #3
 8001630:	e634      	b.n	800129c <__aeabi_dadd+0x2c8>
 8001632:	000c      	movs	r4, r1
 8001634:	001e      	movs	r6, r3
 8001636:	08d0      	lsrs	r0, r2, #3
 8001638:	e629      	b.n	800128e <__aeabi_dadd+0x2ba>
 800163a:	08c1      	lsrs	r1, r0, #3
 800163c:	0770      	lsls	r0, r6, #29
 800163e:	4301      	orrs	r1, r0
 8001640:	08f0      	lsrs	r0, r6, #3
 8001642:	2f00      	cmp	r7, #0
 8001644:	d062      	beq.n	800170c <__aeabi_dadd+0x738>
 8001646:	2480      	movs	r4, #128	@ 0x80
 8001648:	0324      	lsls	r4, r4, #12
 800164a:	4220      	tst	r0, r4
 800164c:	d007      	beq.n	800165e <__aeabi_dadd+0x68a>
 800164e:	08de      	lsrs	r6, r3, #3
 8001650:	4226      	tst	r6, r4
 8001652:	d104      	bne.n	800165e <__aeabi_dadd+0x68a>
 8001654:	4665      	mov	r5, ip
 8001656:	0030      	movs	r0, r6
 8001658:	08d1      	lsrs	r1, r2, #3
 800165a:	075b      	lsls	r3, r3, #29
 800165c:	4319      	orrs	r1, r3
 800165e:	0f4f      	lsrs	r7, r1, #29
 8001660:	00c9      	lsls	r1, r1, #3
 8001662:	08c9      	lsrs	r1, r1, #3
 8001664:	077f      	lsls	r7, r7, #29
 8001666:	430f      	orrs	r7, r1
 8001668:	e618      	b.n	800129c <__aeabi_dadd+0x2c8>
 800166a:	000c      	movs	r4, r1
 800166c:	0030      	movs	r0, r6
 800166e:	3c20      	subs	r4, #32
 8001670:	40e0      	lsrs	r0, r4
 8001672:	4684      	mov	ip, r0
 8001674:	2920      	cmp	r1, #32
 8001676:	d005      	beq.n	8001684 <__aeabi_dadd+0x6b0>
 8001678:	2440      	movs	r4, #64	@ 0x40
 800167a:	1a61      	subs	r1, r4, r1
 800167c:	408e      	lsls	r6, r1
 800167e:	4649      	mov	r1, r9
 8001680:	4331      	orrs	r1, r6
 8001682:	4689      	mov	r9, r1
 8001684:	4648      	mov	r0, r9
 8001686:	1e41      	subs	r1, r0, #1
 8001688:	4188      	sbcs	r0, r1
 800168a:	4661      	mov	r1, ip
 800168c:	0007      	movs	r7, r0
 800168e:	430f      	orrs	r7, r1
 8001690:	e630      	b.n	80012f4 <__aeabi_dadd+0x320>
 8001692:	2120      	movs	r1, #32
 8001694:	2700      	movs	r7, #0
 8001696:	1a09      	subs	r1, r1, r0
 8001698:	e50e      	b.n	80010b8 <__aeabi_dadd+0xe4>
 800169a:	001e      	movs	r6, r3
 800169c:	2f00      	cmp	r7, #0
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x6ce>
 80016a0:	e522      	b.n	80010e8 <__aeabi_dadd+0x114>
 80016a2:	2400      	movs	r4, #0
 80016a4:	e758      	b.n	8001558 <__aeabi_dadd+0x584>
 80016a6:	2500      	movs	r5, #0
 80016a8:	2400      	movs	r4, #0
 80016aa:	2600      	movs	r6, #0
 80016ac:	e5db      	b.n	8001266 <__aeabi_dadd+0x292>
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	000007fe 	.word	0x000007fe
 80016b4:	000007ff 	.word	0x000007ff
 80016b8:	ff7fffff 	.word	0xff7fffff
 80016bc:	4647      	mov	r7, r8
 80016be:	430f      	orrs	r7, r1
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x6f0>
 80016c2:	e747      	b.n	8001554 <__aeabi_dadd+0x580>
 80016c4:	000e      	movs	r6, r1
 80016c6:	46c1      	mov	r9, r8
 80016c8:	e5b5      	b.n	8001236 <__aeabi_dadd+0x262>
 80016ca:	08df      	lsrs	r7, r3, #3
 80016cc:	0764      	lsls	r4, r4, #29
 80016ce:	2102      	movs	r1, #2
 80016d0:	4327      	orrs	r7, r4
 80016d2:	0900      	lsrs	r0, r0, #4
 80016d4:	e5b5      	b.n	8001242 <__aeabi_dadd+0x26e>
 80016d6:	0019      	movs	r1, r3
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	0777      	lsls	r7, r6, #29
 80016dc:	4307      	orrs	r7, r0
 80016de:	4311      	orrs	r1, r2
 80016e0:	08f0      	lsrs	r0, r6, #3
 80016e2:	2900      	cmp	r1, #0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dadd+0x714>
 80016e6:	e5d9      	b.n	800129c <__aeabi_dadd+0x2c8>
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	0309      	lsls	r1, r1, #12
 80016ec:	4208      	tst	r0, r1
 80016ee:	d007      	beq.n	8001700 <__aeabi_dadd+0x72c>
 80016f0:	08dc      	lsrs	r4, r3, #3
 80016f2:	420c      	tst	r4, r1
 80016f4:	d104      	bne.n	8001700 <__aeabi_dadd+0x72c>
 80016f6:	08d2      	lsrs	r2, r2, #3
 80016f8:	075b      	lsls	r3, r3, #29
 80016fa:	431a      	orrs	r2, r3
 80016fc:	0017      	movs	r7, r2
 80016fe:	0020      	movs	r0, r4
 8001700:	0f7b      	lsrs	r3, r7, #29
 8001702:	00ff      	lsls	r7, r7, #3
 8001704:	08ff      	lsrs	r7, r7, #3
 8001706:	075b      	lsls	r3, r3, #29
 8001708:	431f      	orrs	r7, r3
 800170a:	e5c7      	b.n	800129c <__aeabi_dadd+0x2c8>
 800170c:	000f      	movs	r7, r1
 800170e:	e5c5      	b.n	800129c <__aeabi_dadd+0x2c8>
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <__aeabi_dadd+0x788>)
 8001712:	08d2      	lsrs	r2, r2, #3
 8001714:	4033      	ands	r3, r6
 8001716:	075f      	lsls	r7, r3, #29
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	2401      	movs	r4, #1
 800171c:	4317      	orrs	r7, r2
 800171e:	0b1e      	lsrs	r6, r3, #12
 8001720:	e5a1      	b.n	8001266 <__aeabi_dadd+0x292>
 8001722:	4226      	tst	r6, r4
 8001724:	d012      	beq.n	800174c <__aeabi_dadd+0x778>
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <__aeabi_dadd+0x788>)
 8001728:	4665      	mov	r5, ip
 800172a:	0002      	movs	r2, r0
 800172c:	2401      	movs	r4, #1
 800172e:	401e      	ands	r6, r3
 8001730:	e4e6      	b.n	8001100 <__aeabi_dadd+0x12c>
 8001732:	0021      	movs	r1, r4
 8001734:	e585      	b.n	8001242 <__aeabi_dadd+0x26e>
 8001736:	0017      	movs	r7, r2
 8001738:	e5a8      	b.n	800128c <__aeabi_dadd+0x2b8>
 800173a:	003a      	movs	r2, r7
 800173c:	e4d4      	b.n	80010e8 <__aeabi_dadd+0x114>
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	0764      	lsls	r4, r4, #29
 8001742:	431c      	orrs	r4, r3
 8001744:	0027      	movs	r7, r4
 8001746:	2102      	movs	r1, #2
 8001748:	0900      	lsrs	r0, r0, #4
 800174a:	e57a      	b.n	8001242 <__aeabi_dadd+0x26e>
 800174c:	08c0      	lsrs	r0, r0, #3
 800174e:	0777      	lsls	r7, r6, #29
 8001750:	4307      	orrs	r7, r0
 8001752:	4665      	mov	r5, ip
 8001754:	2100      	movs	r1, #0
 8001756:	08f0      	lsrs	r0, r6, #3
 8001758:	e573      	b.n	8001242 <__aeabi_dadd+0x26e>
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	ff7fffff 	.word	0xff7fffff

08001760 <__aeabi_ddiv>:
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	46de      	mov	lr, fp
 8001764:	4645      	mov	r5, r8
 8001766:	4657      	mov	r7, sl
 8001768:	464e      	mov	r6, r9
 800176a:	b5e0      	push	{r5, r6, r7, lr}
 800176c:	b087      	sub	sp, #28
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	030b      	lsls	r3, r1, #12
 8001774:	0b1b      	lsrs	r3, r3, #12
 8001776:	469b      	mov	fp, r3
 8001778:	0fca      	lsrs	r2, r1, #31
 800177a:	004b      	lsls	r3, r1, #1
 800177c:	0004      	movs	r4, r0
 800177e:	4680      	mov	r8, r0
 8001780:	0d5b      	lsrs	r3, r3, #21
 8001782:	9202      	str	r2, [sp, #8]
 8001784:	d100      	bne.n	8001788 <__aeabi_ddiv+0x28>
 8001786:	e098      	b.n	80018ba <__aeabi_ddiv+0x15a>
 8001788:	4a7c      	ldr	r2, [pc, #496]	@ (800197c <__aeabi_ddiv+0x21c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d037      	beq.n	80017fe <__aeabi_ddiv+0x9e>
 800178e:	4659      	mov	r1, fp
 8001790:	0f42      	lsrs	r2, r0, #29
 8001792:	00c9      	lsls	r1, r1, #3
 8001794:	430a      	orrs	r2, r1
 8001796:	2180      	movs	r1, #128	@ 0x80
 8001798:	0409      	lsls	r1, r1, #16
 800179a:	4311      	orrs	r1, r2
 800179c:	00c2      	lsls	r2, r0, #3
 800179e:	4690      	mov	r8, r2
 80017a0:	4a77      	ldr	r2, [pc, #476]	@ (8001980 <__aeabi_ddiv+0x220>)
 80017a2:	4689      	mov	r9, r1
 80017a4:	4692      	mov	sl, r2
 80017a6:	449a      	add	sl, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	2400      	movs	r4, #0
 80017ac:	9303      	str	r3, [sp, #12]
 80017ae:	9e00      	ldr	r6, [sp, #0]
 80017b0:	9f01      	ldr	r7, [sp, #4]
 80017b2:	033b      	lsls	r3, r7, #12
 80017b4:	0b1b      	lsrs	r3, r3, #12
 80017b6:	469b      	mov	fp, r3
 80017b8:	007b      	lsls	r3, r7, #1
 80017ba:	0030      	movs	r0, r6
 80017bc:	0d5b      	lsrs	r3, r3, #21
 80017be:	0ffd      	lsrs	r5, r7, #31
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d059      	beq.n	8001878 <__aeabi_ddiv+0x118>
 80017c4:	4a6d      	ldr	r2, [pc, #436]	@ (800197c <__aeabi_ddiv+0x21c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d048      	beq.n	800185c <__aeabi_ddiv+0xfc>
 80017ca:	4659      	mov	r1, fp
 80017cc:	0f72      	lsrs	r2, r6, #29
 80017ce:	00c9      	lsls	r1, r1, #3
 80017d0:	430a      	orrs	r2, r1
 80017d2:	2180      	movs	r1, #128	@ 0x80
 80017d4:	0409      	lsls	r1, r1, #16
 80017d6:	4311      	orrs	r1, r2
 80017d8:	468b      	mov	fp, r1
 80017da:	4969      	ldr	r1, [pc, #420]	@ (8001980 <__aeabi_ddiv+0x220>)
 80017dc:	00f2      	lsls	r2, r6, #3
 80017de:	468c      	mov	ip, r1
 80017e0:	4651      	mov	r1, sl
 80017e2:	4463      	add	r3, ip
 80017e4:	1acb      	subs	r3, r1, r3
 80017e6:	469a      	mov	sl, r3
 80017e8:	2100      	movs	r1, #0
 80017ea:	9e02      	ldr	r6, [sp, #8]
 80017ec:	406e      	eors	r6, r5
 80017ee:	b2f6      	uxtb	r6, r6
 80017f0:	2c0f      	cmp	r4, #15
 80017f2:	d900      	bls.n	80017f6 <__aeabi_ddiv+0x96>
 80017f4:	e0ce      	b.n	8001994 <__aeabi_ddiv+0x234>
 80017f6:	4b63      	ldr	r3, [pc, #396]	@ (8001984 <__aeabi_ddiv+0x224>)
 80017f8:	00a4      	lsls	r4, r4, #2
 80017fa:	591b      	ldr	r3, [r3, r4]
 80017fc:	469f      	mov	pc, r3
 80017fe:	465a      	mov	r2, fp
 8001800:	4302      	orrs	r2, r0
 8001802:	4691      	mov	r9, r2
 8001804:	d000      	beq.n	8001808 <__aeabi_ddiv+0xa8>
 8001806:	e090      	b.n	800192a <__aeabi_ddiv+0x1ca>
 8001808:	469a      	mov	sl, r3
 800180a:	2302      	movs	r3, #2
 800180c:	4690      	mov	r8, r2
 800180e:	2408      	movs	r4, #8
 8001810:	9303      	str	r3, [sp, #12]
 8001812:	e7cc      	b.n	80017ae <__aeabi_ddiv+0x4e>
 8001814:	46cb      	mov	fp, r9
 8001816:	4642      	mov	r2, r8
 8001818:	9d02      	ldr	r5, [sp, #8]
 800181a:	9903      	ldr	r1, [sp, #12]
 800181c:	2902      	cmp	r1, #2
 800181e:	d100      	bne.n	8001822 <__aeabi_ddiv+0xc2>
 8001820:	e1de      	b.n	8001be0 <__aeabi_ddiv+0x480>
 8001822:	2903      	cmp	r1, #3
 8001824:	d100      	bne.n	8001828 <__aeabi_ddiv+0xc8>
 8001826:	e08d      	b.n	8001944 <__aeabi_ddiv+0x1e4>
 8001828:	2901      	cmp	r1, #1
 800182a:	d000      	beq.n	800182e <__aeabi_ddiv+0xce>
 800182c:	e179      	b.n	8001b22 <__aeabi_ddiv+0x3c2>
 800182e:	002e      	movs	r6, r5
 8001830:	2200      	movs	r2, #0
 8001832:	2300      	movs	r3, #0
 8001834:	2400      	movs	r4, #0
 8001836:	4690      	mov	r8, r2
 8001838:	051b      	lsls	r3, r3, #20
 800183a:	4323      	orrs	r3, r4
 800183c:	07f6      	lsls	r6, r6, #31
 800183e:	4333      	orrs	r3, r6
 8001840:	4640      	mov	r0, r8
 8001842:	0019      	movs	r1, r3
 8001844:	b007      	add	sp, #28
 8001846:	bcf0      	pop	{r4, r5, r6, r7}
 8001848:	46bb      	mov	fp, r7
 800184a:	46b2      	mov	sl, r6
 800184c:	46a9      	mov	r9, r5
 800184e:	46a0      	mov	r8, r4
 8001850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001852:	2200      	movs	r2, #0
 8001854:	2400      	movs	r4, #0
 8001856:	4690      	mov	r8, r2
 8001858:	4b48      	ldr	r3, [pc, #288]	@ (800197c <__aeabi_ddiv+0x21c>)
 800185a:	e7ed      	b.n	8001838 <__aeabi_ddiv+0xd8>
 800185c:	465a      	mov	r2, fp
 800185e:	9b00      	ldr	r3, [sp, #0]
 8001860:	431a      	orrs	r2, r3
 8001862:	4b49      	ldr	r3, [pc, #292]	@ (8001988 <__aeabi_ddiv+0x228>)
 8001864:	469c      	mov	ip, r3
 8001866:	44e2      	add	sl, ip
 8001868:	2a00      	cmp	r2, #0
 800186a:	d159      	bne.n	8001920 <__aeabi_ddiv+0x1c0>
 800186c:	2302      	movs	r3, #2
 800186e:	431c      	orrs	r4, r3
 8001870:	2300      	movs	r3, #0
 8001872:	2102      	movs	r1, #2
 8001874:	469b      	mov	fp, r3
 8001876:	e7b8      	b.n	80017ea <__aeabi_ddiv+0x8a>
 8001878:	465a      	mov	r2, fp
 800187a:	9b00      	ldr	r3, [sp, #0]
 800187c:	431a      	orrs	r2, r3
 800187e:	d049      	beq.n	8001914 <__aeabi_ddiv+0x1b4>
 8001880:	465b      	mov	r3, fp
 8001882:	2b00      	cmp	r3, #0
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x128>
 8001886:	e19c      	b.n	8001bc2 <__aeabi_ddiv+0x462>
 8001888:	4658      	mov	r0, fp
 800188a:	f001 fc0d 	bl	80030a8 <__clzsi2>
 800188e:	0002      	movs	r2, r0
 8001890:	0003      	movs	r3, r0
 8001892:	3a0b      	subs	r2, #11
 8001894:	271d      	movs	r7, #29
 8001896:	9e00      	ldr	r6, [sp, #0]
 8001898:	1aba      	subs	r2, r7, r2
 800189a:	0019      	movs	r1, r3
 800189c:	4658      	mov	r0, fp
 800189e:	40d6      	lsrs	r6, r2
 80018a0:	3908      	subs	r1, #8
 80018a2:	4088      	lsls	r0, r1
 80018a4:	0032      	movs	r2, r6
 80018a6:	4302      	orrs	r2, r0
 80018a8:	4693      	mov	fp, r2
 80018aa:	9a00      	ldr	r2, [sp, #0]
 80018ac:	408a      	lsls	r2, r1
 80018ae:	4937      	ldr	r1, [pc, #220]	@ (800198c <__aeabi_ddiv+0x22c>)
 80018b0:	4453      	add	r3, sl
 80018b2:	468a      	mov	sl, r1
 80018b4:	2100      	movs	r1, #0
 80018b6:	449a      	add	sl, r3
 80018b8:	e797      	b.n	80017ea <__aeabi_ddiv+0x8a>
 80018ba:	465b      	mov	r3, fp
 80018bc:	4303      	orrs	r3, r0
 80018be:	4699      	mov	r9, r3
 80018c0:	d021      	beq.n	8001906 <__aeabi_ddiv+0x1a6>
 80018c2:	465b      	mov	r3, fp
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d100      	bne.n	80018ca <__aeabi_ddiv+0x16a>
 80018c8:	e169      	b.n	8001b9e <__aeabi_ddiv+0x43e>
 80018ca:	4658      	mov	r0, fp
 80018cc:	f001 fbec 	bl	80030a8 <__clzsi2>
 80018d0:	230b      	movs	r3, #11
 80018d2:	425b      	negs	r3, r3
 80018d4:	469c      	mov	ip, r3
 80018d6:	0002      	movs	r2, r0
 80018d8:	4484      	add	ip, r0
 80018da:	4666      	mov	r6, ip
 80018dc:	231d      	movs	r3, #29
 80018de:	1b9b      	subs	r3, r3, r6
 80018e0:	0026      	movs	r6, r4
 80018e2:	0011      	movs	r1, r2
 80018e4:	4658      	mov	r0, fp
 80018e6:	40de      	lsrs	r6, r3
 80018e8:	3908      	subs	r1, #8
 80018ea:	4088      	lsls	r0, r1
 80018ec:	0033      	movs	r3, r6
 80018ee:	4303      	orrs	r3, r0
 80018f0:	4699      	mov	r9, r3
 80018f2:	0023      	movs	r3, r4
 80018f4:	408b      	lsls	r3, r1
 80018f6:	4698      	mov	r8, r3
 80018f8:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <__aeabi_ddiv+0x230>)
 80018fa:	2400      	movs	r4, #0
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	469a      	mov	sl, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9303      	str	r3, [sp, #12]
 8001904:	e753      	b.n	80017ae <__aeabi_ddiv+0x4e>
 8001906:	2300      	movs	r3, #0
 8001908:	4698      	mov	r8, r3
 800190a:	469a      	mov	sl, r3
 800190c:	3301      	adds	r3, #1
 800190e:	2404      	movs	r4, #4
 8001910:	9303      	str	r3, [sp, #12]
 8001912:	e74c      	b.n	80017ae <__aeabi_ddiv+0x4e>
 8001914:	2301      	movs	r3, #1
 8001916:	431c      	orrs	r4, r3
 8001918:	2300      	movs	r3, #0
 800191a:	2101      	movs	r1, #1
 800191c:	469b      	mov	fp, r3
 800191e:	e764      	b.n	80017ea <__aeabi_ddiv+0x8a>
 8001920:	2303      	movs	r3, #3
 8001922:	0032      	movs	r2, r6
 8001924:	2103      	movs	r1, #3
 8001926:	431c      	orrs	r4, r3
 8001928:	e75f      	b.n	80017ea <__aeabi_ddiv+0x8a>
 800192a:	469a      	mov	sl, r3
 800192c:	2303      	movs	r3, #3
 800192e:	46d9      	mov	r9, fp
 8001930:	240c      	movs	r4, #12
 8001932:	9303      	str	r3, [sp, #12]
 8001934:	e73b      	b.n	80017ae <__aeabi_ddiv+0x4e>
 8001936:	2300      	movs	r3, #0
 8001938:	2480      	movs	r4, #128	@ 0x80
 800193a:	4698      	mov	r8, r3
 800193c:	2600      	movs	r6, #0
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <__aeabi_ddiv+0x21c>)
 8001940:	0324      	lsls	r4, r4, #12
 8001942:	e779      	b.n	8001838 <__aeabi_ddiv+0xd8>
 8001944:	2480      	movs	r4, #128	@ 0x80
 8001946:	465b      	mov	r3, fp
 8001948:	0324      	lsls	r4, r4, #12
 800194a:	431c      	orrs	r4, r3
 800194c:	0324      	lsls	r4, r4, #12
 800194e:	002e      	movs	r6, r5
 8001950:	4690      	mov	r8, r2
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <__aeabi_ddiv+0x21c>)
 8001954:	0b24      	lsrs	r4, r4, #12
 8001956:	e76f      	b.n	8001838 <__aeabi_ddiv+0xd8>
 8001958:	2480      	movs	r4, #128	@ 0x80
 800195a:	464b      	mov	r3, r9
 800195c:	0324      	lsls	r4, r4, #12
 800195e:	4223      	tst	r3, r4
 8001960:	d002      	beq.n	8001968 <__aeabi_ddiv+0x208>
 8001962:	465b      	mov	r3, fp
 8001964:	4223      	tst	r3, r4
 8001966:	d0f0      	beq.n	800194a <__aeabi_ddiv+0x1ea>
 8001968:	2480      	movs	r4, #128	@ 0x80
 800196a:	464b      	mov	r3, r9
 800196c:	0324      	lsls	r4, r4, #12
 800196e:	431c      	orrs	r4, r3
 8001970:	0324      	lsls	r4, r4, #12
 8001972:	9e02      	ldr	r6, [sp, #8]
 8001974:	4b01      	ldr	r3, [pc, #4]	@ (800197c <__aeabi_ddiv+0x21c>)
 8001976:	0b24      	lsrs	r4, r4, #12
 8001978:	e75e      	b.n	8001838 <__aeabi_ddiv+0xd8>
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	000007ff 	.word	0x000007ff
 8001980:	fffffc01 	.word	0xfffffc01
 8001984:	0800b818 	.word	0x0800b818
 8001988:	fffff801 	.word	0xfffff801
 800198c:	000003f3 	.word	0x000003f3
 8001990:	fffffc0d 	.word	0xfffffc0d
 8001994:	45cb      	cmp	fp, r9
 8001996:	d200      	bcs.n	800199a <__aeabi_ddiv+0x23a>
 8001998:	e0f8      	b.n	8001b8c <__aeabi_ddiv+0x42c>
 800199a:	d100      	bne.n	800199e <__aeabi_ddiv+0x23e>
 800199c:	e0f3      	b.n	8001b86 <__aeabi_ddiv+0x426>
 800199e:	2301      	movs	r3, #1
 80019a0:	425b      	negs	r3, r3
 80019a2:	469c      	mov	ip, r3
 80019a4:	4644      	mov	r4, r8
 80019a6:	4648      	mov	r0, r9
 80019a8:	2500      	movs	r5, #0
 80019aa:	44e2      	add	sl, ip
 80019ac:	465b      	mov	r3, fp
 80019ae:	0e17      	lsrs	r7, r2, #24
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	431f      	orrs	r7, r3
 80019b4:	0c19      	lsrs	r1, r3, #16
 80019b6:	043b      	lsls	r3, r7, #16
 80019b8:	0212      	lsls	r2, r2, #8
 80019ba:	9700      	str	r7, [sp, #0]
 80019bc:	0c1f      	lsrs	r7, r3, #16
 80019be:	4691      	mov	r9, r2
 80019c0:	9102      	str	r1, [sp, #8]
 80019c2:	9703      	str	r7, [sp, #12]
 80019c4:	f7fe fc3e 	bl	8000244 <__aeabi_uidivmod>
 80019c8:	0002      	movs	r2, r0
 80019ca:	437a      	muls	r2, r7
 80019cc:	040b      	lsls	r3, r1, #16
 80019ce:	0c21      	lsrs	r1, r4, #16
 80019d0:	4680      	mov	r8, r0
 80019d2:	4319      	orrs	r1, r3
 80019d4:	428a      	cmp	r2, r1
 80019d6:	d909      	bls.n	80019ec <__aeabi_ddiv+0x28c>
 80019d8:	9f00      	ldr	r7, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	46bc      	mov	ip, r7
 80019de:	425b      	negs	r3, r3
 80019e0:	4461      	add	r1, ip
 80019e2:	469c      	mov	ip, r3
 80019e4:	44e0      	add	r8, ip
 80019e6:	428f      	cmp	r7, r1
 80019e8:	d800      	bhi.n	80019ec <__aeabi_ddiv+0x28c>
 80019ea:	e15c      	b.n	8001ca6 <__aeabi_ddiv+0x546>
 80019ec:	1a88      	subs	r0, r1, r2
 80019ee:	9902      	ldr	r1, [sp, #8]
 80019f0:	f7fe fc28 	bl	8000244 <__aeabi_uidivmod>
 80019f4:	9a03      	ldr	r2, [sp, #12]
 80019f6:	0424      	lsls	r4, r4, #16
 80019f8:	4342      	muls	r2, r0
 80019fa:	0409      	lsls	r1, r1, #16
 80019fc:	0c24      	lsrs	r4, r4, #16
 80019fe:	0003      	movs	r3, r0
 8001a00:	430c      	orrs	r4, r1
 8001a02:	42a2      	cmp	r2, r4
 8001a04:	d906      	bls.n	8001a14 <__aeabi_ddiv+0x2b4>
 8001a06:	9900      	ldr	r1, [sp, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	468c      	mov	ip, r1
 8001a0c:	4464      	add	r4, ip
 8001a0e:	42a1      	cmp	r1, r4
 8001a10:	d800      	bhi.n	8001a14 <__aeabi_ddiv+0x2b4>
 8001a12:	e142      	b.n	8001c9a <__aeabi_ddiv+0x53a>
 8001a14:	1aa0      	subs	r0, r4, r2
 8001a16:	4642      	mov	r2, r8
 8001a18:	0412      	lsls	r2, r2, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	4693      	mov	fp, r2
 8001a1e:	464b      	mov	r3, r9
 8001a20:	4659      	mov	r1, fp
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	001f      	movs	r7, r3
 8001a26:	9304      	str	r3, [sp, #16]
 8001a28:	040b      	lsls	r3, r1, #16
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	0409      	lsls	r1, r1, #16
 8001a2e:	0c09      	lsrs	r1, r1, #16
 8001a30:	000c      	movs	r4, r1
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	435c      	muls	r4, r3
 8001a36:	0c12      	lsrs	r2, r2, #16
 8001a38:	437b      	muls	r3, r7
 8001a3a:	4688      	mov	r8, r1
 8001a3c:	4351      	muls	r1, r2
 8001a3e:	437a      	muls	r2, r7
 8001a40:	0c27      	lsrs	r7, r4, #16
 8001a42:	46bc      	mov	ip, r7
 8001a44:	185b      	adds	r3, r3, r1
 8001a46:	4463      	add	r3, ip
 8001a48:	4299      	cmp	r1, r3
 8001a4a:	d903      	bls.n	8001a54 <__aeabi_ddiv+0x2f4>
 8001a4c:	2180      	movs	r1, #128	@ 0x80
 8001a4e:	0249      	lsls	r1, r1, #9
 8001a50:	468c      	mov	ip, r1
 8001a52:	4462      	add	r2, ip
 8001a54:	0c19      	lsrs	r1, r3, #16
 8001a56:	0424      	lsls	r4, r4, #16
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	0c24      	lsrs	r4, r4, #16
 8001a5c:	188a      	adds	r2, r1, r2
 8001a5e:	191c      	adds	r4, r3, r4
 8001a60:	4290      	cmp	r0, r2
 8001a62:	d302      	bcc.n	8001a6a <__aeabi_ddiv+0x30a>
 8001a64:	d116      	bne.n	8001a94 <__aeabi_ddiv+0x334>
 8001a66:	42a5      	cmp	r5, r4
 8001a68:	d214      	bcs.n	8001a94 <__aeabi_ddiv+0x334>
 8001a6a:	465b      	mov	r3, fp
 8001a6c:	9f00      	ldr	r7, [sp, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	444d      	add	r5, r9
 8001a72:	9305      	str	r3, [sp, #20]
 8001a74:	454d      	cmp	r5, r9
 8001a76:	419b      	sbcs	r3, r3
 8001a78:	46bc      	mov	ip, r7
 8001a7a:	425b      	negs	r3, r3
 8001a7c:	4463      	add	r3, ip
 8001a7e:	18c0      	adds	r0, r0, r3
 8001a80:	4287      	cmp	r7, r0
 8001a82:	d300      	bcc.n	8001a86 <__aeabi_ddiv+0x326>
 8001a84:	e102      	b.n	8001c8c <__aeabi_ddiv+0x52c>
 8001a86:	4282      	cmp	r2, r0
 8001a88:	d900      	bls.n	8001a8c <__aeabi_ddiv+0x32c>
 8001a8a:	e129      	b.n	8001ce0 <__aeabi_ddiv+0x580>
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x330>
 8001a8e:	e124      	b.n	8001cda <__aeabi_ddiv+0x57a>
 8001a90:	9b05      	ldr	r3, [sp, #20]
 8001a92:	469b      	mov	fp, r3
 8001a94:	1b2c      	subs	r4, r5, r4
 8001a96:	42a5      	cmp	r5, r4
 8001a98:	41ad      	sbcs	r5, r5
 8001a9a:	9b00      	ldr	r3, [sp, #0]
 8001a9c:	1a80      	subs	r0, r0, r2
 8001a9e:	426d      	negs	r5, r5
 8001aa0:	1b40      	subs	r0, r0, r5
 8001aa2:	4283      	cmp	r3, r0
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_ddiv+0x348>
 8001aa6:	e10f      	b.n	8001cc8 <__aeabi_ddiv+0x568>
 8001aa8:	9902      	ldr	r1, [sp, #8]
 8001aaa:	f7fe fbcb 	bl	8000244 <__aeabi_uidivmod>
 8001aae:	9a03      	ldr	r2, [sp, #12]
 8001ab0:	040b      	lsls	r3, r1, #16
 8001ab2:	4342      	muls	r2, r0
 8001ab4:	0c21      	lsrs	r1, r4, #16
 8001ab6:	0005      	movs	r5, r0
 8001ab8:	4319      	orrs	r1, r3
 8001aba:	428a      	cmp	r2, r1
 8001abc:	d900      	bls.n	8001ac0 <__aeabi_ddiv+0x360>
 8001abe:	e0cb      	b.n	8001c58 <__aeabi_ddiv+0x4f8>
 8001ac0:	1a88      	subs	r0, r1, r2
 8001ac2:	9902      	ldr	r1, [sp, #8]
 8001ac4:	f7fe fbbe 	bl	8000244 <__aeabi_uidivmod>
 8001ac8:	9a03      	ldr	r2, [sp, #12]
 8001aca:	0424      	lsls	r4, r4, #16
 8001acc:	4342      	muls	r2, r0
 8001ace:	0409      	lsls	r1, r1, #16
 8001ad0:	0c24      	lsrs	r4, r4, #16
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	430c      	orrs	r4, r1
 8001ad6:	42a2      	cmp	r2, r4
 8001ad8:	d900      	bls.n	8001adc <__aeabi_ddiv+0x37c>
 8001ada:	e0ca      	b.n	8001c72 <__aeabi_ddiv+0x512>
 8001adc:	4641      	mov	r1, r8
 8001ade:	1aa4      	subs	r4, r4, r2
 8001ae0:	042a      	lsls	r2, r5, #16
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	9f04      	ldr	r7, [sp, #16]
 8001ae6:	0413      	lsls	r3, r2, #16
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	4359      	muls	r1, r3
 8001aec:	4640      	mov	r0, r8
 8001aee:	437b      	muls	r3, r7
 8001af0:	469c      	mov	ip, r3
 8001af2:	0c15      	lsrs	r5, r2, #16
 8001af4:	4368      	muls	r0, r5
 8001af6:	0c0b      	lsrs	r3, r1, #16
 8001af8:	4484      	add	ip, r0
 8001afa:	4463      	add	r3, ip
 8001afc:	437d      	muls	r5, r7
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d903      	bls.n	8001b0a <__aeabi_ddiv+0x3aa>
 8001b02:	2080      	movs	r0, #128	@ 0x80
 8001b04:	0240      	lsls	r0, r0, #9
 8001b06:	4684      	mov	ip, r0
 8001b08:	4465      	add	r5, ip
 8001b0a:	0c18      	lsrs	r0, r3, #16
 8001b0c:	0409      	lsls	r1, r1, #16
 8001b0e:	041b      	lsls	r3, r3, #16
 8001b10:	0c09      	lsrs	r1, r1, #16
 8001b12:	1940      	adds	r0, r0, r5
 8001b14:	185b      	adds	r3, r3, r1
 8001b16:	4284      	cmp	r4, r0
 8001b18:	d327      	bcc.n	8001b6a <__aeabi_ddiv+0x40a>
 8001b1a:	d023      	beq.n	8001b64 <__aeabi_ddiv+0x404>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	0035      	movs	r5, r6
 8001b20:	431a      	orrs	r2, r3
 8001b22:	4b94      	ldr	r3, [pc, #592]	@ (8001d74 <__aeabi_ddiv+0x614>)
 8001b24:	4453      	add	r3, sl
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	dd60      	ble.n	8001bec <__aeabi_ddiv+0x48c>
 8001b2a:	0751      	lsls	r1, r2, #29
 8001b2c:	d000      	beq.n	8001b30 <__aeabi_ddiv+0x3d0>
 8001b2e:	e086      	b.n	8001c3e <__aeabi_ddiv+0x4de>
 8001b30:	002e      	movs	r6, r5
 8001b32:	08d1      	lsrs	r1, r2, #3
 8001b34:	465a      	mov	r2, fp
 8001b36:	01d2      	lsls	r2, r2, #7
 8001b38:	d506      	bpl.n	8001b48 <__aeabi_ddiv+0x3e8>
 8001b3a:	465a      	mov	r2, fp
 8001b3c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d78 <__aeabi_ddiv+0x618>)
 8001b3e:	401a      	ands	r2, r3
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	4693      	mov	fp, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4453      	add	r3, sl
 8001b48:	4a8c      	ldr	r2, [pc, #560]	@ (8001d7c <__aeabi_ddiv+0x61c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	dd00      	ble.n	8001b50 <__aeabi_ddiv+0x3f0>
 8001b4e:	e680      	b.n	8001852 <__aeabi_ddiv+0xf2>
 8001b50:	465a      	mov	r2, fp
 8001b52:	0752      	lsls	r2, r2, #29
 8001b54:	430a      	orrs	r2, r1
 8001b56:	4690      	mov	r8, r2
 8001b58:	465a      	mov	r2, fp
 8001b5a:	055b      	lsls	r3, r3, #21
 8001b5c:	0254      	lsls	r4, r2, #9
 8001b5e:	0b24      	lsrs	r4, r4, #12
 8001b60:	0d5b      	lsrs	r3, r3, #21
 8001b62:	e669      	b.n	8001838 <__aeabi_ddiv+0xd8>
 8001b64:	0035      	movs	r5, r6
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0db      	beq.n	8001b22 <__aeabi_ddiv+0x3c2>
 8001b6a:	9d00      	ldr	r5, [sp, #0]
 8001b6c:	1e51      	subs	r1, r2, #1
 8001b6e:	46ac      	mov	ip, r5
 8001b70:	4464      	add	r4, ip
 8001b72:	42ac      	cmp	r4, r5
 8001b74:	d200      	bcs.n	8001b78 <__aeabi_ddiv+0x418>
 8001b76:	e09e      	b.n	8001cb6 <__aeabi_ddiv+0x556>
 8001b78:	4284      	cmp	r4, r0
 8001b7a:	d200      	bcs.n	8001b7e <__aeabi_ddiv+0x41e>
 8001b7c:	e0e1      	b.n	8001d42 <__aeabi_ddiv+0x5e2>
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0x422>
 8001b80:	e0ee      	b.n	8001d60 <__aeabi_ddiv+0x600>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e7ca      	b.n	8001b1c <__aeabi_ddiv+0x3bc>
 8001b86:	4542      	cmp	r2, r8
 8001b88:	d900      	bls.n	8001b8c <__aeabi_ddiv+0x42c>
 8001b8a:	e708      	b.n	800199e <__aeabi_ddiv+0x23e>
 8001b8c:	464b      	mov	r3, r9
 8001b8e:	07dc      	lsls	r4, r3, #31
 8001b90:	0858      	lsrs	r0, r3, #1
 8001b92:	4643      	mov	r3, r8
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	431c      	orrs	r4, r3
 8001b98:	4643      	mov	r3, r8
 8001b9a:	07dd      	lsls	r5, r3, #31
 8001b9c:	e706      	b.n	80019ac <__aeabi_ddiv+0x24c>
 8001b9e:	f001 fa83 	bl	80030a8 <__clzsi2>
 8001ba2:	2315      	movs	r3, #21
 8001ba4:	469c      	mov	ip, r3
 8001ba6:	4484      	add	ip, r0
 8001ba8:	0002      	movs	r2, r0
 8001baa:	4663      	mov	r3, ip
 8001bac:	3220      	adds	r2, #32
 8001bae:	2b1c      	cmp	r3, #28
 8001bb0:	dc00      	bgt.n	8001bb4 <__aeabi_ddiv+0x454>
 8001bb2:	e692      	b.n	80018da <__aeabi_ddiv+0x17a>
 8001bb4:	0023      	movs	r3, r4
 8001bb6:	3808      	subs	r0, #8
 8001bb8:	4083      	lsls	r3, r0
 8001bba:	4699      	mov	r9, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	4698      	mov	r8, r3
 8001bc0:	e69a      	b.n	80018f8 <__aeabi_ddiv+0x198>
 8001bc2:	f001 fa71 	bl	80030a8 <__clzsi2>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	0003      	movs	r3, r0
 8001bca:	3215      	adds	r2, #21
 8001bcc:	3320      	adds	r3, #32
 8001bce:	2a1c      	cmp	r2, #28
 8001bd0:	dc00      	bgt.n	8001bd4 <__aeabi_ddiv+0x474>
 8001bd2:	e65f      	b.n	8001894 <__aeabi_ddiv+0x134>
 8001bd4:	9900      	ldr	r1, [sp, #0]
 8001bd6:	3808      	subs	r0, #8
 8001bd8:	4081      	lsls	r1, r0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	468b      	mov	fp, r1
 8001bde:	e666      	b.n	80018ae <__aeabi_ddiv+0x14e>
 8001be0:	2200      	movs	r2, #0
 8001be2:	002e      	movs	r6, r5
 8001be4:	2400      	movs	r4, #0
 8001be6:	4690      	mov	r8, r2
 8001be8:	4b65      	ldr	r3, [pc, #404]	@ (8001d80 <__aeabi_ddiv+0x620>)
 8001bea:	e625      	b.n	8001838 <__aeabi_ddiv+0xd8>
 8001bec:	002e      	movs	r6, r5
 8001bee:	2101      	movs	r1, #1
 8001bf0:	1ac9      	subs	r1, r1, r3
 8001bf2:	2938      	cmp	r1, #56	@ 0x38
 8001bf4:	dd00      	ble.n	8001bf8 <__aeabi_ddiv+0x498>
 8001bf6:	e61b      	b.n	8001830 <__aeabi_ddiv+0xd0>
 8001bf8:	291f      	cmp	r1, #31
 8001bfa:	dc7e      	bgt.n	8001cfa <__aeabi_ddiv+0x59a>
 8001bfc:	4861      	ldr	r0, [pc, #388]	@ (8001d84 <__aeabi_ddiv+0x624>)
 8001bfe:	0014      	movs	r4, r2
 8001c00:	4450      	add	r0, sl
 8001c02:	465b      	mov	r3, fp
 8001c04:	4082      	lsls	r2, r0
 8001c06:	4083      	lsls	r3, r0
 8001c08:	40cc      	lsrs	r4, r1
 8001c0a:	1e50      	subs	r0, r2, #1
 8001c0c:	4182      	sbcs	r2, r0
 8001c0e:	4323      	orrs	r3, r4
 8001c10:	431a      	orrs	r2, r3
 8001c12:	465b      	mov	r3, fp
 8001c14:	40cb      	lsrs	r3, r1
 8001c16:	0751      	lsls	r1, r2, #29
 8001c18:	d009      	beq.n	8001c2e <__aeabi_ddiv+0x4ce>
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	4011      	ands	r1, r2
 8001c1e:	2904      	cmp	r1, #4
 8001c20:	d005      	beq.n	8001c2e <__aeabi_ddiv+0x4ce>
 8001c22:	1d11      	adds	r1, r2, #4
 8001c24:	4291      	cmp	r1, r2
 8001c26:	4192      	sbcs	r2, r2
 8001c28:	4252      	negs	r2, r2
 8001c2a:	189b      	adds	r3, r3, r2
 8001c2c:	000a      	movs	r2, r1
 8001c2e:	0219      	lsls	r1, r3, #8
 8001c30:	d400      	bmi.n	8001c34 <__aeabi_ddiv+0x4d4>
 8001c32:	e09b      	b.n	8001d6c <__aeabi_ddiv+0x60c>
 8001c34:	2200      	movs	r2, #0
 8001c36:	2301      	movs	r3, #1
 8001c38:	2400      	movs	r4, #0
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	e5fc      	b.n	8001838 <__aeabi_ddiv+0xd8>
 8001c3e:	210f      	movs	r1, #15
 8001c40:	4011      	ands	r1, r2
 8001c42:	2904      	cmp	r1, #4
 8001c44:	d100      	bne.n	8001c48 <__aeabi_ddiv+0x4e8>
 8001c46:	e773      	b.n	8001b30 <__aeabi_ddiv+0x3d0>
 8001c48:	1d11      	adds	r1, r2, #4
 8001c4a:	4291      	cmp	r1, r2
 8001c4c:	4192      	sbcs	r2, r2
 8001c4e:	4252      	negs	r2, r2
 8001c50:	002e      	movs	r6, r5
 8001c52:	08c9      	lsrs	r1, r1, #3
 8001c54:	4493      	add	fp, r2
 8001c56:	e76d      	b.n	8001b34 <__aeabi_ddiv+0x3d4>
 8001c58:	9b00      	ldr	r3, [sp, #0]
 8001c5a:	3d01      	subs	r5, #1
 8001c5c:	469c      	mov	ip, r3
 8001c5e:	4461      	add	r1, ip
 8001c60:	428b      	cmp	r3, r1
 8001c62:	d900      	bls.n	8001c66 <__aeabi_ddiv+0x506>
 8001c64:	e72c      	b.n	8001ac0 <__aeabi_ddiv+0x360>
 8001c66:	428a      	cmp	r2, r1
 8001c68:	d800      	bhi.n	8001c6c <__aeabi_ddiv+0x50c>
 8001c6a:	e729      	b.n	8001ac0 <__aeabi_ddiv+0x360>
 8001c6c:	1e85      	subs	r5, r0, #2
 8001c6e:	4461      	add	r1, ip
 8001c70:	e726      	b.n	8001ac0 <__aeabi_ddiv+0x360>
 8001c72:	9900      	ldr	r1, [sp, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	468c      	mov	ip, r1
 8001c78:	4464      	add	r4, ip
 8001c7a:	42a1      	cmp	r1, r4
 8001c7c:	d900      	bls.n	8001c80 <__aeabi_ddiv+0x520>
 8001c7e:	e72d      	b.n	8001adc <__aeabi_ddiv+0x37c>
 8001c80:	42a2      	cmp	r2, r4
 8001c82:	d800      	bhi.n	8001c86 <__aeabi_ddiv+0x526>
 8001c84:	e72a      	b.n	8001adc <__aeabi_ddiv+0x37c>
 8001c86:	1e83      	subs	r3, r0, #2
 8001c88:	4464      	add	r4, ip
 8001c8a:	e727      	b.n	8001adc <__aeabi_ddiv+0x37c>
 8001c8c:	4287      	cmp	r7, r0
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_ddiv+0x532>
 8001c90:	e6fe      	b.n	8001a90 <__aeabi_ddiv+0x330>
 8001c92:	45a9      	cmp	r9, r5
 8001c94:	d900      	bls.n	8001c98 <__aeabi_ddiv+0x538>
 8001c96:	e6fb      	b.n	8001a90 <__aeabi_ddiv+0x330>
 8001c98:	e6f5      	b.n	8001a86 <__aeabi_ddiv+0x326>
 8001c9a:	42a2      	cmp	r2, r4
 8001c9c:	d800      	bhi.n	8001ca0 <__aeabi_ddiv+0x540>
 8001c9e:	e6b9      	b.n	8001a14 <__aeabi_ddiv+0x2b4>
 8001ca0:	1e83      	subs	r3, r0, #2
 8001ca2:	4464      	add	r4, ip
 8001ca4:	e6b6      	b.n	8001a14 <__aeabi_ddiv+0x2b4>
 8001ca6:	428a      	cmp	r2, r1
 8001ca8:	d800      	bhi.n	8001cac <__aeabi_ddiv+0x54c>
 8001caa:	e69f      	b.n	80019ec <__aeabi_ddiv+0x28c>
 8001cac:	46bc      	mov	ip, r7
 8001cae:	1e83      	subs	r3, r0, #2
 8001cb0:	4698      	mov	r8, r3
 8001cb2:	4461      	add	r1, ip
 8001cb4:	e69a      	b.n	80019ec <__aeabi_ddiv+0x28c>
 8001cb6:	000a      	movs	r2, r1
 8001cb8:	4284      	cmp	r4, r0
 8001cba:	d000      	beq.n	8001cbe <__aeabi_ddiv+0x55e>
 8001cbc:	e72e      	b.n	8001b1c <__aeabi_ddiv+0x3bc>
 8001cbe:	454b      	cmp	r3, r9
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_ddiv+0x564>
 8001cc2:	e72b      	b.n	8001b1c <__aeabi_ddiv+0x3bc>
 8001cc4:	0035      	movs	r5, r6
 8001cc6:	e72c      	b.n	8001b22 <__aeabi_ddiv+0x3c2>
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <__aeabi_ddiv+0x614>)
 8001cca:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <__aeabi_ddiv+0x628>)
 8001ccc:	4453      	add	r3, sl
 8001cce:	4592      	cmp	sl, r2
 8001cd0:	db43      	blt.n	8001d5a <__aeabi_ddiv+0x5fa>
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4493      	add	fp, r2
 8001cd8:	e72c      	b.n	8001b34 <__aeabi_ddiv+0x3d4>
 8001cda:	42ac      	cmp	r4, r5
 8001cdc:	d800      	bhi.n	8001ce0 <__aeabi_ddiv+0x580>
 8001cde:	e6d7      	b.n	8001a90 <__aeabi_ddiv+0x330>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	469c      	mov	ip, r3
 8001ce6:	9900      	ldr	r1, [sp, #0]
 8001ce8:	444d      	add	r5, r9
 8001cea:	454d      	cmp	r5, r9
 8001cec:	419b      	sbcs	r3, r3
 8001cee:	44e3      	add	fp, ip
 8001cf0:	468c      	mov	ip, r1
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	4463      	add	r3, ip
 8001cf6:	18c0      	adds	r0, r0, r3
 8001cf8:	e6cc      	b.n	8001a94 <__aeabi_ddiv+0x334>
 8001cfa:	201f      	movs	r0, #31
 8001cfc:	4240      	negs	r0, r0
 8001cfe:	1ac3      	subs	r3, r0, r3
 8001d00:	4658      	mov	r0, fp
 8001d02:	40d8      	lsrs	r0, r3
 8001d04:	2920      	cmp	r1, #32
 8001d06:	d004      	beq.n	8001d12 <__aeabi_ddiv+0x5b2>
 8001d08:	4659      	mov	r1, fp
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <__aeabi_ddiv+0x62c>)
 8001d0c:	4453      	add	r3, sl
 8001d0e:	4099      	lsls	r1, r3
 8001d10:	430a      	orrs	r2, r1
 8001d12:	1e53      	subs	r3, r2, #1
 8001d14:	419a      	sbcs	r2, r3
 8001d16:	2307      	movs	r3, #7
 8001d18:	0019      	movs	r1, r3
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	2400      	movs	r4, #0
 8001d1e:	4011      	ands	r1, r2
 8001d20:	4213      	tst	r3, r2
 8001d22:	d009      	beq.n	8001d38 <__aeabi_ddiv+0x5d8>
 8001d24:	3308      	adds	r3, #8
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d01d      	beq.n	8001d68 <__aeabi_ddiv+0x608>
 8001d2c:	1d13      	adds	r3, r2, #4
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	4189      	sbcs	r1, r1
 8001d32:	001a      	movs	r2, r3
 8001d34:	4249      	negs	r1, r1
 8001d36:	0749      	lsls	r1, r1, #29
 8001d38:	08d2      	lsrs	r2, r2, #3
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	4690      	mov	r8, r2
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e57a      	b.n	8001838 <__aeabi_ddiv+0xd8>
 8001d42:	4649      	mov	r1, r9
 8001d44:	9f00      	ldr	r7, [sp, #0]
 8001d46:	004d      	lsls	r5, r1, #1
 8001d48:	454d      	cmp	r5, r9
 8001d4a:	4189      	sbcs	r1, r1
 8001d4c:	46bc      	mov	ip, r7
 8001d4e:	4249      	negs	r1, r1
 8001d50:	4461      	add	r1, ip
 8001d52:	46a9      	mov	r9, r5
 8001d54:	3a02      	subs	r2, #2
 8001d56:	1864      	adds	r4, r4, r1
 8001d58:	e7ae      	b.n	8001cb8 <__aeabi_ddiv+0x558>
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4252      	negs	r2, r2
 8001d5e:	e746      	b.n	8001bee <__aeabi_ddiv+0x48e>
 8001d60:	4599      	cmp	r9, r3
 8001d62:	d3ee      	bcc.n	8001d42 <__aeabi_ddiv+0x5e2>
 8001d64:	000a      	movs	r2, r1
 8001d66:	e7aa      	b.n	8001cbe <__aeabi_ddiv+0x55e>
 8001d68:	2100      	movs	r1, #0
 8001d6a:	e7e5      	b.n	8001d38 <__aeabi_ddiv+0x5d8>
 8001d6c:	0759      	lsls	r1, r3, #29
 8001d6e:	025b      	lsls	r3, r3, #9
 8001d70:	0b1c      	lsrs	r4, r3, #12
 8001d72:	e7e1      	b.n	8001d38 <__aeabi_ddiv+0x5d8>
 8001d74:	000003ff 	.word	0x000003ff
 8001d78:	feffffff 	.word	0xfeffffff
 8001d7c:	000007fe 	.word	0x000007fe
 8001d80:	000007ff 	.word	0x000007ff
 8001d84:	0000041e 	.word	0x0000041e
 8001d88:	fffffc02 	.word	0xfffffc02
 8001d8c:	0000043e 	.word	0x0000043e

08001d90 <__eqdf2>:
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	4657      	mov	r7, sl
 8001d94:	46de      	mov	lr, fp
 8001d96:	464e      	mov	r6, r9
 8001d98:	4645      	mov	r5, r8
 8001d9a:	b5e0      	push	{r5, r6, r7, lr}
 8001d9c:	000d      	movs	r5, r1
 8001d9e:	0004      	movs	r4, r0
 8001da0:	0fe8      	lsrs	r0, r5, #31
 8001da2:	4683      	mov	fp, r0
 8001da4:	0309      	lsls	r1, r1, #12
 8001da6:	0fd8      	lsrs	r0, r3, #31
 8001da8:	0b09      	lsrs	r1, r1, #12
 8001daa:	4682      	mov	sl, r0
 8001dac:	4819      	ldr	r0, [pc, #100]	@ (8001e14 <__eqdf2+0x84>)
 8001dae:	468c      	mov	ip, r1
 8001db0:	031f      	lsls	r7, r3, #12
 8001db2:	0069      	lsls	r1, r5, #1
 8001db4:	005e      	lsls	r6, r3, #1
 8001db6:	0d49      	lsrs	r1, r1, #21
 8001db8:	0b3f      	lsrs	r7, r7, #12
 8001dba:	0d76      	lsrs	r6, r6, #21
 8001dbc:	4281      	cmp	r1, r0
 8001dbe:	d018      	beq.n	8001df2 <__eqdf2+0x62>
 8001dc0:	4286      	cmp	r6, r0
 8001dc2:	d00f      	beq.n	8001de4 <__eqdf2+0x54>
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	42b1      	cmp	r1, r6
 8001dc8:	d10d      	bne.n	8001de6 <__eqdf2+0x56>
 8001dca:	45bc      	cmp	ip, r7
 8001dcc:	d10b      	bne.n	8001de6 <__eqdf2+0x56>
 8001dce:	4294      	cmp	r4, r2
 8001dd0:	d109      	bne.n	8001de6 <__eqdf2+0x56>
 8001dd2:	45d3      	cmp	fp, sl
 8001dd4:	d01c      	beq.n	8001e10 <__eqdf2+0x80>
 8001dd6:	2900      	cmp	r1, #0
 8001dd8:	d105      	bne.n	8001de6 <__eqdf2+0x56>
 8001dda:	4660      	mov	r0, ip
 8001ddc:	4320      	orrs	r0, r4
 8001dde:	1e43      	subs	r3, r0, #1
 8001de0:	4198      	sbcs	r0, r3
 8001de2:	e000      	b.n	8001de6 <__eqdf2+0x56>
 8001de4:	2001      	movs	r0, #1
 8001de6:	bcf0      	pop	{r4, r5, r6, r7}
 8001de8:	46bb      	mov	fp, r7
 8001dea:	46b2      	mov	sl, r6
 8001dec:	46a9      	mov	r9, r5
 8001dee:	46a0      	mov	r8, r4
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df2:	2001      	movs	r0, #1
 8001df4:	428e      	cmp	r6, r1
 8001df6:	d1f6      	bne.n	8001de6 <__eqdf2+0x56>
 8001df8:	4661      	mov	r1, ip
 8001dfa:	4339      	orrs	r1, r7
 8001dfc:	000f      	movs	r7, r1
 8001dfe:	4317      	orrs	r7, r2
 8001e00:	4327      	orrs	r7, r4
 8001e02:	d1f0      	bne.n	8001de6 <__eqdf2+0x56>
 8001e04:	465b      	mov	r3, fp
 8001e06:	4652      	mov	r2, sl
 8001e08:	1a98      	subs	r0, r3, r2
 8001e0a:	1e43      	subs	r3, r0, #1
 8001e0c:	4198      	sbcs	r0, r3
 8001e0e:	e7ea      	b.n	8001de6 <__eqdf2+0x56>
 8001e10:	2000      	movs	r0, #0
 8001e12:	e7e8      	b.n	8001de6 <__eqdf2+0x56>
 8001e14:	000007ff 	.word	0x000007ff

08001e18 <__gedf2>:
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	4657      	mov	r7, sl
 8001e1c:	464e      	mov	r6, r9
 8001e1e:	4645      	mov	r5, r8
 8001e20:	46de      	mov	lr, fp
 8001e22:	b5e0      	push	{r5, r6, r7, lr}
 8001e24:	000d      	movs	r5, r1
 8001e26:	030e      	lsls	r6, r1, #12
 8001e28:	0049      	lsls	r1, r1, #1
 8001e2a:	0d49      	lsrs	r1, r1, #21
 8001e2c:	468a      	mov	sl, r1
 8001e2e:	0fdf      	lsrs	r7, r3, #31
 8001e30:	0fe9      	lsrs	r1, r5, #31
 8001e32:	46bc      	mov	ip, r7
 8001e34:	b083      	sub	sp, #12
 8001e36:	4f2f      	ldr	r7, [pc, #188]	@ (8001ef4 <__gedf2+0xdc>)
 8001e38:	0004      	movs	r4, r0
 8001e3a:	4680      	mov	r8, r0
 8001e3c:	9101      	str	r1, [sp, #4]
 8001e3e:	0058      	lsls	r0, r3, #1
 8001e40:	0319      	lsls	r1, r3, #12
 8001e42:	4691      	mov	r9, r2
 8001e44:	0b36      	lsrs	r6, r6, #12
 8001e46:	0b09      	lsrs	r1, r1, #12
 8001e48:	0d40      	lsrs	r0, r0, #21
 8001e4a:	45ba      	cmp	sl, r7
 8001e4c:	d01d      	beq.n	8001e8a <__gedf2+0x72>
 8001e4e:	42b8      	cmp	r0, r7
 8001e50:	d00d      	beq.n	8001e6e <__gedf2+0x56>
 8001e52:	4657      	mov	r7, sl
 8001e54:	2f00      	cmp	r7, #0
 8001e56:	d12a      	bne.n	8001eae <__gedf2+0x96>
 8001e58:	4334      	orrs	r4, r6
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d124      	bne.n	8001ea8 <__gedf2+0x90>
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	d036      	beq.n	8001ed0 <__gedf2+0xb8>
 8001e62:	2c00      	cmp	r4, #0
 8001e64:	d141      	bne.n	8001eea <__gedf2+0xd2>
 8001e66:	4663      	mov	r3, ip
 8001e68:	0058      	lsls	r0, r3, #1
 8001e6a:	3801      	subs	r0, #1
 8001e6c:	e015      	b.n	8001e9a <__gedf2+0x82>
 8001e6e:	4311      	orrs	r1, r2
 8001e70:	d138      	bne.n	8001ee4 <__gedf2+0xcc>
 8001e72:	4653      	mov	r3, sl
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <__gedf2+0x64>
 8001e78:	4326      	orrs	r6, r4
 8001e7a:	d0f4      	beq.n	8001e66 <__gedf2+0x4e>
 8001e7c:	9b01      	ldr	r3, [sp, #4]
 8001e7e:	4563      	cmp	r3, ip
 8001e80:	d107      	bne.n	8001e92 <__gedf2+0x7a>
 8001e82:	9b01      	ldr	r3, [sp, #4]
 8001e84:	0058      	lsls	r0, r3, #1
 8001e86:	3801      	subs	r0, #1
 8001e88:	e007      	b.n	8001e9a <__gedf2+0x82>
 8001e8a:	4326      	orrs	r6, r4
 8001e8c:	d12a      	bne.n	8001ee4 <__gedf2+0xcc>
 8001e8e:	4550      	cmp	r0, sl
 8001e90:	d021      	beq.n	8001ed6 <__gedf2+0xbe>
 8001e92:	2001      	movs	r0, #1
 8001e94:	9b01      	ldr	r3, [sp, #4]
 8001e96:	425f      	negs	r7, r3
 8001e98:	4338      	orrs	r0, r7
 8001e9a:	b003      	add	sp, #12
 8001e9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001e9e:	46bb      	mov	fp, r7
 8001ea0:	46b2      	mov	sl, r6
 8001ea2:	46a9      	mov	r9, r5
 8001ea4:	46a0      	mov	r8, r4
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea8:	2c00      	cmp	r4, #0
 8001eaa:	d0dc      	beq.n	8001e66 <__gedf2+0x4e>
 8001eac:	e7e6      	b.n	8001e7c <__gedf2+0x64>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d0ef      	beq.n	8001e92 <__gedf2+0x7a>
 8001eb2:	9b01      	ldr	r3, [sp, #4]
 8001eb4:	4563      	cmp	r3, ip
 8001eb6:	d1ec      	bne.n	8001e92 <__gedf2+0x7a>
 8001eb8:	4582      	cmp	sl, r0
 8001eba:	dcea      	bgt.n	8001e92 <__gedf2+0x7a>
 8001ebc:	dbe1      	blt.n	8001e82 <__gedf2+0x6a>
 8001ebe:	428e      	cmp	r6, r1
 8001ec0:	d8e7      	bhi.n	8001e92 <__gedf2+0x7a>
 8001ec2:	d1de      	bne.n	8001e82 <__gedf2+0x6a>
 8001ec4:	45c8      	cmp	r8, r9
 8001ec6:	d8e4      	bhi.n	8001e92 <__gedf2+0x7a>
 8001ec8:	2000      	movs	r0, #0
 8001eca:	45c8      	cmp	r8, r9
 8001ecc:	d2e5      	bcs.n	8001e9a <__gedf2+0x82>
 8001ece:	e7d8      	b.n	8001e82 <__gedf2+0x6a>
 8001ed0:	2c00      	cmp	r4, #0
 8001ed2:	d0e2      	beq.n	8001e9a <__gedf2+0x82>
 8001ed4:	e7dd      	b.n	8001e92 <__gedf2+0x7a>
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	d104      	bne.n	8001ee4 <__gedf2+0xcc>
 8001eda:	9b01      	ldr	r3, [sp, #4]
 8001edc:	4563      	cmp	r3, ip
 8001ede:	d1d8      	bne.n	8001e92 <__gedf2+0x7a>
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	e7da      	b.n	8001e9a <__gedf2+0x82>
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	4240      	negs	r0, r0
 8001ee8:	e7d7      	b.n	8001e9a <__gedf2+0x82>
 8001eea:	9b01      	ldr	r3, [sp, #4]
 8001eec:	4563      	cmp	r3, ip
 8001eee:	d0e6      	beq.n	8001ebe <__gedf2+0xa6>
 8001ef0:	e7cf      	b.n	8001e92 <__gedf2+0x7a>
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	000007ff 	.word	0x000007ff

08001ef8 <__ledf2>:
 8001ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efa:	4657      	mov	r7, sl
 8001efc:	464e      	mov	r6, r9
 8001efe:	4645      	mov	r5, r8
 8001f00:	46de      	mov	lr, fp
 8001f02:	b5e0      	push	{r5, r6, r7, lr}
 8001f04:	000d      	movs	r5, r1
 8001f06:	030e      	lsls	r6, r1, #12
 8001f08:	0049      	lsls	r1, r1, #1
 8001f0a:	0d49      	lsrs	r1, r1, #21
 8001f0c:	468a      	mov	sl, r1
 8001f0e:	0fdf      	lsrs	r7, r3, #31
 8001f10:	0fe9      	lsrs	r1, r5, #31
 8001f12:	46bc      	mov	ip, r7
 8001f14:	b083      	sub	sp, #12
 8001f16:	4f2e      	ldr	r7, [pc, #184]	@ (8001fd0 <__ledf2+0xd8>)
 8001f18:	0004      	movs	r4, r0
 8001f1a:	4680      	mov	r8, r0
 8001f1c:	9101      	str	r1, [sp, #4]
 8001f1e:	0058      	lsls	r0, r3, #1
 8001f20:	0319      	lsls	r1, r3, #12
 8001f22:	4691      	mov	r9, r2
 8001f24:	0b36      	lsrs	r6, r6, #12
 8001f26:	0b09      	lsrs	r1, r1, #12
 8001f28:	0d40      	lsrs	r0, r0, #21
 8001f2a:	45ba      	cmp	sl, r7
 8001f2c:	d01e      	beq.n	8001f6c <__ledf2+0x74>
 8001f2e:	42b8      	cmp	r0, r7
 8001f30:	d00d      	beq.n	8001f4e <__ledf2+0x56>
 8001f32:	4657      	mov	r7, sl
 8001f34:	2f00      	cmp	r7, #0
 8001f36:	d127      	bne.n	8001f88 <__ledf2+0x90>
 8001f38:	4334      	orrs	r4, r6
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d133      	bne.n	8001fa6 <__ledf2+0xae>
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	d034      	beq.n	8001fac <__ledf2+0xb4>
 8001f42:	2c00      	cmp	r4, #0
 8001f44:	d140      	bne.n	8001fc8 <__ledf2+0xd0>
 8001f46:	4663      	mov	r3, ip
 8001f48:	0058      	lsls	r0, r3, #1
 8001f4a:	3801      	subs	r0, #1
 8001f4c:	e015      	b.n	8001f7a <__ledf2+0x82>
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	d112      	bne.n	8001f78 <__ledf2+0x80>
 8001f52:	4653      	mov	r3, sl
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <__ledf2+0x64>
 8001f58:	4326      	orrs	r6, r4
 8001f5a:	d0f4      	beq.n	8001f46 <__ledf2+0x4e>
 8001f5c:	9b01      	ldr	r3, [sp, #4]
 8001f5e:	4563      	cmp	r3, ip
 8001f60:	d01d      	beq.n	8001f9e <__ledf2+0xa6>
 8001f62:	2001      	movs	r0, #1
 8001f64:	9b01      	ldr	r3, [sp, #4]
 8001f66:	425f      	negs	r7, r3
 8001f68:	4338      	orrs	r0, r7
 8001f6a:	e006      	b.n	8001f7a <__ledf2+0x82>
 8001f6c:	4326      	orrs	r6, r4
 8001f6e:	d103      	bne.n	8001f78 <__ledf2+0x80>
 8001f70:	4550      	cmp	r0, sl
 8001f72:	d1f6      	bne.n	8001f62 <__ledf2+0x6a>
 8001f74:	4311      	orrs	r1, r2
 8001f76:	d01c      	beq.n	8001fb2 <__ledf2+0xba>
 8001f78:	2002      	movs	r0, #2
 8001f7a:	b003      	add	sp, #12
 8001f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f7e:	46bb      	mov	fp, r7
 8001f80:	46b2      	mov	sl, r6
 8001f82:	46a9      	mov	r9, r5
 8001f84:	46a0      	mov	r8, r4
 8001f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d0ea      	beq.n	8001f62 <__ledf2+0x6a>
 8001f8c:	9b01      	ldr	r3, [sp, #4]
 8001f8e:	4563      	cmp	r3, ip
 8001f90:	d1e7      	bne.n	8001f62 <__ledf2+0x6a>
 8001f92:	4582      	cmp	sl, r0
 8001f94:	dce5      	bgt.n	8001f62 <__ledf2+0x6a>
 8001f96:	db02      	blt.n	8001f9e <__ledf2+0xa6>
 8001f98:	428e      	cmp	r6, r1
 8001f9a:	d8e2      	bhi.n	8001f62 <__ledf2+0x6a>
 8001f9c:	d00e      	beq.n	8001fbc <__ledf2+0xc4>
 8001f9e:	9b01      	ldr	r3, [sp, #4]
 8001fa0:	0058      	lsls	r0, r3, #1
 8001fa2:	3801      	subs	r0, #1
 8001fa4:	e7e9      	b.n	8001f7a <__ledf2+0x82>
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	d0cd      	beq.n	8001f46 <__ledf2+0x4e>
 8001faa:	e7d7      	b.n	8001f5c <__ledf2+0x64>
 8001fac:	2c00      	cmp	r4, #0
 8001fae:	d0e4      	beq.n	8001f7a <__ledf2+0x82>
 8001fb0:	e7d7      	b.n	8001f62 <__ledf2+0x6a>
 8001fb2:	9b01      	ldr	r3, [sp, #4]
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	4563      	cmp	r3, ip
 8001fb8:	d0df      	beq.n	8001f7a <__ledf2+0x82>
 8001fba:	e7d2      	b.n	8001f62 <__ledf2+0x6a>
 8001fbc:	45c8      	cmp	r8, r9
 8001fbe:	d8d0      	bhi.n	8001f62 <__ledf2+0x6a>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	45c8      	cmp	r8, r9
 8001fc4:	d2d9      	bcs.n	8001f7a <__ledf2+0x82>
 8001fc6:	e7ea      	b.n	8001f9e <__ledf2+0xa6>
 8001fc8:	9b01      	ldr	r3, [sp, #4]
 8001fca:	4563      	cmp	r3, ip
 8001fcc:	d0e4      	beq.n	8001f98 <__ledf2+0xa0>
 8001fce:	e7c8      	b.n	8001f62 <__ledf2+0x6a>
 8001fd0:	000007ff 	.word	0x000007ff

08001fd4 <__aeabi_dmul>:
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	4657      	mov	r7, sl
 8001fd8:	464e      	mov	r6, r9
 8001fda:	46de      	mov	lr, fp
 8001fdc:	4645      	mov	r5, r8
 8001fde:	b5e0      	push	{r5, r6, r7, lr}
 8001fe0:	001f      	movs	r7, r3
 8001fe2:	030b      	lsls	r3, r1, #12
 8001fe4:	0b1b      	lsrs	r3, r3, #12
 8001fe6:	0016      	movs	r6, r2
 8001fe8:	469a      	mov	sl, r3
 8001fea:	0fca      	lsrs	r2, r1, #31
 8001fec:	004b      	lsls	r3, r1, #1
 8001fee:	0004      	movs	r4, r0
 8001ff0:	4691      	mov	r9, r2
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	0d5b      	lsrs	r3, r3, #21
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dmul+0x26>
 8001ff8:	e1cf      	b.n	800239a <__aeabi_dmul+0x3c6>
 8001ffa:	4acd      	ldr	r2, [pc, #820]	@ (8002330 <__aeabi_dmul+0x35c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d055      	beq.n	80020ac <__aeabi_dmul+0xd8>
 8002000:	4651      	mov	r1, sl
 8002002:	0f42      	lsrs	r2, r0, #29
 8002004:	00c9      	lsls	r1, r1, #3
 8002006:	430a      	orrs	r2, r1
 8002008:	2180      	movs	r1, #128	@ 0x80
 800200a:	0409      	lsls	r1, r1, #16
 800200c:	4311      	orrs	r1, r2
 800200e:	00c2      	lsls	r2, r0, #3
 8002010:	4690      	mov	r8, r2
 8002012:	4ac8      	ldr	r2, [pc, #800]	@ (8002334 <__aeabi_dmul+0x360>)
 8002014:	468a      	mov	sl, r1
 8002016:	4693      	mov	fp, r2
 8002018:	449b      	add	fp, r3
 800201a:	2300      	movs	r3, #0
 800201c:	2500      	movs	r5, #0
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	033c      	lsls	r4, r7, #12
 8002022:	007b      	lsls	r3, r7, #1
 8002024:	0ffa      	lsrs	r2, r7, #31
 8002026:	9601      	str	r6, [sp, #4]
 8002028:	0b24      	lsrs	r4, r4, #12
 800202a:	0d5b      	lsrs	r3, r3, #21
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	d100      	bne.n	8002032 <__aeabi_dmul+0x5e>
 8002030:	e188      	b.n	8002344 <__aeabi_dmul+0x370>
 8002032:	4abf      	ldr	r2, [pc, #764]	@ (8002330 <__aeabi_dmul+0x35c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d100      	bne.n	800203a <__aeabi_dmul+0x66>
 8002038:	e092      	b.n	8002160 <__aeabi_dmul+0x18c>
 800203a:	4abe      	ldr	r2, [pc, #760]	@ (8002334 <__aeabi_dmul+0x360>)
 800203c:	4694      	mov	ip, r2
 800203e:	4463      	add	r3, ip
 8002040:	449b      	add	fp, r3
 8002042:	2d0a      	cmp	r5, #10
 8002044:	dc42      	bgt.n	80020cc <__aeabi_dmul+0xf8>
 8002046:	00e4      	lsls	r4, r4, #3
 8002048:	0f73      	lsrs	r3, r6, #29
 800204a:	4323      	orrs	r3, r4
 800204c:	2480      	movs	r4, #128	@ 0x80
 800204e:	4649      	mov	r1, r9
 8002050:	0424      	lsls	r4, r4, #16
 8002052:	431c      	orrs	r4, r3
 8002054:	00f3      	lsls	r3, r6, #3
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	9b00      	ldr	r3, [sp, #0]
 800205a:	2000      	movs	r0, #0
 800205c:	4059      	eors	r1, r3
 800205e:	b2cb      	uxtb	r3, r1
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	2d02      	cmp	r5, #2
 8002064:	dc00      	bgt.n	8002068 <__aeabi_dmul+0x94>
 8002066:	e094      	b.n	8002192 <__aeabi_dmul+0x1be>
 8002068:	2301      	movs	r3, #1
 800206a:	40ab      	lsls	r3, r5
 800206c:	001d      	movs	r5, r3
 800206e:	23a6      	movs	r3, #166	@ 0xa6
 8002070:	002a      	movs	r2, r5
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	401a      	ands	r2, r3
 8002076:	421d      	tst	r5, r3
 8002078:	d000      	beq.n	800207c <__aeabi_dmul+0xa8>
 800207a:	e229      	b.n	80024d0 <__aeabi_dmul+0x4fc>
 800207c:	2390      	movs	r3, #144	@ 0x90
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	421d      	tst	r5, r3
 8002082:	d100      	bne.n	8002086 <__aeabi_dmul+0xb2>
 8002084:	e24d      	b.n	8002522 <__aeabi_dmul+0x54e>
 8002086:	2300      	movs	r3, #0
 8002088:	2480      	movs	r4, #128	@ 0x80
 800208a:	4699      	mov	r9, r3
 800208c:	0324      	lsls	r4, r4, #12
 800208e:	4ba8      	ldr	r3, [pc, #672]	@ (8002330 <__aeabi_dmul+0x35c>)
 8002090:	0010      	movs	r0, r2
 8002092:	464a      	mov	r2, r9
 8002094:	051b      	lsls	r3, r3, #20
 8002096:	4323      	orrs	r3, r4
 8002098:	07d2      	lsls	r2, r2, #31
 800209a:	4313      	orrs	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	b005      	add	sp, #20
 80020a0:	bcf0      	pop	{r4, r5, r6, r7}
 80020a2:	46bb      	mov	fp, r7
 80020a4:	46b2      	mov	sl, r6
 80020a6:	46a9      	mov	r9, r5
 80020a8:	46a0      	mov	r8, r4
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ac:	4652      	mov	r2, sl
 80020ae:	4302      	orrs	r2, r0
 80020b0:	4690      	mov	r8, r2
 80020b2:	d000      	beq.n	80020b6 <__aeabi_dmul+0xe2>
 80020b4:	e1ac      	b.n	8002410 <__aeabi_dmul+0x43c>
 80020b6:	469b      	mov	fp, r3
 80020b8:	2302      	movs	r3, #2
 80020ba:	4692      	mov	sl, r2
 80020bc:	2508      	movs	r5, #8
 80020be:	9302      	str	r3, [sp, #8]
 80020c0:	e7ae      	b.n	8002020 <__aeabi_dmul+0x4c>
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	46a2      	mov	sl, r4
 80020c6:	4699      	mov	r9, r3
 80020c8:	9b01      	ldr	r3, [sp, #4]
 80020ca:	4698      	mov	r8, r3
 80020cc:	9b02      	ldr	r3, [sp, #8]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dmul+0x100>
 80020d2:	e1ca      	b.n	800246a <__aeabi_dmul+0x496>
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d100      	bne.n	80020da <__aeabi_dmul+0x106>
 80020d8:	e192      	b.n	8002400 <__aeabi_dmul+0x42c>
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d110      	bne.n	8002100 <__aeabi_dmul+0x12c>
 80020de:	2300      	movs	r3, #0
 80020e0:	2400      	movs	r4, #0
 80020e2:	2200      	movs	r2, #0
 80020e4:	e7d4      	b.n	8002090 <__aeabi_dmul+0xbc>
 80020e6:	2201      	movs	r2, #1
 80020e8:	087b      	lsrs	r3, r7, #1
 80020ea:	403a      	ands	r2, r7
 80020ec:	4313      	orrs	r3, r2
 80020ee:	4652      	mov	r2, sl
 80020f0:	07d2      	lsls	r2, r2, #31
 80020f2:	4313      	orrs	r3, r2
 80020f4:	4698      	mov	r8, r3
 80020f6:	4653      	mov	r3, sl
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	469a      	mov	sl, r3
 80020fc:	9b03      	ldr	r3, [sp, #12]
 80020fe:	4699      	mov	r9, r3
 8002100:	465b      	mov	r3, fp
 8002102:	1c58      	adds	r0, r3, #1
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	445b      	add	r3, fp
 800210a:	2b00      	cmp	r3, #0
 800210c:	dc00      	bgt.n	8002110 <__aeabi_dmul+0x13c>
 800210e:	e1b1      	b.n	8002474 <__aeabi_dmul+0x4a0>
 8002110:	4642      	mov	r2, r8
 8002112:	0752      	lsls	r2, r2, #29
 8002114:	d00b      	beq.n	800212e <__aeabi_dmul+0x15a>
 8002116:	220f      	movs	r2, #15
 8002118:	4641      	mov	r1, r8
 800211a:	400a      	ands	r2, r1
 800211c:	2a04      	cmp	r2, #4
 800211e:	d006      	beq.n	800212e <__aeabi_dmul+0x15a>
 8002120:	4642      	mov	r2, r8
 8002122:	1d11      	adds	r1, r2, #4
 8002124:	4541      	cmp	r1, r8
 8002126:	4192      	sbcs	r2, r2
 8002128:	4688      	mov	r8, r1
 800212a:	4252      	negs	r2, r2
 800212c:	4492      	add	sl, r2
 800212e:	4652      	mov	r2, sl
 8002130:	01d2      	lsls	r2, r2, #7
 8002132:	d506      	bpl.n	8002142 <__aeabi_dmul+0x16e>
 8002134:	4652      	mov	r2, sl
 8002136:	4b80      	ldr	r3, [pc, #512]	@ (8002338 <__aeabi_dmul+0x364>)
 8002138:	401a      	ands	r2, r3
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	4692      	mov	sl, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	18c3      	adds	r3, r0, r3
 8002142:	4a7e      	ldr	r2, [pc, #504]	@ (800233c <__aeabi_dmul+0x368>)
 8002144:	4293      	cmp	r3, r2
 8002146:	dd00      	ble.n	800214a <__aeabi_dmul+0x176>
 8002148:	e18f      	b.n	800246a <__aeabi_dmul+0x496>
 800214a:	4642      	mov	r2, r8
 800214c:	08d1      	lsrs	r1, r2, #3
 800214e:	4652      	mov	r2, sl
 8002150:	0752      	lsls	r2, r2, #29
 8002152:	430a      	orrs	r2, r1
 8002154:	4651      	mov	r1, sl
 8002156:	055b      	lsls	r3, r3, #21
 8002158:	024c      	lsls	r4, r1, #9
 800215a:	0b24      	lsrs	r4, r4, #12
 800215c:	0d5b      	lsrs	r3, r3, #21
 800215e:	e797      	b.n	8002090 <__aeabi_dmul+0xbc>
 8002160:	4b73      	ldr	r3, [pc, #460]	@ (8002330 <__aeabi_dmul+0x35c>)
 8002162:	4326      	orrs	r6, r4
 8002164:	469c      	mov	ip, r3
 8002166:	44e3      	add	fp, ip
 8002168:	2e00      	cmp	r6, #0
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0x19a>
 800216c:	e16f      	b.n	800244e <__aeabi_dmul+0x47a>
 800216e:	2303      	movs	r3, #3
 8002170:	4649      	mov	r1, r9
 8002172:	431d      	orrs	r5, r3
 8002174:	9b00      	ldr	r3, [sp, #0]
 8002176:	4059      	eors	r1, r3
 8002178:	b2cb      	uxtb	r3, r1
 800217a:	9303      	str	r3, [sp, #12]
 800217c:	2d0a      	cmp	r5, #10
 800217e:	dd00      	ble.n	8002182 <__aeabi_dmul+0x1ae>
 8002180:	e133      	b.n	80023ea <__aeabi_dmul+0x416>
 8002182:	2301      	movs	r3, #1
 8002184:	40ab      	lsls	r3, r5
 8002186:	001d      	movs	r5, r3
 8002188:	2303      	movs	r3, #3
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	2288      	movs	r2, #136	@ 0x88
 800218e:	422a      	tst	r2, r5
 8002190:	d197      	bne.n	80020c2 <__aeabi_dmul+0xee>
 8002192:	4642      	mov	r2, r8
 8002194:	4643      	mov	r3, r8
 8002196:	0412      	lsls	r2, r2, #16
 8002198:	0c12      	lsrs	r2, r2, #16
 800219a:	0016      	movs	r6, r2
 800219c:	9801      	ldr	r0, [sp, #4]
 800219e:	0c1d      	lsrs	r5, r3, #16
 80021a0:	0c03      	lsrs	r3, r0, #16
 80021a2:	0400      	lsls	r0, r0, #16
 80021a4:	0c00      	lsrs	r0, r0, #16
 80021a6:	4346      	muls	r6, r0
 80021a8:	46b4      	mov	ip, r6
 80021aa:	001e      	movs	r6, r3
 80021ac:	436e      	muls	r6, r5
 80021ae:	9600      	str	r6, [sp, #0]
 80021b0:	0016      	movs	r6, r2
 80021b2:	0007      	movs	r7, r0
 80021b4:	435e      	muls	r6, r3
 80021b6:	4661      	mov	r1, ip
 80021b8:	46b0      	mov	r8, r6
 80021ba:	436f      	muls	r7, r5
 80021bc:	0c0e      	lsrs	r6, r1, #16
 80021be:	44b8      	add	r8, r7
 80021c0:	4446      	add	r6, r8
 80021c2:	42b7      	cmp	r7, r6
 80021c4:	d905      	bls.n	80021d2 <__aeabi_dmul+0x1fe>
 80021c6:	2180      	movs	r1, #128	@ 0x80
 80021c8:	0249      	lsls	r1, r1, #9
 80021ca:	4688      	mov	r8, r1
 80021cc:	9f00      	ldr	r7, [sp, #0]
 80021ce:	4447      	add	r7, r8
 80021d0:	9700      	str	r7, [sp, #0]
 80021d2:	4661      	mov	r1, ip
 80021d4:	0409      	lsls	r1, r1, #16
 80021d6:	0c09      	lsrs	r1, r1, #16
 80021d8:	0c37      	lsrs	r7, r6, #16
 80021da:	0436      	lsls	r6, r6, #16
 80021dc:	468c      	mov	ip, r1
 80021de:	0031      	movs	r1, r6
 80021e0:	4461      	add	r1, ip
 80021e2:	9101      	str	r1, [sp, #4]
 80021e4:	0011      	movs	r1, r2
 80021e6:	0c26      	lsrs	r6, r4, #16
 80021e8:	0424      	lsls	r4, r4, #16
 80021ea:	0c24      	lsrs	r4, r4, #16
 80021ec:	4361      	muls	r1, r4
 80021ee:	468c      	mov	ip, r1
 80021f0:	0021      	movs	r1, r4
 80021f2:	4369      	muls	r1, r5
 80021f4:	4689      	mov	r9, r1
 80021f6:	4661      	mov	r1, ip
 80021f8:	0c09      	lsrs	r1, r1, #16
 80021fa:	4688      	mov	r8, r1
 80021fc:	4372      	muls	r2, r6
 80021fe:	444a      	add	r2, r9
 8002200:	4442      	add	r2, r8
 8002202:	4375      	muls	r5, r6
 8002204:	4591      	cmp	r9, r2
 8002206:	d903      	bls.n	8002210 <__aeabi_dmul+0x23c>
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	0249      	lsls	r1, r1, #9
 800220c:	4688      	mov	r8, r1
 800220e:	4445      	add	r5, r8
 8002210:	0c11      	lsrs	r1, r2, #16
 8002212:	4688      	mov	r8, r1
 8002214:	4661      	mov	r1, ip
 8002216:	0409      	lsls	r1, r1, #16
 8002218:	0c09      	lsrs	r1, r1, #16
 800221a:	468c      	mov	ip, r1
 800221c:	0412      	lsls	r2, r2, #16
 800221e:	4462      	add	r2, ip
 8002220:	18b9      	adds	r1, r7, r2
 8002222:	9102      	str	r1, [sp, #8]
 8002224:	4651      	mov	r1, sl
 8002226:	0c09      	lsrs	r1, r1, #16
 8002228:	468c      	mov	ip, r1
 800222a:	4651      	mov	r1, sl
 800222c:	040f      	lsls	r7, r1, #16
 800222e:	0c3f      	lsrs	r7, r7, #16
 8002230:	0039      	movs	r1, r7
 8002232:	4341      	muls	r1, r0
 8002234:	4445      	add	r5, r8
 8002236:	4688      	mov	r8, r1
 8002238:	4661      	mov	r1, ip
 800223a:	4341      	muls	r1, r0
 800223c:	468a      	mov	sl, r1
 800223e:	4641      	mov	r1, r8
 8002240:	4660      	mov	r0, ip
 8002242:	0c09      	lsrs	r1, r1, #16
 8002244:	4689      	mov	r9, r1
 8002246:	4358      	muls	r0, r3
 8002248:	437b      	muls	r3, r7
 800224a:	4453      	add	r3, sl
 800224c:	444b      	add	r3, r9
 800224e:	459a      	cmp	sl, r3
 8002250:	d903      	bls.n	800225a <__aeabi_dmul+0x286>
 8002252:	2180      	movs	r1, #128	@ 0x80
 8002254:	0249      	lsls	r1, r1, #9
 8002256:	4689      	mov	r9, r1
 8002258:	4448      	add	r0, r9
 800225a:	0c19      	lsrs	r1, r3, #16
 800225c:	4689      	mov	r9, r1
 800225e:	4641      	mov	r1, r8
 8002260:	0409      	lsls	r1, r1, #16
 8002262:	0c09      	lsrs	r1, r1, #16
 8002264:	4688      	mov	r8, r1
 8002266:	0039      	movs	r1, r7
 8002268:	4361      	muls	r1, r4
 800226a:	041b      	lsls	r3, r3, #16
 800226c:	4443      	add	r3, r8
 800226e:	4688      	mov	r8, r1
 8002270:	4661      	mov	r1, ip
 8002272:	434c      	muls	r4, r1
 8002274:	4371      	muls	r1, r6
 8002276:	468c      	mov	ip, r1
 8002278:	4641      	mov	r1, r8
 800227a:	4377      	muls	r7, r6
 800227c:	0c0e      	lsrs	r6, r1, #16
 800227e:	193f      	adds	r7, r7, r4
 8002280:	19f6      	adds	r6, r6, r7
 8002282:	4448      	add	r0, r9
 8002284:	42b4      	cmp	r4, r6
 8002286:	d903      	bls.n	8002290 <__aeabi_dmul+0x2bc>
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	0249      	lsls	r1, r1, #9
 800228c:	4689      	mov	r9, r1
 800228e:	44cc      	add	ip, r9
 8002290:	9902      	ldr	r1, [sp, #8]
 8002292:	9f00      	ldr	r7, [sp, #0]
 8002294:	4689      	mov	r9, r1
 8002296:	0431      	lsls	r1, r6, #16
 8002298:	444f      	add	r7, r9
 800229a:	4689      	mov	r9, r1
 800229c:	4641      	mov	r1, r8
 800229e:	4297      	cmp	r7, r2
 80022a0:	4192      	sbcs	r2, r2
 80022a2:	040c      	lsls	r4, r1, #16
 80022a4:	0c24      	lsrs	r4, r4, #16
 80022a6:	444c      	add	r4, r9
 80022a8:	18ff      	adds	r7, r7, r3
 80022aa:	4252      	negs	r2, r2
 80022ac:	1964      	adds	r4, r4, r5
 80022ae:	18a1      	adds	r1, r4, r2
 80022b0:	429f      	cmp	r7, r3
 80022b2:	419b      	sbcs	r3, r3
 80022b4:	4688      	mov	r8, r1
 80022b6:	4682      	mov	sl, r0
 80022b8:	425b      	negs	r3, r3
 80022ba:	4699      	mov	r9, r3
 80022bc:	4590      	cmp	r8, r2
 80022be:	4192      	sbcs	r2, r2
 80022c0:	42ac      	cmp	r4, r5
 80022c2:	41a4      	sbcs	r4, r4
 80022c4:	44c2      	add	sl, r8
 80022c6:	44d1      	add	r9, sl
 80022c8:	4252      	negs	r2, r2
 80022ca:	4264      	negs	r4, r4
 80022cc:	4314      	orrs	r4, r2
 80022ce:	4599      	cmp	r9, r3
 80022d0:	419b      	sbcs	r3, r3
 80022d2:	4582      	cmp	sl, r0
 80022d4:	4192      	sbcs	r2, r2
 80022d6:	425b      	negs	r3, r3
 80022d8:	4252      	negs	r2, r2
 80022da:	4313      	orrs	r3, r2
 80022dc:	464a      	mov	r2, r9
 80022de:	0c36      	lsrs	r6, r6, #16
 80022e0:	19a4      	adds	r4, r4, r6
 80022e2:	18e3      	adds	r3, r4, r3
 80022e4:	4463      	add	r3, ip
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	0dd2      	lsrs	r2, r2, #23
 80022ea:	431a      	orrs	r2, r3
 80022ec:	9901      	ldr	r1, [sp, #4]
 80022ee:	4692      	mov	sl, r2
 80022f0:	027a      	lsls	r2, r7, #9
 80022f2:	430a      	orrs	r2, r1
 80022f4:	1e50      	subs	r0, r2, #1
 80022f6:	4182      	sbcs	r2, r0
 80022f8:	0dff      	lsrs	r7, r7, #23
 80022fa:	4317      	orrs	r7, r2
 80022fc:	464a      	mov	r2, r9
 80022fe:	0252      	lsls	r2, r2, #9
 8002300:	4317      	orrs	r7, r2
 8002302:	46b8      	mov	r8, r7
 8002304:	01db      	lsls	r3, r3, #7
 8002306:	d500      	bpl.n	800230a <__aeabi_dmul+0x336>
 8002308:	e6ed      	b.n	80020e6 <__aeabi_dmul+0x112>
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <__aeabi_dmul+0x36c>)
 800230c:	9a03      	ldr	r2, [sp, #12]
 800230e:	445b      	add	r3, fp
 8002310:	4691      	mov	r9, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	dc00      	bgt.n	8002318 <__aeabi_dmul+0x344>
 8002316:	e0ac      	b.n	8002472 <__aeabi_dmul+0x49e>
 8002318:	003a      	movs	r2, r7
 800231a:	0752      	lsls	r2, r2, #29
 800231c:	d100      	bne.n	8002320 <__aeabi_dmul+0x34c>
 800231e:	e710      	b.n	8002142 <__aeabi_dmul+0x16e>
 8002320:	220f      	movs	r2, #15
 8002322:	4658      	mov	r0, fp
 8002324:	403a      	ands	r2, r7
 8002326:	2a04      	cmp	r2, #4
 8002328:	d000      	beq.n	800232c <__aeabi_dmul+0x358>
 800232a:	e6f9      	b.n	8002120 <__aeabi_dmul+0x14c>
 800232c:	e709      	b.n	8002142 <__aeabi_dmul+0x16e>
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff
 8002334:	fffffc01 	.word	0xfffffc01
 8002338:	feffffff 	.word	0xfeffffff
 800233c:	000007fe 	.word	0x000007fe
 8002340:	000003ff 	.word	0x000003ff
 8002344:	0022      	movs	r2, r4
 8002346:	4332      	orrs	r2, r6
 8002348:	d06f      	beq.n	800242a <__aeabi_dmul+0x456>
 800234a:	2c00      	cmp	r4, #0
 800234c:	d100      	bne.n	8002350 <__aeabi_dmul+0x37c>
 800234e:	e0c2      	b.n	80024d6 <__aeabi_dmul+0x502>
 8002350:	0020      	movs	r0, r4
 8002352:	f000 fea9 	bl	80030a8 <__clzsi2>
 8002356:	0002      	movs	r2, r0
 8002358:	0003      	movs	r3, r0
 800235a:	3a0b      	subs	r2, #11
 800235c:	201d      	movs	r0, #29
 800235e:	1a82      	subs	r2, r0, r2
 8002360:	0030      	movs	r0, r6
 8002362:	0019      	movs	r1, r3
 8002364:	40d0      	lsrs	r0, r2
 8002366:	3908      	subs	r1, #8
 8002368:	408c      	lsls	r4, r1
 800236a:	0002      	movs	r2, r0
 800236c:	4322      	orrs	r2, r4
 800236e:	0034      	movs	r4, r6
 8002370:	408c      	lsls	r4, r1
 8002372:	4659      	mov	r1, fp
 8002374:	1acb      	subs	r3, r1, r3
 8002376:	4986      	ldr	r1, [pc, #536]	@ (8002590 <__aeabi_dmul+0x5bc>)
 8002378:	468b      	mov	fp, r1
 800237a:	449b      	add	fp, r3
 800237c:	2d0a      	cmp	r5, #10
 800237e:	dd00      	ble.n	8002382 <__aeabi_dmul+0x3ae>
 8002380:	e6a4      	b.n	80020cc <__aeabi_dmul+0xf8>
 8002382:	4649      	mov	r1, r9
 8002384:	9b00      	ldr	r3, [sp, #0]
 8002386:	9401      	str	r4, [sp, #4]
 8002388:	4059      	eors	r1, r3
 800238a:	b2cb      	uxtb	r3, r1
 800238c:	0014      	movs	r4, r2
 800238e:	2000      	movs	r0, #0
 8002390:	9303      	str	r3, [sp, #12]
 8002392:	2d02      	cmp	r5, #2
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0x3c4>
 8002396:	e667      	b.n	8002068 <__aeabi_dmul+0x94>
 8002398:	e6fb      	b.n	8002192 <__aeabi_dmul+0x1be>
 800239a:	4653      	mov	r3, sl
 800239c:	4303      	orrs	r3, r0
 800239e:	4698      	mov	r8, r3
 80023a0:	d03c      	beq.n	800241c <__aeabi_dmul+0x448>
 80023a2:	4653      	mov	r3, sl
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d100      	bne.n	80023aa <__aeabi_dmul+0x3d6>
 80023a8:	e0a3      	b.n	80024f2 <__aeabi_dmul+0x51e>
 80023aa:	4650      	mov	r0, sl
 80023ac:	f000 fe7c 	bl	80030a8 <__clzsi2>
 80023b0:	230b      	movs	r3, #11
 80023b2:	425b      	negs	r3, r3
 80023b4:	469c      	mov	ip, r3
 80023b6:	0002      	movs	r2, r0
 80023b8:	4484      	add	ip, r0
 80023ba:	0011      	movs	r1, r2
 80023bc:	4650      	mov	r0, sl
 80023be:	3908      	subs	r1, #8
 80023c0:	4088      	lsls	r0, r1
 80023c2:	231d      	movs	r3, #29
 80023c4:	4680      	mov	r8, r0
 80023c6:	4660      	mov	r0, ip
 80023c8:	1a1b      	subs	r3, r3, r0
 80023ca:	0020      	movs	r0, r4
 80023cc:	40d8      	lsrs	r0, r3
 80023ce:	0003      	movs	r3, r0
 80023d0:	4640      	mov	r0, r8
 80023d2:	4303      	orrs	r3, r0
 80023d4:	469a      	mov	sl, r3
 80023d6:	0023      	movs	r3, r4
 80023d8:	408b      	lsls	r3, r1
 80023da:	4698      	mov	r8, r3
 80023dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002590 <__aeabi_dmul+0x5bc>)
 80023de:	2500      	movs	r5, #0
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	469b      	mov	fp, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	e61a      	b.n	8002020 <__aeabi_dmul+0x4c>
 80023ea:	2d0f      	cmp	r5, #15
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dmul+0x41c>
 80023ee:	e0c9      	b.n	8002584 <__aeabi_dmul+0x5b0>
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	4652      	mov	r2, sl
 80023f4:	031b      	lsls	r3, r3, #12
 80023f6:	421a      	tst	r2, r3
 80023f8:	d002      	beq.n	8002400 <__aeabi_dmul+0x42c>
 80023fa:	421c      	tst	r4, r3
 80023fc:	d100      	bne.n	8002400 <__aeabi_dmul+0x42c>
 80023fe:	e092      	b.n	8002526 <__aeabi_dmul+0x552>
 8002400:	2480      	movs	r4, #128	@ 0x80
 8002402:	4653      	mov	r3, sl
 8002404:	0324      	lsls	r4, r4, #12
 8002406:	431c      	orrs	r4, r3
 8002408:	0324      	lsls	r4, r4, #12
 800240a:	4642      	mov	r2, r8
 800240c:	0b24      	lsrs	r4, r4, #12
 800240e:	e63e      	b.n	800208e <__aeabi_dmul+0xba>
 8002410:	469b      	mov	fp, r3
 8002412:	2303      	movs	r3, #3
 8002414:	4680      	mov	r8, r0
 8002416:	250c      	movs	r5, #12
 8002418:	9302      	str	r3, [sp, #8]
 800241a:	e601      	b.n	8002020 <__aeabi_dmul+0x4c>
 800241c:	2300      	movs	r3, #0
 800241e:	469a      	mov	sl, r3
 8002420:	469b      	mov	fp, r3
 8002422:	3301      	adds	r3, #1
 8002424:	2504      	movs	r5, #4
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	e5fa      	b.n	8002020 <__aeabi_dmul+0x4c>
 800242a:	2101      	movs	r1, #1
 800242c:	430d      	orrs	r5, r1
 800242e:	2d0a      	cmp	r5, #10
 8002430:	dd00      	ble.n	8002434 <__aeabi_dmul+0x460>
 8002432:	e64b      	b.n	80020cc <__aeabi_dmul+0xf8>
 8002434:	4649      	mov	r1, r9
 8002436:	9800      	ldr	r0, [sp, #0]
 8002438:	4041      	eors	r1, r0
 800243a:	b2c9      	uxtb	r1, r1
 800243c:	9103      	str	r1, [sp, #12]
 800243e:	2d02      	cmp	r5, #2
 8002440:	dc00      	bgt.n	8002444 <__aeabi_dmul+0x470>
 8002442:	e096      	b.n	8002572 <__aeabi_dmul+0x59e>
 8002444:	2300      	movs	r3, #0
 8002446:	2400      	movs	r4, #0
 8002448:	2001      	movs	r0, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	e60c      	b.n	8002068 <__aeabi_dmul+0x94>
 800244e:	4649      	mov	r1, r9
 8002450:	2302      	movs	r3, #2
 8002452:	9a00      	ldr	r2, [sp, #0]
 8002454:	432b      	orrs	r3, r5
 8002456:	4051      	eors	r1, r2
 8002458:	b2ca      	uxtb	r2, r1
 800245a:	9203      	str	r2, [sp, #12]
 800245c:	2b0a      	cmp	r3, #10
 800245e:	dd00      	ble.n	8002462 <__aeabi_dmul+0x48e>
 8002460:	e634      	b.n	80020cc <__aeabi_dmul+0xf8>
 8002462:	2d00      	cmp	r5, #0
 8002464:	d157      	bne.n	8002516 <__aeabi_dmul+0x542>
 8002466:	9b03      	ldr	r3, [sp, #12]
 8002468:	4699      	mov	r9, r3
 800246a:	2400      	movs	r4, #0
 800246c:	2200      	movs	r2, #0
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <__aeabi_dmul+0x5c0>)
 8002470:	e60e      	b.n	8002090 <__aeabi_dmul+0xbc>
 8002472:	4658      	mov	r0, fp
 8002474:	2101      	movs	r1, #1
 8002476:	1ac9      	subs	r1, r1, r3
 8002478:	2938      	cmp	r1, #56	@ 0x38
 800247a:	dd00      	ble.n	800247e <__aeabi_dmul+0x4aa>
 800247c:	e62f      	b.n	80020de <__aeabi_dmul+0x10a>
 800247e:	291f      	cmp	r1, #31
 8002480:	dd56      	ble.n	8002530 <__aeabi_dmul+0x55c>
 8002482:	221f      	movs	r2, #31
 8002484:	4654      	mov	r4, sl
 8002486:	4252      	negs	r2, r2
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	40dc      	lsrs	r4, r3
 800248c:	2920      	cmp	r1, #32
 800248e:	d007      	beq.n	80024a0 <__aeabi_dmul+0x4cc>
 8002490:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <__aeabi_dmul+0x5c4>)
 8002492:	4642      	mov	r2, r8
 8002494:	469c      	mov	ip, r3
 8002496:	4653      	mov	r3, sl
 8002498:	4460      	add	r0, ip
 800249a:	4083      	lsls	r3, r0
 800249c:	431a      	orrs	r2, r3
 800249e:	4690      	mov	r8, r2
 80024a0:	4642      	mov	r2, r8
 80024a2:	2107      	movs	r1, #7
 80024a4:	1e53      	subs	r3, r2, #1
 80024a6:	419a      	sbcs	r2, r3
 80024a8:	000b      	movs	r3, r1
 80024aa:	4322      	orrs	r2, r4
 80024ac:	4013      	ands	r3, r2
 80024ae:	2400      	movs	r4, #0
 80024b0:	4211      	tst	r1, r2
 80024b2:	d009      	beq.n	80024c8 <__aeabi_dmul+0x4f4>
 80024b4:	230f      	movs	r3, #15
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d05d      	beq.n	8002578 <__aeabi_dmul+0x5a4>
 80024bc:	1d11      	adds	r1, r2, #4
 80024be:	4291      	cmp	r1, r2
 80024c0:	419b      	sbcs	r3, r3
 80024c2:	000a      	movs	r2, r1
 80024c4:	425b      	negs	r3, r3
 80024c6:	075b      	lsls	r3, r3, #29
 80024c8:	08d2      	lsrs	r2, r2, #3
 80024ca:	431a      	orrs	r2, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	e5df      	b.n	8002090 <__aeabi_dmul+0xbc>
 80024d0:	9b03      	ldr	r3, [sp, #12]
 80024d2:	4699      	mov	r9, r3
 80024d4:	e5fa      	b.n	80020cc <__aeabi_dmul+0xf8>
 80024d6:	9801      	ldr	r0, [sp, #4]
 80024d8:	f000 fde6 	bl	80030a8 <__clzsi2>
 80024dc:	0002      	movs	r2, r0
 80024de:	0003      	movs	r3, r0
 80024e0:	3215      	adds	r2, #21
 80024e2:	3320      	adds	r3, #32
 80024e4:	2a1c      	cmp	r2, #28
 80024e6:	dc00      	bgt.n	80024ea <__aeabi_dmul+0x516>
 80024e8:	e738      	b.n	800235c <__aeabi_dmul+0x388>
 80024ea:	9a01      	ldr	r2, [sp, #4]
 80024ec:	3808      	subs	r0, #8
 80024ee:	4082      	lsls	r2, r0
 80024f0:	e73f      	b.n	8002372 <__aeabi_dmul+0x39e>
 80024f2:	f000 fdd9 	bl	80030a8 <__clzsi2>
 80024f6:	2315      	movs	r3, #21
 80024f8:	469c      	mov	ip, r3
 80024fa:	4484      	add	ip, r0
 80024fc:	0002      	movs	r2, r0
 80024fe:	4663      	mov	r3, ip
 8002500:	3220      	adds	r2, #32
 8002502:	2b1c      	cmp	r3, #28
 8002504:	dc00      	bgt.n	8002508 <__aeabi_dmul+0x534>
 8002506:	e758      	b.n	80023ba <__aeabi_dmul+0x3e6>
 8002508:	2300      	movs	r3, #0
 800250a:	4698      	mov	r8, r3
 800250c:	0023      	movs	r3, r4
 800250e:	3808      	subs	r0, #8
 8002510:	4083      	lsls	r3, r0
 8002512:	469a      	mov	sl, r3
 8002514:	e762      	b.n	80023dc <__aeabi_dmul+0x408>
 8002516:	001d      	movs	r5, r3
 8002518:	2300      	movs	r3, #0
 800251a:	2400      	movs	r4, #0
 800251c:	2002      	movs	r0, #2
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	e5a2      	b.n	8002068 <__aeabi_dmul+0x94>
 8002522:	9002      	str	r0, [sp, #8]
 8002524:	e632      	b.n	800218c <__aeabi_dmul+0x1b8>
 8002526:	431c      	orrs	r4, r3
 8002528:	9b00      	ldr	r3, [sp, #0]
 800252a:	9a01      	ldr	r2, [sp, #4]
 800252c:	4699      	mov	r9, r3
 800252e:	e5ae      	b.n	800208e <__aeabi_dmul+0xba>
 8002530:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <__aeabi_dmul+0x5c8>)
 8002532:	4652      	mov	r2, sl
 8002534:	18c3      	adds	r3, r0, r3
 8002536:	4640      	mov	r0, r8
 8002538:	409a      	lsls	r2, r3
 800253a:	40c8      	lsrs	r0, r1
 800253c:	4302      	orrs	r2, r0
 800253e:	4640      	mov	r0, r8
 8002540:	4098      	lsls	r0, r3
 8002542:	0003      	movs	r3, r0
 8002544:	1e58      	subs	r0, r3, #1
 8002546:	4183      	sbcs	r3, r0
 8002548:	4654      	mov	r4, sl
 800254a:	431a      	orrs	r2, r3
 800254c:	40cc      	lsrs	r4, r1
 800254e:	0753      	lsls	r3, r2, #29
 8002550:	d009      	beq.n	8002566 <__aeabi_dmul+0x592>
 8002552:	230f      	movs	r3, #15
 8002554:	4013      	ands	r3, r2
 8002556:	2b04      	cmp	r3, #4
 8002558:	d005      	beq.n	8002566 <__aeabi_dmul+0x592>
 800255a:	1d13      	adds	r3, r2, #4
 800255c:	4293      	cmp	r3, r2
 800255e:	4192      	sbcs	r2, r2
 8002560:	4252      	negs	r2, r2
 8002562:	18a4      	adds	r4, r4, r2
 8002564:	001a      	movs	r2, r3
 8002566:	0223      	lsls	r3, r4, #8
 8002568:	d508      	bpl.n	800257c <__aeabi_dmul+0x5a8>
 800256a:	2301      	movs	r3, #1
 800256c:	2400      	movs	r4, #0
 800256e:	2200      	movs	r2, #0
 8002570:	e58e      	b.n	8002090 <__aeabi_dmul+0xbc>
 8002572:	4689      	mov	r9, r1
 8002574:	2400      	movs	r4, #0
 8002576:	e58b      	b.n	8002090 <__aeabi_dmul+0xbc>
 8002578:	2300      	movs	r3, #0
 800257a:	e7a5      	b.n	80024c8 <__aeabi_dmul+0x4f4>
 800257c:	0763      	lsls	r3, r4, #29
 800257e:	0264      	lsls	r4, r4, #9
 8002580:	0b24      	lsrs	r4, r4, #12
 8002582:	e7a1      	b.n	80024c8 <__aeabi_dmul+0x4f4>
 8002584:	9b00      	ldr	r3, [sp, #0]
 8002586:	46a2      	mov	sl, r4
 8002588:	4699      	mov	r9, r3
 800258a:	9b01      	ldr	r3, [sp, #4]
 800258c:	4698      	mov	r8, r3
 800258e:	e737      	b.n	8002400 <__aeabi_dmul+0x42c>
 8002590:	fffffc0d 	.word	0xfffffc0d
 8002594:	000007ff 	.word	0x000007ff
 8002598:	0000043e 	.word	0x0000043e
 800259c:	0000041e 	.word	0x0000041e

080025a0 <__aeabi_dsub>:
 80025a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a2:	4657      	mov	r7, sl
 80025a4:	464e      	mov	r6, r9
 80025a6:	4645      	mov	r5, r8
 80025a8:	46de      	mov	lr, fp
 80025aa:	b5e0      	push	{r5, r6, r7, lr}
 80025ac:	b083      	sub	sp, #12
 80025ae:	9000      	str	r0, [sp, #0]
 80025b0:	9101      	str	r1, [sp, #4]
 80025b2:	030c      	lsls	r4, r1, #12
 80025b4:	004d      	lsls	r5, r1, #1
 80025b6:	0fce      	lsrs	r6, r1, #31
 80025b8:	0a61      	lsrs	r1, r4, #9
 80025ba:	9c00      	ldr	r4, [sp, #0]
 80025bc:	005f      	lsls	r7, r3, #1
 80025be:	0f64      	lsrs	r4, r4, #29
 80025c0:	430c      	orrs	r4, r1
 80025c2:	9900      	ldr	r1, [sp, #0]
 80025c4:	9200      	str	r2, [sp, #0]
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	00c8      	lsls	r0, r1, #3
 80025ca:	0319      	lsls	r1, r3, #12
 80025cc:	0d7b      	lsrs	r3, r7, #21
 80025ce:	4699      	mov	r9, r3
 80025d0:	9b01      	ldr	r3, [sp, #4]
 80025d2:	4fcc      	ldr	r7, [pc, #816]	@ (8002904 <__aeabi_dsub+0x364>)
 80025d4:	0fdb      	lsrs	r3, r3, #31
 80025d6:	469c      	mov	ip, r3
 80025d8:	0a4b      	lsrs	r3, r1, #9
 80025da:	9900      	ldr	r1, [sp, #0]
 80025dc:	4680      	mov	r8, r0
 80025de:	0f49      	lsrs	r1, r1, #29
 80025e0:	4319      	orrs	r1, r3
 80025e2:	9b00      	ldr	r3, [sp, #0]
 80025e4:	468b      	mov	fp, r1
 80025e6:	00da      	lsls	r2, r3, #3
 80025e8:	4692      	mov	sl, r2
 80025ea:	0d6d      	lsrs	r5, r5, #21
 80025ec:	45b9      	cmp	r9, r7
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dsub+0x52>
 80025f0:	e0bf      	b.n	8002772 <__aeabi_dsub+0x1d2>
 80025f2:	2301      	movs	r3, #1
 80025f4:	4661      	mov	r1, ip
 80025f6:	4059      	eors	r1, r3
 80025f8:	464b      	mov	r3, r9
 80025fa:	468c      	mov	ip, r1
 80025fc:	1aeb      	subs	r3, r5, r3
 80025fe:	428e      	cmp	r6, r1
 8002600:	d075      	beq.n	80026ee <__aeabi_dsub+0x14e>
 8002602:	2b00      	cmp	r3, #0
 8002604:	dc00      	bgt.n	8002608 <__aeabi_dsub+0x68>
 8002606:	e2a3      	b.n	8002b50 <__aeabi_dsub+0x5b0>
 8002608:	4649      	mov	r1, r9
 800260a:	2900      	cmp	r1, #0
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x70>
 800260e:	e0ce      	b.n	80027ae <__aeabi_dsub+0x20e>
 8002610:	42bd      	cmp	r5, r7
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x76>
 8002614:	e200      	b.n	8002a18 <__aeabi_dsub+0x478>
 8002616:	2701      	movs	r7, #1
 8002618:	2b38      	cmp	r3, #56	@ 0x38
 800261a:	dc19      	bgt.n	8002650 <__aeabi_dsub+0xb0>
 800261c:	2780      	movs	r7, #128	@ 0x80
 800261e:	4659      	mov	r1, fp
 8002620:	043f      	lsls	r7, r7, #16
 8002622:	4339      	orrs	r1, r7
 8002624:	468b      	mov	fp, r1
 8002626:	2b1f      	cmp	r3, #31
 8002628:	dd00      	ble.n	800262c <__aeabi_dsub+0x8c>
 800262a:	e1fa      	b.n	8002a22 <__aeabi_dsub+0x482>
 800262c:	2720      	movs	r7, #32
 800262e:	1af9      	subs	r1, r7, r3
 8002630:	468c      	mov	ip, r1
 8002632:	4659      	mov	r1, fp
 8002634:	4667      	mov	r7, ip
 8002636:	40b9      	lsls	r1, r7
 8002638:	000f      	movs	r7, r1
 800263a:	0011      	movs	r1, r2
 800263c:	40d9      	lsrs	r1, r3
 800263e:	430f      	orrs	r7, r1
 8002640:	4661      	mov	r1, ip
 8002642:	408a      	lsls	r2, r1
 8002644:	1e51      	subs	r1, r2, #1
 8002646:	418a      	sbcs	r2, r1
 8002648:	4659      	mov	r1, fp
 800264a:	40d9      	lsrs	r1, r3
 800264c:	4317      	orrs	r7, r2
 800264e:	1a64      	subs	r4, r4, r1
 8002650:	1bc7      	subs	r7, r0, r7
 8002652:	42b8      	cmp	r0, r7
 8002654:	4180      	sbcs	r0, r0
 8002656:	4240      	negs	r0, r0
 8002658:	1a24      	subs	r4, r4, r0
 800265a:	0223      	lsls	r3, r4, #8
 800265c:	d400      	bmi.n	8002660 <__aeabi_dsub+0xc0>
 800265e:	e140      	b.n	80028e2 <__aeabi_dsub+0x342>
 8002660:	0264      	lsls	r4, r4, #9
 8002662:	0a64      	lsrs	r4, r4, #9
 8002664:	2c00      	cmp	r4, #0
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0xca>
 8002668:	e154      	b.n	8002914 <__aeabi_dsub+0x374>
 800266a:	0020      	movs	r0, r4
 800266c:	f000 fd1c 	bl	80030a8 <__clzsi2>
 8002670:	0003      	movs	r3, r0
 8002672:	3b08      	subs	r3, #8
 8002674:	2120      	movs	r1, #32
 8002676:	0038      	movs	r0, r7
 8002678:	1aca      	subs	r2, r1, r3
 800267a:	40d0      	lsrs	r0, r2
 800267c:	409c      	lsls	r4, r3
 800267e:	0002      	movs	r2, r0
 8002680:	409f      	lsls	r7, r3
 8002682:	4322      	orrs	r2, r4
 8002684:	429d      	cmp	r5, r3
 8002686:	dd00      	ble.n	800268a <__aeabi_dsub+0xea>
 8002688:	e1a6      	b.n	80029d8 <__aeabi_dsub+0x438>
 800268a:	1b58      	subs	r0, r3, r5
 800268c:	3001      	adds	r0, #1
 800268e:	1a09      	subs	r1, r1, r0
 8002690:	003c      	movs	r4, r7
 8002692:	408f      	lsls	r7, r1
 8002694:	40c4      	lsrs	r4, r0
 8002696:	1e7b      	subs	r3, r7, #1
 8002698:	419f      	sbcs	r7, r3
 800269a:	0013      	movs	r3, r2
 800269c:	408b      	lsls	r3, r1
 800269e:	4327      	orrs	r7, r4
 80026a0:	431f      	orrs	r7, r3
 80026a2:	40c2      	lsrs	r2, r0
 80026a4:	003b      	movs	r3, r7
 80026a6:	0014      	movs	r4, r2
 80026a8:	2500      	movs	r5, #0
 80026aa:	4313      	orrs	r3, r2
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x110>
 80026ae:	e1f7      	b.n	8002aa0 <__aeabi_dsub+0x500>
 80026b0:	077b      	lsls	r3, r7, #29
 80026b2:	d100      	bne.n	80026b6 <__aeabi_dsub+0x116>
 80026b4:	e377      	b.n	8002da6 <__aeabi_dsub+0x806>
 80026b6:	230f      	movs	r3, #15
 80026b8:	0038      	movs	r0, r7
 80026ba:	403b      	ands	r3, r7
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d004      	beq.n	80026ca <__aeabi_dsub+0x12a>
 80026c0:	1d38      	adds	r0, r7, #4
 80026c2:	42b8      	cmp	r0, r7
 80026c4:	41bf      	sbcs	r7, r7
 80026c6:	427f      	negs	r7, r7
 80026c8:	19e4      	adds	r4, r4, r7
 80026ca:	0223      	lsls	r3, r4, #8
 80026cc:	d400      	bmi.n	80026d0 <__aeabi_dsub+0x130>
 80026ce:	e368      	b.n	8002da2 <__aeabi_dsub+0x802>
 80026d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002904 <__aeabi_dsub+0x364>)
 80026d2:	3501      	adds	r5, #1
 80026d4:	429d      	cmp	r5, r3
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x13a>
 80026d8:	e0f4      	b.n	80028c4 <__aeabi_dsub+0x324>
 80026da:	4b8b      	ldr	r3, [pc, #556]	@ (8002908 <__aeabi_dsub+0x368>)
 80026dc:	056d      	lsls	r5, r5, #21
 80026de:	401c      	ands	r4, r3
 80026e0:	0d6d      	lsrs	r5, r5, #21
 80026e2:	0767      	lsls	r7, r4, #29
 80026e4:	08c0      	lsrs	r0, r0, #3
 80026e6:	0264      	lsls	r4, r4, #9
 80026e8:	4307      	orrs	r7, r0
 80026ea:	0b24      	lsrs	r4, r4, #12
 80026ec:	e0ec      	b.n	80028c8 <__aeabi_dsub+0x328>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dsub+0x154>
 80026f2:	e329      	b.n	8002d48 <__aeabi_dsub+0x7a8>
 80026f4:	4649      	mov	r1, r9
 80026f6:	2900      	cmp	r1, #0
 80026f8:	d000      	beq.n	80026fc <__aeabi_dsub+0x15c>
 80026fa:	e0d6      	b.n	80028aa <__aeabi_dsub+0x30a>
 80026fc:	4659      	mov	r1, fp
 80026fe:	4311      	orrs	r1, r2
 8002700:	d100      	bne.n	8002704 <__aeabi_dsub+0x164>
 8002702:	e12e      	b.n	8002962 <__aeabi_dsub+0x3c2>
 8002704:	1e59      	subs	r1, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d100      	bne.n	800270c <__aeabi_dsub+0x16c>
 800270a:	e1e6      	b.n	8002ada <__aeabi_dsub+0x53a>
 800270c:	42bb      	cmp	r3, r7
 800270e:	d100      	bne.n	8002712 <__aeabi_dsub+0x172>
 8002710:	e182      	b.n	8002a18 <__aeabi_dsub+0x478>
 8002712:	2701      	movs	r7, #1
 8002714:	000b      	movs	r3, r1
 8002716:	2938      	cmp	r1, #56	@ 0x38
 8002718:	dc14      	bgt.n	8002744 <__aeabi_dsub+0x1a4>
 800271a:	2b1f      	cmp	r3, #31
 800271c:	dd00      	ble.n	8002720 <__aeabi_dsub+0x180>
 800271e:	e23c      	b.n	8002b9a <__aeabi_dsub+0x5fa>
 8002720:	2720      	movs	r7, #32
 8002722:	1af9      	subs	r1, r7, r3
 8002724:	468c      	mov	ip, r1
 8002726:	4659      	mov	r1, fp
 8002728:	4667      	mov	r7, ip
 800272a:	40b9      	lsls	r1, r7
 800272c:	000f      	movs	r7, r1
 800272e:	0011      	movs	r1, r2
 8002730:	40d9      	lsrs	r1, r3
 8002732:	430f      	orrs	r7, r1
 8002734:	4661      	mov	r1, ip
 8002736:	408a      	lsls	r2, r1
 8002738:	1e51      	subs	r1, r2, #1
 800273a:	418a      	sbcs	r2, r1
 800273c:	4659      	mov	r1, fp
 800273e:	40d9      	lsrs	r1, r3
 8002740:	4317      	orrs	r7, r2
 8002742:	1864      	adds	r4, r4, r1
 8002744:	183f      	adds	r7, r7, r0
 8002746:	4287      	cmp	r7, r0
 8002748:	4180      	sbcs	r0, r0
 800274a:	4240      	negs	r0, r0
 800274c:	1824      	adds	r4, r4, r0
 800274e:	0223      	lsls	r3, r4, #8
 8002750:	d400      	bmi.n	8002754 <__aeabi_dsub+0x1b4>
 8002752:	e0c6      	b.n	80028e2 <__aeabi_dsub+0x342>
 8002754:	4b6b      	ldr	r3, [pc, #428]	@ (8002904 <__aeabi_dsub+0x364>)
 8002756:	3501      	adds	r5, #1
 8002758:	429d      	cmp	r5, r3
 800275a:	d100      	bne.n	800275e <__aeabi_dsub+0x1be>
 800275c:	e0b2      	b.n	80028c4 <__aeabi_dsub+0x324>
 800275e:	2101      	movs	r1, #1
 8002760:	4b69      	ldr	r3, [pc, #420]	@ (8002908 <__aeabi_dsub+0x368>)
 8002762:	087a      	lsrs	r2, r7, #1
 8002764:	401c      	ands	r4, r3
 8002766:	4039      	ands	r1, r7
 8002768:	430a      	orrs	r2, r1
 800276a:	07e7      	lsls	r7, r4, #31
 800276c:	4317      	orrs	r7, r2
 800276e:	0864      	lsrs	r4, r4, #1
 8002770:	e79e      	b.n	80026b0 <__aeabi_dsub+0x110>
 8002772:	4b66      	ldr	r3, [pc, #408]	@ (800290c <__aeabi_dsub+0x36c>)
 8002774:	4311      	orrs	r1, r2
 8002776:	468a      	mov	sl, r1
 8002778:	18eb      	adds	r3, r5, r3
 800277a:	2900      	cmp	r1, #0
 800277c:	d028      	beq.n	80027d0 <__aeabi_dsub+0x230>
 800277e:	4566      	cmp	r6, ip
 8002780:	d02c      	beq.n	80027dc <__aeabi_dsub+0x23c>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d05b      	beq.n	800283e <__aeabi_dsub+0x29e>
 8002786:	2d00      	cmp	r5, #0
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x1ec>
 800278a:	e12c      	b.n	80029e6 <__aeabi_dsub+0x446>
 800278c:	465b      	mov	r3, fp
 800278e:	4666      	mov	r6, ip
 8002790:	075f      	lsls	r7, r3, #29
 8002792:	08d2      	lsrs	r2, r2, #3
 8002794:	4317      	orrs	r7, r2
 8002796:	08dd      	lsrs	r5, r3, #3
 8002798:	003b      	movs	r3, r7
 800279a:	432b      	orrs	r3, r5
 800279c:	d100      	bne.n	80027a0 <__aeabi_dsub+0x200>
 800279e:	e0e2      	b.n	8002966 <__aeabi_dsub+0x3c6>
 80027a0:	2480      	movs	r4, #128	@ 0x80
 80027a2:	0324      	lsls	r4, r4, #12
 80027a4:	432c      	orrs	r4, r5
 80027a6:	0324      	lsls	r4, r4, #12
 80027a8:	4d56      	ldr	r5, [pc, #344]	@ (8002904 <__aeabi_dsub+0x364>)
 80027aa:	0b24      	lsrs	r4, r4, #12
 80027ac:	e08c      	b.n	80028c8 <__aeabi_dsub+0x328>
 80027ae:	4659      	mov	r1, fp
 80027b0:	4311      	orrs	r1, r2
 80027b2:	d100      	bne.n	80027b6 <__aeabi_dsub+0x216>
 80027b4:	e0d5      	b.n	8002962 <__aeabi_dsub+0x3c2>
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d100      	bne.n	80027be <__aeabi_dsub+0x21e>
 80027bc:	e1b9      	b.n	8002b32 <__aeabi_dsub+0x592>
 80027be:	42bb      	cmp	r3, r7
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x224>
 80027c2:	e1b1      	b.n	8002b28 <__aeabi_dsub+0x588>
 80027c4:	2701      	movs	r7, #1
 80027c6:	000b      	movs	r3, r1
 80027c8:	2938      	cmp	r1, #56	@ 0x38
 80027ca:	dd00      	ble.n	80027ce <__aeabi_dsub+0x22e>
 80027cc:	e740      	b.n	8002650 <__aeabi_dsub+0xb0>
 80027ce:	e72a      	b.n	8002626 <__aeabi_dsub+0x86>
 80027d0:	4661      	mov	r1, ip
 80027d2:	2701      	movs	r7, #1
 80027d4:	4079      	eors	r1, r7
 80027d6:	468c      	mov	ip, r1
 80027d8:	4566      	cmp	r6, ip
 80027da:	d1d2      	bne.n	8002782 <__aeabi_dsub+0x1e2>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x242>
 80027e0:	e0c5      	b.n	800296e <__aeabi_dsub+0x3ce>
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	d000      	beq.n	80027e8 <__aeabi_dsub+0x248>
 80027e6:	e155      	b.n	8002a94 <__aeabi_dsub+0x4f4>
 80027e8:	464b      	mov	r3, r9
 80027ea:	0025      	movs	r5, r4
 80027ec:	4305      	orrs	r5, r0
 80027ee:	d100      	bne.n	80027f2 <__aeabi_dsub+0x252>
 80027f0:	e212      	b.n	8002c18 <__aeabi_dsub+0x678>
 80027f2:	1e59      	subs	r1, r3, #1
 80027f4:	468c      	mov	ip, r1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x25c>
 80027fa:	e249      	b.n	8002c90 <__aeabi_dsub+0x6f0>
 80027fc:	4d41      	ldr	r5, [pc, #260]	@ (8002904 <__aeabi_dsub+0x364>)
 80027fe:	42ab      	cmp	r3, r5
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x264>
 8002802:	e28f      	b.n	8002d24 <__aeabi_dsub+0x784>
 8002804:	2701      	movs	r7, #1
 8002806:	2938      	cmp	r1, #56	@ 0x38
 8002808:	dc11      	bgt.n	800282e <__aeabi_dsub+0x28e>
 800280a:	4663      	mov	r3, ip
 800280c:	2b1f      	cmp	r3, #31
 800280e:	dd00      	ble.n	8002812 <__aeabi_dsub+0x272>
 8002810:	e25b      	b.n	8002cca <__aeabi_dsub+0x72a>
 8002812:	4661      	mov	r1, ip
 8002814:	2320      	movs	r3, #32
 8002816:	0027      	movs	r7, r4
 8002818:	1a5b      	subs	r3, r3, r1
 800281a:	0005      	movs	r5, r0
 800281c:	4098      	lsls	r0, r3
 800281e:	409f      	lsls	r7, r3
 8002820:	40cd      	lsrs	r5, r1
 8002822:	1e43      	subs	r3, r0, #1
 8002824:	4198      	sbcs	r0, r3
 8002826:	40cc      	lsrs	r4, r1
 8002828:	432f      	orrs	r7, r5
 800282a:	4307      	orrs	r7, r0
 800282c:	44a3      	add	fp, r4
 800282e:	18bf      	adds	r7, r7, r2
 8002830:	4297      	cmp	r7, r2
 8002832:	4192      	sbcs	r2, r2
 8002834:	4252      	negs	r2, r2
 8002836:	445a      	add	r2, fp
 8002838:	0014      	movs	r4, r2
 800283a:	464d      	mov	r5, r9
 800283c:	e787      	b.n	800274e <__aeabi_dsub+0x1ae>
 800283e:	4f34      	ldr	r7, [pc, #208]	@ (8002910 <__aeabi_dsub+0x370>)
 8002840:	1c6b      	adds	r3, r5, #1
 8002842:	423b      	tst	r3, r7
 8002844:	d000      	beq.n	8002848 <__aeabi_dsub+0x2a8>
 8002846:	e0b6      	b.n	80029b6 <__aeabi_dsub+0x416>
 8002848:	4659      	mov	r1, fp
 800284a:	0023      	movs	r3, r4
 800284c:	4311      	orrs	r1, r2
 800284e:	000f      	movs	r7, r1
 8002850:	4303      	orrs	r3, r0
 8002852:	2d00      	cmp	r5, #0
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x2b8>
 8002856:	e126      	b.n	8002aa6 <__aeabi_dsub+0x506>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d100      	bne.n	800285e <__aeabi_dsub+0x2be>
 800285c:	e1c0      	b.n	8002be0 <__aeabi_dsub+0x640>
 800285e:	2900      	cmp	r1, #0
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x2c4>
 8002862:	e0a1      	b.n	80029a8 <__aeabi_dsub+0x408>
 8002864:	1a83      	subs	r3, r0, r2
 8002866:	4698      	mov	r8, r3
 8002868:	465b      	mov	r3, fp
 800286a:	4540      	cmp	r0, r8
 800286c:	41ad      	sbcs	r5, r5
 800286e:	1ae3      	subs	r3, r4, r3
 8002870:	426d      	negs	r5, r5
 8002872:	1b5b      	subs	r3, r3, r5
 8002874:	2580      	movs	r5, #128	@ 0x80
 8002876:	042d      	lsls	r5, r5, #16
 8002878:	422b      	tst	r3, r5
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x2de>
 800287c:	e14b      	b.n	8002b16 <__aeabi_dsub+0x576>
 800287e:	465b      	mov	r3, fp
 8002880:	1a10      	subs	r0, r2, r0
 8002882:	4282      	cmp	r2, r0
 8002884:	4192      	sbcs	r2, r2
 8002886:	1b1c      	subs	r4, r3, r4
 8002888:	0007      	movs	r7, r0
 800288a:	2601      	movs	r6, #1
 800288c:	4663      	mov	r3, ip
 800288e:	4252      	negs	r2, r2
 8002890:	1aa4      	subs	r4, r4, r2
 8002892:	4327      	orrs	r7, r4
 8002894:	401e      	ands	r6, r3
 8002896:	2f00      	cmp	r7, #0
 8002898:	d100      	bne.n	800289c <__aeabi_dsub+0x2fc>
 800289a:	e142      	b.n	8002b22 <__aeabi_dsub+0x582>
 800289c:	422c      	tst	r4, r5
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x302>
 80028a0:	e26d      	b.n	8002d7e <__aeabi_dsub+0x7de>
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <__aeabi_dsub+0x368>)
 80028a4:	2501      	movs	r5, #1
 80028a6:	401c      	ands	r4, r3
 80028a8:	e71b      	b.n	80026e2 <__aeabi_dsub+0x142>
 80028aa:	42bd      	cmp	r5, r7
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x310>
 80028ae:	e13b      	b.n	8002b28 <__aeabi_dsub+0x588>
 80028b0:	2701      	movs	r7, #1
 80028b2:	2b38      	cmp	r3, #56	@ 0x38
 80028b4:	dd00      	ble.n	80028b8 <__aeabi_dsub+0x318>
 80028b6:	e745      	b.n	8002744 <__aeabi_dsub+0x1a4>
 80028b8:	2780      	movs	r7, #128	@ 0x80
 80028ba:	4659      	mov	r1, fp
 80028bc:	043f      	lsls	r7, r7, #16
 80028be:	4339      	orrs	r1, r7
 80028c0:	468b      	mov	fp, r1
 80028c2:	e72a      	b.n	800271a <__aeabi_dsub+0x17a>
 80028c4:	2400      	movs	r4, #0
 80028c6:	2700      	movs	r7, #0
 80028c8:	052d      	lsls	r5, r5, #20
 80028ca:	4325      	orrs	r5, r4
 80028cc:	07f6      	lsls	r6, r6, #31
 80028ce:	4335      	orrs	r5, r6
 80028d0:	0038      	movs	r0, r7
 80028d2:	0029      	movs	r1, r5
 80028d4:	b003      	add	sp, #12
 80028d6:	bcf0      	pop	{r4, r5, r6, r7}
 80028d8:	46bb      	mov	fp, r7
 80028da:	46b2      	mov	sl, r6
 80028dc:	46a9      	mov	r9, r5
 80028de:	46a0      	mov	r8, r4
 80028e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e2:	077b      	lsls	r3, r7, #29
 80028e4:	d004      	beq.n	80028f0 <__aeabi_dsub+0x350>
 80028e6:	230f      	movs	r3, #15
 80028e8:	403b      	ands	r3, r7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d000      	beq.n	80028f0 <__aeabi_dsub+0x350>
 80028ee:	e6e7      	b.n	80026c0 <__aeabi_dsub+0x120>
 80028f0:	002b      	movs	r3, r5
 80028f2:	08f8      	lsrs	r0, r7, #3
 80028f4:	4a03      	ldr	r2, [pc, #12]	@ (8002904 <__aeabi_dsub+0x364>)
 80028f6:	0767      	lsls	r7, r4, #29
 80028f8:	4307      	orrs	r7, r0
 80028fa:	08e5      	lsrs	r5, r4, #3
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d100      	bne.n	8002902 <__aeabi_dsub+0x362>
 8002900:	e74a      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002902:	e0a5      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002904:	000007ff 	.word	0x000007ff
 8002908:	ff7fffff 	.word	0xff7fffff
 800290c:	fffff801 	.word	0xfffff801
 8002910:	000007fe 	.word	0x000007fe
 8002914:	0038      	movs	r0, r7
 8002916:	f000 fbc7 	bl	80030a8 <__clzsi2>
 800291a:	0003      	movs	r3, r0
 800291c:	3318      	adds	r3, #24
 800291e:	2b1f      	cmp	r3, #31
 8002920:	dc00      	bgt.n	8002924 <__aeabi_dsub+0x384>
 8002922:	e6a7      	b.n	8002674 <__aeabi_dsub+0xd4>
 8002924:	003a      	movs	r2, r7
 8002926:	3808      	subs	r0, #8
 8002928:	4082      	lsls	r2, r0
 800292a:	429d      	cmp	r5, r3
 800292c:	dd00      	ble.n	8002930 <__aeabi_dsub+0x390>
 800292e:	e08a      	b.n	8002a46 <__aeabi_dsub+0x4a6>
 8002930:	1b5b      	subs	r3, r3, r5
 8002932:	1c58      	adds	r0, r3, #1
 8002934:	281f      	cmp	r0, #31
 8002936:	dc00      	bgt.n	800293a <__aeabi_dsub+0x39a>
 8002938:	e1d8      	b.n	8002cec <__aeabi_dsub+0x74c>
 800293a:	0017      	movs	r7, r2
 800293c:	3b1f      	subs	r3, #31
 800293e:	40df      	lsrs	r7, r3
 8002940:	2820      	cmp	r0, #32
 8002942:	d005      	beq.n	8002950 <__aeabi_dsub+0x3b0>
 8002944:	2340      	movs	r3, #64	@ 0x40
 8002946:	1a1b      	subs	r3, r3, r0
 8002948:	409a      	lsls	r2, r3
 800294a:	1e53      	subs	r3, r2, #1
 800294c:	419a      	sbcs	r2, r3
 800294e:	4317      	orrs	r7, r2
 8002950:	2500      	movs	r5, #0
 8002952:	2f00      	cmp	r7, #0
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x3b8>
 8002956:	e0e5      	b.n	8002b24 <__aeabi_dsub+0x584>
 8002958:	077b      	lsls	r3, r7, #29
 800295a:	d000      	beq.n	800295e <__aeabi_dsub+0x3be>
 800295c:	e6ab      	b.n	80026b6 <__aeabi_dsub+0x116>
 800295e:	002c      	movs	r4, r5
 8002960:	e7c6      	b.n	80028f0 <__aeabi_dsub+0x350>
 8002962:	08c0      	lsrs	r0, r0, #3
 8002964:	e7c6      	b.n	80028f4 <__aeabi_dsub+0x354>
 8002966:	2700      	movs	r7, #0
 8002968:	2400      	movs	r4, #0
 800296a:	4dd1      	ldr	r5, [pc, #836]	@ (8002cb0 <__aeabi_dsub+0x710>)
 800296c:	e7ac      	b.n	80028c8 <__aeabi_dsub+0x328>
 800296e:	4fd1      	ldr	r7, [pc, #836]	@ (8002cb4 <__aeabi_dsub+0x714>)
 8002970:	1c6b      	adds	r3, r5, #1
 8002972:	423b      	tst	r3, r7
 8002974:	d171      	bne.n	8002a5a <__aeabi_dsub+0x4ba>
 8002976:	0023      	movs	r3, r4
 8002978:	4303      	orrs	r3, r0
 800297a:	2d00      	cmp	r5, #0
 800297c:	d000      	beq.n	8002980 <__aeabi_dsub+0x3e0>
 800297e:	e14e      	b.n	8002c1e <__aeabi_dsub+0x67e>
 8002980:	4657      	mov	r7, sl
 8002982:	2b00      	cmp	r3, #0
 8002984:	d100      	bne.n	8002988 <__aeabi_dsub+0x3e8>
 8002986:	e1b5      	b.n	8002cf4 <__aeabi_dsub+0x754>
 8002988:	2f00      	cmp	r7, #0
 800298a:	d00d      	beq.n	80029a8 <__aeabi_dsub+0x408>
 800298c:	1883      	adds	r3, r0, r2
 800298e:	4283      	cmp	r3, r0
 8002990:	4180      	sbcs	r0, r0
 8002992:	445c      	add	r4, fp
 8002994:	4240      	negs	r0, r0
 8002996:	1824      	adds	r4, r4, r0
 8002998:	0222      	lsls	r2, r4, #8
 800299a:	d500      	bpl.n	800299e <__aeabi_dsub+0x3fe>
 800299c:	e1c8      	b.n	8002d30 <__aeabi_dsub+0x790>
 800299e:	001f      	movs	r7, r3
 80029a0:	4698      	mov	r8, r3
 80029a2:	4327      	orrs	r7, r4
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x408>
 80029a6:	e0bc      	b.n	8002b22 <__aeabi_dsub+0x582>
 80029a8:	4643      	mov	r3, r8
 80029aa:	0767      	lsls	r7, r4, #29
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	431f      	orrs	r7, r3
 80029b0:	08e5      	lsrs	r5, r4, #3
 80029b2:	2300      	movs	r3, #0
 80029b4:	e04c      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 80029b6:	1a83      	subs	r3, r0, r2
 80029b8:	4698      	mov	r8, r3
 80029ba:	465b      	mov	r3, fp
 80029bc:	4540      	cmp	r0, r8
 80029be:	41bf      	sbcs	r7, r7
 80029c0:	1ae3      	subs	r3, r4, r3
 80029c2:	427f      	negs	r7, r7
 80029c4:	1bdb      	subs	r3, r3, r7
 80029c6:	021f      	lsls	r7, r3, #8
 80029c8:	d47c      	bmi.n	8002ac4 <__aeabi_dsub+0x524>
 80029ca:	4647      	mov	r7, r8
 80029cc:	431f      	orrs	r7, r3
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x432>
 80029d0:	e0a6      	b.n	8002b20 <__aeabi_dsub+0x580>
 80029d2:	001c      	movs	r4, r3
 80029d4:	4647      	mov	r7, r8
 80029d6:	e645      	b.n	8002664 <__aeabi_dsub+0xc4>
 80029d8:	4cb7      	ldr	r4, [pc, #732]	@ (8002cb8 <__aeabi_dsub+0x718>)
 80029da:	1aed      	subs	r5, r5, r3
 80029dc:	4014      	ands	r4, r2
 80029de:	077b      	lsls	r3, r7, #29
 80029e0:	d000      	beq.n	80029e4 <__aeabi_dsub+0x444>
 80029e2:	e780      	b.n	80028e6 <__aeabi_dsub+0x346>
 80029e4:	e784      	b.n	80028f0 <__aeabi_dsub+0x350>
 80029e6:	464b      	mov	r3, r9
 80029e8:	0025      	movs	r5, r4
 80029ea:	4305      	orrs	r5, r0
 80029ec:	d066      	beq.n	8002abc <__aeabi_dsub+0x51c>
 80029ee:	1e5f      	subs	r7, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d100      	bne.n	80029f6 <__aeabi_dsub+0x456>
 80029f4:	e0fc      	b.n	8002bf0 <__aeabi_dsub+0x650>
 80029f6:	4dae      	ldr	r5, [pc, #696]	@ (8002cb0 <__aeabi_dsub+0x710>)
 80029f8:	42ab      	cmp	r3, r5
 80029fa:	d100      	bne.n	80029fe <__aeabi_dsub+0x45e>
 80029fc:	e15e      	b.n	8002cbc <__aeabi_dsub+0x71c>
 80029fe:	4666      	mov	r6, ip
 8002a00:	2f38      	cmp	r7, #56	@ 0x38
 8002a02:	dc00      	bgt.n	8002a06 <__aeabi_dsub+0x466>
 8002a04:	e0b4      	b.n	8002b70 <__aeabi_dsub+0x5d0>
 8002a06:	2001      	movs	r0, #1
 8002a08:	1a17      	subs	r7, r2, r0
 8002a0a:	42ba      	cmp	r2, r7
 8002a0c:	4192      	sbcs	r2, r2
 8002a0e:	465b      	mov	r3, fp
 8002a10:	4252      	negs	r2, r2
 8002a12:	464d      	mov	r5, r9
 8002a14:	1a9c      	subs	r4, r3, r2
 8002a16:	e620      	b.n	800265a <__aeabi_dsub+0xba>
 8002a18:	0767      	lsls	r7, r4, #29
 8002a1a:	08c0      	lsrs	r0, r0, #3
 8002a1c:	4307      	orrs	r7, r0
 8002a1e:	08e5      	lsrs	r5, r4, #3
 8002a20:	e6ba      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002a22:	001f      	movs	r7, r3
 8002a24:	4659      	mov	r1, fp
 8002a26:	3f20      	subs	r7, #32
 8002a28:	40f9      	lsrs	r1, r7
 8002a2a:	000f      	movs	r7, r1
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d005      	beq.n	8002a3c <__aeabi_dsub+0x49c>
 8002a30:	2140      	movs	r1, #64	@ 0x40
 8002a32:	1acb      	subs	r3, r1, r3
 8002a34:	4659      	mov	r1, fp
 8002a36:	4099      	lsls	r1, r3
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	4653      	mov	r3, sl
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	4193      	sbcs	r3, r2
 8002a42:	431f      	orrs	r7, r3
 8002a44:	e604      	b.n	8002650 <__aeabi_dsub+0xb0>
 8002a46:	1aeb      	subs	r3, r5, r3
 8002a48:	4d9b      	ldr	r5, [pc, #620]	@ (8002cb8 <__aeabi_dsub+0x718>)
 8002a4a:	4015      	ands	r5, r2
 8002a4c:	076f      	lsls	r7, r5, #29
 8002a4e:	08ed      	lsrs	r5, r5, #3
 8002a50:	032c      	lsls	r4, r5, #12
 8002a52:	055d      	lsls	r5, r3, #21
 8002a54:	0b24      	lsrs	r4, r4, #12
 8002a56:	0d6d      	lsrs	r5, r5, #21
 8002a58:	e736      	b.n	80028c8 <__aeabi_dsub+0x328>
 8002a5a:	4d95      	ldr	r5, [pc, #596]	@ (8002cb0 <__aeabi_dsub+0x710>)
 8002a5c:	42ab      	cmp	r3, r5
 8002a5e:	d100      	bne.n	8002a62 <__aeabi_dsub+0x4c2>
 8002a60:	e0d6      	b.n	8002c10 <__aeabi_dsub+0x670>
 8002a62:	1882      	adds	r2, r0, r2
 8002a64:	0021      	movs	r1, r4
 8002a66:	4282      	cmp	r2, r0
 8002a68:	4180      	sbcs	r0, r0
 8002a6a:	4459      	add	r1, fp
 8002a6c:	4240      	negs	r0, r0
 8002a6e:	1808      	adds	r0, r1, r0
 8002a70:	07c7      	lsls	r7, r0, #31
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	4317      	orrs	r7, r2
 8002a76:	0844      	lsrs	r4, r0, #1
 8002a78:	0752      	lsls	r2, r2, #29
 8002a7a:	d400      	bmi.n	8002a7e <__aeabi_dsub+0x4de>
 8002a7c:	e185      	b.n	8002d8a <__aeabi_dsub+0x7ea>
 8002a7e:	220f      	movs	r2, #15
 8002a80:	001d      	movs	r5, r3
 8002a82:	403a      	ands	r2, r7
 8002a84:	2a04      	cmp	r2, #4
 8002a86:	d000      	beq.n	8002a8a <__aeabi_dsub+0x4ea>
 8002a88:	e61a      	b.n	80026c0 <__aeabi_dsub+0x120>
 8002a8a:	08ff      	lsrs	r7, r7, #3
 8002a8c:	0764      	lsls	r4, r4, #29
 8002a8e:	4327      	orrs	r7, r4
 8002a90:	0905      	lsrs	r5, r0, #4
 8002a92:	e7dd      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002a94:	465b      	mov	r3, fp
 8002a96:	08d2      	lsrs	r2, r2, #3
 8002a98:	075f      	lsls	r7, r3, #29
 8002a9a:	4317      	orrs	r7, r2
 8002a9c:	08dd      	lsrs	r5, r3, #3
 8002a9e:	e67b      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002aa0:	2700      	movs	r7, #0
 8002aa2:	2400      	movs	r4, #0
 8002aa4:	e710      	b.n	80028c8 <__aeabi_dsub+0x328>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d000      	beq.n	8002aac <__aeabi_dsub+0x50c>
 8002aaa:	e0d6      	b.n	8002c5a <__aeabi_dsub+0x6ba>
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d000      	beq.n	8002ab2 <__aeabi_dsub+0x512>
 8002ab0:	e12f      	b.n	8002d12 <__aeabi_dsub+0x772>
 8002ab2:	2480      	movs	r4, #128	@ 0x80
 8002ab4:	2600      	movs	r6, #0
 8002ab6:	4d7e      	ldr	r5, [pc, #504]	@ (8002cb0 <__aeabi_dsub+0x710>)
 8002ab8:	0324      	lsls	r4, r4, #12
 8002aba:	e705      	b.n	80028c8 <__aeabi_dsub+0x328>
 8002abc:	4666      	mov	r6, ip
 8002abe:	465c      	mov	r4, fp
 8002ac0:	08d0      	lsrs	r0, r2, #3
 8002ac2:	e717      	b.n	80028f4 <__aeabi_dsub+0x354>
 8002ac4:	465b      	mov	r3, fp
 8002ac6:	1a17      	subs	r7, r2, r0
 8002ac8:	42ba      	cmp	r2, r7
 8002aca:	4192      	sbcs	r2, r2
 8002acc:	1b1c      	subs	r4, r3, r4
 8002ace:	2601      	movs	r6, #1
 8002ad0:	4663      	mov	r3, ip
 8002ad2:	4252      	negs	r2, r2
 8002ad4:	1aa4      	subs	r4, r4, r2
 8002ad6:	401e      	ands	r6, r3
 8002ad8:	e5c4      	b.n	8002664 <__aeabi_dsub+0xc4>
 8002ada:	1883      	adds	r3, r0, r2
 8002adc:	4283      	cmp	r3, r0
 8002ade:	4180      	sbcs	r0, r0
 8002ae0:	445c      	add	r4, fp
 8002ae2:	4240      	negs	r0, r0
 8002ae4:	1825      	adds	r5, r4, r0
 8002ae6:	022a      	lsls	r2, r5, #8
 8002ae8:	d400      	bmi.n	8002aec <__aeabi_dsub+0x54c>
 8002aea:	e0da      	b.n	8002ca2 <__aeabi_dsub+0x702>
 8002aec:	4a72      	ldr	r2, [pc, #456]	@ (8002cb8 <__aeabi_dsub+0x718>)
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	4015      	ands	r5, r2
 8002af2:	07ea      	lsls	r2, r5, #31
 8002af4:	431a      	orrs	r2, r3
 8002af6:	0869      	lsrs	r1, r5, #1
 8002af8:	075b      	lsls	r3, r3, #29
 8002afa:	d400      	bmi.n	8002afe <__aeabi_dsub+0x55e>
 8002afc:	e14a      	b.n	8002d94 <__aeabi_dsub+0x7f4>
 8002afe:	230f      	movs	r3, #15
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x568>
 8002b06:	e0fc      	b.n	8002d02 <__aeabi_dsub+0x762>
 8002b08:	1d17      	adds	r7, r2, #4
 8002b0a:	4297      	cmp	r7, r2
 8002b0c:	41a4      	sbcs	r4, r4
 8002b0e:	4264      	negs	r4, r4
 8002b10:	2502      	movs	r5, #2
 8002b12:	1864      	adds	r4, r4, r1
 8002b14:	e6ec      	b.n	80028f0 <__aeabi_dsub+0x350>
 8002b16:	4647      	mov	r7, r8
 8002b18:	001c      	movs	r4, r3
 8002b1a:	431f      	orrs	r7, r3
 8002b1c:	d000      	beq.n	8002b20 <__aeabi_dsub+0x580>
 8002b1e:	e743      	b.n	80029a8 <__aeabi_dsub+0x408>
 8002b20:	2600      	movs	r6, #0
 8002b22:	2500      	movs	r5, #0
 8002b24:	2400      	movs	r4, #0
 8002b26:	e6cf      	b.n	80028c8 <__aeabi_dsub+0x328>
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	0767      	lsls	r7, r4, #29
 8002b2c:	4307      	orrs	r7, r0
 8002b2e:	08e5      	lsrs	r5, r4, #3
 8002b30:	e632      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002b32:	1a87      	subs	r7, r0, r2
 8002b34:	465b      	mov	r3, fp
 8002b36:	42b8      	cmp	r0, r7
 8002b38:	4180      	sbcs	r0, r0
 8002b3a:	1ae4      	subs	r4, r4, r3
 8002b3c:	4240      	negs	r0, r0
 8002b3e:	1a24      	subs	r4, r4, r0
 8002b40:	0223      	lsls	r3, r4, #8
 8002b42:	d428      	bmi.n	8002b96 <__aeabi_dsub+0x5f6>
 8002b44:	0763      	lsls	r3, r4, #29
 8002b46:	08ff      	lsrs	r7, r7, #3
 8002b48:	431f      	orrs	r7, r3
 8002b4a:	08e5      	lsrs	r5, r4, #3
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e77f      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d100      	bne.n	8002b56 <__aeabi_dsub+0x5b6>
 8002b54:	e673      	b.n	800283e <__aeabi_dsub+0x29e>
 8002b56:	464b      	mov	r3, r9
 8002b58:	1b5f      	subs	r7, r3, r5
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2d00      	cmp	r5, #0
 8002b5e:	d100      	bne.n	8002b62 <__aeabi_dsub+0x5c2>
 8002b60:	e742      	b.n	80029e8 <__aeabi_dsub+0x448>
 8002b62:	2f38      	cmp	r7, #56	@ 0x38
 8002b64:	dd00      	ble.n	8002b68 <__aeabi_dsub+0x5c8>
 8002b66:	e0ec      	b.n	8002d42 <__aeabi_dsub+0x7a2>
 8002b68:	2380      	movs	r3, #128	@ 0x80
 8002b6a:	000e      	movs	r6, r1
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431c      	orrs	r4, r3
 8002b70:	2f1f      	cmp	r7, #31
 8002b72:	dc25      	bgt.n	8002bc0 <__aeabi_dsub+0x620>
 8002b74:	2520      	movs	r5, #32
 8002b76:	0023      	movs	r3, r4
 8002b78:	1bed      	subs	r5, r5, r7
 8002b7a:	0001      	movs	r1, r0
 8002b7c:	40a8      	lsls	r0, r5
 8002b7e:	40ab      	lsls	r3, r5
 8002b80:	40f9      	lsrs	r1, r7
 8002b82:	1e45      	subs	r5, r0, #1
 8002b84:	41a8      	sbcs	r0, r5
 8002b86:	430b      	orrs	r3, r1
 8002b88:	40fc      	lsrs	r4, r7
 8002b8a:	4318      	orrs	r0, r3
 8002b8c:	465b      	mov	r3, fp
 8002b8e:	1b1b      	subs	r3, r3, r4
 8002b90:	469b      	mov	fp, r3
 8002b92:	e739      	b.n	8002a08 <__aeabi_dsub+0x468>
 8002b94:	4666      	mov	r6, ip
 8002b96:	2501      	movs	r5, #1
 8002b98:	e562      	b.n	8002660 <__aeabi_dsub+0xc0>
 8002b9a:	001f      	movs	r7, r3
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	3f20      	subs	r7, #32
 8002ba0:	40f9      	lsrs	r1, r7
 8002ba2:	468c      	mov	ip, r1
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d005      	beq.n	8002bb4 <__aeabi_dsub+0x614>
 8002ba8:	2740      	movs	r7, #64	@ 0x40
 8002baa:	4659      	mov	r1, fp
 8002bac:	1afb      	subs	r3, r7, r3
 8002bae:	4099      	lsls	r1, r3
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	4692      	mov	sl, r2
 8002bb4:	4657      	mov	r7, sl
 8002bb6:	1e7b      	subs	r3, r7, #1
 8002bb8:	419f      	sbcs	r7, r3
 8002bba:	4663      	mov	r3, ip
 8002bbc:	431f      	orrs	r7, r3
 8002bbe:	e5c1      	b.n	8002744 <__aeabi_dsub+0x1a4>
 8002bc0:	003b      	movs	r3, r7
 8002bc2:	0025      	movs	r5, r4
 8002bc4:	3b20      	subs	r3, #32
 8002bc6:	40dd      	lsrs	r5, r3
 8002bc8:	2f20      	cmp	r7, #32
 8002bca:	d004      	beq.n	8002bd6 <__aeabi_dsub+0x636>
 8002bcc:	2340      	movs	r3, #64	@ 0x40
 8002bce:	1bdb      	subs	r3, r3, r7
 8002bd0:	409c      	lsls	r4, r3
 8002bd2:	4320      	orrs	r0, r4
 8002bd4:	4680      	mov	r8, r0
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	1e43      	subs	r3, r0, #1
 8002bda:	4198      	sbcs	r0, r3
 8002bdc:	4328      	orrs	r0, r5
 8002bde:	e713      	b.n	8002a08 <__aeabi_dsub+0x468>
 8002be0:	2900      	cmp	r1, #0
 8002be2:	d09d      	beq.n	8002b20 <__aeabi_dsub+0x580>
 8002be4:	2601      	movs	r6, #1
 8002be6:	4663      	mov	r3, ip
 8002be8:	465c      	mov	r4, fp
 8002bea:	4690      	mov	r8, r2
 8002bec:	401e      	ands	r6, r3
 8002bee:	e6db      	b.n	80029a8 <__aeabi_dsub+0x408>
 8002bf0:	1a17      	subs	r7, r2, r0
 8002bf2:	465b      	mov	r3, fp
 8002bf4:	42ba      	cmp	r2, r7
 8002bf6:	4192      	sbcs	r2, r2
 8002bf8:	1b1c      	subs	r4, r3, r4
 8002bfa:	4252      	negs	r2, r2
 8002bfc:	1aa4      	subs	r4, r4, r2
 8002bfe:	0223      	lsls	r3, r4, #8
 8002c00:	d4c8      	bmi.n	8002b94 <__aeabi_dsub+0x5f4>
 8002c02:	0763      	lsls	r3, r4, #29
 8002c04:	08ff      	lsrs	r7, r7, #3
 8002c06:	431f      	orrs	r7, r3
 8002c08:	4666      	mov	r6, ip
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	08e5      	lsrs	r5, r4, #3
 8002c0e:	e71f      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002c10:	001d      	movs	r5, r3
 8002c12:	2400      	movs	r4, #0
 8002c14:	2700      	movs	r7, #0
 8002c16:	e657      	b.n	80028c8 <__aeabi_dsub+0x328>
 8002c18:	465c      	mov	r4, fp
 8002c1a:	08d0      	lsrs	r0, r2, #3
 8002c1c:	e66a      	b.n	80028f4 <__aeabi_dsub+0x354>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d100      	bne.n	8002c24 <__aeabi_dsub+0x684>
 8002c22:	e737      	b.n	8002a94 <__aeabi_dsub+0x4f4>
 8002c24:	4653      	mov	r3, sl
 8002c26:	08c0      	lsrs	r0, r0, #3
 8002c28:	0767      	lsls	r7, r4, #29
 8002c2a:	4307      	orrs	r7, r0
 8002c2c:	08e5      	lsrs	r5, r4, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d100      	bne.n	8002c34 <__aeabi_dsub+0x694>
 8002c32:	e5b1      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	421d      	tst	r5, r3
 8002c3a:	d008      	beq.n	8002c4e <__aeabi_dsub+0x6ae>
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	08c8      	lsrs	r0, r1, #3
 8002c40:	4218      	tst	r0, r3
 8002c42:	d104      	bne.n	8002c4e <__aeabi_dsub+0x6ae>
 8002c44:	08d2      	lsrs	r2, r2, #3
 8002c46:	0749      	lsls	r1, r1, #29
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	0017      	movs	r7, r2
 8002c4c:	0005      	movs	r5, r0
 8002c4e:	0f7b      	lsrs	r3, r7, #29
 8002c50:	00ff      	lsls	r7, r7, #3
 8002c52:	08ff      	lsrs	r7, r7, #3
 8002c54:	075b      	lsls	r3, r3, #29
 8002c56:	431f      	orrs	r7, r3
 8002c58:	e59e      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002c5a:	08c0      	lsrs	r0, r0, #3
 8002c5c:	0763      	lsls	r3, r4, #29
 8002c5e:	4318      	orrs	r0, r3
 8002c60:	08e5      	lsrs	r5, r4, #3
 8002c62:	2900      	cmp	r1, #0
 8002c64:	d053      	beq.n	8002d0e <__aeabi_dsub+0x76e>
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	031b      	lsls	r3, r3, #12
 8002c6a:	421d      	tst	r5, r3
 8002c6c:	d00a      	beq.n	8002c84 <__aeabi_dsub+0x6e4>
 8002c6e:	4659      	mov	r1, fp
 8002c70:	08cc      	lsrs	r4, r1, #3
 8002c72:	421c      	tst	r4, r3
 8002c74:	d106      	bne.n	8002c84 <__aeabi_dsub+0x6e4>
 8002c76:	2601      	movs	r6, #1
 8002c78:	4663      	mov	r3, ip
 8002c7a:	0025      	movs	r5, r4
 8002c7c:	08d0      	lsrs	r0, r2, #3
 8002c7e:	0749      	lsls	r1, r1, #29
 8002c80:	4308      	orrs	r0, r1
 8002c82:	401e      	ands	r6, r3
 8002c84:	0f47      	lsrs	r7, r0, #29
 8002c86:	00c0      	lsls	r0, r0, #3
 8002c88:	08c0      	lsrs	r0, r0, #3
 8002c8a:	077f      	lsls	r7, r7, #29
 8002c8c:	4307      	orrs	r7, r0
 8002c8e:	e583      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002c90:	1883      	adds	r3, r0, r2
 8002c92:	4293      	cmp	r3, r2
 8002c94:	4192      	sbcs	r2, r2
 8002c96:	445c      	add	r4, fp
 8002c98:	4252      	negs	r2, r2
 8002c9a:	18a5      	adds	r5, r4, r2
 8002c9c:	022a      	lsls	r2, r5, #8
 8002c9e:	d500      	bpl.n	8002ca2 <__aeabi_dsub+0x702>
 8002ca0:	e724      	b.n	8002aec <__aeabi_dsub+0x54c>
 8002ca2:	076f      	lsls	r7, r5, #29
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	431f      	orrs	r7, r3
 8002ca8:	08ed      	lsrs	r5, r5, #3
 8002caa:	2301      	movs	r3, #1
 8002cac:	e6d0      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	000007fe 	.word	0x000007fe
 8002cb8:	ff7fffff 	.word	0xff7fffff
 8002cbc:	465b      	mov	r3, fp
 8002cbe:	08d2      	lsrs	r2, r2, #3
 8002cc0:	075f      	lsls	r7, r3, #29
 8002cc2:	4666      	mov	r6, ip
 8002cc4:	4317      	orrs	r7, r2
 8002cc6:	08dd      	lsrs	r5, r3, #3
 8002cc8:	e566      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002cca:	0025      	movs	r5, r4
 8002ccc:	3b20      	subs	r3, #32
 8002cce:	40dd      	lsrs	r5, r3
 8002cd0:	4663      	mov	r3, ip
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d005      	beq.n	8002ce2 <__aeabi_dsub+0x742>
 8002cd6:	2340      	movs	r3, #64	@ 0x40
 8002cd8:	4661      	mov	r1, ip
 8002cda:	1a5b      	subs	r3, r3, r1
 8002cdc:	409c      	lsls	r4, r3
 8002cde:	4320      	orrs	r0, r4
 8002ce0:	4680      	mov	r8, r0
 8002ce2:	4647      	mov	r7, r8
 8002ce4:	1e7b      	subs	r3, r7, #1
 8002ce6:	419f      	sbcs	r7, r3
 8002ce8:	432f      	orrs	r7, r5
 8002cea:	e5a0      	b.n	800282e <__aeabi_dsub+0x28e>
 8002cec:	2120      	movs	r1, #32
 8002cee:	2700      	movs	r7, #0
 8002cf0:	1a09      	subs	r1, r1, r0
 8002cf2:	e4d2      	b.n	800269a <__aeabi_dsub+0xfa>
 8002cf4:	2f00      	cmp	r7, #0
 8002cf6:	d100      	bne.n	8002cfa <__aeabi_dsub+0x75a>
 8002cf8:	e713      	b.n	8002b22 <__aeabi_dsub+0x582>
 8002cfa:	465c      	mov	r4, fp
 8002cfc:	0017      	movs	r7, r2
 8002cfe:	2500      	movs	r5, #0
 8002d00:	e5f6      	b.n	80028f0 <__aeabi_dsub+0x350>
 8002d02:	08d7      	lsrs	r7, r2, #3
 8002d04:	0749      	lsls	r1, r1, #29
 8002d06:	2302      	movs	r3, #2
 8002d08:	430f      	orrs	r7, r1
 8002d0a:	092d      	lsrs	r5, r5, #4
 8002d0c:	e6a0      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002d0e:	0007      	movs	r7, r0
 8002d10:	e542      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002d12:	465b      	mov	r3, fp
 8002d14:	2601      	movs	r6, #1
 8002d16:	075f      	lsls	r7, r3, #29
 8002d18:	08dd      	lsrs	r5, r3, #3
 8002d1a:	4663      	mov	r3, ip
 8002d1c:	08d2      	lsrs	r2, r2, #3
 8002d1e:	4317      	orrs	r7, r2
 8002d20:	401e      	ands	r6, r3
 8002d22:	e539      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002d24:	465b      	mov	r3, fp
 8002d26:	08d2      	lsrs	r2, r2, #3
 8002d28:	075f      	lsls	r7, r3, #29
 8002d2a:	4317      	orrs	r7, r2
 8002d2c:	08dd      	lsrs	r5, r3, #3
 8002d2e:	e533      	b.n	8002798 <__aeabi_dsub+0x1f8>
 8002d30:	4a1e      	ldr	r2, [pc, #120]	@ (8002dac <__aeabi_dsub+0x80c>)
 8002d32:	08db      	lsrs	r3, r3, #3
 8002d34:	4022      	ands	r2, r4
 8002d36:	0757      	lsls	r7, r2, #29
 8002d38:	0252      	lsls	r2, r2, #9
 8002d3a:	2501      	movs	r5, #1
 8002d3c:	431f      	orrs	r7, r3
 8002d3e:	0b14      	lsrs	r4, r2, #12
 8002d40:	e5c2      	b.n	80028c8 <__aeabi_dsub+0x328>
 8002d42:	000e      	movs	r6, r1
 8002d44:	2001      	movs	r0, #1
 8002d46:	e65f      	b.n	8002a08 <__aeabi_dsub+0x468>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00d      	beq.n	8002d68 <__aeabi_dsub+0x7c8>
 8002d4c:	464b      	mov	r3, r9
 8002d4e:	1b5b      	subs	r3, r3, r5
 8002d50:	469c      	mov	ip, r3
 8002d52:	2d00      	cmp	r5, #0
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x7b8>
 8002d56:	e548      	b.n	80027ea <__aeabi_dsub+0x24a>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2b38      	cmp	r3, #56	@ 0x38
 8002d5c:	dd00      	ble.n	8002d60 <__aeabi_dsub+0x7c0>
 8002d5e:	e566      	b.n	800282e <__aeabi_dsub+0x28e>
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	431c      	orrs	r4, r3
 8002d66:	e550      	b.n	800280a <__aeabi_dsub+0x26a>
 8002d68:	1c6b      	adds	r3, r5, #1
 8002d6a:	4d11      	ldr	r5, [pc, #68]	@ (8002db0 <__aeabi_dsub+0x810>)
 8002d6c:	422b      	tst	r3, r5
 8002d6e:	d000      	beq.n	8002d72 <__aeabi_dsub+0x7d2>
 8002d70:	e673      	b.n	8002a5a <__aeabi_dsub+0x4ba>
 8002d72:	4659      	mov	r1, fp
 8002d74:	0023      	movs	r3, r4
 8002d76:	4311      	orrs	r1, r2
 8002d78:	468a      	mov	sl, r1
 8002d7a:	4303      	orrs	r3, r0
 8002d7c:	e600      	b.n	8002980 <__aeabi_dsub+0x3e0>
 8002d7e:	0767      	lsls	r7, r4, #29
 8002d80:	08c0      	lsrs	r0, r0, #3
 8002d82:	2300      	movs	r3, #0
 8002d84:	4307      	orrs	r7, r0
 8002d86:	08e5      	lsrs	r5, r4, #3
 8002d88:	e662      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002d8a:	0764      	lsls	r4, r4, #29
 8002d8c:	08ff      	lsrs	r7, r7, #3
 8002d8e:	4327      	orrs	r7, r4
 8002d90:	0905      	lsrs	r5, r0, #4
 8002d92:	e65d      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002d94:	08d2      	lsrs	r2, r2, #3
 8002d96:	0749      	lsls	r1, r1, #29
 8002d98:	4311      	orrs	r1, r2
 8002d9a:	000f      	movs	r7, r1
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	092d      	lsrs	r5, r5, #4
 8002da0:	e656      	b.n	8002a50 <__aeabi_dsub+0x4b0>
 8002da2:	0007      	movs	r7, r0
 8002da4:	e5a4      	b.n	80028f0 <__aeabi_dsub+0x350>
 8002da6:	0038      	movs	r0, r7
 8002da8:	e48f      	b.n	80026ca <__aeabi_dsub+0x12a>
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	ff7fffff 	.word	0xff7fffff
 8002db0:	000007fe 	.word	0x000007fe

08002db4 <__aeabi_dcmpun>:
 8002db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db6:	46c6      	mov	lr, r8
 8002db8:	031e      	lsls	r6, r3, #12
 8002dba:	0b36      	lsrs	r6, r6, #12
 8002dbc:	46b0      	mov	r8, r6
 8002dbe:	4e0d      	ldr	r6, [pc, #52]	@ (8002df4 <__aeabi_dcmpun+0x40>)
 8002dc0:	030c      	lsls	r4, r1, #12
 8002dc2:	004d      	lsls	r5, r1, #1
 8002dc4:	005f      	lsls	r7, r3, #1
 8002dc6:	b500      	push	{lr}
 8002dc8:	0b24      	lsrs	r4, r4, #12
 8002dca:	0d6d      	lsrs	r5, r5, #21
 8002dcc:	0d7f      	lsrs	r7, r7, #21
 8002dce:	42b5      	cmp	r5, r6
 8002dd0:	d00b      	beq.n	8002dea <__aeabi_dcmpun+0x36>
 8002dd2:	4908      	ldr	r1, [pc, #32]	@ (8002df4 <__aeabi_dcmpun+0x40>)
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	428f      	cmp	r7, r1
 8002dd8:	d104      	bne.n	8002de4 <__aeabi_dcmpun+0x30>
 8002dda:	4646      	mov	r6, r8
 8002ddc:	4316      	orrs	r6, r2
 8002dde:	0030      	movs	r0, r6
 8002de0:	1e43      	subs	r3, r0, #1
 8002de2:	4198      	sbcs	r0, r3
 8002de4:	bc80      	pop	{r7}
 8002de6:	46b8      	mov	r8, r7
 8002de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dea:	4304      	orrs	r4, r0
 8002dec:	2001      	movs	r0, #1
 8002dee:	2c00      	cmp	r4, #0
 8002df0:	d1f8      	bne.n	8002de4 <__aeabi_dcmpun+0x30>
 8002df2:	e7ee      	b.n	8002dd2 <__aeabi_dcmpun+0x1e>
 8002df4:	000007ff 	.word	0x000007ff

08002df8 <__aeabi_d2iz>:
 8002df8:	000b      	movs	r3, r1
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	4d16      	ldr	r5, [pc, #88]	@ (8002e58 <__aeabi_d2iz+0x60>)
 8002e00:	030c      	lsls	r4, r1, #12
 8002e02:	b082      	sub	sp, #8
 8002e04:	0049      	lsls	r1, r1, #1
 8002e06:	2000      	movs	r0, #0
 8002e08:	9200      	str	r2, [sp, #0]
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	0b24      	lsrs	r4, r4, #12
 8002e0e:	0d49      	lsrs	r1, r1, #21
 8002e10:	0fde      	lsrs	r6, r3, #31
 8002e12:	42a9      	cmp	r1, r5
 8002e14:	dd04      	ble.n	8002e20 <__aeabi_d2iz+0x28>
 8002e16:	4811      	ldr	r0, [pc, #68]	@ (8002e5c <__aeabi_d2iz+0x64>)
 8002e18:	4281      	cmp	r1, r0
 8002e1a:	dd03      	ble.n	8002e24 <__aeabi_d2iz+0x2c>
 8002e1c:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <__aeabi_d2iz+0x68>)
 8002e1e:	18f0      	adds	r0, r6, r3
 8002e20:	b002      	add	sp, #8
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	2080      	movs	r0, #128	@ 0x80
 8002e26:	0340      	lsls	r0, r0, #13
 8002e28:	4320      	orrs	r0, r4
 8002e2a:	4c0e      	ldr	r4, [pc, #56]	@ (8002e64 <__aeabi_d2iz+0x6c>)
 8002e2c:	1a64      	subs	r4, r4, r1
 8002e2e:	2c1f      	cmp	r4, #31
 8002e30:	dd08      	ble.n	8002e44 <__aeabi_d2iz+0x4c>
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <__aeabi_d2iz+0x70>)
 8002e34:	1a5b      	subs	r3, r3, r1
 8002e36:	40d8      	lsrs	r0, r3
 8002e38:	0003      	movs	r3, r0
 8002e3a:	4258      	negs	r0, r3
 8002e3c:	2e00      	cmp	r6, #0
 8002e3e:	d1ef      	bne.n	8002e20 <__aeabi_d2iz+0x28>
 8002e40:	0018      	movs	r0, r3
 8002e42:	e7ed      	b.n	8002e20 <__aeabi_d2iz+0x28>
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <__aeabi_d2iz+0x74>)
 8002e46:	9a00      	ldr	r2, [sp, #0]
 8002e48:	469c      	mov	ip, r3
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	4461      	add	r1, ip
 8002e4e:	408b      	lsls	r3, r1
 8002e50:	40e2      	lsrs	r2, r4
 8002e52:	4313      	orrs	r3, r2
 8002e54:	e7f1      	b.n	8002e3a <__aeabi_d2iz+0x42>
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	000003fe 	.word	0x000003fe
 8002e5c:	0000041d 	.word	0x0000041d
 8002e60:	7fffffff 	.word	0x7fffffff
 8002e64:	00000433 	.word	0x00000433
 8002e68:	00000413 	.word	0x00000413
 8002e6c:	fffffbed 	.word	0xfffffbed

08002e70 <__aeabi_i2d>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d016      	beq.n	8002ea4 <__aeabi_i2d+0x34>
 8002e76:	17c3      	asrs	r3, r0, #31
 8002e78:	18c5      	adds	r5, r0, r3
 8002e7a:	405d      	eors	r5, r3
 8002e7c:	0fc4      	lsrs	r4, r0, #31
 8002e7e:	0028      	movs	r0, r5
 8002e80:	f000 f912 	bl	80030a8 <__clzsi2>
 8002e84:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <__aeabi_i2d+0x58>)
 8002e86:	1a1b      	subs	r3, r3, r0
 8002e88:	055b      	lsls	r3, r3, #21
 8002e8a:	0d5b      	lsrs	r3, r3, #21
 8002e8c:	280a      	cmp	r0, #10
 8002e8e:	dc14      	bgt.n	8002eba <__aeabi_i2d+0x4a>
 8002e90:	0002      	movs	r2, r0
 8002e92:	002e      	movs	r6, r5
 8002e94:	3215      	adds	r2, #21
 8002e96:	4096      	lsls	r6, r2
 8002e98:	220b      	movs	r2, #11
 8002e9a:	1a12      	subs	r2, r2, r0
 8002e9c:	40d5      	lsrs	r5, r2
 8002e9e:	032d      	lsls	r5, r5, #12
 8002ea0:	0b2d      	lsrs	r5, r5, #12
 8002ea2:	e003      	b.n	8002eac <__aeabi_i2d+0x3c>
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2500      	movs	r5, #0
 8002eaa:	2600      	movs	r6, #0
 8002eac:	051b      	lsls	r3, r3, #20
 8002eae:	432b      	orrs	r3, r5
 8002eb0:	07e4      	lsls	r4, r4, #31
 8002eb2:	4323      	orrs	r3, r4
 8002eb4:	0030      	movs	r0, r6
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	bd70      	pop	{r4, r5, r6, pc}
 8002eba:	380b      	subs	r0, #11
 8002ebc:	4085      	lsls	r5, r0
 8002ebe:	032d      	lsls	r5, r5, #12
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	0b2d      	lsrs	r5, r5, #12
 8002ec4:	e7f2      	b.n	8002eac <__aeabi_i2d+0x3c>
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	0000041e 	.word	0x0000041e

08002ecc <__aeabi_ui2d>:
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	1e04      	subs	r4, r0, #0
 8002ed0:	d010      	beq.n	8002ef4 <__aeabi_ui2d+0x28>
 8002ed2:	f000 f8e9 	bl	80030a8 <__clzsi2>
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <__aeabi_ui2d+0x44>)
 8002ed8:	1a1b      	subs	r3, r3, r0
 8002eda:	055b      	lsls	r3, r3, #21
 8002edc:	0d5b      	lsrs	r3, r3, #21
 8002ede:	280a      	cmp	r0, #10
 8002ee0:	dc0f      	bgt.n	8002f02 <__aeabi_ui2d+0x36>
 8002ee2:	220b      	movs	r2, #11
 8002ee4:	0021      	movs	r1, r4
 8002ee6:	1a12      	subs	r2, r2, r0
 8002ee8:	40d1      	lsrs	r1, r2
 8002eea:	3015      	adds	r0, #21
 8002eec:	030a      	lsls	r2, r1, #12
 8002eee:	4084      	lsls	r4, r0
 8002ef0:	0b12      	lsrs	r2, r2, #12
 8002ef2:	e001      	b.n	8002ef8 <__aeabi_ui2d+0x2c>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	051b      	lsls	r3, r3, #20
 8002efa:	4313      	orrs	r3, r2
 8002efc:	0020      	movs	r0, r4
 8002efe:	0019      	movs	r1, r3
 8002f00:	bd10      	pop	{r4, pc}
 8002f02:	0022      	movs	r2, r4
 8002f04:	380b      	subs	r0, #11
 8002f06:	4082      	lsls	r2, r0
 8002f08:	0312      	lsls	r2, r2, #12
 8002f0a:	2400      	movs	r4, #0
 8002f0c:	0b12      	lsrs	r2, r2, #12
 8002f0e:	e7f3      	b.n	8002ef8 <__aeabi_ui2d+0x2c>
 8002f10:	0000041e 	.word	0x0000041e

08002f14 <__aeabi_f2d>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	0242      	lsls	r2, r0, #9
 8002f18:	0043      	lsls	r3, r0, #1
 8002f1a:	0fc4      	lsrs	r4, r0, #31
 8002f1c:	20fe      	movs	r0, #254	@ 0xfe
 8002f1e:	0e1b      	lsrs	r3, r3, #24
 8002f20:	1c59      	adds	r1, r3, #1
 8002f22:	0a55      	lsrs	r5, r2, #9
 8002f24:	4208      	tst	r0, r1
 8002f26:	d00c      	beq.n	8002f42 <__aeabi_f2d+0x2e>
 8002f28:	21e0      	movs	r1, #224	@ 0xe0
 8002f2a:	0089      	lsls	r1, r1, #2
 8002f2c:	468c      	mov	ip, r1
 8002f2e:	076d      	lsls	r5, r5, #29
 8002f30:	0b12      	lsrs	r2, r2, #12
 8002f32:	4463      	add	r3, ip
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	4313      	orrs	r3, r2
 8002f38:	07e4      	lsls	r4, r4, #31
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	0028      	movs	r0, r5
 8002f3e:	0019      	movs	r1, r3
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d114      	bne.n	8002f70 <__aeabi_f2d+0x5c>
 8002f46:	2d00      	cmp	r5, #0
 8002f48:	d01b      	beq.n	8002f82 <__aeabi_f2d+0x6e>
 8002f4a:	0028      	movs	r0, r5
 8002f4c:	f000 f8ac 	bl	80030a8 <__clzsi2>
 8002f50:	280a      	cmp	r0, #10
 8002f52:	dc1c      	bgt.n	8002f8e <__aeabi_f2d+0x7a>
 8002f54:	230b      	movs	r3, #11
 8002f56:	002a      	movs	r2, r5
 8002f58:	1a1b      	subs	r3, r3, r0
 8002f5a:	40da      	lsrs	r2, r3
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	3315      	adds	r3, #21
 8002f60:	409d      	lsls	r5, r3
 8002f62:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <__aeabi_f2d+0x88>)
 8002f64:	0312      	lsls	r2, r2, #12
 8002f66:	1a1b      	subs	r3, r3, r0
 8002f68:	055b      	lsls	r3, r3, #21
 8002f6a:	0b12      	lsrs	r2, r2, #12
 8002f6c:	0d5b      	lsrs	r3, r3, #21
 8002f6e:	e7e1      	b.n	8002f34 <__aeabi_f2d+0x20>
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	d009      	beq.n	8002f88 <__aeabi_f2d+0x74>
 8002f74:	0b13      	lsrs	r3, r2, #12
 8002f76:	2280      	movs	r2, #128	@ 0x80
 8002f78:	0312      	lsls	r2, r2, #12
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	076d      	lsls	r5, r5, #29
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <__aeabi_f2d+0x8c>)
 8002f80:	e7d8      	b.n	8002f34 <__aeabi_f2d+0x20>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2200      	movs	r2, #0
 8002f86:	e7d5      	b.n	8002f34 <__aeabi_f2d+0x20>
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <__aeabi_f2d+0x8c>)
 8002f8c:	e7d2      	b.n	8002f34 <__aeabi_f2d+0x20>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	002a      	movs	r2, r5
 8002f92:	3b0b      	subs	r3, #11
 8002f94:	409a      	lsls	r2, r3
 8002f96:	2500      	movs	r5, #0
 8002f98:	e7e3      	b.n	8002f62 <__aeabi_f2d+0x4e>
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	00000389 	.word	0x00000389
 8002fa0:	000007ff 	.word	0x000007ff

08002fa4 <__aeabi_d2f>:
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa6:	004b      	lsls	r3, r1, #1
 8002fa8:	030f      	lsls	r7, r1, #12
 8002faa:	0d5b      	lsrs	r3, r3, #21
 8002fac:	4c3a      	ldr	r4, [pc, #232]	@ (8003098 <__aeabi_d2f+0xf4>)
 8002fae:	0f45      	lsrs	r5, r0, #29
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	0a7f      	lsrs	r7, r7, #9
 8002fb4:	1c5e      	adds	r6, r3, #1
 8002fb6:	432f      	orrs	r7, r5
 8002fb8:	9000      	str	r0, [sp, #0]
 8002fba:	9101      	str	r1, [sp, #4]
 8002fbc:	0fca      	lsrs	r2, r1, #31
 8002fbe:	00c5      	lsls	r5, r0, #3
 8002fc0:	4226      	tst	r6, r4
 8002fc2:	d00b      	beq.n	8002fdc <__aeabi_d2f+0x38>
 8002fc4:	4935      	ldr	r1, [pc, #212]	@ (800309c <__aeabi_d2f+0xf8>)
 8002fc6:	185c      	adds	r4, r3, r1
 8002fc8:	2cfe      	cmp	r4, #254	@ 0xfe
 8002fca:	dd13      	ble.n	8002ff4 <__aeabi_d2f+0x50>
 8002fcc:	20ff      	movs	r0, #255	@ 0xff
 8002fce:	2300      	movs	r3, #0
 8002fd0:	05c0      	lsls	r0, r0, #23
 8002fd2:	4318      	orrs	r0, r3
 8002fd4:	07d2      	lsls	r2, r2, #31
 8002fd6:	4310      	orrs	r0, r2
 8002fd8:	b003      	add	sp, #12
 8002fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fdc:	433d      	orrs	r5, r7
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <__aeabi_d2f+0x42>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e7f4      	b.n	8002fd0 <__aeabi_d2f+0x2c>
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	d0f0      	beq.n	8002fcc <__aeabi_d2f+0x28>
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	03db      	lsls	r3, r3, #15
 8002fee:	20ff      	movs	r0, #255	@ 0xff
 8002ff0:	433b      	orrs	r3, r7
 8002ff2:	e7ed      	b.n	8002fd0 <__aeabi_d2f+0x2c>
 8002ff4:	2c00      	cmp	r4, #0
 8002ff6:	dd0c      	ble.n	8003012 <__aeabi_d2f+0x6e>
 8002ff8:	9b00      	ldr	r3, [sp, #0]
 8002ffa:	00ff      	lsls	r7, r7, #3
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	4183      	sbcs	r3, r0
 8003002:	0f69      	lsrs	r1, r5, #29
 8003004:	433b      	orrs	r3, r7
 8003006:	430b      	orrs	r3, r1
 8003008:	0759      	lsls	r1, r3, #29
 800300a:	d127      	bne.n	800305c <__aeabi_d2f+0xb8>
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	b2e0      	uxtb	r0, r4
 8003010:	e7de      	b.n	8002fd0 <__aeabi_d2f+0x2c>
 8003012:	0021      	movs	r1, r4
 8003014:	3117      	adds	r1, #23
 8003016:	db31      	blt.n	800307c <__aeabi_d2f+0xd8>
 8003018:	2180      	movs	r1, #128	@ 0x80
 800301a:	201e      	movs	r0, #30
 800301c:	0409      	lsls	r1, r1, #16
 800301e:	4339      	orrs	r1, r7
 8003020:	1b00      	subs	r0, r0, r4
 8003022:	281f      	cmp	r0, #31
 8003024:	dd2d      	ble.n	8003082 <__aeabi_d2f+0xde>
 8003026:	2602      	movs	r6, #2
 8003028:	4276      	negs	r6, r6
 800302a:	1b34      	subs	r4, r6, r4
 800302c:	000e      	movs	r6, r1
 800302e:	40e6      	lsrs	r6, r4
 8003030:	0034      	movs	r4, r6
 8003032:	2820      	cmp	r0, #32
 8003034:	d004      	beq.n	8003040 <__aeabi_d2f+0x9c>
 8003036:	481a      	ldr	r0, [pc, #104]	@ (80030a0 <__aeabi_d2f+0xfc>)
 8003038:	4684      	mov	ip, r0
 800303a:	4463      	add	r3, ip
 800303c:	4099      	lsls	r1, r3
 800303e:	430d      	orrs	r5, r1
 8003040:	002b      	movs	r3, r5
 8003042:	1e59      	subs	r1, r3, #1
 8003044:	418b      	sbcs	r3, r1
 8003046:	4323      	orrs	r3, r4
 8003048:	0759      	lsls	r1, r3, #29
 800304a:	d003      	beq.n	8003054 <__aeabi_d2f+0xb0>
 800304c:	210f      	movs	r1, #15
 800304e:	4019      	ands	r1, r3
 8003050:	2904      	cmp	r1, #4
 8003052:	d10b      	bne.n	800306c <__aeabi_d2f+0xc8>
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	2000      	movs	r0, #0
 8003058:	0a5b      	lsrs	r3, r3, #9
 800305a:	e7b9      	b.n	8002fd0 <__aeabi_d2f+0x2c>
 800305c:	210f      	movs	r1, #15
 800305e:	4019      	ands	r1, r3
 8003060:	2904      	cmp	r1, #4
 8003062:	d104      	bne.n	800306e <__aeabi_d2f+0xca>
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	0a5b      	lsrs	r3, r3, #9
 8003068:	b2e0      	uxtb	r0, r4
 800306a:	e7b1      	b.n	8002fd0 <__aeabi_d2f+0x2c>
 800306c:	2400      	movs	r4, #0
 800306e:	3304      	adds	r3, #4
 8003070:	0159      	lsls	r1, r3, #5
 8003072:	d5f7      	bpl.n	8003064 <__aeabi_d2f+0xc0>
 8003074:	3401      	adds	r4, #1
 8003076:	2300      	movs	r3, #0
 8003078:	b2e0      	uxtb	r0, r4
 800307a:	e7a9      	b.n	8002fd0 <__aeabi_d2f+0x2c>
 800307c:	2000      	movs	r0, #0
 800307e:	2300      	movs	r3, #0
 8003080:	e7a6      	b.n	8002fd0 <__aeabi_d2f+0x2c>
 8003082:	4c08      	ldr	r4, [pc, #32]	@ (80030a4 <__aeabi_d2f+0x100>)
 8003084:	191c      	adds	r4, r3, r4
 8003086:	002b      	movs	r3, r5
 8003088:	40a5      	lsls	r5, r4
 800308a:	40c3      	lsrs	r3, r0
 800308c:	40a1      	lsls	r1, r4
 800308e:	1e68      	subs	r0, r5, #1
 8003090:	4185      	sbcs	r5, r0
 8003092:	4329      	orrs	r1, r5
 8003094:	430b      	orrs	r3, r1
 8003096:	e7d7      	b.n	8003048 <__aeabi_d2f+0xa4>
 8003098:	000007fe 	.word	0x000007fe
 800309c:	fffffc80 	.word	0xfffffc80
 80030a0:	fffffca2 	.word	0xfffffca2
 80030a4:	fffffc82 	.word	0xfffffc82

080030a8 <__clzsi2>:
 80030a8:	211c      	movs	r1, #28
 80030aa:	2301      	movs	r3, #1
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	4298      	cmp	r0, r3
 80030b0:	d301      	bcc.n	80030b6 <__clzsi2+0xe>
 80030b2:	0c00      	lsrs	r0, r0, #16
 80030b4:	3910      	subs	r1, #16
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	4298      	cmp	r0, r3
 80030ba:	d301      	bcc.n	80030c0 <__clzsi2+0x18>
 80030bc:	0a00      	lsrs	r0, r0, #8
 80030be:	3908      	subs	r1, #8
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	4298      	cmp	r0, r3
 80030c4:	d301      	bcc.n	80030ca <__clzsi2+0x22>
 80030c6:	0900      	lsrs	r0, r0, #4
 80030c8:	3904      	subs	r1, #4
 80030ca:	a202      	add	r2, pc, #8	@ (adr r2, 80030d4 <__clzsi2+0x2c>)
 80030cc:	5c10      	ldrb	r0, [r2, r0]
 80030ce:	1840      	adds	r0, r0, r1
 80030d0:	4770      	bx	lr
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	02020304 	.word	0x02020304
 80030d8:	01010101 	.word	0x01010101
	...

080030e4 <__clzdi2>:
 80030e4:	b510      	push	{r4, lr}
 80030e6:	2900      	cmp	r1, #0
 80030e8:	d103      	bne.n	80030f2 <__clzdi2+0xe>
 80030ea:	f7ff ffdd 	bl	80030a8 <__clzsi2>
 80030ee:	3020      	adds	r0, #32
 80030f0:	e002      	b.n	80030f8 <__clzdi2+0x14>
 80030f2:	0008      	movs	r0, r1
 80030f4:	f7ff ffd8 	bl	80030a8 <__clzsi2>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	46c0      	nop			@ (mov r8, r8)

080030fc <Termistor>:
#include "stdio.h"
#include "string.h"
#include "ssd1306_tests.h"
#include "DigitalInputOutputs.h"
#include <math.h>
double Termistor(uint32_t analogValue) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	double temperature;
	uint32_t adcval = 4096 - analogValue;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	0152      	lsls	r2, r2, #5
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]

	temperature = log((adcval * 10000) / (4095 - adcval));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4a2b      	ldr	r2, [pc, #172]	@ (80031c0 <Termistor+0xc4>)
 8003112:	435a      	muls	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	492b      	ldr	r1, [pc, #172]	@ (80031c4 <Termistor+0xc8>)
 8003118:	1acb      	subs	r3, r1, r3
 800311a:	0019      	movs	r1, r3
 800311c:	0010      	movs	r0, r2
 800311e:	f7fd f80b 	bl	8000138 <__udivsi3>
 8003122:	0003      	movs	r3, r0
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff fed1 	bl	8002ecc <__aeabi_ui2d>
 800312a:	0002      	movs	r2, r0
 800312c:	000b      	movs	r3, r1
 800312e:	0010      	movs	r0, r2
 8003130:	0019      	movs	r1, r3
 8003132:	f007 fe33 	bl	800ad9c <log>
 8003136:	0002      	movs	r2, r0
 8003138:	000b      	movs	r3, r1
 800313a:	60ba      	str	r2, [r7, #8]
 800313c:	60fb      	str	r3, [r7, #12]
	temperature = 1
			/ (0.001129148
					+ (0.000234125
							+ (0.0000000876741 * temperature * temperature))
 800313e:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <Termistor+0xcc>)
 8003140:	4b22      	ldr	r3, [pc, #136]	@ (80031cc <Termistor+0xd0>)
 8003142:	68b8      	ldr	r0, [r7, #8]
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	f7fe ff45 	bl	8001fd4 <__aeabi_dmul>
 800314a:	0002      	movs	r2, r0
 800314c:	000b      	movs	r3, r1
 800314e:	0010      	movs	r0, r2
 8003150:	0019      	movs	r1, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f7fe ff3d 	bl	8001fd4 <__aeabi_dmul>
 800315a:	0002      	movs	r2, r0
 800315c:	000b      	movs	r3, r1
 800315e:	0010      	movs	r0, r2
 8003160:	0019      	movs	r1, r3
 8003162:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <Termistor+0xd4>)
 8003164:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <Termistor+0xd8>)
 8003166:	f7fd ff35 	bl	8000fd4 <__aeabi_dadd>
 800316a:	0002      	movs	r2, r0
 800316c:	000b      	movs	r3, r1
 800316e:	0010      	movs	r0, r2
 8003170:	0019      	movs	r1, r3
							* temperature);
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f7fe ff2d 	bl	8001fd4 <__aeabi_dmul>
 800317a:	0002      	movs	r2, r0
 800317c:	000b      	movs	r3, r1
 800317e:	0010      	movs	r0, r2
 8003180:	0019      	movs	r1, r3
					+ (0.000234125
 8003182:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <Termistor+0xdc>)
 8003184:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <Termistor+0xe0>)
 8003186:	f7fd ff25 	bl	8000fd4 <__aeabi_dadd>
 800318a:	0002      	movs	r2, r0
 800318c:	000b      	movs	r3, r1
	temperature = 1
 800318e:	2000      	movs	r0, #0
 8003190:	4913      	ldr	r1, [pc, #76]	@ (80031e0 <Termistor+0xe4>)
 8003192:	f7fe fae5 	bl	8001760 <__aeabi_ddiv>
 8003196:	0002      	movs	r2, r0
 8003198:	000b      	movs	r3, r1
 800319a:	60ba      	str	r2, [r7, #8]
 800319c:	60fb      	str	r3, [r7, #12]
	temperature = temperature - 273.15;
 800319e:	4a11      	ldr	r2, [pc, #68]	@ (80031e4 <Termistor+0xe8>)
 80031a0:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <Termistor+0xec>)
 80031a2:	68b8      	ldr	r0, [r7, #8]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	f7ff f9fb 	bl	80025a0 <__aeabi_dsub>
 80031aa:	0002      	movs	r2, r0
 80031ac:	000b      	movs	r3, r1
 80031ae:	60ba      	str	r2, [r7, #8]
 80031b0:	60fb      	str	r3, [r7, #12]
	return temperature;
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	68fb      	ldr	r3, [r7, #12]
}
 80031b6:	0010      	movs	r0, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b006      	add	sp, #24
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	00002710 	.word	0x00002710
 80031c4:	00000fff 	.word	0x00000fff
 80031c8:	14170d19 	.word	0x14170d19
 80031cc:	3e7788eb 	.word	0x3e7788eb
 80031d0:	6fb4c3c2 	.word	0x6fb4c3c2
 80031d4:	3f2eafee 	.word	0x3f2eafee
 80031d8:	6edeb890 	.word	0x6edeb890
 80031dc:	3f527ffd 	.word	0x3f527ffd
 80031e0:	3ff00000 	.word	0x3ff00000
 80031e4:	66666666 	.word	0x66666666
 80031e8:	40711266 	.word	0x40711266

080031ec <calculateAngles>:
typedef struct {
	float roll;
	float pitch;
} Angles;
Angles angle;
Angles calculateAngles(float x, float y, float z) {
 80031ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
	Angles angles;
	angles.roll = atan2(y, z) * 180.0 / M_PI;
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fe8a 	bl	8002f14 <__aeabi_f2d>
 8003200:	0004      	movs	r4, r0
 8003202:	000d      	movs	r5, r1
 8003204:	6838      	ldr	r0, [r7, #0]
 8003206:	f7ff fe85 	bl	8002f14 <__aeabi_f2d>
 800320a:	0002      	movs	r2, r0
 800320c:	000b      	movs	r3, r1
 800320e:	0020      	movs	r0, r4
 8003210:	0029      	movs	r1, r5
 8003212:	f007 fdbf 	bl	800ad94 <atan2>
 8003216:	2200      	movs	r2, #0
 8003218:	4b40      	ldr	r3, [pc, #256]	@ (800331c <calculateAngles+0x130>)
 800321a:	f7fe fedb 	bl	8001fd4 <__aeabi_dmul>
 800321e:	0002      	movs	r2, r0
 8003220:	000b      	movs	r3, r1
 8003222:	0010      	movs	r0, r2
 8003224:	0019      	movs	r1, r3
 8003226:	4a3e      	ldr	r2, [pc, #248]	@ (8003320 <calculateAngles+0x134>)
 8003228:	4b3e      	ldr	r3, [pc, #248]	@ (8003324 <calculateAngles+0x138>)
 800322a:	f7fe fa99 	bl	8001760 <__aeabi_ddiv>
 800322e:	0002      	movs	r2, r0
 8003230:	000b      	movs	r3, r1
 8003232:	0010      	movs	r0, r2
 8003234:	0019      	movs	r1, r3
 8003236:	f7ff feb5 	bl	8002fa4 <__aeabi_d2f>
 800323a:	1c02      	adds	r2, r0, #0
 800323c:	2410      	movs	r4, #16
 800323e:	193b      	adds	r3, r7, r4
 8003240:	601a      	str	r2, [r3, #0]
	angles.pitch = atan2(-x, sqrt(y * y + z * z)) * 180.0 / M_PI;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2280      	movs	r2, #128	@ 0x80
 8003246:	0612      	lsls	r2, r2, #24
 8003248:	4053      	eors	r3, r2
 800324a:	1c18      	adds	r0, r3, #0
 800324c:	f7ff fe62 	bl	8002f14 <__aeabi_f2d>
 8003250:	0004      	movs	r4, r0
 8003252:	000d      	movs	r5, r1
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fcf2 	bl	8000c40 <__aeabi_fmul>
 800325c:	1c03      	adds	r3, r0, #0
 800325e:	1c1e      	adds	r6, r3, #0
 8003260:	6839      	ldr	r1, [r7, #0]
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	f7fd fcec 	bl	8000c40 <__aeabi_fmul>
 8003268:	1c03      	adds	r3, r0, #0
 800326a:	1c19      	adds	r1, r3, #0
 800326c:	1c30      	adds	r0, r6, #0
 800326e:	f7fd fa3d 	bl	80006ec <__aeabi_fadd>
 8003272:	1c03      	adds	r3, r0, #0
 8003274:	1c18      	adds	r0, r3, #0
 8003276:	f7ff fe4d 	bl	8002f14 <__aeabi_f2d>
 800327a:	0002      	movs	r2, r0
 800327c:	000b      	movs	r3, r1
 800327e:	0010      	movs	r0, r2
 8003280:	0019      	movs	r1, r3
 8003282:	f007 fdc1 	bl	800ae08 <sqrt>
 8003286:	0002      	movs	r2, r0
 8003288:	000b      	movs	r3, r1
 800328a:	0020      	movs	r0, r4
 800328c:	0029      	movs	r1, r5
 800328e:	f007 fd81 	bl	800ad94 <atan2>
 8003292:	2200      	movs	r2, #0
 8003294:	4b21      	ldr	r3, [pc, #132]	@ (800331c <calculateAngles+0x130>)
 8003296:	f7fe fe9d 	bl	8001fd4 <__aeabi_dmul>
 800329a:	0002      	movs	r2, r0
 800329c:	000b      	movs	r3, r1
 800329e:	0010      	movs	r0, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <calculateAngles+0x134>)
 80032a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <calculateAngles+0x138>)
 80032a6:	f7fe fa5b 	bl	8001760 <__aeabi_ddiv>
 80032aa:	0002      	movs	r2, r0
 80032ac:	000b      	movs	r3, r1
 80032ae:	0010      	movs	r0, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	f7ff fe77 	bl	8002fa4 <__aeabi_d2f>
 80032b6:	1c02      	adds	r2, r0, #0
 80032b8:	2410      	movs	r4, #16
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	605a      	str	r2, [r3, #4]

    // Negatif açıyı 0-360 arasına getir
    if (angles.roll < 0)
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2100      	movs	r1, #0
 80032c4:	1c18      	adds	r0, r3, #0
 80032c6:	f7fd f8fd 	bl	80004c4 <__aeabi_fcmplt>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d009      	beq.n	80032e2 <calculateAngles+0xf6>
        angles.roll += 360;
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4915      	ldr	r1, [pc, #84]	@ (8003328 <calculateAngles+0x13c>)
 80032d4:	1c18      	adds	r0, r3, #0
 80032d6:	f7fd fa09 	bl	80006ec <__aeabi_fadd>
 80032da:	1c03      	adds	r3, r0, #0
 80032dc:	1c1a      	adds	r2, r3, #0
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	601a      	str	r2, [r3, #0]
    if (angles.pitch < 0)
 80032e2:	2410      	movs	r4, #16
 80032e4:	193b      	adds	r3, r7, r4
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2100      	movs	r1, #0
 80032ea:	1c18      	adds	r0, r3, #0
 80032ec:	f7fd f8ea 	bl	80004c4 <__aeabi_fcmplt>
 80032f0:	1e03      	subs	r3, r0, #0
 80032f2:	d009      	beq.n	8003308 <calculateAngles+0x11c>
        angles.pitch += 360;
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	490b      	ldr	r1, [pc, #44]	@ (8003328 <calculateAngles+0x13c>)
 80032fa:	1c18      	adds	r0, r3, #0
 80032fc:	f7fd f9f6 	bl	80006ec <__aeabi_fadd>
 8003300:	1c03      	adds	r3, r0, #0
 8003302:	1c1a      	adds	r2, r3, #0
 8003304:	193b      	adds	r3, r7, r4
 8003306:	605a      	str	r2, [r3, #4]

	return angles;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2210      	movs	r2, #16
 800330c:	18ba      	adds	r2, r7, r2
 800330e:	ca03      	ldmia	r2!, {r0, r1}
 8003310:	c303      	stmia	r3!, {r0, r1}

}
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	46bd      	mov	sp, r7
 8003316:	b007      	add	sp, #28
 8003318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	40668000 	.word	0x40668000
 8003320:	54442d18 	.word	0x54442d18
 8003324:	400921fb 	.word	0x400921fb
 8003328:	43b40000 	.word	0x43b40000

0800332c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800332c:	b5b0      	push	{r4, r5, r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003332:	f000 fea3 	bl	800407c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003336:	f000 f961 	bl	80035fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800333a:	f000 fab9 	bl	80038b0 <MX_GPIO_Init>
  MX_RTC_Init();
 800333e:	f000 fa55 	bl	80037ec <MX_RTC_Init>
  MX_ADC1_Init();
 8003342:	f000 f9a7 	bl	8003694 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003346:	f000 fa11 	bl	800376c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800334a:	f000 fa7d 	bl	8003848 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	dev_ctx.write_reg = platform_write;
 800334e:	4b99      	ldr	r3, [pc, #612]	@ (80035b4 <main+0x288>)
 8003350:	4a99      	ldr	r2, [pc, #612]	@ (80035b8 <main+0x28c>)
 8003352:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 8003354:	4b97      	ldr	r3, [pc, #604]	@ (80035b4 <main+0x288>)
 8003356:	4a99      	ldr	r2, [pc, #612]	@ (80035bc <main+0x290>)
 8003358:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &SENSOR_BUS;
 800335a:	4b96      	ldr	r3, [pc, #600]	@ (80035b4 <main+0x288>)
 800335c:	4a98      	ldr	r2, [pc, #608]	@ (80035c0 <main+0x294>)
 800335e:	60da      	str	r2, [r3, #12]

	lis2dw12_device_id_get(&dev_ctx, &whoamI);
 8003360:	4a98      	ldr	r2, [pc, #608]	@ (80035c4 <main+0x298>)
 8003362:	4b94      	ldr	r3, [pc, #592]	@ (80035b4 <main+0x288>)
 8003364:	0011      	movs	r1, r2
 8003366:	0018      	movs	r0, r3
 8003368:	f004 fd41 	bl	8007dee <lis2dw12_device_id_get>
	lis2dw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800336c:	4b91      	ldr	r3, [pc, #580]	@ (80035b4 <main+0x288>)
 800336e:	2101      	movs	r1, #1
 8003370:	0018      	movs	r0, r3
 8003372:	f004 fd4e 	bl	8007e12 <lis2dw12_reset_set>

	do {
		lis2dw12_reset_get(&dev_ctx, &rst);
 8003376:	4a94      	ldr	r2, [pc, #592]	@ (80035c8 <main+0x29c>)
 8003378:	4b8e      	ldr	r3, [pc, #568]	@ (80035b4 <main+0x288>)
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f004 fd78 	bl	8007e72 <lis2dw12_reset_get>
	} while (rst);
 8003382:	4b91      	ldr	r3, [pc, #580]	@ (80035c8 <main+0x29c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f5      	bne.n	8003376 <main+0x4a>

	/* Enable Block Data Update */
	lis2dw12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800338a:	4b8a      	ldr	r3, [pc, #552]	@ (80035b4 <main+0x288>)
 800338c:	2101      	movs	r1, #1
 800338e:	0018      	movs	r0, r3
 8003390:	f004 fc62 	bl	8007c58 <lis2dw12_block_data_update_set>
	/* Set full scale */
	lis2dw12_full_scale_set(&dev_ctx, LIS2DW12_2g);
 8003394:	4b87      	ldr	r3, [pc, #540]	@ (80035b4 <main+0x288>)
 8003396:	2100      	movs	r1, #0
 8003398:	0018      	movs	r0, r3
 800339a:	f004 fc8d 	bl	8007cb8 <lis2dw12_full_scale_set>
	/* Configure filtering chain
	 * Accelerometer - filter path / bandwidth
	 */
	lis2dw12_filter_path_set(&dev_ctx, LIS2DW12_LPF_ON_OUT);
 800339e:	4b85      	ldr	r3, [pc, #532]	@ (80035b4 <main+0x288>)
 80033a0:	2100      	movs	r1, #0
 80033a2:	0018      	movs	r0, r3
 80033a4:	f004 fd80 	bl	8007ea8 <lis2dw12_filter_path_set>
	lis2dw12_filter_bandwidth_set(&dev_ctx, LIS2DW12_ODR_DIV_4);
 80033a8:	4b82      	ldr	r3, [pc, #520]	@ (80035b4 <main+0x288>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	0018      	movs	r0, r3
 80033ae:	f004 fdd5 	bl	8007f5c <lis2dw12_filter_bandwidth_set>
	/* Configure power mode */
	lis2dw12_power_mode_set(&dev_ctx, LIS2DW12_HIGH_PERFORMANCE);
 80033b2:	4b80      	ldr	r3, [pc, #512]	@ (80035b4 <main+0x288>)
 80033b4:	2104      	movs	r1, #4
 80033b6:	0018      	movs	r0, r3
 80033b8:	f004 fb8a 	bl	8007ad0 <lis2dw12_power_mode_set>
	/* Set Output Data Rate */
	lis2dw12_data_rate_set(&dev_ctx, LIS2DW12_XL_ODR_25Hz);
 80033bc:	4b7d      	ldr	r3, [pc, #500]	@ (80035b4 <main+0x288>)
 80033be:	2103      	movs	r1, #3
 80033c0:	0018      	movs	r0, r3
 80033c2:	f004 fbf1 	bl	8007ba8 <lis2dw12_data_rate_set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (SysClkTim._750msn == 1)  // 500 ms aralıkla veri okuma
 80033c6:	4b81      	ldr	r3, [pc, #516]	@ (80035cc <main+0x2a0>)
 80033c8:	799b      	ldrb	r3, [r3, #6]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d137      	bne.n	800343e <main+0x112>
				{
		uint8_t reg;
		/* Read output only if new value is available */
		lis2dw12_flag_data_ready_get(&dev_ctx, &reg);
 80033ce:	240f      	movs	r4, #15
 80033d0:	193a      	adds	r2, r7, r4
 80033d2:	4b78      	ldr	r3, [pc, #480]	@ (80035b4 <main+0x288>)
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f004 fc9e 	bl	8007d18 <lis2dw12_flag_data_ready_get>

			/* Read output only if new value is available */
			lis2dw12_flag_data_ready_get(&dev_ctx, &reg);
 80033dc:	193a      	adds	r2, r7, r4
 80033de:	4b75      	ldr	r3, [pc, #468]	@ (80035b4 <main+0x288>)
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f004 fc98 	bl	8007d18 <lis2dw12_flag_data_ready_get>

			if (reg) {
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d026      	beq.n	800343e <main+0x112>
				/* Read acceleration data */
				memset(data_raw_acceleration, 0, sizeof(data_raw_acceleration));
 80033f0:	4b77      	ldr	r3, [pc, #476]	@ (80035d0 <main+0x2a4>)
 80033f2:	2206      	movs	r2, #6
 80033f4:	2100      	movs	r1, #0
 80033f6:	0018      	movs	r0, r3
 80033f8:	f005 fb82 	bl	8008b00 <memset>
				lis2dw12_acceleration_raw_get(&dev_ctx, data_raw_acceleration); // Accelerometer'dan veri okuma
 80033fc:	4a74      	ldr	r2, [pc, #464]	@ (80035d0 <main+0x2a4>)
 80033fe:	4b6d      	ldr	r3, [pc, #436]	@ (80035b4 <main+0x288>)
 8003400:	0011      	movs	r1, r2
 8003402:	0018      	movs	r0, r3
 8003404:	f004 fca3 	bl	8007d4e <lis2dw12_acceleration_raw_get>
				acceleration_mg[0] = lis2dw12_from_fs2_to_mg(
 8003408:	4b71      	ldr	r3, [pc, #452]	@ (80035d0 <main+0x2a4>)
 800340a:	2200      	movs	r2, #0
 800340c:	5e9b      	ldrsh	r3, [r3, r2]
 800340e:	0018      	movs	r0, r3
 8003410:	f004 fb46 	bl	8007aa0 <lis2dw12_from_fs2_to_mg>
 8003414:	1c02      	adds	r2, r0, #0
 8003416:	4b6f      	ldr	r3, [pc, #444]	@ (80035d4 <main+0x2a8>)
 8003418:	601a      	str	r2, [r3, #0]
						data_raw_acceleration[0]);
				acceleration_mg[1] = lis2dw12_from_fs2_to_mg(
 800341a:	4b6d      	ldr	r3, [pc, #436]	@ (80035d0 <main+0x2a4>)
 800341c:	2202      	movs	r2, #2
 800341e:	5e9b      	ldrsh	r3, [r3, r2]
 8003420:	0018      	movs	r0, r3
 8003422:	f004 fb3d 	bl	8007aa0 <lis2dw12_from_fs2_to_mg>
 8003426:	1c02      	adds	r2, r0, #0
 8003428:	4b6a      	ldr	r3, [pc, #424]	@ (80035d4 <main+0x2a8>)
 800342a:	605a      	str	r2, [r3, #4]
						data_raw_acceleration[1]);
				acceleration_mg[2] = lis2dw12_from_fs2_to_mg(
 800342c:	4b68      	ldr	r3, [pc, #416]	@ (80035d0 <main+0x2a4>)
 800342e:	2204      	movs	r2, #4
 8003430:	5e9b      	ldrsh	r3, [r3, r2]
 8003432:	0018      	movs	r0, r3
 8003434:	f004 fb34 	bl	8007aa0 <lis2dw12_from_fs2_to_mg>
 8003438:	1c02      	adds	r2, r0, #0
 800343a:	4b66      	ldr	r3, [pc, #408]	@ (80035d4 <main+0x2a8>)
 800343c:	609a      	str	r2, [r3, #8]
						data_raw_acceleration[2]);
			}
		}
		if (SysClkTim._750msn == 1) {
 800343e:	4b63      	ldr	r3, [pc, #396]	@ (80035cc <main+0x2a0>)
 8003440:	799b      	ldrb	r3, [r3, #6]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d121      	bne.n	800348a <main+0x15e>
			HAL_ADC_Start(&hadc1);
 8003446:	4b64      	ldr	r3, [pc, #400]	@ (80035d8 <main+0x2ac>)
 8003448:	0018      	movs	r0, r3
 800344a:	f001 f9d3 	bl	80047f4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 50); //reading values from the Temperature sensor with ADC
 800344e:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <main+0x2ac>)
 8003450:	2132      	movs	r1, #50	@ 0x32
 8003452:	0018      	movs	r0, r3
 8003454:	f001 fa58 	bl	8004908 <HAL_ADC_PollForConversion>
			adcValues[2] = HAL_ADC_GetValue(&hadc1);
 8003458:	4b5f      	ldr	r3, [pc, #380]	@ (80035d8 <main+0x2ac>)
 800345a:	0018      	movs	r0, r3
 800345c:	f001 fae8 	bl	8004a30 <HAL_ADC_GetValue>
 8003460:	0002      	movs	r2, r0
 8003462:	4b5e      	ldr	r3, [pc, #376]	@ (80035dc <main+0x2b0>)
 8003464:	609a      	str	r2, [r3, #8]
			HAL_ADC_Stop(&hadc1);
 8003466:	4b5c      	ldr	r3, [pc, #368]	@ (80035d8 <main+0x2ac>)
 8003468:	0018      	movs	r0, r3
 800346a:	f001 fa11 	bl	8004890 <HAL_ADC_Stop>
			Temp1 = Termistor(adcValues[2]) - 10;
 800346e:	4b5b      	ldr	r3, [pc, #364]	@ (80035dc <main+0x2b0>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff fe42 	bl	80030fc <Termistor>
 8003478:	2200      	movs	r2, #0
 800347a:	4b59      	ldr	r3, [pc, #356]	@ (80035e0 <main+0x2b4>)
 800347c:	f7ff f890 	bl	80025a0 <__aeabi_dsub>
 8003480:	0002      	movs	r2, r0
 8003482:	000b      	movs	r3, r1
 8003484:	4957      	ldr	r1, [pc, #348]	@ (80035e4 <main+0x2b8>)
 8003486:	600a      	str	r2, [r1, #0]
 8003488:	604b      	str	r3, [r1, #4]
		}

		angle = calculateAngles(acceleration_mg[1], acceleration_mg[0],
 800348a:	4b52      	ldr	r3, [pc, #328]	@ (80035d4 <main+0x2a8>)
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	4b51      	ldr	r3, [pc, #324]	@ (80035d4 <main+0x2a8>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b50      	ldr	r3, [pc, #320]	@ (80035d4 <main+0x2a8>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4c54      	ldr	r4, [pc, #336]	@ (80035e8 <main+0x2bc>)
 8003498:	0038      	movs	r0, r7
 800349a:	f7ff fea7 	bl	80031ec <calculateAngles>
 800349e:	003a      	movs	r2, r7
 80034a0:	0023      	movs	r3, r4
 80034a2:	ca03      	ldmia	r2!, {r0, r1}
 80034a4:	c303      	stmia	r3!, {r0, r1}
				acceleration_mg[2]);

		if (SysClkTim._750msn == 1)  // 500 ms aralıkla veri okuma
 80034a6:	4b49      	ldr	r3, [pc, #292]	@ (80035cc <main+0x2a0>)
 80034a8:	799b      	ldrb	r3, [r3, #6]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d15c      	bne.n	8003568 <main+0x23c>
				{
			if ((int) angle.pitch == 0 && (int) angle.roll == 0) {
 80034ae:	4b4e      	ldr	r3, [pc, #312]	@ (80035e8 <main+0x2bc>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	1c18      	adds	r0, r3, #0
 80034b4:	f7fd fd1e 	bl	8000ef4 <__aeabi_f2iz>
 80034b8:	1e03      	subs	r3, r0, #0
 80034ba:	d113      	bne.n	80034e4 <main+0x1b8>
 80034bc:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <main+0x2bc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1c18      	adds	r0, r3, #0
 80034c2:	f7fd fd17 	bl	8000ef4 <__aeabi_f2iz>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d10c      	bne.n	80034e4 <main+0x1b8>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, Active);
 80034ca:	4b48      	ldr	r3, [pc, #288]	@ (80035ec <main+0x2c0>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	2104      	movs	r1, #4
 80034d0:	0018      	movs	r0, r3
 80034d2:	f001 ffd7 	bl	8005484 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, Active);
 80034d6:	4b45      	ldr	r3, [pc, #276]	@ (80035ec <main+0x2c0>)
 80034d8:	2201      	movs	r2, #1
 80034da:	2102      	movs	r1, #2
 80034dc:	0018      	movs	r0, r3
 80034de:	f001 ffd1 	bl	8005484 <HAL_GPIO_WritePin>
 80034e2:	e041      	b.n	8003568 <main+0x23c>
			} else if ((int) angle.pitch == 0 && (int) angle.roll != 0) {
 80034e4:	4b40      	ldr	r3, [pc, #256]	@ (80035e8 <main+0x2bc>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	1c18      	adds	r0, r3, #0
 80034ea:	f7fd fd03 	bl	8000ef4 <__aeabi_f2iz>
 80034ee:	1e03      	subs	r3, r0, #0
 80034f0:	d113      	bne.n	800351a <main+0x1ee>
 80034f2:	4b3d      	ldr	r3, [pc, #244]	@ (80035e8 <main+0x2bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1c18      	adds	r0, r3, #0
 80034f8:	f7fd fcfc 	bl	8000ef4 <__aeabi_f2iz>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d00c      	beq.n	800351a <main+0x1ee>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, Active);
 8003500:	4b3a      	ldr	r3, [pc, #232]	@ (80035ec <main+0x2c0>)
 8003502:	2201      	movs	r2, #1
 8003504:	2104      	movs	r1, #4
 8003506:	0018      	movs	r0, r3
 8003508:	f001 ffbc 	bl	8005484 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, Passive);
 800350c:	4b37      	ldr	r3, [pc, #220]	@ (80035ec <main+0x2c0>)
 800350e:	2200      	movs	r2, #0
 8003510:	2102      	movs	r1, #2
 8003512:	0018      	movs	r0, r3
 8003514:	f001 ffb6 	bl	8005484 <HAL_GPIO_WritePin>
 8003518:	e026      	b.n	8003568 <main+0x23c>
			} else if ((int) angle.pitch != 0 && (int) angle.roll == 0) {
 800351a:	4b33      	ldr	r3, [pc, #204]	@ (80035e8 <main+0x2bc>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	1c18      	adds	r0, r3, #0
 8003520:	f7fd fce8 	bl	8000ef4 <__aeabi_f2iz>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d013      	beq.n	8003550 <main+0x224>
 8003528:	4b2f      	ldr	r3, [pc, #188]	@ (80035e8 <main+0x2bc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1c18      	adds	r0, r3, #0
 800352e:	f7fd fce1 	bl	8000ef4 <__aeabi_f2iz>
 8003532:	1e03      	subs	r3, r0, #0
 8003534:	d10c      	bne.n	8003550 <main+0x224>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, Passive);
 8003536:	4b2d      	ldr	r3, [pc, #180]	@ (80035ec <main+0x2c0>)
 8003538:	2200      	movs	r2, #0
 800353a:	2104      	movs	r1, #4
 800353c:	0018      	movs	r0, r3
 800353e:	f001 ffa1 	bl	8005484 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, Active);
 8003542:	4b2a      	ldr	r3, [pc, #168]	@ (80035ec <main+0x2c0>)
 8003544:	2201      	movs	r2, #1
 8003546:	2102      	movs	r1, #2
 8003548:	0018      	movs	r0, r3
 800354a:	f001 ff9b 	bl	8005484 <HAL_GPIO_WritePin>
 800354e:	e00b      	b.n	8003568 <main+0x23c>
			} else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, Passive);
 8003550:	4b26      	ldr	r3, [pc, #152]	@ (80035ec <main+0x2c0>)
 8003552:	2200      	movs	r2, #0
 8003554:	2104      	movs	r1, #4
 8003556:	0018      	movs	r0, r3
 8003558:	f001 ff94 	bl	8005484 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, Passive);
 800355c:	4b23      	ldr	r3, [pc, #140]	@ (80035ec <main+0x2c0>)
 800355e:	2200      	movs	r2, #0
 8003560:	2102      	movs	r1, #2
 8003562:	0018      	movs	r0, r3
 8003564:	f001 ff8e 	bl	8005484 <HAL_GPIO_WritePin>

	     // Verileri alt alta gelecek şekilde formatla
	        sprintf(buffer,
	                "Roll  Angle:%f\n"
	                "Pitch Angle:%f\n",
	                angle.roll,
 8003568:	4b1f      	ldr	r3, [pc, #124]	@ (80035e8 <main+0x2bc>)
 800356a:	681b      	ldr	r3, [r3, #0]
	        sprintf(buffer,
 800356c:	1c18      	adds	r0, r3, #0
 800356e:	f7ff fcd1 	bl	8002f14 <__aeabi_f2d>
 8003572:	0004      	movs	r4, r0
 8003574:	000d      	movs	r5, r1
	                angle.pitch);
 8003576:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <main+0x2bc>)
 8003578:	685b      	ldr	r3, [r3, #4]
	        sprintf(buffer,
 800357a:	1c18      	adds	r0, r3, #0
 800357c:	f7ff fcca 	bl	8002f14 <__aeabi_f2d>
 8003580:	0002      	movs	r2, r0
 8003582:	000b      	movs	r3, r1
 8003584:	491a      	ldr	r1, [pc, #104]	@ (80035f0 <main+0x2c4>)
 8003586:	481b      	ldr	r0, [pc, #108]	@ (80035f4 <main+0x2c8>)
 8003588:	9200      	str	r2, [sp, #0]
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	0022      	movs	r2, r4
 800358e:	002b      	movs	r3, r5
 8003590:	f005 fa36 	bl	8008a00 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8003594:	4b17      	ldr	r3, [pc, #92]	@ (80035f4 <main+0x2c8>)
 8003596:	0018      	movs	r0, r3
 8003598:	f7fc fdb2 	bl	8000100 <strlen>
 800359c:	0003      	movs	r3, r0
 800359e:	b29a      	uxth	r2, r3
 80035a0:	2301      	movs	r3, #1
 80035a2:	425b      	negs	r3, r3
 80035a4:	4913      	ldr	r1, [pc, #76]	@ (80035f4 <main+0x2c8>)
 80035a6:	4814      	ldr	r0, [pc, #80]	@ (80035f8 <main+0x2cc>)
 80035a8:	f003 fdf6 	bl	8007198 <HAL_UART_Transmit>
		HAL_Delay(250);
 80035ac:	20fa      	movs	r0, #250	@ 0xfa
 80035ae:	f000 fdeb 	bl	8004188 <HAL_Delay>
		if (SysClkTim._750msn == 1)  // 500 ms aralıkla veri okuma
 80035b2:	e708      	b.n	80033c6 <main+0x9a>
 80035b4:	20000380 	.word	0x20000380
 80035b8:	08003b29 	.word	0x08003b29
 80035bc:	08003b71 	.word	0x08003b71
 80035c0:	20000264 	.word	0x20000264
 80035c4:	200003a4 	.word	0x200003a4
 80035c8:	200003a5 	.word	0x200003a5
 80035cc:	200003a8 	.word	0x200003a8
 80035d0:	20000390 	.word	0x20000390
 80035d4:	20000398 	.word	0x20000398
 80035d8:	20000200 	.word	0x20000200
 80035dc:	200003f0 	.word	0x200003f0
 80035e0:	40240000 	.word	0x40240000
 80035e4:	200001f8 	.word	0x200001f8
 80035e8:	200003b4 	.word	0x200003b4
 80035ec:	50000c00 	.word	0x50000c00
 80035f0:	0800b7f8 	.word	0x0800b7f8
 80035f4:	200003bc 	.word	0x200003bc
 80035f8:	200002e4 	.word	0x200002e4

080035fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b093      	sub	sp, #76	@ 0x4c
 8003600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003602:	2414      	movs	r4, #20
 8003604:	193b      	adds	r3, r7, r4
 8003606:	0018      	movs	r0, r3
 8003608:	2334      	movs	r3, #52	@ 0x34
 800360a:	001a      	movs	r2, r3
 800360c:	2100      	movs	r1, #0
 800360e:	f005 fa77 	bl	8008b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	0018      	movs	r0, r3
 8003616:	2310      	movs	r3, #16
 8003618:	001a      	movs	r2, r3
 800361a:	2100      	movs	r1, #0
 800361c:	f005 fa70 	bl	8008b00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	0018      	movs	r0, r3
 8003626:	f002 fde7 	bl	80061f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800362a:	193b      	adds	r3, r7, r4
 800362c:	220a      	movs	r2, #10
 800362e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003630:	193b      	adds	r3, r7, r4
 8003632:	2280      	movs	r2, #128	@ 0x80
 8003634:	0052      	lsls	r2, r2, #1
 8003636:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003638:	0021      	movs	r1, r4
 800363a:	187b      	adds	r3, r7, r1
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003640:	187b      	adds	r3, r7, r1
 8003642:	2240      	movs	r2, #64	@ 0x40
 8003644:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003646:	187b      	adds	r3, r7, r1
 8003648:	2201      	movs	r2, #1
 800364a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2200      	movs	r2, #0
 8003650:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003652:	187b      	adds	r3, r7, r1
 8003654:	0018      	movs	r0, r3
 8003656:	f002 fe1b 	bl	8006290 <HAL_RCC_OscConfig>
 800365a:	1e03      	subs	r3, r0, #0
 800365c:	d001      	beq.n	8003662 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800365e:	f000 faab 	bl	8003bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	2100      	movs	r1, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f003 f916 	bl	80068b0 <HAL_RCC_ClockConfig>
 8003684:	1e03      	subs	r3, r0, #0
 8003686:	d001      	beq.n	800368c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003688:	f000 fa96 	bl	8003bb8 <Error_Handler>
  }
}
 800368c:	46c0      	nop			@ (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b013      	add	sp, #76	@ 0x4c
 8003692:	bd90      	pop	{r4, r7, pc}

08003694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	0018      	movs	r0, r3
 800369e:	230c      	movs	r3, #12
 80036a0:	001a      	movs	r2, r3
 80036a2:	2100      	movs	r1, #0
 80036a4:	f005 fa2c 	bl	8008b00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003764 <MX_ADC1_Init+0xd0>)
 80036ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036b0:	2280      	movs	r2, #128	@ 0x80
 80036b2:	05d2      	lsls	r2, r2, #23
 80036b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036bc:	4b28      	ldr	r3, [pc, #160]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036c2:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036c8:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036ca:	2204      	movs	r2, #4
 80036cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036ce:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80036d4:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80036da:	4b21      	ldr	r3, [pc, #132]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036dc:	2200      	movs	r2, #0
 80036de:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80036e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036e8:	2220      	movs	r2, #32
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036fa:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <MX_ADC1_Init+0xcc>)
 80036fc:	222c      	movs	r2, #44	@ 0x2c
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003702:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <MX_ADC1_Init+0xcc>)
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003708:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <MX_ADC1_Init+0xcc>)
 800370a:	2200      	movs	r2, #0
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800370e:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <MX_ADC1_Init+0xcc>)
 8003710:	2200      	movs	r2, #0
 8003712:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003714:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <MX_ADC1_Init+0xcc>)
 8003716:	223c      	movs	r2, #60	@ 0x3c
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <MX_ADC1_Init+0xcc>)
 800371e:	2200      	movs	r2, #0
 8003720:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003722:	4b0f      	ldr	r3, [pc, #60]	@ (8003760 <MX_ADC1_Init+0xcc>)
 8003724:	0018      	movs	r0, r3
 8003726:	f000 febd 	bl	80044a4 <HAL_ADC_Init>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800372e:	f000 fa43 	bl	8003bb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	4a0c      	ldr	r2, [pc, #48]	@ (8003768 <MX_ADC1_Init+0xd4>)
 8003736:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	2200      	movs	r2, #0
 800373c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800373e:	1d3b      	adds	r3, r7, #4
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003744:	1d3a      	adds	r2, r7, #4
 8003746:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <MX_ADC1_Init+0xcc>)
 8003748:	0011      	movs	r1, r2
 800374a:	0018      	movs	r0, r3
 800374c:	f001 f97c 	bl	8004a48 <HAL_ADC_ConfigChannel>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d001      	beq.n	8003758 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003754:	f000 fa30 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003758:	46c0      	nop			@ (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b004      	add	sp, #16
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000200 	.word	0x20000200
 8003764:	40012400 	.word	0x40012400
 8003768:	10000010 	.word	0x10000010

0800376c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003770:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <MX_I2C1_Init+0x74>)
 8003772:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <MX_I2C1_Init+0x78>)
 8003774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003776:	4b1a      	ldr	r3, [pc, #104]	@ (80037e0 <MX_I2C1_Init+0x74>)
 8003778:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <MX_I2C1_Init+0x7c>)
 800377a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800377c:	4b18      	ldr	r3, [pc, #96]	@ (80037e0 <MX_I2C1_Init+0x74>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003782:	4b17      	ldr	r3, [pc, #92]	@ (80037e0 <MX_I2C1_Init+0x74>)
 8003784:	2201      	movs	r2, #1
 8003786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003788:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <MX_I2C1_Init+0x74>)
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800378e:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <MX_I2C1_Init+0x74>)
 8003790:	2200      	movs	r2, #0
 8003792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003794:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <MX_I2C1_Init+0x74>)
 8003796:	2200      	movs	r2, #0
 8003798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800379a:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <MX_I2C1_Init+0x74>)
 800379c:	2200      	movs	r2, #0
 800379e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037a0:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <MX_I2C1_Init+0x74>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037a6:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <MX_I2C1_Init+0x74>)
 80037a8:	0018      	movs	r0, r3
 80037aa:	f001 fe89 	bl	80054c0 <HAL_I2C_Init>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d001      	beq.n	80037b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80037b2:	f000 fa01 	bl	8003bb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <MX_I2C1_Init+0x74>)
 80037b8:	2100      	movs	r1, #0
 80037ba:	0018      	movs	r0, r3
 80037bc:	f002 fc84 	bl	80060c8 <HAL_I2CEx_ConfigAnalogFilter>
 80037c0:	1e03      	subs	r3, r0, #0
 80037c2:	d001      	beq.n	80037c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80037c4:	f000 f9f8 	bl	8003bb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <MX_I2C1_Init+0x74>)
 80037ca:	2100      	movs	r1, #0
 80037cc:	0018      	movs	r0, r3
 80037ce:	f002 fcc7 	bl	8006160 <HAL_I2CEx_ConfigDigitalFilter>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80037d6:	f000 f9ef 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000264 	.word	0x20000264
 80037e4:	40005400 	.word	0x40005400
 80037e8:	00503d58 	.word	0x00503d58

080037ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037f0:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <MX_RTC_Init+0x54>)
 80037f2:	4a14      	ldr	r2, [pc, #80]	@ (8003844 <MX_RTC_Init+0x58>)
 80037f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037f6:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <MX_RTC_Init+0x54>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80037fc:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <MX_RTC_Init+0x54>)
 80037fe:	227f      	movs	r2, #127	@ 0x7f
 8003800:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8003802:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <MX_RTC_Init+0x54>)
 8003804:	22ff      	movs	r2, #255	@ 0xff
 8003806:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003808:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <MX_RTC_Init+0x54>)
 800380a:	2200      	movs	r2, #0
 800380c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800380e:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <MX_RTC_Init+0x54>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003814:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <MX_RTC_Init+0x54>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <MX_RTC_Init+0x54>)
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	05d2      	lsls	r2, r2, #23
 8003820:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <MX_RTC_Init+0x54>)
 8003824:	2200      	movs	r2, #0
 8003826:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <MX_RTC_Init+0x54>)
 800382a:	0018      	movs	r0, r3
 800382c:	f003 fb10 	bl	8006e50 <HAL_RTC_Init>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d001      	beq.n	8003838 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8003834:	f000 f9c0 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	200002b8 	.word	0x200002b8
 8003844:	40002800 	.word	0x40002800

08003848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800384c:	4b16      	ldr	r3, [pc, #88]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 800384e:	4a17      	ldr	r2, [pc, #92]	@ (80038ac <MX_USART2_UART_Init+0x64>)
 8003850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 8003854:	22e1      	movs	r2, #225	@ 0xe1
 8003856:	0252      	lsls	r2, r2, #9
 8003858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800385a:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003860:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800386c:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 800386e:	220c      	movs	r2, #12
 8003870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003878:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800387e:	4b0a      	ldr	r3, [pc, #40]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 8003886:	2200      	movs	r2, #0
 8003888:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800388a:	4b07      	ldr	r3, [pc, #28]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 800388c:	2200      	movs	r2, #0
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <MX_USART2_UART_Init+0x60>)
 8003892:	0018      	movs	r0, r3
 8003894:	f003 fc2a 	bl	80070ec <HAL_UART_Init>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d001      	beq.n	80038a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800389c:	f000 f98c 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	200002e4 	.word	0x200002e4
 80038ac:	40004400 	.word	0x40004400

080038b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b08b      	sub	sp, #44	@ 0x2c
 80038b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b6:	2414      	movs	r4, #20
 80038b8:	193b      	adds	r3, r7, r4
 80038ba:	0018      	movs	r0, r3
 80038bc:	2314      	movs	r3, #20
 80038be:	001a      	movs	r2, r3
 80038c0:	2100      	movs	r1, #0
 80038c2:	f005 f91d 	bl	8008b00 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038c6:	4b3f      	ldr	r3, [pc, #252]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ca:	4b3e      	ldr	r3, [pc, #248]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038cc:	2120      	movs	r1, #32
 80038ce:	430a      	orrs	r2, r1
 80038d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80038d2:	4b3c      	ldr	r3, [pc, #240]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d6:	2220      	movs	r2, #32
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	4b39      	ldr	r3, [pc, #228]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038e2:	4b38      	ldr	r3, [pc, #224]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038e4:	2101      	movs	r1, #1
 80038e6:	430a      	orrs	r2, r1
 80038e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80038ea:	4b36      	ldr	r3, [pc, #216]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ee:	2201      	movs	r2, #1
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f6:	4b33      	ldr	r3, [pc, #204]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038fa:	4b32      	ldr	r3, [pc, #200]	@ (80039c4 <MX_GPIO_Init+0x114>)
 80038fc:	2102      	movs	r1, #2
 80038fe:	430a      	orrs	r2, r1
 8003900:	635a      	str	r2, [r3, #52]	@ 0x34
 8003902:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <MX_GPIO_Init+0x114>)
 8003904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800390e:	4b2d      	ldr	r3, [pc, #180]	@ (80039c4 <MX_GPIO_Init+0x114>)
 8003910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003912:	4b2c      	ldr	r3, [pc, #176]	@ (80039c4 <MX_GPIO_Init+0x114>)
 8003914:	2108      	movs	r1, #8
 8003916:	430a      	orrs	r2, r1
 8003918:	635a      	str	r2, [r3, #52]	@ 0x34
 800391a:	4b2a      	ldr	r3, [pc, #168]	@ (80039c4 <MX_GPIO_Init+0x114>)
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	2208      	movs	r2, #8
 8003920:	4013      	ands	r3, r2
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin, GPIO_PIN_RESET);
 8003926:	4928      	ldr	r1, [pc, #160]	@ (80039c8 <MX_GPIO_Init+0x118>)
 8003928:	23a0      	movs	r3, #160	@ 0xa0
 800392a:	05db      	lsls	r3, r3, #23
 800392c:	2200      	movs	r2, #0
 800392e:	0018      	movs	r0, r3
 8003930:	f001 fda8 	bl	8005484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 8003934:	4925      	ldr	r1, [pc, #148]	@ (80039cc <MX_GPIO_Init+0x11c>)
 8003936:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <MX_GPIO_Init+0x120>)
 8003938:	2200      	movs	r2, #0
 800393a:	0018      	movs	r0, r3
 800393c:	f001 fda2 	bl	8005484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin, GPIO_PIN_RESET);
 8003940:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <MX_GPIO_Init+0x124>)
 8003942:	2200      	movs	r2, #0
 8003944:	210f      	movs	r1, #15
 8003946:	0018      	movs	r0, r3
 8003948:	f001 fd9c 	bl	8005484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_R_Pin RGB_G_Pin LED1_RED_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin;
 800394c:	193b      	adds	r3, r7, r4
 800394e:	4a1e      	ldr	r2, [pc, #120]	@ (80039c8 <MX_GPIO_Init+0x118>)
 8003950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003952:	193b      	adds	r3, r7, r4
 8003954:	2201      	movs	r2, #1
 8003956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	193b      	adds	r3, r7, r4
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395e:	193b      	adds	r3, r7, r4
 8003960:	2200      	movs	r2, #0
 8003962:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	193a      	adds	r2, r7, r4
 8003966:	23a0      	movs	r3, #160	@ 0xa0
 8003968:	05db      	lsls	r3, r3, #23
 800396a:	0011      	movs	r1, r2
 800396c:	0018      	movs	r0, r3
 800396e:	f001 fc25 	bl	80051bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RGB_B_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RGB_B_Pin;
 8003972:	193b      	adds	r3, r7, r4
 8003974:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <MX_GPIO_Init+0x11c>)
 8003976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003978:	193b      	adds	r3, r7, r4
 800397a:	2201      	movs	r2, #1
 800397c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	193b      	adds	r3, r7, r4
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003984:	193b      	adds	r3, r7, r4
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398a:	193b      	adds	r3, r7, r4
 800398c:	4a10      	ldr	r2, [pc, #64]	@ (80039d0 <MX_GPIO_Init+0x120>)
 800398e:	0019      	movs	r1, r3
 8003990:	0010      	movs	r0, r2
 8003992:	f001 fc13 	bl	80051bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_GREEN_Pin LED3_BLUE_Pin LED4_WHITE_Pin LED5_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin;
 8003996:	0021      	movs	r1, r4
 8003998:	187b      	adds	r3, r7, r1
 800399a:	220f      	movs	r2, #15
 800399c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	2201      	movs	r2, #1
 80039a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2200      	movs	r2, #0
 80039ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	4a08      	ldr	r2, [pc, #32]	@ (80039d4 <MX_GPIO_Init+0x124>)
 80039b4:	0019      	movs	r1, r3
 80039b6:	0010      	movs	r0, r2
 80039b8:	f001 fc00 	bl	80051bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b00b      	add	sp, #44	@ 0x2c
 80039c2:	bd90      	pop	{r4, r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	00008140 	.word	0x00008140
 80039cc:	00001008 	.word	0x00001008
 80039d0:	50000400 	.word	0x50000400
 80039d4:	50000c00 	.word	0x50000c00

080039d8 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
// SysTick Zamanlayıcı Geri Çağırma Fonksiyonu
void HAL_SYSTICK_Callback(void) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	SYSTickTimer++;
 80039dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2001      	movs	r0, #1
 80039e4:	2100      	movs	r1, #0
 80039e6:	1812      	adds	r2, r2, r0
 80039e8:	414b      	adcs	r3, r1
 80039ea:	494b      	ldr	r1, [pc, #300]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 80039ec:	600a      	str	r2, [r1, #0]
 80039ee:	604b      	str	r3, [r1, #4]

	if (SYSTickTimer % 1 == 0) {
 80039f0:	4b49      	ldr	r3, [pc, #292]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
		SysClkTim._1msn = 1;
 80039f6:	4b49      	ldr	r3, [pc, #292]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
	}
	if (SYSTickTimer % 10 == 0) {
 80039fc:	4b46      	ldr	r3, [pc, #280]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	220a      	movs	r2, #10
 8003a04:	2300      	movs	r3, #0
 8003a06:	f7fc fd85 	bl	8000514 <__aeabi_uldivmod>
 8003a0a:	0010      	movs	r0, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	0003      	movs	r3, r0
 8003a10:	430b      	orrs	r3, r1
 8003a12:	d102      	bne.n	8003a1a <HAL_SYSTICK_Callback+0x42>
		SysClkTim._10msn = 1;
 8003a14:	4b41      	ldr	r3, [pc, #260]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	705a      	strb	r2, [r3, #1]
	}
	if (SYSTickTimer % 50 == 0) {
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	2232      	movs	r2, #50	@ 0x32
 8003a22:	2300      	movs	r3, #0
 8003a24:	f7fc fd76 	bl	8000514 <__aeabi_uldivmod>
 8003a28:	0010      	movs	r0, r2
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	d102      	bne.n	8003a38 <HAL_SYSTICK_Callback+0x60>
		SysClkTim._50msn = 1;
 8003a32:	4b3a      	ldr	r3, [pc, #232]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	709a      	strb	r2, [r3, #2]
	}
	if (SYSTickTimer % 100 == 0) {
 8003a38:	4b37      	ldr	r3, [pc, #220]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
 8003a3e:	2264      	movs	r2, #100	@ 0x64
 8003a40:	2300      	movs	r3, #0
 8003a42:	f7fc fd67 	bl	8000514 <__aeabi_uldivmod>
 8003a46:	0010      	movs	r0, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	d102      	bne.n	8003a56 <HAL_SYSTICK_Callback+0x7e>
		SysClkTim._100msn = 1;
 8003a50:	4b32      	ldr	r3, [pc, #200]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	70da      	strb	r2, [r3, #3]
	}
	if (SYSTickTimer % 250 == 0) {
 8003a56:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	22fa      	movs	r2, #250	@ 0xfa
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f7fc fd58 	bl	8000514 <__aeabi_uldivmod>
 8003a64:	0010      	movs	r0, r2
 8003a66:	0019      	movs	r1, r3
 8003a68:	0003      	movs	r3, r0
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	d102      	bne.n	8003a74 <HAL_SYSTICK_Callback+0x9c>
		SysClkTim._250msn = 1;
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	711a      	strb	r2, [r3, #4]
	}
	if (SYSTickTimer % 500 == 0) {
 8003a74:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	22fa      	movs	r2, #250	@ 0xfa
 8003a7c:	0052      	lsls	r2, r2, #1
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f7fc fd48 	bl	8000514 <__aeabi_uldivmod>
 8003a84:	0010      	movs	r0, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	0003      	movs	r3, r0
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	d102      	bne.n	8003a94 <HAL_SYSTICK_Callback+0xbc>
		SysClkTim._500msn = 1;
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	715a      	strb	r2, [r3, #5]
	}
	if (SYSTickTimer % 750 == 0) {
 8003a94:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003a96:	6818      	ldr	r0, [r3, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	4a21      	ldr	r2, [pc, #132]	@ (8003b20 <HAL_SYSTICK_Callback+0x148>)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f7fc fd39 	bl	8000514 <__aeabi_uldivmod>
 8003aa2:	0010      	movs	r0, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	d102      	bne.n	8003ab2 <HAL_SYSTICK_Callback+0xda>
		SysClkTim._750msn = 1;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	719a      	strb	r2, [r3, #6]
	}
	if (SYSTickTimer % 1000 == 0) {
 8003ab2:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	22fa      	movs	r2, #250	@ 0xfa
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	2300      	movs	r3, #0
 8003abe:	f7fc fd29 	bl	8000514 <__aeabi_uldivmod>
 8003ac2:	0010      	movs	r0, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	d102      	bne.n	8003ad2 <HAL_SYSTICK_Callback+0xfa>
		SysClkTim._1sn = 1;
 8003acc:	4b13      	ldr	r3, [pc, #76]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	71da      	strb	r2, [r3, #7]
	}
	if (SYSTickTimer % 2000 == 0) {
 8003ad2:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	22fa      	movs	r2, #250	@ 0xfa
 8003ada:	00d2      	lsls	r2, r2, #3
 8003adc:	2300      	movs	r3, #0
 8003ade:	f7fc fd19 	bl	8000514 <__aeabi_uldivmod>
 8003ae2:	0010      	movs	r0, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	d102      	bne.n	8003af2 <HAL_SYSTICK_Callback+0x11a>
		SysClkTim._2sn = 1;
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	721a      	strb	r2, [r3, #8]
	}
	if (SYSTickTimer % 5000 == 0) {
 8003af2:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <HAL_SYSTICK_Callback+0x140>)
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_SYSTICK_Callback+0x14c>)
 8003afa:	2300      	movs	r3, #0
 8003afc:	f7fc fd0a 	bl	8000514 <__aeabi_uldivmod>
 8003b00:	0010      	movs	r0, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	0003      	movs	r3, r0
 8003b06:	430b      	orrs	r3, r1
 8003b08:	d102      	bne.n	8003b10 <HAL_SYSTICK_Callback+0x138>
		SysClkTim._5sn = 1;
 8003b0a:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <HAL_SYSTICK_Callback+0x144>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	725a      	strb	r2, [r3, #9]
	}

}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	20000378 	.word	0x20000378
 8003b1c:	200003a8 	.word	0x200003a8
 8003b20:	000002ee 	.word	0x000002ee
 8003b24:	00001388 	.word	0x00001388

08003b28 <platform_write>:
//platform_write ve platform_read Fonksiyonları
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len) {
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af04      	add	r7, sp, #16
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	0008      	movs	r0, r1
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	0019      	movs	r1, r3
 8003b36:	240b      	movs	r4, #11
 8003b38:	193b      	adds	r3, r7, r4
 8003b3a:	1c02      	adds	r2, r0, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	2508      	movs	r5, #8
 8003b40:	197b      	adds	r3, r7, r5
 8003b42:	1c0a      	adds	r2, r1, #0
 8003b44:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg,
 8003b46:	193b      	adds	r3, r7, r4
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	23fa      	movs	r3, #250	@ 0xfa
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	9302      	str	r3, [sp, #8]
 8003b54:	197b      	adds	r3, r7, r5
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2301      	movs	r3, #1
 8003b60:	2133      	movs	r1, #51	@ 0x33
 8003b62:	f001 fd53 	bl	800560c <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);

	return 0;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b004      	add	sp, #16
 8003b6e:	bdb0      	pop	{r4, r5, r7, pc}

08003b70 <platform_read>:
 * @param reg register to read
 * @param bufp pointer to buffer that store the data read
 * @param len number of consecutive register to read
 *
 */static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8003b70:	b5b0      	push	{r4, r5, r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af04      	add	r7, sp, #16
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	0008      	movs	r0, r1
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	240b      	movs	r4, #11
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	1c02      	adds	r2, r0, #0
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	2508      	movs	r5, #8
 8003b88:	197b      	adds	r3, r7, r5
 8003b8a:	1c0a      	adds	r2, r1, #0
 8003b8c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg,
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	23fa      	movs	r3, #250	@ 0xfa
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	197b      	adds	r3, r7, r5
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	2133      	movs	r1, #51	@ 0x33
 8003baa:	f001 fe5d 	bl	8005868 <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b004      	add	sp, #16
 8003bb6:	bdb0      	pop	{r4, r5, r7, pc}

08003bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bbc:	b672      	cpsid	i
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	e7fd      	b.n	8003bc0 <Error_Handler+0x8>

08003bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bce:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_MspInit+0x44>)
 8003be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003be6:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <HAL_MspInit+0x44>)
 8003be8:	2180      	movs	r1, #128	@ 0x80
 8003bea:	0549      	lsls	r1, r1, #21
 8003bec:	430a      	orrs	r2, r1
 8003bee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_MspInit+0x44>)
 8003bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf4:	2380      	movs	r3, #128	@ 0x80
 8003bf6:	055b      	lsls	r3, r3, #21
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	40021000 	.word	0x40021000

08003c0c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b08b      	sub	sp, #44	@ 0x2c
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c14:	2414      	movs	r4, #20
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	0018      	movs	r0, r3
 8003c1a:	2314      	movs	r3, #20
 8003c1c:	001a      	movs	r2, r3
 8003c1e:	2100      	movs	r1, #0
 8003c20:	f004 ff6e 	bl	8008b00 <memset>
  if(hadc->Instance==ADC1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a18      	ldr	r2, [pc, #96]	@ (8003c8c <HAL_ADC_MspInit+0x80>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d129      	bne.n	8003c82 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003c2e:	4b18      	ldr	r3, [pc, #96]	@ (8003c90 <HAL_ADC_MspInit+0x84>)
 8003c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c32:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <HAL_ADC_MspInit+0x84>)
 8003c34:	2180      	movs	r1, #128	@ 0x80
 8003c36:	0349      	lsls	r1, r1, #13
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c3c:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <HAL_ADC_MspInit+0x84>)
 8003c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c40:	2380      	movs	r3, #128	@ 0x80
 8003c42:	035b      	lsls	r3, r3, #13
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4a:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <HAL_ADC_MspInit+0x84>)
 8003c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <HAL_ADC_MspInit+0x84>)
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c56:	4b0e      	ldr	r3, [pc, #56]	@ (8003c90 <HAL_ADC_MspInit+0x84>)
 8003c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = A1_IN4_NTC_Pin;
 8003c62:	193b      	adds	r3, r7, r4
 8003c64:	2210      	movs	r2, #16
 8003c66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c68:	193b      	adds	r3, r7, r4
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(A1_IN4_NTC_GPIO_Port, &GPIO_InitStruct);
 8003c74:	193a      	adds	r2, r7, r4
 8003c76:	23a0      	movs	r3, #160	@ 0xa0
 8003c78:	05db      	lsls	r3, r3, #23
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f001 fa9d 	bl	80051bc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b00b      	add	sp, #44	@ 0x2c
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	40012400 	.word	0x40012400
 8003c90:	40021000 	.word	0x40021000

08003c94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b091      	sub	sp, #68	@ 0x44
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	232c      	movs	r3, #44	@ 0x2c
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	2314      	movs	r3, #20
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f004 ff2a 	bl	8008b00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cac:	2414      	movs	r4, #20
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	2318      	movs	r3, #24
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f004 ff22 	bl	8008b00 <memset>
  if(hi2c->Instance==I2C1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	@ (8003d4c <HAL_I2C_MspInit+0xb8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d13d      	bne.n	8003d42 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	2220      	movs	r2, #32
 8003cca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ccc:	193b      	adds	r3, r7, r4
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cd2:	193b      	adds	r3, r7, r4
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f002 ff95 	bl	8006c04 <HAL_RCCEx_PeriphCLKConfig>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003cde:	f7ff ff6b 	bl	8003bb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <HAL_I2C_MspInit+0xbc>)
 8003ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d50 <HAL_I2C_MspInit+0xbc>)
 8003ce8:	2102      	movs	r1, #2
 8003cea:	430a      	orrs	r2, r1
 8003cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cee:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <HAL_I2C_MspInit+0xbc>)
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cfa:	212c      	movs	r1, #44	@ 0x2c
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	22c0      	movs	r2, #192	@ 0xc0
 8003d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	2212      	movs	r2, #18
 8003d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	2200      	movs	r2, #0
 8003d12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	2206      	movs	r2, #6
 8003d18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <HAL_I2C_MspInit+0xc0>)
 8003d1e:	0019      	movs	r1, r3
 8003d20:	0010      	movs	r0, r2
 8003d22:	f001 fa4b 	bl	80051bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d26:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <HAL_I2C_MspInit+0xbc>)
 8003d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d2a:	4b09      	ldr	r3, [pc, #36]	@ (8003d50 <HAL_I2C_MspInit+0xbc>)
 8003d2c:	2180      	movs	r1, #128	@ 0x80
 8003d2e:	0389      	lsls	r1, r1, #14
 8003d30:	430a      	orrs	r2, r1
 8003d32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_I2C_MspInit+0xbc>)
 8003d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	039b      	lsls	r3, r3, #14
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b011      	add	sp, #68	@ 0x44
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	40005400 	.word	0x40005400
 8003d50:	40021000 	.word	0x40021000
 8003d54:	50000400 	.word	0x50000400

08003d58 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b08b      	sub	sp, #44	@ 0x2c
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d60:	2410      	movs	r4, #16
 8003d62:	193b      	adds	r3, r7, r4
 8003d64:	0018      	movs	r0, r3
 8003d66:	2318      	movs	r3, #24
 8003d68:	001a      	movs	r2, r3
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f004 fec8 	bl	8008b00 <memset>
  if(hrtc->Instance==RTC)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a15      	ldr	r2, [pc, #84]	@ (8003dcc <HAL_RTC_MspInit+0x74>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d124      	bne.n	8003dc4 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	2280      	movs	r2, #128	@ 0x80
 8003d7e:	0292      	lsls	r2, r2, #10
 8003d80:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	2280      	movs	r2, #128	@ 0x80
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	f002 ff39 	bl	8006c04 <HAL_RCCEx_PeriphCLKConfig>
 8003d92:	1e03      	subs	r3, r0, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003d96:	f7ff ff0f 	bl	8003bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <HAL_RTC_MspInit+0x78>)
 8003d9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <HAL_RTC_MspInit+0x78>)
 8003da0:	2180      	movs	r1, #128	@ 0x80
 8003da2:	0209      	lsls	r1, r1, #8
 8003da4:	430a      	orrs	r2, r1
 8003da6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_RTC_MspInit+0x78>)
 8003daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dac:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <HAL_RTC_MspInit+0x78>)
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	00c9      	lsls	r1, r1, #3
 8003db2:	430a      	orrs	r2, r1
 8003db4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RTC_MspInit+0x78>)
 8003db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dba:	2380      	movs	r3, #128	@ 0x80
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b00b      	add	sp, #44	@ 0x2c
 8003dca:	bd90      	pop	{r4, r7, pc}
 8003dcc:	40002800 	.word	0x40002800
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b08b      	sub	sp, #44	@ 0x2c
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	2414      	movs	r4, #20
 8003dde:	193b      	adds	r3, r7, r4
 8003de0:	0018      	movs	r0, r3
 8003de2:	2314      	movs	r3, #20
 8003de4:	001a      	movs	r2, r3
 8003de6:	2100      	movs	r1, #0
 8003de8:	f004 fe8a 	bl	8008b00 <memset>
  if(huart->Instance==USART2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e60 <HAL_UART_MspInit+0x8c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d130      	bne.n	8003e58 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003df6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <HAL_UART_MspInit+0x90>)
 8003df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <HAL_UART_MspInit+0x90>)
 8003dfc:	2180      	movs	r1, #128	@ 0x80
 8003dfe:	0289      	lsls	r1, r1, #10
 8003e00:	430a      	orrs	r2, r1
 8003e02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e04:	4b17      	ldr	r3, [pc, #92]	@ (8003e64 <HAL_UART_MspInit+0x90>)
 8003e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e12:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <HAL_UART_MspInit+0x90>)
 8003e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e16:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <HAL_UART_MspInit+0x90>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <HAL_UART_MspInit+0x90>)
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e22:	2201      	movs	r2, #1
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e2a:	0021      	movs	r1, r4
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	220c      	movs	r2, #12
 8003e30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	2202      	movs	r2, #2
 8003e36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	2200      	movs	r2, #0
 8003e42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003e44:	187b      	adds	r3, r7, r1
 8003e46:	2201      	movs	r2, #1
 8003e48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4a:	187a      	adds	r2, r7, r1
 8003e4c:	23a0      	movs	r3, #160	@ 0xa0
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f001 f9b2 	bl	80051bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b00b      	add	sp, #44	@ 0x2c
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	40004400 	.word	0x40004400
 8003e64:	40021000 	.word	0x40021000

08003e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	e7fd      	b.n	8003e6c <NMI_Handler+0x4>

08003e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	e7fd      	b.n	8003e74 <HardFault_Handler+0x4>

08003e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e7c:	46c0      	nop			@ (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e90:	f000 f95e 	bl	8004150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003e94:	f001 f98a 	bl	80051ac <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	af00      	add	r7, sp, #0
  return 1;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_kill>:

int _kill(int pid, int sig)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eb4:	f004 fe7e 	bl	8008bb4 <__errno>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	2216      	movs	r2, #22
 8003ebc:	601a      	str	r2, [r3, #0]
  return -1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	425b      	negs	r3, r3
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_exit>:

void _exit (int status)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	425a      	negs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff ffe5 	bl	8003eaa <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	e7fd      	b.n	8003ee0 <_exit+0x16>

08003ee4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e00a      	b.n	8003f0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ef6:	e000      	b.n	8003efa <_read+0x16>
 8003ef8:	bf00      	nop
 8003efa:	0001      	movs	r1, r0
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	60ba      	str	r2, [r7, #8]
 8003f02:	b2ca      	uxtb	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	dbf0      	blt.n	8003ef6 <_read+0x12>
  }

  return len;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b006      	add	sp, #24
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e009      	b.n	8003f44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	60ba      	str	r2, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	e000      	b.n	8003f3e <_write+0x20>
 8003f3c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	dbf1      	blt.n	8003f30 <_write+0x12>
  }
  return len;
 8003f4c:	687b      	ldr	r3, [r7, #4]
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b006      	add	sp, #24
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_close>:

int _close(int file)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	425b      	negs	r3, r3
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2280      	movs	r2, #128	@ 0x80
 8003f78:	0192      	lsls	r2, r2, #6
 8003f7a:	605a      	str	r2, [r3, #4]
  return 0;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b002      	add	sp, #8
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <_isatty>:

int _isatty(int file)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f8e:	2301      	movs	r3, #1
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b004      	add	sp, #16
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb8:	4a14      	ldr	r2, [pc, #80]	@ (800400c <_sbrk+0x5c>)
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <_sbrk+0x60>)
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc4:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <_sbrk+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <_sbrk+0x64>)
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <_sbrk+0x68>)
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <_sbrk+0x64>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	18d3      	adds	r3, r2, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d207      	bcs.n	8003ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fe0:	f004 fde8 	bl	8008bb4 <__errno>
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fea:	2301      	movs	r3, #1
 8003fec:	425b      	negs	r3, r3
 8003fee:	e009      	b.n	8004004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ff0:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <_sbrk+0x64>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff6:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <_sbrk+0x64>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	18d2      	adds	r2, r2, r3
 8003ffe:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <_sbrk+0x64>)
 8004000:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004002:	68fb      	ldr	r3, [r7, #12]
}
 8004004:	0018      	movs	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	b006      	add	sp, #24
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20002000 	.word	0x20002000
 8004010:	00000400 	.word	0x00000400
 8004014:	20000418 	.word	0x20000418
 8004018:	20000570 	.word	0x20000570

0800401c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004028:	480d      	ldr	r0, [pc, #52]	@ (8004060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800402a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800402c:	f7ff fff6 	bl	800401c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004030:	480c      	ldr	r0, [pc, #48]	@ (8004064 <LoopForever+0x6>)
  ldr r1, =_edata
 8004032:	490d      	ldr	r1, [pc, #52]	@ (8004068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004034:	4a0d      	ldr	r2, [pc, #52]	@ (800406c <LoopForever+0xe>)
  movs r3, #0
 8004036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004038:	e002      	b.n	8004040 <LoopCopyDataInit>

0800403a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800403a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800403c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403e:	3304      	adds	r3, #4

08004040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004044:	d3f9      	bcc.n	800403a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004046:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004048:	4c0a      	ldr	r4, [pc, #40]	@ (8004074 <LoopForever+0x16>)
  movs r3, #0
 800404a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800404c:	e001      	b.n	8004052 <LoopFillZerobss>

0800404e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004050:	3204      	adds	r2, #4

08004052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004054:	d3fb      	bcc.n	800404e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004056:	f004 fdb3 	bl	8008bc0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800405a:	f7ff f967 	bl	800332c <main>

0800405e <LoopForever>:

LoopForever:
  b LoopForever
 800405e:	e7fe      	b.n	800405e <LoopForever>
  ldr   r0, =_estack
 8004060:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004068:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800406c:	0800bcd8 	.word	0x0800bcd8
  ldr r2, =_sbss
 8004070:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004074:	2000056c 	.word	0x2000056c

08004078 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004078:	e7fe      	b.n	8004078 <ADC1_IRQHandler>
	...

0800407c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004082:	1dfb      	adds	r3, r7, #7
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_Init+0x3c>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <HAL_Init+0x3c>)
 800408e:	2180      	movs	r1, #128	@ 0x80
 8004090:	0049      	lsls	r1, r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004096:	2003      	movs	r0, #3
 8004098:	f000 f810 	bl	80040bc <HAL_InitTick>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d003      	beq.n	80040a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	e001      	b.n	80040ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80040a8:	f7ff fd8c 	bl	8003bc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	781b      	ldrb	r3, [r3, #0]
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b002      	add	sp, #8
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40022000 	.word	0x40022000

080040bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040c4:	230f      	movs	r3, #15
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80040cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_InitTick+0x88>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d02b      	beq.n	800412c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80040d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004148 <HAL_InitTick+0x8c>)
 80040d6:	681c      	ldr	r4, [r3, #0]
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_InitTick+0x88>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	0019      	movs	r1, r3
 80040de:	23fa      	movs	r3, #250	@ 0xfa
 80040e0:	0098      	lsls	r0, r3, #2
 80040e2:	f7fc f829 	bl	8000138 <__udivsi3>
 80040e6:	0003      	movs	r3, r0
 80040e8:	0019      	movs	r1, r3
 80040ea:	0020      	movs	r0, r4
 80040ec:	f7fc f824 	bl	8000138 <__udivsi3>
 80040f0:	0003      	movs	r3, r0
 80040f2:	0018      	movs	r0, r3
 80040f4:	f001 f84d 	bl	8005192 <HAL_SYSTICK_Config>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d112      	bne.n	8004122 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d80a      	bhi.n	8004118 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	2301      	movs	r3, #1
 8004106:	425b      	negs	r3, r3
 8004108:	2200      	movs	r2, #0
 800410a:	0018      	movs	r0, r3
 800410c:	f001 f82c 	bl	8005168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004110:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <HAL_InitTick+0x90>)
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e00d      	b.n	8004134 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004118:	230f      	movs	r3, #15
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e008      	b.n	8004134 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004122:	230f      	movs	r3, #15
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e003      	b.n	8004134 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800412c:	230f      	movs	r3, #15
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004134:	230f      	movs	r3, #15
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	781b      	ldrb	r3, [r3, #0]
}
 800413a:	0018      	movs	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	b005      	add	sp, #20
 8004140:	bd90      	pop	{r4, r7, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	20000008 	.word	0x20000008
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004154:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_IncTick+0x1c>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	001a      	movs	r2, r3
 800415a:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_IncTick+0x20>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	18d2      	adds	r2, r2, r3
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <HAL_IncTick+0x20>)
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	20000008 	.word	0x20000008
 8004170:	2000041c 	.word	0x2000041c

08004174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  return uwTick;
 8004178:	4b02      	ldr	r3, [pc, #8]	@ (8004184 <HAL_GetTick+0x10>)
 800417a:	681b      	ldr	r3, [r3, #0]
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	2000041c 	.word	0x2000041c

08004188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004190:	f7ff fff0 	bl	8004174 <HAL_GetTick>
 8004194:	0003      	movs	r3, r0
 8004196:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	d005      	beq.n	80041ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <HAL_Delay+0x44>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	001a      	movs	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	f7ff ffe0 	bl	8004174 <HAL_GetTick>
 80041b4:	0002      	movs	r2, r0
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d8f7      	bhi.n	80041b0 <HAL_Delay+0x28>
  {
  }
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	20000008 	.word	0x20000008

080041d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a05      	ldr	r2, [pc, #20]	@ (80041f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80041e0:	401a      	ands	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	601a      	str	r2, [r3, #0]
}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b002      	add	sp, #8
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	fe3fffff 	.word	0xfe3fffff

080041f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	23e0      	movs	r3, #224	@ 0xe0
 8004206:	045b      	lsls	r3, r3, #17
 8004208:	4013      	ands	r3, r2
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b002      	add	sp, #8
 8004210:	bd80      	pop	{r7, pc}

08004212 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	2104      	movs	r1, #4
 8004226:	400a      	ands	r2, r1
 8004228:	2107      	movs	r1, #7
 800422a:	4091      	lsls	r1, r2
 800422c:	000a      	movs	r2, r1
 800422e:	43d2      	mvns	r2, r2
 8004230:	401a      	ands	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2104      	movs	r1, #4
 8004236:	400b      	ands	r3, r1
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4099      	lsls	r1, r3
 800423c:	000b      	movs	r3, r1
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b004      	add	sp, #16
 800424a:	bd80      	pop	{r7, pc}

0800424c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	2104      	movs	r1, #4
 800425e:	400a      	ands	r2, r1
 8004260:	2107      	movs	r1, #7
 8004262:	4091      	lsls	r1, r2
 8004264:	000a      	movs	r2, r1
 8004266:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2104      	movs	r1, #4
 800426c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800426e:	40da      	lsrs	r2, r3
 8004270:	0013      	movs	r3, r2
}
 8004272:	0018      	movs	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	b002      	add	sp, #8
 8004278:	bd80      	pop	{r7, pc}

0800427a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	23c0      	movs	r3, #192	@ 0xc0
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4013      	ands	r3, r2
 800428c:	d101      	bne.n	8004292 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004292:	2300      	movs	r3, #0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}

0800429c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	211f      	movs	r1, #31
 80042b0:	400a      	ands	r2, r1
 80042b2:	210f      	movs	r1, #15
 80042b4:	4091      	lsls	r1, r2
 80042b6:	000a      	movs	r2, r1
 80042b8:	43d2      	mvns	r2, r2
 80042ba:	401a      	ands	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	0e9b      	lsrs	r3, r3, #26
 80042c0:	210f      	movs	r1, #15
 80042c2:	4019      	ands	r1, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	201f      	movs	r0, #31
 80042c8:	4003      	ands	r3, r0
 80042ca:	4099      	lsls	r1, r3
 80042cc:	000b      	movs	r3, r1
 80042ce:	431a      	orrs	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bd80      	pop	{r7, pc}

080042dc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	035b      	lsls	r3, r3, #13
 80042ee:	0b5b      	lsrs	r3, r3, #13
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b002      	add	sp, #8
 80042fc:	bd80      	pop	{r7, pc}

080042fe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	0352      	lsls	r2, r2, #13
 8004310:	0b52      	lsrs	r2, r2, #13
 8004312:	43d2      	mvns	r2, r2
 8004314:	401a      	ands	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b002      	add	sp, #8
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	0212      	lsls	r2, r2, #8
 8004338:	43d2      	mvns	r2, r2
 800433a:	401a      	ands	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	400b      	ands	r3, r1
 8004344:	4904      	ldr	r1, [pc, #16]	@ (8004358 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004346:	400b      	ands	r3, r1
 8004348:	431a      	orrs	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	07ffff00 	.word	0x07ffff00

0800435c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a05      	ldr	r2, [pc, #20]	@ (8004380 <LL_ADC_EnableInternalRegulator+0x24>)
 800436a:	4013      	ands	r3, r2
 800436c:	2280      	movs	r2, #128	@ 0x80
 800436e:	0552      	lsls	r2, r2, #21
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	b002      	add	sp, #8
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	6fffffe8 	.word	0x6fffffe8

08004384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	055b      	lsls	r3, r3, #21
 8004394:	401a      	ands	r2, r3
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	055b      	lsls	r3, r3, #21
 800439a:	429a      	cmp	r2, r3
 800439c:	d101      	bne.n	80043a2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}

080043ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a04      	ldr	r2, [pc, #16]	@ (80043cc <LL_ADC_Enable+0x20>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	2201      	movs	r2, #1
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b002      	add	sp, #8
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	7fffffe8 	.word	0x7fffffe8

080043d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <LL_ADC_Disable+0x20>)
 80043de:	4013      	ands	r3, r2
 80043e0:	2202      	movs	r2, #2
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80043e8:	46c0      	nop			@ (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	7fffffe8 	.word	0x7fffffe8

080043f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2201      	movs	r2, #1
 8004402:	4013      	ands	r3, r2
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <LL_ADC_IsEnabled+0x18>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <LL_ADC_IsEnabled+0x1a>
 800440c:	2300      	movs	r3, #0
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b002      	add	sp, #8
 8004414:	bd80      	pop	{r7, pc}

08004416 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2202      	movs	r2, #2
 8004424:	4013      	ands	r3, r2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d101      	bne.n	800442e <LL_ADC_IsDisableOngoing+0x18>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <LL_ADC_IsDisableOngoing+0x1a>
 800442e:	2300      	movs	r3, #0
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}

08004438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a04      	ldr	r2, [pc, #16]	@ (8004458 <LL_ADC_REG_StartConversion+0x20>)
 8004446:	4013      	ands	r3, r2
 8004448:	2204      	movs	r2, #4
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}
 8004458:	7fffffe8 	.word	0x7fffffe8

0800445c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a04      	ldr	r2, [pc, #16]	@ (800447c <LL_ADC_REG_StopConversion+0x20>)
 800446a:	4013      	ands	r3, r2
 800446c:	2210      	movs	r2, #16
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}
 800447c:	7fffffe8 	.word	0x7fffffe8

08004480 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2204      	movs	r2, #4
 800448e:	4013      	ands	r3, r2
 8004490:	2b04      	cmp	r3, #4
 8004492:	d101      	bne.n	8004498 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	0018      	movs	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	b002      	add	sp, #8
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ac:	231f      	movs	r3, #31
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e17f      	b.n	80047ca <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff fb99 	bl	8003c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2254      	movs	r2, #84	@ 0x54
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7ff ff49 	bl	8004384 <LL_ADC_IsInternalRegulatorEnabled>
 80044f2:	1e03      	subs	r3, r0, #0
 80044f4:	d115      	bne.n	8004522 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7ff ff2e 	bl	800435c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004500:	4bb4      	ldr	r3, [pc, #720]	@ (80047d4 <HAL_ADC_Init+0x330>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	49b4      	ldr	r1, [pc, #720]	@ (80047d8 <HAL_ADC_Init+0x334>)
 8004506:	0018      	movs	r0, r3
 8004508:	f7fb fe16 	bl	8000138 <__udivsi3>
 800450c:	0003      	movs	r3, r0
 800450e:	3301      	adds	r3, #1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004514:	e002      	b.n	800451c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3b01      	subs	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f9      	bne.n	8004516 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0018      	movs	r0, r3
 8004528:	f7ff ff2c 	bl	8004384 <LL_ADC_IsInternalRegulatorEnabled>
 800452c:	1e03      	subs	r3, r0, #0
 800452e:	d10f      	bne.n	8004550 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004534:	2210      	movs	r2, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004540:	2201      	movs	r2, #1
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004548:	231f      	movs	r3, #31
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0018      	movs	r0, r3
 8004556:	f7ff ff93 	bl	8004480 <LL_ADC_REG_IsConversionOngoing>
 800455a:	0003      	movs	r3, r0
 800455c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	2210      	movs	r2, #16
 8004564:	4013      	ands	r3, r2
 8004566:	d000      	beq.n	800456a <HAL_ADC_Init+0xc6>
 8004568:	e122      	b.n	80047b0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d000      	beq.n	8004572 <HAL_ADC_Init+0xce>
 8004570:	e11e      	b.n	80047b0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	4a99      	ldr	r2, [pc, #612]	@ (80047dc <HAL_ADC_Init+0x338>)
 8004578:	4013      	ands	r3, r2
 800457a:	2202      	movs	r2, #2
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff ff34 	bl	80043f4 <LL_ADC_IsEnabled>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d000      	beq.n	8004592 <HAL_ADC_Init+0xee>
 8004590:	e0ad      	b.n	80046ee <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7e1b      	ldrb	r3, [r3, #24]
 800459a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800459c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	7e5b      	ldrb	r3, [r3, #25]
 80045a2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80045a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7e9b      	ldrb	r3, [r3, #26]
 80045aa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80045ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_ADC_Init+0x118>
 80045b6:	2380      	movs	r3, #128	@ 0x80
 80045b8:	015b      	lsls	r3, r3, #5
 80045ba:	e000      	b.n	80045be <HAL_ADC_Init+0x11a>
 80045bc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80045be:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80045c4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	da04      	bge.n	80045d8 <HAL_ADC_Init+0x134>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	085b      	lsrs	r3, r3, #1
 80045d6:	e001      	b.n	80045dc <HAL_ADC_Init+0x138>
 80045d8:	2380      	movs	r3, #128	@ 0x80
 80045da:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80045dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	212c      	movs	r1, #44	@ 0x2c
 80045e2:	5c5b      	ldrb	r3, [r3, r1]
 80045e4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80045e6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d115      	bne.n	8004624 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7e9b      	ldrb	r3, [r3, #26]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2280      	movs	r2, #128	@ 0x80
 8004604:	0252      	lsls	r2, r2, #9
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e00b      	b.n	8004624 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	2220      	movs	r2, #32
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461c:	2201      	movs	r2, #1
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004630:	23e0      	movs	r3, #224	@ 0xe0
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800463a:	4313      	orrs	r3, r2
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a65      	ldr	r2, [pc, #404]	@ (80047e0 <HAL_ADC_Init+0x33c>)
 800464a:	4013      	ands	r3, r2
 800464c:	0019      	movs	r1, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	430a      	orrs	r2, r1
 8004656:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	0f9b      	lsrs	r3, r3, #30
 800465e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004664:	4313      	orrs	r3, r2
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	223c      	movs	r2, #60	@ 0x3c
 8004670:	5c9b      	ldrb	r3, [r3, r2]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d111      	bne.n	800469a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	0f9b      	lsrs	r3, r3, #30
 800467c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004682:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004688:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800468e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	2201      	movs	r2, #1
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	4a50      	ldr	r2, [pc, #320]	@ (80047e4 <HAL_ADC_Init+0x340>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	23c0      	movs	r3, #192	@ 0xc0
 80046b6:	061b      	lsls	r3, r3, #24
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d018      	beq.n	80046ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	05db      	lsls	r3, r3, #23
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d012      	beq.n	80046ee <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	061b      	lsls	r3, r3, #24
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d00c      	beq.n	80046ee <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80046d4:	4b44      	ldr	r3, [pc, #272]	@ (80047e8 <HAL_ADC_Init+0x344>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a44      	ldr	r2, [pc, #272]	@ (80047ec <HAL_ADC_Init+0x348>)
 80046da:	4013      	ands	r3, r2
 80046dc:	0019      	movs	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	23f0      	movs	r3, #240	@ 0xf0
 80046e4:	039b      	lsls	r3, r3, #14
 80046e6:	401a      	ands	r2, r3
 80046e8:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_ADC_Init+0x344>)
 80046ea:	430a      	orrs	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f6:	001a      	movs	r2, r3
 80046f8:	2100      	movs	r1, #0
 80046fa:	f7ff fd8a 	bl	8004212 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	493a      	ldr	r1, [pc, #232]	@ (80047f0 <HAL_ADC_Init+0x34c>)
 8004708:	001a      	movs	r2, r3
 800470a:	f7ff fd82 	bl	8004212 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2110      	movs	r1, #16
 8004722:	4249      	negs	r1, r1
 8004724:	430a      	orrs	r2, r1
 8004726:	629a      	str	r2, [r3, #40]	@ 0x28
 8004728:	e018      	b.n	800475c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	039b      	lsls	r3, r3, #14
 8004732:	429a      	cmp	r2, r3
 8004734:	d112      	bne.n	800475c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	3b01      	subs	r3, #1
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	221c      	movs	r2, #28
 8004746:	4013      	ands	r3, r2
 8004748:	2210      	movs	r2, #16
 800474a:	4252      	negs	r2, r2
 800474c:	409a      	lsls	r2, r3
 800474e:	0011      	movs	r1, r2
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2100      	movs	r1, #0
 8004762:	0018      	movs	r0, r3
 8004764:	f7ff fd72 	bl	800424c <LL_ADC_GetSamplingTimeCommonChannels>
 8004768:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800476e:	429a      	cmp	r2, r3
 8004770:	d10b      	bne.n	800478a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	2203      	movs	r2, #3
 800477e:	4393      	bics	r3, r2
 8004780:	2201      	movs	r2, #1
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004788:	e01c      	b.n	80047c4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	2212      	movs	r2, #18
 8004790:	4393      	bics	r3, r2
 8004792:	2210      	movs	r2, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	2201      	movs	r2, #1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80047a6:	231f      	movs	r3, #31
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047ae:	e009      	b.n	80047c4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b4:	2210      	movs	r2, #16
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80047bc:	231f      	movs	r3, #31
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80047c4:	231f      	movs	r3, #31
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	781b      	ldrb	r3, [r3, #0]
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b008      	add	sp, #32
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	20000000 	.word	0x20000000
 80047d8:	00030d40 	.word	0x00030d40
 80047dc:	fffffefd 	.word	0xfffffefd
 80047e0:	ffde0201 	.word	0xffde0201
 80047e4:	1ffffc02 	.word	0x1ffffc02
 80047e8:	40012708 	.word	0x40012708
 80047ec:	ffc3ffff 	.word	0xffc3ffff
 80047f0:	07ffff04 	.word	0x07ffff04

080047f4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80047f4:	b5b0      	push	{r4, r5, r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff fe3d 	bl	8004480 <LL_ADC_REG_IsConversionOngoing>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d135      	bne.n	8004876 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2254      	movs	r2, #84	@ 0x54
 800480e:	5c9b      	ldrb	r3, [r3, r2]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_ADC_Start+0x24>
 8004814:	2302      	movs	r3, #2
 8004816:	e035      	b.n	8004884 <HAL_ADC_Start+0x90>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2254      	movs	r2, #84	@ 0x54
 800481c:	2101      	movs	r1, #1
 800481e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004820:	250f      	movs	r5, #15
 8004822:	197c      	adds	r4, r7, r5
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	0018      	movs	r0, r3
 8004828:	f000 fb28 	bl	8004e7c <ADC_Enable>
 800482c:	0003      	movs	r3, r0
 800482e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004830:	197b      	adds	r3, r7, r5
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d119      	bne.n	800486c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483c:	4a13      	ldr	r2, [pc, #76]	@ (800488c <HAL_ADC_Start+0x98>)
 800483e:	4013      	ands	r3, r2
 8004840:	2280      	movs	r2, #128	@ 0x80
 8004842:	0052      	lsls	r2, r2, #1
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	221c      	movs	r2, #28
 8004856:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2254      	movs	r2, #84	@ 0x54
 800485c:	2100      	movs	r1, #0
 800485e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0018      	movs	r0, r3
 8004866:	f7ff fde7 	bl	8004438 <LL_ADC_REG_StartConversion>
 800486a:	e008      	b.n	800487e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2254      	movs	r2, #84	@ 0x54
 8004870:	2100      	movs	r1, #0
 8004872:	5499      	strb	r1, [r3, r2]
 8004874:	e003      	b.n	800487e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004876:	230f      	movs	r3, #15
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2202      	movs	r2, #2
 800487c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800487e:	230f      	movs	r3, #15
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	781b      	ldrb	r3, [r3, #0]
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b004      	add	sp, #16
 800488a:	bdb0      	pop	{r4, r5, r7, pc}
 800488c:	fffff0fe 	.word	0xfffff0fe

08004890 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004890:	b5b0      	push	{r4, r5, r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2254      	movs	r2, #84	@ 0x54
 800489c:	5c9b      	ldrb	r3, [r3, r2]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_ADC_Stop+0x16>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e029      	b.n	80048fa <HAL_ADC_Stop+0x6a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2254      	movs	r2, #84	@ 0x54
 80048aa:	2101      	movs	r1, #1
 80048ac:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80048ae:	250f      	movs	r5, #15
 80048b0:	197c      	adds	r4, r7, r5
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fa9f 	bl	8004df8 <ADC_ConversionStop>
 80048ba:	0003      	movs	r3, r0
 80048bc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80048be:	197b      	adds	r3, r7, r5
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d112      	bne.n	80048ec <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80048c6:	197c      	adds	r4, r7, r5
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fb5c 	bl	8004f88 <ADC_Disable>
 80048d0:	0003      	movs	r3, r0
 80048d2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80048d4:	197b      	adds	r3, r7, r5
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	4a08      	ldr	r2, [pc, #32]	@ (8004904 <HAL_ADC_Stop+0x74>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	2201      	movs	r2, #1
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2254      	movs	r2, #84	@ 0x54
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80048f4:	230f      	movs	r3, #15
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	781b      	ldrb	r3, [r3, #0]
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b004      	add	sp, #16
 8004900:	bdb0      	pop	{r4, r5, r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	fffffefe 	.word	0xfffffefe

08004908 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d102      	bne.n	8004920 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800491a:	2308      	movs	r3, #8
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e00f      	b.n	8004940 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	4013      	ands	r3, r2
 800492a:	d007      	beq.n	800493c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004930:	2220      	movs	r2, #32
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e072      	b.n	8004a22 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800493c:	2304      	movs	r3, #4
 800493e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004940:	f7ff fc18 	bl	8004174 <HAL_GetTick>
 8004944:	0003      	movs	r3, r0
 8004946:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004948:	e01f      	b.n	800498a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	3301      	adds	r3, #1
 800494e:	d01c      	beq.n	800498a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004950:	f7ff fc10 	bl	8004174 <HAL_GetTick>
 8004954:	0002      	movs	r2, r0
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <HAL_ADC_PollForConversion+0x5e>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d111      	bne.n	800498a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4013      	ands	r3, r2
 8004970:	d10b      	bne.n	800498a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	2204      	movs	r2, #4
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2254      	movs	r2, #84	@ 0x54
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e04b      	b.n	8004a22 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4013      	ands	r3, r2
 8004994:	d0d9      	beq.n	800494a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499a:	2280      	movs	r2, #128	@ 0x80
 800499c:	0092      	lsls	r2, r2, #2
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff fc66 	bl	800427a <LL_ADC_REG_IsTriggerSourceSWStart>
 80049ae:	1e03      	subs	r3, r0, #0
 80049b0:	d02e      	beq.n	8004a10 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7e9b      	ldrb	r3, [r3, #26]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d12a      	bne.n	8004a10 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2208      	movs	r2, #8
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d123      	bne.n	8004a10 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff fd57 	bl	8004480 <LL_ADC_REG_IsConversionOngoing>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d110      	bne.n	80049f8 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	210c      	movs	r1, #12
 80049e2:	438a      	bics	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ea:	4a10      	ldr	r2, [pc, #64]	@ (8004a2c <HAL_ADC_PollForConversion+0x124>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	2201      	movs	r2, #1
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80049f6:	e00b      	b.n	8004a10 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fc:	2220      	movs	r2, #32
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	2201      	movs	r2, #1
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7e1b      	ldrb	r3, [r3, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	220c      	movs	r2, #12
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b004      	add	sp, #16
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	fffffefe 	.word	0xfffffefe

08004a30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b002      	add	sp, #8
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a52:	2317      	movs	r3, #23
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2254      	movs	r2, #84	@ 0x54
 8004a62:	5c9b      	ldrb	r3, [r3, r2]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x24>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e1c0      	b.n	8004dee <HAL_ADC_ConfigChannel+0x3a6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2254      	movs	r2, #84	@ 0x54
 8004a70:	2101      	movs	r1, #1
 8004a72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7ff fd01 	bl	8004480 <LL_ADC_REG_IsConversionOngoing>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d000      	beq.n	8004a84 <HAL_ADC_ConfigChannel+0x3c>
 8004a82:	e1a3      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d100      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x46>
 8004a8c:	e143      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d004      	beq.n	8004aa4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004a9e:	4ac1      	ldr	r2, [pc, #772]	@ (8004da4 <HAL_ADC_ConfigChannel+0x35c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0019      	movs	r1, r3
 8004aae:	0010      	movs	r0, r2
 8004ab0:	f7ff fc14 	bl	80042dc <LL_ADC_REG_SetSequencerChAdd>
 8004ab4:	e0c9      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	211f      	movs	r1, #31
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	210f      	movs	r1, #15
 8004ac4:	4099      	lsls	r1, r3
 8004ac6:	000b      	movs	r3, r1
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	4013      	ands	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	035b      	lsls	r3, r3, #13
 8004ad4:	0b5b      	lsrs	r3, r3, #13
 8004ad6:	d105      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x9c>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0e9b      	lsrs	r3, r3, #26
 8004ade:	221f      	movs	r2, #31
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	e098      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	4013      	ands	r3, r2
 8004aec:	d000      	beq.n	8004af0 <HAL_ADC_ConfigChannel+0xa8>
 8004aee:	e091      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x1cc>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2202      	movs	r2, #2
 8004af6:	4013      	ands	r3, r2
 8004af8:	d000      	beq.n	8004afc <HAL_ADC_ConfigChannel+0xb4>
 8004afa:	e089      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x1c8>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2204      	movs	r2, #4
 8004b02:	4013      	ands	r3, r2
 8004b04:	d000      	beq.n	8004b08 <HAL_ADC_ConfigChannel+0xc0>
 8004b06:	e081      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x1c4>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d000      	beq.n	8004b14 <HAL_ADC_ConfigChannel+0xcc>
 8004b12:	e079      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x1c0>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d000      	beq.n	8004b20 <HAL_ADC_ConfigChannel+0xd8>
 8004b1e:	e071      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x1bc>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2220      	movs	r2, #32
 8004b26:	4013      	ands	r3, r2
 8004b28:	d000      	beq.n	8004b2c <HAL_ADC_ConfigChannel+0xe4>
 8004b2a:	e069      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x1b8>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2240      	movs	r2, #64	@ 0x40
 8004b32:	4013      	ands	r3, r2
 8004b34:	d000      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0xf0>
 8004b36:	e061      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x1b4>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2280      	movs	r2, #128	@ 0x80
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d000      	beq.n	8004b44 <HAL_ADC_ConfigChannel+0xfc>
 8004b42:	e059      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x1b0>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	@ 0x80
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d151      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x1ac>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d149      	bne.n	8004bf0 <HAL_ADC_ConfigChannel+0x1a8>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	2380      	movs	r3, #128	@ 0x80
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4013      	ands	r3, r2
 8004b66:	d141      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x1a4>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	4013      	ands	r3, r2
 8004b72:	d139      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x1a0>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	@ 0x80
 8004b7a:	015b      	lsls	r3, r3, #5
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d131      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x19c>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	019b      	lsls	r3, r3, #6
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d129      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x198>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	@ 0x80
 8004b92:	01db      	lsls	r3, r3, #7
 8004b94:	4013      	ands	r3, r2
 8004b96:	d121      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x194>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d119      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x190>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	025b      	lsls	r3, r3, #9
 8004bac:	4013      	ands	r3, r2
 8004bae:	d111      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x18c>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	@ 0x80
 8004bb6:	029b      	lsls	r3, r3, #10
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d109      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x188>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	02db      	lsls	r3, r3, #11
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d001      	beq.n	8004bcc <HAL_ADC_ConfigChannel+0x184>
 8004bc8:	2312      	movs	r3, #18
 8004bca:	e024      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e022      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bd0:	2311      	movs	r3, #17
 8004bd2:	e020      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	e01e      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bd8:	230f      	movs	r3, #15
 8004bda:	e01c      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bdc:	230e      	movs	r3, #14
 8004bde:	e01a      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004be0:	230d      	movs	r3, #13
 8004be2:	e018      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004be4:	230c      	movs	r3, #12
 8004be6:	e016      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004be8:	230b      	movs	r3, #11
 8004bea:	e014      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bec:	230a      	movs	r3, #10
 8004bee:	e012      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bf0:	2309      	movs	r3, #9
 8004bf2:	e010      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	e00e      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bf8:	2307      	movs	r3, #7
 8004bfa:	e00c      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004bfc:	2306      	movs	r3, #6
 8004bfe:	e00a      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004c00:	2305      	movs	r3, #5
 8004c02:	e008      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004c04:	2304      	movs	r3, #4
 8004c06:	e006      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e004      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e002      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x1ce>
 8004c14:	2300      	movs	r3, #0
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	6852      	ldr	r2, [r2, #4]
 8004c1a:	201f      	movs	r0, #31
 8004c1c:	4002      	ands	r2, r0
 8004c1e:	4093      	lsls	r3, r2
 8004c20:	000a      	movs	r2, r1
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	089b      	lsrs	r3, r3, #2
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d808      	bhi.n	8004c4a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	001a      	movs	r2, r3
 8004c46:	f7ff fb29 	bl	800429c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	001a      	movs	r2, r3
 8004c58:	f7ff fb64 	bl	8004324 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db00      	blt.n	8004c66 <HAL_ADC_ConfigChannel+0x21e>
 8004c64:	e0bc      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c66:	4b50      	ldr	r3, [pc, #320]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7ff fac5 	bl	80041f8 <LL_ADC_GetCommonPathInternalCh>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a4d      	ldr	r2, [pc, #308]	@ (8004dac <HAL_ADC_ConfigChannel+0x364>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d122      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	2380      	movs	r3, #128	@ 0x80
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c84:	d11d      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2280      	movs	r2, #128	@ 0x80
 8004c8a:	0412      	lsls	r2, r2, #16
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	4a46      	ldr	r2, [pc, #280]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004c90:	0019      	movs	r1, r3
 8004c92:	0010      	movs	r0, r2
 8004c94:	f7ff fa9c 	bl	80041d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c98:	4b45      	ldr	r3, [pc, #276]	@ (8004db0 <HAL_ADC_ConfigChannel+0x368>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4945      	ldr	r1, [pc, #276]	@ (8004db4 <HAL_ADC_ConfigChannel+0x36c>)
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f7fb fa4a 	bl	8000138 <__udivsi3>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	0013      	movs	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cb2:	e002      	b.n	8004cba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f9      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004cc0:	e08e      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8004db8 <HAL_ADC_ConfigChannel+0x370>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10e      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	2380      	movs	r3, #128	@ 0x80
 8004cd0:	045b      	lsls	r3, r3, #17
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d109      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2280      	movs	r2, #128	@ 0x80
 8004cda:	0452      	lsls	r2, r2, #17
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	4a32      	ldr	r2, [pc, #200]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	0010      	movs	r0, r2
 8004ce4:	f7ff fa74 	bl	80041d0 <LL_ADC_SetCommonPathInternalCh>
 8004ce8:	e07a      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <HAL_ADC_ConfigChannel+0x374>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d000      	beq.n	8004cf6 <HAL_ADC_ConfigChannel+0x2ae>
 8004cf4:	e074      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	2380      	movs	r3, #128	@ 0x80
 8004cfa:	03db      	lsls	r3, r3, #15
 8004cfc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004cfe:	d000      	beq.n	8004d02 <HAL_ADC_ConfigChannel+0x2ba>
 8004d00:	e06e      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2280      	movs	r2, #128	@ 0x80
 8004d06:	03d2      	lsls	r2, r2, #15
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	0010      	movs	r0, r2
 8004d10:	f7ff fa5e 	bl	80041d0 <LL_ADC_SetCommonPathInternalCh>
 8004d14:	e064      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	061b      	lsls	r3, r3, #24
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d004      	beq.n	8004d2c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d26:	4a1f      	ldr	r2, [pc, #124]	@ (8004da4 <HAL_ADC_ConfigChannel+0x35c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d107      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	0019      	movs	r1, r3
 8004d36:	0010      	movs	r0, r2
 8004d38:	f7ff fae1 	bl	80042fe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da4d      	bge.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d44:	4b18      	ldr	r3, [pc, #96]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004d46:	0018      	movs	r0, r3
 8004d48:	f7ff fa56 	bl	80041f8 <LL_ADC_GetCommonPathInternalCh>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a15      	ldr	r2, [pc, #84]	@ (8004dac <HAL_ADC_ConfigChannel+0x364>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <HAL_ADC_ConfigChannel+0x378>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	4a11      	ldr	r2, [pc, #68]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004d62:	0019      	movs	r1, r3
 8004d64:	0010      	movs	r0, r2
 8004d66:	f7ff fa33 	bl	80041d0 <LL_ADC_SetCommonPathInternalCh>
 8004d6a:	e039      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a11      	ldr	r2, [pc, #68]	@ (8004db8 <HAL_ADC_ConfigChannel+0x370>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <HAL_ADC_ConfigChannel+0x37c>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004d7e:	0019      	movs	r1, r3
 8004d80:	0010      	movs	r0, r2
 8004d82:	f7ff fa25 	bl	80041d0 <LL_ADC_SetCommonPathInternalCh>
 8004d86:	e02b      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004dbc <HAL_ADC_ConfigChannel+0x374>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d126      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc8 <HAL_ADC_ConfigChannel+0x380>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	4a03      	ldr	r2, [pc, #12]	@ (8004da8 <HAL_ADC_ConfigChannel+0x360>)
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	0010      	movs	r0, r2
 8004d9e:	f7ff fa17 	bl	80041d0 <LL_ADC_SetCommonPathInternalCh>
 8004da2:	e01d      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x398>
 8004da4:	80000004 	.word	0x80000004
 8004da8:	40012708 	.word	0x40012708
 8004dac:	b0001000 	.word	0xb0001000
 8004db0:	20000000 	.word	0x20000000
 8004db4:	00030d40 	.word	0x00030d40
 8004db8:	b8004000 	.word	0xb8004000
 8004dbc:	b4002000 	.word	0xb4002000
 8004dc0:	ff7fffff 	.word	0xff7fffff
 8004dc4:	feffffff 	.word	0xfeffffff
 8004dc8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004dd8:	2317      	movs	r3, #23
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2254      	movs	r2, #84	@ 0x54
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004de8:	2317      	movs	r3, #23
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	781b      	ldrb	r3, [r3, #0]
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b006      	add	sp, #24
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			@ (mov r8, r8)

08004df8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7ff fb3b 	bl	8004480 <LL_ADC_REG_IsConversionOngoing>
 8004e0a:	1e03      	subs	r3, r0, #0
 8004e0c:	d031      	beq.n	8004e72 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7ff faff 	bl	8004416 <LL_ADC_IsDisableOngoing>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d104      	bne.n	8004e26 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff fb1b 	bl	800445c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e26:	f7ff f9a5 	bl	8004174 <HAL_GetTick>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e2e:	e01a      	b.n	8004e66 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004e30:	f7ff f9a0 	bl	8004174 <HAL_GetTick>
 8004e34:	0002      	movs	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d913      	bls.n	8004e66 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2204      	movs	r2, #4
 8004e46:	4013      	ands	r3, r2
 8004e48:	d00d      	beq.n	8004e66 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4e:	2210      	movs	r2, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e006      	b.n	8004e74 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d1de      	bne.n	8004e30 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff fab1 	bl	80043f4 <LL_ADC_IsEnabled>
 8004e92:	1e03      	subs	r3, r0, #0
 8004e94:	d000      	beq.n	8004e98 <ADC_Enable+0x1c>
 8004e96:	e069      	b.n	8004f6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4a36      	ldr	r2, [pc, #216]	@ (8004f78 <ADC_Enable+0xfc>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d00d      	beq.n	8004ec0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e056      	b.n	8004f6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff fa71 	bl	80043ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004eca:	4b2c      	ldr	r3, [pc, #176]	@ (8004f7c <ADC_Enable+0x100>)
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f7ff f993 	bl	80041f8 <LL_ADC_GetCommonPathInternalCh>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	2380      	movs	r3, #128	@ 0x80
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d00f      	beq.n	8004efc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004edc:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <ADC_Enable+0x104>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4928      	ldr	r1, [pc, #160]	@ (8004f84 <ADC_Enable+0x108>)
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7fb f928 	bl	8000138 <__udivsi3>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004eec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004eee:	e002      	b.n	8004ef6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f9      	bne.n	8004ef0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	7e5b      	ldrb	r3, [r3, #25]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d033      	beq.n	8004f6c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004f04:	f7ff f936 	bl	8004174 <HAL_GetTick>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f0c:	e027      	b.n	8004f5e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f7ff fa6e 	bl	80043f4 <LL_ADC_IsEnabled>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d104      	bne.n	8004f26 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7ff fa43 	bl	80043ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f26:	f7ff f925 	bl	8004174 <HAL_GetTick>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d914      	bls.n	8004f5e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d00d      	beq.n	8004f5e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f46:	2210      	movs	r2, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	2201      	movs	r2, #1
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d1d0      	bne.n	8004f0e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b004      	add	sp, #16
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	80000017 	.word	0x80000017
 8004f7c:	40012708 	.word	0x40012708
 8004f80:	20000000 	.word	0x20000000
 8004f84:	00030d40 	.word	0x00030d40

08004f88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7ff fa3e 	bl	8004416 <LL_ADC_IsDisableOngoing>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f7ff fa26 	bl	80043f4 <LL_ADC_IsEnabled>
 8004fa8:	1e03      	subs	r3, r0, #0
 8004faa:	d046      	beq.n	800503a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d143      	bne.n	800503a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2205      	movs	r2, #5
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d10d      	bne.n	8004fdc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7ff fa03 	bl	80043d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2203      	movs	r2, #3
 8004fd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fd2:	f7ff f8cf 	bl	8004174 <HAL_GetTick>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fda:	e028      	b.n	800502e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe0:	2210      	movs	r2, #16
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fec:	2201      	movs	r2, #1
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e021      	b.n	800503c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ff8:	f7ff f8bc 	bl	8004174 <HAL_GetTick>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d913      	bls.n	800502e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2201      	movs	r2, #1
 800500e:	4013      	ands	r3, r2
 8005010:	d00d      	beq.n	800502e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005016:	2210      	movs	r2, #16
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005022:	2201      	movs	r2, #1
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e006      	b.n	800503c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2201      	movs	r2, #1
 8005036:	4013      	ands	r3, r2
 8005038:	d1de      	bne.n	8004ff8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	0018      	movs	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	b004      	add	sp, #16
 8005042:	bd80      	pop	{r7, pc}

08005044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005044:	b590      	push	{r4, r7, lr}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	0002      	movs	r2, r0
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	1dfb      	adds	r3, r7, #7
 8005050:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005052:	1dfb      	adds	r3, r7, #7
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b7f      	cmp	r3, #127	@ 0x7f
 8005058:	d828      	bhi.n	80050ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800505a:	4a2f      	ldr	r2, [pc, #188]	@ (8005118 <__NVIC_SetPriority+0xd4>)
 800505c:	1dfb      	adds	r3, r7, #7
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b25b      	sxtb	r3, r3
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	33c0      	adds	r3, #192	@ 0xc0
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	589b      	ldr	r3, [r3, r2]
 800506a:	1dfa      	adds	r2, r7, #7
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	0011      	movs	r1, r2
 8005070:	2203      	movs	r2, #3
 8005072:	400a      	ands	r2, r1
 8005074:	00d2      	lsls	r2, r2, #3
 8005076:	21ff      	movs	r1, #255	@ 0xff
 8005078:	4091      	lsls	r1, r2
 800507a:	000a      	movs	r2, r1
 800507c:	43d2      	mvns	r2, r2
 800507e:	401a      	ands	r2, r3
 8005080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	019b      	lsls	r3, r3, #6
 8005086:	22ff      	movs	r2, #255	@ 0xff
 8005088:	401a      	ands	r2, r3
 800508a:	1dfb      	adds	r3, r7, #7
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	0018      	movs	r0, r3
 8005090:	2303      	movs	r3, #3
 8005092:	4003      	ands	r3, r0
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005098:	481f      	ldr	r0, [pc, #124]	@ (8005118 <__NVIC_SetPriority+0xd4>)
 800509a:	1dfb      	adds	r3, r7, #7
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b25b      	sxtb	r3, r3
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	430a      	orrs	r2, r1
 80050a4:	33c0      	adds	r3, #192	@ 0xc0
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80050aa:	e031      	b.n	8005110 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050ac:	4a1b      	ldr	r2, [pc, #108]	@ (800511c <__NVIC_SetPriority+0xd8>)
 80050ae:	1dfb      	adds	r3, r7, #7
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	0019      	movs	r1, r3
 80050b4:	230f      	movs	r3, #15
 80050b6:	400b      	ands	r3, r1
 80050b8:	3b08      	subs	r3, #8
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	3306      	adds	r3, #6
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	18d3      	adds	r3, r2, r3
 80050c2:	3304      	adds	r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	1dfa      	adds	r2, r7, #7
 80050c8:	7812      	ldrb	r2, [r2, #0]
 80050ca:	0011      	movs	r1, r2
 80050cc:	2203      	movs	r2, #3
 80050ce:	400a      	ands	r2, r1
 80050d0:	00d2      	lsls	r2, r2, #3
 80050d2:	21ff      	movs	r1, #255	@ 0xff
 80050d4:	4091      	lsls	r1, r2
 80050d6:	000a      	movs	r2, r1
 80050d8:	43d2      	mvns	r2, r2
 80050da:	401a      	ands	r2, r3
 80050dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	22ff      	movs	r2, #255	@ 0xff
 80050e4:	401a      	ands	r2, r3
 80050e6:	1dfb      	adds	r3, r7, #7
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	0018      	movs	r0, r3
 80050ec:	2303      	movs	r3, #3
 80050ee:	4003      	ands	r3, r0
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050f4:	4809      	ldr	r0, [pc, #36]	@ (800511c <__NVIC_SetPriority+0xd8>)
 80050f6:	1dfb      	adds	r3, r7, #7
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	001c      	movs	r4, r3
 80050fc:	230f      	movs	r3, #15
 80050fe:	4023      	ands	r3, r4
 8005100:	3b08      	subs	r3, #8
 8005102:	089b      	lsrs	r3, r3, #2
 8005104:	430a      	orrs	r2, r1
 8005106:	3306      	adds	r3, #6
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	18c3      	adds	r3, r0, r3
 800510c:	3304      	adds	r3, #4
 800510e:	601a      	str	r2, [r3, #0]
}
 8005110:	46c0      	nop			@ (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b003      	add	sp, #12
 8005116:	bd90      	pop	{r4, r7, pc}
 8005118:	e000e100 	.word	0xe000e100
 800511c:	e000ed00 	.word	0xe000ed00

08005120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	2380      	movs	r3, #128	@ 0x80
 800512e:	045b      	lsls	r3, r3, #17
 8005130:	429a      	cmp	r2, r3
 8005132:	d301      	bcc.n	8005138 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005134:	2301      	movs	r3, #1
 8005136:	e010      	b.n	800515a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005138:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <SysTick_Config+0x44>)
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	3a01      	subs	r2, #1
 800513e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005140:	2301      	movs	r3, #1
 8005142:	425b      	negs	r3, r3
 8005144:	2103      	movs	r1, #3
 8005146:	0018      	movs	r0, r3
 8005148:	f7ff ff7c 	bl	8005044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <SysTick_Config+0x44>)
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005152:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <SysTick_Config+0x44>)
 8005154:	2207      	movs	r2, #7
 8005156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005158:	2300      	movs	r3, #0
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b002      	add	sp, #8
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	e000e010 	.word	0xe000e010

08005168 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	210f      	movs	r1, #15
 8005174:	187b      	adds	r3, r7, r1
 8005176:	1c02      	adds	r2, r0, #0
 8005178:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	187b      	adds	r3, r7, r1
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	b25b      	sxtb	r3, r3
 8005182:	0011      	movs	r1, r2
 8005184:	0018      	movs	r0, r3
 8005186:	f7ff ff5d 	bl	8005044 <__NVIC_SetPriority>
}
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b004      	add	sp, #16
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0018      	movs	r0, r3
 800519e:	f7ff ffbf 	bl	8005120 <SysTick_Config>
 80051a2:	0003      	movs	r3, r0
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80051b0:	f7fe fc12 	bl	80039d8 <HAL_SYSTICK_Callback>
}
 80051b4:	46c0      	nop			@ (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051ca:	e147      	b.n	800545c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4091      	lsls	r1, r2
 80051d6:	000a      	movs	r2, r1
 80051d8:	4013      	ands	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d100      	bne.n	80051e4 <HAL_GPIO_Init+0x28>
 80051e2:	e138      	b.n	8005456 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2203      	movs	r2, #3
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d005      	beq.n	80051fc <HAL_GPIO_Init+0x40>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d130      	bne.n	800525e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	2203      	movs	r2, #3
 8005208:	409a      	lsls	r2, r3
 800520a:	0013      	movs	r3, r2
 800520c:	43da      	mvns	r2, r3
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4013      	ands	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	409a      	lsls	r2, r3
 800521e:	0013      	movs	r3, r2
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005232:	2201      	movs	r2, #1
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	409a      	lsls	r2, r3
 8005238:	0013      	movs	r3, r2
 800523a:	43da      	mvns	r2, r3
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4013      	ands	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	2201      	movs	r2, #1
 800524a:	401a      	ands	r2, r3
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	409a      	lsls	r2, r3
 8005250:	0013      	movs	r3, r2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2203      	movs	r2, #3
 8005264:	4013      	ands	r3, r2
 8005266:	2b03      	cmp	r3, #3
 8005268:	d017      	beq.n	800529a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	2203      	movs	r2, #3
 8005276:	409a      	lsls	r2, r3
 8005278:	0013      	movs	r3, r2
 800527a:	43da      	mvns	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4013      	ands	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	409a      	lsls	r2, r3
 800528c:	0013      	movs	r3, r2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2203      	movs	r2, #3
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d123      	bne.n	80052ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	08da      	lsrs	r2, r3, #3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3208      	adds	r2, #8
 80052ae:	0092      	lsls	r2, r2, #2
 80052b0:	58d3      	ldr	r3, [r2, r3]
 80052b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2207      	movs	r2, #7
 80052b8:	4013      	ands	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	220f      	movs	r2, #15
 80052be:	409a      	lsls	r2, r3
 80052c0:	0013      	movs	r3, r2
 80052c2:	43da      	mvns	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2107      	movs	r1, #7
 80052d2:	400b      	ands	r3, r1
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	409a      	lsls	r2, r3
 80052d8:	0013      	movs	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	08da      	lsrs	r2, r3, #3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3208      	adds	r2, #8
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	6939      	ldr	r1, [r7, #16]
 80052ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	2203      	movs	r2, #3
 80052fa:	409a      	lsls	r2, r3
 80052fc:	0013      	movs	r3, r2
 80052fe:	43da      	mvns	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2203      	movs	r2, #3
 800530c:	401a      	ands	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	0013      	movs	r3, r2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	23c0      	movs	r3, #192	@ 0xc0
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	4013      	ands	r3, r2
 800532c:	d100      	bne.n	8005330 <HAL_GPIO_Init+0x174>
 800532e:	e092      	b.n	8005456 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005330:	4a50      	ldr	r2, [pc, #320]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	3318      	adds	r3, #24
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	589b      	ldr	r3, [r3, r2]
 800533c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2203      	movs	r2, #3
 8005342:	4013      	ands	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	220f      	movs	r2, #15
 8005348:	409a      	lsls	r2, r3
 800534a:	0013      	movs	r3, r2
 800534c:	43da      	mvns	r2, r3
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4013      	ands	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	23a0      	movs	r3, #160	@ 0xa0
 8005358:	05db      	lsls	r3, r3, #23
 800535a:	429a      	cmp	r2, r3
 800535c:	d013      	beq.n	8005386 <HAL_GPIO_Init+0x1ca>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a45      	ldr	r2, [pc, #276]	@ (8005478 <HAL_GPIO_Init+0x2bc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d00d      	beq.n	8005382 <HAL_GPIO_Init+0x1c6>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a44      	ldr	r2, [pc, #272]	@ (800547c <HAL_GPIO_Init+0x2c0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d007      	beq.n	800537e <HAL_GPIO_Init+0x1c2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a43      	ldr	r2, [pc, #268]	@ (8005480 <HAL_GPIO_Init+0x2c4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d101      	bne.n	800537a <HAL_GPIO_Init+0x1be>
 8005376:	2303      	movs	r3, #3
 8005378:	e006      	b.n	8005388 <HAL_GPIO_Init+0x1cc>
 800537a:	2305      	movs	r3, #5
 800537c:	e004      	b.n	8005388 <HAL_GPIO_Init+0x1cc>
 800537e:	2302      	movs	r3, #2
 8005380:	e002      	b.n	8005388 <HAL_GPIO_Init+0x1cc>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_GPIO_Init+0x1cc>
 8005386:	2300      	movs	r3, #0
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	2103      	movs	r1, #3
 800538c:	400a      	ands	r2, r1
 800538e:	00d2      	lsls	r2, r2, #3
 8005390:	4093      	lsls	r3, r2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005398:	4936      	ldr	r1, [pc, #216]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	089b      	lsrs	r3, r3, #2
 800539e:	3318      	adds	r3, #24
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053a6:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	43da      	mvns	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4013      	ands	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	035b      	lsls	r3, r3, #13
 80053be:	4013      	ands	r3, r2
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80053d0:	4b28      	ldr	r3, [pc, #160]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	43da      	mvns	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4013      	ands	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	2380      	movs	r3, #128	@ 0x80
 80053e6:	039b      	lsls	r3, r3, #14
 80053e8:	4013      	ands	r3, r2
 80053ea:	d003      	beq.n	80053f4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80053fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 80053fc:	2384      	movs	r3, #132	@ 0x84
 80053fe:	58d3      	ldr	r3, [r2, r3]
 8005400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	43da      	mvns	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4013      	ands	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	029b      	lsls	r3, r3, #10
 8005414:	4013      	ands	r3, r2
 8005416:	d003      	beq.n	8005420 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005420:	4914      	ldr	r1, [pc, #80]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 8005422:	2284      	movs	r2, #132	@ 0x84
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005428:	4a12      	ldr	r2, [pc, #72]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	58d3      	ldr	r3, [r2, r3]
 800542e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	43da      	mvns	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4013      	ands	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	2380      	movs	r3, #128	@ 0x80
 8005440:	025b      	lsls	r3, r3, #9
 8005442:	4013      	ands	r3, r2
 8005444:	d003      	beq.n	800544e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800544e:	4909      	ldr	r1, [pc, #36]	@ (8005474 <HAL_GPIO_Init+0x2b8>)
 8005450:	2280      	movs	r2, #128	@ 0x80
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	3301      	adds	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	40da      	lsrs	r2, r3
 8005464:	1e13      	subs	r3, r2, #0
 8005466:	d000      	beq.n	800546a <HAL_GPIO_Init+0x2ae>
 8005468:	e6b0      	b.n	80051cc <HAL_GPIO_Init+0x10>
  }
}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	46c0      	nop			@ (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b006      	add	sp, #24
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021800 	.word	0x40021800
 8005478:	50000400 	.word	0x50000400
 800547c:	50000800 	.word	0x50000800
 8005480:	50000c00 	.word	0x50000c00

08005484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	0008      	movs	r0, r1
 800548e:	0011      	movs	r1, r2
 8005490:	1cbb      	adds	r3, r7, #2
 8005492:	1c02      	adds	r2, r0, #0
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	1c7b      	adds	r3, r7, #1
 8005498:	1c0a      	adds	r2, r1, #0
 800549a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800549c:	1c7b      	adds	r3, r7, #1
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054a4:	1cbb      	adds	r3, r7, #2
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054ac:	e003      	b.n	80054b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054ae:	1cbb      	adds	r3, r7, #2
 80054b0:	881a      	ldrh	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b002      	add	sp, #8
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e08f      	b.n	80055f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2241      	movs	r2, #65	@ 0x41
 80054d6:	5c9b      	ldrb	r3, [r3, r2]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d107      	bne.n	80054ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2240      	movs	r2, #64	@ 0x40
 80054e2:	2100      	movs	r1, #0
 80054e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	0018      	movs	r0, r3
 80054ea:	f7fe fbd3 	bl	8003c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2241      	movs	r2, #65	@ 0x41
 80054f2:	2124      	movs	r1, #36	@ 0x24
 80054f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2101      	movs	r1, #1
 8005502:	438a      	bics	r2, r1
 8005504:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	493b      	ldr	r1, [pc, #236]	@ (80055fc <HAL_I2C_Init+0x13c>)
 8005510:	400a      	ands	r2, r1
 8005512:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4938      	ldr	r1, [pc, #224]	@ (8005600 <HAL_I2C_Init+0x140>)
 8005520:	400a      	ands	r2, r1
 8005522:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d108      	bne.n	800553e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2180      	movs	r1, #128	@ 0x80
 8005536:	0209      	lsls	r1, r1, #8
 8005538:	430a      	orrs	r2, r1
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	e007      	b.n	800554e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2184      	movs	r1, #132	@ 0x84
 8005548:	0209      	lsls	r1, r1, #8
 800554a:	430a      	orrs	r2, r1
 800554c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d109      	bne.n	800556a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2180      	movs	r1, #128	@ 0x80
 8005562:	0109      	lsls	r1, r1, #4
 8005564:	430a      	orrs	r2, r1
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	e007      	b.n	800557a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4923      	ldr	r1, [pc, #140]	@ (8005604 <HAL_I2C_Init+0x144>)
 8005576:	400a      	ands	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4920      	ldr	r1, [pc, #128]	@ (8005608 <HAL_I2C_Init+0x148>)
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	491a      	ldr	r1, [pc, #104]	@ (8005600 <HAL_I2C_Init+0x140>)
 8005596:	400a      	ands	r2, r1
 8005598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69d9      	ldr	r1, [r3, #28]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2101      	movs	r1, #1
 80055d0:	430a      	orrs	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2241      	movs	r2, #65	@ 0x41
 80055de:	2120      	movs	r1, #32
 80055e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2242      	movs	r2, #66	@ 0x42
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	0018      	movs	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b002      	add	sp, #8
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	f0ffffff 	.word	0xf0ffffff
 8005600:	ffff7fff 	.word	0xffff7fff
 8005604:	fffff7ff 	.word	0xfffff7ff
 8005608:	02008000 	.word	0x02008000

0800560c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b089      	sub	sp, #36	@ 0x24
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	000c      	movs	r4, r1
 8005616:	0010      	movs	r0, r2
 8005618:	0019      	movs	r1, r3
 800561a:	230a      	movs	r3, #10
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	1c22      	adds	r2, r4, #0
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	2308      	movs	r3, #8
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	1c02      	adds	r2, r0, #0
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	1dbb      	adds	r3, r7, #6
 800562c:	1c0a      	adds	r2, r1, #0
 800562e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2241      	movs	r2, #65	@ 0x41
 8005634:	5c9b      	ldrb	r3, [r3, r2]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b20      	cmp	r3, #32
 800563a:	d000      	beq.n	800563e <HAL_I2C_Mem_Write+0x32>
 800563c:	e10c      	b.n	8005858 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <HAL_I2C_Mem_Write+0x42>
 8005644:	232c      	movs	r3, #44	@ 0x2c
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2280      	movs	r2, #128	@ 0x80
 8005652:	0092      	lsls	r2, r2, #2
 8005654:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e0ff      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2240      	movs	r2, #64	@ 0x40
 800565e:	5c9b      	ldrb	r3, [r3, r2]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_I2C_Mem_Write+0x5c>
 8005664:	2302      	movs	r3, #2
 8005666:	e0f8      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2240      	movs	r2, #64	@ 0x40
 800566c:	2101      	movs	r1, #1
 800566e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005670:	f7fe fd80 	bl	8004174 <HAL_GetTick>
 8005674:	0003      	movs	r3, r0
 8005676:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	0219      	lsls	r1, r3, #8
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	2319      	movs	r3, #25
 8005684:	2201      	movs	r2, #1
 8005686:	f000 fb0b 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 800568a:	1e03      	subs	r3, r0, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0e3      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2241      	movs	r2, #65	@ 0x41
 8005696:	2121      	movs	r1, #33	@ 0x21
 8005698:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2242      	movs	r2, #66	@ 0x42
 800569e:	2140      	movs	r1, #64	@ 0x40
 80056a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	222c      	movs	r2, #44	@ 0x2c
 80056b2:	18ba      	adds	r2, r7, r2
 80056b4:	8812      	ldrh	r2, [r2, #0]
 80056b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056be:	1dbb      	adds	r3, r7, #6
 80056c0:	881c      	ldrh	r4, [r3, #0]
 80056c2:	2308      	movs	r3, #8
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	230a      	movs	r3, #10
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	8819      	ldrh	r1, [r3, #0]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	0023      	movs	r3, r4
 80056da:	f000 f9f9 	bl	8005ad0 <I2C_RequestMemoryWrite>
 80056de:	1e03      	subs	r3, r0, #0
 80056e0:	d005      	beq.n	80056ee <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2240      	movs	r2, #64	@ 0x40
 80056e6:	2100      	movs	r1, #0
 80056e8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0b5      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2bff      	cmp	r3, #255	@ 0xff
 80056f6:	d911      	bls.n	800571c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	22ff      	movs	r2, #255	@ 0xff
 80056fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005702:	b2da      	uxtb	r2, r3
 8005704:	2380      	movs	r3, #128	@ 0x80
 8005706:	045c      	lsls	r4, r3, #17
 8005708:	230a      	movs	r3, #10
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	8819      	ldrh	r1, [r3, #0]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	0023      	movs	r3, r4
 8005716:	f000 fc9d 	bl	8006054 <I2C_TransferConfig>
 800571a:	e012      	b.n	8005742 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800572a:	b2da      	uxtb	r2, r3
 800572c:	2380      	movs	r3, #128	@ 0x80
 800572e:	049c      	lsls	r4, r3, #18
 8005730:	230a      	movs	r3, #10
 8005732:	18fb      	adds	r3, r7, r3
 8005734:	8819      	ldrh	r1, [r3, #0]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	2300      	movs	r3, #0
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	0023      	movs	r3, r4
 800573e:	f000 fc89 	bl	8006054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fb01 	bl	8005d50 <I2C_WaitOnTXISFlagUntilTimeout>
 800574e:	1e03      	subs	r3, r0, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e081      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575a:	781a      	ldrb	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d03a      	beq.n	8005806 <HAL_I2C_Mem_Write+0x1fa>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005794:	2b00      	cmp	r3, #0
 8005796:	d136      	bne.n	8005806 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	0013      	movs	r3, r2
 80057a2:	2200      	movs	r2, #0
 80057a4:	2180      	movs	r1, #128	@ 0x80
 80057a6:	f000 fa7b 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e053      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2bff      	cmp	r3, #255	@ 0xff
 80057ba:	d911      	bls.n	80057e0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	22ff      	movs	r2, #255	@ 0xff
 80057c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	045c      	lsls	r4, r3, #17
 80057cc:	230a      	movs	r3, #10
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	8819      	ldrh	r1, [r3, #0]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	2300      	movs	r3, #0
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	0023      	movs	r3, r4
 80057da:	f000 fc3b 	bl	8006054 <I2C_TransferConfig>
 80057de:	e012      	b.n	8005806 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	049c      	lsls	r4, r3, #18
 80057f4:	230a      	movs	r3, #10
 80057f6:	18fb      	adds	r3, r7, r3
 80057f8:	8819      	ldrh	r1, [r3, #0]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	2300      	movs	r3, #0
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	0023      	movs	r3, r4
 8005802:	f000 fc27 	bl	8006054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d198      	bne.n	8005742 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 fae0 	bl	8005ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 800581c:	1e03      	subs	r3, r0, #0
 800581e:	d001      	beq.n	8005824 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e01a      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2220      	movs	r2, #32
 800582a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	490b      	ldr	r1, [pc, #44]	@ (8005864 <HAL_I2C_Mem_Write+0x258>)
 8005838:	400a      	ands	r2, r1
 800583a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2241      	movs	r2, #65	@ 0x41
 8005840:	2120      	movs	r1, #32
 8005842:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2242      	movs	r2, #66	@ 0x42
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2240      	movs	r2, #64	@ 0x40
 8005850:	2100      	movs	r1, #0
 8005852:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	0018      	movs	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	b007      	add	sp, #28
 8005860:	bd90      	pop	{r4, r7, pc}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	fe00e800 	.word	0xfe00e800

08005868 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b089      	sub	sp, #36	@ 0x24
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	000c      	movs	r4, r1
 8005872:	0010      	movs	r0, r2
 8005874:	0019      	movs	r1, r3
 8005876:	230a      	movs	r3, #10
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	1c22      	adds	r2, r4, #0
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	2308      	movs	r3, #8
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	1c02      	adds	r2, r0, #0
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	1dbb      	adds	r3, r7, #6
 8005888:	1c0a      	adds	r2, r1, #0
 800588a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2241      	movs	r2, #65	@ 0x41
 8005890:	5c9b      	ldrb	r3, [r3, r2]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b20      	cmp	r3, #32
 8005896:	d000      	beq.n	800589a <HAL_I2C_Mem_Read+0x32>
 8005898:	e110      	b.n	8005abc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <HAL_I2C_Mem_Read+0x42>
 80058a0:	232c      	movs	r3, #44	@ 0x2c
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2280      	movs	r2, #128	@ 0x80
 80058ae:	0092      	lsls	r2, r2, #2
 80058b0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e103      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2240      	movs	r2, #64	@ 0x40
 80058ba:	5c9b      	ldrb	r3, [r3, r2]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_I2C_Mem_Read+0x5c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e0fc      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2240      	movs	r2, #64	@ 0x40
 80058c8:	2101      	movs	r1, #1
 80058ca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058cc:	f7fe fc52 	bl	8004174 <HAL_GetTick>
 80058d0:	0003      	movs	r3, r0
 80058d2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058d4:	2380      	movs	r3, #128	@ 0x80
 80058d6:	0219      	lsls	r1, r3, #8
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2319      	movs	r3, #25
 80058e0:	2201      	movs	r2, #1
 80058e2:	f000 f9dd 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 80058e6:	1e03      	subs	r3, r0, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0e7      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2241      	movs	r2, #65	@ 0x41
 80058f2:	2122      	movs	r1, #34	@ 0x22
 80058f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2242      	movs	r2, #66	@ 0x42
 80058fa:	2140      	movs	r1, #64	@ 0x40
 80058fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005908:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	222c      	movs	r2, #44	@ 0x2c
 800590e:	18ba      	adds	r2, r7, r2
 8005910:	8812      	ldrh	r2, [r2, #0]
 8005912:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800591a:	1dbb      	adds	r3, r7, #6
 800591c:	881c      	ldrh	r4, [r3, #0]
 800591e:	2308      	movs	r3, #8
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	881a      	ldrh	r2, [r3, #0]
 8005924:	230a      	movs	r3, #10
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	8819      	ldrh	r1, [r3, #0]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	0023      	movs	r3, r4
 8005936:	f000 f92f 	bl	8005b98 <I2C_RequestMemoryRead>
 800593a:	1e03      	subs	r3, r0, #0
 800593c:	d005      	beq.n	800594a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2240      	movs	r2, #64	@ 0x40
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e0b9      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2bff      	cmp	r3, #255	@ 0xff
 8005952:	d911      	bls.n	8005978 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	22ff      	movs	r2, #255	@ 0xff
 8005958:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595e:	b2da      	uxtb	r2, r3
 8005960:	2380      	movs	r3, #128	@ 0x80
 8005962:	045c      	lsls	r4, r3, #17
 8005964:	230a      	movs	r3, #10
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	8819      	ldrh	r1, [r3, #0]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	4b56      	ldr	r3, [pc, #344]	@ (8005ac8 <HAL_I2C_Mem_Read+0x260>)
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	0023      	movs	r3, r4
 8005972:	f000 fb6f 	bl	8006054 <I2C_TransferConfig>
 8005976:	e012      	b.n	800599e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	b2da      	uxtb	r2, r3
 8005988:	2380      	movs	r3, #128	@ 0x80
 800598a:	049c      	lsls	r4, r3, #18
 800598c:	230a      	movs	r3, #10
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	8819      	ldrh	r1, [r3, #0]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac8 <HAL_I2C_Mem_Read+0x260>)
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	0023      	movs	r3, r4
 800599a:	f000 fb5b 	bl	8006054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800599e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	0013      	movs	r3, r2
 80059a8:	2200      	movs	r2, #0
 80059aa:	2104      	movs	r1, #4
 80059ac:	f000 f978 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 80059b0:	1e03      	subs	r3, r0, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e082      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d03a      	beq.n	8005a6a <HAL_I2C_Mem_Read+0x202>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d136      	bne.n	8005a6a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	0013      	movs	r3, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	2180      	movs	r1, #128	@ 0x80
 8005a0a:	f000 f949 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005a0e:	1e03      	subs	r3, r0, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e053      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2bff      	cmp	r3, #255	@ 0xff
 8005a1e:	d911      	bls.n	8005a44 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	22ff      	movs	r2, #255	@ 0xff
 8005a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	2380      	movs	r3, #128	@ 0x80
 8005a2e:	045c      	lsls	r4, r3, #17
 8005a30:	230a      	movs	r3, #10
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	8819      	ldrh	r1, [r3, #0]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	0023      	movs	r3, r4
 8005a3e:	f000 fb09 	bl	8006054 <I2C_TransferConfig>
 8005a42:	e012      	b.n	8005a6a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	2380      	movs	r3, #128	@ 0x80
 8005a56:	049c      	lsls	r4, r3, #18
 8005a58:	230a      	movs	r3, #10
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	8819      	ldrh	r1, [r3, #0]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	2300      	movs	r3, #0
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	0023      	movs	r3, r4
 8005a66:	f000 faf5 	bl	8006054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d194      	bne.n	800599e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 f9ae 	bl	8005ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a80:	1e03      	subs	r3, r0, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e01a      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	490c      	ldr	r1, [pc, #48]	@ (8005acc <HAL_I2C_Mem_Read+0x264>)
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2241      	movs	r2, #65	@ 0x41
 8005aa4:	2120      	movs	r1, #32
 8005aa6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2242      	movs	r2, #66	@ 0x42
 8005aac:	2100      	movs	r1, #0
 8005aae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2240      	movs	r2, #64	@ 0x40
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e000      	b.n	8005abe <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
  }
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b007      	add	sp, #28
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
 8005ac8:	80002400 	.word	0x80002400
 8005acc:	fe00e800 	.word	0xfe00e800

08005ad0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ad0:	b5b0      	push	{r4, r5, r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	000c      	movs	r4, r1
 8005ada:	0010      	movs	r0, r2
 8005adc:	0019      	movs	r1, r3
 8005ade:	250a      	movs	r5, #10
 8005ae0:	197b      	adds	r3, r7, r5
 8005ae2:	1c22      	adds	r2, r4, #0
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	2308      	movs	r3, #8
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	1c02      	adds	r2, r0, #0
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	1dbb      	adds	r3, r7, #6
 8005af0:	1c0a      	adds	r2, r1, #0
 8005af2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005af4:	1dbb      	adds	r3, r7, #6
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	2380      	movs	r3, #128	@ 0x80
 8005afc:	045c      	lsls	r4, r3, #17
 8005afe:	197b      	adds	r3, r7, r5
 8005b00:	8819      	ldrh	r1, [r3, #0]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	4b23      	ldr	r3, [pc, #140]	@ (8005b94 <I2C_RequestMemoryWrite+0xc4>)
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	0023      	movs	r3, r4
 8005b0a:	f000 faa3 	bl	8006054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b10:	6a39      	ldr	r1, [r7, #32]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	0018      	movs	r0, r3
 8005b16:	f000 f91b 	bl	8005d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d001      	beq.n	8005b22 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e033      	b.n	8005b8a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b22:	1dbb      	adds	r3, r7, #6
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d107      	bne.n	8005b3a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b38:	e019      	b.n	8005b6e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4e:	6a39      	ldr	r1, [r7, #32]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	0018      	movs	r0, r3
 8005b54:	f000 f8fc 	bl	8005d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b58:	1e03      	subs	r3, r0, #0
 8005b5a:	d001      	beq.n	8005b60 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e014      	b.n	8005b8a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b60:	2308      	movs	r3, #8
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6e:	6a3a      	ldr	r2, [r7, #32]
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	0013      	movs	r3, r2
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2180      	movs	r1, #128	@ 0x80
 8005b7c:	f000 f890 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005b80:	1e03      	subs	r3, r0, #0
 8005b82:	d001      	beq.n	8005b88 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b004      	add	sp, #16
 8005b90:	bdb0      	pop	{r4, r5, r7, pc}
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	80002000 	.word	0x80002000

08005b98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b98:	b5b0      	push	{r4, r5, r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	000c      	movs	r4, r1
 8005ba2:	0010      	movs	r0, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	250a      	movs	r5, #10
 8005ba8:	197b      	adds	r3, r7, r5
 8005baa:	1c22      	adds	r2, r4, #0
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	2308      	movs	r3, #8
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	1c02      	adds	r2, r0, #0
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	1dbb      	adds	r3, r7, #6
 8005bb8:	1c0a      	adds	r2, r1, #0
 8005bba:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bbc:	1dbb      	adds	r3, r7, #6
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	197b      	adds	r3, r7, r5
 8005bc4:	8819      	ldrh	r1, [r3, #0]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	4b23      	ldr	r3, [pc, #140]	@ (8005c58 <I2C_RequestMemoryRead+0xc0>)
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f000 fa41 	bl	8006054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd4:	6a39      	ldr	r1, [r7, #32]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f000 f8b9 	bl	8005d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bde:	1e03      	subs	r3, r0, #0
 8005be0:	d001      	beq.n	8005be6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e033      	b.n	8005c4e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005be6:	1dbb      	adds	r3, r7, #6
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d107      	bne.n	8005bfe <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bee:	2308      	movs	r3, #8
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bfc:	e019      	b.n	8005c32 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bfe:	2308      	movs	r3, #8
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	0a1b      	lsrs	r3, r3, #8
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c12:	6a39      	ldr	r1, [r7, #32]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	0018      	movs	r0, r3
 8005c18:	f000 f89a 	bl	8005d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1c:	1e03      	subs	r3, r0, #0
 8005c1e:	d001      	beq.n	8005c24 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e014      	b.n	8005c4e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c24:	2308      	movs	r3, #8
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	0013      	movs	r3, r2
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2140      	movs	r1, #64	@ 0x40
 8005c40:	f000 f82e 	bl	8005ca0 <I2C_WaitOnFlagUntilTimeout>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d001      	beq.n	8005c4c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b004      	add	sp, #16
 8005c54:	bdb0      	pop	{r4, r5, r7, pc}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	80002000 	.word	0x80002000

08005c5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d103      	bne.n	8005c7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2200      	movs	r2, #0
 8005c78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	2201      	movs	r2, #1
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d007      	beq.n	8005c98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2101      	movs	r1, #1
 8005c94:	430a      	orrs	r2, r1
 8005c96:	619a      	str	r2, [r3, #24]
  }
}
 8005c98:	46c0      	nop			@ (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	1dfb      	adds	r3, r7, #7
 8005cae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb0:	e03a      	b.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f000 f8d3 	bl	8005e64 <I2C_IsErrorOccurred>
 8005cbe:	1e03      	subs	r3, r0, #0
 8005cc0:	d001      	beq.n	8005cc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e040      	b.n	8005d48 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	d02d      	beq.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ccc:	f7fe fa52 	bl	8004174 <HAL_GetTick>
 8005cd0:	0002      	movs	r2, r0
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d302      	bcc.n	8005ce2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d122      	bne.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	4013      	ands	r3, r2
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	425a      	negs	r2, r3
 8005cf2:	4153      	adcs	r3, r2
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	001a      	movs	r2, r3
 8005cf8:	1dfb      	adds	r3, r7, #7
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d113      	bne.n	8005d28 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d04:	2220      	movs	r2, #32
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2241      	movs	r2, #65	@ 0x41
 8005d10:	2120      	movs	r1, #32
 8005d12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2242      	movs	r2, #66	@ 0x42
 8005d18:	2100      	movs	r1, #0
 8005d1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2240      	movs	r2, #64	@ 0x40
 8005d20:	2100      	movs	r1, #0
 8005d22:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e00f      	b.n	8005d48 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4013      	ands	r3, r2
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	425a      	negs	r2, r3
 8005d38:	4153      	adcs	r3, r2
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	1dfb      	adds	r3, r7, #7
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d0b5      	beq.n	8005cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	0018      	movs	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	b004      	add	sp, #16
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d5c:	e032      	b.n	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	0018      	movs	r0, r3
 8005d66:	f000 f87d 	bl	8005e64 <I2C_IsErrorOccurred>
 8005d6a:	1e03      	subs	r3, r0, #0
 8005d6c:	d001      	beq.n	8005d72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e030      	b.n	8005dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3301      	adds	r3, #1
 8005d76:	d025      	beq.n	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d78:	f7fe f9fc 	bl	8004174 <HAL_GetTick>
 8005d7c:	0002      	movs	r2, r0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d302      	bcc.n	8005d8e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11a      	bne.n	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2202      	movs	r2, #2
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d013      	beq.n	8005dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da0:	2220      	movs	r2, #32
 8005da2:	431a      	orrs	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2241      	movs	r2, #65	@ 0x41
 8005dac:	2120      	movs	r1, #32
 8005dae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2242      	movs	r2, #66	@ 0x42
 8005db4:	2100      	movs	r1, #0
 8005db6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2240      	movs	r2, #64	@ 0x40
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e007      	b.n	8005dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4013      	ands	r3, r2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d1c5      	bne.n	8005d5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005de8:	e02f      	b.n	8005e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	0018      	movs	r0, r3
 8005df2:	f000 f837 	bl	8005e64 <I2C_IsErrorOccurred>
 8005df6:	1e03      	subs	r3, r0, #0
 8005df8:	d001      	beq.n	8005dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e02d      	b.n	8005e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fe f9b9 	bl	8004174 <HAL_GetTick>
 8005e02:	0002      	movs	r2, r0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11a      	bne.n	8005e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d013      	beq.n	8005e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	2220      	movs	r2, #32
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2241      	movs	r2, #65	@ 0x41
 8005e32:	2120      	movs	r1, #32
 8005e34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2242      	movs	r2, #66	@ 0x42
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2240      	movs	r2, #64	@ 0x40
 8005e42:	2100      	movs	r1, #0
 8005e44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e007      	b.n	8005e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	2220      	movs	r2, #32
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d1c8      	bne.n	8005dea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b004      	add	sp, #16
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	@ 0x28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e70:	2327      	movs	r3, #39	@ 0x27
 8005e72:	18fb      	adds	r3, r7, r3
 8005e74:	2200      	movs	r2, #0
 8005e76:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d100      	bne.n	8005e92 <I2C_IsErrorOccurred+0x2e>
 8005e90:	e079      	b.n	8005f86 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2210      	movs	r2, #16
 8005e98:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e9a:	e057      	b.n	8005f4c <I2C_IsErrorOccurred+0xe8>
 8005e9c:	2227      	movs	r2, #39	@ 0x27
 8005e9e:	18bb      	adds	r3, r7, r2
 8005ea0:	18ba      	adds	r2, r7, r2
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	d04f      	beq.n	8005f4c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005eac:	f7fe f962 	bl	8004174 <HAL_GetTick>
 8005eb0:	0002      	movs	r2, r0
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d302      	bcc.n	8005ec2 <I2C_IsErrorOccurred+0x5e>
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d144      	bne.n	8005f4c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	01db      	lsls	r3, r3, #7
 8005ecc:	4013      	ands	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ed0:	2013      	movs	r0, #19
 8005ed2:	183b      	adds	r3, r7, r0
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	2142      	movs	r1, #66	@ 0x42
 8005ed8:	5c52      	ldrb	r2, [r2, r1]
 8005eda:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	2380      	movs	r3, #128	@ 0x80
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	401a      	ands	r2, r3
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d126      	bne.n	8005f3e <I2C_IsErrorOccurred+0xda>
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	2380      	movs	r3, #128	@ 0x80
 8005ef4:	01db      	lsls	r3, r3, #7
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d021      	beq.n	8005f3e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005efa:	183b      	adds	r3, r7, r0
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d01d      	beq.n	8005f3e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2180      	movs	r1, #128	@ 0x80
 8005f0e:	01c9      	lsls	r1, r1, #7
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f14:	f7fe f92e 	bl	8004174 <HAL_GetTick>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f1c:	e00f      	b.n	8005f3e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f1e:	f7fe f929 	bl	8004174 <HAL_GetTick>
 8005f22:	0002      	movs	r2, r0
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b19      	cmp	r3, #25
 8005f2a:	d908      	bls.n	8005f3e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	4313      	orrs	r3, r2
 8005f32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f34:	2327      	movs	r3, #39	@ 0x27
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]

              break;
 8005f3c:	e006      	b.n	8005f4c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	2220      	movs	r2, #32
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d1e8      	bne.n	8005f1e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2220      	movs	r2, #32
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d004      	beq.n	8005f64 <I2C_IsErrorOccurred+0x100>
 8005f5a:	2327      	movs	r3, #39	@ 0x27
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d09b      	beq.n	8005e9c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f64:	2327      	movs	r3, #39	@ 0x27
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2220      	movs	r2, #32
 8005f74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f7e:	2327      	movs	r3, #39	@ 0x27
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	2201      	movs	r2, #1
 8005f84:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	2380      	movs	r3, #128	@ 0x80
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4013      	ands	r3, r2
 8005f96:	d00c      	beq.n	8005fb2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2280      	movs	r2, #128	@ 0x80
 8005fa6:	0052      	lsls	r2, r2, #1
 8005fa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005faa:	2327      	movs	r3, #39	@ 0x27
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	2380      	movs	r3, #128	@ 0x80
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d00c      	beq.n	8005fd6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2280      	movs	r2, #128	@ 0x80
 8005fca:	00d2      	lsls	r2, r2, #3
 8005fcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fce:	2327      	movs	r3, #39	@ 0x27
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d00c      	beq.n	8005ffa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2280      	movs	r2, #128	@ 0x80
 8005fee:	0092      	lsls	r2, r2, #2
 8005ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ff2:	2327      	movs	r3, #39	@ 0x27
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005ffa:	2327      	movs	r3, #39	@ 0x27
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01d      	beq.n	8006040 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff fe28 	bl	8005c5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	490e      	ldr	r1, [pc, #56]	@ (8006050 <I2C_IsErrorOccurred+0x1ec>)
 8006018:	400a      	ands	r2, r1
 800601a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	431a      	orrs	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2241      	movs	r2, #65	@ 0x41
 800602c:	2120      	movs	r1, #32
 800602e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2242      	movs	r2, #66	@ 0x42
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2240      	movs	r2, #64	@ 0x40
 800603c:	2100      	movs	r1, #0
 800603e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006040:	2327      	movs	r3, #39	@ 0x27
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	781b      	ldrb	r3, [r3, #0]
}
 8006046:	0018      	movs	r0, r3
 8006048:	46bd      	mov	sp, r7
 800604a:	b00a      	add	sp, #40	@ 0x28
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	fe00e800 	.word	0xfe00e800

08006054 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	0008      	movs	r0, r1
 800605e:	0011      	movs	r1, r2
 8006060:	607b      	str	r3, [r7, #4]
 8006062:	240a      	movs	r4, #10
 8006064:	193b      	adds	r3, r7, r4
 8006066:	1c02      	adds	r2, r0, #0
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	2009      	movs	r0, #9
 800606c:	183b      	adds	r3, r7, r0
 800606e:	1c0a      	adds	r2, r1, #0
 8006070:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006072:	193b      	adds	r3, r7, r4
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	059b      	lsls	r3, r3, #22
 8006078:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800607a:	183b      	adds	r3, r7, r0
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	0419      	lsls	r1, r3, #16
 8006080:	23ff      	movs	r3, #255	@ 0xff
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006086:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	4313      	orrs	r3, r2
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800609e:	0d51      	lsrs	r1, r2, #21
 80060a0:	2280      	movs	r2, #128	@ 0x80
 80060a2:	00d2      	lsls	r2, r2, #3
 80060a4:	400a      	ands	r2, r1
 80060a6:	4907      	ldr	r1, [pc, #28]	@ (80060c4 <I2C_TransferConfig+0x70>)
 80060a8:	430a      	orrs	r2, r1
 80060aa:	43d2      	mvns	r2, r2
 80060ac:	401a      	ands	r2, r3
 80060ae:	0011      	movs	r1, r2
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	46bd      	mov	sp, r7
 80060be:	b007      	add	sp, #28
 80060c0:	bd90      	pop	{r4, r7, pc}
 80060c2:	46c0      	nop			@ (mov r8, r8)
 80060c4:	03ff63ff 	.word	0x03ff63ff

080060c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2241      	movs	r2, #65	@ 0x41
 80060d6:	5c9b      	ldrb	r3, [r3, r2]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d138      	bne.n	8006150 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2240      	movs	r2, #64	@ 0x40
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e032      	b.n	8006152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2240      	movs	r2, #64	@ 0x40
 80060f0:	2101      	movs	r1, #1
 80060f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2241      	movs	r2, #65	@ 0x41
 80060f8:	2124      	movs	r1, #36	@ 0x24
 80060fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2101      	movs	r1, #1
 8006108:	438a      	bics	r2, r1
 800610a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4911      	ldr	r1, [pc, #68]	@ (800615c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006118:	400a      	ands	r2, r1
 800611a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6819      	ldr	r1, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2101      	movs	r1, #1
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2241      	movs	r2, #65	@ 0x41
 8006140:	2120      	movs	r1, #32
 8006142:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2240      	movs	r2, #64	@ 0x40
 8006148:	2100      	movs	r1, #0
 800614a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	0018      	movs	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	b002      	add	sp, #8
 8006158:	bd80      	pop	{r7, pc}
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	ffffefff 	.word	0xffffefff

08006160 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2241      	movs	r2, #65	@ 0x41
 800616e:	5c9b      	ldrb	r3, [r3, r2]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b20      	cmp	r3, #32
 8006174:	d139      	bne.n	80061ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2240      	movs	r2, #64	@ 0x40
 800617a:	5c9b      	ldrb	r3, [r3, r2]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006180:	2302      	movs	r3, #2
 8006182:	e033      	b.n	80061ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2240      	movs	r2, #64	@ 0x40
 8006188:	2101      	movs	r1, #1
 800618a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2241      	movs	r2, #65	@ 0x41
 8006190:	2124      	movs	r1, #36	@ 0x24
 8006192:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2101      	movs	r1, #1
 80061a0:	438a      	bics	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4a11      	ldr	r2, [pc, #68]	@ (80061f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2101      	movs	r1, #1
 80061d2:	430a      	orrs	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2241      	movs	r2, #65	@ 0x41
 80061da:	2120      	movs	r1, #32
 80061dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2240      	movs	r2, #64	@ 0x40
 80061e2:	2100      	movs	r1, #0
 80061e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	0018      	movs	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b004      	add	sp, #16
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	fffff0ff 	.word	0xfffff0ff

080061f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006200:	4b19      	ldr	r3, [pc, #100]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a19      	ldr	r2, [pc, #100]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006206:	4013      	ands	r3, r2
 8006208:	0019      	movs	r1, r3
 800620a:	4b17      	ldr	r3, [pc, #92]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	430a      	orrs	r2, r1
 8006210:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	2380      	movs	r3, #128	@ 0x80
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	429a      	cmp	r2, r3
 800621a:	d11f      	bne.n	800625c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800621c:	4b14      	ldr	r3, [pc, #80]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	0013      	movs	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	189b      	adds	r3, r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4912      	ldr	r1, [pc, #72]	@ (8006274 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800622a:	0018      	movs	r0, r3
 800622c:	f7f9 ff84 	bl	8000138 <__udivsi3>
 8006230:	0003      	movs	r3, r0
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006236:	e008      	b.n	800624a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b01      	subs	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e001      	b.n	800624a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e009      	b.n	800625e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800624a:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	2380      	movs	r3, #128	@ 0x80
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	401a      	ands	r2, r3
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	429a      	cmp	r2, r3
 800625a:	d0ed      	beq.n	8006238 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	40007000 	.word	0x40007000
 800626c:	fffff9ff 	.word	0xfffff9ff
 8006270:	20000000 	.word	0x20000000
 8006274:	000f4240 	.word	0x000f4240

08006278 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <LL_RCC_GetAPB1Prescaler+0x14>)
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	23e0      	movs	r3, #224	@ 0xe0
 8006282:	01db      	lsls	r3, r3, #7
 8006284:	4013      	ands	r3, r2
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40021000 	.word	0x40021000

08006290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e2f3      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	4013      	ands	r3, r2
 80062aa:	d100      	bne.n	80062ae <HAL_RCC_OscConfig+0x1e>
 80062ac:	e07c      	b.n	80063a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ae:	4bc3      	ldr	r3, [pc, #780]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2238      	movs	r2, #56	@ 0x38
 80062b4:	4013      	ands	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b8:	4bc0      	ldr	r3, [pc, #768]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2203      	movs	r2, #3
 80062be:	4013      	ands	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d102      	bne.n	80062ce <HAL_RCC_OscConfig+0x3e>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d002      	beq.n	80062d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d10b      	bne.n	80062ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d4:	4bb9      	ldr	r3, [pc, #740]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	2380      	movs	r3, #128	@ 0x80
 80062da:	029b      	lsls	r3, r3, #10
 80062dc:	4013      	ands	r3, r2
 80062de:	d062      	beq.n	80063a6 <HAL_RCC_OscConfig+0x116>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d15e      	bne.n	80063a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e2ce      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	2380      	movs	r3, #128	@ 0x80
 80062f2:	025b      	lsls	r3, r3, #9
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d107      	bne.n	8006308 <HAL_RCC_OscConfig+0x78>
 80062f8:	4bb0      	ldr	r3, [pc, #704]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4baf      	ldr	r3, [pc, #700]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80062fe:	2180      	movs	r1, #128	@ 0x80
 8006300:	0249      	lsls	r1, r1, #9
 8006302:	430a      	orrs	r2, r1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e020      	b.n	800634a <HAL_RCC_OscConfig+0xba>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	23a0      	movs	r3, #160	@ 0xa0
 800630e:	02db      	lsls	r3, r3, #11
 8006310:	429a      	cmp	r2, r3
 8006312:	d10e      	bne.n	8006332 <HAL_RCC_OscConfig+0xa2>
 8006314:	4ba9      	ldr	r3, [pc, #676]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	4ba8      	ldr	r3, [pc, #672]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800631a:	2180      	movs	r1, #128	@ 0x80
 800631c:	02c9      	lsls	r1, r1, #11
 800631e:	430a      	orrs	r2, r1
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	4ba6      	ldr	r3, [pc, #664]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4ba5      	ldr	r3, [pc, #660]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006328:	2180      	movs	r1, #128	@ 0x80
 800632a:	0249      	lsls	r1, r1, #9
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e00b      	b.n	800634a <HAL_RCC_OscConfig+0xba>
 8006332:	4ba2      	ldr	r3, [pc, #648]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4ba1      	ldr	r3, [pc, #644]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006338:	49a1      	ldr	r1, [pc, #644]	@ (80065c0 <HAL_RCC_OscConfig+0x330>)
 800633a:	400a      	ands	r2, r1
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	4b9f      	ldr	r3, [pc, #636]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b9e      	ldr	r3, [pc, #632]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006344:	499f      	ldr	r1, [pc, #636]	@ (80065c4 <HAL_RCC_OscConfig+0x334>)
 8006346:	400a      	ands	r2, r1
 8006348:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d014      	beq.n	800637c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006352:	f7fd ff0f 	bl	8004174 <HAL_GetTick>
 8006356:	0003      	movs	r3, r0
 8006358:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800635c:	f7fd ff0a 	bl	8004174 <HAL_GetTick>
 8006360:	0002      	movs	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b64      	cmp	r3, #100	@ 0x64
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e28d      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800636e:	4b93      	ldr	r3, [pc, #588]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	2380      	movs	r3, #128	@ 0x80
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	4013      	ands	r3, r2
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0xcc>
 800637a:	e015      	b.n	80063a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fd fefa 	bl	8004174 <HAL_GetTick>
 8006380:	0003      	movs	r3, r0
 8006382:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006386:	f7fd fef5 	bl	8004174 <HAL_GetTick>
 800638a:	0002      	movs	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b64      	cmp	r3, #100	@ 0x64
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e278      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006398:	4b88      	ldr	r3, [pc, #544]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	2380      	movs	r3, #128	@ 0x80
 800639e:	029b      	lsls	r3, r3, #10
 80063a0:	4013      	ands	r3, r2
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0xf6>
 80063a4:	e000      	b.n	80063a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2202      	movs	r2, #2
 80063ae:	4013      	ands	r3, r2
 80063b0:	d100      	bne.n	80063b4 <HAL_RCC_OscConfig+0x124>
 80063b2:	e099      	b.n	80064e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b4:	4b81      	ldr	r3, [pc, #516]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2238      	movs	r2, #56	@ 0x38
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063be:	4b7f      	ldr	r3, [pc, #508]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2203      	movs	r2, #3
 80063c4:	4013      	ands	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d102      	bne.n	80063d4 <HAL_RCC_OscConfig+0x144>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d002      	beq.n	80063da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d135      	bne.n	8006446 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063da:	4b78      	ldr	r3, [pc, #480]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	2380      	movs	r3, #128	@ 0x80
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4013      	ands	r3, r2
 80063e4:	d005      	beq.n	80063f2 <HAL_RCC_OscConfig+0x162>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e24b      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f2:	4b72      	ldr	r3, [pc, #456]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4a74      	ldr	r2, [pc, #464]	@ (80065c8 <HAL_RCC_OscConfig+0x338>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	0019      	movs	r1, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	4b6e      	ldr	r3, [pc, #440]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d112      	bne.n	8006434 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800640e:	4b6b      	ldr	r3, [pc, #428]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6e      	ldr	r2, [pc, #440]	@ (80065cc <HAL_RCC_OscConfig+0x33c>)
 8006414:	4013      	ands	r3, r2
 8006416:	0019      	movs	r1, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	4b67      	ldr	r3, [pc, #412]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800641e:	430a      	orrs	r2, r1
 8006420:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006422:	4b66      	ldr	r3, [pc, #408]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	0adb      	lsrs	r3, r3, #11
 8006428:	2207      	movs	r2, #7
 800642a:	4013      	ands	r3, r2
 800642c:	4a68      	ldr	r2, [pc, #416]	@ (80065d0 <HAL_RCC_OscConfig+0x340>)
 800642e:	40da      	lsrs	r2, r3
 8006430:	4b68      	ldr	r3, [pc, #416]	@ (80065d4 <HAL_RCC_OscConfig+0x344>)
 8006432:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006434:	4b68      	ldr	r3, [pc, #416]	@ (80065d8 <HAL_RCC_OscConfig+0x348>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	0018      	movs	r0, r3
 800643a:	f7fd fe3f 	bl	80040bc <HAL_InitTick>
 800643e:	1e03      	subs	r3, r0, #0
 8006440:	d051      	beq.n	80064e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e221      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d030      	beq.n	80064b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800644e:	4b5b      	ldr	r3, [pc, #364]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a5e      	ldr	r2, [pc, #376]	@ (80065cc <HAL_RCC_OscConfig+0x33c>)
 8006454:	4013      	ands	r3, r2
 8006456:	0019      	movs	r1, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	4b57      	ldr	r3, [pc, #348]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800645e:	430a      	orrs	r2, r1
 8006460:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006462:	4b56      	ldr	r3, [pc, #344]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b55      	ldr	r3, [pc, #340]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006468:	2180      	movs	r1, #128	@ 0x80
 800646a:	0049      	lsls	r1, r1, #1
 800646c:	430a      	orrs	r2, r1
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fd fe80 	bl	8004174 <HAL_GetTick>
 8006474:	0003      	movs	r3, r0
 8006476:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800647a:	f7fd fe7b 	bl	8004174 <HAL_GetTick>
 800647e:	0002      	movs	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e1fe      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800648c:	4b4b      	ldr	r3, [pc, #300]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	2380      	movs	r3, #128	@ 0x80
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4013      	ands	r3, r2
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006498:	4b48      	ldr	r3, [pc, #288]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a4a      	ldr	r2, [pc, #296]	@ (80065c8 <HAL_RCC_OscConfig+0x338>)
 800649e:	4013      	ands	r3, r2
 80064a0:	0019      	movs	r1, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	4b44      	ldr	r3, [pc, #272]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	e01b      	b.n	80064e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80064b0:	4b42      	ldr	r3, [pc, #264]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b41      	ldr	r3, [pc, #260]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80064b6:	4949      	ldr	r1, [pc, #292]	@ (80065dc <HAL_RCC_OscConfig+0x34c>)
 80064b8:	400a      	ands	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fd fe5a 	bl	8004174 <HAL_GetTick>
 80064c0:	0003      	movs	r3, r0
 80064c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c6:	f7fd fe55 	bl	8004174 <HAL_GetTick>
 80064ca:	0002      	movs	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e1d8      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064d8:	4b38      	ldr	r3, [pc, #224]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	2380      	movs	r3, #128	@ 0x80
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4013      	ands	r3, r2
 80064e2:	d1f0      	bne.n	80064c6 <HAL_RCC_OscConfig+0x236>
 80064e4:	e000      	b.n	80064e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2208      	movs	r2, #8
 80064ee:	4013      	ands	r3, r2
 80064f0:	d047      	beq.n	8006582 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80064f2:	4b32      	ldr	r3, [pc, #200]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2238      	movs	r2, #56	@ 0x38
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b18      	cmp	r3, #24
 80064fc:	d10a      	bne.n	8006514 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80064fe:	4b2f      	ldr	r3, [pc, #188]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006502:	2202      	movs	r2, #2
 8006504:	4013      	ands	r3, r2
 8006506:	d03c      	beq.n	8006582 <HAL_RCC_OscConfig+0x2f2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d138      	bne.n	8006582 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e1ba      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d019      	beq.n	8006550 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800651c:	4b27      	ldr	r3, [pc, #156]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800651e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006520:	4b26      	ldr	r3, [pc, #152]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006522:	2101      	movs	r1, #1
 8006524:	430a      	orrs	r2, r1
 8006526:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fd fe24 	bl	8004174 <HAL_GetTick>
 800652c:	0003      	movs	r3, r0
 800652e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006532:	f7fd fe1f 	bl	8004174 <HAL_GetTick>
 8006536:	0002      	movs	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e1a2      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006544:	4b1d      	ldr	r3, [pc, #116]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006548:	2202      	movs	r2, #2
 800654a:	4013      	ands	r3, r2
 800654c:	d0f1      	beq.n	8006532 <HAL_RCC_OscConfig+0x2a2>
 800654e:	e018      	b.n	8006582 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006550:	4b1a      	ldr	r3, [pc, #104]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006552:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006554:	4b19      	ldr	r3, [pc, #100]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006556:	2101      	movs	r1, #1
 8006558:	438a      	bics	r2, r1
 800655a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655c:	f7fd fe0a 	bl	8004174 <HAL_GetTick>
 8006560:	0003      	movs	r3, r0
 8006562:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006566:	f7fd fe05 	bl	8004174 <HAL_GetTick>
 800656a:	0002      	movs	r2, r0
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e188      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006578:	4b10      	ldr	r3, [pc, #64]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 800657a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657c:	2202      	movs	r2, #2
 800657e:	4013      	ands	r3, r2
 8006580:	d1f1      	bne.n	8006566 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2204      	movs	r2, #4
 8006588:	4013      	ands	r3, r2
 800658a:	d100      	bne.n	800658e <HAL_RCC_OscConfig+0x2fe>
 800658c:	e0c6      	b.n	800671c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800658e:	231f      	movs	r3, #31
 8006590:	18fb      	adds	r3, r7, r3
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006596:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2238      	movs	r2, #56	@ 0x38
 800659c:	4013      	ands	r3, r2
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d11e      	bne.n	80065e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80065a2:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <HAL_RCC_OscConfig+0x32c>)
 80065a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a6:	2202      	movs	r2, #2
 80065a8:	4013      	ands	r3, r2
 80065aa:	d100      	bne.n	80065ae <HAL_RCC_OscConfig+0x31e>
 80065ac:	e0b6      	b.n	800671c <HAL_RCC_OscConfig+0x48c>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d000      	beq.n	80065b8 <HAL_RCC_OscConfig+0x328>
 80065b6:	e0b1      	b.n	800671c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e166      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
 80065bc:	40021000 	.word	0x40021000
 80065c0:	fffeffff 	.word	0xfffeffff
 80065c4:	fffbffff 	.word	0xfffbffff
 80065c8:	ffff80ff 	.word	0xffff80ff
 80065cc:	ffffc7ff 	.word	0xffffc7ff
 80065d0:	00f42400 	.word	0x00f42400
 80065d4:	20000000 	.word	0x20000000
 80065d8:	20000004 	.word	0x20000004
 80065dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065e0:	4bac      	ldr	r3, [pc, #688]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80065e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065e4:	2380      	movs	r3, #128	@ 0x80
 80065e6:	055b      	lsls	r3, r3, #21
 80065e8:	4013      	ands	r3, r2
 80065ea:	d101      	bne.n	80065f0 <HAL_RCC_OscConfig+0x360>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <HAL_RCC_OscConfig+0x362>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80065f6:	4ba7      	ldr	r3, [pc, #668]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80065f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065fa:	4ba6      	ldr	r3, [pc, #664]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80065fc:	2180      	movs	r1, #128	@ 0x80
 80065fe:	0549      	lsls	r1, r1, #21
 8006600:	430a      	orrs	r2, r1
 8006602:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006604:	4ba3      	ldr	r3, [pc, #652]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	055b      	lsls	r3, r3, #21
 800660c:	4013      	ands	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006612:	231f      	movs	r3, #31
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800661a:	4b9f      	ldr	r3, [pc, #636]	@ (8006898 <HAL_RCC_OscConfig+0x608>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	2380      	movs	r3, #128	@ 0x80
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4013      	ands	r3, r2
 8006624:	d11a      	bne.n	800665c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006626:	4b9c      	ldr	r3, [pc, #624]	@ (8006898 <HAL_RCC_OscConfig+0x608>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b9b      	ldr	r3, [pc, #620]	@ (8006898 <HAL_RCC_OscConfig+0x608>)
 800662c:	2180      	movs	r1, #128	@ 0x80
 800662e:	0049      	lsls	r1, r1, #1
 8006630:	430a      	orrs	r2, r1
 8006632:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006634:	f7fd fd9e 	bl	8004174 <HAL_GetTick>
 8006638:	0003      	movs	r3, r0
 800663a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663e:	f7fd fd99 	bl	8004174 <HAL_GetTick>
 8006642:	0002      	movs	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e11c      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006650:	4b91      	ldr	r3, [pc, #580]	@ (8006898 <HAL_RCC_OscConfig+0x608>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	2380      	movs	r3, #128	@ 0x80
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4013      	ands	r3, r2
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d106      	bne.n	8006672 <HAL_RCC_OscConfig+0x3e2>
 8006664:	4b8b      	ldr	r3, [pc, #556]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006666:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006668:	4b8a      	ldr	r3, [pc, #552]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800666a:	2101      	movs	r1, #1
 800666c:	430a      	orrs	r2, r1
 800666e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006670:	e01c      	b.n	80066ac <HAL_RCC_OscConfig+0x41c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x404>
 800667a:	4b86      	ldr	r3, [pc, #536]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800667c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800667e:	4b85      	ldr	r3, [pc, #532]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006680:	2104      	movs	r1, #4
 8006682:	430a      	orrs	r2, r1
 8006684:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006686:	4b83      	ldr	r3, [pc, #524]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006688:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800668a:	4b82      	ldr	r3, [pc, #520]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800668c:	2101      	movs	r1, #1
 800668e:	430a      	orrs	r2, r1
 8006690:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0x41c>
 8006694:	4b7f      	ldr	r3, [pc, #508]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006696:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006698:	4b7e      	ldr	r3, [pc, #504]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800669a:	2101      	movs	r1, #1
 800669c:	438a      	bics	r2, r1
 800669e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80066a0:	4b7c      	ldr	r3, [pc, #496]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80066a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80066a6:	2104      	movs	r1, #4
 80066a8:	438a      	bics	r2, r1
 80066aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d014      	beq.n	80066de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fd fd5e 	bl	8004174 <HAL_GetTick>
 80066b8:	0003      	movs	r3, r0
 80066ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066bc:	e009      	b.n	80066d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066be:	f7fd fd59 	bl	8004174 <HAL_GetTick>
 80066c2:	0002      	movs	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	4a74      	ldr	r2, [pc, #464]	@ (800689c <HAL_RCC_OscConfig+0x60c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0db      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d2:	4b70      	ldr	r3, [pc, #448]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80066d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d6:	2202      	movs	r2, #2
 80066d8:	4013      	ands	r3, r2
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x42e>
 80066dc:	e013      	b.n	8006706 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066de:	f7fd fd49 	bl	8004174 <HAL_GetTick>
 80066e2:	0003      	movs	r3, r0
 80066e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066e6:	e009      	b.n	80066fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fd fd44 	bl	8004174 <HAL_GetTick>
 80066ec:	0002      	movs	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	4a6a      	ldr	r2, [pc, #424]	@ (800689c <HAL_RCC_OscConfig+0x60c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e0c6      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066fc:	4b65      	ldr	r3, [pc, #404]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80066fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006700:	2202      	movs	r2, #2
 8006702:	4013      	ands	r3, r2
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006706:	231f      	movs	r3, #31
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d105      	bne.n	800671c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006710:	4b60      	ldr	r3, [pc, #384]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006714:	4b5f      	ldr	r3, [pc, #380]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006716:	4962      	ldr	r1, [pc, #392]	@ (80068a0 <HAL_RCC_OscConfig+0x610>)
 8006718:	400a      	ands	r2, r1
 800671a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d100      	bne.n	8006726 <HAL_RCC_OscConfig+0x496>
 8006724:	e0b0      	b.n	8006888 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006726:	4b5b      	ldr	r3, [pc, #364]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2238      	movs	r2, #56	@ 0x38
 800672c:	4013      	ands	r3, r2
 800672e:	2b10      	cmp	r3, #16
 8006730:	d100      	bne.n	8006734 <HAL_RCC_OscConfig+0x4a4>
 8006732:	e078      	b.n	8006826 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d153      	bne.n	80067e4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673c:	4b55      	ldr	r3, [pc, #340]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	4b54      	ldr	r3, [pc, #336]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006742:	4958      	ldr	r1, [pc, #352]	@ (80068a4 <HAL_RCC_OscConfig+0x614>)
 8006744:	400a      	ands	r2, r1
 8006746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fd fd14 	bl	8004174 <HAL_GetTick>
 800674c:	0003      	movs	r3, r0
 800674e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006752:	f7fd fd0f 	bl	8004174 <HAL_GetTick>
 8006756:	0002      	movs	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e092      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006764:	4b4b      	ldr	r3, [pc, #300]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	049b      	lsls	r3, r3, #18
 800676c:	4013      	ands	r3, r2
 800676e:	d1f0      	bne.n	8006752 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006770:	4b48      	ldr	r3, [pc, #288]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	4a4c      	ldr	r2, [pc, #304]	@ (80068a8 <HAL_RCC_OscConfig+0x618>)
 8006776:	4013      	ands	r3, r2
 8006778:	0019      	movs	r1, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1a      	ldr	r2, [r3, #32]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	431a      	orrs	r2, r3
 8006798:	4b3e      	ldr	r3, [pc, #248]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800679a:	430a      	orrs	r2, r1
 800679c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800679e:	4b3d      	ldr	r3, [pc, #244]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	4b3c      	ldr	r3, [pc, #240]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80067a4:	2180      	movs	r1, #128	@ 0x80
 80067a6:	0449      	lsls	r1, r1, #17
 80067a8:	430a      	orrs	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80067ac:	4b39      	ldr	r3, [pc, #228]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	4b38      	ldr	r3, [pc, #224]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80067b2:	2180      	movs	r1, #128	@ 0x80
 80067b4:	0549      	lsls	r1, r1, #21
 80067b6:	430a      	orrs	r2, r1
 80067b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ba:	f7fd fcdb 	bl	8004174 <HAL_GetTick>
 80067be:	0003      	movs	r3, r0
 80067c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c4:	f7fd fcd6 	bl	8004174 <HAL_GetTick>
 80067c8:	0002      	movs	r2, r0
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e059      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	2380      	movs	r3, #128	@ 0x80
 80067dc:	049b      	lsls	r3, r3, #18
 80067de:	4013      	ands	r3, r2
 80067e0:	d0f0      	beq.n	80067c4 <HAL_RCC_OscConfig+0x534>
 80067e2:	e051      	b.n	8006888 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 80067ea:	492e      	ldr	r1, [pc, #184]	@ (80068a4 <HAL_RCC_OscConfig+0x614>)
 80067ec:	400a      	ands	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f0:	f7fd fcc0 	bl	8004174 <HAL_GetTick>
 80067f4:	0003      	movs	r3, r0
 80067f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fa:	f7fd fcbb 	bl	8004174 <HAL_GetTick>
 80067fe:	0002      	movs	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e03e      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800680c:	4b21      	ldr	r3, [pc, #132]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	049b      	lsls	r3, r3, #18
 8006814:	4013      	ands	r3, r2
 8006816:	d1f0      	bne.n	80067fa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006818:	4b1e      	ldr	r3, [pc, #120]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 800681e:	4923      	ldr	r1, [pc, #140]	@ (80068ac <HAL_RCC_OscConfig+0x61c>)
 8006820:	400a      	ands	r2, r1
 8006822:	60da      	str	r2, [r3, #12]
 8006824:	e030      	b.n	8006888 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e02b      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006832:	4b18      	ldr	r3, [pc, #96]	@ (8006894 <HAL_RCC_OscConfig+0x604>)
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2203      	movs	r2, #3
 800683c:	401a      	ands	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	429a      	cmp	r2, r3
 8006844:	d11e      	bne.n	8006884 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2270      	movs	r2, #112	@ 0x70
 800684a:	401a      	ands	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006850:	429a      	cmp	r2, r3
 8006852:	d117      	bne.n	8006884 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	23fe      	movs	r3, #254	@ 0xfe
 8006858:	01db      	lsls	r3, r3, #7
 800685a:	401a      	ands	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006860:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d10e      	bne.n	8006884 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	23f8      	movs	r3, #248	@ 0xf8
 800686a:	039b      	lsls	r3, r3, #14
 800686c:	401a      	ands	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006872:	429a      	cmp	r2, r3
 8006874:	d106      	bne.n	8006884 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	0f5b      	lsrs	r3, r3, #29
 800687a:	075a      	lsls	r2, r3, #29
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006880:	429a      	cmp	r2, r3
 8006882:	d001      	beq.n	8006888 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	b008      	add	sp, #32
 8006890:	bd80      	pop	{r7, pc}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	40021000 	.word	0x40021000
 8006898:	40007000 	.word	0x40007000
 800689c:	00001388 	.word	0x00001388
 80068a0:	efffffff 	.word	0xefffffff
 80068a4:	feffffff 	.word	0xfeffffff
 80068a8:	1fc1808c 	.word	0x1fc1808c
 80068ac:	effefffc 	.word	0xeffefffc

080068b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0e9      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068c4:	4b76      	ldr	r3, [pc, #472]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2207      	movs	r2, #7
 80068ca:	4013      	ands	r3, r2
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d91e      	bls.n	8006910 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d2:	4b73      	ldr	r3, [pc, #460]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2207      	movs	r2, #7
 80068d8:	4393      	bics	r3, r2
 80068da:	0019      	movs	r1, r3
 80068dc:	4b70      	ldr	r3, [pc, #448]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068e4:	f7fd fc46 	bl	8004174 <HAL_GetTick>
 80068e8:	0003      	movs	r3, r0
 80068ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068ec:	e009      	b.n	8006902 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068ee:	f7fd fc41 	bl	8004174 <HAL_GetTick>
 80068f2:	0002      	movs	r2, r0
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	4a6a      	ldr	r2, [pc, #424]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e0ca      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006902:	4b67      	ldr	r3, [pc, #412]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2207      	movs	r2, #7
 8006908:	4013      	ands	r3, r2
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d1ee      	bne.n	80068ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2202      	movs	r2, #2
 8006916:	4013      	ands	r3, r2
 8006918:	d015      	beq.n	8006946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2204      	movs	r2, #4
 8006920:	4013      	ands	r3, r2
 8006922:	d006      	beq.n	8006932 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006924:	4b60      	ldr	r3, [pc, #384]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	4b5f      	ldr	r3, [pc, #380]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800692a:	21e0      	movs	r1, #224	@ 0xe0
 800692c:	01c9      	lsls	r1, r1, #7
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006932:	4b5d      	ldr	r3, [pc, #372]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	4a5d      	ldr	r2, [pc, #372]	@ (8006aac <HAL_RCC_ClockConfig+0x1fc>)
 8006938:	4013      	ands	r3, r2
 800693a:	0019      	movs	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	4b59      	ldr	r3, [pc, #356]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2201      	movs	r2, #1
 800694c:	4013      	ands	r3, r2
 800694e:	d057      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d107      	bne.n	8006968 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006958:	4b53      	ldr	r3, [pc, #332]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	2380      	movs	r3, #128	@ 0x80
 800695e:	029b      	lsls	r3, r3, #10
 8006960:	4013      	ands	r3, r2
 8006962:	d12b      	bne.n	80069bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e097      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d107      	bne.n	8006980 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006970:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	049b      	lsls	r3, r3, #18
 8006978:	4013      	ands	r3, r2
 800697a:	d11f      	bne.n	80069bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e08b      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d107      	bne.n	8006998 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006988:	4b47      	ldr	r3, [pc, #284]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	2380      	movs	r3, #128	@ 0x80
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4013      	ands	r3, r2
 8006992:	d113      	bne.n	80069bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e07f      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b03      	cmp	r3, #3
 800699e:	d106      	bne.n	80069ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069a0:	4b41      	ldr	r3, [pc, #260]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80069a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a4:	2202      	movs	r2, #2
 80069a6:	4013      	ands	r3, r2
 80069a8:	d108      	bne.n	80069bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e074      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ae:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80069b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b2:	2202      	movs	r2, #2
 80069b4:	4013      	ands	r3, r2
 80069b6:	d101      	bne.n	80069bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e06d      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069bc:	4b3a      	ldr	r3, [pc, #232]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2207      	movs	r2, #7
 80069c2:	4393      	bics	r3, r2
 80069c4:	0019      	movs	r1, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	4b37      	ldr	r3, [pc, #220]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80069cc:	430a      	orrs	r2, r1
 80069ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d0:	f7fd fbd0 	bl	8004174 <HAL_GetTick>
 80069d4:	0003      	movs	r3, r0
 80069d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d8:	e009      	b.n	80069ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069da:	f7fd fbcb 	bl	8004174 <HAL_GetTick>
 80069de:	0002      	movs	r2, r0
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e054      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ee:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2238      	movs	r2, #56	@ 0x38
 80069f4:	401a      	ands	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1ec      	bne.n	80069da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a00:	4b27      	ldr	r3, [pc, #156]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2207      	movs	r2, #7
 8006a06:	4013      	ands	r3, r2
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d21e      	bcs.n	8006a4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0e:	4b24      	ldr	r3, [pc, #144]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2207      	movs	r2, #7
 8006a14:	4393      	bics	r3, r2
 8006a16:	0019      	movs	r1, r3
 8006a18:	4b21      	ldr	r3, [pc, #132]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a20:	f7fd fba8 	bl	8004174 <HAL_GetTick>
 8006a24:	0003      	movs	r3, r0
 8006a26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a28:	e009      	b.n	8006a3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a2a:	f7fd fba3 	bl	8004174 <HAL_GetTick>
 8006a2e:	0002      	movs	r2, r0
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa4 <HAL_RCC_ClockConfig+0x1f4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e02c      	b.n	8006a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006a3e:	4b18      	ldr	r3, [pc, #96]	@ (8006aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2207      	movs	r2, #7
 8006a44:	4013      	ands	r3, r2
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d1ee      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2204      	movs	r2, #4
 8006a52:	4013      	ands	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a56:	4b14      	ldr	r3, [pc, #80]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	4a15      	ldr	r2, [pc, #84]	@ (8006ab0 <HAL_RCC_ClockConfig+0x200>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	0019      	movs	r1, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8006a66:	430a      	orrs	r2, r1
 8006a68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a6a:	f000 f829 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8006a6e:	0001      	movs	r1, r0
 8006a70:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	0a1b      	lsrs	r3, r3, #8
 8006a76:	220f      	movs	r2, #15
 8006a78:	401a      	ands	r2, r3
 8006a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ab4 <HAL_RCC_ClockConfig+0x204>)
 8006a7c:	0092      	lsls	r2, r2, #2
 8006a7e:	58d3      	ldr	r3, [r2, r3]
 8006a80:	221f      	movs	r2, #31
 8006a82:	4013      	ands	r3, r2
 8006a84:	000a      	movs	r2, r1
 8006a86:	40da      	lsrs	r2, r3
 8006a88:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <HAL_RCC_ClockConfig+0x208>)
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006abc <HAL_RCC_ClockConfig+0x20c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	0018      	movs	r0, r3
 8006a92:	f7fd fb13 	bl	80040bc <HAL_InitTick>
 8006a96:	0003      	movs	r3, r0
}
 8006a98:	0018      	movs	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b004      	add	sp, #16
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40022000 	.word	0x40022000
 8006aa4:	00001388 	.word	0x00001388
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	fffff0ff 	.word	0xfffff0ff
 8006ab0:	ffff8fff 	.word	0xffff8fff
 8006ab4:	0800b858 	.word	0x0800b858
 8006ab8:	20000000 	.word	0x20000000
 8006abc:	20000004 	.word	0x20000004

08006ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2238      	movs	r2, #56	@ 0x38
 8006acc:	4013      	ands	r3, r2
 8006ace:	d10f      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006ad0:	4b39      	ldr	r3, [pc, #228]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	0adb      	lsrs	r3, r3, #11
 8006ad6:	2207      	movs	r2, #7
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2201      	movs	r2, #1
 8006adc:	409a      	lsls	r2, r3
 8006ade:	0013      	movs	r3, r2
 8006ae0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	4835      	ldr	r0, [pc, #212]	@ (8006bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006ae6:	f7f9 fb27 	bl	8000138 <__udivsi3>
 8006aea:	0003      	movs	r3, r0
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	e05d      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006af0:	4b31      	ldr	r3, [pc, #196]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2238      	movs	r2, #56	@ 0x38
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d102      	bne.n	8006b02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006afc:	4b30      	ldr	r3, [pc, #192]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	e054      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b02:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2238      	movs	r2, #56	@ 0x38
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d138      	bne.n	8006b80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	2203      	movs	r2, #3
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b18:	4b27      	ldr	r3, [pc, #156]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	2207      	movs	r2, #7
 8006b20:	4013      	ands	r3, r2
 8006b22:	3301      	adds	r3, #1
 8006b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d10d      	bne.n	8006b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	4824      	ldr	r0, [pc, #144]	@ (8006bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b30:	f7f9 fb02 	bl	8000138 <__udivsi3>
 8006b34:	0003      	movs	r3, r0
 8006b36:	0019      	movs	r1, r3
 8006b38:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	227f      	movs	r2, #127	@ 0x7f
 8006b40:	4013      	ands	r3, r2
 8006b42:	434b      	muls	r3, r1
 8006b44:	617b      	str	r3, [r7, #20]
        break;
 8006b46:	e00d      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	481c      	ldr	r0, [pc, #112]	@ (8006bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b4c:	f7f9 faf4 	bl	8000138 <__udivsi3>
 8006b50:	0003      	movs	r3, r0
 8006b52:	0019      	movs	r1, r3
 8006b54:	4b18      	ldr	r3, [pc, #96]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	227f      	movs	r2, #127	@ 0x7f
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	434b      	muls	r3, r1
 8006b60:	617b      	str	r3, [r7, #20]
        break;
 8006b62:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006b64:	4b14      	ldr	r3, [pc, #80]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	0f5b      	lsrs	r3, r3, #29
 8006b6a:	2207      	movs	r2, #7
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	3301      	adds	r3, #1
 8006b70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	6978      	ldr	r0, [r7, #20]
 8006b76:	f7f9 fadf 	bl	8000138 <__udivsi3>
 8006b7a:	0003      	movs	r3, r0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	e015      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b80:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2238      	movs	r2, #56	@ 0x38
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d103      	bne.n	8006b94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006b8c:	2380      	movs	r3, #128	@ 0x80
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b94:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2238      	movs	r2, #56	@ 0x38
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	2b18      	cmp	r3, #24
 8006b9e:	d103      	bne.n	8006ba8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006ba0:	23fa      	movs	r3, #250	@ 0xfa
 8006ba2:	01db      	lsls	r3, r3, #7
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e001      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bac:	693b      	ldr	r3, [r7, #16]
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b006      	add	sp, #24
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			@ (mov r8, r8)
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	00f42400 	.word	0x00f42400
 8006bc0:	007a1200 	.word	0x007a1200

08006bc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc8:	4b02      	ldr	r3, [pc, #8]	@ (8006bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006bca:	681b      	ldr	r3, [r3, #0]
}
 8006bcc:	0018      	movs	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	46c0      	nop			@ (mov r8, r8)
 8006bd4:	20000000 	.word	0x20000000

08006bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd8:	b5b0      	push	{r4, r5, r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006bdc:	f7ff fff2 	bl	8006bc4 <HAL_RCC_GetHCLKFreq>
 8006be0:	0004      	movs	r4, r0
 8006be2:	f7ff fb49 	bl	8006278 <LL_RCC_GetAPB1Prescaler>
 8006be6:	0003      	movs	r3, r0
 8006be8:	0b1a      	lsrs	r2, r3, #12
 8006bea:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bec:	0092      	lsls	r2, r2, #2
 8006bee:	58d3      	ldr	r3, [r2, r3]
 8006bf0:	221f      	movs	r2, #31
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	40dc      	lsrs	r4, r3
 8006bf6:	0023      	movs	r3, r4
}
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	0800b898 	.word	0x0800b898

08006c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006c0c:	2313      	movs	r3, #19
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c14:	2312      	movs	r3, #18
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	2380      	movs	r3, #128	@ 0x80
 8006c22:	029b      	lsls	r3, r3, #10
 8006c24:	4013      	ands	r3, r2
 8006c26:	d100      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006c28:	e0a3      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c2a:	2011      	movs	r0, #17
 8006c2c:	183b      	adds	r3, r7, r0
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c32:	4b7f      	ldr	r3, [pc, #508]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c36:	2380      	movs	r3, #128	@ 0x80
 8006c38:	055b      	lsls	r3, r3, #21
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	d110      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c42:	4b7b      	ldr	r3, [pc, #492]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c44:	2180      	movs	r1, #128	@ 0x80
 8006c46:	0549      	lsls	r1, r1, #21
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c4c:	4b78      	ldr	r3, [pc, #480]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c50:	2380      	movs	r3, #128	@ 0x80
 8006c52:	055b      	lsls	r3, r3, #21
 8006c54:	4013      	ands	r3, r2
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5a:	183b      	adds	r3, r7, r0
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c60:	4b74      	ldr	r3, [pc, #464]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b73      	ldr	r3, [pc, #460]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006c66:	2180      	movs	r1, #128	@ 0x80
 8006c68:	0049      	lsls	r1, r1, #1
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c6e:	f7fd fa81 	bl	8004174 <HAL_GetTick>
 8006c72:	0003      	movs	r3, r0
 8006c74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c76:	e00b      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c78:	f7fd fa7c 	bl	8004174 <HAL_GetTick>
 8006c7c:	0002      	movs	r2, r0
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d904      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006c86:	2313      	movs	r3, #19
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	701a      	strb	r2, [r3, #0]
        break;
 8006c8e:	e005      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c90:	4b68      	ldr	r3, [pc, #416]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	2380      	movs	r3, #128	@ 0x80
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d0ed      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006c9c:	2313      	movs	r3, #19
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d154      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ca6:	4b62      	ldr	r3, [pc, #392]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ca8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006caa:	23c0      	movs	r3, #192	@ 0xc0
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4013      	ands	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d019      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d014      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ccc:	4b58      	ldr	r3, [pc, #352]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006cce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cd0:	4b57      	ldr	r3, [pc, #348]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006cd2:	2180      	movs	r1, #128	@ 0x80
 8006cd4:	0249      	lsls	r1, r1, #9
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cda:	4b55      	ldr	r3, [pc, #340]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006cdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cde:	4b54      	ldr	r3, [pc, #336]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ce0:	4956      	ldr	r1, [pc, #344]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8006ce2:	400a      	ands	r2, r1
 8006ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ce6:	4b52      	ldr	r3, [pc, #328]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d016      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fd fa3e 	bl	8004174 <HAL_GetTick>
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cfc:	e00c      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfe:	f7fd fa39 	bl	8004174 <HAL_GetTick>
 8006d02:	0002      	movs	r2, r0
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	4a4d      	ldr	r2, [pc, #308]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d904      	bls.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006d0e:	2313      	movs	r3, #19
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	2203      	movs	r2, #3
 8006d14:	701a      	strb	r2, [r3, #0]
            break;
 8006d16:	e004      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d18:	4b45      	ldr	r3, [pc, #276]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d0ed      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006d22:	2313      	movs	r3, #19
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d2c:	4b40      	ldr	r3, [pc, #256]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	4a41      	ldr	r2, [pc, #260]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	0019      	movs	r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695a      	ldr	r2, [r3, #20]
 8006d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d40:	e00c      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d42:	2312      	movs	r3, #18
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	2213      	movs	r2, #19
 8006d48:	18ba      	adds	r2, r7, r2
 8006d4a:	7812      	ldrb	r2, [r2, #0]
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e005      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d50:	2312      	movs	r3, #18
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	2213      	movs	r2, #19
 8006d56:	18ba      	adds	r2, r7, r2
 8006d58:	7812      	ldrb	r2, [r2, #0]
 8006d5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d5c:	2311      	movs	r3, #17
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d105      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d66:	4b32      	ldr	r3, [pc, #200]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d6a:	4b31      	ldr	r3, [pc, #196]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d6c:	4935      	ldr	r1, [pc, #212]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d6e:	400a      	ands	r2, r1
 8006d70:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2201      	movs	r2, #1
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d009      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d80:	2203      	movs	r2, #3
 8006d82:	4393      	bics	r3, r2
 8006d84:	0019      	movs	r1, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	4b29      	ldr	r3, [pc, #164]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2220      	movs	r2, #32
 8006d96:	4013      	ands	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d9a:	4b25      	ldr	r3, [pc, #148]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	0019      	movs	r1, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	4b21      	ldr	r3, [pc, #132]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006daa:	430a      	orrs	r2, r1
 8006dac:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	2380      	movs	r3, #128	@ 0x80
 8006db4:	01db      	lsls	r3, r3, #7
 8006db6:	4013      	ands	r3, r2
 8006db8:	d015      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dba:	4b1d      	ldr	r3, [pc, #116]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	0899      	lsrs	r1, r3, #2
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	2380      	movs	r3, #128	@ 0x80
 8006dd2:	05db      	lsls	r3, r3, #23
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d106      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006dd8:	4b15      	ldr	r3, [pc, #84]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	4b14      	ldr	r3, [pc, #80]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006dde:	2180      	movs	r1, #128	@ 0x80
 8006de0:	0249      	lsls	r1, r1, #9
 8006de2:	430a      	orrs	r2, r1
 8006de4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	4013      	ands	r3, r2
 8006df0:	d016      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006df2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df6:	4a15      	ldr	r2, [pc, #84]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	4b0b      	ldr	r3, [pc, #44]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e02:	430a      	orrs	r2, r1
 8006e04:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	2380      	movs	r3, #128	@ 0x80
 8006e0c:	01db      	lsls	r3, r3, #7
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d106      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006e12:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006e18:	2180      	movs	r1, #128	@ 0x80
 8006e1a:	0249      	lsls	r1, r1, #9
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006e20:	2312      	movs	r3, #18
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	781b      	ldrb	r3, [r3, #0]
}
 8006e26:	0018      	movs	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b006      	add	sp, #24
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	40021000 	.word	0x40021000
 8006e34:	40007000 	.word	0x40007000
 8006e38:	fffffcff 	.word	0xfffffcff
 8006e3c:	fffeffff 	.word	0xfffeffff
 8006e40:	00001388 	.word	0x00001388
 8006e44:	efffffff 	.word	0xefffffff
 8006e48:	ffffcfff 	.word	0xffffcfff
 8006e4c:	ffff3fff 	.word	0xffff3fff

08006e50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e50:	b5b0      	push	{r4, r5, r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e58:	230f      	movs	r3, #15
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d100      	bne.n	8006e68 <HAL_RTC_Init+0x18>
 8006e66:	e08c      	b.n	8006f82 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2229      	movs	r2, #41	@ 0x29
 8006e6c:	5c9b      	ldrb	r3, [r3, r2]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2228      	movs	r2, #40	@ 0x28
 8006e78:	2100      	movs	r1, #0
 8006e7a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2288      	movs	r2, #136	@ 0x88
 8006e80:	0212      	lsls	r2, r2, #8
 8006e82:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	0018      	movs	r0, r3
 8006e88:	f7fc ff66 	bl	8003d58 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2229      	movs	r2, #41	@ 0x29
 8006e90:	2102      	movs	r1, #2
 8006e92:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d062      	beq.n	8006f68 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	22ca      	movs	r2, #202	@ 0xca
 8006ea8:	625a      	str	r2, [r3, #36]	@ 0x24
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2253      	movs	r2, #83	@ 0x53
 8006eb0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006eb2:	250f      	movs	r5, #15
 8006eb4:	197c      	adds	r4, r7, r5
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f000 f891 	bl	8006fe0 <RTC_EnterInitMode>
 8006ebe:	0003      	movs	r3, r0
 8006ec0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8006ec2:	0028      	movs	r0, r5
 8006ec4:	183b      	adds	r3, r7, r0
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d12c      	bne.n	8006f26 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	699a      	ldr	r2, [r3, #24]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	492e      	ldr	r1, [pc, #184]	@ (8006f90 <HAL_RTC_Init+0x140>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6999      	ldr	r1, [r3, #24]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6912      	ldr	r2, [r2, #16]
 8006f02:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6919      	ldr	r1, [r3, #16]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	041a      	lsls	r2, r3, #16
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006f18:	183c      	adds	r4, r7, r0
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 f8a1 	bl	8007064 <RTC_ExitInitMode>
 8006f22:	0003      	movs	r3, r0
 8006f24:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8006f26:	230f      	movs	r3, #15
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d116      	bne.n	8006f5e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	00d2      	lsls	r2, r2, #3
 8006f3c:	08d2      	lsrs	r2, r2, #3
 8006f3e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6999      	ldr	r1, [r3, #24]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	22ff      	movs	r2, #255	@ 0xff
 8006f64:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f66:	e003      	b.n	8006f70 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006f68:	230f      	movs	r3, #15
 8006f6a:	18fb      	adds	r3, r7, r3
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006f70:	230f      	movs	r3, #15
 8006f72:	18fb      	adds	r3, r7, r3
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2229      	movs	r2, #41	@ 0x29
 8006f7e:	2101      	movs	r1, #1
 8006f80:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8006f82:	230f      	movs	r3, #15
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	781b      	ldrb	r3, [r3, #0]
}
 8006f88:	0018      	movs	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b004      	add	sp, #16
 8006f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f90:	fb8fffbf 	.word	0xfb8fffbf

08006f94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8006fdc <HAL_RTC_WaitForSynchro+0x48>)
 8006fa2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006fa4:	f7fd f8e6 	bl	8004174 <HAL_GetTick>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006fac:	e00a      	b.n	8006fc4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006fae:	f7fd f8e1 	bl	8004174 <HAL_GetTick>
 8006fb2:	0002      	movs	r2, r0
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	23fa      	movs	r3, #250	@ 0xfa
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d901      	bls.n	8006fc4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e006      	b.n	8006fd2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d0ee      	beq.n	8006fae <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b004      	add	sp, #16
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	46c0      	nop			@ (mov r8, r8)
 8006fdc:	0001005f 	.word	0x0001005f

08006fe0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006fe8:	230f      	movs	r3, #15
 8006fea:	18fb      	adds	r3, r7, r3
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2240      	movs	r2, #64	@ 0x40
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	d12c      	bne.n	8007056 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2180      	movs	r1, #128	@ 0x80
 8007008:	430a      	orrs	r2, r1
 800700a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800700c:	f7fd f8b2 	bl	8004174 <HAL_GetTick>
 8007010:	0003      	movs	r3, r0
 8007012:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007014:	e014      	b.n	8007040 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007016:	f7fd f8ad 	bl	8004174 <HAL_GetTick>
 800701a:	0002      	movs	r2, r0
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	200f      	movs	r0, #15
 8007022:	183b      	adds	r3, r7, r0
 8007024:	1839      	adds	r1, r7, r0
 8007026:	7809      	ldrb	r1, [r1, #0]
 8007028:	7019      	strb	r1, [r3, #0]
 800702a:	23fa      	movs	r3, #250	@ 0xfa
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	429a      	cmp	r2, r3
 8007030:	d906      	bls.n	8007040 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8007032:	183b      	adds	r3, r7, r0
 8007034:	2203      	movs	r2, #3
 8007036:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2229      	movs	r2, #41	@ 0x29
 800703c:	2103      	movs	r1, #3
 800703e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	2240      	movs	r2, #64	@ 0x40
 8007048:	4013      	ands	r3, r2
 800704a:	d104      	bne.n	8007056 <RTC_EnterInitMode+0x76>
 800704c:	230f      	movs	r3, #15
 800704e:	18fb      	adds	r3, r7, r3
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b03      	cmp	r3, #3
 8007054:	d1df      	bne.n	8007016 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007056:	230f      	movs	r3, #15
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	781b      	ldrb	r3, [r3, #0]
}
 800705c:	0018      	movs	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	b004      	add	sp, #16
 8007062:	bd80      	pop	{r7, pc}

08007064 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007064:	b590      	push	{r4, r7, lr}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800706c:	240f      	movs	r4, #15
 800706e:	193b      	adds	r3, r7, r4
 8007070:	2200      	movs	r2, #0
 8007072:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007074:	4b1c      	ldr	r3, [pc, #112]	@ (80070e8 <RTC_ExitInitMode+0x84>)
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	4b1b      	ldr	r3, [pc, #108]	@ (80070e8 <RTC_ExitInitMode+0x84>)
 800707a:	2180      	movs	r1, #128	@ 0x80
 800707c:	438a      	bics	r2, r1
 800707e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007080:	4b19      	ldr	r3, [pc, #100]	@ (80070e8 <RTC_ExitInitMode+0x84>)
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2220      	movs	r2, #32
 8007086:	4013      	ands	r3, r2
 8007088:	d10d      	bne.n	80070a6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0018      	movs	r0, r3
 800708e:	f7ff ff81 	bl	8006f94 <HAL_RTC_WaitForSynchro>
 8007092:	1e03      	subs	r3, r0, #0
 8007094:	d021      	beq.n	80070da <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2229      	movs	r2, #41	@ 0x29
 800709a:	2103      	movs	r1, #3
 800709c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800709e:	193b      	adds	r3, r7, r4
 80070a0:	2203      	movs	r2, #3
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e019      	b.n	80070da <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070a6:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <RTC_ExitInitMode+0x84>)
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	4b0f      	ldr	r3, [pc, #60]	@ (80070e8 <RTC_ExitInitMode+0x84>)
 80070ac:	2120      	movs	r1, #32
 80070ae:	438a      	bics	r2, r1
 80070b0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	0018      	movs	r0, r3
 80070b6:	f7ff ff6d 	bl	8006f94 <HAL_RTC_WaitForSynchro>
 80070ba:	1e03      	subs	r3, r0, #0
 80070bc:	d007      	beq.n	80070ce <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2229      	movs	r2, #41	@ 0x29
 80070c2:	2103      	movs	r1, #3
 80070c4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80070c6:	230f      	movs	r3, #15
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	2203      	movs	r2, #3
 80070cc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80070ce:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <RTC_ExitInitMode+0x84>)
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <RTC_ExitInitMode+0x84>)
 80070d4:	2120      	movs	r1, #32
 80070d6:	430a      	orrs	r2, r1
 80070d8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80070da:	230f      	movs	r3, #15
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	781b      	ldrb	r3, [r3, #0]
}
 80070e0:	0018      	movs	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b005      	add	sp, #20
 80070e6:	bd90      	pop	{r4, r7, pc}
 80070e8:	40002800 	.word	0x40002800

080070ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e046      	b.n	800718c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2288      	movs	r2, #136	@ 0x88
 8007102:	589b      	ldr	r3, [r3, r2]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d107      	bne.n	8007118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2284      	movs	r2, #132	@ 0x84
 800710c:	2100      	movs	r1, #0
 800710e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	0018      	movs	r0, r3
 8007114:	f7fc fe5e 	bl	8003dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2288      	movs	r2, #136	@ 0x88
 800711c:	2124      	movs	r1, #36	@ 0x24
 800711e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2101      	movs	r1, #1
 800712c:	438a      	bics	r2, r1
 800712e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 fa3a 	bl	80075b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	0018      	movs	r0, r3
 8007144:	f000 f8cc 	bl	80072e0 <UART_SetConfig>
 8007148:	0003      	movs	r3, r0
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e01c      	b.n	800718c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	490d      	ldr	r1, [pc, #52]	@ (8007194 <HAL_UART_Init+0xa8>)
 800715e:	400a      	ands	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	212a      	movs	r1, #42	@ 0x2a
 800716e:	438a      	bics	r2, r1
 8007170:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2101      	movs	r1, #1
 800717e:	430a      	orrs	r2, r1
 8007180:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	0018      	movs	r0, r3
 8007186:	f000 fac9 	bl	800771c <UART_CheckIdleState>
 800718a:	0003      	movs	r3, r0
}
 800718c:	0018      	movs	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	b002      	add	sp, #8
 8007192:	bd80      	pop	{r7, pc}
 8007194:	ffffb7ff 	.word	0xffffb7ff

08007198 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	@ 0x28
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	1dbb      	adds	r3, r7, #6
 80071a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2288      	movs	r2, #136	@ 0x88
 80071ac:	589b      	ldr	r3, [r3, r2]
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d000      	beq.n	80071b4 <HAL_UART_Transmit+0x1c>
 80071b2:	e090      	b.n	80072d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_UART_Transmit+0x2a>
 80071ba:	1dbb      	adds	r3, r7, #6
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e088      	b.n	80072d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	2380      	movs	r3, #128	@ 0x80
 80071cc:	015b      	lsls	r3, r3, #5
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d109      	bne.n	80071e6 <HAL_UART_Transmit+0x4e>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2201      	movs	r2, #1
 80071de:	4013      	ands	r3, r2
 80071e0:	d001      	beq.n	80071e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e078      	b.n	80072d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2290      	movs	r2, #144	@ 0x90
 80071ea:	2100      	movs	r1, #0
 80071ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2288      	movs	r2, #136	@ 0x88
 80071f2:	2121      	movs	r1, #33	@ 0x21
 80071f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071f6:	f7fc ffbd 	bl	8004174 <HAL_GetTick>
 80071fa:	0003      	movs	r3, r0
 80071fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1dba      	adds	r2, r7, #6
 8007202:	2154      	movs	r1, #84	@ 0x54
 8007204:	8812      	ldrh	r2, [r2, #0]
 8007206:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	1dba      	adds	r2, r7, #6
 800720c:	2156      	movs	r1, #86	@ 0x56
 800720e:	8812      	ldrh	r2, [r2, #0]
 8007210:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	2380      	movs	r3, #128	@ 0x80
 8007218:	015b      	lsls	r3, r3, #5
 800721a:	429a      	cmp	r2, r3
 800721c:	d108      	bne.n	8007230 <HAL_UART_Transmit+0x98>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d104      	bne.n	8007230 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	e003      	b.n	8007238 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007238:	e030      	b.n	800729c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	0013      	movs	r3, r2
 8007244:	2200      	movs	r2, #0
 8007246:	2180      	movs	r1, #128	@ 0x80
 8007248:	f000 fb12 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 800724c:	1e03      	subs	r3, r0, #0
 800724e:	d005      	beq.n	800725c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2288      	movs	r2, #136	@ 0x88
 8007254:	2120      	movs	r1, #32
 8007256:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e03d      	b.n	80072d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	001a      	movs	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	05d2      	lsls	r2, r2, #23
 800726e:	0dd2      	lsrs	r2, r2, #23
 8007270:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	3302      	adds	r3, #2
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	e007      	b.n	800728a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	3301      	adds	r3, #1
 8007288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2256      	movs	r2, #86	@ 0x56
 800728e:	5a9b      	ldrh	r3, [r3, r2]
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b299      	uxth	r1, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2256      	movs	r2, #86	@ 0x56
 800729a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2256      	movs	r2, #86	@ 0x56
 80072a0:	5a9b      	ldrh	r3, [r3, r2]
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1c8      	bne.n	800723a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	0013      	movs	r3, r2
 80072b2:	2200      	movs	r2, #0
 80072b4:	2140      	movs	r1, #64	@ 0x40
 80072b6:	f000 fadb 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 80072ba:	1e03      	subs	r3, r0, #0
 80072bc:	d005      	beq.n	80072ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2288      	movs	r2, #136	@ 0x88
 80072c2:	2120      	movs	r1, #32
 80072c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e006      	b.n	80072d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2288      	movs	r2, #136	@ 0x88
 80072ce:	2120      	movs	r1, #32
 80072d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e000      	b.n	80072d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80072d6:	2302      	movs	r3, #2
  }
}
 80072d8:	0018      	movs	r0, r3
 80072da:	46bd      	mov	sp, r7
 80072dc:	b008      	add	sp, #32
 80072de:	bd80      	pop	{r7, pc}

080072e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e8:	231a      	movs	r3, #26
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	4313      	orrs	r3, r2
 8007306:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4aa1      	ldr	r2, [pc, #644]	@ (8007594 <UART_SetConfig+0x2b4>)
 8007310:	4013      	ands	r3, r2
 8007312:	0019      	movs	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	430a      	orrs	r2, r1
 800731c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a9c      	ldr	r2, [pc, #624]	@ (8007598 <UART_SetConfig+0x2b8>)
 8007326:	4013      	ands	r3, r2
 8007328:	0019      	movs	r1, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	4313      	orrs	r3, r2
 8007344:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	4a93      	ldr	r2, [pc, #588]	@ (800759c <UART_SetConfig+0x2bc>)
 800734e:	4013      	ands	r3, r2
 8007350:	0019      	movs	r1, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	430a      	orrs	r2, r1
 800735a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007362:	220f      	movs	r2, #15
 8007364:	4393      	bics	r3, r2
 8007366:	0019      	movs	r1, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a89      	ldr	r2, [pc, #548]	@ (80075a0 <UART_SetConfig+0x2c0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d127      	bne.n	80073ce <UART_SetConfig+0xee>
 800737e:	4b89      	ldr	r3, [pc, #548]	@ (80075a4 <UART_SetConfig+0x2c4>)
 8007380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007382:	2203      	movs	r2, #3
 8007384:	4013      	ands	r3, r2
 8007386:	2b03      	cmp	r3, #3
 8007388:	d017      	beq.n	80073ba <UART_SetConfig+0xda>
 800738a:	d81b      	bhi.n	80073c4 <UART_SetConfig+0xe4>
 800738c:	2b02      	cmp	r3, #2
 800738e:	d00a      	beq.n	80073a6 <UART_SetConfig+0xc6>
 8007390:	d818      	bhi.n	80073c4 <UART_SetConfig+0xe4>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <UART_SetConfig+0xbc>
 8007396:	2b01      	cmp	r3, #1
 8007398:	d00a      	beq.n	80073b0 <UART_SetConfig+0xd0>
 800739a:	e013      	b.n	80073c4 <UART_SetConfig+0xe4>
 800739c:	231b      	movs	r3, #27
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e021      	b.n	80073ea <UART_SetConfig+0x10a>
 80073a6:	231b      	movs	r3, #27
 80073a8:	18fb      	adds	r3, r7, r3
 80073aa:	2202      	movs	r2, #2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e01c      	b.n	80073ea <UART_SetConfig+0x10a>
 80073b0:	231b      	movs	r3, #27
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	2204      	movs	r2, #4
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e017      	b.n	80073ea <UART_SetConfig+0x10a>
 80073ba:	231b      	movs	r3, #27
 80073bc:	18fb      	adds	r3, r7, r3
 80073be:	2208      	movs	r2, #8
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e012      	b.n	80073ea <UART_SetConfig+0x10a>
 80073c4:	231b      	movs	r3, #27
 80073c6:	18fb      	adds	r3, r7, r3
 80073c8:	2210      	movs	r2, #16
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e00d      	b.n	80073ea <UART_SetConfig+0x10a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a75      	ldr	r2, [pc, #468]	@ (80075a8 <UART_SetConfig+0x2c8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d104      	bne.n	80073e2 <UART_SetConfig+0x102>
 80073d8:	231b      	movs	r3, #27
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	e003      	b.n	80073ea <UART_SetConfig+0x10a>
 80073e2:	231b      	movs	r3, #27
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	2210      	movs	r2, #16
 80073e8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69da      	ldr	r2, [r3, #28]
 80073ee:	2380      	movs	r3, #128	@ 0x80
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d000      	beq.n	80073f8 <UART_SetConfig+0x118>
 80073f6:	e065      	b.n	80074c4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80073f8:	231b      	movs	r3, #27
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d015      	beq.n	800742e <UART_SetConfig+0x14e>
 8007402:	dc18      	bgt.n	8007436 <UART_SetConfig+0x156>
 8007404:	2b04      	cmp	r3, #4
 8007406:	d00d      	beq.n	8007424 <UART_SetConfig+0x144>
 8007408:	dc15      	bgt.n	8007436 <UART_SetConfig+0x156>
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <UART_SetConfig+0x134>
 800740e:	2b02      	cmp	r3, #2
 8007410:	d005      	beq.n	800741e <UART_SetConfig+0x13e>
 8007412:	e010      	b.n	8007436 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007414:	f7ff fbe0 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 8007418:	0003      	movs	r3, r0
 800741a:	617b      	str	r3, [r7, #20]
        break;
 800741c:	e012      	b.n	8007444 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800741e:	4b63      	ldr	r3, [pc, #396]	@ (80075ac <UART_SetConfig+0x2cc>)
 8007420:	617b      	str	r3, [r7, #20]
        break;
 8007422:	e00f      	b.n	8007444 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007424:	f7ff fb4c 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 8007428:	0003      	movs	r3, r0
 800742a:	617b      	str	r3, [r7, #20]
        break;
 800742c:	e00a      	b.n	8007444 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742e:	2380      	movs	r3, #128	@ 0x80
 8007430:	021b      	lsls	r3, r3, #8
 8007432:	617b      	str	r3, [r7, #20]
        break;
 8007434:	e006      	b.n	8007444 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800743a:	231a      	movs	r3, #26
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	2201      	movs	r2, #1
 8007440:	701a      	strb	r2, [r3, #0]
        break;
 8007442:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d100      	bne.n	800744c <UART_SetConfig+0x16c>
 800744a:	e08d      	b.n	8007568 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007450:	4b57      	ldr	r3, [pc, #348]	@ (80075b0 <UART_SetConfig+0x2d0>)
 8007452:	0052      	lsls	r2, r2, #1
 8007454:	5ad3      	ldrh	r3, [r2, r3]
 8007456:	0019      	movs	r1, r3
 8007458:	6978      	ldr	r0, [r7, #20]
 800745a:	f7f8 fe6d 	bl	8000138 <__udivsi3>
 800745e:	0003      	movs	r3, r0
 8007460:	005a      	lsls	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	18d2      	adds	r2, r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	0019      	movs	r1, r3
 8007470:	0010      	movs	r0, r2
 8007472:	f7f8 fe61 	bl	8000138 <__udivsi3>
 8007476:	0003      	movs	r3, r0
 8007478:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b0f      	cmp	r3, #15
 800747e:	d91c      	bls.n	80074ba <UART_SetConfig+0x1da>
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	025b      	lsls	r3, r3, #9
 8007486:	429a      	cmp	r2, r3
 8007488:	d217      	bcs.n	80074ba <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	b29a      	uxth	r2, r3
 800748e:	200e      	movs	r0, #14
 8007490:	183b      	adds	r3, r7, r0
 8007492:	210f      	movs	r1, #15
 8007494:	438a      	bics	r2, r1
 8007496:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	b29b      	uxth	r3, r3
 800749e:	2207      	movs	r2, #7
 80074a0:	4013      	ands	r3, r2
 80074a2:	b299      	uxth	r1, r3
 80074a4:	183b      	adds	r3, r7, r0
 80074a6:	183a      	adds	r2, r7, r0
 80074a8:	8812      	ldrh	r2, [r2, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	183a      	adds	r2, r7, r0
 80074b4:	8812      	ldrh	r2, [r2, #0]
 80074b6:	60da      	str	r2, [r3, #12]
 80074b8:	e056      	b.n	8007568 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80074ba:	231a      	movs	r3, #26
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	e051      	b.n	8007568 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074c4:	231b      	movs	r3, #27
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d015      	beq.n	80074fa <UART_SetConfig+0x21a>
 80074ce:	dc18      	bgt.n	8007502 <UART_SetConfig+0x222>
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d00d      	beq.n	80074f0 <UART_SetConfig+0x210>
 80074d4:	dc15      	bgt.n	8007502 <UART_SetConfig+0x222>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <UART_SetConfig+0x200>
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d005      	beq.n	80074ea <UART_SetConfig+0x20a>
 80074de:	e010      	b.n	8007502 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e0:	f7ff fb7a 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 80074e4:	0003      	movs	r3, r0
 80074e6:	617b      	str	r3, [r7, #20]
        break;
 80074e8:	e012      	b.n	8007510 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074ea:	4b30      	ldr	r3, [pc, #192]	@ (80075ac <UART_SetConfig+0x2cc>)
 80074ec:	617b      	str	r3, [r7, #20]
        break;
 80074ee:	e00f      	b.n	8007510 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f0:	f7ff fae6 	bl	8006ac0 <HAL_RCC_GetSysClockFreq>
 80074f4:	0003      	movs	r3, r0
 80074f6:	617b      	str	r3, [r7, #20]
        break;
 80074f8:	e00a      	b.n	8007510 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fa:	2380      	movs	r3, #128	@ 0x80
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	617b      	str	r3, [r7, #20]
        break;
 8007500:	e006      	b.n	8007510 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007506:	231a      	movs	r3, #26
 8007508:	18fb      	adds	r3, r7, r3
 800750a:	2201      	movs	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]
        break;
 800750e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d028      	beq.n	8007568 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800751a:	4b25      	ldr	r3, [pc, #148]	@ (80075b0 <UART_SetConfig+0x2d0>)
 800751c:	0052      	lsls	r2, r2, #1
 800751e:	5ad3      	ldrh	r3, [r2, r3]
 8007520:	0019      	movs	r1, r3
 8007522:	6978      	ldr	r0, [r7, #20]
 8007524:	f7f8 fe08 	bl	8000138 <__udivsi3>
 8007528:	0003      	movs	r3, r0
 800752a:	001a      	movs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	18d2      	adds	r2, r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	0019      	movs	r1, r3
 800753a:	0010      	movs	r0, r2
 800753c:	f7f8 fdfc 	bl	8000138 <__udivsi3>
 8007540:	0003      	movs	r3, r0
 8007542:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2b0f      	cmp	r3, #15
 8007548:	d90a      	bls.n	8007560 <UART_SetConfig+0x280>
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	025b      	lsls	r3, r3, #9
 8007550:	429a      	cmp	r2, r3
 8007552:	d205      	bcs.n	8007560 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	60da      	str	r2, [r3, #12]
 800755e:	e003      	b.n	8007568 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8007560:	231a      	movs	r3, #26
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	2201      	movs	r2, #1
 8007566:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	226a      	movs	r2, #106	@ 0x6a
 800756c:	2101      	movs	r1, #1
 800756e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2268      	movs	r2, #104	@ 0x68
 8007574:	2101      	movs	r1, #1
 8007576:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007584:	231a      	movs	r3, #26
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	781b      	ldrb	r3, [r3, #0]
}
 800758a:	0018      	movs	r0, r3
 800758c:	46bd      	mov	sp, r7
 800758e:	b008      	add	sp, #32
 8007590:	bd80      	pop	{r7, pc}
 8007592:	46c0      	nop			@ (mov r8, r8)
 8007594:	cfff69f3 	.word	0xcfff69f3
 8007598:	ffffcfff 	.word	0xffffcfff
 800759c:	11fff4ff 	.word	0x11fff4ff
 80075a0:	40013800 	.word	0x40013800
 80075a4:	40021000 	.word	0x40021000
 80075a8:	40004400 	.word	0x40004400
 80075ac:	00f42400 	.word	0x00f42400
 80075b0:	0800b8b8 	.word	0x0800b8b8

080075b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c0:	2208      	movs	r2, #8
 80075c2:	4013      	ands	r3, r2
 80075c4:	d00b      	beq.n	80075de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4a4a      	ldr	r2, [pc, #296]	@ (80076f8 <UART_AdvFeatureConfig+0x144>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	0019      	movs	r1, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e2:	2201      	movs	r2, #1
 80075e4:	4013      	ands	r3, r2
 80075e6:	d00b      	beq.n	8007600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	4a43      	ldr	r2, [pc, #268]	@ (80076fc <UART_AdvFeatureConfig+0x148>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	0019      	movs	r1, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	2202      	movs	r2, #2
 8007606:	4013      	ands	r3, r2
 8007608:	d00b      	beq.n	8007622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4a3b      	ldr	r2, [pc, #236]	@ (8007700 <UART_AdvFeatureConfig+0x14c>)
 8007612:	4013      	ands	r3, r2
 8007614:	0019      	movs	r1, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	2204      	movs	r2, #4
 8007628:	4013      	ands	r3, r2
 800762a:	d00b      	beq.n	8007644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	4a34      	ldr	r2, [pc, #208]	@ (8007704 <UART_AdvFeatureConfig+0x150>)
 8007634:	4013      	ands	r3, r2
 8007636:	0019      	movs	r1, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	2210      	movs	r2, #16
 800764a:	4013      	ands	r3, r2
 800764c:	d00b      	beq.n	8007666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	4a2c      	ldr	r2, [pc, #176]	@ (8007708 <UART_AdvFeatureConfig+0x154>)
 8007656:	4013      	ands	r3, r2
 8007658:	0019      	movs	r1, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766a:	2220      	movs	r2, #32
 800766c:	4013      	ands	r3, r2
 800766e:	d00b      	beq.n	8007688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	4a25      	ldr	r2, [pc, #148]	@ (800770c <UART_AdvFeatureConfig+0x158>)
 8007678:	4013      	ands	r3, r2
 800767a:	0019      	movs	r1, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	2240      	movs	r2, #64	@ 0x40
 800768e:	4013      	ands	r3, r2
 8007690:	d01d      	beq.n	80076ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a1d      	ldr	r2, [pc, #116]	@ (8007710 <UART_AdvFeatureConfig+0x15c>)
 800769a:	4013      	ands	r3, r2
 800769c:	0019      	movs	r1, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ae:	2380      	movs	r3, #128	@ 0x80
 80076b0:	035b      	lsls	r3, r3, #13
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d10b      	bne.n	80076ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4a15      	ldr	r2, [pc, #84]	@ (8007714 <UART_AdvFeatureConfig+0x160>)
 80076be:	4013      	ands	r3, r2
 80076c0:	0019      	movs	r1, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d2:	2280      	movs	r2, #128	@ 0x80
 80076d4:	4013      	ands	r3, r2
 80076d6:	d00b      	beq.n	80076f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	4a0e      	ldr	r2, [pc, #56]	@ (8007718 <UART_AdvFeatureConfig+0x164>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	0019      	movs	r1, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
  }
}
 80076f0:	46c0      	nop			@ (mov r8, r8)
 80076f2:	46bd      	mov	sp, r7
 80076f4:	b002      	add	sp, #8
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	ffff7fff 	.word	0xffff7fff
 80076fc:	fffdffff 	.word	0xfffdffff
 8007700:	fffeffff 	.word	0xfffeffff
 8007704:	fffbffff 	.word	0xfffbffff
 8007708:	ffffefff 	.word	0xffffefff
 800770c:	ffffdfff 	.word	0xffffdfff
 8007710:	ffefffff 	.word	0xffefffff
 8007714:	ff9fffff 	.word	0xff9fffff
 8007718:	fff7ffff 	.word	0xfff7ffff

0800771c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b092      	sub	sp, #72	@ 0x48
 8007720:	af02      	add	r7, sp, #8
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2290      	movs	r2, #144	@ 0x90
 8007728:	2100      	movs	r1, #0
 800772a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800772c:	f7fc fd22 	bl	8004174 <HAL_GetTick>
 8007730:	0003      	movs	r3, r0
 8007732:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2208      	movs	r2, #8
 800773c:	4013      	ands	r3, r2
 800773e:	2b08      	cmp	r3, #8
 8007740:	d12d      	bne.n	800779e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007744:	2280      	movs	r2, #128	@ 0x80
 8007746:	0391      	lsls	r1, r2, #14
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4a47      	ldr	r2, [pc, #284]	@ (8007868 <UART_CheckIdleState+0x14c>)
 800774c:	9200      	str	r2, [sp, #0]
 800774e:	2200      	movs	r2, #0
 8007750:	f000 f88e 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 8007754:	1e03      	subs	r3, r0, #0
 8007756:	d022      	beq.n	800779e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007758:	f3ef 8310 	mrs	r3, PRIMASK
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007762:	2301      	movs	r3, #1
 8007764:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	f383 8810 	msr	PRIMASK, r3
}
 800776c:	46c0      	nop			@ (mov r8, r8)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2180      	movs	r1, #128	@ 0x80
 800777a:	438a      	bics	r2, r1
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	f383 8810 	msr	PRIMASK, r3
}
 8007788:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2288      	movs	r2, #136	@ 0x88
 800778e:	2120      	movs	r1, #32
 8007790:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2284      	movs	r2, #132	@ 0x84
 8007796:	2100      	movs	r1, #0
 8007798:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e060      	b.n	8007860 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2204      	movs	r2, #4
 80077a6:	4013      	ands	r3, r2
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d146      	bne.n	800783a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ae:	2280      	movs	r2, #128	@ 0x80
 80077b0:	03d1      	lsls	r1, r2, #15
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007868 <UART_CheckIdleState+0x14c>)
 80077b6:	9200      	str	r2, [sp, #0]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f000 f859 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 80077be:	1e03      	subs	r3, r0, #0
 80077c0:	d03b      	beq.n	800783a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c2:	f3ef 8310 	mrs	r3, PRIMASK
 80077c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80077c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80077cc:	2301      	movs	r3, #1
 80077ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f383 8810 	msr	PRIMASK, r3
}
 80077d6:	46c0      	nop			@ (mov r8, r8)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4922      	ldr	r1, [pc, #136]	@ (800786c <UART_CheckIdleState+0x150>)
 80077e4:	400a      	ands	r2, r1
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f383 8810 	msr	PRIMASK, r3
}
 80077f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f4:	f3ef 8310 	mrs	r3, PRIMASK
 80077f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80077fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80077fe:	2301      	movs	r3, #1
 8007800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f383 8810 	msr	PRIMASK, r3
}
 8007808:	46c0      	nop			@ (mov r8, r8)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2101      	movs	r1, #1
 8007816:	438a      	bics	r2, r1
 8007818:	609a      	str	r2, [r3, #8]
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	f383 8810 	msr	PRIMASK, r3
}
 8007824:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	228c      	movs	r2, #140	@ 0x8c
 800782a:	2120      	movs	r1, #32
 800782c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2284      	movs	r2, #132	@ 0x84
 8007832:	2100      	movs	r1, #0
 8007834:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e012      	b.n	8007860 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2288      	movs	r2, #136	@ 0x88
 800783e:	2120      	movs	r1, #32
 8007840:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	228c      	movs	r2, #140	@ 0x8c
 8007846:	2120      	movs	r1, #32
 8007848:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2284      	movs	r2, #132	@ 0x84
 800785a:	2100      	movs	r1, #0
 800785c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	0018      	movs	r0, r3
 8007862:	46bd      	mov	sp, r7
 8007864:	b010      	add	sp, #64	@ 0x40
 8007866:	bd80      	pop	{r7, pc}
 8007868:	01ffffff 	.word	0x01ffffff
 800786c:	fffffedf 	.word	0xfffffedf

08007870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	1dfb      	adds	r3, r7, #7
 800787e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007880:	e051      	b.n	8007926 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	3301      	adds	r3, #1
 8007886:	d04e      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007888:	f7fc fc74 	bl	8004174 <HAL_GetTick>
 800788c:	0002      	movs	r2, r0
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	429a      	cmp	r2, r3
 8007896:	d302      	bcc.n	800789e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e051      	b.n	8007946 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2204      	movs	r2, #4
 80078aa:	4013      	ands	r3, r2
 80078ac:	d03b      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0xb6>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b80      	cmp	r3, #128	@ 0x80
 80078b2:	d038      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0xb6>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b40      	cmp	r3, #64	@ 0x40
 80078b8:	d035      	beq.n	8007926 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	2208      	movs	r2, #8
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b08      	cmp	r3, #8
 80078c6:	d111      	bne.n	80078ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2208      	movs	r2, #8
 80078ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	0018      	movs	r0, r3
 80078d4:	f000 f83c 	bl	8007950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2290      	movs	r2, #144	@ 0x90
 80078dc:	2108      	movs	r1, #8
 80078de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2284      	movs	r2, #132	@ 0x84
 80078e4:	2100      	movs	r1, #0
 80078e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e02c      	b.n	8007946 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	2380      	movs	r3, #128	@ 0x80
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	401a      	ands	r2, r3
 80078f8:	2380      	movs	r3, #128	@ 0x80
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d112      	bne.n	8007926 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2280      	movs	r2, #128	@ 0x80
 8007906:	0112      	lsls	r2, r2, #4
 8007908:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	0018      	movs	r0, r3
 800790e:	f000 f81f 	bl	8007950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2290      	movs	r2, #144	@ 0x90
 8007916:	2120      	movs	r1, #32
 8007918:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2284      	movs	r2, #132	@ 0x84
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e00f      	b.n	8007946 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	4013      	ands	r3, r2
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	425a      	negs	r2, r3
 8007936:	4153      	adcs	r3, r2
 8007938:	b2db      	uxtb	r3, r3
 800793a:	001a      	movs	r2, r3
 800793c:	1dfb      	adds	r3, r7, #7
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d09e      	beq.n	8007882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	0018      	movs	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	b004      	add	sp, #16
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08e      	sub	sp, #56	@ 0x38
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007958:	f3ef 8310 	mrs	r3, PRIMASK
 800795c:	617b      	str	r3, [r7, #20]
  return(result);
 800795e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
 8007962:	2301      	movs	r3, #1
 8007964:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f383 8810 	msr	PRIMASK, r3
}
 800796c:	46c0      	nop			@ (mov r8, r8)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4926      	ldr	r1, [pc, #152]	@ (8007a14 <UART_EndRxTransfer+0xc4>)
 800797a:	400a      	ands	r2, r1
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f383 8810 	msr	PRIMASK, r3
}
 8007988:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798a:	f3ef 8310 	mrs	r3, PRIMASK
 800798e:	623b      	str	r3, [r7, #32]
  return(result);
 8007990:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007992:	633b      	str	r3, [r7, #48]	@ 0x30
 8007994:	2301      	movs	r3, #1
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	f383 8810 	msr	PRIMASK, r3
}
 800799e:	46c0      	nop			@ (mov r8, r8)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	491b      	ldr	r1, [pc, #108]	@ (8007a18 <UART_EndRxTransfer+0xc8>)
 80079ac:	400a      	ands	r2, r1
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	f383 8810 	msr	PRIMASK, r3
}
 80079ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d118      	bne.n	80079f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c4:	f3ef 8310 	mrs	r3, PRIMASK
 80079c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80079ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ce:	2301      	movs	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f383 8810 	msr	PRIMASK, r3
}
 80079d8:	46c0      	nop			@ (mov r8, r8)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2110      	movs	r1, #16
 80079e6:	438a      	bics	r2, r1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f383 8810 	msr	PRIMASK, r3
}
 80079f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	228c      	movs	r2, #140	@ 0x8c
 80079fa:	2120      	movs	r1, #32
 80079fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b00e      	add	sp, #56	@ 0x38
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	fffffedf 	.word	0xfffffedf
 8007a18:	effffffe 	.word	0xeffffffe

08007a1c <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	0008      	movs	r0, r1
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	0019      	movs	r1, r3
 8007a2a:	260b      	movs	r6, #11
 8007a2c:	19bb      	adds	r3, r7, r6
 8007a2e:	1c02      	adds	r2, r0, #0
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	2508      	movs	r5, #8
 8007a34:	197b      	adds	r3, r7, r5
 8007a36:	1c0a      	adds	r2, r1, #0
 8007a38:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685c      	ldr	r4, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68d8      	ldr	r0, [r3, #12]
 8007a42:	197b      	adds	r3, r7, r5
 8007a44:	881d      	ldrh	r5, [r3, #0]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	19bb      	adds	r3, r7, r6
 8007a4a:	7819      	ldrb	r1, [r3, #0]
 8007a4c:	002b      	movs	r3, r5
 8007a4e:	47a0      	blx	r4
 8007a50:	0003      	movs	r3, r0
 8007a52:	617b      	str	r3, [r7, #20]

  return ret;
 8007a54:	697b      	ldr	r3, [r7, #20]
}
 8007a56:	0018      	movs	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b007      	add	sp, #28
 8007a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a5e <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8007a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a60:	b087      	sub	sp, #28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	0008      	movs	r0, r1
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	0019      	movs	r1, r3
 8007a6c:	260b      	movs	r6, #11
 8007a6e:	19bb      	adds	r3, r7, r6
 8007a70:	1c02      	adds	r2, r0, #0
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	2508      	movs	r5, #8
 8007a76:	197b      	adds	r3, r7, r5
 8007a78:	1c0a      	adds	r2, r1, #0
 8007a7a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681c      	ldr	r4, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68d8      	ldr	r0, [r3, #12]
 8007a84:	197b      	adds	r3, r7, r5
 8007a86:	881d      	ldrh	r5, [r3, #0]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	19bb      	adds	r3, r7, r6
 8007a8c:	7819      	ldrb	r1, [r3, #0]
 8007a8e:	002b      	movs	r3, r5
 8007a90:	47a0      	blx	r4
 8007a92:	0003      	movs	r3, r0
 8007a94:	617b      	str	r3, [r7, #20]

  return ret;
 8007a96:	697b      	ldr	r3, [r7, #20]
}
 8007a98:	0018      	movs	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b007      	add	sp, #28
 8007a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007aa0 <lis2dw12_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis2dw12_from_fs2_to_mg(int16_t lsb)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	0002      	movs	r2, r0
 8007aa8:	1dbb      	adds	r3, r7, #6
 8007aaa:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
 8007aac:	1dbb      	adds	r3, r7, #6
 8007aae:	2200      	movs	r2, #0
 8007ab0:	5e9b      	ldrsh	r3, [r3, r2]
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f7f9 fa3e 	bl	8000f34 <__aeabi_i2f>
 8007ab8:	1c03      	adds	r3, r0, #0
 8007aba:	4904      	ldr	r1, [pc, #16]	@ (8007acc <lis2dw12_from_fs2_to_mg+0x2c>)
 8007abc:	1c18      	adds	r0, r3, #0
 8007abe:	f7f9 f8bf 	bl	8000c40 <__aeabi_fmul>
 8007ac2:	1c03      	adds	r3, r0, #0
}
 8007ac4:	1c18      	adds	r0, r3, #0
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b002      	add	sp, #8
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	3d79db23 	.word	0x3d79db23

08007ad0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	000a      	movs	r2, r1
 8007ada:	1cfb      	adds	r3, r7, #3
 8007adc:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8007ade:	2410      	movs	r4, #16
 8007ae0:	193a      	adds	r2, r7, r4
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	2120      	movs	r1, #32
 8007ae8:	f7ff ff98 	bl	8007a1c <lis2dw12_read_reg>
 8007aec:	0003      	movs	r3, r0
 8007aee:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d129      	bne.n	8007b4a <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8007af6:	1cfb      	adds	r3, r7, #3
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	089b      	lsrs	r3, r3, #2
 8007afc:	1c1a      	adds	r2, r3, #0
 8007afe:	2303      	movs	r3, #3
 8007b00:	4013      	ands	r3, r2
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	193b      	adds	r3, r7, r4
 8007b06:	2103      	movs	r1, #3
 8007b08:	400a      	ands	r2, r1
 8007b0a:	0090      	lsls	r0, r2, #2
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	210c      	movs	r1, #12
 8007b10:	438a      	bics	r2, r1
 8007b12:	1c11      	adds	r1, r2, #0
 8007b14:	1c02      	adds	r2, r0, #0
 8007b16:	430a      	orrs	r2, r1
 8007b18:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8007b1a:	1cfb      	adds	r3, r7, #3
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2203      	movs	r2, #3
 8007b20:	4013      	ands	r3, r2
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	193b      	adds	r3, r7, r4
 8007b26:	2103      	movs	r1, #3
 8007b28:	400a      	ands	r2, r1
 8007b2a:	0010      	movs	r0, r2
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	2103      	movs	r1, #3
 8007b30:	438a      	bics	r2, r1
 8007b32:	1c11      	adds	r1, r2, #0
 8007b34:	1c02      	adds	r2, r0, #0
 8007b36:	430a      	orrs	r2, r1
 8007b38:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8007b3a:	193a      	adds	r2, r7, r4
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	2120      	movs	r1, #32
 8007b42:	f7ff ff8c 	bl	8007a5e <lis2dw12_write_reg>
 8007b46:	0003      	movs	r3, r0
 8007b48:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d108      	bne.n	8007b62 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8007b50:	230c      	movs	r3, #12
 8007b52:	18fa      	adds	r2, r7, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	2301      	movs	r3, #1
 8007b58:	2125      	movs	r1, #37	@ 0x25
 8007b5a:	f7ff ff5f 	bl	8007a1c <lis2dw12_read_reg>
 8007b5e:	0003      	movs	r3, r0
 8007b60:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d11a      	bne.n	8007b9e <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8007b68:	1cfb      	adds	r3, r7, #3
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	091b      	lsrs	r3, r3, #4
 8007b6e:	1c1a      	adds	r2, r3, #0
 8007b70:	2301      	movs	r3, #1
 8007b72:	4013      	ands	r3, r2
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	240c      	movs	r4, #12
 8007b78:	193b      	adds	r3, r7, r4
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	400a      	ands	r2, r1
 8007b7e:	0090      	lsls	r0, r2, #2
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	2104      	movs	r1, #4
 8007b84:	438a      	bics	r2, r1
 8007b86:	1c11      	adds	r1, r2, #0
 8007b88:	1c02      	adds	r2, r0, #0
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8007b8e:	193a      	adds	r2, r7, r4
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	2301      	movs	r3, #1
 8007b94:	2125      	movs	r1, #37	@ 0x25
 8007b96:	f7ff ff62 	bl	8007a5e <lis2dw12_write_reg>
 8007b9a:	0003      	movs	r3, r0
 8007b9c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007b9e:	697b      	ldr	r3, [r7, #20]
}
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	b007      	add	sp, #28
 8007ba6:	bd90      	pop	{r4, r7, pc}

08007ba8 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8007ba8:	b590      	push	{r4, r7, lr}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	000a      	movs	r2, r1
 8007bb2:	1cfb      	adds	r3, r7, #3
 8007bb4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8007bb6:	2410      	movs	r4, #16
 8007bb8:	193a      	adds	r2, r7, r4
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	2120      	movs	r1, #32
 8007bc0:	f7ff ff2c 	bl	8007a1c <lis2dw12_read_reg>
 8007bc4:	0003      	movs	r3, r0
 8007bc6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d115      	bne.n	8007bfa <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8007bce:	1cfb      	adds	r3, r7, #3
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	220f      	movs	r2, #15
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	193b      	adds	r3, r7, r4
 8007bda:	0110      	lsls	r0, r2, #4
 8007bdc:	781a      	ldrb	r2, [r3, #0]
 8007bde:	210f      	movs	r1, #15
 8007be0:	400a      	ands	r2, r1
 8007be2:	1c11      	adds	r1, r2, #0
 8007be4:	1c02      	adds	r2, r0, #0
 8007be6:	430a      	orrs	r2, r1
 8007be8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8007bea:	193a      	adds	r2, r7, r4
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	2120      	movs	r1, #32
 8007bf2:	f7ff ff34 	bl	8007a5e <lis2dw12_write_reg>
 8007bf6:	0003      	movs	r3, r0
 8007bf8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d108      	bne.n	8007c12 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8007c00:	230c      	movs	r3, #12
 8007c02:	18fa      	adds	r2, r7, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	2301      	movs	r3, #1
 8007c08:	2122      	movs	r1, #34	@ 0x22
 8007c0a:	f7ff ff07 	bl	8007a1c <lis2dw12_read_reg>
 8007c0e:	0003      	movs	r3, r0
 8007c10:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d11a      	bne.n	8007c4e <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8007c18:	1cfb      	adds	r3, r7, #3
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	091b      	lsrs	r3, r3, #4
 8007c1e:	1c1a      	adds	r2, r3, #0
 8007c20:	2303      	movs	r3, #3
 8007c22:	4013      	ands	r3, r2
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	240c      	movs	r4, #12
 8007c28:	193b      	adds	r3, r7, r4
 8007c2a:	2103      	movs	r1, #3
 8007c2c:	400a      	ands	r2, r1
 8007c2e:	0010      	movs	r0, r2
 8007c30:	781a      	ldrb	r2, [r3, #0]
 8007c32:	2103      	movs	r1, #3
 8007c34:	438a      	bics	r2, r1
 8007c36:	1c11      	adds	r1, r2, #0
 8007c38:	1c02      	adds	r2, r0, #0
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8007c3e:	193a      	adds	r2, r7, r4
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	2301      	movs	r3, #1
 8007c44:	2122      	movs	r1, #34	@ 0x22
 8007c46:	f7ff ff0a 	bl	8007a5e <lis2dw12_write_reg>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007c4e:	697b      	ldr	r3, [r7, #20]
}
 8007c50:	0018      	movs	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b007      	add	sp, #28
 8007c56:	bd90      	pop	{r4, r7, pc}

08007c58 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	000a      	movs	r2, r1
 8007c62:	1cfb      	adds	r3, r7, #3
 8007c64:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8007c66:	2408      	movs	r4, #8
 8007c68:	193a      	adds	r2, r7, r4
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	2121      	movs	r1, #33	@ 0x21
 8007c70:	f7ff fed4 	bl	8007a1c <lis2dw12_read_reg>
 8007c74:	0003      	movs	r3, r0
 8007c76:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d117      	bne.n	8007cae <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8007c7e:	1cfb      	adds	r3, r7, #3
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2201      	movs	r2, #1
 8007c84:	4013      	ands	r3, r2
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	193b      	adds	r3, r7, r4
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	400a      	ands	r2, r1
 8007c8e:	00d0      	lsls	r0, r2, #3
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	2108      	movs	r1, #8
 8007c94:	438a      	bics	r2, r1
 8007c96:	1c11      	adds	r1, r2, #0
 8007c98:	1c02      	adds	r2, r0, #0
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8007c9e:	193a      	adds	r2, r7, r4
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	2121      	movs	r1, #33	@ 0x21
 8007ca6:	f7ff feda 	bl	8007a5e <lis2dw12_write_reg>
 8007caa:	0003      	movs	r3, r0
 8007cac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007cae:	68fb      	ldr	r3, [r7, #12]
}
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b005      	add	sp, #20
 8007cb6:	bd90      	pop	{r4, r7, pc}

08007cb8 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8007cb8:	b590      	push	{r4, r7, lr}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	000a      	movs	r2, r1
 8007cc2:	1cfb      	adds	r3, r7, #3
 8007cc4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8007cc6:	2408      	movs	r4, #8
 8007cc8:	193a      	adds	r2, r7, r4
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	2125      	movs	r1, #37	@ 0x25
 8007cd0:	f7ff fea4 	bl	8007a1c <lis2dw12_read_reg>
 8007cd4:	0003      	movs	r3, r0
 8007cd6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d117      	bne.n	8007d0e <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8007cde:	1cfb      	adds	r3, r7, #3
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	193b      	adds	r3, r7, r4
 8007cea:	2103      	movs	r1, #3
 8007cec:	400a      	ands	r2, r1
 8007cee:	0110      	lsls	r0, r2, #4
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	2130      	movs	r1, #48	@ 0x30
 8007cf4:	438a      	bics	r2, r1
 8007cf6:	1c11      	adds	r1, r2, #0
 8007cf8:	1c02      	adds	r2, r0, #0
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8007cfe:	193a      	adds	r2, r7, r4
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	2301      	movs	r3, #1
 8007d04:	2125      	movs	r1, #37	@ 0x25
 8007d06:	f7ff feaa 	bl	8007a5e <lis2dw12_write_reg>
 8007d0a:	0003      	movs	r3, r0
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
}
 8007d10:	0018      	movs	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b005      	add	sp, #20
 8007d16:	bd90      	pop	{r4, r7, pc}

08007d18 <lis2dw12_flag_data_ready_get>:
  * @param  val      change the values of drdy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  lis2dw12_status_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) &reg, 1);
 8007d22:	2408      	movs	r4, #8
 8007d24:	193a      	adds	r2, r7, r4
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	2301      	movs	r3, #1
 8007d2a:	2127      	movs	r1, #39	@ 0x27
 8007d2c:	f7ff fe76 	bl	8007a1c <lis2dw12_read_reg>
 8007d30:	0003      	movs	r3, r0
 8007d32:	60fb      	str	r3, [r7, #12]
  *val = reg.drdy;
 8007d34:	193b      	adds	r3, r7, r4
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	07db      	lsls	r3, r3, #31
 8007d3a:	0fdb      	lsrs	r3, r3, #31
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	001a      	movs	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	701a      	strb	r2, [r3, #0]

  return ret;
 8007d44:	68fb      	ldr	r3, [r7, #12]
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b005      	add	sp, #20
 8007d4c:	bd90      	pop	{r4, r7, pc}

08007d4e <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007d4e:	b590      	push	{r4, r7, lr}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8007d58:	240c      	movs	r4, #12
 8007d5a:	193a      	adds	r2, r7, r4
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	2306      	movs	r3, #6
 8007d60:	2128      	movs	r1, #40	@ 0x28
 8007d62:	f7ff fe5b 	bl	8007a1c <lis2dw12_read_reg>
 8007d66:	0003      	movs	r3, r0
 8007d68:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007d6a:	0021      	movs	r1, r4
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	b21a      	sxth	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	5e9b      	ldrsh	r3, [r3, r2]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	187a      	adds	r2, r7, r1
 8007d84:	7812      	ldrb	r2, [r2, #0]
 8007d86:	189b      	adds	r3, r3, r2
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	b21a      	sxth	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007d90:	187b      	adds	r3, r7, r1
 8007d92:	78da      	ldrb	r2, [r3, #3]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	3302      	adds	r3, #2
 8007d98:	b212      	sxth	r2, r2
 8007d9a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	3302      	adds	r3, #2
 8007da0:	2200      	movs	r2, #0
 8007da2:	5e9b      	ldrsh	r3, [r3, r2]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	021b      	lsls	r3, r3, #8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	187a      	adds	r2, r7, r1
 8007dac:	7892      	ldrb	r2, [r2, #2]
 8007dae:	189b      	adds	r3, r3, r2
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	3302      	adds	r3, #2
 8007db6:	b212      	sxth	r2, r2
 8007db8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	795a      	ldrb	r2, [r3, #5]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	b212      	sxth	r2, r2
 8007dc4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	2200      	movs	r2, #0
 8007dcc:	5e9b      	ldrsh	r3, [r3, r2]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	187a      	adds	r2, r7, r1
 8007dd6:	7912      	ldrb	r2, [r2, #4]
 8007dd8:	189b      	adds	r3, r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	3304      	adds	r3, #4
 8007de0:	b212      	sxth	r2, r2
 8007de2:	801a      	strh	r2, [r3, #0]

  return ret;
 8007de4:	697b      	ldr	r3, [r7, #20]
}
 8007de6:	0018      	movs	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	b007      	add	sp, #28
 8007dec:	bd90      	pop	{r4, r7, pc}

08007dee <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	210f      	movs	r1, #15
 8007e00:	f7ff fe0c 	bl	8007a1c <lis2dw12_read_reg>
 8007e04:	0003      	movs	r3, r0
 8007e06:	60fb      	str	r3, [r7, #12]

  return ret;
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b004      	add	sp, #16
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007e12:	b590      	push	{r4, r7, lr}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	000a      	movs	r2, r1
 8007e1c:	1cfb      	adds	r3, r7, #3
 8007e1e:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8007e20:	2408      	movs	r4, #8
 8007e22:	193a      	adds	r2, r7, r4
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	2301      	movs	r3, #1
 8007e28:	2121      	movs	r1, #33	@ 0x21
 8007e2a:	f7ff fdf7 	bl	8007a1c <lis2dw12_read_reg>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d117      	bne.n	8007e68 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8007e38:	1cfb      	adds	r3, r7, #3
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4013      	ands	r3, r2
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	193b      	adds	r3, r7, r4
 8007e44:	2101      	movs	r1, #1
 8007e46:	400a      	ands	r2, r1
 8007e48:	0190      	lsls	r0, r2, #6
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	2140      	movs	r1, #64	@ 0x40
 8007e4e:	438a      	bics	r2, r1
 8007e50:	1c11      	adds	r1, r2, #0
 8007e52:	1c02      	adds	r2, r0, #0
 8007e54:	430a      	orrs	r2, r1
 8007e56:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8007e58:	193a      	adds	r2, r7, r4
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	2121      	movs	r1, #33	@ 0x21
 8007e60:	f7ff fdfd 	bl	8007a5e <lis2dw12_write_reg>
 8007e64:	0003      	movs	r3, r0
 8007e66:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007e68:	68fb      	ldr	r3, [r7, #12]
}
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	b005      	add	sp, #20
 8007e70:	bd90      	pop	{r4, r7, pc}

08007e72 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8007e72:	b590      	push	{r4, r7, lr}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8007e7c:	2408      	movs	r4, #8
 8007e7e:	193a      	adds	r2, r7, r4
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	2301      	movs	r3, #1
 8007e84:	2121      	movs	r1, #33	@ 0x21
 8007e86:	f7ff fdc9 	bl	8007a1c <lis2dw12_read_reg>
 8007e8a:	0003      	movs	r3, r0
 8007e8c:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8007e8e:	193b      	adds	r3, r7, r4
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	065b      	lsls	r3, r3, #25
 8007e94:	0fdb      	lsrs	r3, r3, #31
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	001a      	movs	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	701a      	strb	r2, [r3, #0]

  return ret;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b005      	add	sp, #20
 8007ea6:	bd90      	pop	{r4, r7, pc}

08007ea8 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8007ea8:	b590      	push	{r4, r7, lr}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	000a      	movs	r2, r1
 8007eb2:	1cfb      	adds	r3, r7, #3
 8007eb4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8007eb6:	2410      	movs	r4, #16
 8007eb8:	193a      	adds	r2, r7, r4
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	2125      	movs	r1, #37	@ 0x25
 8007ec0:	f7ff fdac 	bl	8007a1c <lis2dw12_read_reg>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d119      	bne.n	8007f02 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8007ece:	1cfb      	adds	r3, r7, #3
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	091b      	lsrs	r3, r3, #4
 8007ed4:	1c1a      	adds	r2, r3, #0
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4013      	ands	r3, r2
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	193b      	adds	r3, r7, r4
 8007ede:	2101      	movs	r1, #1
 8007ee0:	400a      	ands	r2, r1
 8007ee2:	00d0      	lsls	r0, r2, #3
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	2108      	movs	r1, #8
 8007ee8:	438a      	bics	r2, r1
 8007eea:	1c11      	adds	r1, r2, #0
 8007eec:	1c02      	adds	r2, r0, #0
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8007ef2:	193a      	adds	r2, r7, r4
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	2125      	movs	r1, #37	@ 0x25
 8007efa:	f7ff fdb0 	bl	8007a5e <lis2dw12_write_reg>
 8007efe:	0003      	movs	r3, r0
 8007f00:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d108      	bne.n	8007f1a <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8007f08:	230c      	movs	r3, #12
 8007f0a:	18fa      	adds	r2, r7, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	2301      	movs	r3, #1
 8007f10:	213f      	movs	r1, #63	@ 0x3f
 8007f12:	f7ff fd83 	bl	8007a1c <lis2dw12_read_reg>
 8007f16:	0003      	movs	r3, r0
 8007f18:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d118      	bne.n	8007f52 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8007f20:	1cfb      	adds	r3, r7, #3
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2201      	movs	r2, #1
 8007f26:	4013      	ands	r3, r2
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	240c      	movs	r4, #12
 8007f2c:	193b      	adds	r3, r7, r4
 8007f2e:	2101      	movs	r1, #1
 8007f30:	400a      	ands	r2, r1
 8007f32:	0110      	lsls	r0, r2, #4
 8007f34:	781a      	ldrb	r2, [r3, #0]
 8007f36:	2110      	movs	r1, #16
 8007f38:	438a      	bics	r2, r1
 8007f3a:	1c11      	adds	r1, r2, #0
 8007f3c:	1c02      	adds	r2, r0, #0
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8007f42:	193a      	adds	r2, r7, r4
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	2301      	movs	r3, #1
 8007f48:	213f      	movs	r1, #63	@ 0x3f
 8007f4a:	f7ff fd88 	bl	8007a5e <lis2dw12_write_reg>
 8007f4e:	0003      	movs	r3, r0
 8007f50:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8007f52:	697b      	ldr	r3, [r7, #20]
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b007      	add	sp, #28
 8007f5a:	bd90      	pop	{r4, r7, pc}

08007f5c <lis2dw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_bandwidth_set(stmdev_ctx_t *ctx,
                                      lis2dw12_bw_filt_t val)
{
 8007f5c:	b590      	push	{r4, r7, lr}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	000a      	movs	r2, r1
 8007f66:	1cfb      	adds	r3, r7, #3
 8007f68:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8007f6a:	2408      	movs	r4, #8
 8007f6c:	193a      	adds	r2, r7, r4
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	2301      	movs	r3, #1
 8007f72:	2125      	movs	r1, #37	@ 0x25
 8007f74:	f7ff fd52 	bl	8007a1c <lis2dw12_read_reg>
 8007f78:	0003      	movs	r3, r0
 8007f7a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d115      	bne.n	8007fae <lis2dw12_filter_bandwidth_set+0x52>
  {
    reg.bw_filt = (uint8_t) val;
 8007f82:	1cfb      	adds	r3, r7, #3
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2203      	movs	r2, #3
 8007f88:	4013      	ands	r3, r2
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	193b      	adds	r3, r7, r4
 8007f8e:	0190      	lsls	r0, r2, #6
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	213f      	movs	r1, #63	@ 0x3f
 8007f94:	400a      	ands	r2, r1
 8007f96:	1c11      	adds	r1, r2, #0
 8007f98:	1c02      	adds	r2, r0, #0
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8007f9e:	193a      	adds	r2, r7, r4
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	2125      	movs	r1, #37	@ 0x25
 8007fa6:	f7ff fd5a 	bl	8007a5e <lis2dw12_write_reg>
 8007faa:	0003      	movs	r3, r0
 8007fac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b005      	add	sp, #20
 8007fb6:	bd90      	pop	{r4, r7, pc}

08007fb8 <__cvt>:
 8007fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fba:	001f      	movs	r7, r3
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	0016      	movs	r6, r2
 8007fc0:	b08b      	sub	sp, #44	@ 0x2c
 8007fc2:	429f      	cmp	r7, r3
 8007fc4:	da04      	bge.n	8007fd0 <__cvt+0x18>
 8007fc6:	2180      	movs	r1, #128	@ 0x80
 8007fc8:	0609      	lsls	r1, r1, #24
 8007fca:	187b      	adds	r3, r7, r1
 8007fcc:	001f      	movs	r7, r3
 8007fce:	232d      	movs	r3, #45	@ 0x2d
 8007fd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007fd2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007fd4:	7013      	strb	r3, [r2, #0]
 8007fd6:	2320      	movs	r3, #32
 8007fd8:	2203      	movs	r2, #3
 8007fda:	439d      	bics	r5, r3
 8007fdc:	2d46      	cmp	r5, #70	@ 0x46
 8007fde:	d007      	beq.n	8007ff0 <__cvt+0x38>
 8007fe0:	002b      	movs	r3, r5
 8007fe2:	3b45      	subs	r3, #69	@ 0x45
 8007fe4:	4259      	negs	r1, r3
 8007fe6:	414b      	adcs	r3, r1
 8007fe8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007fea:	3a01      	subs	r2, #1
 8007fec:	18cb      	adds	r3, r1, r3
 8007fee:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ff0:	ab09      	add	r3, sp, #36	@ 0x24
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	ab08      	add	r3, sp, #32
 8007ff6:	9303      	str	r3, [sp, #12]
 8007ff8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ffa:	9200      	str	r2, [sp, #0]
 8007ffc:	9302      	str	r3, [sp, #8]
 8007ffe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008000:	0032      	movs	r2, r6
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	003b      	movs	r3, r7
 8008006:	f000 fe9b 	bl	8008d40 <_dtoa_r>
 800800a:	0004      	movs	r4, r0
 800800c:	2d47      	cmp	r5, #71	@ 0x47
 800800e:	d11b      	bne.n	8008048 <__cvt+0x90>
 8008010:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008012:	07db      	lsls	r3, r3, #31
 8008014:	d511      	bpl.n	800803a <__cvt+0x82>
 8008016:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008018:	18c3      	adds	r3, r0, r3
 800801a:	9307      	str	r3, [sp, #28]
 800801c:	2200      	movs	r2, #0
 800801e:	2300      	movs	r3, #0
 8008020:	0030      	movs	r0, r6
 8008022:	0039      	movs	r1, r7
 8008024:	f7f8 fa0e 	bl	8000444 <__aeabi_dcmpeq>
 8008028:	2800      	cmp	r0, #0
 800802a:	d001      	beq.n	8008030 <__cvt+0x78>
 800802c:	9b07      	ldr	r3, [sp, #28]
 800802e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008030:	2230      	movs	r2, #48	@ 0x30
 8008032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008034:	9907      	ldr	r1, [sp, #28]
 8008036:	428b      	cmp	r3, r1
 8008038:	d320      	bcc.n	800807c <__cvt+0xc4>
 800803a:	0020      	movs	r0, r4
 800803c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008040:	1b1b      	subs	r3, r3, r4
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	b00b      	add	sp, #44	@ 0x2c
 8008046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008048:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800804a:	18c3      	adds	r3, r0, r3
 800804c:	9307      	str	r3, [sp, #28]
 800804e:	2d46      	cmp	r5, #70	@ 0x46
 8008050:	d1e4      	bne.n	800801c <__cvt+0x64>
 8008052:	7803      	ldrb	r3, [r0, #0]
 8008054:	2b30      	cmp	r3, #48	@ 0x30
 8008056:	d10c      	bne.n	8008072 <__cvt+0xba>
 8008058:	2200      	movs	r2, #0
 800805a:	2300      	movs	r3, #0
 800805c:	0030      	movs	r0, r6
 800805e:	0039      	movs	r1, r7
 8008060:	f7f8 f9f0 	bl	8000444 <__aeabi_dcmpeq>
 8008064:	2800      	cmp	r0, #0
 8008066:	d104      	bne.n	8008072 <__cvt+0xba>
 8008068:	2301      	movs	r3, #1
 800806a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008074:	9a07      	ldr	r2, [sp, #28]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	18d3      	adds	r3, r2, r3
 800807a:	e7ce      	b.n	800801a <__cvt+0x62>
 800807c:	1c59      	adds	r1, r3, #1
 800807e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	e7d6      	b.n	8008032 <__cvt+0x7a>

08008084 <__exponent>:
 8008084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008086:	232b      	movs	r3, #43	@ 0x2b
 8008088:	b085      	sub	sp, #20
 800808a:	0005      	movs	r5, r0
 800808c:	1e0c      	subs	r4, r1, #0
 800808e:	7002      	strb	r2, [r0, #0]
 8008090:	da01      	bge.n	8008096 <__exponent+0x12>
 8008092:	424c      	negs	r4, r1
 8008094:	3302      	adds	r3, #2
 8008096:	706b      	strb	r3, [r5, #1]
 8008098:	2c09      	cmp	r4, #9
 800809a:	dd2c      	ble.n	80080f6 <__exponent+0x72>
 800809c:	ab02      	add	r3, sp, #8
 800809e:	1dde      	adds	r6, r3, #7
 80080a0:	0020      	movs	r0, r4
 80080a2:	210a      	movs	r1, #10
 80080a4:	f7f8 f9b8 	bl	8000418 <__aeabi_idivmod>
 80080a8:	0037      	movs	r7, r6
 80080aa:	3130      	adds	r1, #48	@ 0x30
 80080ac:	3e01      	subs	r6, #1
 80080ae:	0020      	movs	r0, r4
 80080b0:	7031      	strb	r1, [r6, #0]
 80080b2:	210a      	movs	r1, #10
 80080b4:	9401      	str	r4, [sp, #4]
 80080b6:	f7f8 f8c9 	bl	800024c <__divsi3>
 80080ba:	9b01      	ldr	r3, [sp, #4]
 80080bc:	0004      	movs	r4, r0
 80080be:	2b63      	cmp	r3, #99	@ 0x63
 80080c0:	dcee      	bgt.n	80080a0 <__exponent+0x1c>
 80080c2:	1eba      	subs	r2, r7, #2
 80080c4:	1ca8      	adds	r0, r5, #2
 80080c6:	0001      	movs	r1, r0
 80080c8:	0013      	movs	r3, r2
 80080ca:	3430      	adds	r4, #48	@ 0x30
 80080cc:	7014      	strb	r4, [r2, #0]
 80080ce:	ac02      	add	r4, sp, #8
 80080d0:	3407      	adds	r4, #7
 80080d2:	429c      	cmp	r4, r3
 80080d4:	d80a      	bhi.n	80080ec <__exponent+0x68>
 80080d6:	2300      	movs	r3, #0
 80080d8:	4294      	cmp	r4, r2
 80080da:	d303      	bcc.n	80080e4 <__exponent+0x60>
 80080dc:	3309      	adds	r3, #9
 80080de:	aa02      	add	r2, sp, #8
 80080e0:	189b      	adds	r3, r3, r2
 80080e2:	1bdb      	subs	r3, r3, r7
 80080e4:	18c0      	adds	r0, r0, r3
 80080e6:	1b40      	subs	r0, r0, r5
 80080e8:	b005      	add	sp, #20
 80080ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ec:	781c      	ldrb	r4, [r3, #0]
 80080ee:	3301      	adds	r3, #1
 80080f0:	700c      	strb	r4, [r1, #0]
 80080f2:	3101      	adds	r1, #1
 80080f4:	e7eb      	b.n	80080ce <__exponent+0x4a>
 80080f6:	2330      	movs	r3, #48	@ 0x30
 80080f8:	18e4      	adds	r4, r4, r3
 80080fa:	70ab      	strb	r3, [r5, #2]
 80080fc:	1d28      	adds	r0, r5, #4
 80080fe:	70ec      	strb	r4, [r5, #3]
 8008100:	e7f1      	b.n	80080e6 <__exponent+0x62>
	...

08008104 <_printf_float>:
 8008104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008106:	b097      	sub	sp, #92	@ 0x5c
 8008108:	000d      	movs	r5, r1
 800810a:	920a      	str	r2, [sp, #40]	@ 0x28
 800810c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800810e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008110:	9009      	str	r0, [sp, #36]	@ 0x24
 8008112:	f000 fcfd 	bl	8008b10 <_localeconv_r>
 8008116:	6803      	ldr	r3, [r0, #0]
 8008118:	0018      	movs	r0, r3
 800811a:	930d      	str	r3, [sp, #52]	@ 0x34
 800811c:	f7f7 fff0 	bl	8000100 <strlen>
 8008120:	2300      	movs	r3, #0
 8008122:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008124:	9314      	str	r3, [sp, #80]	@ 0x50
 8008126:	7e2b      	ldrb	r3, [r5, #24]
 8008128:	2207      	movs	r2, #7
 800812a:	930c      	str	r3, [sp, #48]	@ 0x30
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008130:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	05c9      	lsls	r1, r1, #23
 8008136:	d545      	bpl.n	80081c4 <_printf_float+0xc0>
 8008138:	189b      	adds	r3, r3, r2
 800813a:	4393      	bics	r3, r2
 800813c:	001a      	movs	r2, r3
 800813e:	3208      	adds	r2, #8
 8008140:	6022      	str	r2, [r4, #0]
 8008142:	2201      	movs	r2, #1
 8008144:	681e      	ldr	r6, [r3, #0]
 8008146:	685f      	ldr	r7, [r3, #4]
 8008148:	007b      	lsls	r3, r7, #1
 800814a:	085b      	lsrs	r3, r3, #1
 800814c:	9311      	str	r3, [sp, #68]	@ 0x44
 800814e:	9610      	str	r6, [sp, #64]	@ 0x40
 8008150:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008152:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008154:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008156:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008158:	4ba7      	ldr	r3, [pc, #668]	@ (80083f8 <_printf_float+0x2f4>)
 800815a:	4252      	negs	r2, r2
 800815c:	f7fa fe2a 	bl	8002db4 <__aeabi_dcmpun>
 8008160:	2800      	cmp	r0, #0
 8008162:	d131      	bne.n	80081c8 <_printf_float+0xc4>
 8008164:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008166:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008168:	2201      	movs	r2, #1
 800816a:	4ba3      	ldr	r3, [pc, #652]	@ (80083f8 <_printf_float+0x2f4>)
 800816c:	4252      	negs	r2, r2
 800816e:	f7f8 f979 	bl	8000464 <__aeabi_dcmple>
 8008172:	2800      	cmp	r0, #0
 8008174:	d128      	bne.n	80081c8 <_printf_float+0xc4>
 8008176:	2200      	movs	r2, #0
 8008178:	2300      	movs	r3, #0
 800817a:	0030      	movs	r0, r6
 800817c:	0039      	movs	r1, r7
 800817e:	f7f8 f967 	bl	8000450 <__aeabi_dcmplt>
 8008182:	2800      	cmp	r0, #0
 8008184:	d003      	beq.n	800818e <_printf_float+0x8a>
 8008186:	002b      	movs	r3, r5
 8008188:	222d      	movs	r2, #45	@ 0x2d
 800818a:	3343      	adds	r3, #67	@ 0x43
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008190:	4f9a      	ldr	r7, [pc, #616]	@ (80083fc <_printf_float+0x2f8>)
 8008192:	2b47      	cmp	r3, #71	@ 0x47
 8008194:	d800      	bhi.n	8008198 <_printf_float+0x94>
 8008196:	4f9a      	ldr	r7, [pc, #616]	@ (8008400 <_printf_float+0x2fc>)
 8008198:	2303      	movs	r3, #3
 800819a:	2400      	movs	r4, #0
 800819c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800819e:	612b      	str	r3, [r5, #16]
 80081a0:	3301      	adds	r3, #1
 80081a2:	439a      	bics	r2, r3
 80081a4:	602a      	str	r2, [r5, #0]
 80081a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081a8:	0029      	movs	r1, r5
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b0:	aa15      	add	r2, sp, #84	@ 0x54
 80081b2:	f000 f9e5 	bl	8008580 <_printf_common>
 80081b6:	3001      	adds	r0, #1
 80081b8:	d000      	beq.n	80081bc <_printf_float+0xb8>
 80081ba:	e09e      	b.n	80082fa <_printf_float+0x1f6>
 80081bc:	2001      	movs	r0, #1
 80081be:	4240      	negs	r0, r0
 80081c0:	b017      	add	sp, #92	@ 0x5c
 80081c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c4:	3307      	adds	r3, #7
 80081c6:	e7b8      	b.n	800813a <_printf_float+0x36>
 80081c8:	0032      	movs	r2, r6
 80081ca:	003b      	movs	r3, r7
 80081cc:	0030      	movs	r0, r6
 80081ce:	0039      	movs	r1, r7
 80081d0:	f7fa fdf0 	bl	8002db4 <__aeabi_dcmpun>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d00b      	beq.n	80081f0 <_printf_float+0xec>
 80081d8:	2f00      	cmp	r7, #0
 80081da:	da03      	bge.n	80081e4 <_printf_float+0xe0>
 80081dc:	002b      	movs	r3, r5
 80081de:	222d      	movs	r2, #45	@ 0x2d
 80081e0:	3343      	adds	r3, #67	@ 0x43
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081e6:	4f87      	ldr	r7, [pc, #540]	@ (8008404 <_printf_float+0x300>)
 80081e8:	2b47      	cmp	r3, #71	@ 0x47
 80081ea:	d8d5      	bhi.n	8008198 <_printf_float+0x94>
 80081ec:	4f86      	ldr	r7, [pc, #536]	@ (8008408 <_printf_float+0x304>)
 80081ee:	e7d3      	b.n	8008198 <_printf_float+0x94>
 80081f0:	2220      	movs	r2, #32
 80081f2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80081f4:	686b      	ldr	r3, [r5, #4]
 80081f6:	4394      	bics	r4, r2
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	d146      	bne.n	800828a <_printf_float+0x186>
 80081fc:	3307      	adds	r3, #7
 80081fe:	606b      	str	r3, [r5, #4]
 8008200:	2380      	movs	r3, #128	@ 0x80
 8008202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	4313      	orrs	r3, r2
 8008208:	2200      	movs	r2, #0
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	9206      	str	r2, [sp, #24]
 800820e:	aa14      	add	r2, sp, #80	@ 0x50
 8008210:	9205      	str	r2, [sp, #20]
 8008212:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008214:	a90a      	add	r1, sp, #40	@ 0x28
 8008216:	9204      	str	r2, [sp, #16]
 8008218:	aa13      	add	r2, sp, #76	@ 0x4c
 800821a:	9203      	str	r2, [sp, #12]
 800821c:	2223      	movs	r2, #35	@ 0x23
 800821e:	1852      	adds	r2, r2, r1
 8008220:	9202      	str	r2, [sp, #8]
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	686b      	ldr	r3, [r5, #4]
 8008226:	0032      	movs	r2, r6
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800822c:	003b      	movs	r3, r7
 800822e:	f7ff fec3 	bl	8007fb8 <__cvt>
 8008232:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008234:	0007      	movs	r7, r0
 8008236:	2c47      	cmp	r4, #71	@ 0x47
 8008238:	d12d      	bne.n	8008296 <_printf_float+0x192>
 800823a:	1cd3      	adds	r3, r2, #3
 800823c:	db02      	blt.n	8008244 <_printf_float+0x140>
 800823e:	686b      	ldr	r3, [r5, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	dd47      	ble.n	80082d4 <_printf_float+0x1d0>
 8008244:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008246:	3b02      	subs	r3, #2
 8008248:	b2db      	uxtb	r3, r3
 800824a:	930c      	str	r3, [sp, #48]	@ 0x30
 800824c:	0028      	movs	r0, r5
 800824e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008250:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008252:	3901      	subs	r1, #1
 8008254:	3050      	adds	r0, #80	@ 0x50
 8008256:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008258:	f7ff ff14 	bl	8008084 <__exponent>
 800825c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800825e:	0004      	movs	r4, r0
 8008260:	1813      	adds	r3, r2, r0
 8008262:	612b      	str	r3, [r5, #16]
 8008264:	2a01      	cmp	r2, #1
 8008266:	dc02      	bgt.n	800826e <_printf_float+0x16a>
 8008268:	682a      	ldr	r2, [r5, #0]
 800826a:	07d2      	lsls	r2, r2, #31
 800826c:	d501      	bpl.n	8008272 <_printf_float+0x16e>
 800826e:	3301      	adds	r3, #1
 8008270:	612b      	str	r3, [r5, #16]
 8008272:	2323      	movs	r3, #35	@ 0x23
 8008274:	aa0a      	add	r2, sp, #40	@ 0x28
 8008276:	189b      	adds	r3, r3, r2
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d100      	bne.n	8008280 <_printf_float+0x17c>
 800827e:	e792      	b.n	80081a6 <_printf_float+0xa2>
 8008280:	002b      	movs	r3, r5
 8008282:	222d      	movs	r2, #45	@ 0x2d
 8008284:	3343      	adds	r3, #67	@ 0x43
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	e78d      	b.n	80081a6 <_printf_float+0xa2>
 800828a:	2c47      	cmp	r4, #71	@ 0x47
 800828c:	d1b8      	bne.n	8008200 <_printf_float+0xfc>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1b6      	bne.n	8008200 <_printf_float+0xfc>
 8008292:	3301      	adds	r3, #1
 8008294:	e7b3      	b.n	80081fe <_printf_float+0xfa>
 8008296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008298:	2b65      	cmp	r3, #101	@ 0x65
 800829a:	d9d7      	bls.n	800824c <_printf_float+0x148>
 800829c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800829e:	2b66      	cmp	r3, #102	@ 0x66
 80082a0:	d11a      	bne.n	80082d8 <_printf_float+0x1d4>
 80082a2:	686b      	ldr	r3, [r5, #4]
 80082a4:	2a00      	cmp	r2, #0
 80082a6:	dd09      	ble.n	80082bc <_printf_float+0x1b8>
 80082a8:	612a      	str	r2, [r5, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <_printf_float+0x1b0>
 80082ae:	6829      	ldr	r1, [r5, #0]
 80082b0:	07c9      	lsls	r1, r1, #31
 80082b2:	d50b      	bpl.n	80082cc <_printf_float+0x1c8>
 80082b4:	3301      	adds	r3, #1
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	612b      	str	r3, [r5, #16]
 80082ba:	e007      	b.n	80082cc <_printf_float+0x1c8>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <_printf_float+0x1c4>
 80082c0:	2201      	movs	r2, #1
 80082c2:	6829      	ldr	r1, [r5, #0]
 80082c4:	4211      	tst	r1, r2
 80082c6:	d000      	beq.n	80082ca <_printf_float+0x1c6>
 80082c8:	1c9a      	adds	r2, r3, #2
 80082ca:	612a      	str	r2, [r5, #16]
 80082cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082ce:	2400      	movs	r4, #0
 80082d0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80082d2:	e7ce      	b.n	8008272 <_printf_float+0x16e>
 80082d4:	2367      	movs	r3, #103	@ 0x67
 80082d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80082d8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80082da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082dc:	4299      	cmp	r1, r3
 80082de:	db06      	blt.n	80082ee <_printf_float+0x1ea>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	6129      	str	r1, [r5, #16]
 80082e4:	07db      	lsls	r3, r3, #31
 80082e6:	d5f1      	bpl.n	80082cc <_printf_float+0x1c8>
 80082e8:	3101      	adds	r1, #1
 80082ea:	6129      	str	r1, [r5, #16]
 80082ec:	e7ee      	b.n	80082cc <_printf_float+0x1c8>
 80082ee:	2201      	movs	r2, #1
 80082f0:	2900      	cmp	r1, #0
 80082f2:	dce0      	bgt.n	80082b6 <_printf_float+0x1b2>
 80082f4:	1892      	adds	r2, r2, r2
 80082f6:	1a52      	subs	r2, r2, r1
 80082f8:	e7dd      	b.n	80082b6 <_printf_float+0x1b2>
 80082fa:	682a      	ldr	r2, [r5, #0]
 80082fc:	0553      	lsls	r3, r2, #21
 80082fe:	d408      	bmi.n	8008312 <_printf_float+0x20e>
 8008300:	692b      	ldr	r3, [r5, #16]
 8008302:	003a      	movs	r2, r7
 8008304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008308:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800830a:	47a0      	blx	r4
 800830c:	3001      	adds	r0, #1
 800830e:	d129      	bne.n	8008364 <_printf_float+0x260>
 8008310:	e754      	b.n	80081bc <_printf_float+0xb8>
 8008312:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008314:	2b65      	cmp	r3, #101	@ 0x65
 8008316:	d800      	bhi.n	800831a <_printf_float+0x216>
 8008318:	e0db      	b.n	80084d2 <_printf_float+0x3ce>
 800831a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800831c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	f7f8 f88f 	bl	8000444 <__aeabi_dcmpeq>
 8008326:	2800      	cmp	r0, #0
 8008328:	d033      	beq.n	8008392 <_printf_float+0x28e>
 800832a:	2301      	movs	r3, #1
 800832c:	4a37      	ldr	r2, [pc, #220]	@ (800840c <_printf_float+0x308>)
 800832e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008330:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008332:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008334:	47a0      	blx	r4
 8008336:	3001      	adds	r0, #1
 8008338:	d100      	bne.n	800833c <_printf_float+0x238>
 800833a:	e73f      	b.n	80081bc <_printf_float+0xb8>
 800833c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800833e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008340:	42b3      	cmp	r3, r6
 8008342:	db02      	blt.n	800834a <_printf_float+0x246>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	07db      	lsls	r3, r3, #31
 8008348:	d50c      	bpl.n	8008364 <_printf_float+0x260>
 800834a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800834c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800834e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008354:	47a0      	blx	r4
 8008356:	2400      	movs	r4, #0
 8008358:	3001      	adds	r0, #1
 800835a:	d100      	bne.n	800835e <_printf_float+0x25a>
 800835c:	e72e      	b.n	80081bc <_printf_float+0xb8>
 800835e:	1e73      	subs	r3, r6, #1
 8008360:	42a3      	cmp	r3, r4
 8008362:	dc0a      	bgt.n	800837a <_printf_float+0x276>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	079b      	lsls	r3, r3, #30
 8008368:	d500      	bpl.n	800836c <_printf_float+0x268>
 800836a:	e106      	b.n	800857a <_printf_float+0x476>
 800836c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800836e:	68e8      	ldr	r0, [r5, #12]
 8008370:	4298      	cmp	r0, r3
 8008372:	db00      	blt.n	8008376 <_printf_float+0x272>
 8008374:	e724      	b.n	80081c0 <_printf_float+0xbc>
 8008376:	0018      	movs	r0, r3
 8008378:	e722      	b.n	80081c0 <_printf_float+0xbc>
 800837a:	002a      	movs	r2, r5
 800837c:	2301      	movs	r3, #1
 800837e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008380:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008382:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008384:	321a      	adds	r2, #26
 8008386:	47b8      	blx	r7
 8008388:	3001      	adds	r0, #1
 800838a:	d100      	bne.n	800838e <_printf_float+0x28a>
 800838c:	e716      	b.n	80081bc <_printf_float+0xb8>
 800838e:	3401      	adds	r4, #1
 8008390:	e7e5      	b.n	800835e <_printf_float+0x25a>
 8008392:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008394:	2b00      	cmp	r3, #0
 8008396:	dc3b      	bgt.n	8008410 <_printf_float+0x30c>
 8008398:	2301      	movs	r3, #1
 800839a:	4a1c      	ldr	r2, [pc, #112]	@ (800840c <_printf_float+0x308>)
 800839c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800839e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80083a2:	47a0      	blx	r4
 80083a4:	3001      	adds	r0, #1
 80083a6:	d100      	bne.n	80083aa <_printf_float+0x2a6>
 80083a8:	e708      	b.n	80081bc <_printf_float+0xb8>
 80083aa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80083ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083ae:	4333      	orrs	r3, r6
 80083b0:	d102      	bne.n	80083b8 <_printf_float+0x2b4>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	07db      	lsls	r3, r3, #31
 80083b6:	d5d5      	bpl.n	8008364 <_printf_float+0x260>
 80083b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80083c2:	47a0      	blx	r4
 80083c4:	2300      	movs	r3, #0
 80083c6:	3001      	adds	r0, #1
 80083c8:	d100      	bne.n	80083cc <_printf_float+0x2c8>
 80083ca:	e6f7      	b.n	80081bc <_printf_float+0xb8>
 80083cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80083ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083d2:	425b      	negs	r3, r3
 80083d4:	4293      	cmp	r3, r2
 80083d6:	dc01      	bgt.n	80083dc <_printf_float+0x2d8>
 80083d8:	0033      	movs	r3, r6
 80083da:	e792      	b.n	8008302 <_printf_float+0x1fe>
 80083dc:	002a      	movs	r2, r5
 80083de:	2301      	movs	r3, #1
 80083e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083e4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80083e6:	321a      	adds	r2, #26
 80083e8:	47a0      	blx	r4
 80083ea:	3001      	adds	r0, #1
 80083ec:	d100      	bne.n	80083f0 <_printf_float+0x2ec>
 80083ee:	e6e5      	b.n	80081bc <_printf_float+0xb8>
 80083f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083f2:	3301      	adds	r3, #1
 80083f4:	e7ea      	b.n	80083cc <_printf_float+0x2c8>
 80083f6:	46c0      	nop			@ (mov r8, r8)
 80083f8:	7fefffff 	.word	0x7fefffff
 80083fc:	0800b8d4 	.word	0x0800b8d4
 8008400:	0800b8d0 	.word	0x0800b8d0
 8008404:	0800b8dc 	.word	0x0800b8dc
 8008408:	0800b8d8 	.word	0x0800b8d8
 800840c:	0800b8e0 	.word	0x0800b8e0
 8008410:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008412:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008414:	930c      	str	r3, [sp, #48]	@ 0x30
 8008416:	429e      	cmp	r6, r3
 8008418:	dd00      	ble.n	800841c <_printf_float+0x318>
 800841a:	001e      	movs	r6, r3
 800841c:	2e00      	cmp	r6, #0
 800841e:	dc31      	bgt.n	8008484 <_printf_float+0x380>
 8008420:	43f3      	mvns	r3, r6
 8008422:	2400      	movs	r4, #0
 8008424:	17db      	asrs	r3, r3, #31
 8008426:	4033      	ands	r3, r6
 8008428:	930e      	str	r3, [sp, #56]	@ 0x38
 800842a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800842c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842e:	1af3      	subs	r3, r6, r3
 8008430:	42a3      	cmp	r3, r4
 8008432:	dc30      	bgt.n	8008496 <_printf_float+0x392>
 8008434:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008436:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008438:	429a      	cmp	r2, r3
 800843a:	dc38      	bgt.n	80084ae <_printf_float+0x3aa>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	07db      	lsls	r3, r3, #31
 8008440:	d435      	bmi.n	80084ae <_printf_float+0x3aa>
 8008442:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008448:	1b9b      	subs	r3, r3, r6
 800844a:	1b14      	subs	r4, r2, r4
 800844c:	429c      	cmp	r4, r3
 800844e:	dd00      	ble.n	8008452 <_printf_float+0x34e>
 8008450:	001c      	movs	r4, r3
 8008452:	2c00      	cmp	r4, #0
 8008454:	dc34      	bgt.n	80084c0 <_printf_float+0x3bc>
 8008456:	43e3      	mvns	r3, r4
 8008458:	2600      	movs	r6, #0
 800845a:	17db      	asrs	r3, r3, #31
 800845c:	401c      	ands	r4, r3
 800845e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008460:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	1b1b      	subs	r3, r3, r4
 8008466:	42b3      	cmp	r3, r6
 8008468:	dc00      	bgt.n	800846c <_printf_float+0x368>
 800846a:	e77b      	b.n	8008364 <_printf_float+0x260>
 800846c:	002a      	movs	r2, r5
 800846e:	2301      	movs	r3, #1
 8008470:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008474:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008476:	321a      	adds	r2, #26
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	d100      	bne.n	8008480 <_printf_float+0x37c>
 800847e:	e69d      	b.n	80081bc <_printf_float+0xb8>
 8008480:	3601      	adds	r6, #1
 8008482:	e7ec      	b.n	800845e <_printf_float+0x35a>
 8008484:	0033      	movs	r3, r6
 8008486:	003a      	movs	r2, r7
 8008488:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800848a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800848c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800848e:	47a0      	blx	r4
 8008490:	3001      	adds	r0, #1
 8008492:	d1c5      	bne.n	8008420 <_printf_float+0x31c>
 8008494:	e692      	b.n	80081bc <_printf_float+0xb8>
 8008496:	002a      	movs	r2, r5
 8008498:	2301      	movs	r3, #1
 800849a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800849c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800849e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084a0:	321a      	adds	r2, #26
 80084a2:	47b0      	blx	r6
 80084a4:	3001      	adds	r0, #1
 80084a6:	d100      	bne.n	80084aa <_printf_float+0x3a6>
 80084a8:	e688      	b.n	80081bc <_printf_float+0xb8>
 80084aa:	3401      	adds	r4, #1
 80084ac:	e7bd      	b.n	800842a <_printf_float+0x326>
 80084ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80084b8:	47a0      	blx	r4
 80084ba:	3001      	adds	r0, #1
 80084bc:	d1c1      	bne.n	8008442 <_printf_float+0x33e>
 80084be:	e67d      	b.n	80081bc <_printf_float+0xb8>
 80084c0:	19ba      	adds	r2, r7, r6
 80084c2:	0023      	movs	r3, r4
 80084c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084ca:	47b0      	blx	r6
 80084cc:	3001      	adds	r0, #1
 80084ce:	d1c2      	bne.n	8008456 <_printf_float+0x352>
 80084d0:	e674      	b.n	80081bc <_printf_float+0xb8>
 80084d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	dc02      	bgt.n	80084e0 <_printf_float+0x3dc>
 80084da:	2301      	movs	r3, #1
 80084dc:	421a      	tst	r2, r3
 80084de:	d039      	beq.n	8008554 <_printf_float+0x450>
 80084e0:	2301      	movs	r3, #1
 80084e2:	003a      	movs	r2, r7
 80084e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084ea:	47b0      	blx	r6
 80084ec:	3001      	adds	r0, #1
 80084ee:	d100      	bne.n	80084f2 <_printf_float+0x3ee>
 80084f0:	e664      	b.n	80081bc <_printf_float+0xb8>
 80084f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084fa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084fc:	47b0      	blx	r6
 80084fe:	3001      	adds	r0, #1
 8008500:	d100      	bne.n	8008504 <_printf_float+0x400>
 8008502:	e65b      	b.n	80081bc <_printf_float+0xb8>
 8008504:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008506:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800850a:	2200      	movs	r2, #0
 800850c:	3b01      	subs	r3, #1
 800850e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008510:	2300      	movs	r3, #0
 8008512:	f7f7 ff97 	bl	8000444 <__aeabi_dcmpeq>
 8008516:	2800      	cmp	r0, #0
 8008518:	d11a      	bne.n	8008550 <_printf_float+0x44c>
 800851a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800851c:	1c7a      	adds	r2, r7, #1
 800851e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008520:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008522:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008524:	47b0      	blx	r6
 8008526:	3001      	adds	r0, #1
 8008528:	d10e      	bne.n	8008548 <_printf_float+0x444>
 800852a:	e647      	b.n	80081bc <_printf_float+0xb8>
 800852c:	002a      	movs	r2, r5
 800852e:	2301      	movs	r3, #1
 8008530:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008534:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008536:	321a      	adds	r2, #26
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	d100      	bne.n	8008540 <_printf_float+0x43c>
 800853e:	e63d      	b.n	80081bc <_printf_float+0xb8>
 8008540:	3601      	adds	r6, #1
 8008542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008544:	429e      	cmp	r6, r3
 8008546:	dbf1      	blt.n	800852c <_printf_float+0x428>
 8008548:	002a      	movs	r2, r5
 800854a:	0023      	movs	r3, r4
 800854c:	3250      	adds	r2, #80	@ 0x50
 800854e:	e6d9      	b.n	8008304 <_printf_float+0x200>
 8008550:	2600      	movs	r6, #0
 8008552:	e7f6      	b.n	8008542 <_printf_float+0x43e>
 8008554:	003a      	movs	r2, r7
 8008556:	e7e2      	b.n	800851e <_printf_float+0x41a>
 8008558:	002a      	movs	r2, r5
 800855a:	2301      	movs	r3, #1
 800855c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800855e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008560:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008562:	3219      	adds	r2, #25
 8008564:	47b0      	blx	r6
 8008566:	3001      	adds	r0, #1
 8008568:	d100      	bne.n	800856c <_printf_float+0x468>
 800856a:	e627      	b.n	80081bc <_printf_float+0xb8>
 800856c:	3401      	adds	r4, #1
 800856e:	68eb      	ldr	r3, [r5, #12]
 8008570:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008572:	1a9b      	subs	r3, r3, r2
 8008574:	42a3      	cmp	r3, r4
 8008576:	dcef      	bgt.n	8008558 <_printf_float+0x454>
 8008578:	e6f8      	b.n	800836c <_printf_float+0x268>
 800857a:	2400      	movs	r4, #0
 800857c:	e7f7      	b.n	800856e <_printf_float+0x46a>
 800857e:	46c0      	nop			@ (mov r8, r8)

08008580 <_printf_common>:
 8008580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008582:	0016      	movs	r6, r2
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	688a      	ldr	r2, [r1, #8]
 8008588:	690b      	ldr	r3, [r1, #16]
 800858a:	000c      	movs	r4, r1
 800858c:	9000      	str	r0, [sp, #0]
 800858e:	4293      	cmp	r3, r2
 8008590:	da00      	bge.n	8008594 <_printf_common+0x14>
 8008592:	0013      	movs	r3, r2
 8008594:	0022      	movs	r2, r4
 8008596:	6033      	str	r3, [r6, #0]
 8008598:	3243      	adds	r2, #67	@ 0x43
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	2a00      	cmp	r2, #0
 800859e:	d001      	beq.n	80085a4 <_printf_common+0x24>
 80085a0:	3301      	adds	r3, #1
 80085a2:	6033      	str	r3, [r6, #0]
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	069b      	lsls	r3, r3, #26
 80085a8:	d502      	bpl.n	80085b0 <_printf_common+0x30>
 80085aa:	6833      	ldr	r3, [r6, #0]
 80085ac:	3302      	adds	r3, #2
 80085ae:	6033      	str	r3, [r6, #0]
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	2306      	movs	r3, #6
 80085b4:	0015      	movs	r5, r2
 80085b6:	401d      	ands	r5, r3
 80085b8:	421a      	tst	r2, r3
 80085ba:	d027      	beq.n	800860c <_printf_common+0x8c>
 80085bc:	0023      	movs	r3, r4
 80085be:	3343      	adds	r3, #67	@ 0x43
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	1e5a      	subs	r2, r3, #1
 80085c4:	4193      	sbcs	r3, r2
 80085c6:	6822      	ldr	r2, [r4, #0]
 80085c8:	0692      	lsls	r2, r2, #26
 80085ca:	d430      	bmi.n	800862e <_printf_common+0xae>
 80085cc:	0022      	movs	r2, r4
 80085ce:	9901      	ldr	r1, [sp, #4]
 80085d0:	9800      	ldr	r0, [sp, #0]
 80085d2:	9d08      	ldr	r5, [sp, #32]
 80085d4:	3243      	adds	r2, #67	@ 0x43
 80085d6:	47a8      	blx	r5
 80085d8:	3001      	adds	r0, #1
 80085da:	d025      	beq.n	8008628 <_printf_common+0xa8>
 80085dc:	2206      	movs	r2, #6
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	2500      	movs	r5, #0
 80085e2:	4013      	ands	r3, r2
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d105      	bne.n	80085f4 <_printf_common+0x74>
 80085e8:	6833      	ldr	r3, [r6, #0]
 80085ea:	68e5      	ldr	r5, [r4, #12]
 80085ec:	1aed      	subs	r5, r5, r3
 80085ee:	43eb      	mvns	r3, r5
 80085f0:	17db      	asrs	r3, r3, #31
 80085f2:	401d      	ands	r5, r3
 80085f4:	68a3      	ldr	r3, [r4, #8]
 80085f6:	6922      	ldr	r2, [r4, #16]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	dd01      	ble.n	8008600 <_printf_common+0x80>
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	18ed      	adds	r5, r5, r3
 8008600:	2600      	movs	r6, #0
 8008602:	42b5      	cmp	r5, r6
 8008604:	d120      	bne.n	8008648 <_printf_common+0xc8>
 8008606:	2000      	movs	r0, #0
 8008608:	e010      	b.n	800862c <_printf_common+0xac>
 800860a:	3501      	adds	r5, #1
 800860c:	68e3      	ldr	r3, [r4, #12]
 800860e:	6832      	ldr	r2, [r6, #0]
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	42ab      	cmp	r3, r5
 8008614:	ddd2      	ble.n	80085bc <_printf_common+0x3c>
 8008616:	0022      	movs	r2, r4
 8008618:	2301      	movs	r3, #1
 800861a:	9901      	ldr	r1, [sp, #4]
 800861c:	9800      	ldr	r0, [sp, #0]
 800861e:	9f08      	ldr	r7, [sp, #32]
 8008620:	3219      	adds	r2, #25
 8008622:	47b8      	blx	r7
 8008624:	3001      	adds	r0, #1
 8008626:	d1f0      	bne.n	800860a <_printf_common+0x8a>
 8008628:	2001      	movs	r0, #1
 800862a:	4240      	negs	r0, r0
 800862c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800862e:	2030      	movs	r0, #48	@ 0x30
 8008630:	18e1      	adds	r1, r4, r3
 8008632:	3143      	adds	r1, #67	@ 0x43
 8008634:	7008      	strb	r0, [r1, #0]
 8008636:	0021      	movs	r1, r4
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	3145      	adds	r1, #69	@ 0x45
 800863c:	7809      	ldrb	r1, [r1, #0]
 800863e:	18a2      	adds	r2, r4, r2
 8008640:	3243      	adds	r2, #67	@ 0x43
 8008642:	3302      	adds	r3, #2
 8008644:	7011      	strb	r1, [r2, #0]
 8008646:	e7c1      	b.n	80085cc <_printf_common+0x4c>
 8008648:	0022      	movs	r2, r4
 800864a:	2301      	movs	r3, #1
 800864c:	9901      	ldr	r1, [sp, #4]
 800864e:	9800      	ldr	r0, [sp, #0]
 8008650:	9f08      	ldr	r7, [sp, #32]
 8008652:	321a      	adds	r2, #26
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	d0e6      	beq.n	8008628 <_printf_common+0xa8>
 800865a:	3601      	adds	r6, #1
 800865c:	e7d1      	b.n	8008602 <_printf_common+0x82>
	...

08008660 <_printf_i>:
 8008660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008662:	b08b      	sub	sp, #44	@ 0x2c
 8008664:	9206      	str	r2, [sp, #24]
 8008666:	000a      	movs	r2, r1
 8008668:	3243      	adds	r2, #67	@ 0x43
 800866a:	9307      	str	r3, [sp, #28]
 800866c:	9005      	str	r0, [sp, #20]
 800866e:	9203      	str	r2, [sp, #12]
 8008670:	7e0a      	ldrb	r2, [r1, #24]
 8008672:	000c      	movs	r4, r1
 8008674:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008676:	2a78      	cmp	r2, #120	@ 0x78
 8008678:	d809      	bhi.n	800868e <_printf_i+0x2e>
 800867a:	2a62      	cmp	r2, #98	@ 0x62
 800867c:	d80b      	bhi.n	8008696 <_printf_i+0x36>
 800867e:	2a00      	cmp	r2, #0
 8008680:	d100      	bne.n	8008684 <_printf_i+0x24>
 8008682:	e0ba      	b.n	80087fa <_printf_i+0x19a>
 8008684:	497a      	ldr	r1, [pc, #488]	@ (8008870 <_printf_i+0x210>)
 8008686:	9104      	str	r1, [sp, #16]
 8008688:	2a58      	cmp	r2, #88	@ 0x58
 800868a:	d100      	bne.n	800868e <_printf_i+0x2e>
 800868c:	e08e      	b.n	80087ac <_printf_i+0x14c>
 800868e:	0025      	movs	r5, r4
 8008690:	3542      	adds	r5, #66	@ 0x42
 8008692:	702a      	strb	r2, [r5, #0]
 8008694:	e022      	b.n	80086dc <_printf_i+0x7c>
 8008696:	0010      	movs	r0, r2
 8008698:	3863      	subs	r0, #99	@ 0x63
 800869a:	2815      	cmp	r0, #21
 800869c:	d8f7      	bhi.n	800868e <_printf_i+0x2e>
 800869e:	f7f7 fd41 	bl	8000124 <__gnu_thumb1_case_shi>
 80086a2:	0016      	.short	0x0016
 80086a4:	fff6001f 	.word	0xfff6001f
 80086a8:	fff6fff6 	.word	0xfff6fff6
 80086ac:	001ffff6 	.word	0x001ffff6
 80086b0:	fff6fff6 	.word	0xfff6fff6
 80086b4:	fff6fff6 	.word	0xfff6fff6
 80086b8:	0036009f 	.word	0x0036009f
 80086bc:	fff6007e 	.word	0xfff6007e
 80086c0:	00b0fff6 	.word	0x00b0fff6
 80086c4:	0036fff6 	.word	0x0036fff6
 80086c8:	fff6fff6 	.word	0xfff6fff6
 80086cc:	0082      	.short	0x0082
 80086ce:	0025      	movs	r5, r4
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	3542      	adds	r5, #66	@ 0x42
 80086d4:	1d11      	adds	r1, r2, #4
 80086d6:	6019      	str	r1, [r3, #0]
 80086d8:	6813      	ldr	r3, [r2, #0]
 80086da:	702b      	strb	r3, [r5, #0]
 80086dc:	2301      	movs	r3, #1
 80086de:	e09e      	b.n	800881e <_printf_i+0x1be>
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	6809      	ldr	r1, [r1, #0]
 80086e4:	1d02      	adds	r2, r0, #4
 80086e6:	060d      	lsls	r5, r1, #24
 80086e8:	d50b      	bpl.n	8008702 <_printf_i+0xa2>
 80086ea:	6806      	ldr	r6, [r0, #0]
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	da03      	bge.n	80086fa <_printf_i+0x9a>
 80086f2:	232d      	movs	r3, #45	@ 0x2d
 80086f4:	9a03      	ldr	r2, [sp, #12]
 80086f6:	4276      	negs	r6, r6
 80086f8:	7013      	strb	r3, [r2, #0]
 80086fa:	4b5d      	ldr	r3, [pc, #372]	@ (8008870 <_printf_i+0x210>)
 80086fc:	270a      	movs	r7, #10
 80086fe:	9304      	str	r3, [sp, #16]
 8008700:	e018      	b.n	8008734 <_printf_i+0xd4>
 8008702:	6806      	ldr	r6, [r0, #0]
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	0649      	lsls	r1, r1, #25
 8008708:	d5f1      	bpl.n	80086ee <_printf_i+0x8e>
 800870a:	b236      	sxth	r6, r6
 800870c:	e7ef      	b.n	80086ee <_printf_i+0x8e>
 800870e:	6808      	ldr	r0, [r1, #0]
 8008710:	6819      	ldr	r1, [r3, #0]
 8008712:	c940      	ldmia	r1!, {r6}
 8008714:	0605      	lsls	r5, r0, #24
 8008716:	d402      	bmi.n	800871e <_printf_i+0xbe>
 8008718:	0640      	lsls	r0, r0, #25
 800871a:	d500      	bpl.n	800871e <_printf_i+0xbe>
 800871c:	b2b6      	uxth	r6, r6
 800871e:	6019      	str	r1, [r3, #0]
 8008720:	4b53      	ldr	r3, [pc, #332]	@ (8008870 <_printf_i+0x210>)
 8008722:	270a      	movs	r7, #10
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	2a6f      	cmp	r2, #111	@ 0x6f
 8008728:	d100      	bne.n	800872c <_printf_i+0xcc>
 800872a:	3f02      	subs	r7, #2
 800872c:	0023      	movs	r3, r4
 800872e:	2200      	movs	r2, #0
 8008730:	3343      	adds	r3, #67	@ 0x43
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	6863      	ldr	r3, [r4, #4]
 8008736:	60a3      	str	r3, [r4, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	db06      	blt.n	800874a <_printf_i+0xea>
 800873c:	2104      	movs	r1, #4
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	9d03      	ldr	r5, [sp, #12]
 8008742:	438a      	bics	r2, r1
 8008744:	6022      	str	r2, [r4, #0]
 8008746:	4333      	orrs	r3, r6
 8008748:	d00c      	beq.n	8008764 <_printf_i+0x104>
 800874a:	9d03      	ldr	r5, [sp, #12]
 800874c:	0030      	movs	r0, r6
 800874e:	0039      	movs	r1, r7
 8008750:	f7f7 fd78 	bl	8000244 <__aeabi_uidivmod>
 8008754:	9b04      	ldr	r3, [sp, #16]
 8008756:	3d01      	subs	r5, #1
 8008758:	5c5b      	ldrb	r3, [r3, r1]
 800875a:	702b      	strb	r3, [r5, #0]
 800875c:	0033      	movs	r3, r6
 800875e:	0006      	movs	r6, r0
 8008760:	429f      	cmp	r7, r3
 8008762:	d9f3      	bls.n	800874c <_printf_i+0xec>
 8008764:	2f08      	cmp	r7, #8
 8008766:	d109      	bne.n	800877c <_printf_i+0x11c>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	07db      	lsls	r3, r3, #31
 800876c:	d506      	bpl.n	800877c <_printf_i+0x11c>
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	dc02      	bgt.n	800877c <_printf_i+0x11c>
 8008776:	2330      	movs	r3, #48	@ 0x30
 8008778:	3d01      	subs	r5, #1
 800877a:	702b      	strb	r3, [r5, #0]
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	1b5b      	subs	r3, r3, r5
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	9b07      	ldr	r3, [sp, #28]
 8008784:	0021      	movs	r1, r4
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	9805      	ldr	r0, [sp, #20]
 800878a:	9b06      	ldr	r3, [sp, #24]
 800878c:	aa09      	add	r2, sp, #36	@ 0x24
 800878e:	f7ff fef7 	bl	8008580 <_printf_common>
 8008792:	3001      	adds	r0, #1
 8008794:	d148      	bne.n	8008828 <_printf_i+0x1c8>
 8008796:	2001      	movs	r0, #1
 8008798:	4240      	negs	r0, r0
 800879a:	b00b      	add	sp, #44	@ 0x2c
 800879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879e:	2220      	movs	r2, #32
 80087a0:	6809      	ldr	r1, [r1, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	6022      	str	r2, [r4, #0]
 80087a6:	2278      	movs	r2, #120	@ 0x78
 80087a8:	4932      	ldr	r1, [pc, #200]	@ (8008874 <_printf_i+0x214>)
 80087aa:	9104      	str	r1, [sp, #16]
 80087ac:	0021      	movs	r1, r4
 80087ae:	3145      	adds	r1, #69	@ 0x45
 80087b0:	700a      	strb	r2, [r1, #0]
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	c940      	ldmia	r1!, {r6}
 80087b8:	0610      	lsls	r0, r2, #24
 80087ba:	d402      	bmi.n	80087c2 <_printf_i+0x162>
 80087bc:	0650      	lsls	r0, r2, #25
 80087be:	d500      	bpl.n	80087c2 <_printf_i+0x162>
 80087c0:	b2b6      	uxth	r6, r6
 80087c2:	6019      	str	r1, [r3, #0]
 80087c4:	07d3      	lsls	r3, r2, #31
 80087c6:	d502      	bpl.n	80087ce <_printf_i+0x16e>
 80087c8:	2320      	movs	r3, #32
 80087ca:	4313      	orrs	r3, r2
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	d001      	beq.n	80087d6 <_printf_i+0x176>
 80087d2:	2710      	movs	r7, #16
 80087d4:	e7aa      	b.n	800872c <_printf_i+0xcc>
 80087d6:	2220      	movs	r2, #32
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	4393      	bics	r3, r2
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	e7f8      	b.n	80087d2 <_printf_i+0x172>
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	680d      	ldr	r5, [r1, #0]
 80087e4:	1d10      	adds	r0, r2, #4
 80087e6:	6949      	ldr	r1, [r1, #20]
 80087e8:	6018      	str	r0, [r3, #0]
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	062e      	lsls	r6, r5, #24
 80087ee:	d501      	bpl.n	80087f4 <_printf_i+0x194>
 80087f0:	6019      	str	r1, [r3, #0]
 80087f2:	e002      	b.n	80087fa <_printf_i+0x19a>
 80087f4:	066d      	lsls	r5, r5, #25
 80087f6:	d5fb      	bpl.n	80087f0 <_printf_i+0x190>
 80087f8:	8019      	strh	r1, [r3, #0]
 80087fa:	2300      	movs	r3, #0
 80087fc:	9d03      	ldr	r5, [sp, #12]
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	e7bf      	b.n	8008782 <_printf_i+0x122>
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	1d11      	adds	r1, r2, #4
 8008806:	6019      	str	r1, [r3, #0]
 8008808:	6815      	ldr	r5, [r2, #0]
 800880a:	2100      	movs	r1, #0
 800880c:	0028      	movs	r0, r5
 800880e:	6862      	ldr	r2, [r4, #4]
 8008810:	f000 f9fd 	bl	8008c0e <memchr>
 8008814:	2800      	cmp	r0, #0
 8008816:	d001      	beq.n	800881c <_printf_i+0x1bc>
 8008818:	1b40      	subs	r0, r0, r5
 800881a:	6060      	str	r0, [r4, #4]
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	2300      	movs	r3, #0
 8008822:	9a03      	ldr	r2, [sp, #12]
 8008824:	7013      	strb	r3, [r2, #0]
 8008826:	e7ac      	b.n	8008782 <_printf_i+0x122>
 8008828:	002a      	movs	r2, r5
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	9906      	ldr	r1, [sp, #24]
 800882e:	9805      	ldr	r0, [sp, #20]
 8008830:	9d07      	ldr	r5, [sp, #28]
 8008832:	47a8      	blx	r5
 8008834:	3001      	adds	r0, #1
 8008836:	d0ae      	beq.n	8008796 <_printf_i+0x136>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	079b      	lsls	r3, r3, #30
 800883c:	d415      	bmi.n	800886a <_printf_i+0x20a>
 800883e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008840:	68e0      	ldr	r0, [r4, #12]
 8008842:	4298      	cmp	r0, r3
 8008844:	daa9      	bge.n	800879a <_printf_i+0x13a>
 8008846:	0018      	movs	r0, r3
 8008848:	e7a7      	b.n	800879a <_printf_i+0x13a>
 800884a:	0022      	movs	r2, r4
 800884c:	2301      	movs	r3, #1
 800884e:	9906      	ldr	r1, [sp, #24]
 8008850:	9805      	ldr	r0, [sp, #20]
 8008852:	9e07      	ldr	r6, [sp, #28]
 8008854:	3219      	adds	r2, #25
 8008856:	47b0      	blx	r6
 8008858:	3001      	adds	r0, #1
 800885a:	d09c      	beq.n	8008796 <_printf_i+0x136>
 800885c:	3501      	adds	r5, #1
 800885e:	68e3      	ldr	r3, [r4, #12]
 8008860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	42ab      	cmp	r3, r5
 8008866:	dcf0      	bgt.n	800884a <_printf_i+0x1ea>
 8008868:	e7e9      	b.n	800883e <_printf_i+0x1de>
 800886a:	2500      	movs	r5, #0
 800886c:	e7f7      	b.n	800885e <_printf_i+0x1fe>
 800886e:	46c0      	nop			@ (mov r8, r8)
 8008870:	0800b8e2 	.word	0x0800b8e2
 8008874:	0800b8f3 	.word	0x0800b8f3

08008878 <std>:
 8008878:	2300      	movs	r3, #0
 800887a:	b510      	push	{r4, lr}
 800887c:	0004      	movs	r4, r0
 800887e:	6003      	str	r3, [r0, #0]
 8008880:	6043      	str	r3, [r0, #4]
 8008882:	6083      	str	r3, [r0, #8]
 8008884:	8181      	strh	r1, [r0, #12]
 8008886:	6643      	str	r3, [r0, #100]	@ 0x64
 8008888:	81c2      	strh	r2, [r0, #14]
 800888a:	6103      	str	r3, [r0, #16]
 800888c:	6143      	str	r3, [r0, #20]
 800888e:	6183      	str	r3, [r0, #24]
 8008890:	0019      	movs	r1, r3
 8008892:	2208      	movs	r2, #8
 8008894:	305c      	adds	r0, #92	@ 0x5c
 8008896:	f000 f933 	bl	8008b00 <memset>
 800889a:	4b0b      	ldr	r3, [pc, #44]	@ (80088c8 <std+0x50>)
 800889c:	6224      	str	r4, [r4, #32]
 800889e:	6263      	str	r3, [r4, #36]	@ 0x24
 80088a0:	4b0a      	ldr	r3, [pc, #40]	@ (80088cc <std+0x54>)
 80088a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088a4:	4b0a      	ldr	r3, [pc, #40]	@ (80088d0 <std+0x58>)
 80088a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088a8:	4b0a      	ldr	r3, [pc, #40]	@ (80088d4 <std+0x5c>)
 80088aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80088ac:	4b0a      	ldr	r3, [pc, #40]	@ (80088d8 <std+0x60>)
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d005      	beq.n	80088be <std+0x46>
 80088b2:	4b0a      	ldr	r3, [pc, #40]	@ (80088dc <std+0x64>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	d002      	beq.n	80088be <std+0x46>
 80088b8:	4b09      	ldr	r3, [pc, #36]	@ (80088e0 <std+0x68>)
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d103      	bne.n	80088c6 <std+0x4e>
 80088be:	0020      	movs	r0, r4
 80088c0:	3058      	adds	r0, #88	@ 0x58
 80088c2:	f000 f9a1 	bl	8008c08 <__retarget_lock_init_recursive>
 80088c6:	bd10      	pop	{r4, pc}
 80088c8:	08008a45 	.word	0x08008a45
 80088cc:	08008a6d 	.word	0x08008a6d
 80088d0:	08008aa5 	.word	0x08008aa5
 80088d4:	08008ad1 	.word	0x08008ad1
 80088d8:	20000420 	.word	0x20000420
 80088dc:	20000488 	.word	0x20000488
 80088e0:	200004f0 	.word	0x200004f0

080088e4 <stdio_exit_handler>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4a03      	ldr	r2, [pc, #12]	@ (80088f4 <stdio_exit_handler+0x10>)
 80088e8:	4903      	ldr	r1, [pc, #12]	@ (80088f8 <stdio_exit_handler+0x14>)
 80088ea:	4804      	ldr	r0, [pc, #16]	@ (80088fc <stdio_exit_handler+0x18>)
 80088ec:	f000 f86c 	bl	80089c8 <_fwalk_sglue>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	46c0      	nop			@ (mov r8, r8)
 80088f4:	2000000c 	.word	0x2000000c
 80088f8:	0800a62d 	.word	0x0800a62d
 80088fc:	2000001c 	.word	0x2000001c

08008900 <cleanup_stdio>:
 8008900:	6841      	ldr	r1, [r0, #4]
 8008902:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <cleanup_stdio+0x30>)
 8008904:	b510      	push	{r4, lr}
 8008906:	0004      	movs	r4, r0
 8008908:	4299      	cmp	r1, r3
 800890a:	d001      	beq.n	8008910 <cleanup_stdio+0x10>
 800890c:	f001 fe8e 	bl	800a62c <_fflush_r>
 8008910:	68a1      	ldr	r1, [r4, #8]
 8008912:	4b08      	ldr	r3, [pc, #32]	@ (8008934 <cleanup_stdio+0x34>)
 8008914:	4299      	cmp	r1, r3
 8008916:	d002      	beq.n	800891e <cleanup_stdio+0x1e>
 8008918:	0020      	movs	r0, r4
 800891a:	f001 fe87 	bl	800a62c <_fflush_r>
 800891e:	68e1      	ldr	r1, [r4, #12]
 8008920:	4b05      	ldr	r3, [pc, #20]	@ (8008938 <cleanup_stdio+0x38>)
 8008922:	4299      	cmp	r1, r3
 8008924:	d002      	beq.n	800892c <cleanup_stdio+0x2c>
 8008926:	0020      	movs	r0, r4
 8008928:	f001 fe80 	bl	800a62c <_fflush_r>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	46c0      	nop			@ (mov r8, r8)
 8008930:	20000420 	.word	0x20000420
 8008934:	20000488 	.word	0x20000488
 8008938:	200004f0 	.word	0x200004f0

0800893c <global_stdio_init.part.0>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4b09      	ldr	r3, [pc, #36]	@ (8008964 <global_stdio_init.part.0+0x28>)
 8008940:	4a09      	ldr	r2, [pc, #36]	@ (8008968 <global_stdio_init.part.0+0x2c>)
 8008942:	2104      	movs	r1, #4
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	4809      	ldr	r0, [pc, #36]	@ (800896c <global_stdio_init.part.0+0x30>)
 8008948:	2200      	movs	r2, #0
 800894a:	f7ff ff95 	bl	8008878 <std>
 800894e:	2201      	movs	r2, #1
 8008950:	2109      	movs	r1, #9
 8008952:	4807      	ldr	r0, [pc, #28]	@ (8008970 <global_stdio_init.part.0+0x34>)
 8008954:	f7ff ff90 	bl	8008878 <std>
 8008958:	2202      	movs	r2, #2
 800895a:	2112      	movs	r1, #18
 800895c:	4805      	ldr	r0, [pc, #20]	@ (8008974 <global_stdio_init.part.0+0x38>)
 800895e:	f7ff ff8b 	bl	8008878 <std>
 8008962:	bd10      	pop	{r4, pc}
 8008964:	20000558 	.word	0x20000558
 8008968:	080088e5 	.word	0x080088e5
 800896c:	20000420 	.word	0x20000420
 8008970:	20000488 	.word	0x20000488
 8008974:	200004f0 	.word	0x200004f0

08008978 <__sfp_lock_acquire>:
 8008978:	b510      	push	{r4, lr}
 800897a:	4802      	ldr	r0, [pc, #8]	@ (8008984 <__sfp_lock_acquire+0xc>)
 800897c:	f000 f945 	bl	8008c0a <__retarget_lock_acquire_recursive>
 8008980:	bd10      	pop	{r4, pc}
 8008982:	46c0      	nop			@ (mov r8, r8)
 8008984:	20000561 	.word	0x20000561

08008988 <__sfp_lock_release>:
 8008988:	b510      	push	{r4, lr}
 800898a:	4802      	ldr	r0, [pc, #8]	@ (8008994 <__sfp_lock_release+0xc>)
 800898c:	f000 f93e 	bl	8008c0c <__retarget_lock_release_recursive>
 8008990:	bd10      	pop	{r4, pc}
 8008992:	46c0      	nop			@ (mov r8, r8)
 8008994:	20000561 	.word	0x20000561

08008998 <__sinit>:
 8008998:	b510      	push	{r4, lr}
 800899a:	0004      	movs	r4, r0
 800899c:	f7ff ffec 	bl	8008978 <__sfp_lock_acquire>
 80089a0:	6a23      	ldr	r3, [r4, #32]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <__sinit+0x14>
 80089a6:	f7ff ffef 	bl	8008988 <__sfp_lock_release>
 80089aa:	bd10      	pop	{r4, pc}
 80089ac:	4b04      	ldr	r3, [pc, #16]	@ (80089c0 <__sinit+0x28>)
 80089ae:	6223      	str	r3, [r4, #32]
 80089b0:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <__sinit+0x2c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1f6      	bne.n	80089a6 <__sinit+0xe>
 80089b8:	f7ff ffc0 	bl	800893c <global_stdio_init.part.0>
 80089bc:	e7f3      	b.n	80089a6 <__sinit+0xe>
 80089be:	46c0      	nop			@ (mov r8, r8)
 80089c0:	08008901 	.word	0x08008901
 80089c4:	20000558 	.word	0x20000558

080089c8 <_fwalk_sglue>:
 80089c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ca:	0014      	movs	r4, r2
 80089cc:	2600      	movs	r6, #0
 80089ce:	9000      	str	r0, [sp, #0]
 80089d0:	9101      	str	r1, [sp, #4]
 80089d2:	68a5      	ldr	r5, [r4, #8]
 80089d4:	6867      	ldr	r7, [r4, #4]
 80089d6:	3f01      	subs	r7, #1
 80089d8:	d504      	bpl.n	80089e4 <_fwalk_sglue+0x1c>
 80089da:	6824      	ldr	r4, [r4, #0]
 80089dc:	2c00      	cmp	r4, #0
 80089de:	d1f8      	bne.n	80089d2 <_fwalk_sglue+0xa>
 80089e0:	0030      	movs	r0, r6
 80089e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089e4:	89ab      	ldrh	r3, [r5, #12]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d908      	bls.n	80089fc <_fwalk_sglue+0x34>
 80089ea:	220e      	movs	r2, #14
 80089ec:	5eab      	ldrsh	r3, [r5, r2]
 80089ee:	3301      	adds	r3, #1
 80089f0:	d004      	beq.n	80089fc <_fwalk_sglue+0x34>
 80089f2:	0029      	movs	r1, r5
 80089f4:	9800      	ldr	r0, [sp, #0]
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	4798      	blx	r3
 80089fa:	4306      	orrs	r6, r0
 80089fc:	3568      	adds	r5, #104	@ 0x68
 80089fe:	e7ea      	b.n	80089d6 <_fwalk_sglue+0xe>

08008a00 <siprintf>:
 8008a00:	b40e      	push	{r1, r2, r3}
 8008a02:	b510      	push	{r4, lr}
 8008a04:	2400      	movs	r4, #0
 8008a06:	490c      	ldr	r1, [pc, #48]	@ (8008a38 <siprintf+0x38>)
 8008a08:	b09d      	sub	sp, #116	@ 0x74
 8008a0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008a0c:	9002      	str	r0, [sp, #8]
 8008a0e:	9006      	str	r0, [sp, #24]
 8008a10:	9107      	str	r1, [sp, #28]
 8008a12:	9104      	str	r1, [sp, #16]
 8008a14:	4809      	ldr	r0, [pc, #36]	@ (8008a3c <siprintf+0x3c>)
 8008a16:	490a      	ldr	r1, [pc, #40]	@ (8008a40 <siprintf+0x40>)
 8008a18:	cb04      	ldmia	r3!, {r2}
 8008a1a:	9105      	str	r1, [sp, #20]
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	a902      	add	r1, sp, #8
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008a24:	f001 fc7e 	bl	800a324 <_svfiprintf_r>
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	701c      	strb	r4, [r3, #0]
 8008a2c:	b01d      	add	sp, #116	@ 0x74
 8008a2e:	bc10      	pop	{r4}
 8008a30:	bc08      	pop	{r3}
 8008a32:	b003      	add	sp, #12
 8008a34:	4718      	bx	r3
 8008a36:	46c0      	nop			@ (mov r8, r8)
 8008a38:	7fffffff 	.word	0x7fffffff
 8008a3c:	20000018 	.word	0x20000018
 8008a40:	ffff0208 	.word	0xffff0208

08008a44 <__sread>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	000c      	movs	r4, r1
 8008a48:	250e      	movs	r5, #14
 8008a4a:	5f49      	ldrsh	r1, [r1, r5]
 8008a4c:	f000 f88a 	bl	8008b64 <_read_r>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	db03      	blt.n	8008a5c <__sread+0x18>
 8008a54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008a56:	181b      	adds	r3, r3, r0
 8008a58:	6563      	str	r3, [r4, #84]	@ 0x54
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	4a02      	ldr	r2, [pc, #8]	@ (8008a68 <__sread+0x24>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	e7f9      	b.n	8008a5a <__sread+0x16>
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	ffffefff 	.word	0xffffefff

08008a6c <__swrite>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	001f      	movs	r7, r3
 8008a70:	898b      	ldrh	r3, [r1, #12]
 8008a72:	0005      	movs	r5, r0
 8008a74:	000c      	movs	r4, r1
 8008a76:	0016      	movs	r6, r2
 8008a78:	05db      	lsls	r3, r3, #23
 8008a7a:	d505      	bpl.n	8008a88 <__swrite+0x1c>
 8008a7c:	230e      	movs	r3, #14
 8008a7e:	5ec9      	ldrsh	r1, [r1, r3]
 8008a80:	2200      	movs	r2, #0
 8008a82:	2302      	movs	r3, #2
 8008a84:	f000 f85a 	bl	8008b3c <_lseek_r>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	4a05      	ldr	r2, [pc, #20]	@ (8008aa0 <__swrite+0x34>)
 8008a8c:	0028      	movs	r0, r5
 8008a8e:	4013      	ands	r3, r2
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	0032      	movs	r2, r6
 8008a94:	230e      	movs	r3, #14
 8008a96:	5ee1      	ldrsh	r1, [r4, r3]
 8008a98:	003b      	movs	r3, r7
 8008a9a:	f000 f877 	bl	8008b8c <_write_r>
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa0:	ffffefff 	.word	0xffffefff

08008aa4 <__sseek>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	000c      	movs	r4, r1
 8008aa8:	250e      	movs	r5, #14
 8008aaa:	5f49      	ldrsh	r1, [r1, r5]
 8008aac:	f000 f846 	bl	8008b3c <_lseek_r>
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	1c42      	adds	r2, r0, #1
 8008ab4:	d103      	bne.n	8008abe <__sseek+0x1a>
 8008ab6:	4a05      	ldr	r2, [pc, #20]	@ (8008acc <__sseek+0x28>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	81a3      	strh	r3, [r4, #12]
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
 8008abe:	2280      	movs	r2, #128	@ 0x80
 8008ac0:	0152      	lsls	r2, r2, #5
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ac8:	e7f8      	b.n	8008abc <__sseek+0x18>
 8008aca:	46c0      	nop			@ (mov r8, r8)
 8008acc:	ffffefff 	.word	0xffffefff

08008ad0 <__sclose>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	230e      	movs	r3, #14
 8008ad4:	5ec9      	ldrsh	r1, [r1, r3]
 8008ad6:	f000 f81f 	bl	8008b18 <_close_r>
 8008ada:	bd10      	pop	{r4, pc}

08008adc <memmove>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4288      	cmp	r0, r1
 8008ae0:	d902      	bls.n	8008ae8 <memmove+0xc>
 8008ae2:	188b      	adds	r3, r1, r2
 8008ae4:	4298      	cmp	r0, r3
 8008ae6:	d308      	bcc.n	8008afa <memmove+0x1e>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d007      	beq.n	8008afe <memmove+0x22>
 8008aee:	5ccc      	ldrb	r4, [r1, r3]
 8008af0:	54c4      	strb	r4, [r0, r3]
 8008af2:	3301      	adds	r3, #1
 8008af4:	e7f9      	b.n	8008aea <memmove+0xe>
 8008af6:	5c8b      	ldrb	r3, [r1, r2]
 8008af8:	5483      	strb	r3, [r0, r2]
 8008afa:	3a01      	subs	r2, #1
 8008afc:	d2fb      	bcs.n	8008af6 <memmove+0x1a>
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <memset>:
 8008b00:	0003      	movs	r3, r0
 8008b02:	1882      	adds	r2, r0, r2
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <memset+0xa>
 8008b08:	4770      	bx	lr
 8008b0a:	7019      	strb	r1, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	e7f9      	b.n	8008b04 <memset+0x4>

08008b10 <_localeconv_r>:
 8008b10:	4800      	ldr	r0, [pc, #0]	@ (8008b14 <_localeconv_r+0x4>)
 8008b12:	4770      	bx	lr
 8008b14:	20000158 	.word	0x20000158

08008b18 <_close_r>:
 8008b18:	2300      	movs	r3, #0
 8008b1a:	b570      	push	{r4, r5, r6, lr}
 8008b1c:	4d06      	ldr	r5, [pc, #24]	@ (8008b38 <_close_r+0x20>)
 8008b1e:	0004      	movs	r4, r0
 8008b20:	0008      	movs	r0, r1
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7fb fa17 	bl	8003f56 <_close>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d103      	bne.n	8008b34 <_close_r+0x1c>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d000      	beq.n	8008b34 <_close_r+0x1c>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	46c0      	nop			@ (mov r8, r8)
 8008b38:	2000055c 	.word	0x2000055c

08008b3c <_lseek_r>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	0004      	movs	r4, r0
 8008b40:	0008      	movs	r0, r1
 8008b42:	0011      	movs	r1, r2
 8008b44:	001a      	movs	r2, r3
 8008b46:	2300      	movs	r3, #0
 8008b48:	4d05      	ldr	r5, [pc, #20]	@ (8008b60 <_lseek_r+0x24>)
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7fb fa24 	bl	8003f98 <_lseek>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d103      	bne.n	8008b5c <_lseek_r+0x20>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d000      	beq.n	8008b5c <_lseek_r+0x20>
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}
 8008b5e:	46c0      	nop			@ (mov r8, r8)
 8008b60:	2000055c 	.word	0x2000055c

08008b64 <_read_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	0004      	movs	r4, r0
 8008b68:	0008      	movs	r0, r1
 8008b6a:	0011      	movs	r1, r2
 8008b6c:	001a      	movs	r2, r3
 8008b6e:	2300      	movs	r3, #0
 8008b70:	4d05      	ldr	r5, [pc, #20]	@ (8008b88 <_read_r+0x24>)
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	f7fb f9b6 	bl	8003ee4 <_read>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d103      	bne.n	8008b84 <_read_r+0x20>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d000      	beq.n	8008b84 <_read_r+0x20>
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	bd70      	pop	{r4, r5, r6, pc}
 8008b86:	46c0      	nop			@ (mov r8, r8)
 8008b88:	2000055c 	.word	0x2000055c

08008b8c <_write_r>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	0004      	movs	r4, r0
 8008b90:	0008      	movs	r0, r1
 8008b92:	0011      	movs	r1, r2
 8008b94:	001a      	movs	r2, r3
 8008b96:	2300      	movs	r3, #0
 8008b98:	4d05      	ldr	r5, [pc, #20]	@ (8008bb0 <_write_r+0x24>)
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7fb f9bf 	bl	8003f1e <_write>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d103      	bne.n	8008bac <_write_r+0x20>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d000      	beq.n	8008bac <_write_r+0x20>
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	46c0      	nop			@ (mov r8, r8)
 8008bb0:	2000055c 	.word	0x2000055c

08008bb4 <__errno>:
 8008bb4:	4b01      	ldr	r3, [pc, #4]	@ (8008bbc <__errno+0x8>)
 8008bb6:	6818      	ldr	r0, [r3, #0]
 8008bb8:	4770      	bx	lr
 8008bba:	46c0      	nop			@ (mov r8, r8)
 8008bbc:	20000018 	.word	0x20000018

08008bc0 <__libc_init_array>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	4c0c      	ldr	r4, [pc, #48]	@ (8008bf8 <__libc_init_array+0x38>)
 8008bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8008bfc <__libc_init_array+0x3c>)
 8008bc8:	1b64      	subs	r4, r4, r5
 8008bca:	10a4      	asrs	r4, r4, #2
 8008bcc:	42a6      	cmp	r6, r4
 8008bce:	d109      	bne.n	8008be4 <__libc_init_array+0x24>
 8008bd0:	2600      	movs	r6, #0
 8008bd2:	f002 fe05 	bl	800b7e0 <_init>
 8008bd6:	4c0a      	ldr	r4, [pc, #40]	@ (8008c00 <__libc_init_array+0x40>)
 8008bd8:	4d0a      	ldr	r5, [pc, #40]	@ (8008c04 <__libc_init_array+0x44>)
 8008bda:	1b64      	subs	r4, r4, r5
 8008bdc:	10a4      	asrs	r4, r4, #2
 8008bde:	42a6      	cmp	r6, r4
 8008be0:	d105      	bne.n	8008bee <__libc_init_array+0x2e>
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	00b3      	lsls	r3, r6, #2
 8008be6:	58eb      	ldr	r3, [r5, r3]
 8008be8:	4798      	blx	r3
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7ee      	b.n	8008bcc <__libc_init_array+0xc>
 8008bee:	00b3      	lsls	r3, r6, #2
 8008bf0:	58eb      	ldr	r3, [r5, r3]
 8008bf2:	4798      	blx	r3
 8008bf4:	3601      	adds	r6, #1
 8008bf6:	e7f2      	b.n	8008bde <__libc_init_array+0x1e>
 8008bf8:	0800bcd0 	.word	0x0800bcd0
 8008bfc:	0800bcd0 	.word	0x0800bcd0
 8008c00:	0800bcd4 	.word	0x0800bcd4
 8008c04:	0800bcd0 	.word	0x0800bcd0

08008c08 <__retarget_lock_init_recursive>:
 8008c08:	4770      	bx	lr

08008c0a <__retarget_lock_acquire_recursive>:
 8008c0a:	4770      	bx	lr

08008c0c <__retarget_lock_release_recursive>:
 8008c0c:	4770      	bx	lr

08008c0e <memchr>:
 8008c0e:	b2c9      	uxtb	r1, r1
 8008c10:	1882      	adds	r2, r0, r2
 8008c12:	4290      	cmp	r0, r2
 8008c14:	d101      	bne.n	8008c1a <memchr+0xc>
 8008c16:	2000      	movs	r0, #0
 8008c18:	4770      	bx	lr
 8008c1a:	7803      	ldrb	r3, [r0, #0]
 8008c1c:	428b      	cmp	r3, r1
 8008c1e:	d0fb      	beq.n	8008c18 <memchr+0xa>
 8008c20:	3001      	adds	r0, #1
 8008c22:	e7f6      	b.n	8008c12 <memchr+0x4>

08008c24 <memcpy>:
 8008c24:	2300      	movs	r3, #0
 8008c26:	b510      	push	{r4, lr}
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d100      	bne.n	8008c2e <memcpy+0xa>
 8008c2c:	bd10      	pop	{r4, pc}
 8008c2e:	5ccc      	ldrb	r4, [r1, r3]
 8008c30:	54c4      	strb	r4, [r0, r3]
 8008c32:	3301      	adds	r3, #1
 8008c34:	e7f8      	b.n	8008c28 <memcpy+0x4>

08008c36 <quorem>:
 8008c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c38:	6903      	ldr	r3, [r0, #16]
 8008c3a:	690c      	ldr	r4, [r1, #16]
 8008c3c:	b089      	sub	sp, #36	@ 0x24
 8008c3e:	9003      	str	r0, [sp, #12]
 8008c40:	9106      	str	r1, [sp, #24]
 8008c42:	2000      	movs	r0, #0
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	db63      	blt.n	8008d10 <quorem+0xda>
 8008c48:	000b      	movs	r3, r1
 8008c4a:	3c01      	subs	r4, #1
 8008c4c:	3314      	adds	r3, #20
 8008c4e:	00a5      	lsls	r5, r4, #2
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	195b      	adds	r3, r3, r5
 8008c54:	9305      	str	r3, [sp, #20]
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	3314      	adds	r3, #20
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	195d      	adds	r5, r3, r5
 8008c5e:	9b05      	ldr	r3, [sp, #20]
 8008c60:	682f      	ldr	r7, [r5, #0]
 8008c62:	681e      	ldr	r6, [r3, #0]
 8008c64:	0038      	movs	r0, r7
 8008c66:	3601      	adds	r6, #1
 8008c68:	0031      	movs	r1, r6
 8008c6a:	f7f7 fa65 	bl	8000138 <__udivsi3>
 8008c6e:	9002      	str	r0, [sp, #8]
 8008c70:	42b7      	cmp	r7, r6
 8008c72:	d327      	bcc.n	8008cc4 <quorem+0x8e>
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	2700      	movs	r7, #0
 8008c78:	469c      	mov	ip, r3
 8008c7a:	9e01      	ldr	r6, [sp, #4]
 8008c7c:	9707      	str	r7, [sp, #28]
 8008c7e:	4662      	mov	r2, ip
 8008c80:	ca08      	ldmia	r2!, {r3}
 8008c82:	6830      	ldr	r0, [r6, #0]
 8008c84:	4694      	mov	ip, r2
 8008c86:	9a02      	ldr	r2, [sp, #8]
 8008c88:	b299      	uxth	r1, r3
 8008c8a:	4351      	muls	r1, r2
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	4353      	muls	r3, r2
 8008c90:	19c9      	adds	r1, r1, r7
 8008c92:	0c0a      	lsrs	r2, r1, #16
 8008c94:	189b      	adds	r3, r3, r2
 8008c96:	b289      	uxth	r1, r1
 8008c98:	b282      	uxth	r2, r0
 8008c9a:	1a52      	subs	r2, r2, r1
 8008c9c:	9907      	ldr	r1, [sp, #28]
 8008c9e:	0c1f      	lsrs	r7, r3, #16
 8008ca0:	1852      	adds	r2, r2, r1
 8008ca2:	0c00      	lsrs	r0, r0, #16
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	1411      	asrs	r1, r2, #16
 8008ca8:	1ac3      	subs	r3, r0, r3
 8008caa:	185b      	adds	r3, r3, r1
 8008cac:	1419      	asrs	r1, r3, #16
 8008cae:	b292      	uxth	r2, r2
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	9b05      	ldr	r3, [sp, #20]
 8008cb6:	9107      	str	r1, [sp, #28]
 8008cb8:	c604      	stmia	r6!, {r2}
 8008cba:	4563      	cmp	r3, ip
 8008cbc:	d2df      	bcs.n	8008c7e <quorem+0x48>
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d02b      	beq.n	8008d1c <quorem+0xe6>
 8008cc4:	9906      	ldr	r1, [sp, #24]
 8008cc6:	9803      	ldr	r0, [sp, #12]
 8008cc8:	f001 f9b6 	bl	800a038 <__mcmp>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	db1e      	blt.n	8008d0e <quorem+0xd8>
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	9d01      	ldr	r5, [sp, #4]
 8008cd4:	9904      	ldr	r1, [sp, #16]
 8008cd6:	c901      	ldmia	r1!, {r0}
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b287      	uxth	r7, r0
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	1bd2      	subs	r2, r2, r7
 8008ce0:	1992      	adds	r2, r2, r6
 8008ce2:	0c00      	lsrs	r0, r0, #16
 8008ce4:	0c1b      	lsrs	r3, r3, #16
 8008ce6:	1a1b      	subs	r3, r3, r0
 8008ce8:	1410      	asrs	r0, r2, #16
 8008cea:	181b      	adds	r3, r3, r0
 8008cec:	141e      	asrs	r6, r3, #16
 8008cee:	b292      	uxth	r2, r2
 8008cf0:	041b      	lsls	r3, r3, #16
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	9b05      	ldr	r3, [sp, #20]
 8008cf6:	c504      	stmia	r5!, {r2}
 8008cf8:	428b      	cmp	r3, r1
 8008cfa:	d2ec      	bcs.n	8008cd6 <quorem+0xa0>
 8008cfc:	9a01      	ldr	r2, [sp, #4]
 8008cfe:	00a3      	lsls	r3, r4, #2
 8008d00:	18d3      	adds	r3, r2, r3
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	d014      	beq.n	8008d32 <quorem+0xfc>
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	9302      	str	r3, [sp, #8]
 8008d0e:	9802      	ldr	r0, [sp, #8]
 8008d10:	b009      	add	sp, #36	@ 0x24
 8008d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <quorem+0xee>
 8008d1a:	3c01      	subs	r4, #1
 8008d1c:	9b01      	ldr	r3, [sp, #4]
 8008d1e:	3d04      	subs	r5, #4
 8008d20:	42ab      	cmp	r3, r5
 8008d22:	d3f7      	bcc.n	8008d14 <quorem+0xde>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	611c      	str	r4, [r3, #16]
 8008d28:	e7cc      	b.n	8008cc4 <quorem+0x8e>
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	2a00      	cmp	r2, #0
 8008d2e:	d104      	bne.n	8008d3a <quorem+0x104>
 8008d30:	3c01      	subs	r4, #1
 8008d32:	9a01      	ldr	r2, [sp, #4]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d3f7      	bcc.n	8008d2a <quorem+0xf4>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	611c      	str	r4, [r3, #16]
 8008d3e:	e7e3      	b.n	8008d08 <quorem+0xd2>

08008d40 <_dtoa_r>:
 8008d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d42:	0014      	movs	r4, r2
 8008d44:	001d      	movs	r5, r3
 8008d46:	69c6      	ldr	r6, [r0, #28]
 8008d48:	b09d      	sub	sp, #116	@ 0x74
 8008d4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d4c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008d4e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008d50:	9003      	str	r0, [sp, #12]
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	d10f      	bne.n	8008d76 <_dtoa_r+0x36>
 8008d56:	2010      	movs	r0, #16
 8008d58:	f000 fe2c 	bl	80099b4 <malloc>
 8008d5c:	9b03      	ldr	r3, [sp, #12]
 8008d5e:	1e02      	subs	r2, r0, #0
 8008d60:	61d8      	str	r0, [r3, #28]
 8008d62:	d104      	bne.n	8008d6e <_dtoa_r+0x2e>
 8008d64:	21ef      	movs	r1, #239	@ 0xef
 8008d66:	4bc7      	ldr	r3, [pc, #796]	@ (8009084 <_dtoa_r+0x344>)
 8008d68:	48c7      	ldr	r0, [pc, #796]	@ (8009088 <_dtoa_r+0x348>)
 8008d6a:	f001 fc9d 	bl	800a6a8 <__assert_func>
 8008d6e:	6046      	str	r6, [r0, #4]
 8008d70:	6086      	str	r6, [r0, #8]
 8008d72:	6006      	str	r6, [r0, #0]
 8008d74:	60c6      	str	r6, [r0, #12]
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	6819      	ldr	r1, [r3, #0]
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d00b      	beq.n	8008d98 <_dtoa_r+0x58>
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	2301      	movs	r3, #1
 8008d84:	4093      	lsls	r3, r2
 8008d86:	604a      	str	r2, [r1, #4]
 8008d88:	608b      	str	r3, [r1, #8]
 8008d8a:	9803      	ldr	r0, [sp, #12]
 8008d8c:	f000 ff12 	bl	8009bb4 <_Bfree>
 8008d90:	2200      	movs	r2, #0
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	da1e      	bge.n	8008dda <_dtoa_r+0x9a>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	006b      	lsls	r3, r5, #1
 8008da2:	085b      	lsrs	r3, r3, #1
 8008da4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008da6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008da8:	4bb8      	ldr	r3, [pc, #736]	@ (800908c <_dtoa_r+0x34c>)
 8008daa:	4ab8      	ldr	r2, [pc, #736]	@ (800908c <_dtoa_r+0x34c>)
 8008dac:	403b      	ands	r3, r7
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d116      	bne.n	8008de0 <_dtoa_r+0xa0>
 8008db2:	4bb7      	ldr	r3, [pc, #732]	@ (8009090 <_dtoa_r+0x350>)
 8008db4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	033b      	lsls	r3, r7, #12
 8008dba:	0b1b      	lsrs	r3, r3, #12
 8008dbc:	4323      	orrs	r3, r4
 8008dbe:	d101      	bne.n	8008dc4 <_dtoa_r+0x84>
 8008dc0:	f000 fd80 	bl	80098c4 <_dtoa_r+0xb84>
 8008dc4:	4bb3      	ldr	r3, [pc, #716]	@ (8009094 <_dtoa_r+0x354>)
 8008dc6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008dc8:	9308      	str	r3, [sp, #32]
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	d002      	beq.n	8008dd4 <_dtoa_r+0x94>
 8008dce:	4bb2      	ldr	r3, [pc, #712]	@ (8009098 <_dtoa_r+0x358>)
 8008dd0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	9808      	ldr	r0, [sp, #32]
 8008dd6:	b01d      	add	sp, #116	@ 0x74
 8008dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dda:	2300      	movs	r3, #0
 8008ddc:	603b      	str	r3, [r7, #0]
 8008dde:	e7e2      	b.n	8008da6 <_dtoa_r+0x66>
 8008de0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008de2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de4:	9212      	str	r2, [sp, #72]	@ 0x48
 8008de6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008de8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008dea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008dec:	2200      	movs	r2, #0
 8008dee:	2300      	movs	r3, #0
 8008df0:	f7f7 fb28 	bl	8000444 <__aeabi_dcmpeq>
 8008df4:	1e06      	subs	r6, r0, #0
 8008df6:	d00b      	beq.n	8008e10 <_dtoa_r+0xd0>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <_dtoa_r+0xca>
 8008e04:	4ba5      	ldr	r3, [pc, #660]	@ (800909c <_dtoa_r+0x35c>)
 8008e06:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	4ba5      	ldr	r3, [pc, #660]	@ (80090a0 <_dtoa_r+0x360>)
 8008e0c:	9308      	str	r3, [sp, #32]
 8008e0e:	e7e1      	b.n	8008dd4 <_dtoa_r+0x94>
 8008e10:	ab1a      	add	r3, sp, #104	@ 0x68
 8008e12:	9301      	str	r3, [sp, #4]
 8008e14:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	9803      	ldr	r0, [sp, #12]
 8008e1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e1e:	f001 f9c1 	bl	800a1a4 <__d2b>
 8008e22:	007a      	lsls	r2, r7, #1
 8008e24:	9005      	str	r0, [sp, #20]
 8008e26:	0d52      	lsrs	r2, r2, #21
 8008e28:	d100      	bne.n	8008e2c <_dtoa_r+0xec>
 8008e2a:	e07b      	b.n	8008f24 <_dtoa_r+0x1e4>
 8008e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e2e:	9618      	str	r6, [sp, #96]	@ 0x60
 8008e30:	0319      	lsls	r1, r3, #12
 8008e32:	4b9c      	ldr	r3, [pc, #624]	@ (80090a4 <_dtoa_r+0x364>)
 8008e34:	0b09      	lsrs	r1, r1, #12
 8008e36:	430b      	orrs	r3, r1
 8008e38:	499b      	ldr	r1, [pc, #620]	@ (80090a8 <_dtoa_r+0x368>)
 8008e3a:	1857      	adds	r7, r2, r1
 8008e3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008e3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008e40:	0019      	movs	r1, r3
 8008e42:	2200      	movs	r2, #0
 8008e44:	4b99      	ldr	r3, [pc, #612]	@ (80090ac <_dtoa_r+0x36c>)
 8008e46:	f7f9 fbab 	bl	80025a0 <__aeabi_dsub>
 8008e4a:	4a99      	ldr	r2, [pc, #612]	@ (80090b0 <_dtoa_r+0x370>)
 8008e4c:	4b99      	ldr	r3, [pc, #612]	@ (80090b4 <_dtoa_r+0x374>)
 8008e4e:	f7f9 f8c1 	bl	8001fd4 <__aeabi_dmul>
 8008e52:	4a99      	ldr	r2, [pc, #612]	@ (80090b8 <_dtoa_r+0x378>)
 8008e54:	4b99      	ldr	r3, [pc, #612]	@ (80090bc <_dtoa_r+0x37c>)
 8008e56:	f7f8 f8bd 	bl	8000fd4 <__aeabi_dadd>
 8008e5a:	0004      	movs	r4, r0
 8008e5c:	0038      	movs	r0, r7
 8008e5e:	000d      	movs	r5, r1
 8008e60:	f7fa f806 	bl	8002e70 <__aeabi_i2d>
 8008e64:	4a96      	ldr	r2, [pc, #600]	@ (80090c0 <_dtoa_r+0x380>)
 8008e66:	4b97      	ldr	r3, [pc, #604]	@ (80090c4 <_dtoa_r+0x384>)
 8008e68:	f7f9 f8b4 	bl	8001fd4 <__aeabi_dmul>
 8008e6c:	0002      	movs	r2, r0
 8008e6e:	000b      	movs	r3, r1
 8008e70:	0020      	movs	r0, r4
 8008e72:	0029      	movs	r1, r5
 8008e74:	f7f8 f8ae 	bl	8000fd4 <__aeabi_dadd>
 8008e78:	0004      	movs	r4, r0
 8008e7a:	000d      	movs	r5, r1
 8008e7c:	f7f9 ffbc 	bl	8002df8 <__aeabi_d2iz>
 8008e80:	2200      	movs	r2, #0
 8008e82:	9004      	str	r0, [sp, #16]
 8008e84:	2300      	movs	r3, #0
 8008e86:	0020      	movs	r0, r4
 8008e88:	0029      	movs	r1, r5
 8008e8a:	f7f7 fae1 	bl	8000450 <__aeabi_dcmplt>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d00b      	beq.n	8008eaa <_dtoa_r+0x16a>
 8008e92:	9804      	ldr	r0, [sp, #16]
 8008e94:	f7f9 ffec 	bl	8002e70 <__aeabi_i2d>
 8008e98:	002b      	movs	r3, r5
 8008e9a:	0022      	movs	r2, r4
 8008e9c:	f7f7 fad2 	bl	8000444 <__aeabi_dcmpeq>
 8008ea0:	4243      	negs	r3, r0
 8008ea2:	4158      	adcs	r0, r3
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	1a1b      	subs	r3, r3, r0
 8008ea8:	9304      	str	r3, [sp, #16]
 8008eaa:	2301      	movs	r3, #1
 8008eac:	9315      	str	r3, [sp, #84]	@ 0x54
 8008eae:	9b04      	ldr	r3, [sp, #16]
 8008eb0:	2b16      	cmp	r3, #22
 8008eb2:	d810      	bhi.n	8008ed6 <_dtoa_r+0x196>
 8008eb4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008eb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008eb8:	9a04      	ldr	r2, [sp, #16]
 8008eba:	4b83      	ldr	r3, [pc, #524]	@ (80090c8 <_dtoa_r+0x388>)
 8008ebc:	00d2      	lsls	r2, r2, #3
 8008ebe:	189b      	adds	r3, r3, r2
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f7f7 fac4 	bl	8000450 <__aeabi_dcmplt>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d047      	beq.n	8008f5c <_dtoa_r+0x21c>
 8008ecc:	9b04      	ldr	r3, [sp, #16]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008eda:	9206      	str	r2, [sp, #24]
 8008edc:	1bdb      	subs	r3, r3, r7
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	d53e      	bpl.n	8008f60 <_dtoa_r+0x220>
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	9306      	str	r3, [sp, #24]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	930d      	str	r3, [sp, #52]	@ 0x34
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	db38      	blt.n	8008f64 <_dtoa_r+0x224>
 8008ef2:	9a04      	ldr	r2, [sp, #16]
 8008ef4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ef6:	4694      	mov	ip, r2
 8008ef8:	4463      	add	r3, ip
 8008efa:	930d      	str	r3, [sp, #52]	@ 0x34
 8008efc:	2300      	movs	r3, #0
 8008efe:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008f04:	2401      	movs	r4, #1
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d862      	bhi.n	8008fd0 <_dtoa_r+0x290>
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	dd02      	ble.n	8008f14 <_dtoa_r+0x1d4>
 8008f0e:	2400      	movs	r4, #0
 8008f10:	3b04      	subs	r3, #4
 8008f12:	9322      	str	r3, [sp, #136]	@ 0x88
 8008f14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008f16:	1e98      	subs	r0, r3, #2
 8008f18:	2803      	cmp	r0, #3
 8008f1a:	d863      	bhi.n	8008fe4 <_dtoa_r+0x2a4>
 8008f1c:	f7f7 f8f8 	bl	8000110 <__gnu_thumb1_case_uqi>
 8008f20:	2b385654 	.word	0x2b385654
 8008f24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008f26:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008f28:	18f6      	adds	r6, r6, r3
 8008f2a:	4b68      	ldr	r3, [pc, #416]	@ (80090cc <_dtoa_r+0x38c>)
 8008f2c:	18f2      	adds	r2, r6, r3
 8008f2e:	2a20      	cmp	r2, #32
 8008f30:	dd0f      	ble.n	8008f52 <_dtoa_r+0x212>
 8008f32:	2340      	movs	r3, #64	@ 0x40
 8008f34:	1a9b      	subs	r3, r3, r2
 8008f36:	409f      	lsls	r7, r3
 8008f38:	4b65      	ldr	r3, [pc, #404]	@ (80090d0 <_dtoa_r+0x390>)
 8008f3a:	0038      	movs	r0, r7
 8008f3c:	18f3      	adds	r3, r6, r3
 8008f3e:	40dc      	lsrs	r4, r3
 8008f40:	4320      	orrs	r0, r4
 8008f42:	f7f9 ffc3 	bl	8002ecc <__aeabi_ui2d>
 8008f46:	2201      	movs	r2, #1
 8008f48:	4b62      	ldr	r3, [pc, #392]	@ (80090d4 <_dtoa_r+0x394>)
 8008f4a:	1e77      	subs	r7, r6, #1
 8008f4c:	18cb      	adds	r3, r1, r3
 8008f4e:	9218      	str	r2, [sp, #96]	@ 0x60
 8008f50:	e776      	b.n	8008e40 <_dtoa_r+0x100>
 8008f52:	2320      	movs	r3, #32
 8008f54:	0020      	movs	r0, r4
 8008f56:	1a9b      	subs	r3, r3, r2
 8008f58:	4098      	lsls	r0, r3
 8008f5a:	e7f2      	b.n	8008f42 <_dtoa_r+0x202>
 8008f5c:	9015      	str	r0, [sp, #84]	@ 0x54
 8008f5e:	e7ba      	b.n	8008ed6 <_dtoa_r+0x196>
 8008f60:	920d      	str	r2, [sp, #52]	@ 0x34
 8008f62:	e7c3      	b.n	8008eec <_dtoa_r+0x1ac>
 8008f64:	9b06      	ldr	r3, [sp, #24]
 8008f66:	9a04      	ldr	r2, [sp, #16]
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	9306      	str	r3, [sp, #24]
 8008f6c:	4253      	negs	r3, r2
 8008f6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f70:	2300      	movs	r3, #0
 8008f72:	9314      	str	r3, [sp, #80]	@ 0x50
 8008f74:	e7c5      	b.n	8008f02 <_dtoa_r+0x1c2>
 8008f76:	2301      	movs	r3, #1
 8008f78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f7c:	4694      	mov	ip, r2
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	4463      	add	r3, ip
 8008f82:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f84:	3301      	adds	r3, #1
 8008f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dc08      	bgt.n	8008f9e <_dtoa_r+0x25e>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e006      	b.n	8008f9e <_dtoa_r+0x25e>
 8008f90:	2301      	movs	r3, #1
 8008f92:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd28      	ble.n	8008fec <_dtoa_r+0x2ac>
 8008f9a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f9e:	9a03      	ldr	r2, [sp, #12]
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	69d0      	ldr	r0, [r2, #28]
 8008fa4:	2204      	movs	r2, #4
 8008fa6:	0015      	movs	r5, r2
 8008fa8:	3514      	adds	r5, #20
 8008faa:	429d      	cmp	r5, r3
 8008fac:	d923      	bls.n	8008ff6 <_dtoa_r+0x2b6>
 8008fae:	6041      	str	r1, [r0, #4]
 8008fb0:	9803      	ldr	r0, [sp, #12]
 8008fb2:	f000 fdbb 	bl	8009b2c <_Balloc>
 8008fb6:	9008      	str	r0, [sp, #32]
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d11f      	bne.n	8008ffc <_dtoa_r+0x2bc>
 8008fbc:	21b0      	movs	r1, #176	@ 0xb0
 8008fbe:	4b46      	ldr	r3, [pc, #280]	@ (80090d8 <_dtoa_r+0x398>)
 8008fc0:	4831      	ldr	r0, [pc, #196]	@ (8009088 <_dtoa_r+0x348>)
 8008fc2:	9a08      	ldr	r2, [sp, #32]
 8008fc4:	31ff      	adds	r1, #255	@ 0xff
 8008fc6:	e6d0      	b.n	8008d6a <_dtoa_r+0x2a>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e7e2      	b.n	8008f92 <_dtoa_r+0x252>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e7d3      	b.n	8008f78 <_dtoa_r+0x238>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9410      	str	r4, [sp, #64]	@ 0x40
 8008fd4:	9322      	str	r3, [sp, #136]	@ 0x88
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	2200      	movs	r2, #0
 8008fda:	930e      	str	r3, [sp, #56]	@ 0x38
 8008fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fde:	3313      	adds	r3, #19
 8008fe0:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008fe2:	e7dc      	b.n	8008f9e <_dtoa_r+0x25e>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fe8:	3b02      	subs	r3, #2
 8008fea:	e7f5      	b.n	8008fd8 <_dtoa_r+0x298>
 8008fec:	2301      	movs	r3, #1
 8008fee:	001a      	movs	r2, r3
 8008ff0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff4:	e7f4      	b.n	8008fe0 <_dtoa_r+0x2a0>
 8008ff6:	3101      	adds	r1, #1
 8008ff8:	0052      	lsls	r2, r2, #1
 8008ffa:	e7d4      	b.n	8008fa6 <_dtoa_r+0x266>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	9a08      	ldr	r2, [sp, #32]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009006:	2b0e      	cmp	r3, #14
 8009008:	d900      	bls.n	800900c <_dtoa_r+0x2cc>
 800900a:	e0d6      	b.n	80091ba <_dtoa_r+0x47a>
 800900c:	2c00      	cmp	r4, #0
 800900e:	d100      	bne.n	8009012 <_dtoa_r+0x2d2>
 8009010:	e0d3      	b.n	80091ba <_dtoa_r+0x47a>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd63      	ble.n	80090e0 <_dtoa_r+0x3a0>
 8009018:	210f      	movs	r1, #15
 800901a:	9a04      	ldr	r2, [sp, #16]
 800901c:	4b2a      	ldr	r3, [pc, #168]	@ (80090c8 <_dtoa_r+0x388>)
 800901e:	400a      	ands	r2, r1
 8009020:	00d2      	lsls	r2, r2, #3
 8009022:	189b      	adds	r3, r3, r2
 8009024:	681e      	ldr	r6, [r3, #0]
 8009026:	685f      	ldr	r7, [r3, #4]
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	2402      	movs	r4, #2
 800902c:	111d      	asrs	r5, r3, #4
 800902e:	05db      	lsls	r3, r3, #23
 8009030:	d50a      	bpl.n	8009048 <_dtoa_r+0x308>
 8009032:	4b2a      	ldr	r3, [pc, #168]	@ (80090dc <_dtoa_r+0x39c>)
 8009034:	400d      	ands	r5, r1
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800903c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800903e:	f7f8 fb8f 	bl	8001760 <__aeabi_ddiv>
 8009042:	900a      	str	r0, [sp, #40]	@ 0x28
 8009044:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009046:	3401      	adds	r4, #1
 8009048:	4b24      	ldr	r3, [pc, #144]	@ (80090dc <_dtoa_r+0x39c>)
 800904a:	930c      	str	r3, [sp, #48]	@ 0x30
 800904c:	2d00      	cmp	r5, #0
 800904e:	d108      	bne.n	8009062 <_dtoa_r+0x322>
 8009050:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009052:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009054:	0032      	movs	r2, r6
 8009056:	003b      	movs	r3, r7
 8009058:	f7f8 fb82 	bl	8001760 <__aeabi_ddiv>
 800905c:	900a      	str	r0, [sp, #40]	@ 0x28
 800905e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009060:	e059      	b.n	8009116 <_dtoa_r+0x3d6>
 8009062:	2301      	movs	r3, #1
 8009064:	421d      	tst	r5, r3
 8009066:	d009      	beq.n	800907c <_dtoa_r+0x33c>
 8009068:	18e4      	adds	r4, r4, r3
 800906a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800906c:	0030      	movs	r0, r6
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	0039      	movs	r1, r7
 8009074:	f7f8 ffae 	bl	8001fd4 <__aeabi_dmul>
 8009078:	0006      	movs	r6, r0
 800907a:	000f      	movs	r7, r1
 800907c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800907e:	106d      	asrs	r5, r5, #1
 8009080:	3308      	adds	r3, #8
 8009082:	e7e2      	b.n	800904a <_dtoa_r+0x30a>
 8009084:	0800b911 	.word	0x0800b911
 8009088:	0800b928 	.word	0x0800b928
 800908c:	7ff00000 	.word	0x7ff00000
 8009090:	0000270f 	.word	0x0000270f
 8009094:	0800b90d 	.word	0x0800b90d
 8009098:	0800b910 	.word	0x0800b910
 800909c:	0800b8e1 	.word	0x0800b8e1
 80090a0:	0800b8e0 	.word	0x0800b8e0
 80090a4:	3ff00000 	.word	0x3ff00000
 80090a8:	fffffc01 	.word	0xfffffc01
 80090ac:	3ff80000 	.word	0x3ff80000
 80090b0:	636f4361 	.word	0x636f4361
 80090b4:	3fd287a7 	.word	0x3fd287a7
 80090b8:	8b60c8b3 	.word	0x8b60c8b3
 80090bc:	3fc68a28 	.word	0x3fc68a28
 80090c0:	509f79fb 	.word	0x509f79fb
 80090c4:	3fd34413 	.word	0x3fd34413
 80090c8:	0800ba78 	.word	0x0800ba78
 80090cc:	00000432 	.word	0x00000432
 80090d0:	00000412 	.word	0x00000412
 80090d4:	fe100000 	.word	0xfe100000
 80090d8:	0800b980 	.word	0x0800b980
 80090dc:	0800ba50 	.word	0x0800ba50
 80090e0:	9b04      	ldr	r3, [sp, #16]
 80090e2:	2402      	movs	r4, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d016      	beq.n	8009116 <_dtoa_r+0x3d6>
 80090e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80090ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80090ec:	220f      	movs	r2, #15
 80090ee:	425d      	negs	r5, r3
 80090f0:	402a      	ands	r2, r5
 80090f2:	4bd5      	ldr	r3, [pc, #852]	@ (8009448 <_dtoa_r+0x708>)
 80090f4:	00d2      	lsls	r2, r2, #3
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f7f8 ff6a 	bl	8001fd4 <__aeabi_dmul>
 8009100:	2701      	movs	r7, #1
 8009102:	2300      	movs	r3, #0
 8009104:	900a      	str	r0, [sp, #40]	@ 0x28
 8009106:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009108:	4ed0      	ldr	r6, [pc, #832]	@ (800944c <_dtoa_r+0x70c>)
 800910a:	112d      	asrs	r5, r5, #4
 800910c:	2d00      	cmp	r5, #0
 800910e:	d000      	beq.n	8009112 <_dtoa_r+0x3d2>
 8009110:	e095      	b.n	800923e <_dtoa_r+0x4fe>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1a2      	bne.n	800905c <_dtoa_r+0x31c>
 8009116:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009118:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800911a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800911c:	2b00      	cmp	r3, #0
 800911e:	d100      	bne.n	8009122 <_dtoa_r+0x3e2>
 8009120:	e098      	b.n	8009254 <_dtoa_r+0x514>
 8009122:	2200      	movs	r2, #0
 8009124:	0030      	movs	r0, r6
 8009126:	0039      	movs	r1, r7
 8009128:	4bc9      	ldr	r3, [pc, #804]	@ (8009450 <_dtoa_r+0x710>)
 800912a:	f7f7 f991 	bl	8000450 <__aeabi_dcmplt>
 800912e:	2800      	cmp	r0, #0
 8009130:	d100      	bne.n	8009134 <_dtoa_r+0x3f4>
 8009132:	e08f      	b.n	8009254 <_dtoa_r+0x514>
 8009134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009136:	2b00      	cmp	r3, #0
 8009138:	d100      	bne.n	800913c <_dtoa_r+0x3fc>
 800913a:	e08b      	b.n	8009254 <_dtoa_r+0x514>
 800913c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd37      	ble.n	80091b2 <_dtoa_r+0x472>
 8009142:	9b04      	ldr	r3, [sp, #16]
 8009144:	2200      	movs	r2, #0
 8009146:	3b01      	subs	r3, #1
 8009148:	930c      	str	r3, [sp, #48]	@ 0x30
 800914a:	0030      	movs	r0, r6
 800914c:	4bc1      	ldr	r3, [pc, #772]	@ (8009454 <_dtoa_r+0x714>)
 800914e:	0039      	movs	r1, r7
 8009150:	f7f8 ff40 	bl	8001fd4 <__aeabi_dmul>
 8009154:	900a      	str	r0, [sp, #40]	@ 0x28
 8009156:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800915a:	3401      	adds	r4, #1
 800915c:	0020      	movs	r0, r4
 800915e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009160:	f7f9 fe86 	bl	8002e70 <__aeabi_i2d>
 8009164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009168:	f7f8 ff34 	bl	8001fd4 <__aeabi_dmul>
 800916c:	4bba      	ldr	r3, [pc, #744]	@ (8009458 <_dtoa_r+0x718>)
 800916e:	2200      	movs	r2, #0
 8009170:	f7f7 ff30 	bl	8000fd4 <__aeabi_dadd>
 8009174:	4bb9      	ldr	r3, [pc, #740]	@ (800945c <_dtoa_r+0x71c>)
 8009176:	0006      	movs	r6, r0
 8009178:	18cf      	adds	r7, r1, r3
 800917a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800917c:	2b00      	cmp	r3, #0
 800917e:	d16d      	bne.n	800925c <_dtoa_r+0x51c>
 8009180:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009182:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009184:	2200      	movs	r2, #0
 8009186:	4bb6      	ldr	r3, [pc, #728]	@ (8009460 <_dtoa_r+0x720>)
 8009188:	f7f9 fa0a 	bl	80025a0 <__aeabi_dsub>
 800918c:	0032      	movs	r2, r6
 800918e:	003b      	movs	r3, r7
 8009190:	0004      	movs	r4, r0
 8009192:	000d      	movs	r5, r1
 8009194:	f7f7 f970 	bl	8000478 <__aeabi_dcmpgt>
 8009198:	2800      	cmp	r0, #0
 800919a:	d000      	beq.n	800919e <_dtoa_r+0x45e>
 800919c:	e2b6      	b.n	800970c <_dtoa_r+0x9cc>
 800919e:	2180      	movs	r1, #128	@ 0x80
 80091a0:	0609      	lsls	r1, r1, #24
 80091a2:	187b      	adds	r3, r7, r1
 80091a4:	0032      	movs	r2, r6
 80091a6:	0020      	movs	r0, r4
 80091a8:	0029      	movs	r1, r5
 80091aa:	f7f7 f951 	bl	8000450 <__aeabi_dcmplt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d128      	bne.n	8009204 <_dtoa_r+0x4c4>
 80091b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091b4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80091b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091b8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091ba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	da00      	bge.n	80091c2 <_dtoa_r+0x482>
 80091c0:	e174      	b.n	80094ac <_dtoa_r+0x76c>
 80091c2:	9a04      	ldr	r2, [sp, #16]
 80091c4:	2a0e      	cmp	r2, #14
 80091c6:	dd00      	ble.n	80091ca <_dtoa_r+0x48a>
 80091c8:	e170      	b.n	80094ac <_dtoa_r+0x76c>
 80091ca:	4b9f      	ldr	r3, [pc, #636]	@ (8009448 <_dtoa_r+0x708>)
 80091cc:	00d2      	lsls	r2, r2, #3
 80091ce:	189b      	adds	r3, r3, r2
 80091d0:	685c      	ldr	r4, [r3, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	9306      	str	r3, [sp, #24]
 80091d6:	9407      	str	r4, [sp, #28]
 80091d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	db00      	blt.n	80091e0 <_dtoa_r+0x4a0>
 80091de:	e0e7      	b.n	80093b0 <_dtoa_r+0x670>
 80091e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd00      	ble.n	80091e8 <_dtoa_r+0x4a8>
 80091e6:	e0e3      	b.n	80093b0 <_dtoa_r+0x670>
 80091e8:	d10c      	bne.n	8009204 <_dtoa_r+0x4c4>
 80091ea:	9806      	ldr	r0, [sp, #24]
 80091ec:	9907      	ldr	r1, [sp, #28]
 80091ee:	2200      	movs	r2, #0
 80091f0:	4b9b      	ldr	r3, [pc, #620]	@ (8009460 <_dtoa_r+0x720>)
 80091f2:	f7f8 feef 	bl	8001fd4 <__aeabi_dmul>
 80091f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091fa:	f7f7 f947 	bl	800048c <__aeabi_dcmpge>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d100      	bne.n	8009204 <_dtoa_r+0x4c4>
 8009202:	e286      	b.n	8009712 <_dtoa_r+0x9d2>
 8009204:	2600      	movs	r6, #0
 8009206:	0037      	movs	r7, r6
 8009208:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800920a:	9c08      	ldr	r4, [sp, #32]
 800920c:	43db      	mvns	r3, r3
 800920e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009210:	9704      	str	r7, [sp, #16]
 8009212:	2700      	movs	r7, #0
 8009214:	0031      	movs	r1, r6
 8009216:	9803      	ldr	r0, [sp, #12]
 8009218:	f000 fccc 	bl	8009bb4 <_Bfree>
 800921c:	9b04      	ldr	r3, [sp, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d100      	bne.n	8009224 <_dtoa_r+0x4e4>
 8009222:	e0bb      	b.n	800939c <_dtoa_r+0x65c>
 8009224:	2f00      	cmp	r7, #0
 8009226:	d005      	beq.n	8009234 <_dtoa_r+0x4f4>
 8009228:	429f      	cmp	r7, r3
 800922a:	d003      	beq.n	8009234 <_dtoa_r+0x4f4>
 800922c:	0039      	movs	r1, r7
 800922e:	9803      	ldr	r0, [sp, #12]
 8009230:	f000 fcc0 	bl	8009bb4 <_Bfree>
 8009234:	9904      	ldr	r1, [sp, #16]
 8009236:	9803      	ldr	r0, [sp, #12]
 8009238:	f000 fcbc 	bl	8009bb4 <_Bfree>
 800923c:	e0ae      	b.n	800939c <_dtoa_r+0x65c>
 800923e:	423d      	tst	r5, r7
 8009240:	d005      	beq.n	800924e <_dtoa_r+0x50e>
 8009242:	6832      	ldr	r2, [r6, #0]
 8009244:	6873      	ldr	r3, [r6, #4]
 8009246:	f7f8 fec5 	bl	8001fd4 <__aeabi_dmul>
 800924a:	003b      	movs	r3, r7
 800924c:	3401      	adds	r4, #1
 800924e:	106d      	asrs	r5, r5, #1
 8009250:	3608      	adds	r6, #8
 8009252:	e75b      	b.n	800910c <_dtoa_r+0x3cc>
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	930c      	str	r3, [sp, #48]	@ 0x30
 8009258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925a:	e77f      	b.n	800915c <_dtoa_r+0x41c>
 800925c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800925e:	4b7a      	ldr	r3, [pc, #488]	@ (8009448 <_dtoa_r+0x708>)
 8009260:	3a01      	subs	r2, #1
 8009262:	00d2      	lsls	r2, r2, #3
 8009264:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009266:	189b      	adds	r3, r3, r2
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	2900      	cmp	r1, #0
 800926e:	d04c      	beq.n	800930a <_dtoa_r+0x5ca>
 8009270:	2000      	movs	r0, #0
 8009272:	497c      	ldr	r1, [pc, #496]	@ (8009464 <_dtoa_r+0x724>)
 8009274:	f7f8 fa74 	bl	8001760 <__aeabi_ddiv>
 8009278:	0032      	movs	r2, r6
 800927a:	003b      	movs	r3, r7
 800927c:	f7f9 f990 	bl	80025a0 <__aeabi_dsub>
 8009280:	9a08      	ldr	r2, [sp, #32]
 8009282:	0006      	movs	r6, r0
 8009284:	4694      	mov	ip, r2
 8009286:	000f      	movs	r7, r1
 8009288:	9b08      	ldr	r3, [sp, #32]
 800928a:	9316      	str	r3, [sp, #88]	@ 0x58
 800928c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800928e:	4463      	add	r3, ip
 8009290:	9311      	str	r3, [sp, #68]	@ 0x44
 8009292:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009294:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009296:	f7f9 fdaf 	bl	8002df8 <__aeabi_d2iz>
 800929a:	0005      	movs	r5, r0
 800929c:	f7f9 fde8 	bl	8002e70 <__aeabi_i2d>
 80092a0:	0002      	movs	r2, r0
 80092a2:	000b      	movs	r3, r1
 80092a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80092a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092a8:	f7f9 f97a 	bl	80025a0 <__aeabi_dsub>
 80092ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092ae:	3530      	adds	r5, #48	@ 0x30
 80092b0:	1c5c      	adds	r4, r3, #1
 80092b2:	701d      	strb	r5, [r3, #0]
 80092b4:	0032      	movs	r2, r6
 80092b6:	003b      	movs	r3, r7
 80092b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80092ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092bc:	f7f7 f8c8 	bl	8000450 <__aeabi_dcmplt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d16b      	bne.n	800939c <_dtoa_r+0x65c>
 80092c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c8:	2000      	movs	r0, #0
 80092ca:	4961      	ldr	r1, [pc, #388]	@ (8009450 <_dtoa_r+0x710>)
 80092cc:	f7f9 f968 	bl	80025a0 <__aeabi_dsub>
 80092d0:	0032      	movs	r2, r6
 80092d2:	003b      	movs	r3, r7
 80092d4:	f7f7 f8bc 	bl	8000450 <__aeabi_dcmplt>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d000      	beq.n	80092de <_dtoa_r+0x59e>
 80092dc:	e0c6      	b.n	800946c <_dtoa_r+0x72c>
 80092de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	d100      	bne.n	80092e6 <_dtoa_r+0x5a6>
 80092e4:	e765      	b.n	80091b2 <_dtoa_r+0x472>
 80092e6:	2200      	movs	r2, #0
 80092e8:	0030      	movs	r0, r6
 80092ea:	0039      	movs	r1, r7
 80092ec:	4b59      	ldr	r3, [pc, #356]	@ (8009454 <_dtoa_r+0x714>)
 80092ee:	f7f8 fe71 	bl	8001fd4 <__aeabi_dmul>
 80092f2:	2200      	movs	r2, #0
 80092f4:	0006      	movs	r6, r0
 80092f6:	000f      	movs	r7, r1
 80092f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80092fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092fc:	4b55      	ldr	r3, [pc, #340]	@ (8009454 <_dtoa_r+0x714>)
 80092fe:	f7f8 fe69 	bl	8001fd4 <__aeabi_dmul>
 8009302:	9416      	str	r4, [sp, #88]	@ 0x58
 8009304:	900a      	str	r0, [sp, #40]	@ 0x28
 8009306:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009308:	e7c3      	b.n	8009292 <_dtoa_r+0x552>
 800930a:	0030      	movs	r0, r6
 800930c:	0039      	movs	r1, r7
 800930e:	f7f8 fe61 	bl	8001fd4 <__aeabi_dmul>
 8009312:	9d08      	ldr	r5, [sp, #32]
 8009314:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009316:	002b      	movs	r3, r5
 8009318:	4694      	mov	ip, r2
 800931a:	9016      	str	r0, [sp, #88]	@ 0x58
 800931c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800931e:	4463      	add	r3, ip
 8009320:	9319      	str	r3, [sp, #100]	@ 0x64
 8009322:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009324:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009326:	f7f9 fd67 	bl	8002df8 <__aeabi_d2iz>
 800932a:	0004      	movs	r4, r0
 800932c:	f7f9 fda0 	bl	8002e70 <__aeabi_i2d>
 8009330:	000b      	movs	r3, r1
 8009332:	0002      	movs	r2, r0
 8009334:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009336:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009338:	f7f9 f932 	bl	80025a0 <__aeabi_dsub>
 800933c:	3430      	adds	r4, #48	@ 0x30
 800933e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009340:	702c      	strb	r4, [r5, #0]
 8009342:	3501      	adds	r5, #1
 8009344:	0006      	movs	r6, r0
 8009346:	000f      	movs	r7, r1
 8009348:	42ab      	cmp	r3, r5
 800934a:	d12a      	bne.n	80093a2 <_dtoa_r+0x662>
 800934c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800934e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009350:	9b08      	ldr	r3, [sp, #32]
 8009352:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009354:	469c      	mov	ip, r3
 8009356:	2200      	movs	r2, #0
 8009358:	4b42      	ldr	r3, [pc, #264]	@ (8009464 <_dtoa_r+0x724>)
 800935a:	4464      	add	r4, ip
 800935c:	f7f7 fe3a 	bl	8000fd4 <__aeabi_dadd>
 8009360:	0002      	movs	r2, r0
 8009362:	000b      	movs	r3, r1
 8009364:	0030      	movs	r0, r6
 8009366:	0039      	movs	r1, r7
 8009368:	f7f7 f886 	bl	8000478 <__aeabi_dcmpgt>
 800936c:	2800      	cmp	r0, #0
 800936e:	d000      	beq.n	8009372 <_dtoa_r+0x632>
 8009370:	e07c      	b.n	800946c <_dtoa_r+0x72c>
 8009372:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009374:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009376:	2000      	movs	r0, #0
 8009378:	493a      	ldr	r1, [pc, #232]	@ (8009464 <_dtoa_r+0x724>)
 800937a:	f7f9 f911 	bl	80025a0 <__aeabi_dsub>
 800937e:	0002      	movs	r2, r0
 8009380:	000b      	movs	r3, r1
 8009382:	0030      	movs	r0, r6
 8009384:	0039      	movs	r1, r7
 8009386:	f7f7 f863 	bl	8000450 <__aeabi_dcmplt>
 800938a:	2800      	cmp	r0, #0
 800938c:	d100      	bne.n	8009390 <_dtoa_r+0x650>
 800938e:	e710      	b.n	80091b2 <_dtoa_r+0x472>
 8009390:	0023      	movs	r3, r4
 8009392:	3c01      	subs	r4, #1
 8009394:	7822      	ldrb	r2, [r4, #0]
 8009396:	2a30      	cmp	r2, #48	@ 0x30
 8009398:	d0fa      	beq.n	8009390 <_dtoa_r+0x650>
 800939a:	001c      	movs	r4, r3
 800939c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800939e:	9304      	str	r3, [sp, #16]
 80093a0:	e042      	b.n	8009428 <_dtoa_r+0x6e8>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009454 <_dtoa_r+0x714>)
 80093a6:	f7f8 fe15 	bl	8001fd4 <__aeabi_dmul>
 80093aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80093ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80093ae:	e7b8      	b.n	8009322 <_dtoa_r+0x5e2>
 80093b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b2:	9d08      	ldr	r5, [sp, #32]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	195b      	adds	r3, r3, r5
 80093b8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80093ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80093bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80093be:	9a06      	ldr	r2, [sp, #24]
 80093c0:	9b07      	ldr	r3, [sp, #28]
 80093c2:	0030      	movs	r0, r6
 80093c4:	0039      	movs	r1, r7
 80093c6:	f7f8 f9cb 	bl	8001760 <__aeabi_ddiv>
 80093ca:	f7f9 fd15 	bl	8002df8 <__aeabi_d2iz>
 80093ce:	9009      	str	r0, [sp, #36]	@ 0x24
 80093d0:	f7f9 fd4e 	bl	8002e70 <__aeabi_i2d>
 80093d4:	9a06      	ldr	r2, [sp, #24]
 80093d6:	9b07      	ldr	r3, [sp, #28]
 80093d8:	f7f8 fdfc 	bl	8001fd4 <__aeabi_dmul>
 80093dc:	0002      	movs	r2, r0
 80093de:	000b      	movs	r3, r1
 80093e0:	0030      	movs	r0, r6
 80093e2:	0039      	movs	r1, r7
 80093e4:	f7f9 f8dc 	bl	80025a0 <__aeabi_dsub>
 80093e8:	002b      	movs	r3, r5
 80093ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093ec:	3501      	adds	r5, #1
 80093ee:	3230      	adds	r2, #48	@ 0x30
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093f4:	002c      	movs	r4, r5
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d14b      	bne.n	8009492 <_dtoa_r+0x752>
 80093fa:	0002      	movs	r2, r0
 80093fc:	000b      	movs	r3, r1
 80093fe:	f7f7 fde9 	bl	8000fd4 <__aeabi_dadd>
 8009402:	9a06      	ldr	r2, [sp, #24]
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	0006      	movs	r6, r0
 8009408:	000f      	movs	r7, r1
 800940a:	f7f7 f835 	bl	8000478 <__aeabi_dcmpgt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d12a      	bne.n	8009468 <_dtoa_r+0x728>
 8009412:	9a06      	ldr	r2, [sp, #24]
 8009414:	9b07      	ldr	r3, [sp, #28]
 8009416:	0030      	movs	r0, r6
 8009418:	0039      	movs	r1, r7
 800941a:	f7f7 f813 	bl	8000444 <__aeabi_dcmpeq>
 800941e:	2800      	cmp	r0, #0
 8009420:	d002      	beq.n	8009428 <_dtoa_r+0x6e8>
 8009422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009424:	07dd      	lsls	r5, r3, #31
 8009426:	d41f      	bmi.n	8009468 <_dtoa_r+0x728>
 8009428:	9905      	ldr	r1, [sp, #20]
 800942a:	9803      	ldr	r0, [sp, #12]
 800942c:	f000 fbc2 	bl	8009bb4 <_Bfree>
 8009430:	2300      	movs	r3, #0
 8009432:	7023      	strb	r3, [r4, #0]
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009438:	3301      	adds	r3, #1
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800943e:	2b00      	cmp	r3, #0
 8009440:	d100      	bne.n	8009444 <_dtoa_r+0x704>
 8009442:	e4c7      	b.n	8008dd4 <_dtoa_r+0x94>
 8009444:	601c      	str	r4, [r3, #0]
 8009446:	e4c5      	b.n	8008dd4 <_dtoa_r+0x94>
 8009448:	0800ba78 	.word	0x0800ba78
 800944c:	0800ba50 	.word	0x0800ba50
 8009450:	3ff00000 	.word	0x3ff00000
 8009454:	40240000 	.word	0x40240000
 8009458:	401c0000 	.word	0x401c0000
 800945c:	fcc00000 	.word	0xfcc00000
 8009460:	40140000 	.word	0x40140000
 8009464:	3fe00000 	.word	0x3fe00000
 8009468:	9b04      	ldr	r3, [sp, #16]
 800946a:	930c      	str	r3, [sp, #48]	@ 0x30
 800946c:	0023      	movs	r3, r4
 800946e:	001c      	movs	r4, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	781a      	ldrb	r2, [r3, #0]
 8009474:	2a39      	cmp	r2, #57	@ 0x39
 8009476:	d108      	bne.n	800948a <_dtoa_r+0x74a>
 8009478:	9a08      	ldr	r2, [sp, #32]
 800947a:	429a      	cmp	r2, r3
 800947c:	d1f7      	bne.n	800946e <_dtoa_r+0x72e>
 800947e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009480:	9908      	ldr	r1, [sp, #32]
 8009482:	3201      	adds	r2, #1
 8009484:	920c      	str	r2, [sp, #48]	@ 0x30
 8009486:	2230      	movs	r2, #48	@ 0x30
 8009488:	700a      	strb	r2, [r1, #0]
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	3201      	adds	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	e784      	b.n	800939c <_dtoa_r+0x65c>
 8009492:	2200      	movs	r2, #0
 8009494:	4bc6      	ldr	r3, [pc, #792]	@ (80097b0 <_dtoa_r+0xa70>)
 8009496:	f7f8 fd9d 	bl	8001fd4 <__aeabi_dmul>
 800949a:	2200      	movs	r2, #0
 800949c:	2300      	movs	r3, #0
 800949e:	0006      	movs	r6, r0
 80094a0:	000f      	movs	r7, r1
 80094a2:	f7f6 ffcf 	bl	8000444 <__aeabi_dcmpeq>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d089      	beq.n	80093be <_dtoa_r+0x67e>
 80094aa:	e7bd      	b.n	8009428 <_dtoa_r+0x6e8>
 80094ac:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80094ae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80094b0:	9c06      	ldr	r4, [sp, #24]
 80094b2:	2f00      	cmp	r7, #0
 80094b4:	d014      	beq.n	80094e0 <_dtoa_r+0x7a0>
 80094b6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094b8:	2a01      	cmp	r2, #1
 80094ba:	dd00      	ble.n	80094be <_dtoa_r+0x77e>
 80094bc:	e0e4      	b.n	8009688 <_dtoa_r+0x948>
 80094be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	d100      	bne.n	80094c6 <_dtoa_r+0x786>
 80094c4:	e0da      	b.n	800967c <_dtoa_r+0x93c>
 80094c6:	4abb      	ldr	r2, [pc, #748]	@ (80097b4 <_dtoa_r+0xa74>)
 80094c8:	189b      	adds	r3, r3, r2
 80094ca:	9a06      	ldr	r2, [sp, #24]
 80094cc:	2101      	movs	r1, #1
 80094ce:	18d2      	adds	r2, r2, r3
 80094d0:	9206      	str	r2, [sp, #24]
 80094d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094d4:	9803      	ldr	r0, [sp, #12]
 80094d6:	18d3      	adds	r3, r2, r3
 80094d8:	930d      	str	r3, [sp, #52]	@ 0x34
 80094da:	f000 fc23 	bl	8009d24 <__i2b>
 80094de:	0007      	movs	r7, r0
 80094e0:	2c00      	cmp	r4, #0
 80094e2:	d00e      	beq.n	8009502 <_dtoa_r+0x7c2>
 80094e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dd0b      	ble.n	8009502 <_dtoa_r+0x7c2>
 80094ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094ec:	0023      	movs	r3, r4
 80094ee:	4294      	cmp	r4, r2
 80094f0:	dd00      	ble.n	80094f4 <_dtoa_r+0x7b4>
 80094f2:	0013      	movs	r3, r2
 80094f4:	9a06      	ldr	r2, [sp, #24]
 80094f6:	1ae4      	subs	r4, r4, r3
 80094f8:	1ad2      	subs	r2, r2, r3
 80094fa:	9206      	str	r2, [sp, #24]
 80094fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	930d      	str	r3, [sp, #52]	@ 0x34
 8009502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d021      	beq.n	800954c <_dtoa_r+0x80c>
 8009508:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800950a:	2b00      	cmp	r3, #0
 800950c:	d100      	bne.n	8009510 <_dtoa_r+0x7d0>
 800950e:	e0d3      	b.n	80096b8 <_dtoa_r+0x978>
 8009510:	9e05      	ldr	r6, [sp, #20]
 8009512:	2d00      	cmp	r5, #0
 8009514:	d014      	beq.n	8009540 <_dtoa_r+0x800>
 8009516:	0039      	movs	r1, r7
 8009518:	002a      	movs	r2, r5
 800951a:	9803      	ldr	r0, [sp, #12]
 800951c:	f000 fcc4 	bl	8009ea8 <__pow5mult>
 8009520:	9a05      	ldr	r2, [sp, #20]
 8009522:	0001      	movs	r1, r0
 8009524:	0007      	movs	r7, r0
 8009526:	9803      	ldr	r0, [sp, #12]
 8009528:	f000 fc14 	bl	8009d54 <__multiply>
 800952c:	0006      	movs	r6, r0
 800952e:	9905      	ldr	r1, [sp, #20]
 8009530:	9803      	ldr	r0, [sp, #12]
 8009532:	f000 fb3f 	bl	8009bb4 <_Bfree>
 8009536:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009538:	9605      	str	r6, [sp, #20]
 800953a:	1b5b      	subs	r3, r3, r5
 800953c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800953e:	d005      	beq.n	800954c <_dtoa_r+0x80c>
 8009540:	0031      	movs	r1, r6
 8009542:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009544:	9803      	ldr	r0, [sp, #12]
 8009546:	f000 fcaf 	bl	8009ea8 <__pow5mult>
 800954a:	9005      	str	r0, [sp, #20]
 800954c:	2101      	movs	r1, #1
 800954e:	9803      	ldr	r0, [sp, #12]
 8009550:	f000 fbe8 	bl	8009d24 <__i2b>
 8009554:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009556:	0006      	movs	r6, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d100      	bne.n	800955e <_dtoa_r+0x81e>
 800955c:	e1bc      	b.n	80098d8 <_dtoa_r+0xb98>
 800955e:	001a      	movs	r2, r3
 8009560:	0001      	movs	r1, r0
 8009562:	9803      	ldr	r0, [sp, #12]
 8009564:	f000 fca0 	bl	8009ea8 <__pow5mult>
 8009568:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800956a:	0006      	movs	r6, r0
 800956c:	2500      	movs	r5, #0
 800956e:	2b01      	cmp	r3, #1
 8009570:	dc16      	bgt.n	80095a0 <_dtoa_r+0x860>
 8009572:	2500      	movs	r5, #0
 8009574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009576:	42ab      	cmp	r3, r5
 8009578:	d10e      	bne.n	8009598 <_dtoa_r+0x858>
 800957a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800957c:	031b      	lsls	r3, r3, #12
 800957e:	42ab      	cmp	r3, r5
 8009580:	d10a      	bne.n	8009598 <_dtoa_r+0x858>
 8009582:	4b8d      	ldr	r3, [pc, #564]	@ (80097b8 <_dtoa_r+0xa78>)
 8009584:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009586:	4213      	tst	r3, r2
 8009588:	d006      	beq.n	8009598 <_dtoa_r+0x858>
 800958a:	9b06      	ldr	r3, [sp, #24]
 800958c:	3501      	adds	r5, #1
 800958e:	3301      	adds	r3, #1
 8009590:	9306      	str	r3, [sp, #24]
 8009592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009594:	3301      	adds	r3, #1
 8009596:	930d      	str	r3, [sp, #52]	@ 0x34
 8009598:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800959a:	2001      	movs	r0, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d008      	beq.n	80095b2 <_dtoa_r+0x872>
 80095a0:	6933      	ldr	r3, [r6, #16]
 80095a2:	3303      	adds	r3, #3
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	18f3      	adds	r3, r6, r3
 80095a8:	6858      	ldr	r0, [r3, #4]
 80095aa:	f000 fb6b 	bl	8009c84 <__hi0bits>
 80095ae:	2320      	movs	r3, #32
 80095b0:	1a18      	subs	r0, r3, r0
 80095b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095b4:	1818      	adds	r0, r3, r0
 80095b6:	0002      	movs	r2, r0
 80095b8:	231f      	movs	r3, #31
 80095ba:	401a      	ands	r2, r3
 80095bc:	4218      	tst	r0, r3
 80095be:	d100      	bne.n	80095c2 <_dtoa_r+0x882>
 80095c0:	e081      	b.n	80096c6 <_dtoa_r+0x986>
 80095c2:	3301      	adds	r3, #1
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	dd79      	ble.n	80096be <_dtoa_r+0x97e>
 80095ca:	231c      	movs	r3, #28
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	9a06      	ldr	r2, [sp, #24]
 80095d0:	18e4      	adds	r4, r4, r3
 80095d2:	18d2      	adds	r2, r2, r3
 80095d4:	9206      	str	r2, [sp, #24]
 80095d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095d8:	18d3      	adds	r3, r2, r3
 80095da:	930d      	str	r3, [sp, #52]	@ 0x34
 80095dc:	9b06      	ldr	r3, [sp, #24]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dd05      	ble.n	80095ee <_dtoa_r+0x8ae>
 80095e2:	001a      	movs	r2, r3
 80095e4:	9905      	ldr	r1, [sp, #20]
 80095e6:	9803      	ldr	r0, [sp, #12]
 80095e8:	f000 fcba 	bl	8009f60 <__lshift>
 80095ec:	9005      	str	r0, [sp, #20]
 80095ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dd05      	ble.n	8009600 <_dtoa_r+0x8c0>
 80095f4:	0031      	movs	r1, r6
 80095f6:	001a      	movs	r2, r3
 80095f8:	9803      	ldr	r0, [sp, #12]
 80095fa:	f000 fcb1 	bl	8009f60 <__lshift>
 80095fe:	0006      	movs	r6, r0
 8009600:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009602:	2b00      	cmp	r3, #0
 8009604:	d061      	beq.n	80096ca <_dtoa_r+0x98a>
 8009606:	0031      	movs	r1, r6
 8009608:	9805      	ldr	r0, [sp, #20]
 800960a:	f000 fd15 	bl	800a038 <__mcmp>
 800960e:	2800      	cmp	r0, #0
 8009610:	da5b      	bge.n	80096ca <_dtoa_r+0x98a>
 8009612:	9b04      	ldr	r3, [sp, #16]
 8009614:	220a      	movs	r2, #10
 8009616:	3b01      	subs	r3, #1
 8009618:	930c      	str	r3, [sp, #48]	@ 0x30
 800961a:	9905      	ldr	r1, [sp, #20]
 800961c:	2300      	movs	r3, #0
 800961e:	9803      	ldr	r0, [sp, #12]
 8009620:	f000 faec 	bl	8009bfc <__multadd>
 8009624:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009626:	9005      	str	r0, [sp, #20]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d100      	bne.n	800962e <_dtoa_r+0x8ee>
 800962c:	e15b      	b.n	80098e6 <_dtoa_r+0xba6>
 800962e:	2300      	movs	r3, #0
 8009630:	0039      	movs	r1, r7
 8009632:	220a      	movs	r2, #10
 8009634:	9803      	ldr	r0, [sp, #12]
 8009636:	f000 fae1 	bl	8009bfc <__multadd>
 800963a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800963c:	0007      	movs	r7, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	dc4d      	bgt.n	80096de <_dtoa_r+0x99e>
 8009642:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009644:	2b02      	cmp	r3, #2
 8009646:	dd46      	ble.n	80096d6 <_dtoa_r+0x996>
 8009648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800964a:	2b00      	cmp	r3, #0
 800964c:	d000      	beq.n	8009650 <_dtoa_r+0x910>
 800964e:	e5db      	b.n	8009208 <_dtoa_r+0x4c8>
 8009650:	0031      	movs	r1, r6
 8009652:	2205      	movs	r2, #5
 8009654:	9803      	ldr	r0, [sp, #12]
 8009656:	f000 fad1 	bl	8009bfc <__multadd>
 800965a:	0006      	movs	r6, r0
 800965c:	0001      	movs	r1, r0
 800965e:	9805      	ldr	r0, [sp, #20]
 8009660:	f000 fcea 	bl	800a038 <__mcmp>
 8009664:	2800      	cmp	r0, #0
 8009666:	dc00      	bgt.n	800966a <_dtoa_r+0x92a>
 8009668:	e5ce      	b.n	8009208 <_dtoa_r+0x4c8>
 800966a:	9b08      	ldr	r3, [sp, #32]
 800966c:	9a08      	ldr	r2, [sp, #32]
 800966e:	1c5c      	adds	r4, r3, #1
 8009670:	2331      	movs	r3, #49	@ 0x31
 8009672:	7013      	strb	r3, [r2, #0]
 8009674:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009676:	3301      	adds	r3, #1
 8009678:	930c      	str	r3, [sp, #48]	@ 0x30
 800967a:	e5c9      	b.n	8009210 <_dtoa_r+0x4d0>
 800967c:	2336      	movs	r3, #54	@ 0x36
 800967e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009680:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009682:	1a9b      	subs	r3, r3, r2
 8009684:	9c06      	ldr	r4, [sp, #24]
 8009686:	e720      	b.n	80094ca <_dtoa_r+0x78a>
 8009688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968a:	1e5d      	subs	r5, r3, #1
 800968c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800968e:	42ab      	cmp	r3, r5
 8009690:	db08      	blt.n	80096a4 <_dtoa_r+0x964>
 8009692:	1b5d      	subs	r5, r3, r5
 8009694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009696:	2b00      	cmp	r3, #0
 8009698:	daf4      	bge.n	8009684 <_dtoa_r+0x944>
 800969a:	9b06      	ldr	r3, [sp, #24]
 800969c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800969e:	1a9c      	subs	r4, r3, r2
 80096a0:	2300      	movs	r3, #0
 80096a2:	e712      	b.n	80094ca <_dtoa_r+0x78a>
 80096a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80096a8:	1aeb      	subs	r3, r5, r3
 80096aa:	18d3      	adds	r3, r2, r3
 80096ac:	9314      	str	r3, [sp, #80]	@ 0x50
 80096ae:	950f      	str	r5, [sp, #60]	@ 0x3c
 80096b0:	9c06      	ldr	r4, [sp, #24]
 80096b2:	2500      	movs	r5, #0
 80096b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b6:	e708      	b.n	80094ca <_dtoa_r+0x78a>
 80096b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096ba:	9905      	ldr	r1, [sp, #20]
 80096bc:	e742      	b.n	8009544 <_dtoa_r+0x804>
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d08c      	beq.n	80095dc <_dtoa_r+0x89c>
 80096c2:	331c      	adds	r3, #28
 80096c4:	e783      	b.n	80095ce <_dtoa_r+0x88e>
 80096c6:	0013      	movs	r3, r2
 80096c8:	e7fb      	b.n	80096c2 <_dtoa_r+0x982>
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80096ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	ddb5      	ble.n	8009642 <_dtoa_r+0x902>
 80096d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d100      	bne.n	80096de <_dtoa_r+0x99e>
 80096dc:	e107      	b.n	80098ee <_dtoa_r+0xbae>
 80096de:	2c00      	cmp	r4, #0
 80096e0:	dd05      	ble.n	80096ee <_dtoa_r+0x9ae>
 80096e2:	0039      	movs	r1, r7
 80096e4:	0022      	movs	r2, r4
 80096e6:	9803      	ldr	r0, [sp, #12]
 80096e8:	f000 fc3a 	bl	8009f60 <__lshift>
 80096ec:	0007      	movs	r7, r0
 80096ee:	9704      	str	r7, [sp, #16]
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	d020      	beq.n	8009736 <_dtoa_r+0x9f6>
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	9803      	ldr	r0, [sp, #12]
 80096f8:	f000 fa18 	bl	8009b2c <_Balloc>
 80096fc:	1e04      	subs	r4, r0, #0
 80096fe:	d10c      	bne.n	800971a <_dtoa_r+0x9da>
 8009700:	0022      	movs	r2, r4
 8009702:	4b2e      	ldr	r3, [pc, #184]	@ (80097bc <_dtoa_r+0xa7c>)
 8009704:	482e      	ldr	r0, [pc, #184]	@ (80097c0 <_dtoa_r+0xa80>)
 8009706:	492f      	ldr	r1, [pc, #188]	@ (80097c4 <_dtoa_r+0xa84>)
 8009708:	f7ff fb2f 	bl	8008d6a <_dtoa_r+0x2a>
 800970c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800970e:	0037      	movs	r7, r6
 8009710:	e7ab      	b.n	800966a <_dtoa_r+0x92a>
 8009712:	9b04      	ldr	r3, [sp, #16]
 8009714:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009716:	930c      	str	r3, [sp, #48]	@ 0x30
 8009718:	e7f9      	b.n	800970e <_dtoa_r+0x9ce>
 800971a:	0039      	movs	r1, r7
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	310c      	adds	r1, #12
 8009720:	3202      	adds	r2, #2
 8009722:	0092      	lsls	r2, r2, #2
 8009724:	300c      	adds	r0, #12
 8009726:	f7ff fa7d 	bl	8008c24 <memcpy>
 800972a:	2201      	movs	r2, #1
 800972c:	0021      	movs	r1, r4
 800972e:	9803      	ldr	r0, [sp, #12]
 8009730:	f000 fc16 	bl	8009f60 <__lshift>
 8009734:	9004      	str	r0, [sp, #16]
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800973a:	9306      	str	r3, [sp, #24]
 800973c:	3b01      	subs	r3, #1
 800973e:	189b      	adds	r3, r3, r2
 8009740:	2201      	movs	r2, #1
 8009742:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009746:	4013      	ands	r3, r2
 8009748:	930e      	str	r3, [sp, #56]	@ 0x38
 800974a:	0031      	movs	r1, r6
 800974c:	9805      	ldr	r0, [sp, #20]
 800974e:	f7ff fa72 	bl	8008c36 <quorem>
 8009752:	0039      	movs	r1, r7
 8009754:	0005      	movs	r5, r0
 8009756:	900a      	str	r0, [sp, #40]	@ 0x28
 8009758:	9805      	ldr	r0, [sp, #20]
 800975a:	f000 fc6d 	bl	800a038 <__mcmp>
 800975e:	9a04      	ldr	r2, [sp, #16]
 8009760:	900d      	str	r0, [sp, #52]	@ 0x34
 8009762:	0031      	movs	r1, r6
 8009764:	9803      	ldr	r0, [sp, #12]
 8009766:	f000 fc83 	bl	800a070 <__mdiff>
 800976a:	2201      	movs	r2, #1
 800976c:	68c3      	ldr	r3, [r0, #12]
 800976e:	0004      	movs	r4, r0
 8009770:	3530      	adds	r5, #48	@ 0x30
 8009772:	9209      	str	r2, [sp, #36]	@ 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d104      	bne.n	8009782 <_dtoa_r+0xa42>
 8009778:	0001      	movs	r1, r0
 800977a:	9805      	ldr	r0, [sp, #20]
 800977c:	f000 fc5c 	bl	800a038 <__mcmp>
 8009780:	9009      	str	r0, [sp, #36]	@ 0x24
 8009782:	0021      	movs	r1, r4
 8009784:	9803      	ldr	r0, [sp, #12]
 8009786:	f000 fa15 	bl	8009bb4 <_Bfree>
 800978a:	9b06      	ldr	r3, [sp, #24]
 800978c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800978e:	1c5c      	adds	r4, r3, #1
 8009790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009792:	4313      	orrs	r3, r2
 8009794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009796:	4313      	orrs	r3, r2
 8009798:	d116      	bne.n	80097c8 <_dtoa_r+0xa88>
 800979a:	2d39      	cmp	r5, #57	@ 0x39
 800979c:	d02f      	beq.n	80097fe <_dtoa_r+0xabe>
 800979e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dd01      	ble.n	80097a8 <_dtoa_r+0xa68>
 80097a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80097a6:	3531      	adds	r5, #49	@ 0x31
 80097a8:	9b06      	ldr	r3, [sp, #24]
 80097aa:	701d      	strb	r5, [r3, #0]
 80097ac:	e532      	b.n	8009214 <_dtoa_r+0x4d4>
 80097ae:	46c0      	nop			@ (mov r8, r8)
 80097b0:	40240000 	.word	0x40240000
 80097b4:	00000433 	.word	0x00000433
 80097b8:	7ff00000 	.word	0x7ff00000
 80097bc:	0800b980 	.word	0x0800b980
 80097c0:	0800b928 	.word	0x0800b928
 80097c4:	000002ef 	.word	0x000002ef
 80097c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	db04      	blt.n	80097d8 <_dtoa_r+0xa98>
 80097ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80097d0:	4313      	orrs	r3, r2
 80097d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097d4:	4313      	orrs	r3, r2
 80097d6:	d11e      	bne.n	8009816 <_dtoa_r+0xad6>
 80097d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097da:	2b00      	cmp	r3, #0
 80097dc:	dde4      	ble.n	80097a8 <_dtoa_r+0xa68>
 80097de:	9905      	ldr	r1, [sp, #20]
 80097e0:	2201      	movs	r2, #1
 80097e2:	9803      	ldr	r0, [sp, #12]
 80097e4:	f000 fbbc 	bl	8009f60 <__lshift>
 80097e8:	0031      	movs	r1, r6
 80097ea:	9005      	str	r0, [sp, #20]
 80097ec:	f000 fc24 	bl	800a038 <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dc02      	bgt.n	80097fa <_dtoa_r+0xaba>
 80097f4:	d1d8      	bne.n	80097a8 <_dtoa_r+0xa68>
 80097f6:	07eb      	lsls	r3, r5, #31
 80097f8:	d5d6      	bpl.n	80097a8 <_dtoa_r+0xa68>
 80097fa:	2d39      	cmp	r5, #57	@ 0x39
 80097fc:	d1d2      	bne.n	80097a4 <_dtoa_r+0xa64>
 80097fe:	2339      	movs	r3, #57	@ 0x39
 8009800:	9a06      	ldr	r2, [sp, #24]
 8009802:	7013      	strb	r3, [r2, #0]
 8009804:	0023      	movs	r3, r4
 8009806:	001c      	movs	r4, r3
 8009808:	3b01      	subs	r3, #1
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	2a39      	cmp	r2, #57	@ 0x39
 800980e:	d050      	beq.n	80098b2 <_dtoa_r+0xb72>
 8009810:	3201      	adds	r2, #1
 8009812:	701a      	strb	r2, [r3, #0]
 8009814:	e4fe      	b.n	8009214 <_dtoa_r+0x4d4>
 8009816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009818:	2b00      	cmp	r3, #0
 800981a:	dd03      	ble.n	8009824 <_dtoa_r+0xae4>
 800981c:	2d39      	cmp	r5, #57	@ 0x39
 800981e:	d0ee      	beq.n	80097fe <_dtoa_r+0xabe>
 8009820:	3501      	adds	r5, #1
 8009822:	e7c1      	b.n	80097a8 <_dtoa_r+0xa68>
 8009824:	9b06      	ldr	r3, [sp, #24]
 8009826:	9a06      	ldr	r2, [sp, #24]
 8009828:	701d      	strb	r5, [r3, #0]
 800982a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800982c:	4293      	cmp	r3, r2
 800982e:	d02b      	beq.n	8009888 <_dtoa_r+0xb48>
 8009830:	2300      	movs	r3, #0
 8009832:	220a      	movs	r2, #10
 8009834:	9905      	ldr	r1, [sp, #20]
 8009836:	9803      	ldr	r0, [sp, #12]
 8009838:	f000 f9e0 	bl	8009bfc <__multadd>
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	9005      	str	r0, [sp, #20]
 8009840:	429f      	cmp	r7, r3
 8009842:	d109      	bne.n	8009858 <_dtoa_r+0xb18>
 8009844:	0039      	movs	r1, r7
 8009846:	2300      	movs	r3, #0
 8009848:	220a      	movs	r2, #10
 800984a:	9803      	ldr	r0, [sp, #12]
 800984c:	f000 f9d6 	bl	8009bfc <__multadd>
 8009850:	0007      	movs	r7, r0
 8009852:	9004      	str	r0, [sp, #16]
 8009854:	9406      	str	r4, [sp, #24]
 8009856:	e778      	b.n	800974a <_dtoa_r+0xa0a>
 8009858:	0039      	movs	r1, r7
 800985a:	2300      	movs	r3, #0
 800985c:	220a      	movs	r2, #10
 800985e:	9803      	ldr	r0, [sp, #12]
 8009860:	f000 f9cc 	bl	8009bfc <__multadd>
 8009864:	2300      	movs	r3, #0
 8009866:	0007      	movs	r7, r0
 8009868:	220a      	movs	r2, #10
 800986a:	9904      	ldr	r1, [sp, #16]
 800986c:	9803      	ldr	r0, [sp, #12]
 800986e:	f000 f9c5 	bl	8009bfc <__multadd>
 8009872:	9004      	str	r0, [sp, #16]
 8009874:	e7ee      	b.n	8009854 <_dtoa_r+0xb14>
 8009876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009878:	2401      	movs	r4, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	dd00      	ble.n	8009880 <_dtoa_r+0xb40>
 800987e:	001c      	movs	r4, r3
 8009880:	9704      	str	r7, [sp, #16]
 8009882:	2700      	movs	r7, #0
 8009884:	9b08      	ldr	r3, [sp, #32]
 8009886:	191c      	adds	r4, r3, r4
 8009888:	9905      	ldr	r1, [sp, #20]
 800988a:	2201      	movs	r2, #1
 800988c:	9803      	ldr	r0, [sp, #12]
 800988e:	f000 fb67 	bl	8009f60 <__lshift>
 8009892:	0031      	movs	r1, r6
 8009894:	9005      	str	r0, [sp, #20]
 8009896:	f000 fbcf 	bl	800a038 <__mcmp>
 800989a:	2800      	cmp	r0, #0
 800989c:	dcb2      	bgt.n	8009804 <_dtoa_r+0xac4>
 800989e:	d101      	bne.n	80098a4 <_dtoa_r+0xb64>
 80098a0:	07ed      	lsls	r5, r5, #31
 80098a2:	d4af      	bmi.n	8009804 <_dtoa_r+0xac4>
 80098a4:	0023      	movs	r3, r4
 80098a6:	001c      	movs	r4, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	2a30      	cmp	r2, #48	@ 0x30
 80098ae:	d0fa      	beq.n	80098a6 <_dtoa_r+0xb66>
 80098b0:	e4b0      	b.n	8009214 <_dtoa_r+0x4d4>
 80098b2:	9a08      	ldr	r2, [sp, #32]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d1a6      	bne.n	8009806 <_dtoa_r+0xac6>
 80098b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ba:	3301      	adds	r3, #1
 80098bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80098be:	2331      	movs	r3, #49	@ 0x31
 80098c0:	7013      	strb	r3, [r2, #0]
 80098c2:	e4a7      	b.n	8009214 <_dtoa_r+0x4d4>
 80098c4:	4b14      	ldr	r3, [pc, #80]	@ (8009918 <_dtoa_r+0xbd8>)
 80098c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80098c8:	9308      	str	r3, [sp, #32]
 80098ca:	4b14      	ldr	r3, [pc, #80]	@ (800991c <_dtoa_r+0xbdc>)
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	d001      	beq.n	80098d4 <_dtoa_r+0xb94>
 80098d0:	f7ff fa7e 	bl	8008dd0 <_dtoa_r+0x90>
 80098d4:	f7ff fa7e 	bl	8008dd4 <_dtoa_r+0x94>
 80098d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80098da:	2b01      	cmp	r3, #1
 80098dc:	dc00      	bgt.n	80098e0 <_dtoa_r+0xba0>
 80098de:	e648      	b.n	8009572 <_dtoa_r+0x832>
 80098e0:	2001      	movs	r0, #1
 80098e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80098e4:	e665      	b.n	80095b2 <_dtoa_r+0x872>
 80098e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dc00      	bgt.n	80098ee <_dtoa_r+0xbae>
 80098ec:	e6a9      	b.n	8009642 <_dtoa_r+0x902>
 80098ee:	2400      	movs	r4, #0
 80098f0:	0031      	movs	r1, r6
 80098f2:	9805      	ldr	r0, [sp, #20]
 80098f4:	f7ff f99f 	bl	8008c36 <quorem>
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	3030      	adds	r0, #48	@ 0x30
 80098fc:	5518      	strb	r0, [r3, r4]
 80098fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009900:	3401      	adds	r4, #1
 8009902:	0005      	movs	r5, r0
 8009904:	42a3      	cmp	r3, r4
 8009906:	ddb6      	ble.n	8009876 <_dtoa_r+0xb36>
 8009908:	2300      	movs	r3, #0
 800990a:	220a      	movs	r2, #10
 800990c:	9905      	ldr	r1, [sp, #20]
 800990e:	9803      	ldr	r0, [sp, #12]
 8009910:	f000 f974 	bl	8009bfc <__multadd>
 8009914:	9005      	str	r0, [sp, #20]
 8009916:	e7eb      	b.n	80098f0 <_dtoa_r+0xbb0>
 8009918:	0800b904 	.word	0x0800b904
 800991c:	0800b90c 	.word	0x0800b90c

08009920 <_free_r>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	0005      	movs	r5, r0
 8009924:	1e0c      	subs	r4, r1, #0
 8009926:	d010      	beq.n	800994a <_free_r+0x2a>
 8009928:	3c04      	subs	r4, #4
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	da00      	bge.n	8009932 <_free_r+0x12>
 8009930:	18e4      	adds	r4, r4, r3
 8009932:	0028      	movs	r0, r5
 8009934:	f000 f8ea 	bl	8009b0c <__malloc_lock>
 8009938:	4a1d      	ldr	r2, [pc, #116]	@ (80099b0 <_free_r+0x90>)
 800993a:	6813      	ldr	r3, [r2, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d105      	bne.n	800994c <_free_r+0x2c>
 8009940:	6063      	str	r3, [r4, #4]
 8009942:	6014      	str	r4, [r2, #0]
 8009944:	0028      	movs	r0, r5
 8009946:	f000 f8e9 	bl	8009b1c <__malloc_unlock>
 800994a:	bd70      	pop	{r4, r5, r6, pc}
 800994c:	42a3      	cmp	r3, r4
 800994e:	d908      	bls.n	8009962 <_free_r+0x42>
 8009950:	6820      	ldr	r0, [r4, #0]
 8009952:	1821      	adds	r1, r4, r0
 8009954:	428b      	cmp	r3, r1
 8009956:	d1f3      	bne.n	8009940 <_free_r+0x20>
 8009958:	6819      	ldr	r1, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	1809      	adds	r1, r1, r0
 800995e:	6021      	str	r1, [r4, #0]
 8009960:	e7ee      	b.n	8009940 <_free_r+0x20>
 8009962:	001a      	movs	r2, r3
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <_free_r+0x4e>
 800996a:	42a3      	cmp	r3, r4
 800996c:	d9f9      	bls.n	8009962 <_free_r+0x42>
 800996e:	6811      	ldr	r1, [r2, #0]
 8009970:	1850      	adds	r0, r2, r1
 8009972:	42a0      	cmp	r0, r4
 8009974:	d10b      	bne.n	800998e <_free_r+0x6e>
 8009976:	6820      	ldr	r0, [r4, #0]
 8009978:	1809      	adds	r1, r1, r0
 800997a:	1850      	adds	r0, r2, r1
 800997c:	6011      	str	r1, [r2, #0]
 800997e:	4283      	cmp	r3, r0
 8009980:	d1e0      	bne.n	8009944 <_free_r+0x24>
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	1841      	adds	r1, r0, r1
 8009988:	6011      	str	r1, [r2, #0]
 800998a:	6053      	str	r3, [r2, #4]
 800998c:	e7da      	b.n	8009944 <_free_r+0x24>
 800998e:	42a0      	cmp	r0, r4
 8009990:	d902      	bls.n	8009998 <_free_r+0x78>
 8009992:	230c      	movs	r3, #12
 8009994:	602b      	str	r3, [r5, #0]
 8009996:	e7d5      	b.n	8009944 <_free_r+0x24>
 8009998:	6820      	ldr	r0, [r4, #0]
 800999a:	1821      	adds	r1, r4, r0
 800999c:	428b      	cmp	r3, r1
 800999e:	d103      	bne.n	80099a8 <_free_r+0x88>
 80099a0:	6819      	ldr	r1, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	1809      	adds	r1, r1, r0
 80099a6:	6021      	str	r1, [r4, #0]
 80099a8:	6063      	str	r3, [r4, #4]
 80099aa:	6054      	str	r4, [r2, #4]
 80099ac:	e7ca      	b.n	8009944 <_free_r+0x24>
 80099ae:	46c0      	nop			@ (mov r8, r8)
 80099b0:	20000568 	.word	0x20000568

080099b4 <malloc>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	4b03      	ldr	r3, [pc, #12]	@ (80099c4 <malloc+0x10>)
 80099b8:	0001      	movs	r1, r0
 80099ba:	6818      	ldr	r0, [r3, #0]
 80099bc:	f000 f826 	bl	8009a0c <_malloc_r>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	46c0      	nop			@ (mov r8, r8)
 80099c4:	20000018 	.word	0x20000018

080099c8 <sbrk_aligned>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	4e0f      	ldr	r6, [pc, #60]	@ (8009a08 <sbrk_aligned+0x40>)
 80099cc:	000d      	movs	r5, r1
 80099ce:	6831      	ldr	r1, [r6, #0]
 80099d0:	0004      	movs	r4, r0
 80099d2:	2900      	cmp	r1, #0
 80099d4:	d102      	bne.n	80099dc <sbrk_aligned+0x14>
 80099d6:	f000 fe55 	bl	800a684 <_sbrk_r>
 80099da:	6030      	str	r0, [r6, #0]
 80099dc:	0029      	movs	r1, r5
 80099de:	0020      	movs	r0, r4
 80099e0:	f000 fe50 	bl	800a684 <_sbrk_r>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d103      	bne.n	80099f0 <sbrk_aligned+0x28>
 80099e8:	2501      	movs	r5, #1
 80099ea:	426d      	negs	r5, r5
 80099ec:	0028      	movs	r0, r5
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	2303      	movs	r3, #3
 80099f2:	1cc5      	adds	r5, r0, #3
 80099f4:	439d      	bics	r5, r3
 80099f6:	42a8      	cmp	r0, r5
 80099f8:	d0f8      	beq.n	80099ec <sbrk_aligned+0x24>
 80099fa:	1a29      	subs	r1, r5, r0
 80099fc:	0020      	movs	r0, r4
 80099fe:	f000 fe41 	bl	800a684 <_sbrk_r>
 8009a02:	3001      	adds	r0, #1
 8009a04:	d1f2      	bne.n	80099ec <sbrk_aligned+0x24>
 8009a06:	e7ef      	b.n	80099e8 <sbrk_aligned+0x20>
 8009a08:	20000564 	.word	0x20000564

08009a0c <_malloc_r>:
 8009a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a0e:	2203      	movs	r2, #3
 8009a10:	1ccb      	adds	r3, r1, #3
 8009a12:	4393      	bics	r3, r2
 8009a14:	3308      	adds	r3, #8
 8009a16:	0005      	movs	r5, r0
 8009a18:	001f      	movs	r7, r3
 8009a1a:	2b0c      	cmp	r3, #12
 8009a1c:	d234      	bcs.n	8009a88 <_malloc_r+0x7c>
 8009a1e:	270c      	movs	r7, #12
 8009a20:	42b9      	cmp	r1, r7
 8009a22:	d833      	bhi.n	8009a8c <_malloc_r+0x80>
 8009a24:	0028      	movs	r0, r5
 8009a26:	f000 f871 	bl	8009b0c <__malloc_lock>
 8009a2a:	4e37      	ldr	r6, [pc, #220]	@ (8009b08 <_malloc_r+0xfc>)
 8009a2c:	6833      	ldr	r3, [r6, #0]
 8009a2e:	001c      	movs	r4, r3
 8009a30:	2c00      	cmp	r4, #0
 8009a32:	d12f      	bne.n	8009a94 <_malloc_r+0x88>
 8009a34:	0039      	movs	r1, r7
 8009a36:	0028      	movs	r0, r5
 8009a38:	f7ff ffc6 	bl	80099c8 <sbrk_aligned>
 8009a3c:	0004      	movs	r4, r0
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	d15f      	bne.n	8009b02 <_malloc_r+0xf6>
 8009a42:	6834      	ldr	r4, [r6, #0]
 8009a44:	9400      	str	r4, [sp, #0]
 8009a46:	9b00      	ldr	r3, [sp, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d14a      	bne.n	8009ae2 <_malloc_r+0xd6>
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	d052      	beq.n	8009af6 <_malloc_r+0xea>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	0028      	movs	r0, r5
 8009a54:	18e3      	adds	r3, r4, r3
 8009a56:	9900      	ldr	r1, [sp, #0]
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	f000 fe13 	bl	800a684 <_sbrk_r>
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	4283      	cmp	r3, r0
 8009a62:	d148      	bne.n	8009af6 <_malloc_r+0xea>
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	0028      	movs	r0, r5
 8009a68:	1aff      	subs	r7, r7, r3
 8009a6a:	0039      	movs	r1, r7
 8009a6c:	f7ff ffac 	bl	80099c8 <sbrk_aligned>
 8009a70:	3001      	adds	r0, #1
 8009a72:	d040      	beq.n	8009af6 <_malloc_r+0xea>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	19db      	adds	r3, r3, r7
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	6833      	ldr	r3, [r6, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	2a00      	cmp	r2, #0
 8009a80:	d133      	bne.n	8009aea <_malloc_r+0xde>
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	6033      	str	r3, [r6, #0]
 8009a86:	e019      	b.n	8009abc <_malloc_r+0xb0>
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dac9      	bge.n	8009a20 <_malloc_r+0x14>
 8009a8c:	230c      	movs	r3, #12
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	2000      	movs	r0, #0
 8009a92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a94:	6821      	ldr	r1, [r4, #0]
 8009a96:	1bc9      	subs	r1, r1, r7
 8009a98:	d420      	bmi.n	8009adc <_malloc_r+0xd0>
 8009a9a:	290b      	cmp	r1, #11
 8009a9c:	d90a      	bls.n	8009ab4 <_malloc_r+0xa8>
 8009a9e:	19e2      	adds	r2, r4, r7
 8009aa0:	6027      	str	r7, [r4, #0]
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	d104      	bne.n	8009ab0 <_malloc_r+0xa4>
 8009aa6:	6032      	str	r2, [r6, #0]
 8009aa8:	6863      	ldr	r3, [r4, #4]
 8009aaa:	6011      	str	r1, [r2, #0]
 8009aac:	6053      	str	r3, [r2, #4]
 8009aae:	e005      	b.n	8009abc <_malloc_r+0xb0>
 8009ab0:	605a      	str	r2, [r3, #4]
 8009ab2:	e7f9      	b.n	8009aa8 <_malloc_r+0x9c>
 8009ab4:	6862      	ldr	r2, [r4, #4]
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	d10e      	bne.n	8009ad8 <_malloc_r+0xcc>
 8009aba:	6032      	str	r2, [r6, #0]
 8009abc:	0028      	movs	r0, r5
 8009abe:	f000 f82d 	bl	8009b1c <__malloc_unlock>
 8009ac2:	0020      	movs	r0, r4
 8009ac4:	2207      	movs	r2, #7
 8009ac6:	300b      	adds	r0, #11
 8009ac8:	1d23      	adds	r3, r4, #4
 8009aca:	4390      	bics	r0, r2
 8009acc:	1ac2      	subs	r2, r0, r3
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	d0df      	beq.n	8009a92 <_malloc_r+0x86>
 8009ad2:	1a1b      	subs	r3, r3, r0
 8009ad4:	50a3      	str	r3, [r4, r2]
 8009ad6:	e7dc      	b.n	8009a92 <_malloc_r+0x86>
 8009ad8:	605a      	str	r2, [r3, #4]
 8009ada:	e7ef      	b.n	8009abc <_malloc_r+0xb0>
 8009adc:	0023      	movs	r3, r4
 8009ade:	6864      	ldr	r4, [r4, #4]
 8009ae0:	e7a6      	b.n	8009a30 <_malloc_r+0x24>
 8009ae2:	9c00      	ldr	r4, [sp, #0]
 8009ae4:	6863      	ldr	r3, [r4, #4]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	e7ad      	b.n	8009a46 <_malloc_r+0x3a>
 8009aea:	001a      	movs	r2, r3
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	d1fb      	bne.n	8009aea <_malloc_r+0xde>
 8009af2:	2300      	movs	r3, #0
 8009af4:	e7da      	b.n	8009aac <_malloc_r+0xa0>
 8009af6:	230c      	movs	r3, #12
 8009af8:	0028      	movs	r0, r5
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	f000 f80e 	bl	8009b1c <__malloc_unlock>
 8009b00:	e7c6      	b.n	8009a90 <_malloc_r+0x84>
 8009b02:	6007      	str	r7, [r0, #0]
 8009b04:	e7da      	b.n	8009abc <_malloc_r+0xb0>
 8009b06:	46c0      	nop			@ (mov r8, r8)
 8009b08:	20000568 	.word	0x20000568

08009b0c <__malloc_lock>:
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	4802      	ldr	r0, [pc, #8]	@ (8009b18 <__malloc_lock+0xc>)
 8009b10:	f7ff f87b 	bl	8008c0a <__retarget_lock_acquire_recursive>
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	46c0      	nop			@ (mov r8, r8)
 8009b18:	20000560 	.word	0x20000560

08009b1c <__malloc_unlock>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4802      	ldr	r0, [pc, #8]	@ (8009b28 <__malloc_unlock+0xc>)
 8009b20:	f7ff f874 	bl	8008c0c <__retarget_lock_release_recursive>
 8009b24:	bd10      	pop	{r4, pc}
 8009b26:	46c0      	nop			@ (mov r8, r8)
 8009b28:	20000560 	.word	0x20000560

08009b2c <_Balloc>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	69c5      	ldr	r5, [r0, #28]
 8009b30:	0006      	movs	r6, r0
 8009b32:	000c      	movs	r4, r1
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	d10e      	bne.n	8009b56 <_Balloc+0x2a>
 8009b38:	2010      	movs	r0, #16
 8009b3a:	f7ff ff3b 	bl	80099b4 <malloc>
 8009b3e:	1e02      	subs	r2, r0, #0
 8009b40:	61f0      	str	r0, [r6, #28]
 8009b42:	d104      	bne.n	8009b4e <_Balloc+0x22>
 8009b44:	216b      	movs	r1, #107	@ 0x6b
 8009b46:	4b19      	ldr	r3, [pc, #100]	@ (8009bac <_Balloc+0x80>)
 8009b48:	4819      	ldr	r0, [pc, #100]	@ (8009bb0 <_Balloc+0x84>)
 8009b4a:	f000 fdad 	bl	800a6a8 <__assert_func>
 8009b4e:	6045      	str	r5, [r0, #4]
 8009b50:	6085      	str	r5, [r0, #8]
 8009b52:	6005      	str	r5, [r0, #0]
 8009b54:	60c5      	str	r5, [r0, #12]
 8009b56:	69f5      	ldr	r5, [r6, #28]
 8009b58:	68eb      	ldr	r3, [r5, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d013      	beq.n	8009b86 <_Balloc+0x5a>
 8009b5e:	69f3      	ldr	r3, [r6, #28]
 8009b60:	00a2      	lsls	r2, r4, #2
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	189b      	adds	r3, r3, r2
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d118      	bne.n	8009b9e <_Balloc+0x72>
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	000d      	movs	r5, r1
 8009b70:	40a5      	lsls	r5, r4
 8009b72:	1d6a      	adds	r2, r5, #5
 8009b74:	0030      	movs	r0, r6
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	f000 fdb4 	bl	800a6e4 <_calloc_r>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d00c      	beq.n	8009b9a <_Balloc+0x6e>
 8009b80:	6044      	str	r4, [r0, #4]
 8009b82:	6085      	str	r5, [r0, #8]
 8009b84:	e00d      	b.n	8009ba2 <_Balloc+0x76>
 8009b86:	2221      	movs	r2, #33	@ 0x21
 8009b88:	2104      	movs	r1, #4
 8009b8a:	0030      	movs	r0, r6
 8009b8c:	f000 fdaa 	bl	800a6e4 <_calloc_r>
 8009b90:	69f3      	ldr	r3, [r6, #28]
 8009b92:	60e8      	str	r0, [r5, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e1      	bne.n	8009b5e <_Balloc+0x32>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	bd70      	pop	{r4, r5, r6, pc}
 8009b9e:	6802      	ldr	r2, [r0, #0]
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	6103      	str	r3, [r0, #16]
 8009ba6:	60c3      	str	r3, [r0, #12]
 8009ba8:	e7f8      	b.n	8009b9c <_Balloc+0x70>
 8009baa:	46c0      	nop			@ (mov r8, r8)
 8009bac:	0800b911 	.word	0x0800b911
 8009bb0:	0800b991 	.word	0x0800b991

08009bb4 <_Bfree>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	69c6      	ldr	r6, [r0, #28]
 8009bb8:	0005      	movs	r5, r0
 8009bba:	000c      	movs	r4, r1
 8009bbc:	2e00      	cmp	r6, #0
 8009bbe:	d10e      	bne.n	8009bde <_Bfree+0x2a>
 8009bc0:	2010      	movs	r0, #16
 8009bc2:	f7ff fef7 	bl	80099b4 <malloc>
 8009bc6:	1e02      	subs	r2, r0, #0
 8009bc8:	61e8      	str	r0, [r5, #28]
 8009bca:	d104      	bne.n	8009bd6 <_Bfree+0x22>
 8009bcc:	218f      	movs	r1, #143	@ 0x8f
 8009bce:	4b09      	ldr	r3, [pc, #36]	@ (8009bf4 <_Bfree+0x40>)
 8009bd0:	4809      	ldr	r0, [pc, #36]	@ (8009bf8 <_Bfree+0x44>)
 8009bd2:	f000 fd69 	bl	800a6a8 <__assert_func>
 8009bd6:	6046      	str	r6, [r0, #4]
 8009bd8:	6086      	str	r6, [r0, #8]
 8009bda:	6006      	str	r6, [r0, #0]
 8009bdc:	60c6      	str	r6, [r0, #12]
 8009bde:	2c00      	cmp	r4, #0
 8009be0:	d007      	beq.n	8009bf2 <_Bfree+0x3e>
 8009be2:	69eb      	ldr	r3, [r5, #28]
 8009be4:	6862      	ldr	r2, [r4, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	0092      	lsls	r2, r2, #2
 8009bea:	189b      	adds	r3, r3, r2
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	6022      	str	r2, [r4, #0]
 8009bf0:	601c      	str	r4, [r3, #0]
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
 8009bf4:	0800b911 	.word	0x0800b911
 8009bf8:	0800b991 	.word	0x0800b991

08009bfc <__multadd>:
 8009bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bfe:	000f      	movs	r7, r1
 8009c00:	9001      	str	r0, [sp, #4]
 8009c02:	000c      	movs	r4, r1
 8009c04:	001e      	movs	r6, r3
 8009c06:	2000      	movs	r0, #0
 8009c08:	690d      	ldr	r5, [r1, #16]
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	3001      	adds	r0, #1
 8009c10:	b299      	uxth	r1, r3
 8009c12:	4351      	muls	r1, r2
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	4353      	muls	r3, r2
 8009c18:	1989      	adds	r1, r1, r6
 8009c1a:	0c0e      	lsrs	r6, r1, #16
 8009c1c:	199b      	adds	r3, r3, r6
 8009c1e:	0c1e      	lsrs	r6, r3, #16
 8009c20:	b289      	uxth	r1, r1
 8009c22:	041b      	lsls	r3, r3, #16
 8009c24:	185b      	adds	r3, r3, r1
 8009c26:	c708      	stmia	r7!, {r3}
 8009c28:	4285      	cmp	r5, r0
 8009c2a:	dcef      	bgt.n	8009c0c <__multadd+0x10>
 8009c2c:	2e00      	cmp	r6, #0
 8009c2e:	d022      	beq.n	8009c76 <__multadd+0x7a>
 8009c30:	68a3      	ldr	r3, [r4, #8]
 8009c32:	42ab      	cmp	r3, r5
 8009c34:	dc19      	bgt.n	8009c6a <__multadd+0x6e>
 8009c36:	6861      	ldr	r1, [r4, #4]
 8009c38:	9801      	ldr	r0, [sp, #4]
 8009c3a:	3101      	adds	r1, #1
 8009c3c:	f7ff ff76 	bl	8009b2c <_Balloc>
 8009c40:	1e07      	subs	r7, r0, #0
 8009c42:	d105      	bne.n	8009c50 <__multadd+0x54>
 8009c44:	003a      	movs	r2, r7
 8009c46:	21ba      	movs	r1, #186	@ 0xba
 8009c48:	4b0c      	ldr	r3, [pc, #48]	@ (8009c7c <__multadd+0x80>)
 8009c4a:	480d      	ldr	r0, [pc, #52]	@ (8009c80 <__multadd+0x84>)
 8009c4c:	f000 fd2c 	bl	800a6a8 <__assert_func>
 8009c50:	0021      	movs	r1, r4
 8009c52:	6922      	ldr	r2, [r4, #16]
 8009c54:	310c      	adds	r1, #12
 8009c56:	3202      	adds	r2, #2
 8009c58:	0092      	lsls	r2, r2, #2
 8009c5a:	300c      	adds	r0, #12
 8009c5c:	f7fe ffe2 	bl	8008c24 <memcpy>
 8009c60:	0021      	movs	r1, r4
 8009c62:	9801      	ldr	r0, [sp, #4]
 8009c64:	f7ff ffa6 	bl	8009bb4 <_Bfree>
 8009c68:	003c      	movs	r4, r7
 8009c6a:	1d2b      	adds	r3, r5, #4
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	18e3      	adds	r3, r4, r3
 8009c70:	3501      	adds	r5, #1
 8009c72:	605e      	str	r6, [r3, #4]
 8009c74:	6125      	str	r5, [r4, #16]
 8009c76:	0020      	movs	r0, r4
 8009c78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c7a:	46c0      	nop			@ (mov r8, r8)
 8009c7c:	0800b980 	.word	0x0800b980
 8009c80:	0800b991 	.word	0x0800b991

08009c84 <__hi0bits>:
 8009c84:	2280      	movs	r2, #128	@ 0x80
 8009c86:	0003      	movs	r3, r0
 8009c88:	0252      	lsls	r2, r2, #9
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d201      	bcs.n	8009c94 <__hi0bits+0x10>
 8009c90:	041b      	lsls	r3, r3, #16
 8009c92:	3010      	adds	r0, #16
 8009c94:	2280      	movs	r2, #128	@ 0x80
 8009c96:	0452      	lsls	r2, r2, #17
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d201      	bcs.n	8009ca0 <__hi0bits+0x1c>
 8009c9c:	3008      	adds	r0, #8
 8009c9e:	021b      	lsls	r3, r3, #8
 8009ca0:	2280      	movs	r2, #128	@ 0x80
 8009ca2:	0552      	lsls	r2, r2, #21
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d201      	bcs.n	8009cac <__hi0bits+0x28>
 8009ca8:	3004      	adds	r0, #4
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	2280      	movs	r2, #128	@ 0x80
 8009cae:	05d2      	lsls	r2, r2, #23
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d201      	bcs.n	8009cb8 <__hi0bits+0x34>
 8009cb4:	3002      	adds	r0, #2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	db03      	blt.n	8009cc4 <__hi0bits+0x40>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	4213      	tst	r3, r2
 8009cc0:	d100      	bne.n	8009cc4 <__hi0bits+0x40>
 8009cc2:	2020      	movs	r0, #32
 8009cc4:	4770      	bx	lr

08009cc6 <__lo0bits>:
 8009cc6:	6803      	ldr	r3, [r0, #0]
 8009cc8:	0001      	movs	r1, r0
 8009cca:	2207      	movs	r2, #7
 8009ccc:	0018      	movs	r0, r3
 8009cce:	4010      	ands	r0, r2
 8009cd0:	4213      	tst	r3, r2
 8009cd2:	d00d      	beq.n	8009cf0 <__lo0bits+0x2a>
 8009cd4:	3a06      	subs	r2, #6
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	4213      	tst	r3, r2
 8009cda:	d105      	bne.n	8009ce8 <__lo0bits+0x22>
 8009cdc:	3002      	adds	r0, #2
 8009cde:	4203      	tst	r3, r0
 8009ce0:	d003      	beq.n	8009cea <__lo0bits+0x24>
 8009ce2:	40d3      	lsrs	r3, r2
 8009ce4:	0010      	movs	r0, r2
 8009ce6:	600b      	str	r3, [r1, #0]
 8009ce8:	4770      	bx	lr
 8009cea:	089b      	lsrs	r3, r3, #2
 8009cec:	600b      	str	r3, [r1, #0]
 8009cee:	e7fb      	b.n	8009ce8 <__lo0bits+0x22>
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	d101      	bne.n	8009cfa <__lo0bits+0x34>
 8009cf6:	2010      	movs	r0, #16
 8009cf8:	0c1b      	lsrs	r3, r3, #16
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	2a00      	cmp	r2, #0
 8009cfe:	d101      	bne.n	8009d04 <__lo0bits+0x3e>
 8009d00:	3008      	adds	r0, #8
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	071a      	lsls	r2, r3, #28
 8009d06:	d101      	bne.n	8009d0c <__lo0bits+0x46>
 8009d08:	3004      	adds	r0, #4
 8009d0a:	091b      	lsrs	r3, r3, #4
 8009d0c:	079a      	lsls	r2, r3, #30
 8009d0e:	d101      	bne.n	8009d14 <__lo0bits+0x4e>
 8009d10:	3002      	adds	r0, #2
 8009d12:	089b      	lsrs	r3, r3, #2
 8009d14:	07da      	lsls	r2, r3, #31
 8009d16:	d4e9      	bmi.n	8009cec <__lo0bits+0x26>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	085b      	lsrs	r3, r3, #1
 8009d1c:	d1e6      	bne.n	8009cec <__lo0bits+0x26>
 8009d1e:	2020      	movs	r0, #32
 8009d20:	e7e2      	b.n	8009ce8 <__lo0bits+0x22>
	...

08009d24 <__i2b>:
 8009d24:	b510      	push	{r4, lr}
 8009d26:	000c      	movs	r4, r1
 8009d28:	2101      	movs	r1, #1
 8009d2a:	f7ff feff 	bl	8009b2c <_Balloc>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d107      	bne.n	8009d42 <__i2b+0x1e>
 8009d32:	2146      	movs	r1, #70	@ 0x46
 8009d34:	4c05      	ldr	r4, [pc, #20]	@ (8009d4c <__i2b+0x28>)
 8009d36:	0002      	movs	r2, r0
 8009d38:	4b05      	ldr	r3, [pc, #20]	@ (8009d50 <__i2b+0x2c>)
 8009d3a:	0020      	movs	r0, r4
 8009d3c:	31ff      	adds	r1, #255	@ 0xff
 8009d3e:	f000 fcb3 	bl	800a6a8 <__assert_func>
 8009d42:	2301      	movs	r3, #1
 8009d44:	6144      	str	r4, [r0, #20]
 8009d46:	6103      	str	r3, [r0, #16]
 8009d48:	bd10      	pop	{r4, pc}
 8009d4a:	46c0      	nop			@ (mov r8, r8)
 8009d4c:	0800b991 	.word	0x0800b991
 8009d50:	0800b980 	.word	0x0800b980

08009d54 <__multiply>:
 8009d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d56:	0014      	movs	r4, r2
 8009d58:	690a      	ldr	r2, [r1, #16]
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	000d      	movs	r5, r1
 8009d5e:	b089      	sub	sp, #36	@ 0x24
 8009d60:	429a      	cmp	r2, r3
 8009d62:	db02      	blt.n	8009d6a <__multiply+0x16>
 8009d64:	0023      	movs	r3, r4
 8009d66:	000c      	movs	r4, r1
 8009d68:	001d      	movs	r5, r3
 8009d6a:	6927      	ldr	r7, [r4, #16]
 8009d6c:	692e      	ldr	r6, [r5, #16]
 8009d6e:	6861      	ldr	r1, [r4, #4]
 8009d70:	19bb      	adds	r3, r7, r6
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	68a3      	ldr	r3, [r4, #8]
 8009d76:	19ba      	adds	r2, r7, r6
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	da00      	bge.n	8009d7e <__multiply+0x2a>
 8009d7c:	3101      	adds	r1, #1
 8009d7e:	f7ff fed5 	bl	8009b2c <_Balloc>
 8009d82:	4684      	mov	ip, r0
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d106      	bne.n	8009d96 <__multiply+0x42>
 8009d88:	21b1      	movs	r1, #177	@ 0xb1
 8009d8a:	4662      	mov	r2, ip
 8009d8c:	4b44      	ldr	r3, [pc, #272]	@ (8009ea0 <__multiply+0x14c>)
 8009d8e:	4845      	ldr	r0, [pc, #276]	@ (8009ea4 <__multiply+0x150>)
 8009d90:	0049      	lsls	r1, r1, #1
 8009d92:	f000 fc89 	bl	800a6a8 <__assert_func>
 8009d96:	0002      	movs	r2, r0
 8009d98:	19bb      	adds	r3, r7, r6
 8009d9a:	3214      	adds	r2, #20
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	18d3      	adds	r3, r2, r3
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	2100      	movs	r1, #0
 8009da4:	0013      	movs	r3, r2
 8009da6:	9801      	ldr	r0, [sp, #4]
 8009da8:	4283      	cmp	r3, r0
 8009daa:	d328      	bcc.n	8009dfe <__multiply+0xaa>
 8009dac:	0023      	movs	r3, r4
 8009dae:	00bf      	lsls	r7, r7, #2
 8009db0:	3314      	adds	r3, #20
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	3514      	adds	r5, #20
 8009db6:	19db      	adds	r3, r3, r7
 8009db8:	00b6      	lsls	r6, r6, #2
 8009dba:	9302      	str	r3, [sp, #8]
 8009dbc:	19ab      	adds	r3, r5, r6
 8009dbe:	9307      	str	r3, [sp, #28]
 8009dc0:	2304      	movs	r3, #4
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	0023      	movs	r3, r4
 8009dc6:	9902      	ldr	r1, [sp, #8]
 8009dc8:	3315      	adds	r3, #21
 8009dca:	4299      	cmp	r1, r3
 8009dcc:	d305      	bcc.n	8009dda <__multiply+0x86>
 8009dce:	1b0c      	subs	r4, r1, r4
 8009dd0:	3c15      	subs	r4, #21
 8009dd2:	08a4      	lsrs	r4, r4, #2
 8009dd4:	3401      	adds	r4, #1
 8009dd6:	00a3      	lsls	r3, r4, #2
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	9b07      	ldr	r3, [sp, #28]
 8009ddc:	429d      	cmp	r5, r3
 8009dde:	d310      	bcc.n	8009e02 <__multiply+0xae>
 8009de0:	9b00      	ldr	r3, [sp, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	dd05      	ble.n	8009df2 <__multiply+0x9e>
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	3b04      	subs	r3, #4
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d052      	beq.n	8009e98 <__multiply+0x144>
 8009df2:	4663      	mov	r3, ip
 8009df4:	4660      	mov	r0, ip
 8009df6:	9a00      	ldr	r2, [sp, #0]
 8009df8:	611a      	str	r2, [r3, #16]
 8009dfa:	b009      	add	sp, #36	@ 0x24
 8009dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfe:	c302      	stmia	r3!, {r1}
 8009e00:	e7d1      	b.n	8009da6 <__multiply+0x52>
 8009e02:	682c      	ldr	r4, [r5, #0]
 8009e04:	b2a4      	uxth	r4, r4
 8009e06:	2c00      	cmp	r4, #0
 8009e08:	d01f      	beq.n	8009e4a <__multiply+0xf6>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	0017      	movs	r7, r2
 8009e0e:	9e04      	ldr	r6, [sp, #16]
 8009e10:	9303      	str	r3, [sp, #12]
 8009e12:	ce08      	ldmia	r6!, {r3}
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	9306      	str	r3, [sp, #24]
 8009e18:	466b      	mov	r3, sp
 8009e1a:	8b1b      	ldrh	r3, [r3, #24]
 8009e1c:	b288      	uxth	r0, r1
 8009e1e:	4363      	muls	r3, r4
 8009e20:	181b      	adds	r3, r3, r0
 8009e22:	9803      	ldr	r0, [sp, #12]
 8009e24:	0c09      	lsrs	r1, r1, #16
 8009e26:	181b      	adds	r3, r3, r0
 8009e28:	9806      	ldr	r0, [sp, #24]
 8009e2a:	0c00      	lsrs	r0, r0, #16
 8009e2c:	4360      	muls	r0, r4
 8009e2e:	1840      	adds	r0, r0, r1
 8009e30:	0c19      	lsrs	r1, r3, #16
 8009e32:	1841      	adds	r1, r0, r1
 8009e34:	0c08      	lsrs	r0, r1, #16
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	0409      	lsls	r1, r1, #16
 8009e3a:	4319      	orrs	r1, r3
 8009e3c:	9b02      	ldr	r3, [sp, #8]
 8009e3e:	9003      	str	r0, [sp, #12]
 8009e40:	c702      	stmia	r7!, {r1}
 8009e42:	42b3      	cmp	r3, r6
 8009e44:	d8e5      	bhi.n	8009e12 <__multiply+0xbe>
 8009e46:	9b05      	ldr	r3, [sp, #20]
 8009e48:	50d0      	str	r0, [r2, r3]
 8009e4a:	682c      	ldr	r4, [r5, #0]
 8009e4c:	0c24      	lsrs	r4, r4, #16
 8009e4e:	d020      	beq.n	8009e92 <__multiply+0x13e>
 8009e50:	2100      	movs	r1, #0
 8009e52:	0010      	movs	r0, r2
 8009e54:	6813      	ldr	r3, [r2, #0]
 8009e56:	9e04      	ldr	r6, [sp, #16]
 8009e58:	9103      	str	r1, [sp, #12]
 8009e5a:	6831      	ldr	r1, [r6, #0]
 8009e5c:	6807      	ldr	r7, [r0, #0]
 8009e5e:	b289      	uxth	r1, r1
 8009e60:	4361      	muls	r1, r4
 8009e62:	0c3f      	lsrs	r7, r7, #16
 8009e64:	19c9      	adds	r1, r1, r7
 8009e66:	9f03      	ldr	r7, [sp, #12]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	19c9      	adds	r1, r1, r7
 8009e6c:	040f      	lsls	r7, r1, #16
 8009e6e:	431f      	orrs	r7, r3
 8009e70:	6007      	str	r7, [r0, #0]
 8009e72:	ce80      	ldmia	r6!, {r7}
 8009e74:	6843      	ldr	r3, [r0, #4]
 8009e76:	0c3f      	lsrs	r7, r7, #16
 8009e78:	4367      	muls	r7, r4
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	0c09      	lsrs	r1, r1, #16
 8009e7e:	18fb      	adds	r3, r7, r3
 8009e80:	185b      	adds	r3, r3, r1
 8009e82:	0c19      	lsrs	r1, r3, #16
 8009e84:	9103      	str	r1, [sp, #12]
 8009e86:	9902      	ldr	r1, [sp, #8]
 8009e88:	3004      	adds	r0, #4
 8009e8a:	42b1      	cmp	r1, r6
 8009e8c:	d8e5      	bhi.n	8009e5a <__multiply+0x106>
 8009e8e:	9905      	ldr	r1, [sp, #20]
 8009e90:	5053      	str	r3, [r2, r1]
 8009e92:	3504      	adds	r5, #4
 8009e94:	3204      	adds	r2, #4
 8009e96:	e7a0      	b.n	8009dda <__multiply+0x86>
 8009e98:	9b00      	ldr	r3, [sp, #0]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	e79f      	b.n	8009de0 <__multiply+0x8c>
 8009ea0:	0800b980 	.word	0x0800b980
 8009ea4:	0800b991 	.word	0x0800b991

08009ea8 <__pow5mult>:
 8009ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eaa:	2303      	movs	r3, #3
 8009eac:	0015      	movs	r5, r2
 8009eae:	0007      	movs	r7, r0
 8009eb0:	000e      	movs	r6, r1
 8009eb2:	401a      	ands	r2, r3
 8009eb4:	421d      	tst	r5, r3
 8009eb6:	d008      	beq.n	8009eca <__pow5mult+0x22>
 8009eb8:	4925      	ldr	r1, [pc, #148]	@ (8009f50 <__pow5mult+0xa8>)
 8009eba:	3a01      	subs	r2, #1
 8009ebc:	0092      	lsls	r2, r2, #2
 8009ebe:	5852      	ldr	r2, [r2, r1]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	0031      	movs	r1, r6
 8009ec4:	f7ff fe9a 	bl	8009bfc <__multadd>
 8009ec8:	0006      	movs	r6, r0
 8009eca:	10ad      	asrs	r5, r5, #2
 8009ecc:	d03d      	beq.n	8009f4a <__pow5mult+0xa2>
 8009ece:	69fc      	ldr	r4, [r7, #28]
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	d10f      	bne.n	8009ef4 <__pow5mult+0x4c>
 8009ed4:	2010      	movs	r0, #16
 8009ed6:	f7ff fd6d 	bl	80099b4 <malloc>
 8009eda:	1e02      	subs	r2, r0, #0
 8009edc:	61f8      	str	r0, [r7, #28]
 8009ede:	d105      	bne.n	8009eec <__pow5mult+0x44>
 8009ee0:	21b4      	movs	r1, #180	@ 0xb4
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8009f54 <__pow5mult+0xac>)
 8009ee4:	481c      	ldr	r0, [pc, #112]	@ (8009f58 <__pow5mult+0xb0>)
 8009ee6:	31ff      	adds	r1, #255	@ 0xff
 8009ee8:	f000 fbde 	bl	800a6a8 <__assert_func>
 8009eec:	6044      	str	r4, [r0, #4]
 8009eee:	6084      	str	r4, [r0, #8]
 8009ef0:	6004      	str	r4, [r0, #0]
 8009ef2:	60c4      	str	r4, [r0, #12]
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	689c      	ldr	r4, [r3, #8]
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	2c00      	cmp	r4, #0
 8009efc:	d108      	bne.n	8009f10 <__pow5mult+0x68>
 8009efe:	0038      	movs	r0, r7
 8009f00:	4916      	ldr	r1, [pc, #88]	@ (8009f5c <__pow5mult+0xb4>)
 8009f02:	f7ff ff0f 	bl	8009d24 <__i2b>
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	0004      	movs	r4, r0
 8009f0a:	6098      	str	r0, [r3, #8]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	6003      	str	r3, [r0, #0]
 8009f10:	2301      	movs	r3, #1
 8009f12:	421d      	tst	r5, r3
 8009f14:	d00a      	beq.n	8009f2c <__pow5mult+0x84>
 8009f16:	0031      	movs	r1, r6
 8009f18:	0022      	movs	r2, r4
 8009f1a:	0038      	movs	r0, r7
 8009f1c:	f7ff ff1a 	bl	8009d54 <__multiply>
 8009f20:	0031      	movs	r1, r6
 8009f22:	9001      	str	r0, [sp, #4]
 8009f24:	0038      	movs	r0, r7
 8009f26:	f7ff fe45 	bl	8009bb4 <_Bfree>
 8009f2a:	9e01      	ldr	r6, [sp, #4]
 8009f2c:	106d      	asrs	r5, r5, #1
 8009f2e:	d00c      	beq.n	8009f4a <__pow5mult+0xa2>
 8009f30:	6820      	ldr	r0, [r4, #0]
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d107      	bne.n	8009f46 <__pow5mult+0x9e>
 8009f36:	0022      	movs	r2, r4
 8009f38:	0021      	movs	r1, r4
 8009f3a:	0038      	movs	r0, r7
 8009f3c:	f7ff ff0a 	bl	8009d54 <__multiply>
 8009f40:	2300      	movs	r3, #0
 8009f42:	6020      	str	r0, [r4, #0]
 8009f44:	6003      	str	r3, [r0, #0]
 8009f46:	0004      	movs	r4, r0
 8009f48:	e7e2      	b.n	8009f10 <__pow5mult+0x68>
 8009f4a:	0030      	movs	r0, r6
 8009f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f4e:	46c0      	nop			@ (mov r8, r8)
 8009f50:	0800ba44 	.word	0x0800ba44
 8009f54:	0800b911 	.word	0x0800b911
 8009f58:	0800b991 	.word	0x0800b991
 8009f5c:	00000271 	.word	0x00000271

08009f60 <__lshift>:
 8009f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f62:	000c      	movs	r4, r1
 8009f64:	0016      	movs	r6, r2
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	1157      	asrs	r7, r2, #5
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	18fb      	adds	r3, r7, r3
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	3301      	adds	r3, #1
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	6849      	ldr	r1, [r1, #4]
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	9002      	str	r0, [sp, #8]
 8009f7a:	9a00      	ldr	r2, [sp, #0]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	db10      	blt.n	8009fa2 <__lshift+0x42>
 8009f80:	9802      	ldr	r0, [sp, #8]
 8009f82:	f7ff fdd3 	bl	8009b2c <_Balloc>
 8009f86:	2300      	movs	r3, #0
 8009f88:	0001      	movs	r1, r0
 8009f8a:	0005      	movs	r5, r0
 8009f8c:	001a      	movs	r2, r3
 8009f8e:	3114      	adds	r1, #20
 8009f90:	4298      	cmp	r0, r3
 8009f92:	d10c      	bne.n	8009fae <__lshift+0x4e>
 8009f94:	21ef      	movs	r1, #239	@ 0xef
 8009f96:	002a      	movs	r2, r5
 8009f98:	4b25      	ldr	r3, [pc, #148]	@ (800a030 <__lshift+0xd0>)
 8009f9a:	4826      	ldr	r0, [pc, #152]	@ (800a034 <__lshift+0xd4>)
 8009f9c:	0049      	lsls	r1, r1, #1
 8009f9e:	f000 fb83 	bl	800a6a8 <__assert_func>
 8009fa2:	3101      	adds	r1, #1
 8009fa4:	005b      	lsls	r3, r3, #1
 8009fa6:	e7e8      	b.n	8009f7a <__lshift+0x1a>
 8009fa8:	0098      	lsls	r0, r3, #2
 8009faa:	500a      	str	r2, [r1, r0]
 8009fac:	3301      	adds	r3, #1
 8009fae:	42bb      	cmp	r3, r7
 8009fb0:	dbfa      	blt.n	8009fa8 <__lshift+0x48>
 8009fb2:	43fb      	mvns	r3, r7
 8009fb4:	17db      	asrs	r3, r3, #31
 8009fb6:	401f      	ands	r7, r3
 8009fb8:	00bf      	lsls	r7, r7, #2
 8009fba:	0023      	movs	r3, r4
 8009fbc:	201f      	movs	r0, #31
 8009fbe:	19c9      	adds	r1, r1, r7
 8009fc0:	0037      	movs	r7, r6
 8009fc2:	6922      	ldr	r2, [r4, #16]
 8009fc4:	3314      	adds	r3, #20
 8009fc6:	0092      	lsls	r2, r2, #2
 8009fc8:	189a      	adds	r2, r3, r2
 8009fca:	4007      	ands	r7, r0
 8009fcc:	4206      	tst	r6, r0
 8009fce:	d029      	beq.n	800a024 <__lshift+0xc4>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	1bc0      	subs	r0, r0, r7
 8009fd4:	9003      	str	r0, [sp, #12]
 8009fd6:	468c      	mov	ip, r1
 8009fd8:	2000      	movs	r0, #0
 8009fda:	681e      	ldr	r6, [r3, #0]
 8009fdc:	40be      	lsls	r6, r7
 8009fde:	4306      	orrs	r6, r0
 8009fe0:	4660      	mov	r0, ip
 8009fe2:	c040      	stmia	r0!, {r6}
 8009fe4:	4684      	mov	ip, r0
 8009fe6:	9e03      	ldr	r6, [sp, #12]
 8009fe8:	cb01      	ldmia	r3!, {r0}
 8009fea:	40f0      	lsrs	r0, r6
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d8f4      	bhi.n	8009fda <__lshift+0x7a>
 8009ff0:	0026      	movs	r6, r4
 8009ff2:	3615      	adds	r6, #21
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	42b2      	cmp	r2, r6
 8009ff8:	d304      	bcc.n	800a004 <__lshift+0xa4>
 8009ffa:	1b13      	subs	r3, r2, r4
 8009ffc:	3b15      	subs	r3, #21
 8009ffe:	089b      	lsrs	r3, r3, #2
 800a000:	3301      	adds	r3, #1
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	50c8      	str	r0, [r1, r3]
 800a006:	2800      	cmp	r0, #0
 800a008:	d002      	beq.n	800a010 <__lshift+0xb0>
 800a00a:	9b01      	ldr	r3, [sp, #4]
 800a00c:	3302      	adds	r3, #2
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	9b00      	ldr	r3, [sp, #0]
 800a012:	9802      	ldr	r0, [sp, #8]
 800a014:	3b01      	subs	r3, #1
 800a016:	0021      	movs	r1, r4
 800a018:	612b      	str	r3, [r5, #16]
 800a01a:	f7ff fdcb 	bl	8009bb4 <_Bfree>
 800a01e:	0028      	movs	r0, r5
 800a020:	b005      	add	sp, #20
 800a022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a024:	cb01      	ldmia	r3!, {r0}
 800a026:	c101      	stmia	r1!, {r0}
 800a028:	429a      	cmp	r2, r3
 800a02a:	d8fb      	bhi.n	800a024 <__lshift+0xc4>
 800a02c:	e7f0      	b.n	800a010 <__lshift+0xb0>
 800a02e:	46c0      	nop			@ (mov r8, r8)
 800a030:	0800b980 	.word	0x0800b980
 800a034:	0800b991 	.word	0x0800b991

0800a038 <__mcmp>:
 800a038:	b530      	push	{r4, r5, lr}
 800a03a:	690b      	ldr	r3, [r1, #16]
 800a03c:	6904      	ldr	r4, [r0, #16]
 800a03e:	0002      	movs	r2, r0
 800a040:	1ae0      	subs	r0, r4, r3
 800a042:	429c      	cmp	r4, r3
 800a044:	d10f      	bne.n	800a066 <__mcmp+0x2e>
 800a046:	3214      	adds	r2, #20
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	3114      	adds	r1, #20
 800a04c:	0014      	movs	r4, r2
 800a04e:	18c9      	adds	r1, r1, r3
 800a050:	18d2      	adds	r2, r2, r3
 800a052:	3a04      	subs	r2, #4
 800a054:	3904      	subs	r1, #4
 800a056:	6815      	ldr	r5, [r2, #0]
 800a058:	680b      	ldr	r3, [r1, #0]
 800a05a:	429d      	cmp	r5, r3
 800a05c:	d004      	beq.n	800a068 <__mcmp+0x30>
 800a05e:	2001      	movs	r0, #1
 800a060:	429d      	cmp	r5, r3
 800a062:	d200      	bcs.n	800a066 <__mcmp+0x2e>
 800a064:	3802      	subs	r0, #2
 800a066:	bd30      	pop	{r4, r5, pc}
 800a068:	4294      	cmp	r4, r2
 800a06a:	d3f2      	bcc.n	800a052 <__mcmp+0x1a>
 800a06c:	e7fb      	b.n	800a066 <__mcmp+0x2e>
	...

0800a070 <__mdiff>:
 800a070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a072:	000c      	movs	r4, r1
 800a074:	b087      	sub	sp, #28
 800a076:	9000      	str	r0, [sp, #0]
 800a078:	0011      	movs	r1, r2
 800a07a:	0020      	movs	r0, r4
 800a07c:	0017      	movs	r7, r2
 800a07e:	f7ff ffdb 	bl	800a038 <__mcmp>
 800a082:	1e05      	subs	r5, r0, #0
 800a084:	d110      	bne.n	800a0a8 <__mdiff+0x38>
 800a086:	0001      	movs	r1, r0
 800a088:	9800      	ldr	r0, [sp, #0]
 800a08a:	f7ff fd4f 	bl	8009b2c <_Balloc>
 800a08e:	1e02      	subs	r2, r0, #0
 800a090:	d104      	bne.n	800a09c <__mdiff+0x2c>
 800a092:	4b40      	ldr	r3, [pc, #256]	@ (800a194 <__mdiff+0x124>)
 800a094:	4840      	ldr	r0, [pc, #256]	@ (800a198 <__mdiff+0x128>)
 800a096:	4941      	ldr	r1, [pc, #260]	@ (800a19c <__mdiff+0x12c>)
 800a098:	f000 fb06 	bl	800a6a8 <__assert_func>
 800a09c:	2301      	movs	r3, #1
 800a09e:	6145      	str	r5, [r0, #20]
 800a0a0:	6103      	str	r3, [r0, #16]
 800a0a2:	0010      	movs	r0, r2
 800a0a4:	b007      	add	sp, #28
 800a0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a8:	2600      	movs	r6, #0
 800a0aa:	42b0      	cmp	r0, r6
 800a0ac:	da03      	bge.n	800a0b6 <__mdiff+0x46>
 800a0ae:	0023      	movs	r3, r4
 800a0b0:	003c      	movs	r4, r7
 800a0b2:	001f      	movs	r7, r3
 800a0b4:	3601      	adds	r6, #1
 800a0b6:	6861      	ldr	r1, [r4, #4]
 800a0b8:	9800      	ldr	r0, [sp, #0]
 800a0ba:	f7ff fd37 	bl	8009b2c <_Balloc>
 800a0be:	1e02      	subs	r2, r0, #0
 800a0c0:	d103      	bne.n	800a0ca <__mdiff+0x5a>
 800a0c2:	4b34      	ldr	r3, [pc, #208]	@ (800a194 <__mdiff+0x124>)
 800a0c4:	4834      	ldr	r0, [pc, #208]	@ (800a198 <__mdiff+0x128>)
 800a0c6:	4936      	ldr	r1, [pc, #216]	@ (800a1a0 <__mdiff+0x130>)
 800a0c8:	e7e6      	b.n	800a098 <__mdiff+0x28>
 800a0ca:	6923      	ldr	r3, [r4, #16]
 800a0cc:	3414      	adds	r4, #20
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	18e3      	adds	r3, r4, r3
 800a0d4:	0021      	movs	r1, r4
 800a0d6:	9401      	str	r4, [sp, #4]
 800a0d8:	003c      	movs	r4, r7
 800a0da:	9302      	str	r3, [sp, #8]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	3414      	adds	r4, #20
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	18e3      	adds	r3, r4, r3
 800a0e4:	9303      	str	r3, [sp, #12]
 800a0e6:	0003      	movs	r3, r0
 800a0e8:	60c6      	str	r6, [r0, #12]
 800a0ea:	468c      	mov	ip, r1
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	3314      	adds	r3, #20
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	4663      	mov	r3, ip
 800a0f6:	cb20      	ldmia	r3!, {r5}
 800a0f8:	b2a9      	uxth	r1, r5
 800a0fa:	000e      	movs	r6, r1
 800a0fc:	469c      	mov	ip, r3
 800a0fe:	cc08      	ldmia	r4!, {r3}
 800a100:	0c2d      	lsrs	r5, r5, #16
 800a102:	b299      	uxth	r1, r3
 800a104:	1a71      	subs	r1, r6, r1
 800a106:	1809      	adds	r1, r1, r0
 800a108:	0c1b      	lsrs	r3, r3, #16
 800a10a:	1408      	asrs	r0, r1, #16
 800a10c:	1aeb      	subs	r3, r5, r3
 800a10e:	181b      	adds	r3, r3, r0
 800a110:	1418      	asrs	r0, r3, #16
 800a112:	b289      	uxth	r1, r1
 800a114:	041b      	lsls	r3, r3, #16
 800a116:	4319      	orrs	r1, r3
 800a118:	9b05      	ldr	r3, [sp, #20]
 800a11a:	c302      	stmia	r3!, {r1}
 800a11c:	9305      	str	r3, [sp, #20]
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	42a3      	cmp	r3, r4
 800a122:	d8e7      	bhi.n	800a0f4 <__mdiff+0x84>
 800a124:	0039      	movs	r1, r7
 800a126:	9c03      	ldr	r4, [sp, #12]
 800a128:	3115      	adds	r1, #21
 800a12a:	2304      	movs	r3, #4
 800a12c:	428c      	cmp	r4, r1
 800a12e:	d304      	bcc.n	800a13a <__mdiff+0xca>
 800a130:	1be3      	subs	r3, r4, r7
 800a132:	3b15      	subs	r3, #21
 800a134:	089b      	lsrs	r3, r3, #2
 800a136:	3301      	adds	r3, #1
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	9901      	ldr	r1, [sp, #4]
 800a13c:	18cd      	adds	r5, r1, r3
 800a13e:	9904      	ldr	r1, [sp, #16]
 800a140:	002e      	movs	r6, r5
 800a142:	18cb      	adds	r3, r1, r3
 800a144:	001f      	movs	r7, r3
 800a146:	9902      	ldr	r1, [sp, #8]
 800a148:	428e      	cmp	r6, r1
 800a14a:	d311      	bcc.n	800a170 <__mdiff+0x100>
 800a14c:	9c02      	ldr	r4, [sp, #8]
 800a14e:	1ee9      	subs	r1, r5, #3
 800a150:	2000      	movs	r0, #0
 800a152:	428c      	cmp	r4, r1
 800a154:	d304      	bcc.n	800a160 <__mdiff+0xf0>
 800a156:	0021      	movs	r1, r4
 800a158:	3103      	adds	r1, #3
 800a15a:	1b49      	subs	r1, r1, r5
 800a15c:	0889      	lsrs	r1, r1, #2
 800a15e:	0088      	lsls	r0, r1, #2
 800a160:	181b      	adds	r3, r3, r0
 800a162:	3b04      	subs	r3, #4
 800a164:	6819      	ldr	r1, [r3, #0]
 800a166:	2900      	cmp	r1, #0
 800a168:	d010      	beq.n	800a18c <__mdiff+0x11c>
 800a16a:	9b00      	ldr	r3, [sp, #0]
 800a16c:	6113      	str	r3, [r2, #16]
 800a16e:	e798      	b.n	800a0a2 <__mdiff+0x32>
 800a170:	4684      	mov	ip, r0
 800a172:	ce02      	ldmia	r6!, {r1}
 800a174:	b288      	uxth	r0, r1
 800a176:	4460      	add	r0, ip
 800a178:	1400      	asrs	r0, r0, #16
 800a17a:	0c0c      	lsrs	r4, r1, #16
 800a17c:	1904      	adds	r4, r0, r4
 800a17e:	4461      	add	r1, ip
 800a180:	1420      	asrs	r0, r4, #16
 800a182:	b289      	uxth	r1, r1
 800a184:	0424      	lsls	r4, r4, #16
 800a186:	4321      	orrs	r1, r4
 800a188:	c702      	stmia	r7!, {r1}
 800a18a:	e7dc      	b.n	800a146 <__mdiff+0xd6>
 800a18c:	9900      	ldr	r1, [sp, #0]
 800a18e:	3901      	subs	r1, #1
 800a190:	9100      	str	r1, [sp, #0]
 800a192:	e7e6      	b.n	800a162 <__mdiff+0xf2>
 800a194:	0800b980 	.word	0x0800b980
 800a198:	0800b991 	.word	0x0800b991
 800a19c:	00000237 	.word	0x00000237
 800a1a0:	00000245 	.word	0x00000245

0800a1a4 <__d2b>:
 800a1a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	0016      	movs	r6, r2
 800a1aa:	001f      	movs	r7, r3
 800a1ac:	f7ff fcbe 	bl	8009b2c <_Balloc>
 800a1b0:	1e04      	subs	r4, r0, #0
 800a1b2:	d105      	bne.n	800a1c0 <__d2b+0x1c>
 800a1b4:	0022      	movs	r2, r4
 800a1b6:	4b25      	ldr	r3, [pc, #148]	@ (800a24c <__d2b+0xa8>)
 800a1b8:	4825      	ldr	r0, [pc, #148]	@ (800a250 <__d2b+0xac>)
 800a1ba:	4926      	ldr	r1, [pc, #152]	@ (800a254 <__d2b+0xb0>)
 800a1bc:	f000 fa74 	bl	800a6a8 <__assert_func>
 800a1c0:	033b      	lsls	r3, r7, #12
 800a1c2:	007d      	lsls	r5, r7, #1
 800a1c4:	0b1b      	lsrs	r3, r3, #12
 800a1c6:	0d6d      	lsrs	r5, r5, #21
 800a1c8:	d002      	beq.n	800a1d0 <__d2b+0x2c>
 800a1ca:	2280      	movs	r2, #128	@ 0x80
 800a1cc:	0352      	lsls	r2, r2, #13
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	2e00      	cmp	r6, #0
 800a1d4:	d025      	beq.n	800a222 <__d2b+0x7e>
 800a1d6:	4668      	mov	r0, sp
 800a1d8:	9600      	str	r6, [sp, #0]
 800a1da:	f7ff fd74 	bl	8009cc6 <__lo0bits>
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	9900      	ldr	r1, [sp, #0]
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d01b      	beq.n	800a21e <__d2b+0x7a>
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	001e      	movs	r6, r3
 800a1ea:	1a12      	subs	r2, r2, r0
 800a1ec:	4096      	lsls	r6, r2
 800a1ee:	0032      	movs	r2, r6
 800a1f0:	40c3      	lsrs	r3, r0
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	6162      	str	r2, [r4, #20]
 800a1f6:	9301      	str	r3, [sp, #4]
 800a1f8:	9e01      	ldr	r6, [sp, #4]
 800a1fa:	61a6      	str	r6, [r4, #24]
 800a1fc:	1e73      	subs	r3, r6, #1
 800a1fe:	419e      	sbcs	r6, r3
 800a200:	3601      	adds	r6, #1
 800a202:	6126      	str	r6, [r4, #16]
 800a204:	2d00      	cmp	r5, #0
 800a206:	d014      	beq.n	800a232 <__d2b+0x8e>
 800a208:	2635      	movs	r6, #53	@ 0x35
 800a20a:	4b13      	ldr	r3, [pc, #76]	@ (800a258 <__d2b+0xb4>)
 800a20c:	18ed      	adds	r5, r5, r3
 800a20e:	9b08      	ldr	r3, [sp, #32]
 800a210:	182d      	adds	r5, r5, r0
 800a212:	601d      	str	r5, [r3, #0]
 800a214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a216:	1a36      	subs	r6, r6, r0
 800a218:	601e      	str	r6, [r3, #0]
 800a21a:	0020      	movs	r0, r4
 800a21c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a21e:	6161      	str	r1, [r4, #20]
 800a220:	e7ea      	b.n	800a1f8 <__d2b+0x54>
 800a222:	a801      	add	r0, sp, #4
 800a224:	f7ff fd4f 	bl	8009cc6 <__lo0bits>
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	2601      	movs	r6, #1
 800a22c:	6163      	str	r3, [r4, #20]
 800a22e:	3020      	adds	r0, #32
 800a230:	e7e7      	b.n	800a202 <__d2b+0x5e>
 800a232:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <__d2b+0xb8>)
 800a234:	18c0      	adds	r0, r0, r3
 800a236:	9b08      	ldr	r3, [sp, #32]
 800a238:	6018      	str	r0, [r3, #0]
 800a23a:	4b09      	ldr	r3, [pc, #36]	@ (800a260 <__d2b+0xbc>)
 800a23c:	18f3      	adds	r3, r6, r3
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	18e3      	adds	r3, r4, r3
 800a242:	6958      	ldr	r0, [r3, #20]
 800a244:	f7ff fd1e 	bl	8009c84 <__hi0bits>
 800a248:	0176      	lsls	r6, r6, #5
 800a24a:	e7e3      	b.n	800a214 <__d2b+0x70>
 800a24c:	0800b980 	.word	0x0800b980
 800a250:	0800b991 	.word	0x0800b991
 800a254:	0000030f 	.word	0x0000030f
 800a258:	fffffbcd 	.word	0xfffffbcd
 800a25c:	fffffbce 	.word	0xfffffbce
 800a260:	3fffffff 	.word	0x3fffffff

0800a264 <__ssputs_r>:
 800a264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a266:	688e      	ldr	r6, [r1, #8]
 800a268:	b085      	sub	sp, #20
 800a26a:	001f      	movs	r7, r3
 800a26c:	000c      	movs	r4, r1
 800a26e:	680b      	ldr	r3, [r1, #0]
 800a270:	9002      	str	r0, [sp, #8]
 800a272:	9203      	str	r2, [sp, #12]
 800a274:	42be      	cmp	r6, r7
 800a276:	d830      	bhi.n	800a2da <__ssputs_r+0x76>
 800a278:	210c      	movs	r1, #12
 800a27a:	5e62      	ldrsh	r2, [r4, r1]
 800a27c:	2190      	movs	r1, #144	@ 0x90
 800a27e:	00c9      	lsls	r1, r1, #3
 800a280:	420a      	tst	r2, r1
 800a282:	d028      	beq.n	800a2d6 <__ssputs_r+0x72>
 800a284:	2003      	movs	r0, #3
 800a286:	6921      	ldr	r1, [r4, #16]
 800a288:	1a5b      	subs	r3, r3, r1
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	6963      	ldr	r3, [r4, #20]
 800a28e:	4343      	muls	r3, r0
 800a290:	9801      	ldr	r0, [sp, #4]
 800a292:	0fdd      	lsrs	r5, r3, #31
 800a294:	18ed      	adds	r5, r5, r3
 800a296:	1c7b      	adds	r3, r7, #1
 800a298:	181b      	adds	r3, r3, r0
 800a29a:	106d      	asrs	r5, r5, #1
 800a29c:	42ab      	cmp	r3, r5
 800a29e:	d900      	bls.n	800a2a2 <__ssputs_r+0x3e>
 800a2a0:	001d      	movs	r5, r3
 800a2a2:	0552      	lsls	r2, r2, #21
 800a2a4:	d528      	bpl.n	800a2f8 <__ssputs_r+0x94>
 800a2a6:	0029      	movs	r1, r5
 800a2a8:	9802      	ldr	r0, [sp, #8]
 800a2aa:	f7ff fbaf 	bl	8009a0c <_malloc_r>
 800a2ae:	1e06      	subs	r6, r0, #0
 800a2b0:	d02c      	beq.n	800a30c <__ssputs_r+0xa8>
 800a2b2:	9a01      	ldr	r2, [sp, #4]
 800a2b4:	6921      	ldr	r1, [r4, #16]
 800a2b6:	f7fe fcb5 	bl	8008c24 <memcpy>
 800a2ba:	89a2      	ldrh	r2, [r4, #12]
 800a2bc:	4b18      	ldr	r3, [pc, #96]	@ (800a320 <__ssputs_r+0xbc>)
 800a2be:	401a      	ands	r2, r3
 800a2c0:	2380      	movs	r3, #128	@ 0x80
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	81a3      	strh	r3, [r4, #12]
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	6126      	str	r6, [r4, #16]
 800a2ca:	18f6      	adds	r6, r6, r3
 800a2cc:	6026      	str	r6, [r4, #0]
 800a2ce:	003e      	movs	r6, r7
 800a2d0:	6165      	str	r5, [r4, #20]
 800a2d2:	1aed      	subs	r5, r5, r3
 800a2d4:	60a5      	str	r5, [r4, #8]
 800a2d6:	42be      	cmp	r6, r7
 800a2d8:	d900      	bls.n	800a2dc <__ssputs_r+0x78>
 800a2da:	003e      	movs	r6, r7
 800a2dc:	0032      	movs	r2, r6
 800a2de:	9903      	ldr	r1, [sp, #12]
 800a2e0:	6820      	ldr	r0, [r4, #0]
 800a2e2:	f7fe fbfb 	bl	8008adc <memmove>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	68a3      	ldr	r3, [r4, #8]
 800a2ea:	1b9b      	subs	r3, r3, r6
 800a2ec:	60a3      	str	r3, [r4, #8]
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	199b      	adds	r3, r3, r6
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	b005      	add	sp, #20
 800a2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f8:	002a      	movs	r2, r5
 800a2fa:	9802      	ldr	r0, [sp, #8]
 800a2fc:	f000 fa31 	bl	800a762 <_realloc_r>
 800a300:	1e06      	subs	r6, r0, #0
 800a302:	d1e0      	bne.n	800a2c6 <__ssputs_r+0x62>
 800a304:	6921      	ldr	r1, [r4, #16]
 800a306:	9802      	ldr	r0, [sp, #8]
 800a308:	f7ff fb0a 	bl	8009920 <_free_r>
 800a30c:	230c      	movs	r3, #12
 800a30e:	2001      	movs	r0, #1
 800a310:	9a02      	ldr	r2, [sp, #8]
 800a312:	4240      	negs	r0, r0
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	89a2      	ldrh	r2, [r4, #12]
 800a318:	3334      	adds	r3, #52	@ 0x34
 800a31a:	4313      	orrs	r3, r2
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	e7e9      	b.n	800a2f4 <__ssputs_r+0x90>
 800a320:	fffffb7f 	.word	0xfffffb7f

0800a324 <_svfiprintf_r>:
 800a324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a326:	b0a1      	sub	sp, #132	@ 0x84
 800a328:	9003      	str	r0, [sp, #12]
 800a32a:	001d      	movs	r5, r3
 800a32c:	898b      	ldrh	r3, [r1, #12]
 800a32e:	000f      	movs	r7, r1
 800a330:	0016      	movs	r6, r2
 800a332:	061b      	lsls	r3, r3, #24
 800a334:	d511      	bpl.n	800a35a <_svfiprintf_r+0x36>
 800a336:	690b      	ldr	r3, [r1, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10e      	bne.n	800a35a <_svfiprintf_r+0x36>
 800a33c:	2140      	movs	r1, #64	@ 0x40
 800a33e:	f7ff fb65 	bl	8009a0c <_malloc_r>
 800a342:	6038      	str	r0, [r7, #0]
 800a344:	6138      	str	r0, [r7, #16]
 800a346:	2800      	cmp	r0, #0
 800a348:	d105      	bne.n	800a356 <_svfiprintf_r+0x32>
 800a34a:	230c      	movs	r3, #12
 800a34c:	9a03      	ldr	r2, [sp, #12]
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	2001      	movs	r0, #1
 800a352:	4240      	negs	r0, r0
 800a354:	e0cf      	b.n	800a4f6 <_svfiprintf_r+0x1d2>
 800a356:	2340      	movs	r3, #64	@ 0x40
 800a358:	617b      	str	r3, [r7, #20]
 800a35a:	2300      	movs	r3, #0
 800a35c:	ac08      	add	r4, sp, #32
 800a35e:	6163      	str	r3, [r4, #20]
 800a360:	3320      	adds	r3, #32
 800a362:	7663      	strb	r3, [r4, #25]
 800a364:	3310      	adds	r3, #16
 800a366:	76a3      	strb	r3, [r4, #26]
 800a368:	9507      	str	r5, [sp, #28]
 800a36a:	0035      	movs	r5, r6
 800a36c:	782b      	ldrb	r3, [r5, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <_svfiprintf_r+0x52>
 800a372:	2b25      	cmp	r3, #37	@ 0x25
 800a374:	d148      	bne.n	800a408 <_svfiprintf_r+0xe4>
 800a376:	1bab      	subs	r3, r5, r6
 800a378:	9305      	str	r3, [sp, #20]
 800a37a:	42b5      	cmp	r5, r6
 800a37c:	d00b      	beq.n	800a396 <_svfiprintf_r+0x72>
 800a37e:	0032      	movs	r2, r6
 800a380:	0039      	movs	r1, r7
 800a382:	9803      	ldr	r0, [sp, #12]
 800a384:	f7ff ff6e 	bl	800a264 <__ssputs_r>
 800a388:	3001      	adds	r0, #1
 800a38a:	d100      	bne.n	800a38e <_svfiprintf_r+0x6a>
 800a38c:	e0ae      	b.n	800a4ec <_svfiprintf_r+0x1c8>
 800a38e:	6963      	ldr	r3, [r4, #20]
 800a390:	9a05      	ldr	r2, [sp, #20]
 800a392:	189b      	adds	r3, r3, r2
 800a394:	6163      	str	r3, [r4, #20]
 800a396:	782b      	ldrb	r3, [r5, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d100      	bne.n	800a39e <_svfiprintf_r+0x7a>
 800a39c:	e0a6      	b.n	800a4ec <_svfiprintf_r+0x1c8>
 800a39e:	2201      	movs	r2, #1
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4252      	negs	r2, r2
 800a3a4:	6062      	str	r2, [r4, #4]
 800a3a6:	a904      	add	r1, sp, #16
 800a3a8:	3254      	adds	r2, #84	@ 0x54
 800a3aa:	1852      	adds	r2, r2, r1
 800a3ac:	1c6e      	adds	r6, r5, #1
 800a3ae:	6023      	str	r3, [r4, #0]
 800a3b0:	60e3      	str	r3, [r4, #12]
 800a3b2:	60a3      	str	r3, [r4, #8]
 800a3b4:	7013      	strb	r3, [r2, #0]
 800a3b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a3b8:	4b54      	ldr	r3, [pc, #336]	@ (800a50c <_svfiprintf_r+0x1e8>)
 800a3ba:	2205      	movs	r2, #5
 800a3bc:	0018      	movs	r0, r3
 800a3be:	7831      	ldrb	r1, [r6, #0]
 800a3c0:	9305      	str	r3, [sp, #20]
 800a3c2:	f7fe fc24 	bl	8008c0e <memchr>
 800a3c6:	1c75      	adds	r5, r6, #1
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d11f      	bne.n	800a40c <_svfiprintf_r+0xe8>
 800a3cc:	6822      	ldr	r2, [r4, #0]
 800a3ce:	06d3      	lsls	r3, r2, #27
 800a3d0:	d504      	bpl.n	800a3dc <_svfiprintf_r+0xb8>
 800a3d2:	2353      	movs	r3, #83	@ 0x53
 800a3d4:	a904      	add	r1, sp, #16
 800a3d6:	185b      	adds	r3, r3, r1
 800a3d8:	2120      	movs	r1, #32
 800a3da:	7019      	strb	r1, [r3, #0]
 800a3dc:	0713      	lsls	r3, r2, #28
 800a3de:	d504      	bpl.n	800a3ea <_svfiprintf_r+0xc6>
 800a3e0:	2353      	movs	r3, #83	@ 0x53
 800a3e2:	a904      	add	r1, sp, #16
 800a3e4:	185b      	adds	r3, r3, r1
 800a3e6:	212b      	movs	r1, #43	@ 0x2b
 800a3e8:	7019      	strb	r1, [r3, #0]
 800a3ea:	7833      	ldrb	r3, [r6, #0]
 800a3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ee:	d016      	beq.n	800a41e <_svfiprintf_r+0xfa>
 800a3f0:	0035      	movs	r5, r6
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	200a      	movs	r0, #10
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	782a      	ldrb	r2, [r5, #0]
 800a3fa:	1c6e      	adds	r6, r5, #1
 800a3fc:	3a30      	subs	r2, #48	@ 0x30
 800a3fe:	2a09      	cmp	r2, #9
 800a400:	d950      	bls.n	800a4a4 <_svfiprintf_r+0x180>
 800a402:	2900      	cmp	r1, #0
 800a404:	d111      	bne.n	800a42a <_svfiprintf_r+0x106>
 800a406:	e017      	b.n	800a438 <_svfiprintf_r+0x114>
 800a408:	3501      	adds	r5, #1
 800a40a:	e7af      	b.n	800a36c <_svfiprintf_r+0x48>
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	6822      	ldr	r2, [r4, #0]
 800a410:	1ac0      	subs	r0, r0, r3
 800a412:	2301      	movs	r3, #1
 800a414:	4083      	lsls	r3, r0
 800a416:	4313      	orrs	r3, r2
 800a418:	002e      	movs	r6, r5
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	e7cc      	b.n	800a3b8 <_svfiprintf_r+0x94>
 800a41e:	9b07      	ldr	r3, [sp, #28]
 800a420:	1d19      	adds	r1, r3, #4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	9107      	str	r1, [sp, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	db01      	blt.n	800a42e <_svfiprintf_r+0x10a>
 800a42a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a42c:	e004      	b.n	800a438 <_svfiprintf_r+0x114>
 800a42e:	425b      	negs	r3, r3
 800a430:	60e3      	str	r3, [r4, #12]
 800a432:	2302      	movs	r3, #2
 800a434:	4313      	orrs	r3, r2
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	782b      	ldrb	r3, [r5, #0]
 800a43a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a43c:	d10c      	bne.n	800a458 <_svfiprintf_r+0x134>
 800a43e:	786b      	ldrb	r3, [r5, #1]
 800a440:	2b2a      	cmp	r3, #42	@ 0x2a
 800a442:	d134      	bne.n	800a4ae <_svfiprintf_r+0x18a>
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	3502      	adds	r5, #2
 800a448:	1d1a      	adds	r2, r3, #4
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	9207      	str	r2, [sp, #28]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	da01      	bge.n	800a456 <_svfiprintf_r+0x132>
 800a452:	2301      	movs	r3, #1
 800a454:	425b      	negs	r3, r3
 800a456:	9309      	str	r3, [sp, #36]	@ 0x24
 800a458:	4e2d      	ldr	r6, [pc, #180]	@ (800a510 <_svfiprintf_r+0x1ec>)
 800a45a:	2203      	movs	r2, #3
 800a45c:	0030      	movs	r0, r6
 800a45e:	7829      	ldrb	r1, [r5, #0]
 800a460:	f7fe fbd5 	bl	8008c0e <memchr>
 800a464:	2800      	cmp	r0, #0
 800a466:	d006      	beq.n	800a476 <_svfiprintf_r+0x152>
 800a468:	2340      	movs	r3, #64	@ 0x40
 800a46a:	1b80      	subs	r0, r0, r6
 800a46c:	4083      	lsls	r3, r0
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	3501      	adds	r5, #1
 800a472:	4313      	orrs	r3, r2
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	7829      	ldrb	r1, [r5, #0]
 800a478:	2206      	movs	r2, #6
 800a47a:	4826      	ldr	r0, [pc, #152]	@ (800a514 <_svfiprintf_r+0x1f0>)
 800a47c:	1c6e      	adds	r6, r5, #1
 800a47e:	7621      	strb	r1, [r4, #24]
 800a480:	f7fe fbc5 	bl	8008c0e <memchr>
 800a484:	2800      	cmp	r0, #0
 800a486:	d038      	beq.n	800a4fa <_svfiprintf_r+0x1d6>
 800a488:	4b23      	ldr	r3, [pc, #140]	@ (800a518 <_svfiprintf_r+0x1f4>)
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d122      	bne.n	800a4d4 <_svfiprintf_r+0x1b0>
 800a48e:	2207      	movs	r2, #7
 800a490:	9b07      	ldr	r3, [sp, #28]
 800a492:	3307      	adds	r3, #7
 800a494:	4393      	bics	r3, r2
 800a496:	3308      	adds	r3, #8
 800a498:	9307      	str	r3, [sp, #28]
 800a49a:	6963      	ldr	r3, [r4, #20]
 800a49c:	9a04      	ldr	r2, [sp, #16]
 800a49e:	189b      	adds	r3, r3, r2
 800a4a0:	6163      	str	r3, [r4, #20]
 800a4a2:	e762      	b.n	800a36a <_svfiprintf_r+0x46>
 800a4a4:	4343      	muls	r3, r0
 800a4a6:	0035      	movs	r5, r6
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	e7a4      	b.n	800a3f8 <_svfiprintf_r+0xd4>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	200a      	movs	r0, #10
 800a4b2:	0019      	movs	r1, r3
 800a4b4:	3501      	adds	r5, #1
 800a4b6:	6063      	str	r3, [r4, #4]
 800a4b8:	782a      	ldrb	r2, [r5, #0]
 800a4ba:	1c6e      	adds	r6, r5, #1
 800a4bc:	3a30      	subs	r2, #48	@ 0x30
 800a4be:	2a09      	cmp	r2, #9
 800a4c0:	d903      	bls.n	800a4ca <_svfiprintf_r+0x1a6>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0c8      	beq.n	800a458 <_svfiprintf_r+0x134>
 800a4c6:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4c8:	e7c6      	b.n	800a458 <_svfiprintf_r+0x134>
 800a4ca:	4341      	muls	r1, r0
 800a4cc:	0035      	movs	r5, r6
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	1889      	adds	r1, r1, r2
 800a4d2:	e7f1      	b.n	800a4b8 <_svfiprintf_r+0x194>
 800a4d4:	aa07      	add	r2, sp, #28
 800a4d6:	9200      	str	r2, [sp, #0]
 800a4d8:	0021      	movs	r1, r4
 800a4da:	003a      	movs	r2, r7
 800a4dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a51c <_svfiprintf_r+0x1f8>)
 800a4de:	9803      	ldr	r0, [sp, #12]
 800a4e0:	f7fd fe10 	bl	8008104 <_printf_float>
 800a4e4:	9004      	str	r0, [sp, #16]
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	d1d6      	bne.n	800a49a <_svfiprintf_r+0x176>
 800a4ec:	89bb      	ldrh	r3, [r7, #12]
 800a4ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a4f0:	065b      	lsls	r3, r3, #25
 800a4f2:	d500      	bpl.n	800a4f6 <_svfiprintf_r+0x1d2>
 800a4f4:	e72c      	b.n	800a350 <_svfiprintf_r+0x2c>
 800a4f6:	b021      	add	sp, #132	@ 0x84
 800a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4fa:	aa07      	add	r2, sp, #28
 800a4fc:	9200      	str	r2, [sp, #0]
 800a4fe:	0021      	movs	r1, r4
 800a500:	003a      	movs	r2, r7
 800a502:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <_svfiprintf_r+0x1f8>)
 800a504:	9803      	ldr	r0, [sp, #12]
 800a506:	f7fe f8ab 	bl	8008660 <_printf_i>
 800a50a:	e7eb      	b.n	800a4e4 <_svfiprintf_r+0x1c0>
 800a50c:	0800b9ea 	.word	0x0800b9ea
 800a510:	0800b9f0 	.word	0x0800b9f0
 800a514:	0800b9f4 	.word	0x0800b9f4
 800a518:	08008105 	.word	0x08008105
 800a51c:	0800a265 	.word	0x0800a265

0800a520 <__sflush_r>:
 800a520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a522:	220c      	movs	r2, #12
 800a524:	5e8b      	ldrsh	r3, [r1, r2]
 800a526:	0005      	movs	r5, r0
 800a528:	000c      	movs	r4, r1
 800a52a:	071a      	lsls	r2, r3, #28
 800a52c:	d456      	bmi.n	800a5dc <__sflush_r+0xbc>
 800a52e:	684a      	ldr	r2, [r1, #4]
 800a530:	2a00      	cmp	r2, #0
 800a532:	dc02      	bgt.n	800a53a <__sflush_r+0x1a>
 800a534:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a536:	2a00      	cmp	r2, #0
 800a538:	dd4e      	ble.n	800a5d8 <__sflush_r+0xb8>
 800a53a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a53c:	2f00      	cmp	r7, #0
 800a53e:	d04b      	beq.n	800a5d8 <__sflush_r+0xb8>
 800a540:	2200      	movs	r2, #0
 800a542:	2080      	movs	r0, #128	@ 0x80
 800a544:	682e      	ldr	r6, [r5, #0]
 800a546:	602a      	str	r2, [r5, #0]
 800a548:	001a      	movs	r2, r3
 800a54a:	0140      	lsls	r0, r0, #5
 800a54c:	6a21      	ldr	r1, [r4, #32]
 800a54e:	4002      	ands	r2, r0
 800a550:	4203      	tst	r3, r0
 800a552:	d033      	beq.n	800a5bc <__sflush_r+0x9c>
 800a554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	075b      	lsls	r3, r3, #29
 800a55a:	d506      	bpl.n	800a56a <__sflush_r+0x4a>
 800a55c:	6863      	ldr	r3, [r4, #4]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <__sflush_r+0x4a>
 800a566:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a568:	1ad2      	subs	r2, r2, r3
 800a56a:	2300      	movs	r3, #0
 800a56c:	0028      	movs	r0, r5
 800a56e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a570:	6a21      	ldr	r1, [r4, #32]
 800a572:	47b8      	blx	r7
 800a574:	89a2      	ldrh	r2, [r4, #12]
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d106      	bne.n	800a588 <__sflush_r+0x68>
 800a57a:	6829      	ldr	r1, [r5, #0]
 800a57c:	291d      	cmp	r1, #29
 800a57e:	d846      	bhi.n	800a60e <__sflush_r+0xee>
 800a580:	4b29      	ldr	r3, [pc, #164]	@ (800a628 <__sflush_r+0x108>)
 800a582:	40cb      	lsrs	r3, r1
 800a584:	07db      	lsls	r3, r3, #31
 800a586:	d542      	bpl.n	800a60e <__sflush_r+0xee>
 800a588:	2300      	movs	r3, #0
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	6923      	ldr	r3, [r4, #16]
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	04d2      	lsls	r2, r2, #19
 800a592:	d505      	bpl.n	800a5a0 <__sflush_r+0x80>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <__sflush_r+0x7e>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d100      	bne.n	800a5a0 <__sflush_r+0x80>
 800a59e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5a2:	602e      	str	r6, [r5, #0]
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	d017      	beq.n	800a5d8 <__sflush_r+0xb8>
 800a5a8:	0023      	movs	r3, r4
 800a5aa:	3344      	adds	r3, #68	@ 0x44
 800a5ac:	4299      	cmp	r1, r3
 800a5ae:	d002      	beq.n	800a5b6 <__sflush_r+0x96>
 800a5b0:	0028      	movs	r0, r5
 800a5b2:	f7ff f9b5 	bl	8009920 <_free_r>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5ba:	e00d      	b.n	800a5d8 <__sflush_r+0xb8>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	0028      	movs	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	0002      	movs	r2, r0
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d1c6      	bne.n	800a556 <__sflush_r+0x36>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0c3      	beq.n	800a556 <__sflush_r+0x36>
 800a5ce:	2b1d      	cmp	r3, #29
 800a5d0:	d001      	beq.n	800a5d6 <__sflush_r+0xb6>
 800a5d2:	2b16      	cmp	r3, #22
 800a5d4:	d11a      	bne.n	800a60c <__sflush_r+0xec>
 800a5d6:	602e      	str	r6, [r5, #0]
 800a5d8:	2000      	movs	r0, #0
 800a5da:	e01e      	b.n	800a61a <__sflush_r+0xfa>
 800a5dc:	690e      	ldr	r6, [r1, #16]
 800a5de:	2e00      	cmp	r6, #0
 800a5e0:	d0fa      	beq.n	800a5d8 <__sflush_r+0xb8>
 800a5e2:	680f      	ldr	r7, [r1, #0]
 800a5e4:	600e      	str	r6, [r1, #0]
 800a5e6:	1bba      	subs	r2, r7, r6
 800a5e8:	9201      	str	r2, [sp, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	079b      	lsls	r3, r3, #30
 800a5ee:	d100      	bne.n	800a5f2 <__sflush_r+0xd2>
 800a5f0:	694a      	ldr	r2, [r1, #20]
 800a5f2:	60a2      	str	r2, [r4, #8]
 800a5f4:	9b01      	ldr	r3, [sp, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	ddee      	ble.n	800a5d8 <__sflush_r+0xb8>
 800a5fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a5fc:	0032      	movs	r2, r6
 800a5fe:	001f      	movs	r7, r3
 800a600:	0028      	movs	r0, r5
 800a602:	9b01      	ldr	r3, [sp, #4]
 800a604:	6a21      	ldr	r1, [r4, #32]
 800a606:	47b8      	blx	r7
 800a608:	2800      	cmp	r0, #0
 800a60a:	dc07      	bgt.n	800a61c <__sflush_r+0xfc>
 800a60c:	89a2      	ldrh	r2, [r4, #12]
 800a60e:	2340      	movs	r3, #64	@ 0x40
 800a610:	2001      	movs	r0, #1
 800a612:	4313      	orrs	r3, r2
 800a614:	b21b      	sxth	r3, r3
 800a616:	81a3      	strh	r3, [r4, #12]
 800a618:	4240      	negs	r0, r0
 800a61a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	1836      	adds	r6, r6, r0
 800a620:	1a1b      	subs	r3, r3, r0
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	e7e6      	b.n	800a5f4 <__sflush_r+0xd4>
 800a626:	46c0      	nop			@ (mov r8, r8)
 800a628:	20400001 	.word	0x20400001

0800a62c <_fflush_r>:
 800a62c:	690b      	ldr	r3, [r1, #16]
 800a62e:	b570      	push	{r4, r5, r6, lr}
 800a630:	0005      	movs	r5, r0
 800a632:	000c      	movs	r4, r1
 800a634:	2b00      	cmp	r3, #0
 800a636:	d102      	bne.n	800a63e <_fflush_r+0x12>
 800a638:	2500      	movs	r5, #0
 800a63a:	0028      	movs	r0, r5
 800a63c:	bd70      	pop	{r4, r5, r6, pc}
 800a63e:	2800      	cmp	r0, #0
 800a640:	d004      	beq.n	800a64c <_fflush_r+0x20>
 800a642:	6a03      	ldr	r3, [r0, #32]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <_fflush_r+0x20>
 800a648:	f7fe f9a6 	bl	8008998 <__sinit>
 800a64c:	220c      	movs	r2, #12
 800a64e:	5ea3      	ldrsh	r3, [r4, r2]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0f1      	beq.n	800a638 <_fflush_r+0xc>
 800a654:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a656:	07d2      	lsls	r2, r2, #31
 800a658:	d404      	bmi.n	800a664 <_fflush_r+0x38>
 800a65a:	059b      	lsls	r3, r3, #22
 800a65c:	d402      	bmi.n	800a664 <_fflush_r+0x38>
 800a65e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a660:	f7fe fad3 	bl	8008c0a <__retarget_lock_acquire_recursive>
 800a664:	0028      	movs	r0, r5
 800a666:	0021      	movs	r1, r4
 800a668:	f7ff ff5a 	bl	800a520 <__sflush_r>
 800a66c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a66e:	0005      	movs	r5, r0
 800a670:	07db      	lsls	r3, r3, #31
 800a672:	d4e2      	bmi.n	800a63a <_fflush_r+0xe>
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	059b      	lsls	r3, r3, #22
 800a678:	d4df      	bmi.n	800a63a <_fflush_r+0xe>
 800a67a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a67c:	f7fe fac6 	bl	8008c0c <__retarget_lock_release_recursive>
 800a680:	e7db      	b.n	800a63a <_fflush_r+0xe>
	...

0800a684 <_sbrk_r>:
 800a684:	2300      	movs	r3, #0
 800a686:	b570      	push	{r4, r5, r6, lr}
 800a688:	4d06      	ldr	r5, [pc, #24]	@ (800a6a4 <_sbrk_r+0x20>)
 800a68a:	0004      	movs	r4, r0
 800a68c:	0008      	movs	r0, r1
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	f7f9 fc8e 	bl	8003fb0 <_sbrk>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d103      	bne.n	800a6a0 <_sbrk_r+0x1c>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d000      	beq.n	800a6a0 <_sbrk_r+0x1c>
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	bd70      	pop	{r4, r5, r6, pc}
 800a6a2:	46c0      	nop			@ (mov r8, r8)
 800a6a4:	2000055c 	.word	0x2000055c

0800a6a8 <__assert_func>:
 800a6a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a6aa:	0014      	movs	r4, r2
 800a6ac:	001a      	movs	r2, r3
 800a6ae:	4b09      	ldr	r3, [pc, #36]	@ (800a6d4 <__assert_func+0x2c>)
 800a6b0:	0005      	movs	r5, r0
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	000e      	movs	r6, r1
 800a6b6:	68d8      	ldr	r0, [r3, #12]
 800a6b8:	4b07      	ldr	r3, [pc, #28]	@ (800a6d8 <__assert_func+0x30>)
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d101      	bne.n	800a6c2 <__assert_func+0x1a>
 800a6be:	4b07      	ldr	r3, [pc, #28]	@ (800a6dc <__assert_func+0x34>)
 800a6c0:	001c      	movs	r4, r3
 800a6c2:	4907      	ldr	r1, [pc, #28]	@ (800a6e0 <__assert_func+0x38>)
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	9402      	str	r4, [sp, #8]
 800a6c8:	002b      	movs	r3, r5
 800a6ca:	9600      	str	r6, [sp, #0]
 800a6cc:	f000 f886 	bl	800a7dc <fiprintf>
 800a6d0:	f000 f894 	bl	800a7fc <abort>
 800a6d4:	20000018 	.word	0x20000018
 800a6d8:	0800ba05 	.word	0x0800ba05
 800a6dc:	0800ba40 	.word	0x0800ba40
 800a6e0:	0800ba12 	.word	0x0800ba12

0800a6e4 <_calloc_r>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	0c0b      	lsrs	r3, r1, #16
 800a6e8:	0c15      	lsrs	r5, r2, #16
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d11e      	bne.n	800a72c <_calloc_r+0x48>
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	d10c      	bne.n	800a70c <_calloc_r+0x28>
 800a6f2:	b289      	uxth	r1, r1
 800a6f4:	b294      	uxth	r4, r2
 800a6f6:	434c      	muls	r4, r1
 800a6f8:	0021      	movs	r1, r4
 800a6fa:	f7ff f987 	bl	8009a0c <_malloc_r>
 800a6fe:	1e05      	subs	r5, r0, #0
 800a700:	d01b      	beq.n	800a73a <_calloc_r+0x56>
 800a702:	0022      	movs	r2, r4
 800a704:	2100      	movs	r1, #0
 800a706:	f7fe f9fb 	bl	8008b00 <memset>
 800a70a:	e016      	b.n	800a73a <_calloc_r+0x56>
 800a70c:	1c2b      	adds	r3, r5, #0
 800a70e:	1c0c      	adds	r4, r1, #0
 800a710:	b289      	uxth	r1, r1
 800a712:	b292      	uxth	r2, r2
 800a714:	434a      	muls	r2, r1
 800a716:	b29b      	uxth	r3, r3
 800a718:	b2a1      	uxth	r1, r4
 800a71a:	4359      	muls	r1, r3
 800a71c:	0c14      	lsrs	r4, r2, #16
 800a71e:	190c      	adds	r4, r1, r4
 800a720:	0c23      	lsrs	r3, r4, #16
 800a722:	d107      	bne.n	800a734 <_calloc_r+0x50>
 800a724:	0424      	lsls	r4, r4, #16
 800a726:	b292      	uxth	r2, r2
 800a728:	4314      	orrs	r4, r2
 800a72a:	e7e5      	b.n	800a6f8 <_calloc_r+0x14>
 800a72c:	2d00      	cmp	r5, #0
 800a72e:	d101      	bne.n	800a734 <_calloc_r+0x50>
 800a730:	1c14      	adds	r4, r2, #0
 800a732:	e7ed      	b.n	800a710 <_calloc_r+0x2c>
 800a734:	230c      	movs	r3, #12
 800a736:	2500      	movs	r5, #0
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	0028      	movs	r0, r5
 800a73c:	bd70      	pop	{r4, r5, r6, pc}

0800a73e <__ascii_mbtowc>:
 800a73e:	b082      	sub	sp, #8
 800a740:	2900      	cmp	r1, #0
 800a742:	d100      	bne.n	800a746 <__ascii_mbtowc+0x8>
 800a744:	a901      	add	r1, sp, #4
 800a746:	1e10      	subs	r0, r2, #0
 800a748:	d006      	beq.n	800a758 <__ascii_mbtowc+0x1a>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d006      	beq.n	800a75c <__ascii_mbtowc+0x1e>
 800a74e:	7813      	ldrb	r3, [r2, #0]
 800a750:	600b      	str	r3, [r1, #0]
 800a752:	7810      	ldrb	r0, [r2, #0]
 800a754:	1e43      	subs	r3, r0, #1
 800a756:	4198      	sbcs	r0, r3
 800a758:	b002      	add	sp, #8
 800a75a:	4770      	bx	lr
 800a75c:	2002      	movs	r0, #2
 800a75e:	4240      	negs	r0, r0
 800a760:	e7fa      	b.n	800a758 <__ascii_mbtowc+0x1a>

0800a762 <_realloc_r>:
 800a762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a764:	0006      	movs	r6, r0
 800a766:	000c      	movs	r4, r1
 800a768:	0015      	movs	r5, r2
 800a76a:	2900      	cmp	r1, #0
 800a76c:	d105      	bne.n	800a77a <_realloc_r+0x18>
 800a76e:	0011      	movs	r1, r2
 800a770:	f7ff f94c 	bl	8009a0c <_malloc_r>
 800a774:	0004      	movs	r4, r0
 800a776:	0020      	movs	r0, r4
 800a778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	d103      	bne.n	800a786 <_realloc_r+0x24>
 800a77e:	f7ff f8cf 	bl	8009920 <_free_r>
 800a782:	002c      	movs	r4, r5
 800a784:	e7f7      	b.n	800a776 <_realloc_r+0x14>
 800a786:	f000 f840 	bl	800a80a <_malloc_usable_size_r>
 800a78a:	0007      	movs	r7, r0
 800a78c:	4285      	cmp	r5, r0
 800a78e:	d802      	bhi.n	800a796 <_realloc_r+0x34>
 800a790:	0843      	lsrs	r3, r0, #1
 800a792:	42ab      	cmp	r3, r5
 800a794:	d3ef      	bcc.n	800a776 <_realloc_r+0x14>
 800a796:	0029      	movs	r1, r5
 800a798:	0030      	movs	r0, r6
 800a79a:	f7ff f937 	bl	8009a0c <_malloc_r>
 800a79e:	9001      	str	r0, [sp, #4]
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d101      	bne.n	800a7a8 <_realloc_r+0x46>
 800a7a4:	9c01      	ldr	r4, [sp, #4]
 800a7a6:	e7e6      	b.n	800a776 <_realloc_r+0x14>
 800a7a8:	002a      	movs	r2, r5
 800a7aa:	42bd      	cmp	r5, r7
 800a7ac:	d900      	bls.n	800a7b0 <_realloc_r+0x4e>
 800a7ae:	003a      	movs	r2, r7
 800a7b0:	0021      	movs	r1, r4
 800a7b2:	9801      	ldr	r0, [sp, #4]
 800a7b4:	f7fe fa36 	bl	8008c24 <memcpy>
 800a7b8:	0021      	movs	r1, r4
 800a7ba:	0030      	movs	r0, r6
 800a7bc:	f7ff f8b0 	bl	8009920 <_free_r>
 800a7c0:	e7f0      	b.n	800a7a4 <_realloc_r+0x42>

0800a7c2 <__ascii_wctomb>:
 800a7c2:	0003      	movs	r3, r0
 800a7c4:	1e08      	subs	r0, r1, #0
 800a7c6:	d005      	beq.n	800a7d4 <__ascii_wctomb+0x12>
 800a7c8:	2aff      	cmp	r2, #255	@ 0xff
 800a7ca:	d904      	bls.n	800a7d6 <__ascii_wctomb+0x14>
 800a7cc:	228a      	movs	r2, #138	@ 0x8a
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	4240      	negs	r0, r0
 800a7d4:	4770      	bx	lr
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	700a      	strb	r2, [r1, #0]
 800a7da:	e7fb      	b.n	800a7d4 <__ascii_wctomb+0x12>

0800a7dc <fiprintf>:
 800a7dc:	b40e      	push	{r1, r2, r3}
 800a7de:	b517      	push	{r0, r1, r2, r4, lr}
 800a7e0:	4c05      	ldr	r4, [pc, #20]	@ (800a7f8 <fiprintf+0x1c>)
 800a7e2:	ab05      	add	r3, sp, #20
 800a7e4:	cb04      	ldmia	r3!, {r2}
 800a7e6:	0001      	movs	r1, r0
 800a7e8:	6820      	ldr	r0, [r4, #0]
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	f000 f83c 	bl	800a868 <_vfiprintf_r>
 800a7f0:	bc1e      	pop	{r1, r2, r3, r4}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	b003      	add	sp, #12
 800a7f6:	4718      	bx	r3
 800a7f8:	20000018 	.word	0x20000018

0800a7fc <abort>:
 800a7fc:	2006      	movs	r0, #6
 800a7fe:	b510      	push	{r4, lr}
 800a800:	f000 fa18 	bl	800ac34 <raise>
 800a804:	2001      	movs	r0, #1
 800a806:	f7f9 fb60 	bl	8003eca <_exit>

0800a80a <_malloc_usable_size_r>:
 800a80a:	1f0b      	subs	r3, r1, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	1f18      	subs	r0, r3, #4
 800a810:	2b00      	cmp	r3, #0
 800a812:	da01      	bge.n	800a818 <_malloc_usable_size_r+0xe>
 800a814:	580b      	ldr	r3, [r1, r0]
 800a816:	18c0      	adds	r0, r0, r3
 800a818:	4770      	bx	lr

0800a81a <__sfputc_r>:
 800a81a:	6893      	ldr	r3, [r2, #8]
 800a81c:	b510      	push	{r4, lr}
 800a81e:	3b01      	subs	r3, #1
 800a820:	6093      	str	r3, [r2, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	da04      	bge.n	800a830 <__sfputc_r+0x16>
 800a826:	6994      	ldr	r4, [r2, #24]
 800a828:	42a3      	cmp	r3, r4
 800a82a:	db07      	blt.n	800a83c <__sfputc_r+0x22>
 800a82c:	290a      	cmp	r1, #10
 800a82e:	d005      	beq.n	800a83c <__sfputc_r+0x22>
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	1c58      	adds	r0, r3, #1
 800a834:	6010      	str	r0, [r2, #0]
 800a836:	7019      	strb	r1, [r3, #0]
 800a838:	0008      	movs	r0, r1
 800a83a:	bd10      	pop	{r4, pc}
 800a83c:	f000 f930 	bl	800aaa0 <__swbuf_r>
 800a840:	0001      	movs	r1, r0
 800a842:	e7f9      	b.n	800a838 <__sfputc_r+0x1e>

0800a844 <__sfputs_r>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	0006      	movs	r6, r0
 800a848:	000f      	movs	r7, r1
 800a84a:	0014      	movs	r4, r2
 800a84c:	18d5      	adds	r5, r2, r3
 800a84e:	42ac      	cmp	r4, r5
 800a850:	d101      	bne.n	800a856 <__sfputs_r+0x12>
 800a852:	2000      	movs	r0, #0
 800a854:	e007      	b.n	800a866 <__sfputs_r+0x22>
 800a856:	7821      	ldrb	r1, [r4, #0]
 800a858:	003a      	movs	r2, r7
 800a85a:	0030      	movs	r0, r6
 800a85c:	f7ff ffdd 	bl	800a81a <__sfputc_r>
 800a860:	3401      	adds	r4, #1
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d1f3      	bne.n	800a84e <__sfputs_r+0xa>
 800a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a868 <_vfiprintf_r>:
 800a868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a86a:	b0a1      	sub	sp, #132	@ 0x84
 800a86c:	000f      	movs	r7, r1
 800a86e:	0015      	movs	r5, r2
 800a870:	001e      	movs	r6, r3
 800a872:	9003      	str	r0, [sp, #12]
 800a874:	2800      	cmp	r0, #0
 800a876:	d004      	beq.n	800a882 <_vfiprintf_r+0x1a>
 800a878:	6a03      	ldr	r3, [r0, #32]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <_vfiprintf_r+0x1a>
 800a87e:	f7fe f88b 	bl	8008998 <__sinit>
 800a882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a884:	07db      	lsls	r3, r3, #31
 800a886:	d405      	bmi.n	800a894 <_vfiprintf_r+0x2c>
 800a888:	89bb      	ldrh	r3, [r7, #12]
 800a88a:	059b      	lsls	r3, r3, #22
 800a88c:	d402      	bmi.n	800a894 <_vfiprintf_r+0x2c>
 800a88e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a890:	f7fe f9bb 	bl	8008c0a <__retarget_lock_acquire_recursive>
 800a894:	89bb      	ldrh	r3, [r7, #12]
 800a896:	071b      	lsls	r3, r3, #28
 800a898:	d502      	bpl.n	800a8a0 <_vfiprintf_r+0x38>
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d113      	bne.n	800a8c8 <_vfiprintf_r+0x60>
 800a8a0:	0039      	movs	r1, r7
 800a8a2:	9803      	ldr	r0, [sp, #12]
 800a8a4:	f000 f93e 	bl	800ab24 <__swsetup_r>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d00d      	beq.n	800a8c8 <_vfiprintf_r+0x60>
 800a8ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8ae:	07db      	lsls	r3, r3, #31
 800a8b0:	d503      	bpl.n	800a8ba <_vfiprintf_r+0x52>
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	4240      	negs	r0, r0
 800a8b6:	b021      	add	sp, #132	@ 0x84
 800a8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ba:	89bb      	ldrh	r3, [r7, #12]
 800a8bc:	059b      	lsls	r3, r3, #22
 800a8be:	d4f8      	bmi.n	800a8b2 <_vfiprintf_r+0x4a>
 800a8c0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a8c2:	f7fe f9a3 	bl	8008c0c <__retarget_lock_release_recursive>
 800a8c6:	e7f4      	b.n	800a8b2 <_vfiprintf_r+0x4a>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	ac08      	add	r4, sp, #32
 800a8cc:	6163      	str	r3, [r4, #20]
 800a8ce:	3320      	adds	r3, #32
 800a8d0:	7663      	strb	r3, [r4, #25]
 800a8d2:	3310      	adds	r3, #16
 800a8d4:	76a3      	strb	r3, [r4, #26]
 800a8d6:	9607      	str	r6, [sp, #28]
 800a8d8:	002e      	movs	r6, r5
 800a8da:	7833      	ldrb	r3, [r6, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <_vfiprintf_r+0x7c>
 800a8e0:	2b25      	cmp	r3, #37	@ 0x25
 800a8e2:	d148      	bne.n	800a976 <_vfiprintf_r+0x10e>
 800a8e4:	1b73      	subs	r3, r6, r5
 800a8e6:	9305      	str	r3, [sp, #20]
 800a8e8:	42ae      	cmp	r6, r5
 800a8ea:	d00b      	beq.n	800a904 <_vfiprintf_r+0x9c>
 800a8ec:	002a      	movs	r2, r5
 800a8ee:	0039      	movs	r1, r7
 800a8f0:	9803      	ldr	r0, [sp, #12]
 800a8f2:	f7ff ffa7 	bl	800a844 <__sfputs_r>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d100      	bne.n	800a8fc <_vfiprintf_r+0x94>
 800a8fa:	e0ae      	b.n	800aa5a <_vfiprintf_r+0x1f2>
 800a8fc:	6963      	ldr	r3, [r4, #20]
 800a8fe:	9a05      	ldr	r2, [sp, #20]
 800a900:	189b      	adds	r3, r3, r2
 800a902:	6163      	str	r3, [r4, #20]
 800a904:	7833      	ldrb	r3, [r6, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d100      	bne.n	800a90c <_vfiprintf_r+0xa4>
 800a90a:	e0a6      	b.n	800aa5a <_vfiprintf_r+0x1f2>
 800a90c:	2201      	movs	r2, #1
 800a90e:	2300      	movs	r3, #0
 800a910:	4252      	negs	r2, r2
 800a912:	6062      	str	r2, [r4, #4]
 800a914:	a904      	add	r1, sp, #16
 800a916:	3254      	adds	r2, #84	@ 0x54
 800a918:	1852      	adds	r2, r2, r1
 800a91a:	1c75      	adds	r5, r6, #1
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	60e3      	str	r3, [r4, #12]
 800a920:	60a3      	str	r3, [r4, #8]
 800a922:	7013      	strb	r3, [r2, #0]
 800a924:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a926:	4b59      	ldr	r3, [pc, #356]	@ (800aa8c <_vfiprintf_r+0x224>)
 800a928:	2205      	movs	r2, #5
 800a92a:	0018      	movs	r0, r3
 800a92c:	7829      	ldrb	r1, [r5, #0]
 800a92e:	9305      	str	r3, [sp, #20]
 800a930:	f7fe f96d 	bl	8008c0e <memchr>
 800a934:	1c6e      	adds	r6, r5, #1
 800a936:	2800      	cmp	r0, #0
 800a938:	d11f      	bne.n	800a97a <_vfiprintf_r+0x112>
 800a93a:	6822      	ldr	r2, [r4, #0]
 800a93c:	06d3      	lsls	r3, r2, #27
 800a93e:	d504      	bpl.n	800a94a <_vfiprintf_r+0xe2>
 800a940:	2353      	movs	r3, #83	@ 0x53
 800a942:	a904      	add	r1, sp, #16
 800a944:	185b      	adds	r3, r3, r1
 800a946:	2120      	movs	r1, #32
 800a948:	7019      	strb	r1, [r3, #0]
 800a94a:	0713      	lsls	r3, r2, #28
 800a94c:	d504      	bpl.n	800a958 <_vfiprintf_r+0xf0>
 800a94e:	2353      	movs	r3, #83	@ 0x53
 800a950:	a904      	add	r1, sp, #16
 800a952:	185b      	adds	r3, r3, r1
 800a954:	212b      	movs	r1, #43	@ 0x2b
 800a956:	7019      	strb	r1, [r3, #0]
 800a958:	782b      	ldrb	r3, [r5, #0]
 800a95a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a95c:	d016      	beq.n	800a98c <_vfiprintf_r+0x124>
 800a95e:	002e      	movs	r6, r5
 800a960:	2100      	movs	r1, #0
 800a962:	200a      	movs	r0, #10
 800a964:	68e3      	ldr	r3, [r4, #12]
 800a966:	7832      	ldrb	r2, [r6, #0]
 800a968:	1c75      	adds	r5, r6, #1
 800a96a:	3a30      	subs	r2, #48	@ 0x30
 800a96c:	2a09      	cmp	r2, #9
 800a96e:	d950      	bls.n	800aa12 <_vfiprintf_r+0x1aa>
 800a970:	2900      	cmp	r1, #0
 800a972:	d111      	bne.n	800a998 <_vfiprintf_r+0x130>
 800a974:	e017      	b.n	800a9a6 <_vfiprintf_r+0x13e>
 800a976:	3601      	adds	r6, #1
 800a978:	e7af      	b.n	800a8da <_vfiprintf_r+0x72>
 800a97a:	9b05      	ldr	r3, [sp, #20]
 800a97c:	6822      	ldr	r2, [r4, #0]
 800a97e:	1ac0      	subs	r0, r0, r3
 800a980:	2301      	movs	r3, #1
 800a982:	4083      	lsls	r3, r0
 800a984:	4313      	orrs	r3, r2
 800a986:	0035      	movs	r5, r6
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	e7cc      	b.n	800a926 <_vfiprintf_r+0xbe>
 800a98c:	9b07      	ldr	r3, [sp, #28]
 800a98e:	1d19      	adds	r1, r3, #4
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	9107      	str	r1, [sp, #28]
 800a994:	2b00      	cmp	r3, #0
 800a996:	db01      	blt.n	800a99c <_vfiprintf_r+0x134>
 800a998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a99a:	e004      	b.n	800a9a6 <_vfiprintf_r+0x13e>
 800a99c:	425b      	negs	r3, r3
 800a99e:	60e3      	str	r3, [r4, #12]
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	7833      	ldrb	r3, [r6, #0]
 800a9a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9aa:	d10c      	bne.n	800a9c6 <_vfiprintf_r+0x15e>
 800a9ac:	7873      	ldrb	r3, [r6, #1]
 800a9ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b0:	d134      	bne.n	800aa1c <_vfiprintf_r+0x1b4>
 800a9b2:	9b07      	ldr	r3, [sp, #28]
 800a9b4:	3602      	adds	r6, #2
 800a9b6:	1d1a      	adds	r2, r3, #4
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	9207      	str	r2, [sp, #28]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	da01      	bge.n	800a9c4 <_vfiprintf_r+0x15c>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	425b      	negs	r3, r3
 800a9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9c6:	4d32      	ldr	r5, [pc, #200]	@ (800aa90 <_vfiprintf_r+0x228>)
 800a9c8:	2203      	movs	r2, #3
 800a9ca:	0028      	movs	r0, r5
 800a9cc:	7831      	ldrb	r1, [r6, #0]
 800a9ce:	f7fe f91e 	bl	8008c0e <memchr>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d006      	beq.n	800a9e4 <_vfiprintf_r+0x17c>
 800a9d6:	2340      	movs	r3, #64	@ 0x40
 800a9d8:	1b40      	subs	r0, r0, r5
 800a9da:	4083      	lsls	r3, r0
 800a9dc:	6822      	ldr	r2, [r4, #0]
 800a9de:	3601      	adds	r6, #1
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	7831      	ldrb	r1, [r6, #0]
 800a9e6:	2206      	movs	r2, #6
 800a9e8:	482a      	ldr	r0, [pc, #168]	@ (800aa94 <_vfiprintf_r+0x22c>)
 800a9ea:	1c75      	adds	r5, r6, #1
 800a9ec:	7621      	strb	r1, [r4, #24]
 800a9ee:	f7fe f90e 	bl	8008c0e <memchr>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d040      	beq.n	800aa78 <_vfiprintf_r+0x210>
 800a9f6:	4b28      	ldr	r3, [pc, #160]	@ (800aa98 <_vfiprintf_r+0x230>)
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d122      	bne.n	800aa42 <_vfiprintf_r+0x1da>
 800a9fc:	2207      	movs	r2, #7
 800a9fe:	9b07      	ldr	r3, [sp, #28]
 800aa00:	3307      	adds	r3, #7
 800aa02:	4393      	bics	r3, r2
 800aa04:	3308      	adds	r3, #8
 800aa06:	9307      	str	r3, [sp, #28]
 800aa08:	6963      	ldr	r3, [r4, #20]
 800aa0a:	9a04      	ldr	r2, [sp, #16]
 800aa0c:	189b      	adds	r3, r3, r2
 800aa0e:	6163      	str	r3, [r4, #20]
 800aa10:	e762      	b.n	800a8d8 <_vfiprintf_r+0x70>
 800aa12:	4343      	muls	r3, r0
 800aa14:	002e      	movs	r6, r5
 800aa16:	2101      	movs	r1, #1
 800aa18:	189b      	adds	r3, r3, r2
 800aa1a:	e7a4      	b.n	800a966 <_vfiprintf_r+0xfe>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	200a      	movs	r0, #10
 800aa20:	0019      	movs	r1, r3
 800aa22:	3601      	adds	r6, #1
 800aa24:	6063      	str	r3, [r4, #4]
 800aa26:	7832      	ldrb	r2, [r6, #0]
 800aa28:	1c75      	adds	r5, r6, #1
 800aa2a:	3a30      	subs	r2, #48	@ 0x30
 800aa2c:	2a09      	cmp	r2, #9
 800aa2e:	d903      	bls.n	800aa38 <_vfiprintf_r+0x1d0>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0c8      	beq.n	800a9c6 <_vfiprintf_r+0x15e>
 800aa34:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa36:	e7c6      	b.n	800a9c6 <_vfiprintf_r+0x15e>
 800aa38:	4341      	muls	r1, r0
 800aa3a:	002e      	movs	r6, r5
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	1889      	adds	r1, r1, r2
 800aa40:	e7f1      	b.n	800aa26 <_vfiprintf_r+0x1be>
 800aa42:	aa07      	add	r2, sp, #28
 800aa44:	9200      	str	r2, [sp, #0]
 800aa46:	0021      	movs	r1, r4
 800aa48:	003a      	movs	r2, r7
 800aa4a:	4b14      	ldr	r3, [pc, #80]	@ (800aa9c <_vfiprintf_r+0x234>)
 800aa4c:	9803      	ldr	r0, [sp, #12]
 800aa4e:	f7fd fb59 	bl	8008104 <_printf_float>
 800aa52:	9004      	str	r0, [sp, #16]
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	3301      	adds	r3, #1
 800aa58:	d1d6      	bne.n	800aa08 <_vfiprintf_r+0x1a0>
 800aa5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa5c:	07db      	lsls	r3, r3, #31
 800aa5e:	d405      	bmi.n	800aa6c <_vfiprintf_r+0x204>
 800aa60:	89bb      	ldrh	r3, [r7, #12]
 800aa62:	059b      	lsls	r3, r3, #22
 800aa64:	d402      	bmi.n	800aa6c <_vfiprintf_r+0x204>
 800aa66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aa68:	f7fe f8d0 	bl	8008c0c <__retarget_lock_release_recursive>
 800aa6c:	89bb      	ldrh	r3, [r7, #12]
 800aa6e:	065b      	lsls	r3, r3, #25
 800aa70:	d500      	bpl.n	800aa74 <_vfiprintf_r+0x20c>
 800aa72:	e71e      	b.n	800a8b2 <_vfiprintf_r+0x4a>
 800aa74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800aa76:	e71e      	b.n	800a8b6 <_vfiprintf_r+0x4e>
 800aa78:	aa07      	add	r2, sp, #28
 800aa7a:	9200      	str	r2, [sp, #0]
 800aa7c:	0021      	movs	r1, r4
 800aa7e:	003a      	movs	r2, r7
 800aa80:	4b06      	ldr	r3, [pc, #24]	@ (800aa9c <_vfiprintf_r+0x234>)
 800aa82:	9803      	ldr	r0, [sp, #12]
 800aa84:	f7fd fdec 	bl	8008660 <_printf_i>
 800aa88:	e7e3      	b.n	800aa52 <_vfiprintf_r+0x1ea>
 800aa8a:	46c0      	nop			@ (mov r8, r8)
 800aa8c:	0800b9ea 	.word	0x0800b9ea
 800aa90:	0800b9f0 	.word	0x0800b9f0
 800aa94:	0800b9f4 	.word	0x0800b9f4
 800aa98:	08008105 	.word	0x08008105
 800aa9c:	0800a845 	.word	0x0800a845

0800aaa0 <__swbuf_r>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	0006      	movs	r6, r0
 800aaa4:	000d      	movs	r5, r1
 800aaa6:	0014      	movs	r4, r2
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d004      	beq.n	800aab6 <__swbuf_r+0x16>
 800aaac:	6a03      	ldr	r3, [r0, #32]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <__swbuf_r+0x16>
 800aab2:	f7fd ff71 	bl	8008998 <__sinit>
 800aab6:	69a3      	ldr	r3, [r4, #24]
 800aab8:	60a3      	str	r3, [r4, #8]
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	071b      	lsls	r3, r3, #28
 800aabe:	d502      	bpl.n	800aac6 <__swbuf_r+0x26>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d109      	bne.n	800aada <__swbuf_r+0x3a>
 800aac6:	0021      	movs	r1, r4
 800aac8:	0030      	movs	r0, r6
 800aaca:	f000 f82b 	bl	800ab24 <__swsetup_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d003      	beq.n	800aada <__swbuf_r+0x3a>
 800aad2:	2501      	movs	r5, #1
 800aad4:	426d      	negs	r5, r5
 800aad6:	0028      	movs	r0, r5
 800aad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	b2ef      	uxtb	r7, r5
 800aae0:	1ac0      	subs	r0, r0, r3
 800aae2:	6963      	ldr	r3, [r4, #20]
 800aae4:	b2ed      	uxtb	r5, r5
 800aae6:	4283      	cmp	r3, r0
 800aae8:	dc05      	bgt.n	800aaf6 <__swbuf_r+0x56>
 800aaea:	0021      	movs	r1, r4
 800aaec:	0030      	movs	r0, r6
 800aaee:	f7ff fd9d 	bl	800a62c <_fflush_r>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d1ed      	bne.n	800aad2 <__swbuf_r+0x32>
 800aaf6:	68a3      	ldr	r3, [r4, #8]
 800aaf8:	3001      	adds	r0, #1
 800aafa:	3b01      	subs	r3, #1
 800aafc:	60a3      	str	r3, [r4, #8]
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	6022      	str	r2, [r4, #0]
 800ab04:	701f      	strb	r7, [r3, #0]
 800ab06:	6963      	ldr	r3, [r4, #20]
 800ab08:	4283      	cmp	r3, r0
 800ab0a:	d004      	beq.n	800ab16 <__swbuf_r+0x76>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	07db      	lsls	r3, r3, #31
 800ab10:	d5e1      	bpl.n	800aad6 <__swbuf_r+0x36>
 800ab12:	2d0a      	cmp	r5, #10
 800ab14:	d1df      	bne.n	800aad6 <__swbuf_r+0x36>
 800ab16:	0021      	movs	r1, r4
 800ab18:	0030      	movs	r0, r6
 800ab1a:	f7ff fd87 	bl	800a62c <_fflush_r>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d0d9      	beq.n	800aad6 <__swbuf_r+0x36>
 800ab22:	e7d6      	b.n	800aad2 <__swbuf_r+0x32>

0800ab24 <__swsetup_r>:
 800ab24:	4b2d      	ldr	r3, [pc, #180]	@ (800abdc <__swsetup_r+0xb8>)
 800ab26:	b570      	push	{r4, r5, r6, lr}
 800ab28:	0005      	movs	r5, r0
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	000c      	movs	r4, r1
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d004      	beq.n	800ab3c <__swsetup_r+0x18>
 800ab32:	6a03      	ldr	r3, [r0, #32]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <__swsetup_r+0x18>
 800ab38:	f7fd ff2e 	bl	8008998 <__sinit>
 800ab3c:	220c      	movs	r2, #12
 800ab3e:	5ea3      	ldrsh	r3, [r4, r2]
 800ab40:	071a      	lsls	r2, r3, #28
 800ab42:	d423      	bmi.n	800ab8c <__swsetup_r+0x68>
 800ab44:	06da      	lsls	r2, r3, #27
 800ab46:	d407      	bmi.n	800ab58 <__swsetup_r+0x34>
 800ab48:	2209      	movs	r2, #9
 800ab4a:	602a      	str	r2, [r5, #0]
 800ab4c:	2240      	movs	r2, #64	@ 0x40
 800ab4e:	2001      	movs	r0, #1
 800ab50:	4313      	orrs	r3, r2
 800ab52:	81a3      	strh	r3, [r4, #12]
 800ab54:	4240      	negs	r0, r0
 800ab56:	e03a      	b.n	800abce <__swsetup_r+0xaa>
 800ab58:	075b      	lsls	r3, r3, #29
 800ab5a:	d513      	bpl.n	800ab84 <__swsetup_r+0x60>
 800ab5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	d008      	beq.n	800ab74 <__swsetup_r+0x50>
 800ab62:	0023      	movs	r3, r4
 800ab64:	3344      	adds	r3, #68	@ 0x44
 800ab66:	4299      	cmp	r1, r3
 800ab68:	d002      	beq.n	800ab70 <__swsetup_r+0x4c>
 800ab6a:	0028      	movs	r0, r5
 800ab6c:	f7fe fed8 	bl	8009920 <_free_r>
 800ab70:	2300      	movs	r3, #0
 800ab72:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab74:	2224      	movs	r2, #36	@ 0x24
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	4393      	bics	r3, r2
 800ab7a:	81a3      	strh	r3, [r4, #12]
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	6063      	str	r3, [r4, #4]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	6023      	str	r3, [r4, #0]
 800ab84:	2308      	movs	r3, #8
 800ab86:	89a2      	ldrh	r2, [r4, #12]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10b      	bne.n	800abaa <__swsetup_r+0x86>
 800ab92:	21a0      	movs	r1, #160	@ 0xa0
 800ab94:	2280      	movs	r2, #128	@ 0x80
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	0089      	lsls	r1, r1, #2
 800ab9a:	0092      	lsls	r2, r2, #2
 800ab9c:	400b      	ands	r3, r1
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <__swsetup_r+0x86>
 800aba2:	0021      	movs	r1, r4
 800aba4:	0028      	movs	r0, r5
 800aba6:	f000 f88f 	bl	800acc8 <__smakebuf_r>
 800abaa:	220c      	movs	r2, #12
 800abac:	5ea3      	ldrsh	r3, [r4, r2]
 800abae:	2101      	movs	r1, #1
 800abb0:	001a      	movs	r2, r3
 800abb2:	400a      	ands	r2, r1
 800abb4:	420b      	tst	r3, r1
 800abb6:	d00b      	beq.n	800abd0 <__swsetup_r+0xac>
 800abb8:	2200      	movs	r2, #0
 800abba:	60a2      	str	r2, [r4, #8]
 800abbc:	6962      	ldr	r2, [r4, #20]
 800abbe:	4252      	negs	r2, r2
 800abc0:	61a2      	str	r2, [r4, #24]
 800abc2:	2000      	movs	r0, #0
 800abc4:	6922      	ldr	r2, [r4, #16]
 800abc6:	4282      	cmp	r2, r0
 800abc8:	d101      	bne.n	800abce <__swsetup_r+0xaa>
 800abca:	061a      	lsls	r2, r3, #24
 800abcc:	d4be      	bmi.n	800ab4c <__swsetup_r+0x28>
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	0799      	lsls	r1, r3, #30
 800abd2:	d400      	bmi.n	800abd6 <__swsetup_r+0xb2>
 800abd4:	6962      	ldr	r2, [r4, #20]
 800abd6:	60a2      	str	r2, [r4, #8]
 800abd8:	e7f3      	b.n	800abc2 <__swsetup_r+0x9e>
 800abda:	46c0      	nop			@ (mov r8, r8)
 800abdc:	20000018 	.word	0x20000018

0800abe0 <_raise_r>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	0004      	movs	r4, r0
 800abe4:	000d      	movs	r5, r1
 800abe6:	291f      	cmp	r1, #31
 800abe8:	d904      	bls.n	800abf4 <_raise_r+0x14>
 800abea:	2316      	movs	r3, #22
 800abec:	6003      	str	r3, [r0, #0]
 800abee:	2001      	movs	r0, #1
 800abf0:	4240      	negs	r0, r0
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d004      	beq.n	800ac04 <_raise_r+0x24>
 800abfa:	008a      	lsls	r2, r1, #2
 800abfc:	189b      	adds	r3, r3, r2
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	d108      	bne.n	800ac16 <_raise_r+0x36>
 800ac04:	0020      	movs	r0, r4
 800ac06:	f000 f831 	bl	800ac6c <_getpid_r>
 800ac0a:	002a      	movs	r2, r5
 800ac0c:	0001      	movs	r1, r0
 800ac0e:	0020      	movs	r0, r4
 800ac10:	f000 f81a 	bl	800ac48 <_kill_r>
 800ac14:	e7ed      	b.n	800abf2 <_raise_r+0x12>
 800ac16:	2a01      	cmp	r2, #1
 800ac18:	d009      	beq.n	800ac2e <_raise_r+0x4e>
 800ac1a:	1c51      	adds	r1, r2, #1
 800ac1c:	d103      	bne.n	800ac26 <_raise_r+0x46>
 800ac1e:	2316      	movs	r3, #22
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	2001      	movs	r0, #1
 800ac24:	e7e5      	b.n	800abf2 <_raise_r+0x12>
 800ac26:	2100      	movs	r1, #0
 800ac28:	0028      	movs	r0, r5
 800ac2a:	6019      	str	r1, [r3, #0]
 800ac2c:	4790      	blx	r2
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e7df      	b.n	800abf2 <_raise_r+0x12>
	...

0800ac34 <raise>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4b03      	ldr	r3, [pc, #12]	@ (800ac44 <raise+0x10>)
 800ac38:	0001      	movs	r1, r0
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	f7ff ffd0 	bl	800abe0 <_raise_r>
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	46c0      	nop			@ (mov r8, r8)
 800ac44:	20000018 	.word	0x20000018

0800ac48 <_kill_r>:
 800ac48:	2300      	movs	r3, #0
 800ac4a:	b570      	push	{r4, r5, r6, lr}
 800ac4c:	4d06      	ldr	r5, [pc, #24]	@ (800ac68 <_kill_r+0x20>)
 800ac4e:	0004      	movs	r4, r0
 800ac50:	0008      	movs	r0, r1
 800ac52:	0011      	movs	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f7f9 f928 	bl	8003eaa <_kill>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d103      	bne.n	800ac66 <_kill_r+0x1e>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d000      	beq.n	800ac66 <_kill_r+0x1e>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	2000055c 	.word	0x2000055c

0800ac6c <_getpid_r>:
 800ac6c:	b510      	push	{r4, lr}
 800ac6e:	f7f9 f916 	bl	8003e9e <_getpid>
 800ac72:	bd10      	pop	{r4, pc}

0800ac74 <__swhatbuf_r>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	000e      	movs	r6, r1
 800ac78:	001d      	movs	r5, r3
 800ac7a:	230e      	movs	r3, #14
 800ac7c:	5ec9      	ldrsh	r1, [r1, r3]
 800ac7e:	0014      	movs	r4, r2
 800ac80:	b096      	sub	sp, #88	@ 0x58
 800ac82:	2900      	cmp	r1, #0
 800ac84:	da0c      	bge.n	800aca0 <__swhatbuf_r+0x2c>
 800ac86:	89b2      	ldrh	r2, [r6, #12]
 800ac88:	2380      	movs	r3, #128	@ 0x80
 800ac8a:	0011      	movs	r1, r2
 800ac8c:	4019      	ands	r1, r3
 800ac8e:	421a      	tst	r2, r3
 800ac90:	d114      	bne.n	800acbc <__swhatbuf_r+0x48>
 800ac92:	2380      	movs	r3, #128	@ 0x80
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	2000      	movs	r0, #0
 800ac98:	6029      	str	r1, [r5, #0]
 800ac9a:	6023      	str	r3, [r4, #0]
 800ac9c:	b016      	add	sp, #88	@ 0x58
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	466a      	mov	r2, sp
 800aca2:	f000 f853 	bl	800ad4c <_fstat_r>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	dbed      	blt.n	800ac86 <__swhatbuf_r+0x12>
 800acaa:	23f0      	movs	r3, #240	@ 0xf0
 800acac:	9901      	ldr	r1, [sp, #4]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	4019      	ands	r1, r3
 800acb2:	4b04      	ldr	r3, [pc, #16]	@ (800acc4 <__swhatbuf_r+0x50>)
 800acb4:	18c9      	adds	r1, r1, r3
 800acb6:	424b      	negs	r3, r1
 800acb8:	4159      	adcs	r1, r3
 800acba:	e7ea      	b.n	800ac92 <__swhatbuf_r+0x1e>
 800acbc:	2100      	movs	r1, #0
 800acbe:	2340      	movs	r3, #64	@ 0x40
 800acc0:	e7e9      	b.n	800ac96 <__swhatbuf_r+0x22>
 800acc2:	46c0      	nop			@ (mov r8, r8)
 800acc4:	ffffe000 	.word	0xffffe000

0800acc8 <__smakebuf_r>:
 800acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acca:	2602      	movs	r6, #2
 800accc:	898b      	ldrh	r3, [r1, #12]
 800acce:	0005      	movs	r5, r0
 800acd0:	000c      	movs	r4, r1
 800acd2:	b085      	sub	sp, #20
 800acd4:	4233      	tst	r3, r6
 800acd6:	d007      	beq.n	800ace8 <__smakebuf_r+0x20>
 800acd8:	0023      	movs	r3, r4
 800acda:	3347      	adds	r3, #71	@ 0x47
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	2301      	movs	r3, #1
 800ace2:	6163      	str	r3, [r4, #20]
 800ace4:	b005      	add	sp, #20
 800ace6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ace8:	ab03      	add	r3, sp, #12
 800acea:	aa02      	add	r2, sp, #8
 800acec:	f7ff ffc2 	bl	800ac74 <__swhatbuf_r>
 800acf0:	9f02      	ldr	r7, [sp, #8]
 800acf2:	9001      	str	r0, [sp, #4]
 800acf4:	0039      	movs	r1, r7
 800acf6:	0028      	movs	r0, r5
 800acf8:	f7fe fe88 	bl	8009a0c <_malloc_r>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d108      	bne.n	800ad12 <__smakebuf_r+0x4a>
 800ad00:	220c      	movs	r2, #12
 800ad02:	5ea3      	ldrsh	r3, [r4, r2]
 800ad04:	059a      	lsls	r2, r3, #22
 800ad06:	d4ed      	bmi.n	800ace4 <__smakebuf_r+0x1c>
 800ad08:	2203      	movs	r2, #3
 800ad0a:	4393      	bics	r3, r2
 800ad0c:	431e      	orrs	r6, r3
 800ad0e:	81a6      	strh	r6, [r4, #12]
 800ad10:	e7e2      	b.n	800acd8 <__smakebuf_r+0x10>
 800ad12:	2380      	movs	r3, #128	@ 0x80
 800ad14:	89a2      	ldrh	r2, [r4, #12]
 800ad16:	6020      	str	r0, [r4, #0]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	6120      	str	r0, [r4, #16]
 800ad20:	6167      	str	r7, [r4, #20]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00c      	beq.n	800ad40 <__smakebuf_r+0x78>
 800ad26:	0028      	movs	r0, r5
 800ad28:	230e      	movs	r3, #14
 800ad2a:	5ee1      	ldrsh	r1, [r4, r3]
 800ad2c:	f000 f820 	bl	800ad70 <_isatty_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d005      	beq.n	800ad40 <__smakebuf_r+0x78>
 800ad34:	2303      	movs	r3, #3
 800ad36:	89a2      	ldrh	r2, [r4, #12]
 800ad38:	439a      	bics	r2, r3
 800ad3a:	3b02      	subs	r3, #2
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	9a01      	ldr	r2, [sp, #4]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	e7cc      	b.n	800ace4 <__smakebuf_r+0x1c>
	...

0800ad4c <_fstat_r>:
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	b570      	push	{r4, r5, r6, lr}
 800ad50:	4d06      	ldr	r5, [pc, #24]	@ (800ad6c <_fstat_r+0x20>)
 800ad52:	0004      	movs	r4, r0
 800ad54:	0008      	movs	r0, r1
 800ad56:	0011      	movs	r1, r2
 800ad58:	602b      	str	r3, [r5, #0]
 800ad5a:	f7f9 f906 	bl	8003f6a <_fstat>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d103      	bne.n	800ad6a <_fstat_r+0x1e>
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d000      	beq.n	800ad6a <_fstat_r+0x1e>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	2000055c 	.word	0x2000055c

0800ad70 <_isatty_r>:
 800ad70:	2300      	movs	r3, #0
 800ad72:	b570      	push	{r4, r5, r6, lr}
 800ad74:	4d06      	ldr	r5, [pc, #24]	@ (800ad90 <_isatty_r+0x20>)
 800ad76:	0004      	movs	r4, r0
 800ad78:	0008      	movs	r0, r1
 800ad7a:	602b      	str	r3, [r5, #0]
 800ad7c:	f7f9 f903 	bl	8003f86 <_isatty>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d103      	bne.n	800ad8c <_isatty_r+0x1c>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d000      	beq.n	800ad8c <_isatty_r+0x1c>
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}
 800ad8e:	46c0      	nop			@ (mov r8, r8)
 800ad90:	2000055c 	.word	0x2000055c

0800ad94 <atan2>:
 800ad94:	b510      	push	{r4, lr}
 800ad96:	f000 f947 	bl	800b028 <__ieee754_atan2>
 800ad9a:	bd10      	pop	{r4, pc}

0800ad9c <log>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	0004      	movs	r4, r0
 800ada0:	000d      	movs	r5, r1
 800ada2:	f000 f9e7 	bl	800b174 <__ieee754_log>
 800ada6:	0022      	movs	r2, r4
 800ada8:	0006      	movs	r6, r0
 800adaa:	000f      	movs	r7, r1
 800adac:	002b      	movs	r3, r5
 800adae:	0020      	movs	r0, r4
 800adb0:	0029      	movs	r1, r5
 800adb2:	f7f7 ffff 	bl	8002db4 <__aeabi_dcmpun>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d115      	bne.n	800ade6 <log+0x4a>
 800adba:	2200      	movs	r2, #0
 800adbc:	2300      	movs	r3, #0
 800adbe:	0020      	movs	r0, r4
 800adc0:	0029      	movs	r1, r5
 800adc2:	f7f5 fb59 	bl	8000478 <__aeabi_dcmpgt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d10d      	bne.n	800ade6 <log+0x4a>
 800adca:	2200      	movs	r2, #0
 800adcc:	2300      	movs	r3, #0
 800adce:	0020      	movs	r0, r4
 800add0:	0029      	movs	r1, r5
 800add2:	f7f5 fb37 	bl	8000444 <__aeabi_dcmpeq>
 800add6:	2800      	cmp	r0, #0
 800add8:	d008      	beq.n	800adec <log+0x50>
 800adda:	f7fd feeb 	bl	8008bb4 <__errno>
 800adde:	2322      	movs	r3, #34	@ 0x22
 800ade0:	2600      	movs	r6, #0
 800ade2:	4f07      	ldr	r7, [pc, #28]	@ (800ae00 <log+0x64>)
 800ade4:	6003      	str	r3, [r0, #0]
 800ade6:	0030      	movs	r0, r6
 800ade8:	0039      	movs	r1, r7
 800adea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adec:	f7fd fee2 	bl	8008bb4 <__errno>
 800adf0:	2321      	movs	r3, #33	@ 0x21
 800adf2:	6003      	str	r3, [r0, #0]
 800adf4:	4803      	ldr	r0, [pc, #12]	@ (800ae04 <log+0x68>)
 800adf6:	f000 f82d 	bl	800ae54 <nan>
 800adfa:	0006      	movs	r6, r0
 800adfc:	000f      	movs	r7, r1
 800adfe:	e7f2      	b.n	800ade6 <log+0x4a>
 800ae00:	fff00000 	.word	0xfff00000
 800ae04:	0800ba40 	.word	0x0800ba40

0800ae08 <sqrt>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	0004      	movs	r4, r0
 800ae0c:	000d      	movs	r5, r1
 800ae0e:	f000 f827 	bl	800ae60 <__ieee754_sqrt>
 800ae12:	0022      	movs	r2, r4
 800ae14:	0006      	movs	r6, r0
 800ae16:	000f      	movs	r7, r1
 800ae18:	002b      	movs	r3, r5
 800ae1a:	0020      	movs	r0, r4
 800ae1c:	0029      	movs	r1, r5
 800ae1e:	f7f7 ffc9 	bl	8002db4 <__aeabi_dcmpun>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d113      	bne.n	800ae4e <sqrt+0x46>
 800ae26:	2200      	movs	r2, #0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	0020      	movs	r0, r4
 800ae2c:	0029      	movs	r1, r5
 800ae2e:	f7f5 fb0f 	bl	8000450 <__aeabi_dcmplt>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d00b      	beq.n	800ae4e <sqrt+0x46>
 800ae36:	f7fd febd 	bl	8008bb4 <__errno>
 800ae3a:	2321      	movs	r3, #33	@ 0x21
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	6003      	str	r3, [r0, #0]
 800ae40:	2300      	movs	r3, #0
 800ae42:	0010      	movs	r0, r2
 800ae44:	0019      	movs	r1, r3
 800ae46:	f7f6 fc8b 	bl	8001760 <__aeabi_ddiv>
 800ae4a:	0006      	movs	r6, r0
 800ae4c:	000f      	movs	r7, r1
 800ae4e:	0030      	movs	r0, r6
 800ae50:	0039      	movs	r1, r7
 800ae52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae54 <nan>:
 800ae54:	2000      	movs	r0, #0
 800ae56:	4901      	ldr	r1, [pc, #4]	@ (800ae5c <nan+0x8>)
 800ae58:	4770      	bx	lr
 800ae5a:	46c0      	nop			@ (mov r8, r8)
 800ae5c:	7ff80000 	.word	0x7ff80000

0800ae60 <__ieee754_sqrt>:
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	000a      	movs	r2, r1
 800ae64:	000d      	movs	r5, r1
 800ae66:	496b      	ldr	r1, [pc, #428]	@ (800b014 <__ieee754_sqrt+0x1b4>)
 800ae68:	0004      	movs	r4, r0
 800ae6a:	0003      	movs	r3, r0
 800ae6c:	0008      	movs	r0, r1
 800ae6e:	b087      	sub	sp, #28
 800ae70:	4028      	ands	r0, r5
 800ae72:	4288      	cmp	r0, r1
 800ae74:	d111      	bne.n	800ae9a <__ieee754_sqrt+0x3a>
 800ae76:	0022      	movs	r2, r4
 800ae78:	002b      	movs	r3, r5
 800ae7a:	0020      	movs	r0, r4
 800ae7c:	0029      	movs	r1, r5
 800ae7e:	f7f7 f8a9 	bl	8001fd4 <__aeabi_dmul>
 800ae82:	0002      	movs	r2, r0
 800ae84:	000b      	movs	r3, r1
 800ae86:	0020      	movs	r0, r4
 800ae88:	0029      	movs	r1, r5
 800ae8a:	f7f6 f8a3 	bl	8000fd4 <__aeabi_dadd>
 800ae8e:	0004      	movs	r4, r0
 800ae90:	000d      	movs	r5, r1
 800ae92:	0020      	movs	r0, r4
 800ae94:	0029      	movs	r1, r5
 800ae96:	b007      	add	sp, #28
 800ae98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae9a:	2d00      	cmp	r5, #0
 800ae9c:	dc11      	bgt.n	800aec2 <__ieee754_sqrt+0x62>
 800ae9e:	0069      	lsls	r1, r5, #1
 800aea0:	0849      	lsrs	r1, r1, #1
 800aea2:	4321      	orrs	r1, r4
 800aea4:	d0f5      	beq.n	800ae92 <__ieee754_sqrt+0x32>
 800aea6:	2000      	movs	r0, #0
 800aea8:	4285      	cmp	r5, r0
 800aeaa:	d010      	beq.n	800aece <__ieee754_sqrt+0x6e>
 800aeac:	0022      	movs	r2, r4
 800aeae:	002b      	movs	r3, r5
 800aeb0:	0020      	movs	r0, r4
 800aeb2:	0029      	movs	r1, r5
 800aeb4:	f7f7 fb74 	bl	80025a0 <__aeabi_dsub>
 800aeb8:	0002      	movs	r2, r0
 800aeba:	000b      	movs	r3, r1
 800aebc:	f7f6 fc50 	bl	8001760 <__aeabi_ddiv>
 800aec0:	e7e5      	b.n	800ae8e <__ieee754_sqrt+0x2e>
 800aec2:	1528      	asrs	r0, r5, #20
 800aec4:	d115      	bne.n	800aef2 <__ieee754_sqrt+0x92>
 800aec6:	2480      	movs	r4, #128	@ 0x80
 800aec8:	2100      	movs	r1, #0
 800aeca:	0364      	lsls	r4, r4, #13
 800aecc:	e007      	b.n	800aede <__ieee754_sqrt+0x7e>
 800aece:	0ada      	lsrs	r2, r3, #11
 800aed0:	3815      	subs	r0, #21
 800aed2:	055b      	lsls	r3, r3, #21
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	d0fa      	beq.n	800aece <__ieee754_sqrt+0x6e>
 800aed8:	e7f5      	b.n	800aec6 <__ieee754_sqrt+0x66>
 800aeda:	0052      	lsls	r2, r2, #1
 800aedc:	3101      	adds	r1, #1
 800aede:	4222      	tst	r2, r4
 800aee0:	d0fb      	beq.n	800aeda <__ieee754_sqrt+0x7a>
 800aee2:	1e4c      	subs	r4, r1, #1
 800aee4:	1b00      	subs	r0, r0, r4
 800aee6:	2420      	movs	r4, #32
 800aee8:	001d      	movs	r5, r3
 800aeea:	1a64      	subs	r4, r4, r1
 800aeec:	40e5      	lsrs	r5, r4
 800aeee:	408b      	lsls	r3, r1
 800aef0:	432a      	orrs	r2, r5
 800aef2:	4949      	ldr	r1, [pc, #292]	@ (800b018 <__ieee754_sqrt+0x1b8>)
 800aef4:	0312      	lsls	r2, r2, #12
 800aef6:	1844      	adds	r4, r0, r1
 800aef8:	2180      	movs	r1, #128	@ 0x80
 800aefa:	0b12      	lsrs	r2, r2, #12
 800aefc:	0349      	lsls	r1, r1, #13
 800aefe:	4311      	orrs	r1, r2
 800af00:	07c0      	lsls	r0, r0, #31
 800af02:	d403      	bmi.n	800af0c <__ieee754_sqrt+0xac>
 800af04:	0fda      	lsrs	r2, r3, #31
 800af06:	0049      	lsls	r1, r1, #1
 800af08:	1851      	adds	r1, r2, r1
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	2500      	movs	r5, #0
 800af0e:	1062      	asrs	r2, r4, #1
 800af10:	0049      	lsls	r1, r1, #1
 800af12:	2480      	movs	r4, #128	@ 0x80
 800af14:	9205      	str	r2, [sp, #20]
 800af16:	0fda      	lsrs	r2, r3, #31
 800af18:	1852      	adds	r2, r2, r1
 800af1a:	2016      	movs	r0, #22
 800af1c:	0029      	movs	r1, r5
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	03a4      	lsls	r4, r4, #14
 800af22:	190e      	adds	r6, r1, r4
 800af24:	4296      	cmp	r6, r2
 800af26:	dc02      	bgt.n	800af2e <__ieee754_sqrt+0xce>
 800af28:	1931      	adds	r1, r6, r4
 800af2a:	1b92      	subs	r2, r2, r6
 800af2c:	192d      	adds	r5, r5, r4
 800af2e:	0fde      	lsrs	r6, r3, #31
 800af30:	0052      	lsls	r2, r2, #1
 800af32:	3801      	subs	r0, #1
 800af34:	1992      	adds	r2, r2, r6
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	0864      	lsrs	r4, r4, #1
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d1f1      	bne.n	800af22 <__ieee754_sqrt+0xc2>
 800af3e:	2620      	movs	r6, #32
 800af40:	2780      	movs	r7, #128	@ 0x80
 800af42:	0004      	movs	r4, r0
 800af44:	9604      	str	r6, [sp, #16]
 800af46:	063f      	lsls	r7, r7, #24
 800af48:	183e      	adds	r6, r7, r0
 800af4a:	46b4      	mov	ip, r6
 800af4c:	428a      	cmp	r2, r1
 800af4e:	dc02      	bgt.n	800af56 <__ieee754_sqrt+0xf6>
 800af50:	d114      	bne.n	800af7c <__ieee754_sqrt+0x11c>
 800af52:	429e      	cmp	r6, r3
 800af54:	d812      	bhi.n	800af7c <__ieee754_sqrt+0x11c>
 800af56:	4660      	mov	r0, ip
 800af58:	4666      	mov	r6, ip
 800af5a:	19c0      	adds	r0, r0, r7
 800af5c:	9100      	str	r1, [sp, #0]
 800af5e:	2e00      	cmp	r6, #0
 800af60:	da03      	bge.n	800af6a <__ieee754_sqrt+0x10a>
 800af62:	43c6      	mvns	r6, r0
 800af64:	0ff6      	lsrs	r6, r6, #31
 800af66:	198e      	adds	r6, r1, r6
 800af68:	9600      	str	r6, [sp, #0]
 800af6a:	1a52      	subs	r2, r2, r1
 800af6c:	4563      	cmp	r3, ip
 800af6e:	4189      	sbcs	r1, r1
 800af70:	4249      	negs	r1, r1
 800af72:	1a52      	subs	r2, r2, r1
 800af74:	4661      	mov	r1, ip
 800af76:	1a5b      	subs	r3, r3, r1
 800af78:	9900      	ldr	r1, [sp, #0]
 800af7a:	19e4      	adds	r4, r4, r7
 800af7c:	0fde      	lsrs	r6, r3, #31
 800af7e:	0052      	lsls	r2, r2, #1
 800af80:	1992      	adds	r2, r2, r6
 800af82:	9e04      	ldr	r6, [sp, #16]
 800af84:	005b      	lsls	r3, r3, #1
 800af86:	3e01      	subs	r6, #1
 800af88:	087f      	lsrs	r7, r7, #1
 800af8a:	9604      	str	r6, [sp, #16]
 800af8c:	2e00      	cmp	r6, #0
 800af8e:	d1db      	bne.n	800af48 <__ieee754_sqrt+0xe8>
 800af90:	431a      	orrs	r2, r3
 800af92:	d01f      	beq.n	800afd4 <__ieee754_sqrt+0x174>
 800af94:	4e21      	ldr	r6, [pc, #132]	@ (800b01c <__ieee754_sqrt+0x1bc>)
 800af96:	4f22      	ldr	r7, [pc, #136]	@ (800b020 <__ieee754_sqrt+0x1c0>)
 800af98:	6830      	ldr	r0, [r6, #0]
 800af9a:	6871      	ldr	r1, [r6, #4]
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	9200      	str	r2, [sp, #0]
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	6832      	ldr	r2, [r6, #0]
 800afa6:	6873      	ldr	r3, [r6, #4]
 800afa8:	9202      	str	r2, [sp, #8]
 800afaa:	9303      	str	r3, [sp, #12]
 800afac:	9a00      	ldr	r2, [sp, #0]
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	f7f7 faf6 	bl	80025a0 <__aeabi_dsub>
 800afb4:	0002      	movs	r2, r0
 800afb6:	000b      	movs	r3, r1
 800afb8:	9802      	ldr	r0, [sp, #8]
 800afba:	9903      	ldr	r1, [sp, #12]
 800afbc:	f7f5 fa52 	bl	8000464 <__aeabi_dcmple>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d007      	beq.n	800afd4 <__ieee754_sqrt+0x174>
 800afc4:	6830      	ldr	r0, [r6, #0]
 800afc6:	6871      	ldr	r1, [r6, #4]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	1c67      	adds	r7, r4, #1
 800afce:	d10c      	bne.n	800afea <__ieee754_sqrt+0x18a>
 800afd0:	9c04      	ldr	r4, [sp, #16]
 800afd2:	3501      	adds	r5, #1
 800afd4:	4a13      	ldr	r2, [pc, #76]	@ (800b024 <__ieee754_sqrt+0x1c4>)
 800afd6:	106b      	asrs	r3, r5, #1
 800afd8:	189b      	adds	r3, r3, r2
 800afda:	9a05      	ldr	r2, [sp, #20]
 800afdc:	07ed      	lsls	r5, r5, #31
 800afde:	0864      	lsrs	r4, r4, #1
 800afe0:	0512      	lsls	r2, r2, #20
 800afe2:	4325      	orrs	r5, r4
 800afe4:	0028      	movs	r0, r5
 800afe6:	18d1      	adds	r1, r2, r3
 800afe8:	e751      	b.n	800ae8e <__ieee754_sqrt+0x2e>
 800afea:	f7f5 fff3 	bl	8000fd4 <__aeabi_dadd>
 800afee:	6877      	ldr	r7, [r6, #4]
 800aff0:	6836      	ldr	r6, [r6, #0]
 800aff2:	0002      	movs	r2, r0
 800aff4:	000b      	movs	r3, r1
 800aff6:	0030      	movs	r0, r6
 800aff8:	0039      	movs	r1, r7
 800affa:	f7f5 fa29 	bl	8000450 <__aeabi_dcmplt>
 800affe:	2800      	cmp	r0, #0
 800b000:	d004      	beq.n	800b00c <__ieee754_sqrt+0x1ac>
 800b002:	3402      	adds	r4, #2
 800b004:	4263      	negs	r3, r4
 800b006:	4163      	adcs	r3, r4
 800b008:	18ed      	adds	r5, r5, r3
 800b00a:	e7e3      	b.n	800afd4 <__ieee754_sqrt+0x174>
 800b00c:	2301      	movs	r3, #1
 800b00e:	3401      	adds	r4, #1
 800b010:	439c      	bics	r4, r3
 800b012:	e7df      	b.n	800afd4 <__ieee754_sqrt+0x174>
 800b014:	7ff00000 	.word	0x7ff00000
 800b018:	fffffc01 	.word	0xfffffc01
 800b01c:	0800bc50 	.word	0x0800bc50
 800b020:	0800bc48 	.word	0x0800bc48
 800b024:	3fe00000 	.word	0x3fe00000

0800b028 <__ieee754_atan2>:
 800b028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b02a:	4254      	negs	r4, r2
 800b02c:	005e      	lsls	r6, r3, #1
 800b02e:	4314      	orrs	r4, r2
 800b030:	4f44      	ldr	r7, [pc, #272]	@ (800b144 <__ieee754_atan2+0x11c>)
 800b032:	b085      	sub	sp, #20
 800b034:	0876      	lsrs	r6, r6, #1
 800b036:	0fe4      	lsrs	r4, r4, #31
 800b038:	9302      	str	r3, [sp, #8]
 800b03a:	4334      	orrs	r4, r6
 800b03c:	42bc      	cmp	r4, r7
 800b03e:	d809      	bhi.n	800b054 <__ieee754_atan2+0x2c>
 800b040:	4244      	negs	r4, r0
 800b042:	004d      	lsls	r5, r1, #1
 800b044:	4304      	orrs	r4, r0
 800b046:	086d      	lsrs	r5, r5, #1
 800b048:	0fe4      	lsrs	r4, r4, #31
 800b04a:	9101      	str	r1, [sp, #4]
 800b04c:	9003      	str	r0, [sp, #12]
 800b04e:	432c      	orrs	r4, r5
 800b050:	42bc      	cmp	r4, r7
 800b052:	d903      	bls.n	800b05c <__ieee754_atan2+0x34>
 800b054:	f7f5 ffbe 	bl	8000fd4 <__aeabi_dadd>
 800b058:	b005      	add	sp, #20
 800b05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b05c:	4c3a      	ldr	r4, [pc, #232]	@ (800b148 <__ieee754_atan2+0x120>)
 800b05e:	191c      	adds	r4, r3, r4
 800b060:	4314      	orrs	r4, r2
 800b062:	d102      	bne.n	800b06a <__ieee754_atan2+0x42>
 800b064:	f000 fa38 	bl	800b4d8 <atan>
 800b068:	e7f6      	b.n	800b058 <__ieee754_atan2+0x30>
 800b06a:	179c      	asrs	r4, r3, #30
 800b06c:	46a4      	mov	ip, r4
 800b06e:	2402      	movs	r4, #2
 800b070:	4667      	mov	r7, ip
 800b072:	403c      	ands	r4, r7
 800b074:	9f01      	ldr	r7, [sp, #4]
 800b076:	0fff      	lsrs	r7, r7, #31
 800b078:	433c      	orrs	r4, r7
 800b07a:	9f03      	ldr	r7, [sp, #12]
 800b07c:	432f      	orrs	r7, r5
 800b07e:	d106      	bne.n	800b08e <__ieee754_atan2+0x66>
 800b080:	2c02      	cmp	r4, #2
 800b082:	d056      	beq.n	800b132 <__ieee754_atan2+0x10a>
 800b084:	2c03      	cmp	r4, #3
 800b086:	d1e7      	bne.n	800b058 <__ieee754_atan2+0x30>
 800b088:	4830      	ldr	r0, [pc, #192]	@ (800b14c <__ieee754_atan2+0x124>)
 800b08a:	4931      	ldr	r1, [pc, #196]	@ (800b150 <__ieee754_atan2+0x128>)
 800b08c:	e7e4      	b.n	800b058 <__ieee754_atan2+0x30>
 800b08e:	0037      	movs	r7, r6
 800b090:	4317      	orrs	r7, r2
 800b092:	d105      	bne.n	800b0a0 <__ieee754_atan2+0x78>
 800b094:	9b01      	ldr	r3, [sp, #4]
 800b096:	482d      	ldr	r0, [pc, #180]	@ (800b14c <__ieee754_atan2+0x124>)
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db50      	blt.n	800b13e <__ieee754_atan2+0x116>
 800b09c:	492d      	ldr	r1, [pc, #180]	@ (800b154 <__ieee754_atan2+0x12c>)
 800b09e:	e7db      	b.n	800b058 <__ieee754_atan2+0x30>
 800b0a0:	4f28      	ldr	r7, [pc, #160]	@ (800b144 <__ieee754_atan2+0x11c>)
 800b0a2:	42be      	cmp	r6, r7
 800b0a4:	d110      	bne.n	800b0c8 <__ieee754_atan2+0xa0>
 800b0a6:	3c01      	subs	r4, #1
 800b0a8:	42b5      	cmp	r5, r6
 800b0aa:	d105      	bne.n	800b0b8 <__ieee754_atan2+0x90>
 800b0ac:	4b2a      	ldr	r3, [pc, #168]	@ (800b158 <__ieee754_atan2+0x130>)
 800b0ae:	2c02      	cmp	r4, #2
 800b0b0:	d905      	bls.n	800b0be <__ieee754_atan2+0x96>
 800b0b2:	4826      	ldr	r0, [pc, #152]	@ (800b14c <__ieee754_atan2+0x124>)
 800b0b4:	4929      	ldr	r1, [pc, #164]	@ (800b15c <__ieee754_atan2+0x134>)
 800b0b6:	e7cf      	b.n	800b058 <__ieee754_atan2+0x30>
 800b0b8:	2c02      	cmp	r4, #2
 800b0ba:	d83d      	bhi.n	800b138 <__ieee754_atan2+0x110>
 800b0bc:	4b28      	ldr	r3, [pc, #160]	@ (800b160 <__ieee754_atan2+0x138>)
 800b0be:	00e4      	lsls	r4, r4, #3
 800b0c0:	191b      	adds	r3, r3, r4
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	6859      	ldr	r1, [r3, #4]
 800b0c6:	e7c7      	b.n	800b058 <__ieee754_atan2+0x30>
 800b0c8:	4f1e      	ldr	r7, [pc, #120]	@ (800b144 <__ieee754_atan2+0x11c>)
 800b0ca:	42bd      	cmp	r5, r7
 800b0cc:	d0e2      	beq.n	800b094 <__ieee754_atan2+0x6c>
 800b0ce:	1bad      	subs	r5, r5, r6
 800b0d0:	152d      	asrs	r5, r5, #20
 800b0d2:	2d3c      	cmp	r5, #60	@ 0x3c
 800b0d4:	dc17      	bgt.n	800b106 <__ieee754_atan2+0xde>
 800b0d6:	9e02      	ldr	r6, [sp, #8]
 800b0d8:	2e00      	cmp	r6, #0
 800b0da:	da01      	bge.n	800b0e0 <__ieee754_atan2+0xb8>
 800b0dc:	353c      	adds	r5, #60	@ 0x3c
 800b0de:	db15      	blt.n	800b10c <__ieee754_atan2+0xe4>
 800b0e0:	f7f6 fb3e 	bl	8001760 <__aeabi_ddiv>
 800b0e4:	f000 fb78 	bl	800b7d8 <fabs>
 800b0e8:	f000 f9f6 	bl	800b4d8 <atan>
 800b0ec:	2c01      	cmp	r4, #1
 800b0ee:	d010      	beq.n	800b112 <__ieee754_atan2+0xea>
 800b0f0:	2c02      	cmp	r4, #2
 800b0f2:	d013      	beq.n	800b11c <__ieee754_atan2+0xf4>
 800b0f4:	2c00      	cmp	r4, #0
 800b0f6:	d0af      	beq.n	800b058 <__ieee754_atan2+0x30>
 800b0f8:	4a1a      	ldr	r2, [pc, #104]	@ (800b164 <__ieee754_atan2+0x13c>)
 800b0fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b168 <__ieee754_atan2+0x140>)
 800b0fc:	f7f7 fa50 	bl	80025a0 <__aeabi_dsub>
 800b100:	4a12      	ldr	r2, [pc, #72]	@ (800b14c <__ieee754_atan2+0x124>)
 800b102:	4b1a      	ldr	r3, [pc, #104]	@ (800b16c <__ieee754_atan2+0x144>)
 800b104:	e012      	b.n	800b12c <__ieee754_atan2+0x104>
 800b106:	4811      	ldr	r0, [pc, #68]	@ (800b14c <__ieee754_atan2+0x124>)
 800b108:	4912      	ldr	r1, [pc, #72]	@ (800b154 <__ieee754_atan2+0x12c>)
 800b10a:	e7ef      	b.n	800b0ec <__ieee754_atan2+0xc4>
 800b10c:	2000      	movs	r0, #0
 800b10e:	2100      	movs	r1, #0
 800b110:	e7ec      	b.n	800b0ec <__ieee754_atan2+0xc4>
 800b112:	2480      	movs	r4, #128	@ 0x80
 800b114:	0624      	lsls	r4, r4, #24
 800b116:	190b      	adds	r3, r1, r4
 800b118:	0019      	movs	r1, r3
 800b11a:	e79d      	b.n	800b058 <__ieee754_atan2+0x30>
 800b11c:	4a11      	ldr	r2, [pc, #68]	@ (800b164 <__ieee754_atan2+0x13c>)
 800b11e:	4b12      	ldr	r3, [pc, #72]	@ (800b168 <__ieee754_atan2+0x140>)
 800b120:	f7f7 fa3e 	bl	80025a0 <__aeabi_dsub>
 800b124:	0002      	movs	r2, r0
 800b126:	000b      	movs	r3, r1
 800b128:	4808      	ldr	r0, [pc, #32]	@ (800b14c <__ieee754_atan2+0x124>)
 800b12a:	4910      	ldr	r1, [pc, #64]	@ (800b16c <__ieee754_atan2+0x144>)
 800b12c:	f7f7 fa38 	bl	80025a0 <__aeabi_dsub>
 800b130:	e792      	b.n	800b058 <__ieee754_atan2+0x30>
 800b132:	4806      	ldr	r0, [pc, #24]	@ (800b14c <__ieee754_atan2+0x124>)
 800b134:	490d      	ldr	r1, [pc, #52]	@ (800b16c <__ieee754_atan2+0x144>)
 800b136:	e78f      	b.n	800b058 <__ieee754_atan2+0x30>
 800b138:	2000      	movs	r0, #0
 800b13a:	2100      	movs	r1, #0
 800b13c:	e78c      	b.n	800b058 <__ieee754_atan2+0x30>
 800b13e:	490c      	ldr	r1, [pc, #48]	@ (800b170 <__ieee754_atan2+0x148>)
 800b140:	e78a      	b.n	800b058 <__ieee754_atan2+0x30>
 800b142:	46c0      	nop			@ (mov r8, r8)
 800b144:	7ff00000 	.word	0x7ff00000
 800b148:	c0100000 	.word	0xc0100000
 800b14c:	54442d18 	.word	0x54442d18
 800b150:	c00921fb 	.word	0xc00921fb
 800b154:	3ff921fb 	.word	0x3ff921fb
 800b158:	0800bc70 	.word	0x0800bc70
 800b15c:	3fe921fb 	.word	0x3fe921fb
 800b160:	0800bc58 	.word	0x0800bc58
 800b164:	33145c07 	.word	0x33145c07
 800b168:	3ca1a626 	.word	0x3ca1a626
 800b16c:	400921fb 	.word	0x400921fb
 800b170:	bff921fb 	.word	0xbff921fb

0800b174 <__ieee754_log>:
 800b174:	2380      	movs	r3, #128	@ 0x80
 800b176:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b178:	035b      	lsls	r3, r3, #13
 800b17a:	000e      	movs	r6, r1
 800b17c:	b08d      	sub	sp, #52	@ 0x34
 800b17e:	4299      	cmp	r1, r3
 800b180:	da23      	bge.n	800b1ca <__ieee754_log+0x56>
 800b182:	004b      	lsls	r3, r1, #1
 800b184:	085b      	lsrs	r3, r3, #1
 800b186:	4303      	orrs	r3, r0
 800b188:	d107      	bne.n	800b19a <__ieee754_log+0x26>
 800b18a:	2200      	movs	r2, #0
 800b18c:	2300      	movs	r3, #0
 800b18e:	2000      	movs	r0, #0
 800b190:	49b4      	ldr	r1, [pc, #720]	@ (800b464 <__ieee754_log+0x2f0>)
 800b192:	f7f6 fae5 	bl	8001760 <__aeabi_ddiv>
 800b196:	b00d      	add	sp, #52	@ 0x34
 800b198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19a:	2900      	cmp	r1, #0
 800b19c:	da06      	bge.n	800b1ac <__ieee754_log+0x38>
 800b19e:	0002      	movs	r2, r0
 800b1a0:	000b      	movs	r3, r1
 800b1a2:	f7f7 f9fd 	bl	80025a0 <__aeabi_dsub>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	e7f2      	b.n	800b192 <__ieee754_log+0x1e>
 800b1ac:	4bae      	ldr	r3, [pc, #696]	@ (800b468 <__ieee754_log+0x2f4>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f7f6 ff10 	bl	8001fd4 <__aeabi_dmul>
 800b1b4:	2336      	movs	r3, #54	@ 0x36
 800b1b6:	000e      	movs	r6, r1
 800b1b8:	425b      	negs	r3, r3
 800b1ba:	4aac      	ldr	r2, [pc, #688]	@ (800b46c <__ieee754_log+0x2f8>)
 800b1bc:	4296      	cmp	r6, r2
 800b1be:	dd06      	ble.n	800b1ce <__ieee754_log+0x5a>
 800b1c0:	0002      	movs	r2, r0
 800b1c2:	000b      	movs	r3, r1
 800b1c4:	f7f5 ff06 	bl	8000fd4 <__aeabi_dadd>
 800b1c8:	e7e5      	b.n	800b196 <__ieee754_log+0x22>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e7f5      	b.n	800b1ba <__ieee754_log+0x46>
 800b1ce:	4ca8      	ldr	r4, [pc, #672]	@ (800b470 <__ieee754_log+0x2fc>)
 800b1d0:	1532      	asrs	r2, r6, #20
 800b1d2:	1912      	adds	r2, r2, r4
 800b1d4:	0336      	lsls	r6, r6, #12
 800b1d6:	4ca7      	ldr	r4, [pc, #668]	@ (800b474 <__ieee754_log+0x300>)
 800b1d8:	18d2      	adds	r2, r2, r3
 800b1da:	0b33      	lsrs	r3, r6, #12
 800b1dc:	9302      	str	r3, [sp, #8]
 800b1de:	191b      	adds	r3, r3, r4
 800b1e0:	2480      	movs	r4, #128	@ 0x80
 800b1e2:	0364      	lsls	r4, r4, #13
 800b1e4:	4023      	ands	r3, r4
 800b1e6:	4ca4      	ldr	r4, [pc, #656]	@ (800b478 <__ieee754_log+0x304>)
 800b1e8:	9d02      	ldr	r5, [sp, #8]
 800b1ea:	405c      	eors	r4, r3
 800b1ec:	151b      	asrs	r3, r3, #20
 800b1ee:	189b      	adds	r3, r3, r2
 800b1f0:	4325      	orrs	r5, r4
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	0029      	movs	r1, r5
 800b1f8:	4b9f      	ldr	r3, [pc, #636]	@ (800b478 <__ieee754_log+0x304>)
 800b1fa:	f7f7 f9d1 	bl	80025a0 <__aeabi_dsub>
 800b1fe:	9b02      	ldr	r3, [sp, #8]
 800b200:	0006      	movs	r6, r0
 800b202:	3302      	adds	r3, #2
 800b204:	031b      	lsls	r3, r3, #12
 800b206:	000f      	movs	r7, r1
 800b208:	2200      	movs	r2, #0
 800b20a:	0b1b      	lsrs	r3, r3, #12
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	dc64      	bgt.n	800b2da <__ieee754_log+0x166>
 800b210:	2300      	movs	r3, #0
 800b212:	f7f5 f917 	bl	8000444 <__aeabi_dcmpeq>
 800b216:	2800      	cmp	r0, #0
 800b218:	d019      	beq.n	800b24e <__ieee754_log+0xda>
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d100      	bne.n	800b222 <__ieee754_log+0xae>
 800b220:	e11c      	b.n	800b45c <__ieee754_log+0x2e8>
 800b222:	0018      	movs	r0, r3
 800b224:	f7f7 fe24 	bl	8002e70 <__aeabi_i2d>
 800b228:	4a94      	ldr	r2, [pc, #592]	@ (800b47c <__ieee754_log+0x308>)
 800b22a:	4b95      	ldr	r3, [pc, #596]	@ (800b480 <__ieee754_log+0x30c>)
 800b22c:	0004      	movs	r4, r0
 800b22e:	000d      	movs	r5, r1
 800b230:	f7f6 fed0 	bl	8001fd4 <__aeabi_dmul>
 800b234:	4a93      	ldr	r2, [pc, #588]	@ (800b484 <__ieee754_log+0x310>)
 800b236:	0006      	movs	r6, r0
 800b238:	000f      	movs	r7, r1
 800b23a:	4b93      	ldr	r3, [pc, #588]	@ (800b488 <__ieee754_log+0x314>)
 800b23c:	0020      	movs	r0, r4
 800b23e:	0029      	movs	r1, r5
 800b240:	f7f6 fec8 	bl	8001fd4 <__aeabi_dmul>
 800b244:	0002      	movs	r2, r0
 800b246:	000b      	movs	r3, r1
 800b248:	0030      	movs	r0, r6
 800b24a:	0039      	movs	r1, r7
 800b24c:	e7ba      	b.n	800b1c4 <__ieee754_log+0x50>
 800b24e:	4a8f      	ldr	r2, [pc, #572]	@ (800b48c <__ieee754_log+0x318>)
 800b250:	4b8f      	ldr	r3, [pc, #572]	@ (800b490 <__ieee754_log+0x31c>)
 800b252:	0030      	movs	r0, r6
 800b254:	0039      	movs	r1, r7
 800b256:	f7f6 febd 	bl	8001fd4 <__aeabi_dmul>
 800b25a:	0002      	movs	r2, r0
 800b25c:	000b      	movs	r3, r1
 800b25e:	2000      	movs	r0, #0
 800b260:	498c      	ldr	r1, [pc, #560]	@ (800b494 <__ieee754_log+0x320>)
 800b262:	f7f7 f99d 	bl	80025a0 <__aeabi_dsub>
 800b266:	0032      	movs	r2, r6
 800b268:	0004      	movs	r4, r0
 800b26a:	000d      	movs	r5, r1
 800b26c:	003b      	movs	r3, r7
 800b26e:	0030      	movs	r0, r6
 800b270:	0039      	movs	r1, r7
 800b272:	f7f6 feaf 	bl	8001fd4 <__aeabi_dmul>
 800b276:	000b      	movs	r3, r1
 800b278:	0002      	movs	r2, r0
 800b27a:	0029      	movs	r1, r5
 800b27c:	0020      	movs	r0, r4
 800b27e:	f7f6 fea9 	bl	8001fd4 <__aeabi_dmul>
 800b282:	9b00      	ldr	r3, [sp, #0]
 800b284:	9002      	str	r0, [sp, #8]
 800b286:	9103      	str	r1, [sp, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d106      	bne.n	800b29a <__ieee754_log+0x126>
 800b28c:	0002      	movs	r2, r0
 800b28e:	000b      	movs	r3, r1
 800b290:	0030      	movs	r0, r6
 800b292:	0039      	movs	r1, r7
 800b294:	f7f7 f984 	bl	80025a0 <__aeabi_dsub>
 800b298:	e77d      	b.n	800b196 <__ieee754_log+0x22>
 800b29a:	9800      	ldr	r0, [sp, #0]
 800b29c:	f7f7 fde8 	bl	8002e70 <__aeabi_i2d>
 800b2a0:	4a76      	ldr	r2, [pc, #472]	@ (800b47c <__ieee754_log+0x308>)
 800b2a2:	4b77      	ldr	r3, [pc, #476]	@ (800b480 <__ieee754_log+0x30c>)
 800b2a4:	0004      	movs	r4, r0
 800b2a6:	000d      	movs	r5, r1
 800b2a8:	f7f6 fe94 	bl	8001fd4 <__aeabi_dmul>
 800b2ac:	4a75      	ldr	r2, [pc, #468]	@ (800b484 <__ieee754_log+0x310>)
 800b2ae:	9000      	str	r0, [sp, #0]
 800b2b0:	9101      	str	r1, [sp, #4]
 800b2b2:	4b75      	ldr	r3, [pc, #468]	@ (800b488 <__ieee754_log+0x314>)
 800b2b4:	0020      	movs	r0, r4
 800b2b6:	0029      	movs	r1, r5
 800b2b8:	f7f6 fe8c 	bl	8001fd4 <__aeabi_dmul>
 800b2bc:	0002      	movs	r2, r0
 800b2be:	000b      	movs	r3, r1
 800b2c0:	9802      	ldr	r0, [sp, #8]
 800b2c2:	9903      	ldr	r1, [sp, #12]
 800b2c4:	f7f7 f96c 	bl	80025a0 <__aeabi_dsub>
 800b2c8:	0032      	movs	r2, r6
 800b2ca:	003b      	movs	r3, r7
 800b2cc:	f7f7 f968 	bl	80025a0 <__aeabi_dsub>
 800b2d0:	0002      	movs	r2, r0
 800b2d2:	000b      	movs	r3, r1
 800b2d4:	9800      	ldr	r0, [sp, #0]
 800b2d6:	9901      	ldr	r1, [sp, #4]
 800b2d8:	e7dc      	b.n	800b294 <__ieee754_log+0x120>
 800b2da:	2380      	movs	r3, #128	@ 0x80
 800b2dc:	05db      	lsls	r3, r3, #23
 800b2de:	f7f5 fe79 	bl	8000fd4 <__aeabi_dadd>
 800b2e2:	0002      	movs	r2, r0
 800b2e4:	000b      	movs	r3, r1
 800b2e6:	0030      	movs	r0, r6
 800b2e8:	0039      	movs	r1, r7
 800b2ea:	f7f6 fa39 	bl	8001760 <__aeabi_ddiv>
 800b2ee:	9004      	str	r0, [sp, #16]
 800b2f0:	9105      	str	r1, [sp, #20]
 800b2f2:	9800      	ldr	r0, [sp, #0]
 800b2f4:	f7f7 fdbc 	bl	8002e70 <__aeabi_i2d>
 800b2f8:	9a04      	ldr	r2, [sp, #16]
 800b2fa:	9b05      	ldr	r3, [sp, #20]
 800b2fc:	9006      	str	r0, [sp, #24]
 800b2fe:	9107      	str	r1, [sp, #28]
 800b300:	0010      	movs	r0, r2
 800b302:	0019      	movs	r1, r3
 800b304:	f7f6 fe66 	bl	8001fd4 <__aeabi_dmul>
 800b308:	4a63      	ldr	r2, [pc, #396]	@ (800b498 <__ieee754_log+0x324>)
 800b30a:	9b02      	ldr	r3, [sp, #8]
 800b30c:	4694      	mov	ip, r2
 800b30e:	4463      	add	r3, ip
 800b310:	0002      	movs	r2, r0
 800b312:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b314:	000b      	movs	r3, r1
 800b316:	9008      	str	r0, [sp, #32]
 800b318:	9109      	str	r1, [sp, #36]	@ 0x24
 800b31a:	f7f6 fe5b 	bl	8001fd4 <__aeabi_dmul>
 800b31e:	0004      	movs	r4, r0
 800b320:	000d      	movs	r5, r1
 800b322:	4a5e      	ldr	r2, [pc, #376]	@ (800b49c <__ieee754_log+0x328>)
 800b324:	4b5e      	ldr	r3, [pc, #376]	@ (800b4a0 <__ieee754_log+0x32c>)
 800b326:	f7f6 fe55 	bl	8001fd4 <__aeabi_dmul>
 800b32a:	4a5e      	ldr	r2, [pc, #376]	@ (800b4a4 <__ieee754_log+0x330>)
 800b32c:	4b5e      	ldr	r3, [pc, #376]	@ (800b4a8 <__ieee754_log+0x334>)
 800b32e:	f7f5 fe51 	bl	8000fd4 <__aeabi_dadd>
 800b332:	0022      	movs	r2, r4
 800b334:	002b      	movs	r3, r5
 800b336:	f7f6 fe4d 	bl	8001fd4 <__aeabi_dmul>
 800b33a:	4a5c      	ldr	r2, [pc, #368]	@ (800b4ac <__ieee754_log+0x338>)
 800b33c:	4b5c      	ldr	r3, [pc, #368]	@ (800b4b0 <__ieee754_log+0x33c>)
 800b33e:	f7f5 fe49 	bl	8000fd4 <__aeabi_dadd>
 800b342:	0022      	movs	r2, r4
 800b344:	002b      	movs	r3, r5
 800b346:	f7f6 fe45 	bl	8001fd4 <__aeabi_dmul>
 800b34a:	4a5a      	ldr	r2, [pc, #360]	@ (800b4b4 <__ieee754_log+0x340>)
 800b34c:	4b5a      	ldr	r3, [pc, #360]	@ (800b4b8 <__ieee754_log+0x344>)
 800b34e:	f7f5 fe41 	bl	8000fd4 <__aeabi_dadd>
 800b352:	9a08      	ldr	r2, [sp, #32]
 800b354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b356:	f7f6 fe3d 	bl	8001fd4 <__aeabi_dmul>
 800b35a:	4a58      	ldr	r2, [pc, #352]	@ (800b4bc <__ieee754_log+0x348>)
 800b35c:	9008      	str	r0, [sp, #32]
 800b35e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b360:	4b57      	ldr	r3, [pc, #348]	@ (800b4c0 <__ieee754_log+0x34c>)
 800b362:	0020      	movs	r0, r4
 800b364:	0029      	movs	r1, r5
 800b366:	f7f6 fe35 	bl	8001fd4 <__aeabi_dmul>
 800b36a:	4a56      	ldr	r2, [pc, #344]	@ (800b4c4 <__ieee754_log+0x350>)
 800b36c:	4b56      	ldr	r3, [pc, #344]	@ (800b4c8 <__ieee754_log+0x354>)
 800b36e:	f7f5 fe31 	bl	8000fd4 <__aeabi_dadd>
 800b372:	0022      	movs	r2, r4
 800b374:	002b      	movs	r3, r5
 800b376:	f7f6 fe2d 	bl	8001fd4 <__aeabi_dmul>
 800b37a:	4a54      	ldr	r2, [pc, #336]	@ (800b4cc <__ieee754_log+0x358>)
 800b37c:	4b54      	ldr	r3, [pc, #336]	@ (800b4d0 <__ieee754_log+0x35c>)
 800b37e:	f7f5 fe29 	bl	8000fd4 <__aeabi_dadd>
 800b382:	0022      	movs	r2, r4
 800b384:	002b      	movs	r3, r5
 800b386:	f7f6 fe25 	bl	8001fd4 <__aeabi_dmul>
 800b38a:	0002      	movs	r2, r0
 800b38c:	000b      	movs	r3, r1
 800b38e:	9808      	ldr	r0, [sp, #32]
 800b390:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b392:	f7f5 fe1f 	bl	8000fd4 <__aeabi_dadd>
 800b396:	9a02      	ldr	r2, [sp, #8]
 800b398:	4b4e      	ldr	r3, [pc, #312]	@ (800b4d4 <__ieee754_log+0x360>)
 800b39a:	0004      	movs	r4, r0
 800b39c:	1a9b      	subs	r3, r3, r2
 800b39e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b3a0:	000d      	movs	r5, r1
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd34      	ble.n	800b412 <__ieee754_log+0x29e>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	4b3a      	ldr	r3, [pc, #232]	@ (800b494 <__ieee754_log+0x320>)
 800b3ac:	0030      	movs	r0, r6
 800b3ae:	0039      	movs	r1, r7
 800b3b0:	f7f6 fe10 	bl	8001fd4 <__aeabi_dmul>
 800b3b4:	0032      	movs	r2, r6
 800b3b6:	003b      	movs	r3, r7
 800b3b8:	f7f6 fe0c 	bl	8001fd4 <__aeabi_dmul>
 800b3bc:	0002      	movs	r2, r0
 800b3be:	000b      	movs	r3, r1
 800b3c0:	9002      	str	r0, [sp, #8]
 800b3c2:	9103      	str	r1, [sp, #12]
 800b3c4:	0020      	movs	r0, r4
 800b3c6:	0029      	movs	r1, r5
 800b3c8:	f7f5 fe04 	bl	8000fd4 <__aeabi_dadd>
 800b3cc:	9a04      	ldr	r2, [sp, #16]
 800b3ce:	9b05      	ldr	r3, [sp, #20]
 800b3d0:	f7f6 fe00 	bl	8001fd4 <__aeabi_dmul>
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	0004      	movs	r4, r0
 800b3d8:	000d      	movs	r5, r1
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <__ieee754_log+0x278>
 800b3de:	0002      	movs	r2, r0
 800b3e0:	000b      	movs	r3, r1
 800b3e2:	9802      	ldr	r0, [sp, #8]
 800b3e4:	9903      	ldr	r1, [sp, #12]
 800b3e6:	f7f7 f8db 	bl	80025a0 <__aeabi_dsub>
 800b3ea:	e74f      	b.n	800b28c <__ieee754_log+0x118>
 800b3ec:	4a23      	ldr	r2, [pc, #140]	@ (800b47c <__ieee754_log+0x308>)
 800b3ee:	4b24      	ldr	r3, [pc, #144]	@ (800b480 <__ieee754_log+0x30c>)
 800b3f0:	9806      	ldr	r0, [sp, #24]
 800b3f2:	9907      	ldr	r1, [sp, #28]
 800b3f4:	f7f6 fdee 	bl	8001fd4 <__aeabi_dmul>
 800b3f8:	4a22      	ldr	r2, [pc, #136]	@ (800b484 <__ieee754_log+0x310>)
 800b3fa:	9000      	str	r0, [sp, #0]
 800b3fc:	9101      	str	r1, [sp, #4]
 800b3fe:	9806      	ldr	r0, [sp, #24]
 800b400:	9907      	ldr	r1, [sp, #28]
 800b402:	4b21      	ldr	r3, [pc, #132]	@ (800b488 <__ieee754_log+0x314>)
 800b404:	f7f6 fde6 	bl	8001fd4 <__aeabi_dmul>
 800b408:	0022      	movs	r2, r4
 800b40a:	002b      	movs	r3, r5
 800b40c:	f7f5 fde2 	bl	8000fd4 <__aeabi_dadd>
 800b410:	e754      	b.n	800b2bc <__ieee754_log+0x148>
 800b412:	0002      	movs	r2, r0
 800b414:	000b      	movs	r3, r1
 800b416:	0030      	movs	r0, r6
 800b418:	0039      	movs	r1, r7
 800b41a:	f7f7 f8c1 	bl	80025a0 <__aeabi_dsub>
 800b41e:	9a04      	ldr	r2, [sp, #16]
 800b420:	9b05      	ldr	r3, [sp, #20]
 800b422:	f7f6 fdd7 	bl	8001fd4 <__aeabi_dmul>
 800b426:	9b00      	ldr	r3, [sp, #0]
 800b428:	0004      	movs	r4, r0
 800b42a:	000d      	movs	r5, r1
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d102      	bne.n	800b436 <__ieee754_log+0x2c2>
 800b430:	0002      	movs	r2, r0
 800b432:	000b      	movs	r3, r1
 800b434:	e72c      	b.n	800b290 <__ieee754_log+0x11c>
 800b436:	4a11      	ldr	r2, [pc, #68]	@ (800b47c <__ieee754_log+0x308>)
 800b438:	4b11      	ldr	r3, [pc, #68]	@ (800b480 <__ieee754_log+0x30c>)
 800b43a:	9806      	ldr	r0, [sp, #24]
 800b43c:	9907      	ldr	r1, [sp, #28]
 800b43e:	f7f6 fdc9 	bl	8001fd4 <__aeabi_dmul>
 800b442:	4a10      	ldr	r2, [pc, #64]	@ (800b484 <__ieee754_log+0x310>)
 800b444:	9000      	str	r0, [sp, #0]
 800b446:	9101      	str	r1, [sp, #4]
 800b448:	9806      	ldr	r0, [sp, #24]
 800b44a:	9907      	ldr	r1, [sp, #28]
 800b44c:	4b0e      	ldr	r3, [pc, #56]	@ (800b488 <__ieee754_log+0x314>)
 800b44e:	f7f6 fdc1 	bl	8001fd4 <__aeabi_dmul>
 800b452:	0002      	movs	r2, r0
 800b454:	000b      	movs	r3, r1
 800b456:	0020      	movs	r0, r4
 800b458:	0029      	movs	r1, r5
 800b45a:	e733      	b.n	800b2c4 <__ieee754_log+0x150>
 800b45c:	2000      	movs	r0, #0
 800b45e:	2100      	movs	r1, #0
 800b460:	e699      	b.n	800b196 <__ieee754_log+0x22>
 800b462:	46c0      	nop			@ (mov r8, r8)
 800b464:	c3500000 	.word	0xc3500000
 800b468:	43500000 	.word	0x43500000
 800b46c:	7fefffff 	.word	0x7fefffff
 800b470:	fffffc01 	.word	0xfffffc01
 800b474:	00095f64 	.word	0x00095f64
 800b478:	3ff00000 	.word	0x3ff00000
 800b47c:	fee00000 	.word	0xfee00000
 800b480:	3fe62e42 	.word	0x3fe62e42
 800b484:	35793c76 	.word	0x35793c76
 800b488:	3dea39ef 	.word	0x3dea39ef
 800b48c:	55555555 	.word	0x55555555
 800b490:	3fd55555 	.word	0x3fd55555
 800b494:	3fe00000 	.word	0x3fe00000
 800b498:	fff9eb86 	.word	0xfff9eb86
 800b49c:	df3e5244 	.word	0xdf3e5244
 800b4a0:	3fc2f112 	.word	0x3fc2f112
 800b4a4:	96cb03de 	.word	0x96cb03de
 800b4a8:	3fc74664 	.word	0x3fc74664
 800b4ac:	94229359 	.word	0x94229359
 800b4b0:	3fd24924 	.word	0x3fd24924
 800b4b4:	55555593 	.word	0x55555593
 800b4b8:	3fe55555 	.word	0x3fe55555
 800b4bc:	d078c69f 	.word	0xd078c69f
 800b4c0:	3fc39a09 	.word	0x3fc39a09
 800b4c4:	1d8e78af 	.word	0x1d8e78af
 800b4c8:	3fcc71c5 	.word	0x3fcc71c5
 800b4cc:	9997fa04 	.word	0x9997fa04
 800b4d0:	3fd99999 	.word	0x3fd99999
 800b4d4:	0006b851 	.word	0x0006b851

0800b4d8 <atan>:
 800b4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4da:	4b98      	ldr	r3, [pc, #608]	@ (800b73c <atan+0x264>)
 800b4dc:	b085      	sub	sp, #20
 800b4de:	004e      	lsls	r6, r1, #1
 800b4e0:	0004      	movs	r4, r0
 800b4e2:	000d      	movs	r5, r1
 800b4e4:	9103      	str	r1, [sp, #12]
 800b4e6:	0876      	lsrs	r6, r6, #1
 800b4e8:	429e      	cmp	r6, r3
 800b4ea:	d918      	bls.n	800b51e <atan+0x46>
 800b4ec:	4b94      	ldr	r3, [pc, #592]	@ (800b740 <atan+0x268>)
 800b4ee:	429e      	cmp	r6, r3
 800b4f0:	d802      	bhi.n	800b4f8 <atan+0x20>
 800b4f2:	d10a      	bne.n	800b50a <atan+0x32>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d008      	beq.n	800b50a <atan+0x32>
 800b4f8:	0022      	movs	r2, r4
 800b4fa:	002b      	movs	r3, r5
 800b4fc:	0020      	movs	r0, r4
 800b4fe:	0029      	movs	r1, r5
 800b500:	f7f5 fd68 	bl	8000fd4 <__aeabi_dadd>
 800b504:	0004      	movs	r4, r0
 800b506:	000d      	movs	r5, r1
 800b508:	e005      	b.n	800b516 <atan+0x3e>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	4c8d      	ldr	r4, [pc, #564]	@ (800b744 <atan+0x26c>)
 800b50e:	2b00      	cmp	r3, #0
 800b510:	dc00      	bgt.n	800b514 <atan+0x3c>
 800b512:	e111      	b.n	800b738 <atan+0x260>
 800b514:	4d8c      	ldr	r5, [pc, #560]	@ (800b748 <atan+0x270>)
 800b516:	0020      	movs	r0, r4
 800b518:	0029      	movs	r1, r5
 800b51a:	b005      	add	sp, #20
 800b51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b51e:	4b8b      	ldr	r3, [pc, #556]	@ (800b74c <atan+0x274>)
 800b520:	429e      	cmp	r6, r3
 800b522:	d80f      	bhi.n	800b544 <atan+0x6c>
 800b524:	4b8a      	ldr	r3, [pc, #552]	@ (800b750 <atan+0x278>)
 800b526:	429e      	cmp	r6, r3
 800b528:	d809      	bhi.n	800b53e <atan+0x66>
 800b52a:	4a8a      	ldr	r2, [pc, #552]	@ (800b754 <atan+0x27c>)
 800b52c:	4b8a      	ldr	r3, [pc, #552]	@ (800b758 <atan+0x280>)
 800b52e:	f7f5 fd51 	bl	8000fd4 <__aeabi_dadd>
 800b532:	2200      	movs	r2, #0
 800b534:	4b89      	ldr	r3, [pc, #548]	@ (800b75c <atan+0x284>)
 800b536:	f7f4 ff9f 	bl	8000478 <__aeabi_dcmpgt>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d1eb      	bne.n	800b516 <atan+0x3e>
 800b53e:	2301      	movs	r3, #1
 800b540:	425b      	negs	r3, r3
 800b542:	e025      	b.n	800b590 <atan+0xb8>
 800b544:	f000 f948 	bl	800b7d8 <fabs>
 800b548:	4b85      	ldr	r3, [pc, #532]	@ (800b760 <atan+0x288>)
 800b54a:	0004      	movs	r4, r0
 800b54c:	000d      	movs	r5, r1
 800b54e:	429e      	cmp	r6, r3
 800b550:	d900      	bls.n	800b554 <atan+0x7c>
 800b552:	e0aa      	b.n	800b6aa <atan+0x1d2>
 800b554:	4b83      	ldr	r3, [pc, #524]	@ (800b764 <atan+0x28c>)
 800b556:	429e      	cmp	r6, r3
 800b558:	d900      	bls.n	800b55c <atan+0x84>
 800b55a:	e090      	b.n	800b67e <atan+0x1a6>
 800b55c:	0002      	movs	r2, r0
 800b55e:	000b      	movs	r3, r1
 800b560:	f7f5 fd38 	bl	8000fd4 <__aeabi_dadd>
 800b564:	2200      	movs	r2, #0
 800b566:	4b7d      	ldr	r3, [pc, #500]	@ (800b75c <atan+0x284>)
 800b568:	f7f7 f81a 	bl	80025a0 <__aeabi_dsub>
 800b56c:	2380      	movs	r3, #128	@ 0x80
 800b56e:	0006      	movs	r6, r0
 800b570:	000f      	movs	r7, r1
 800b572:	2200      	movs	r2, #0
 800b574:	0020      	movs	r0, r4
 800b576:	0029      	movs	r1, r5
 800b578:	05db      	lsls	r3, r3, #23
 800b57a:	f7f5 fd2b 	bl	8000fd4 <__aeabi_dadd>
 800b57e:	000b      	movs	r3, r1
 800b580:	0002      	movs	r2, r0
 800b582:	0039      	movs	r1, r7
 800b584:	0030      	movs	r0, r6
 800b586:	f7f6 f8eb 	bl	8001760 <__aeabi_ddiv>
 800b58a:	2300      	movs	r3, #0
 800b58c:	0004      	movs	r4, r0
 800b58e:	000d      	movs	r5, r1
 800b590:	0022      	movs	r2, r4
 800b592:	9302      	str	r3, [sp, #8]
 800b594:	0020      	movs	r0, r4
 800b596:	002b      	movs	r3, r5
 800b598:	0029      	movs	r1, r5
 800b59a:	f7f6 fd1b 	bl	8001fd4 <__aeabi_dmul>
 800b59e:	0002      	movs	r2, r0
 800b5a0:	000b      	movs	r3, r1
 800b5a2:	9000      	str	r0, [sp, #0]
 800b5a4:	9101      	str	r1, [sp, #4]
 800b5a6:	f7f6 fd15 	bl	8001fd4 <__aeabi_dmul>
 800b5aa:	0006      	movs	r6, r0
 800b5ac:	000f      	movs	r7, r1
 800b5ae:	4a6e      	ldr	r2, [pc, #440]	@ (800b768 <atan+0x290>)
 800b5b0:	4b6e      	ldr	r3, [pc, #440]	@ (800b76c <atan+0x294>)
 800b5b2:	f7f6 fd0f 	bl	8001fd4 <__aeabi_dmul>
 800b5b6:	4a6e      	ldr	r2, [pc, #440]	@ (800b770 <atan+0x298>)
 800b5b8:	4b6e      	ldr	r3, [pc, #440]	@ (800b774 <atan+0x29c>)
 800b5ba:	f7f5 fd0b 	bl	8000fd4 <__aeabi_dadd>
 800b5be:	0032      	movs	r2, r6
 800b5c0:	003b      	movs	r3, r7
 800b5c2:	f7f6 fd07 	bl	8001fd4 <__aeabi_dmul>
 800b5c6:	4a6c      	ldr	r2, [pc, #432]	@ (800b778 <atan+0x2a0>)
 800b5c8:	4b6c      	ldr	r3, [pc, #432]	@ (800b77c <atan+0x2a4>)
 800b5ca:	f7f5 fd03 	bl	8000fd4 <__aeabi_dadd>
 800b5ce:	0032      	movs	r2, r6
 800b5d0:	003b      	movs	r3, r7
 800b5d2:	f7f6 fcff 	bl	8001fd4 <__aeabi_dmul>
 800b5d6:	4a6a      	ldr	r2, [pc, #424]	@ (800b780 <atan+0x2a8>)
 800b5d8:	4b6a      	ldr	r3, [pc, #424]	@ (800b784 <atan+0x2ac>)
 800b5da:	f7f5 fcfb 	bl	8000fd4 <__aeabi_dadd>
 800b5de:	0032      	movs	r2, r6
 800b5e0:	003b      	movs	r3, r7
 800b5e2:	f7f6 fcf7 	bl	8001fd4 <__aeabi_dmul>
 800b5e6:	4a68      	ldr	r2, [pc, #416]	@ (800b788 <atan+0x2b0>)
 800b5e8:	4b68      	ldr	r3, [pc, #416]	@ (800b78c <atan+0x2b4>)
 800b5ea:	f7f5 fcf3 	bl	8000fd4 <__aeabi_dadd>
 800b5ee:	0032      	movs	r2, r6
 800b5f0:	003b      	movs	r3, r7
 800b5f2:	f7f6 fcef 	bl	8001fd4 <__aeabi_dmul>
 800b5f6:	4a66      	ldr	r2, [pc, #408]	@ (800b790 <atan+0x2b8>)
 800b5f8:	4b66      	ldr	r3, [pc, #408]	@ (800b794 <atan+0x2bc>)
 800b5fa:	f7f5 fceb 	bl	8000fd4 <__aeabi_dadd>
 800b5fe:	9a00      	ldr	r2, [sp, #0]
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	f7f6 fce7 	bl	8001fd4 <__aeabi_dmul>
 800b606:	4a64      	ldr	r2, [pc, #400]	@ (800b798 <atan+0x2c0>)
 800b608:	9000      	str	r0, [sp, #0]
 800b60a:	9101      	str	r1, [sp, #4]
 800b60c:	4b63      	ldr	r3, [pc, #396]	@ (800b79c <atan+0x2c4>)
 800b60e:	0030      	movs	r0, r6
 800b610:	0039      	movs	r1, r7
 800b612:	f7f6 fcdf 	bl	8001fd4 <__aeabi_dmul>
 800b616:	4a62      	ldr	r2, [pc, #392]	@ (800b7a0 <atan+0x2c8>)
 800b618:	4b62      	ldr	r3, [pc, #392]	@ (800b7a4 <atan+0x2cc>)
 800b61a:	f7f6 ffc1 	bl	80025a0 <__aeabi_dsub>
 800b61e:	0032      	movs	r2, r6
 800b620:	003b      	movs	r3, r7
 800b622:	f7f6 fcd7 	bl	8001fd4 <__aeabi_dmul>
 800b626:	4a60      	ldr	r2, [pc, #384]	@ (800b7a8 <atan+0x2d0>)
 800b628:	4b60      	ldr	r3, [pc, #384]	@ (800b7ac <atan+0x2d4>)
 800b62a:	f7f6 ffb9 	bl	80025a0 <__aeabi_dsub>
 800b62e:	0032      	movs	r2, r6
 800b630:	003b      	movs	r3, r7
 800b632:	f7f6 fccf 	bl	8001fd4 <__aeabi_dmul>
 800b636:	4a5e      	ldr	r2, [pc, #376]	@ (800b7b0 <atan+0x2d8>)
 800b638:	4b5e      	ldr	r3, [pc, #376]	@ (800b7b4 <atan+0x2dc>)
 800b63a:	f7f6 ffb1 	bl	80025a0 <__aeabi_dsub>
 800b63e:	0032      	movs	r2, r6
 800b640:	003b      	movs	r3, r7
 800b642:	f7f6 fcc7 	bl	8001fd4 <__aeabi_dmul>
 800b646:	4a5c      	ldr	r2, [pc, #368]	@ (800b7b8 <atan+0x2e0>)
 800b648:	4b5c      	ldr	r3, [pc, #368]	@ (800b7bc <atan+0x2e4>)
 800b64a:	f7f6 ffa9 	bl	80025a0 <__aeabi_dsub>
 800b64e:	0032      	movs	r2, r6
 800b650:	003b      	movs	r3, r7
 800b652:	f7f6 fcbf 	bl	8001fd4 <__aeabi_dmul>
 800b656:	0002      	movs	r2, r0
 800b658:	000b      	movs	r3, r1
 800b65a:	9800      	ldr	r0, [sp, #0]
 800b65c:	9901      	ldr	r1, [sp, #4]
 800b65e:	f7f5 fcb9 	bl	8000fd4 <__aeabi_dadd>
 800b662:	002b      	movs	r3, r5
 800b664:	0022      	movs	r2, r4
 800b666:	f7f6 fcb5 	bl	8001fd4 <__aeabi_dmul>
 800b66a:	9b02      	ldr	r3, [sp, #8]
 800b66c:	3301      	adds	r3, #1
 800b66e:	d143      	bne.n	800b6f8 <atan+0x220>
 800b670:	0002      	movs	r2, r0
 800b672:	000b      	movs	r3, r1
 800b674:	0020      	movs	r0, r4
 800b676:	0029      	movs	r1, r5
 800b678:	f7f6 ff92 	bl	80025a0 <__aeabi_dsub>
 800b67c:	e742      	b.n	800b504 <atan+0x2c>
 800b67e:	2200      	movs	r2, #0
 800b680:	4b36      	ldr	r3, [pc, #216]	@ (800b75c <atan+0x284>)
 800b682:	f7f6 ff8d 	bl	80025a0 <__aeabi_dsub>
 800b686:	2200      	movs	r2, #0
 800b688:	0006      	movs	r6, r0
 800b68a:	000f      	movs	r7, r1
 800b68c:	0020      	movs	r0, r4
 800b68e:	0029      	movs	r1, r5
 800b690:	4b32      	ldr	r3, [pc, #200]	@ (800b75c <atan+0x284>)
 800b692:	f7f5 fc9f 	bl	8000fd4 <__aeabi_dadd>
 800b696:	000b      	movs	r3, r1
 800b698:	0002      	movs	r2, r0
 800b69a:	0039      	movs	r1, r7
 800b69c:	0030      	movs	r0, r6
 800b69e:	f7f6 f85f 	bl	8001760 <__aeabi_ddiv>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	0004      	movs	r4, r0
 800b6a6:	000d      	movs	r5, r1
 800b6a8:	e772      	b.n	800b590 <atan+0xb8>
 800b6aa:	4b45      	ldr	r3, [pc, #276]	@ (800b7c0 <atan+0x2e8>)
 800b6ac:	429e      	cmp	r6, r3
 800b6ae:	d819      	bhi.n	800b6e4 <atan+0x20c>
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	4b44      	ldr	r3, [pc, #272]	@ (800b7c4 <atan+0x2ec>)
 800b6b4:	f7f6 ff74 	bl	80025a0 <__aeabi_dsub>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	0006      	movs	r6, r0
 800b6bc:	000f      	movs	r7, r1
 800b6be:	0020      	movs	r0, r4
 800b6c0:	0029      	movs	r1, r5
 800b6c2:	4b40      	ldr	r3, [pc, #256]	@ (800b7c4 <atan+0x2ec>)
 800b6c4:	f7f6 fc86 	bl	8001fd4 <__aeabi_dmul>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4b24      	ldr	r3, [pc, #144]	@ (800b75c <atan+0x284>)
 800b6cc:	f7f5 fc82 	bl	8000fd4 <__aeabi_dadd>
 800b6d0:	000b      	movs	r3, r1
 800b6d2:	0002      	movs	r2, r0
 800b6d4:	0039      	movs	r1, r7
 800b6d6:	0030      	movs	r0, r6
 800b6d8:	f7f6 f842 	bl	8001760 <__aeabi_ddiv>
 800b6dc:	2302      	movs	r3, #2
 800b6de:	0004      	movs	r4, r0
 800b6e0:	000d      	movs	r5, r1
 800b6e2:	e755      	b.n	800b590 <atan+0xb8>
 800b6e4:	000b      	movs	r3, r1
 800b6e6:	0002      	movs	r2, r0
 800b6e8:	4937      	ldr	r1, [pc, #220]	@ (800b7c8 <atan+0x2f0>)
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	f7f6 f838 	bl	8001760 <__aeabi_ddiv>
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	0004      	movs	r4, r0
 800b6f4:	000d      	movs	r5, r1
 800b6f6:	e74b      	b.n	800b590 <atan+0xb8>
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	4f34      	ldr	r7, [pc, #208]	@ (800b7cc <atan+0x2f4>)
 800b6fc:	00de      	lsls	r6, r3, #3
 800b6fe:	4b34      	ldr	r3, [pc, #208]	@ (800b7d0 <atan+0x2f8>)
 800b700:	19bf      	adds	r7, r7, r6
 800b702:	199e      	adds	r6, r3, r6
 800b704:	6832      	ldr	r2, [r6, #0]
 800b706:	6873      	ldr	r3, [r6, #4]
 800b708:	f7f6 ff4a 	bl	80025a0 <__aeabi_dsub>
 800b70c:	0022      	movs	r2, r4
 800b70e:	002b      	movs	r3, r5
 800b710:	f7f6 ff46 	bl	80025a0 <__aeabi_dsub>
 800b714:	000b      	movs	r3, r1
 800b716:	0002      	movs	r2, r0
 800b718:	6838      	ldr	r0, [r7, #0]
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	f7f6 ff40 	bl	80025a0 <__aeabi_dsub>
 800b720:	9b03      	ldr	r3, [sp, #12]
 800b722:	0004      	movs	r4, r0
 800b724:	000d      	movs	r5, r1
 800b726:	2b00      	cmp	r3, #0
 800b728:	db00      	blt.n	800b72c <atan+0x254>
 800b72a:	e6f4      	b.n	800b516 <atan+0x3e>
 800b72c:	2180      	movs	r1, #128	@ 0x80
 800b72e:	0609      	lsls	r1, r1, #24
 800b730:	186b      	adds	r3, r5, r1
 800b732:	0004      	movs	r4, r0
 800b734:	001d      	movs	r5, r3
 800b736:	e6ee      	b.n	800b516 <atan+0x3e>
 800b738:	4d26      	ldr	r5, [pc, #152]	@ (800b7d4 <atan+0x2fc>)
 800b73a:	e6ec      	b.n	800b516 <atan+0x3e>
 800b73c:	440fffff 	.word	0x440fffff
 800b740:	7ff00000 	.word	0x7ff00000
 800b744:	54442d18 	.word	0x54442d18
 800b748:	3ff921fb 	.word	0x3ff921fb
 800b74c:	3fdbffff 	.word	0x3fdbffff
 800b750:	3e1fffff 	.word	0x3e1fffff
 800b754:	8800759c 	.word	0x8800759c
 800b758:	7e37e43c 	.word	0x7e37e43c
 800b75c:	3ff00000 	.word	0x3ff00000
 800b760:	3ff2ffff 	.word	0x3ff2ffff
 800b764:	3fe5ffff 	.word	0x3fe5ffff
 800b768:	e322da11 	.word	0xe322da11
 800b76c:	3f90ad3a 	.word	0x3f90ad3a
 800b770:	24760deb 	.word	0x24760deb
 800b774:	3fa97b4b 	.word	0x3fa97b4b
 800b778:	a0d03d51 	.word	0xa0d03d51
 800b77c:	3fb10d66 	.word	0x3fb10d66
 800b780:	c54c206e 	.word	0xc54c206e
 800b784:	3fb745cd 	.word	0x3fb745cd
 800b788:	920083ff 	.word	0x920083ff
 800b78c:	3fc24924 	.word	0x3fc24924
 800b790:	5555550d 	.word	0x5555550d
 800b794:	3fd55555 	.word	0x3fd55555
 800b798:	2c6a6c2f 	.word	0x2c6a6c2f
 800b79c:	bfa2b444 	.word	0xbfa2b444
 800b7a0:	52defd9a 	.word	0x52defd9a
 800b7a4:	3fadde2d 	.word	0x3fadde2d
 800b7a8:	af749a6d 	.word	0xaf749a6d
 800b7ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800b7b0:	fe231671 	.word	0xfe231671
 800b7b4:	3fbc71c6 	.word	0x3fbc71c6
 800b7b8:	9998ebc4 	.word	0x9998ebc4
 800b7bc:	3fc99999 	.word	0x3fc99999
 800b7c0:	40037fff 	.word	0x40037fff
 800b7c4:	3ff80000 	.word	0x3ff80000
 800b7c8:	bff00000 	.word	0xbff00000
 800b7cc:	0800bca8 	.word	0x0800bca8
 800b7d0:	0800bc88 	.word	0x0800bc88
 800b7d4:	bff921fb 	.word	0xbff921fb

0800b7d8 <fabs>:
 800b7d8:	0049      	lsls	r1, r1, #1
 800b7da:	084b      	lsrs	r3, r1, #1
 800b7dc:	0019      	movs	r1, r3
 800b7de:	4770      	bx	lr

0800b7e0 <_init>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	46c0      	nop			@ (mov r8, r8)
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr

0800b7ec <_fini>:
 800b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ee:	46c0      	nop			@ (mov r8, r8)
 800b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f2:	bc08      	pop	{r3}
 800b7f4:	469e      	mov	lr, r3
 800b7f6:	4770      	bx	lr
