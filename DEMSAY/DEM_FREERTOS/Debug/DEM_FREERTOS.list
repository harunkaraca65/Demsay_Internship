
DEM_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000318c  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800324c  0800324c  0000424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003314  08003314  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003314  08003314  00005060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003314  08003314  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003314  08003314  00004314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003318  08003318  00004318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800331c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f08  20000060  0800337c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f68  0800337c  00005f68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d068  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f0  00000000  00000000  000120f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000145e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b60  00000000  00000000  000154a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002727  00000000  00000000  00016008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fed5  00000000  00000000  0001872f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008beab  00000000  00000000  00028604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b44af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003744  00000000  00000000  000b44f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b7c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003234 	.word	0x08003234

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003234 	.word	0x08003234

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b090      	sub	sp, #64	@ 0x40
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fac3 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83f 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f885 	bl	800033c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000232:	252c      	movs	r5, #44	@ 0x2c
 8000234:	197b      	adds	r3, r7, r5
 8000236:	4a17      	ldr	r2, [pc, #92]	@ (8000294 <main+0x74>)
 8000238:	ca13      	ldmia	r2!, {r0, r1, r4}
 800023a:	c313      	stmia	r3!, {r0, r1, r4}
 800023c:	ca03      	ldmia	r2!, {r0, r1}
 800023e:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000240:	197b      	adds	r3, r7, r5
 8000242:	2100      	movs	r1, #0
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fd00 	bl	8001c4a <osThreadCreate>
 800024a:	0002      	movs	r2, r0
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <main+0x78>)
 800024e:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000250:	2518      	movs	r5, #24
 8000252:	197b      	adds	r3, r7, r5
 8000254:	4a11      	ldr	r2, [pc, #68]	@ (800029c <main+0x7c>)
 8000256:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000258:	c313      	stmia	r3!, {r0, r1, r4}
 800025a:	ca03      	ldmia	r2!, {r0, r1}
 800025c:	c303      	stmia	r3!, {r0, r1}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800025e:	197b      	adds	r3, r7, r5
 8000260:	2100      	movs	r1, #0
 8000262:	0018      	movs	r0, r3
 8000264:	f001 fcf1 	bl	8001c4a <osThreadCreate>
 8000268:	0002      	movs	r2, r0
 800026a:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <main+0x80>)
 800026c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4a0c      	ldr	r2, [pc, #48]	@ (80002a4 <main+0x84>)
 8000272:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000274:	c313      	stmia	r3!, {r0, r1, r4}
 8000276:	ca03      	ldmia	r2!, {r0, r1}
 8000278:	c303      	stmia	r3!, {r0, r1}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2100      	movs	r1, #0
 800027e:	0018      	movs	r0, r3
 8000280:	f001 fce3 	bl	8001c4a <osThreadCreate>
 8000284:	0002      	movs	r2, r0
 8000286:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <main+0x88>)
 8000288:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800028a:	f001 fcd6 	bl	8001c3a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	e7fd      	b.n	800028e <main+0x6e>
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	08003258 	.word	0x08003258
 8000298:	20000080 	.word	0x20000080
 800029c:	08003278 	.word	0x08003278
 80002a0:	20000084 	.word	0x20000084
 80002a4:	08003298 	.word	0x08003298
 80002a8:	20000088 	.word	0x20000088

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b093      	sub	sp, #76	@ 0x4c
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2414      	movs	r4, #20
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2334      	movs	r3, #52	@ 0x34
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f002 fec7 	bl	8003050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	0018      	movs	r0, r3
 80002c6:	2310      	movs	r3, #16
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f002 fec0 	bl	8003050 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d0:	2380      	movs	r3, #128	@ 0x80
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fcf1 	bl	8000cbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2202      	movs	r2, #2
 80002de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	0052      	lsls	r2, r2, #1
 80002e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2240      	movs	r2, #64	@ 0x40
 80002f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fd29 	bl	8000d54 <HAL_RCC_OscConfig>
 8000302:	1e03      	subs	r3, r0, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000306:	f000 f959 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2207      	movs	r2, #7
 800030e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2100      	movs	r1, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f001 f824 	bl	8001374 <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000330:	f000 f944 	bl	80005bc <Error_Handler>
  }
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b013      	add	sp, #76	@ 0x4c
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b08b      	sub	sp, #44	@ 0x2c
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	2414      	movs	r4, #20
 8000344:	193b      	adds	r3, r7, r4
 8000346:	0018      	movs	r0, r3
 8000348:	2314      	movs	r3, #20
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f002 fe7f 	bl	8003050 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000352:	4b4b      	ldr	r3, [pc, #300]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000356:	4b4a      	ldr	r3, [pc, #296]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000358:	2120      	movs	r1, #32
 800035a:	430a      	orrs	r2, r1
 800035c:	635a      	str	r2, [r3, #52]	@ 0x34
 800035e:	4b48      	ldr	r3, [pc, #288]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000362:	2220      	movs	r2, #32
 8000364:	4013      	ands	r3, r2
 8000366:	613b      	str	r3, [r7, #16]
 8000368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b45      	ldr	r3, [pc, #276]	@ (8000480 <MX_GPIO_Init+0x144>)
 800036c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800036e:	4b44      	ldr	r3, [pc, #272]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000370:	2102      	movs	r1, #2
 8000372:	430a      	orrs	r2, r1
 8000374:	635a      	str	r2, [r3, #52]	@ 0x34
 8000376:	4b42      	ldr	r3, [pc, #264]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800037a:	2202      	movs	r2, #2
 800037c:	4013      	ands	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b3f      	ldr	r3, [pc, #252]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000386:	4b3e      	ldr	r3, [pc, #248]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000388:	2101      	movs	r1, #1
 800038a:	430a      	orrs	r2, r1
 800038c:	635a      	str	r2, [r3, #52]	@ 0x34
 800038e:	4b3c      	ldr	r3, [pc, #240]	@ (8000480 <MX_GPIO_Init+0x144>)
 8000390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000392:	2201      	movs	r2, #1
 8000394:	4013      	ands	r3, r2
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800039a:	4b39      	ldr	r3, [pc, #228]	@ (8000480 <MX_GPIO_Init+0x144>)
 800039c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800039e:	4b38      	ldr	r3, [pc, #224]	@ (8000480 <MX_GPIO_Init+0x144>)
 80003a0:	2108      	movs	r1, #8
 80003a2:	430a      	orrs	r2, r1
 80003a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80003a6:	4b36      	ldr	r3, [pc, #216]	@ (8000480 <MX_GPIO_Init+0x144>)
 80003a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003aa:	2208      	movs	r2, #8
 80003ac:	4013      	ands	r3, r2
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003b2:	2380      	movs	r3, #128	@ 0x80
 80003b4:	015b      	lsls	r3, r3, #5
 80003b6:	4833      	ldr	r0, [pc, #204]	@ (8000484 <MX_GPIO_Init+0x148>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	0019      	movs	r1, r3
 80003bc:	f000 fc46 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80003c0:	2380      	movs	r3, #128	@ 0x80
 80003c2:	0219      	lsls	r1, r3, #8
 80003c4:	23a0      	movs	r3, #160	@ 0xa0
 80003c6:	05db      	lsls	r3, r3, #23
 80003c8:	2200      	movs	r2, #0
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 fc3e 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80003d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000488 <MX_GPIO_Init+0x14c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	210e      	movs	r1, #14
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 fc38 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	0152      	lsls	r2, r2, #5
 80003e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	2201      	movs	r2, #1
 80003e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	193b      	adds	r3, r7, r4
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	4a22      	ldr	r2, [pc, #136]	@ (8000484 <MX_GPIO_Init+0x148>)
 80003fa:	0019      	movs	r1, r3
 80003fc:	0010      	movs	r0, r2
 80003fe:	f000 fac1 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000402:	0021      	movs	r1, r4
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2280      	movs	r2, #128	@ 0x80
 8000408:	0212      	lsls	r2, r2, #8
 800040a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	000c      	movs	r4, r1
 800040e:	193b      	adds	r3, r7, r4
 8000410:	2201      	movs	r2, #1
 8000412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	193b      	adds	r3, r7, r4
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	193b      	adds	r3, r7, r4
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	193a      	adds	r2, r7, r4
 8000422:	23a0      	movs	r3, #160	@ 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f000 faab 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800042e:	0021      	movs	r1, r4
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2201      	movs	r2, #1
 8000434:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2288      	movs	r2, #136	@ 0x88
 800043a:	0352      	lsls	r2, r2, #13
 800043c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000444:	000c      	movs	r4, r1
 8000446:	187b      	adds	r3, r7, r1
 8000448:	4a0f      	ldr	r2, [pc, #60]	@ (8000488 <MX_GPIO_Init+0x14c>)
 800044a:	0019      	movs	r1, r3
 800044c:	0010      	movs	r0, r2
 800044e:	f000 fa99 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000452:	0021      	movs	r1, r4
 8000454:	187b      	adds	r3, r7, r1
 8000456:	220e      	movs	r2, #14
 8000458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2201      	movs	r2, #1
 800045e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800046c:	187b      	adds	r3, r7, r1
 800046e:	4a06      	ldr	r2, [pc, #24]	@ (8000488 <MX_GPIO_Init+0x14c>)
 8000470:	0019      	movs	r1, r3
 8000472:	0010      	movs	r0, r2
 8000474:	f000 fa86 	bl	8000984 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b00b      	add	sp, #44	@ 0x2c
 800047e:	bd90      	pop	{r4, r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	50000400 	.word	0x50000400
 8000488:	50000c00 	.word	0x50000c00

0800048c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <StartDefaultTask+0x30>)
 8000496:	2107      	movs	r1, #7
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fbf4 	bl	8000c86 <HAL_GPIO_TogglePin>
	  index_counter++;
 800049e:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <StartDefaultTask+0x34>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	3301      	adds	r3, #1
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <StartDefaultTask+0x34>)
 80004aa:	701a      	strb	r2, [r3, #0]
	  osDelay(1000);
 80004ac:	23fa      	movs	r3, #250	@ 0xfa
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fbff 	bl	8001cb4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2);
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	e7ec      	b.n	8000494 <StartDefaultTask+0x8>
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	50000c00 	.word	0x50000c00
 80004c0:	2000007c 	.word	0x2000007c

080004c4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if (index_counter >= 3)
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <StartTask02+0x4c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d9fa      	bls.n	80004cc <StartTask02+0x8>
	          {
	              HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <StartTask02+0x50>)
 80004d8:	2108      	movs	r1, #8
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fbd3 	bl	8000c86 <HAL_GPIO_TogglePin>
	              osThreadSuspend(defaultTaskHandle);
 80004e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <StartTask02+0x54>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fbf9 	bl	8001cdc <osThreadSuspend>
	              osDelay(2000);
 80004ea:	23fa      	movs	r3, #250	@ 0xfa
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fbe0 	bl	8001cb4 <osDelay>
	              index_counter+=2;
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <StartTask02+0x4c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	3302      	adds	r3, #2
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <StartTask02+0x4c>)
 8000500:	701a      	strb	r2, [r3, #0]
	              osThreadResume(defaultTaskHandle);
 8000502:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <StartTask02+0x54>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fbf6 	bl	8001cf8 <osThreadResume>
	  if (index_counter >= 3)
 800050c:	e7de      	b.n	80004cc <StartTask02+0x8>
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	2000007c 	.word	0x2000007c
 8000514:	50000c00 	.word	0x50000c00
 8000518:	20000080 	.word	0x20000080

0800051c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  if (index_counter >= 8)
 8000524:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <StartTask03+0x68>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b07      	cmp	r3, #7
 800052c:	d9fa      	bls.n	8000524 <StartTask03+0x8>
	          {
	              HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800052e:	2380      	movs	r3, #128	@ 0x80
 8000530:	021a      	lsls	r2, r3, #8
 8000532:	23a0      	movs	r3, #160	@ 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fba4 	bl	8000c86 <HAL_GPIO_TogglePin>
	              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800053e:	2380      	movs	r3, #128	@ 0x80
 8000540:	015b      	lsls	r3, r3, #5
 8000542:	4811      	ldr	r0, [pc, #68]	@ (8000588 <StartTask03+0x6c>)
 8000544:	2201      	movs	r2, #1
 8000546:	0019      	movs	r1, r3
 8000548:	f000 fb80 	bl	8000c4c <HAL_GPIO_WritePin>
	              osDelay(1000);
 800054c:	23fa      	movs	r3, #250	@ 0xfa
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fbaf 	bl	8001cb4 <osDelay>
	              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000556:	2380      	movs	r3, #128	@ 0x80
 8000558:	015b      	lsls	r3, r3, #5
 800055a:	480b      	ldr	r0, [pc, #44]	@ (8000588 <StartTask03+0x6c>)
 800055c:	2200      	movs	r2, #0
 800055e:	0019      	movs	r1, r3
 8000560:	f000 fb74 	bl	8000c4c <HAL_GPIO_WritePin>
	              osThreadTerminate(defaultTaskHandle);
 8000564:	4b09      	ldr	r3, [pc, #36]	@ (800058c <StartTask03+0x70>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fb96 	bl	8001c9a <osThreadTerminate>
	              osThreadTerminate(myTask02Handle);
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <StartTask03+0x74>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fb91 	bl	8001c9a <osThreadTerminate>
	              osThreadTerminate(myTask03Handle);
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <StartTask03+0x78>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	0018      	movs	r0, r3
 800057e:	f001 fb8c 	bl	8001c9a <osThreadTerminate>
	  if (index_counter >= 8)
 8000582:	e7cf      	b.n	8000524 <StartTask03+0x8>
 8000584:	2000007c 	.word	0x2000007c
 8000588:	50000400 	.word	0x50000400
 800058c:	20000080 	.word	0x20000080
 8000590:	20000084 	.word	0x20000084
 8000594:	20000088 	.word	0x20000088

08000598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80005aa:	f000 f921 	bl	80007f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	40012c00 	.word	0x40012c00

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_MspInit+0x50>)
 80005d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_MspInit+0x50>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_MspInit+0x50>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_MspInit+0x50>)
 80005e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <HAL_MspInit+0x50>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	0549      	lsls	r1, r1, #21
 80005f0:	430a      	orrs	r2, r1
 80005f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <HAL_MspInit+0x50>)
 80005f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	055b      	lsls	r3, r3, #21
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000602:	2302      	movs	r3, #2
 8000604:	425b      	negs	r3, r3
 8000606:	2200      	movs	r2, #0
 8000608:	2103      	movs	r1, #3
 800060a:	0018      	movs	r0, r3
 800060c:	f000 f994 	bl	8000938 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b08c      	sub	sp, #48	@ 0x30
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000624:	232b      	movs	r3, #43	@ 0x2b
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800062c:	4b38      	ldr	r3, [pc, #224]	@ (8000710 <HAL_InitTick+0xf4>)
 800062e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000630:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <HAL_InitTick+0xf4>)
 8000632:	2180      	movs	r1, #128	@ 0x80
 8000634:	0109      	lsls	r1, r1, #4
 8000636:	430a      	orrs	r2, r1
 8000638:	641a      	str	r2, [r3, #64]	@ 0x40
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <HAL_InitTick+0xf4>)
 800063c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800063e:	2380      	movs	r3, #128	@ 0x80
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	4013      	ands	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000648:	230c      	movs	r3, #12
 800064a:	18fa      	adds	r2, r7, r3
 800064c:	2410      	movs	r4, #16
 800064e:	193b      	adds	r3, r7, r4
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f001 f838 	bl	80016c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000660:	2b00      	cmp	r3, #0
 8000662:	d104      	bne.n	800066e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000664:	f001 f81a 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8000668:	0003      	movs	r3, r0
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800066c:	e004      	b.n	8000678 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800066e:	f001 f815 	bl	800169c <HAL_RCC_GetPCLK1Freq>
 8000672:	0003      	movs	r3, r0
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800067a:	4926      	ldr	r1, [pc, #152]	@ (8000714 <HAL_InitTick+0xf8>)
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff fd43 	bl	8000108 <__udivsi3>
 8000682:	0003      	movs	r3, r0
 8000684:	3b01      	subs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <HAL_InitTick+0xfc>)
 800068a:	4a24      	ldr	r2, [pc, #144]	@ (800071c <HAL_InitTick+0x100>)
 800068c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800068e:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <HAL_InitTick+0xfc>)
 8000690:	4a23      	ldr	r2, [pc, #140]	@ (8000720 <HAL_InitTick+0x104>)
 8000692:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000694:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <HAL_InitTick+0xfc>)
 8000696:	6a3a      	ldr	r2, [r7, #32]
 8000698:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <HAL_InitTick+0xfc>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <HAL_InitTick+0xfc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <HAL_InitTick+0xfc>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006ac:	252b      	movs	r5, #43	@ 0x2b
 80006ae:	197c      	adds	r4, r7, r5
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <HAL_InitTick+0xfc>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f832 	bl	800171c <HAL_TIM_Base_Init>
 80006b8:	0003      	movs	r3, r0
 80006ba:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006bc:	197b      	adds	r3, r7, r5
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d11e      	bne.n	8000702 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006c4:	197c      	adds	r4, r7, r5
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <HAL_InitTick+0xfc>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f887 	bl	80017dc <HAL_TIM_Base_Start_IT>
 80006ce:	0003      	movs	r3, r0
 80006d0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80006d2:	197b      	adds	r3, r7, r5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d113      	bne.n	8000702 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80006da:	200d      	movs	r0, #13
 80006dc:	f000 f941 	bl	8000962 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d809      	bhi.n	80006fa <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	0019      	movs	r1, r3
 80006ec:	200d      	movs	r0, #13
 80006ee:	f000 f923 	bl	8000938 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <HAL_InitTick+0x108>)
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	e003      	b.n	8000702 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80006fa:	232b      	movs	r3, #43	@ 0x2b
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000702:	232b      	movs	r3, #43	@ 0x2b
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	781b      	ldrb	r3, [r3, #0]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b00c      	add	sp, #48	@ 0x30
 800070e:	bdb0      	pop	{r4, r5, r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	000f4240 	.word	0x000f4240
 8000718:	2000008c 	.word	0x2000008c
 800071c:	40012c00 	.word	0x40012c00
 8000720:	000003e7 	.word	0x000003e7
 8000724:	20000004 	.word	0x20000004

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	e7fd      	b.n	800072c <NMI_Handler+0x4>

08000730 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	e7fd      	b.n	8000734 <HardFault_Handler+0x4>

08000738 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800073e:	0018      	movs	r0, r3
 8000740:	f001 f89a 	bl	8001878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	2000008c 	.word	0x2000008c

08000750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000754:	46c0      	nop			@ (mov r8, r8)
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f7ff fff6 	bl	8000750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	@ (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	@ (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078a:	f002 fcd3 	bl	8003134 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800078e:	f7ff fd47 	bl	8000220 <main>

08000792 <LoopForever>:

LoopForever:
  b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007a0:	0800331c 	.word	0x0800331c
  ldr r2, =_sbss
 80007a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007a8:	20000f68 	.word	0x20000f68

080007ac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007b6:	1dfb      	adds	r3, r7, #7
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <HAL_Init+0x3c>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_Init+0x3c>)
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	0049      	lsls	r1, r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ca:	2003      	movs	r0, #3
 80007cc:	f7ff ff26 	bl	800061c <HAL_InitTick>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d003      	beq.n	80007dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	e001      	b.n	80007e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fef4 	bl	80005c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	001a      	movs	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	18d2      	adds	r2, r2, r3
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <HAL_IncTick+0x20>)
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	20000008 	.word	0x20000008
 8000810:	200000d8 	.word	0x200000d8

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	@ (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	200000d8 	.word	0x200000d8

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	0002      	movs	r2, r0
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b7f      	cmp	r3, #127	@ 0x7f
 800083a:	d809      	bhi.n	8000850 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	001a      	movs	r2, r3
 8000842:	231f      	movs	r3, #31
 8000844:	401a      	ands	r2, r3
 8000846:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__NVIC_EnableIRQ+0x30>)
 8000848:	2101      	movs	r1, #1
 800084a:	4091      	lsls	r1, r2
 800084c:	000a      	movs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	0002      	movs	r2, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000870:	d828      	bhi.n	80008c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000872:	4a2f      	ldr	r2, [pc, #188]	@ (8000930 <__NVIC_SetPriority+0xd4>)
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b25b      	sxtb	r3, r3
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	33c0      	adds	r3, #192	@ 0xc0
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	589b      	ldr	r3, [r3, r2]
 8000882:	1dfa      	adds	r2, r7, #7
 8000884:	7812      	ldrb	r2, [r2, #0]
 8000886:	0011      	movs	r1, r2
 8000888:	2203      	movs	r2, #3
 800088a:	400a      	ands	r2, r1
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	21ff      	movs	r1, #255	@ 0xff
 8000890:	4091      	lsls	r1, r2
 8000892:	000a      	movs	r2, r1
 8000894:	43d2      	mvns	r2, r2
 8000896:	401a      	ands	r2, r3
 8000898:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	019b      	lsls	r3, r3, #6
 800089e:	22ff      	movs	r2, #255	@ 0xff
 80008a0:	401a      	ands	r2, r3
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	0018      	movs	r0, r3
 80008a8:	2303      	movs	r3, #3
 80008aa:	4003      	ands	r3, r0
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	481f      	ldr	r0, [pc, #124]	@ (8000930 <__NVIC_SetPriority+0xd4>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	089b      	lsrs	r3, r3, #2
 80008ba:	430a      	orrs	r2, r1
 80008bc:	33c0      	adds	r3, #192	@ 0xc0
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008c2:	e031      	b.n	8000928 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000934 <__NVIC_SetPriority+0xd8>)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0019      	movs	r1, r3
 80008cc:	230f      	movs	r3, #15
 80008ce:	400b      	ands	r3, r1
 80008d0:	3b08      	subs	r3, #8
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	3306      	adds	r3, #6
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	18d3      	adds	r3, r2, r3
 80008da:	3304      	adds	r3, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	1dfa      	adds	r2, r7, #7
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	0011      	movs	r1, r2
 80008e4:	2203      	movs	r2, #3
 80008e6:	400a      	ands	r2, r1
 80008e8:	00d2      	lsls	r2, r2, #3
 80008ea:	21ff      	movs	r1, #255	@ 0xff
 80008ec:	4091      	lsls	r1, r2
 80008ee:	000a      	movs	r2, r1
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	401a      	ands	r2, r3
 80008f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	019b      	lsls	r3, r3, #6
 80008fa:	22ff      	movs	r2, #255	@ 0xff
 80008fc:	401a      	ands	r2, r3
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0018      	movs	r0, r3
 8000904:	2303      	movs	r3, #3
 8000906:	4003      	ands	r3, r0
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090c:	4809      	ldr	r0, [pc, #36]	@ (8000934 <__NVIC_SetPriority+0xd8>)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	001c      	movs	r4, r3
 8000914:	230f      	movs	r3, #15
 8000916:	4023      	ands	r3, r4
 8000918:	3b08      	subs	r3, #8
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	430a      	orrs	r2, r1
 800091e:	3306      	adds	r3, #6
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	18c3      	adds	r3, r0, r3
 8000924:	3304      	adds	r3, #4
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b003      	add	sp, #12
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	210f      	movs	r1, #15
 8000944:	187b      	adds	r3, r7, r1
 8000946:	1c02      	adds	r2, r0, #0
 8000948:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	187b      	adds	r3, r7, r1
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b25b      	sxtb	r3, r3
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff ff81 	bl	800085c <__NVIC_SetPriority>
}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	0002      	movs	r2, r0
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b25b      	sxtb	r3, r3
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff57 	bl	8000828 <__NVIC_EnableIRQ>
}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000992:	e147      	b.n	8000c24 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2101      	movs	r1, #1
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d100      	bne.n	80009ac <HAL_GPIO_Init+0x28>
 80009aa:	e138      	b.n	8000c1e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2203      	movs	r2, #3
 80009b2:	4013      	ands	r3, r2
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d005      	beq.n	80009c4 <HAL_GPIO_Init+0x40>
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2203      	movs	r2, #3
 80009be:	4013      	ands	r3, r2
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d130      	bne.n	8000a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2203      	movs	r2, #3
 80009d0:	409a      	lsls	r2, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	43da      	mvns	r2, r3
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	409a      	lsls	r2, r3
 80009e6:	0013      	movs	r3, r2
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009fa:	2201      	movs	r2, #1
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	43da      	mvns	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	091b      	lsrs	r3, r3, #4
 8000a10:	2201      	movs	r2, #1
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d017      	beq.n	8000a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2203      	movs	r2, #3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d123      	bne.n	8000ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	08da      	lsrs	r2, r3, #3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3208      	adds	r2, #8
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	58d3      	ldr	r3, [r2, r3]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	2207      	movs	r2, #7
 8000a80:	4013      	ands	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	2107      	movs	r1, #7
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	08da      	lsrs	r2, r3, #3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3208      	adds	r2, #8
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	6939      	ldr	r1, [r7, #16]
 8000ab4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	401a      	ands	r2, r3
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	23c0      	movs	r3, #192	@ 0xc0
 8000af0:	029b      	lsls	r3, r3, #10
 8000af2:	4013      	ands	r3, r2
 8000af4:	d100      	bne.n	8000af8 <HAL_GPIO_Init+0x174>
 8000af6:	e092      	b.n	8000c1e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000af8:	4a50      	ldr	r2, [pc, #320]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3318      	adds	r3, #24
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	589b      	ldr	r3, [r3, r2]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	2203      	movs	r2, #3
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	220f      	movs	r2, #15
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	43da      	mvns	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	23a0      	movs	r3, #160	@ 0xa0
 8000b20:	05db      	lsls	r3, r3, #23
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d013      	beq.n	8000b4e <HAL_GPIO_Init+0x1ca>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a45      	ldr	r2, [pc, #276]	@ (8000c40 <HAL_GPIO_Init+0x2bc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d00d      	beq.n	8000b4a <HAL_GPIO_Init+0x1c6>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a44      	ldr	r2, [pc, #272]	@ (8000c44 <HAL_GPIO_Init+0x2c0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d007      	beq.n	8000b46 <HAL_GPIO_Init+0x1c2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a43      	ldr	r2, [pc, #268]	@ (8000c48 <HAL_GPIO_Init+0x2c4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_GPIO_Init+0x1be>
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x1cc>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e004      	b.n	8000b50 <HAL_GPIO_Init+0x1cc>
 8000b46:	2302      	movs	r3, #2
 8000b48:	e002      	b.n	8000b50 <HAL_GPIO_Init+0x1cc>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <HAL_GPIO_Init+0x1cc>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	2103      	movs	r1, #3
 8000b54:	400a      	ands	r2, r1
 8000b56:	00d2      	lsls	r2, r2, #3
 8000b58:	4093      	lsls	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b60:	4936      	ldr	r1, [pc, #216]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3318      	adds	r3, #24
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	035b      	lsls	r3, r3, #13
 8000b86:	4013      	ands	r3, r2
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b98:	4b28      	ldr	r3, [pc, #160]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43da      	mvns	r2, r3
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	039b      	lsls	r3, r3, #14
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000bc4:	2384      	movs	r3, #132	@ 0x84
 8000bc6:	58d3      	ldr	r3, [r2, r3]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43da      	mvns	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	029b      	lsls	r3, r3, #10
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000be8:	4914      	ldr	r1, [pc, #80]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000bea:	2284      	movs	r2, #132	@ 0x84
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000bf0:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000bf2:	2380      	movs	r3, #128	@ 0x80
 8000bf4:	58d3      	ldr	r3, [r2, r3]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	2380      	movs	r3, #128	@ 0x80
 8000c08:	025b      	lsls	r3, r3, #9
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c16:	4909      	ldr	r1, [pc, #36]	@ (8000c3c <HAL_GPIO_Init+0x2b8>)
 8000c18:	2280      	movs	r2, #128	@ 0x80
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	40da      	lsrs	r2, r3
 8000c2c:	1e13      	subs	r3, r2, #0
 8000c2e:	d000      	beq.n	8000c32 <HAL_GPIO_Init+0x2ae>
 8000c30:	e6b0      	b.n	8000994 <HAL_GPIO_Init+0x10>
  }
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b006      	add	sp, #24
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	50000400 	.word	0x50000400
 8000c44:	50000800 	.word	0x50000800
 8000c48:	50000c00 	.word	0x50000c00

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	0008      	movs	r0, r1
 8000c56:	0011      	movs	r1, r2
 8000c58:	1cbb      	adds	r3, r7, #2
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	1c7b      	adds	r3, r7, #1
 8000c60:	1c0a      	adds	r2, r1, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c64:	1c7b      	adds	r3, r7, #1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c6c:	1cbb      	adds	r3, r7, #2
 8000c6e:	881a      	ldrh	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c74:	e003      	b.n	8000c7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c76:	1cbb      	adds	r3, r7, #2
 8000c78:	881a      	ldrh	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	000a      	movs	r2, r1
 8000c90:	1cbb      	adds	r3, r7, #2
 8000c92:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	041a      	lsls	r2, r3, #16
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	1cb9      	adds	r1, r7, #2
 8000caa:	8809      	ldrh	r1, [r1, #0]
 8000cac:	400b      	ands	r3, r1
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b004      	add	sp, #16
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	0019      	movs	r1, r3
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d11f      	bne.n	8000d20 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	189b      	adds	r3, r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4912      	ldr	r1, [pc, #72]	@ (8000d38 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fa0a 	bl	8000108 <__udivsi3>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cfa:	e008      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e001      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e009      	b.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	2380      	movs	r3, #128	@ 0x80
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	401a      	ands	r2, r3
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d0ed      	beq.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	fffff9ff 	.word	0xfffff9ff
 8000d34:	20000000 	.word	0x20000000
 8000d38:	000f4240 	.word	0x000f4240

08000d3c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	23e0      	movs	r3, #224	@ 0xe0
 8000d46:	01db      	lsls	r3, r3, #7
 8000d48:	4013      	ands	r3, r2
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e2f3      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d100      	bne.n	8000d72 <HAL_RCC_OscConfig+0x1e>
 8000d70:	e07c      	b.n	8000e6c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d72:	4bc3      	ldr	r3, [pc, #780]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2238      	movs	r2, #56	@ 0x38
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d7c:	4bc0      	ldr	r3, [pc, #768]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2203      	movs	r2, #3
 8000d82:	4013      	ands	r3, r2
 8000d84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2b10      	cmp	r3, #16
 8000d8a:	d102      	bne.n	8000d92 <HAL_RCC_OscConfig+0x3e>
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d002      	beq.n	8000d98 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d10b      	bne.n	8000db0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d98:	4bb9      	ldr	r3, [pc, #740]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	029b      	lsls	r3, r3, #10
 8000da0:	4013      	ands	r3, r2
 8000da2:	d062      	beq.n	8000e6a <HAL_RCC_OscConfig+0x116>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d15e      	bne.n	8000e6a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e2ce      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	025b      	lsls	r3, r3, #9
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d107      	bne.n	8000dcc <HAL_RCC_OscConfig+0x78>
 8000dbc:	4bb0      	ldr	r3, [pc, #704]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4baf      	ldr	r3, [pc, #700]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	0249      	lsls	r1, r1, #9
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e020      	b.n	8000e0e <HAL_RCC_OscConfig+0xba>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	23a0      	movs	r3, #160	@ 0xa0
 8000dd2:	02db      	lsls	r3, r3, #11
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d10e      	bne.n	8000df6 <HAL_RCC_OscConfig+0xa2>
 8000dd8:	4ba9      	ldr	r3, [pc, #676]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4ba8      	ldr	r3, [pc, #672]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	02c9      	lsls	r1, r1, #11
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	4ba6      	ldr	r3, [pc, #664]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4ba5      	ldr	r3, [pc, #660]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	2180      	movs	r1, #128	@ 0x80
 8000dee:	0249      	lsls	r1, r1, #9
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e00b      	b.n	8000e0e <HAL_RCC_OscConfig+0xba>
 8000df6:	4ba2      	ldr	r3, [pc, #648]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4ba1      	ldr	r3, [pc, #644]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	49a1      	ldr	r1, [pc, #644]	@ (8001084 <HAL_RCC_OscConfig+0x330>)
 8000dfe:	400a      	ands	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	4b9f      	ldr	r3, [pc, #636]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b9e      	ldr	r3, [pc, #632]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000e08:	499f      	ldr	r1, [pc, #636]	@ (8001088 <HAL_RCC_OscConfig+0x334>)
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d014      	beq.n	8000e40 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e16:	f7ff fcfd 	bl	8000814 <HAL_GetTick>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e20:	f7ff fcf8 	bl	8000814 <HAL_GetTick>
 8000e24:	0002      	movs	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	@ 0x64
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e28d      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e32:	4b93      	ldr	r3, [pc, #588]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d0f0      	beq.n	8000e20 <HAL_RCC_OscConfig+0xcc>
 8000e3e:	e015      	b.n	8000e6c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e40:	f7ff fce8 	bl	8000814 <HAL_GetTick>
 8000e44:	0003      	movs	r3, r0
 8000e46:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fce3 	bl	8000814 <HAL_GetTick>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b64      	cmp	r3, #100	@ 0x64
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e278      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e5c:	4b88      	ldr	r3, [pc, #544]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	029b      	lsls	r3, r3, #10
 8000e64:	4013      	ands	r3, r2
 8000e66:	d1f0      	bne.n	8000e4a <HAL_RCC_OscConfig+0xf6>
 8000e68:	e000      	b.n	8000e6c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2202      	movs	r2, #2
 8000e72:	4013      	ands	r3, r2
 8000e74:	d100      	bne.n	8000e78 <HAL_RCC_OscConfig+0x124>
 8000e76:	e099      	b.n	8000fac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e78:	4b81      	ldr	r3, [pc, #516]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2238      	movs	r2, #56	@ 0x38
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e82:	4b7f      	ldr	r3, [pc, #508]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	2203      	movs	r2, #3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b10      	cmp	r3, #16
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x144>
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d002      	beq.n	8000e9e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d135      	bne.n	8000f0a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e9e:	4b78      	ldr	r3, [pc, #480]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	2380      	movs	r3, #128	@ 0x80
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d005      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x162>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e24b      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	4b72      	ldr	r3, [pc, #456]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4a74      	ldr	r2, [pc, #464]	@ (800108c <HAL_RCC_OscConfig+0x338>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	021a      	lsls	r2, r3, #8
 8000ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d112      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ed2:	4b6b      	ldr	r3, [pc, #428]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8001090 <HAL_RCC_OscConfig+0x33c>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	0019      	movs	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	4b67      	ldr	r3, [pc, #412]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000ee6:	4b66      	ldr	r3, [pc, #408]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	0adb      	lsrs	r3, r3, #11
 8000eec:	2207      	movs	r2, #7
 8000eee:	4013      	ands	r3, r2
 8000ef0:	4a68      	ldr	r2, [pc, #416]	@ (8001094 <HAL_RCC_OscConfig+0x340>)
 8000ef2:	40da      	lsrs	r2, r3
 8000ef4:	4b68      	ldr	r3, [pc, #416]	@ (8001098 <HAL_RCC_OscConfig+0x344>)
 8000ef6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ef8:	4b68      	ldr	r3, [pc, #416]	@ (800109c <HAL_RCC_OscConfig+0x348>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fb8d 	bl	800061c <HAL_InitTick>
 8000f02:	1e03      	subs	r3, r0, #0
 8000f04:	d051      	beq.n	8000faa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e221      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d030      	beq.n	8000f74 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f12:	4b5b      	ldr	r3, [pc, #364]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a5e      	ldr	r2, [pc, #376]	@ (8001090 <HAL_RCC_OscConfig+0x33c>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	4b57      	ldr	r3, [pc, #348]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000f26:	4b56      	ldr	r3, [pc, #344]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b55      	ldr	r3, [pc, #340]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	2180      	movs	r1, #128	@ 0x80
 8000f2e:	0049      	lsls	r1, r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc6e 	bl	8000814 <HAL_GetTick>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fc69 	bl	8000814 <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e1fe      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f50:	4b4b      	ldr	r3, [pc, #300]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	4b48      	ldr	r3, [pc, #288]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4a4a      	ldr	r2, [pc, #296]	@ (800108c <HAL_RCC_OscConfig+0x338>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	0019      	movs	r1, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	021a      	lsls	r2, r3, #8
 8000f6c:	4b44      	ldr	r3, [pc, #272]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	e01b      	b.n	8000fac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f74:	4b42      	ldr	r3, [pc, #264]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b41      	ldr	r3, [pc, #260]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f7a:	4949      	ldr	r1, [pc, #292]	@ (80010a0 <HAL_RCC_OscConfig+0x34c>)
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f80:	f7ff fc48 	bl	8000814 <HAL_GetTick>
 8000f84:	0003      	movs	r3, r0
 8000f86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fc43 	bl	8000814 <HAL_GetTick>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e1d8      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f9c:	4b38      	ldr	r3, [pc, #224]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d1f0      	bne.n	8000f8a <HAL_RCC_OscConfig+0x236>
 8000fa8:	e000      	b.n	8000fac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000faa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d047      	beq.n	8001046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000fb6:	4b32      	ldr	r3, [pc, #200]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2238      	movs	r2, #56	@ 0x38
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b18      	cmp	r3, #24
 8000fc0:	d10a      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d03c      	beq.n	8001046 <HAL_RCC_OscConfig+0x2f2>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d138      	bne.n	8001046 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e1ba      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d019      	beq.n	8001014 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fe4:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc12 	bl	8000814 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fc0d 	bl	8000814 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e1a2      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 800100a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100c:	2202      	movs	r2, #2
 800100e:	4013      	ands	r3, r2
 8001010:	d0f1      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x2a2>
 8001012:	e018      	b.n	8001046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8001016:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 800101a:	2101      	movs	r1, #1
 800101c:	438a      	bics	r2, r1
 800101e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001020:	f7ff fbf8 	bl	8000814 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800102a:	f7ff fbf3 	bl	8000814 <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e188      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800103c:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001040:	2202      	movs	r2, #2
 8001042:	4013      	ands	r3, r2
 8001044:	d1f1      	bne.n	800102a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2204      	movs	r2, #4
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x2fe>
 8001050:	e0c6      	b.n	80011e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001052:	231f      	movs	r3, #31
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2238      	movs	r2, #56	@ 0x38
 8001060:	4013      	ands	r3, r2
 8001062:	2b20      	cmp	r3, #32
 8001064:	d11e      	bne.n	80010a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_RCC_OscConfig+0x32c>)
 8001068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800106a:	2202      	movs	r2, #2
 800106c:	4013      	ands	r3, r2
 800106e:	d100      	bne.n	8001072 <HAL_RCC_OscConfig+0x31e>
 8001070:	e0b6      	b.n	80011e0 <HAL_RCC_OscConfig+0x48c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d000      	beq.n	800107c <HAL_RCC_OscConfig+0x328>
 800107a:	e0b1      	b.n	80011e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e166      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
 8001080:	40021000 	.word	0x40021000
 8001084:	fffeffff 	.word	0xfffeffff
 8001088:	fffbffff 	.word	0xfffbffff
 800108c:	ffff80ff 	.word	0xffff80ff
 8001090:	ffffc7ff 	.word	0xffffc7ff
 8001094:	00f42400 	.word	0x00f42400
 8001098:	20000000 	.word	0x20000000
 800109c:	20000004 	.word	0x20000004
 80010a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010a4:	4bac      	ldr	r3, [pc, #688]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80010a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010a8:	2380      	movs	r3, #128	@ 0x80
 80010aa:	055b      	lsls	r3, r3, #21
 80010ac:	4013      	ands	r3, r2
 80010ae:	d101      	bne.n	80010b4 <HAL_RCC_OscConfig+0x360>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x362>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d011      	beq.n	80010de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4ba7      	ldr	r3, [pc, #668]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80010bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010be:	4ba6      	ldr	r3, [pc, #664]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	0549      	lsls	r1, r1, #21
 80010c4:	430a      	orrs	r2, r1
 80010c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010c8:	4ba3      	ldr	r3, [pc, #652]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80010ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010cc:	2380      	movs	r3, #128	@ 0x80
 80010ce:	055b      	lsls	r3, r3, #21
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80010d6:	231f      	movs	r3, #31
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010de:	4b9f      	ldr	r3, [pc, #636]	@ (800135c <HAL_RCC_OscConfig+0x608>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4013      	ands	r3, r2
 80010e8:	d11a      	bne.n	8001120 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ea:	4b9c      	ldr	r3, [pc, #624]	@ (800135c <HAL_RCC_OscConfig+0x608>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b9b      	ldr	r3, [pc, #620]	@ (800135c <HAL_RCC_OscConfig+0x608>)
 80010f0:	2180      	movs	r1, #128	@ 0x80
 80010f2:	0049      	lsls	r1, r1, #1
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb8c 	bl	8000814 <HAL_GetTick>
 80010fc:	0003      	movs	r3, r0
 80010fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001102:	f7ff fb87 	bl	8000814 <HAL_GetTick>
 8001106:	0002      	movs	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e11c      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001114:	4b91      	ldr	r3, [pc, #580]	@ (800135c <HAL_RCC_OscConfig+0x608>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x3e2>
 8001128:	4b8b      	ldr	r3, [pc, #556]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800112a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800112c:	4b8a      	ldr	r3, [pc, #552]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800112e:	2101      	movs	r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001134:	e01c      	b.n	8001170 <HAL_RCC_OscConfig+0x41c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b05      	cmp	r3, #5
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x404>
 800113e:	4b86      	ldr	r3, [pc, #536]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001140:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001142:	4b85      	ldr	r3, [pc, #532]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001144:	2104      	movs	r1, #4
 8001146:	430a      	orrs	r2, r1
 8001148:	65da      	str	r2, [r3, #92]	@ 0x5c
 800114a:	4b83      	ldr	r3, [pc, #524]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800114c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800114e:	4b82      	ldr	r3, [pc, #520]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0x41c>
 8001158:	4b7f      	ldr	r3, [pc, #508]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800115a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800115c:	4b7e      	ldr	r3, [pc, #504]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800115e:	2101      	movs	r1, #1
 8001160:	438a      	bics	r2, r1
 8001162:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001164:	4b7c      	ldr	r3, [pc, #496]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001166:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001168:	4b7b      	ldr	r3, [pc, #492]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800116a:	2104      	movs	r1, #4
 800116c:	438a      	bics	r2, r1
 800116e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d014      	beq.n	80011a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001178:	f7ff fb4c 	bl	8000814 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001180:	e009      	b.n	8001196 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f7ff fb47 	bl	8000814 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	4a74      	ldr	r2, [pc, #464]	@ (8001360 <HAL_RCC_OscConfig+0x60c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e0db      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001196:	4b70      	ldr	r3, [pc, #448]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800119a:	2202      	movs	r2, #2
 800119c:	4013      	ands	r3, r2
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x42e>
 80011a0:	e013      	b.n	80011ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff fb37 	bl	8000814 <HAL_GetTick>
 80011a6:	0003      	movs	r3, r0
 80011a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011aa:	e009      	b.n	80011c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ac:	f7ff fb32 	bl	8000814 <HAL_GetTick>
 80011b0:	0002      	movs	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	4a6a      	ldr	r2, [pc, #424]	@ (8001360 <HAL_RCC_OscConfig+0x60c>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0c6      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011c0:	4b65      	ldr	r3, [pc, #404]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80011c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c4:	2202      	movs	r2, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80011ca:	231f      	movs	r3, #31
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d105      	bne.n	80011e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80011d4:	4b60      	ldr	r3, [pc, #384]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80011d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80011da:	4962      	ldr	r1, [pc, #392]	@ (8001364 <HAL_RCC_OscConfig+0x610>)
 80011dc:	400a      	ands	r2, r1
 80011de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <HAL_RCC_OscConfig+0x496>
 80011e8:	e0b0      	b.n	800134c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2238      	movs	r2, #56	@ 0x38
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d100      	bne.n	80011f8 <HAL_RCC_OscConfig+0x4a4>
 80011f6:	e078      	b.n	80012ea <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d153      	bne.n	80012a8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001200:	4b55      	ldr	r3, [pc, #340]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b54      	ldr	r3, [pc, #336]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001206:	4958      	ldr	r1, [pc, #352]	@ (8001368 <HAL_RCC_OscConfig+0x614>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fb02 	bl	8000814 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff fafd 	bl	8000814 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e092      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001228:	4b4b      	ldr	r3, [pc, #300]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	049b      	lsls	r3, r3, #18
 8001230:	4013      	ands	r3, r2
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001234:	4b48      	ldr	r3, [pc, #288]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a4c      	ldr	r2, [pc, #304]	@ (800136c <HAL_RCC_OscConfig+0x618>)
 800123a:	4013      	ands	r3, r2
 800123c:	0019      	movs	r1, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1a      	ldr	r2, [r3, #32]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	431a      	orrs	r2, r3
 800125c:	4b3e      	ldr	r3, [pc, #248]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800125e:	430a      	orrs	r2, r1
 8001260:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001262:	4b3d      	ldr	r3, [pc, #244]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b3c      	ldr	r3, [pc, #240]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001268:	2180      	movs	r1, #128	@ 0x80
 800126a:	0449      	lsls	r1, r1, #17
 800126c:	430a      	orrs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001270:	4b39      	ldr	r3, [pc, #228]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	4b38      	ldr	r3, [pc, #224]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	0549      	lsls	r1, r1, #21
 800127a:	430a      	orrs	r2, r1
 800127c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff fac9 	bl	8000814 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff fac4 	bl	8000814 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e059      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800129a:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	049b      	lsls	r3, r3, #18
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x534>
 80012a6:	e051      	b.n	800134c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80012ae:	492e      	ldr	r1, [pc, #184]	@ (8001368 <HAL_RCC_OscConfig+0x614>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff faae 	bl	8000814 <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff faa9 	bl	8000814 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e03e      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d0:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	049b      	lsls	r3, r3, #18
 80012d8:	4013      	ands	r3, r2
 80012da:	d1f0      	bne.n	80012be <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80012e2:	4923      	ldr	r1, [pc, #140]	@ (8001370 <HAL_RCC_OscConfig+0x61c>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	e030      	b.n	800134c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e02b      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_RCC_OscConfig+0x604>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2203      	movs	r2, #3
 8001300:	401a      	ands	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	429a      	cmp	r2, r3
 8001308:	d11e      	bne.n	8001348 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2270      	movs	r2, #112	@ 0x70
 800130e:	401a      	ands	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d117      	bne.n	8001348 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	23fe      	movs	r3, #254	@ 0xfe
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	401a      	ands	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001324:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001326:	429a      	cmp	r2, r3
 8001328:	d10e      	bne.n	8001348 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	23f8      	movs	r3, #248	@ 0xf8
 800132e:	039b      	lsls	r3, r3, #14
 8001330:	401a      	ands	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d106      	bne.n	8001348 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	0f5b      	lsrs	r3, r3, #29
 800133e:	075a      	lsls	r2, r3, #29
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b008      	add	sp, #32
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	40021000 	.word	0x40021000
 800135c:	40007000 	.word	0x40007000
 8001360:	00001388 	.word	0x00001388
 8001364:	efffffff 	.word	0xefffffff
 8001368:	feffffff 	.word	0xfeffffff
 800136c:	1fc1808c 	.word	0x1fc1808c
 8001370:	effefffc 	.word	0xeffefffc

08001374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0e9      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b76      	ldr	r3, [pc, #472]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2207      	movs	r2, #7
 800138e:	4013      	ands	r3, r2
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d91e      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b73      	ldr	r3, [pc, #460]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2207      	movs	r2, #7
 800139c:	4393      	bics	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	4b70      	ldr	r3, [pc, #448]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013a8:	f7ff fa34 	bl	8000814 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013b0:	e009      	b.n	80013c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b2:	f7ff fa2f 	bl	8000814 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001568 <HAL_RCC_ClockConfig+0x1f4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e0ca      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c6:	4b67      	ldr	r3, [pc, #412]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2207      	movs	r2, #7
 80013cc:	4013      	ands	r3, r2
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2202      	movs	r2, #2
 80013da:	4013      	ands	r3, r2
 80013dc:	d015      	beq.n	800140a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d006      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013e8:	4b60      	ldr	r3, [pc, #384]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4b5f      	ldr	r3, [pc, #380]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 80013ee:	21e0      	movs	r1, #224	@ 0xe0
 80013f0:	01c9      	lsls	r1, r1, #7
 80013f2:	430a      	orrs	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f6:	4b5d      	ldr	r3, [pc, #372]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	4a5d      	ldr	r2, [pc, #372]	@ (8001570 <HAL_RCC_ClockConfig+0x1fc>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4b59      	ldr	r3, [pc, #356]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 8001406:	430a      	orrs	r2, r1
 8001408:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	d057      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d107      	bne.n	800142c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141c:	4b53      	ldr	r3, [pc, #332]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d12b      	bne.n	8001480 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e097      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d107      	bne.n	8001444 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001434:	4b4d      	ldr	r3, [pc, #308]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	049b      	lsls	r3, r3, #18
 800143c:	4013      	ands	r3, r2
 800143e:	d11f      	bne.n	8001480 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e08b      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800144c:	4b47      	ldr	r3, [pc, #284]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4013      	ands	r3, r2
 8001456:	d113      	bne.n	8001480 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e07f      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d106      	bne.n	8001472 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001464:	4b41      	ldr	r3, [pc, #260]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 8001466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001468:	2202      	movs	r2, #2
 800146a:	4013      	ands	r3, r2
 800146c:	d108      	bne.n	8001480 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e074      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001472:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 8001474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e06d      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001480:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2207      	movs	r2, #7
 8001486:	4393      	bics	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4b37      	ldr	r3, [pc, #220]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 8001490:	430a      	orrs	r2, r1
 8001492:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001494:	f7ff f9be 	bl	8000814 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149c:	e009      	b.n	80014b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149e:	f7ff f9b9 	bl	8000814 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001568 <HAL_RCC_ClockConfig+0x1f4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e054      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2238      	movs	r2, #56	@ 0x38
 80014b8:	401a      	ands	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1ec      	bne.n	800149e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2207      	movs	r2, #7
 80014ca:	4013      	ands	r3, r2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d21e      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2207      	movs	r2, #7
 80014d8:	4393      	bics	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014e4:	f7ff f996 	bl	8000814 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ec:	e009      	b.n	8001502 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ee:	f7ff f991 	bl	8000814 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001568 <HAL_RCC_ClockConfig+0x1f4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e02c      	b.n	800155c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_RCC_ClockConfig+0x1f0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2207      	movs	r2, #7
 8001508:	4013      	ands	r3, r2
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d1ee      	bne.n	80014ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2204      	movs	r2, #4
 8001516:	4013      	ands	r3, r2
 8001518:	d009      	beq.n	800152e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4a15      	ldr	r2, [pc, #84]	@ (8001574 <HAL_RCC_ClockConfig+0x200>)
 8001520:	4013      	ands	r3, r2
 8001522:	0019      	movs	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800152e:	f000 f829 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 8001532:	0001      	movs	r1, r0
 8001534:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <HAL_RCC_ClockConfig+0x1f8>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	220f      	movs	r2, #15
 800153c:	401a      	ands	r2, r3
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <HAL_RCC_ClockConfig+0x204>)
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	58d3      	ldr	r3, [r2, r3]
 8001544:	221f      	movs	r2, #31
 8001546:	4013      	ands	r3, r2
 8001548:	000a      	movs	r2, r1
 800154a:	40da      	lsrs	r2, r3
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_RCC_ClockConfig+0x208>)
 800154e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_RCC_ClockConfig+0x20c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff f861 	bl	800061c <HAL_InitTick>
 800155a:	0003      	movs	r3, r0
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40022000 	.word	0x40022000
 8001568:	00001388 	.word	0x00001388
 800156c:	40021000 	.word	0x40021000
 8001570:	fffff0ff 	.word	0xfffff0ff
 8001574:	ffff8fff 	.word	0xffff8fff
 8001578:	080032b4 	.word	0x080032b4
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158a:	4b3c      	ldr	r3, [pc, #240]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2238      	movs	r2, #56	@ 0x38
 8001590:	4013      	ands	r3, r2
 8001592:	d10f      	bne.n	80015b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001594:	4b39      	ldr	r3, [pc, #228]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0adb      	lsrs	r3, r3, #11
 800159a:	2207      	movs	r2, #7
 800159c:	4013      	ands	r3, r2
 800159e:	2201      	movs	r2, #1
 80015a0:	409a      	lsls	r2, r3
 80015a2:	0013      	movs	r3, r2
 80015a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	4835      	ldr	r0, [pc, #212]	@ (8001680 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015aa:	f7fe fdad 	bl	8000108 <__udivsi3>
 80015ae:	0003      	movs	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	e05d      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b4:	4b31      	ldr	r3, [pc, #196]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2238      	movs	r2, #56	@ 0x38
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015c0:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <HAL_RCC_GetSysClockFreq+0x100>)
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	e054      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2238      	movs	r2, #56	@ 0x38
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d138      	bne.n	8001644 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2203      	movs	r2, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	2207      	movs	r2, #7
 80015e4:	4013      	ands	r3, r2
 80015e6:	3301      	adds	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d10d      	bne.n	800160c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	4824      	ldr	r0, [pc, #144]	@ (8001684 <HAL_RCC_GetSysClockFreq+0x100>)
 80015f4:	f7fe fd88 	bl	8000108 <__udivsi3>
 80015f8:	0003      	movs	r3, r0
 80015fa:	0019      	movs	r1, r3
 80015fc:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	227f      	movs	r2, #127	@ 0x7f
 8001604:	4013      	ands	r3, r2
 8001606:	434b      	muls	r3, r1
 8001608:	617b      	str	r3, [r7, #20]
        break;
 800160a:	e00d      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	481c      	ldr	r0, [pc, #112]	@ (8001680 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001610:	f7fe fd7a 	bl	8000108 <__udivsi3>
 8001614:	0003      	movs	r3, r0
 8001616:	0019      	movs	r1, r3
 8001618:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	227f      	movs	r2, #127	@ 0x7f
 8001620:	4013      	ands	r3, r2
 8001622:	434b      	muls	r3, r1
 8001624:	617b      	str	r3, [r7, #20]
        break;
 8001626:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0f5b      	lsrs	r3, r3, #29
 800162e:	2207      	movs	r2, #7
 8001630:	4013      	ands	r3, r2
 8001632:	3301      	adds	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	6978      	ldr	r0, [r7, #20]
 800163a:	f7fe fd65 	bl	8000108 <__udivsi3>
 800163e:	0003      	movs	r3, r0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	e015      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001644:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2238      	movs	r2, #56	@ 0x38
 800164a:	4013      	ands	r3, r2
 800164c:	2b20      	cmp	r3, #32
 800164e:	d103      	bne.n	8001658 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e00b      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <HAL_RCC_GetSysClockFreq+0xf8>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2238      	movs	r2, #56	@ 0x38
 800165e:	4013      	ands	r3, r2
 8001660:	2b18      	cmp	r3, #24
 8001662:	d103      	bne.n	800166c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001664:	23fa      	movs	r3, #250	@ 0xfa
 8001666:	01db      	lsls	r3, r3, #7
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	e001      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001670:	693b      	ldr	r3, [r7, #16]
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b006      	add	sp, #24
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	40021000 	.word	0x40021000
 8001680:	00f42400 	.word	0x00f42400
 8001684:	007a1200 	.word	0x007a1200

08001688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800168c:	4b02      	ldr	r3, [pc, #8]	@ (8001698 <HAL_RCC_GetHCLKFreq+0x10>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	20000000 	.word	0x20000000

0800169c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80016a0:	f7ff fff2 	bl	8001688 <HAL_RCC_GetHCLKFreq>
 80016a4:	0004      	movs	r4, r0
 80016a6:	f7ff fb49 	bl	8000d3c <LL_RCC_GetAPB1Prescaler>
 80016aa:	0003      	movs	r3, r0
 80016ac:	0b1a      	lsrs	r2, r3, #12
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	58d3      	ldr	r3, [r2, r3]
 80016b4:	221f      	movs	r2, #31
 80016b6:	4013      	ands	r3, r2
 80016b8:	40dc      	lsrs	r4, r3
 80016ba:	0023      	movs	r3, r4
}
 80016bc:	0018      	movs	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	080032f4 	.word	0x080032f4

080016c8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_RCC_GetClockConfig+0x4c>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2207      	movs	r2, #7
 80016de:	401a      	ands	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_RCC_GetClockConfig+0x4c>)
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	23f0      	movs	r3, #240	@ 0xf0
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	401a      	ands	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_RCC_GetClockConfig+0x4c>)
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	23e0      	movs	r3, #224	@ 0xe0
 80016f8:	01db      	lsls	r3, r3, #7
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_RCC_GetClockConfig+0x50>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2207      	movs	r2, #7
 8001706:	401a      	ands	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	40022000 	.word	0x40022000

0800171c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e04a      	b.n	80017c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	223d      	movs	r2, #61	@ 0x3d
 8001732:	5c9b      	ldrb	r3, [r3, r2]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d107      	bne.n	800174a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	223c      	movs	r2, #60	@ 0x3c
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0018      	movs	r0, r3
 8001746:	f000 f841 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	223d      	movs	r2, #61	@ 0x3d
 800174e:	2102      	movs	r1, #2
 8001750:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3304      	adds	r3, #4
 800175a:	0019      	movs	r1, r3
 800175c:	0010      	movs	r0, r2
 800175e:	f000 f9b3 	bl	8001ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2248      	movs	r2, #72	@ 0x48
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	223e      	movs	r2, #62	@ 0x3e
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	223f      	movs	r2, #63	@ 0x3f
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2240      	movs	r2, #64	@ 0x40
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2241      	movs	r2, #65	@ 0x41
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2242      	movs	r2, #66	@ 0x42
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2243      	movs	r2, #67	@ 0x43
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2244      	movs	r2, #68	@ 0x44
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2245      	movs	r2, #69	@ 0x45
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2246      	movs	r2, #70	@ 0x46
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2247      	movs	r2, #71	@ 0x47
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	223d      	movs	r2, #61	@ 0x3d
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	223d      	movs	r2, #61	@ 0x3d
 80017e8:	5c9b      	ldrb	r3, [r3, r2]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d001      	beq.n	80017f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e037      	b.n	8001864 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	223d      	movs	r2, #61	@ 0x3d
 80017f8:	2102      	movs	r1, #2
 80017fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2101      	movs	r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a16      	ldr	r2, [pc, #88]	@ (800186c <HAL_TIM_Base_Start_IT+0x90>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d004      	beq.n	8001820 <HAL_TIM_Base_Start_IT+0x44>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a15      	ldr	r2, [pc, #84]	@ (8001870 <HAL_TIM_Base_Start_IT+0x94>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d116      	bne.n	800184e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <HAL_TIM_Base_Start_IT+0x98>)
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b06      	cmp	r3, #6
 8001830:	d016      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x84>
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	025b      	lsls	r3, r3, #9
 8001838:	429a      	cmp	r2, r3
 800183a:	d011      	beq.n	8001860 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184c:	e008      	b.n	8001860 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e000      	b.n	8001862 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001860:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40012c00 	.word	0x40012c00
 8001870:	40000400 	.word	0x40000400
 8001874:	00010007 	.word	0x00010007

08001878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d021      	beq.n	80018dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d01d      	beq.n	80018dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4252      	negs	r2, r2
 80018a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2203      	movs	r2, #3
 80018b8:	4013      	ands	r3, r2
 80018ba:	d004      	beq.n	80018c6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 f8ea 	bl	8001a98 <HAL_TIM_IC_CaptureCallback>
 80018c4:	e007      	b.n	80018d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f8dd 	bl	8001a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 f8e9 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2204      	movs	r2, #4
 80018e0:	4013      	ands	r3, r2
 80018e2:	d022      	beq.n	800192a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2204      	movs	r2, #4
 80018e8:	4013      	ands	r3, r2
 80018ea:	d01e      	beq.n	800192a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2205      	movs	r2, #5
 80018f2:	4252      	negs	r2, r2
 80018f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2202      	movs	r2, #2
 80018fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	23c0      	movs	r3, #192	@ 0xc0
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4013      	ands	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f000 f8c3 	bl	8001a98 <HAL_TIM_IC_CaptureCallback>
 8001912:	e007      	b.n	8001924 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	0018      	movs	r0, r3
 8001918:	f000 f8b6 	bl	8001a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f8c2 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2208      	movs	r2, #8
 800192e:	4013      	ands	r3, r2
 8001930:	d021      	beq.n	8001976 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2208      	movs	r2, #8
 8001936:	4013      	ands	r3, r2
 8001938:	d01d      	beq.n	8001976 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2209      	movs	r2, #9
 8001940:	4252      	negs	r2, r2
 8001942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2204      	movs	r2, #4
 8001948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2203      	movs	r2, #3
 8001952:	4013      	ands	r3, r2
 8001954:	d004      	beq.n	8001960 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0018      	movs	r0, r3
 800195a:	f000 f89d 	bl	8001a98 <HAL_TIM_IC_CaptureCallback>
 800195e:	e007      	b.n	8001970 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f890 	bl	8001a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0018      	movs	r0, r3
 800196c:	f000 f89c 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2210      	movs	r2, #16
 800197a:	4013      	ands	r3, r2
 800197c:	d022      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2210      	movs	r2, #16
 8001982:	4013      	ands	r3, r2
 8001984:	d01e      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2211      	movs	r2, #17
 800198c:	4252      	negs	r2, r2
 800198e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2208      	movs	r2, #8
 8001994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	23c0      	movs	r3, #192	@ 0xc0
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d004      	beq.n	80019ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 f876 	bl	8001a98 <HAL_TIM_IC_CaptureCallback>
 80019ac:	e007      	b.n	80019be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f000 f869 	bl	8001a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 f875 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d00c      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d008      	beq.n	80019e6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2202      	movs	r2, #2
 80019da:	4252      	negs	r2, r2
 80019dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7fe fdd9 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2280      	movs	r2, #128	@ 0x80
 80019ea:	4013      	ands	r3, r2
 80019ec:	d104      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	019b      	lsls	r3, r3, #6
 80019f4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80019f6:	d00b      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	4013      	ands	r3, r2
 80019fe:	d007      	beq.n	8001a10 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1e      	ldr	r2, [pc, #120]	@ (8001a80 <HAL_TIM_IRQHandler+0x208>)
 8001a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 f8de 	bl	8001bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d00b      	beq.n	8001a32 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2280      	movs	r2, #128	@ 0x80
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <HAL_TIM_IRQHandler+0x20c>)
 8001a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 f8d5 	bl	8001bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2240      	movs	r2, #64	@ 0x40
 8001a36:	4013      	ands	r3, r2
 8001a38:	d00c      	beq.n	8001a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2240      	movs	r2, #64	@ 0x40
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d008      	beq.n	8001a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2241      	movs	r2, #65	@ 0x41
 8001a48:	4252      	negs	r2, r2
 8001a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f832 	bl	8001ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2220      	movs	r2, #32
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d00c      	beq.n	8001a76 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	4013      	ands	r3, r2
 8001a62:	d008      	beq.n	8001a76 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2221      	movs	r2, #33	@ 0x21
 8001a6a:	4252      	negs	r2, r2
 8001a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 f8a3 	bl	8001bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b004      	add	sp, #16
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	ffffdf7f 	.word	0xffffdf7f
 8001a84:	fffffeff 	.word	0xfffffeff

08001a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a90:	46c0      	nop			@ (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aa0:	46c0      	nop			@ (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ab0:	46c0      	nop			@ (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a32      	ldr	r2, [pc, #200]	@ (8001ba4 <TIM_Base_SetConfig+0xdc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <TIM_Base_SetConfig+0x20>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a31      	ldr	r2, [pc, #196]	@ (8001ba8 <TIM_Base_SetConfig+0xe0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d108      	bne.n	8001afa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2270      	movs	r2, #112	@ 0x70
 8001aec:	4393      	bics	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a29      	ldr	r2, [pc, #164]	@ (8001ba4 <TIM_Base_SetConfig+0xdc>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00f      	beq.n	8001b22 <TIM_Base_SetConfig+0x5a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a28      	ldr	r2, [pc, #160]	@ (8001ba8 <TIM_Base_SetConfig+0xe0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00b      	beq.n	8001b22 <TIM_Base_SetConfig+0x5a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a27      	ldr	r2, [pc, #156]	@ (8001bac <TIM_Base_SetConfig+0xe4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <TIM_Base_SetConfig+0x5a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <TIM_Base_SetConfig+0xe8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d003      	beq.n	8001b22 <TIM_Base_SetConfig+0x5a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <TIM_Base_SetConfig+0xec>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d108      	bne.n	8001b34 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4a24      	ldr	r2, [pc, #144]	@ (8001bb8 <TIM_Base_SetConfig+0xf0>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2280      	movs	r2, #128	@ 0x80
 8001b38:	4393      	bics	r3, r2
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ba4 <TIM_Base_SetConfig+0xdc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <TIM_Base_SetConfig+0xaa>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <TIM_Base_SetConfig+0xe8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d003      	beq.n	8001b72 <TIM_Base_SetConfig+0xaa>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a11      	ldr	r2, [pc, #68]	@ (8001bb4 <TIM_Base_SetConfig+0xec>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d103      	bne.n	8001b7a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	2201      	movs	r2, #1
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d106      	bne.n	8001b9a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4393      	bics	r3, r2
 8001b94:	001a      	movs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]
  }
}
 8001b9a:	46c0      	nop			@ (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40002000 	.word	0x40002000
 8001bb0:	40014400 	.word	0x40014400
 8001bb4:	40014800 	.word	0x40014800
 8001bb8:	fffffcff 	.word	0xfffffcff

08001bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}

08001bec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001bfc:	1dbb      	adds	r3, r7, #6
 8001bfe:	2200      	movs	r2, #0
 8001c00:	5e9b      	ldrsh	r3, [r3, r2]
 8001c02:	2b84      	cmp	r3, #132	@ 0x84
 8001c04:	d006      	beq.n	8001c14 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	5e9a      	ldrsh	r2, [r3, r2]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	18d3      	adds	r3, r2, r3
 8001c10:	3303      	adds	r3, #3
 8001c12:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c14:	68fb      	ldr	r3, [r7, #12]
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c24:	f3ef 8305 	mrs	r3, IPSR
 8001c28:	607b      	str	r3, [r7, #4]
  return(result);
 8001c2a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	4193      	sbcs	r3, r2
 8001c30:	b2db      	uxtb	r3, r3
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c3e:	f000 fc2f 	bl	80024a0 <vTaskStartScheduler>
  
  return osOK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685c      	ldr	r4, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c60:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2208      	movs	r2, #8
 8001c66:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ffbf 	bl	8001bec <makeFreeRtosPriority>
 8001c6e:	0001      	movs	r1, r0
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	230c      	movs	r3, #12
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	9100      	str	r1, [sp, #0]
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	0032      	movs	r2, r6
 8001c7e:	0029      	movs	r1, r5
 8001c80:	0020      	movs	r0, r4
 8001c82:	f000 f902 	bl	8001e8a <xTaskCreate>
 8001c86:	0003      	movs	r3, r0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d001      	beq.n	8001c90 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b005      	add	sp, #20
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c9a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 fa37 	bl	8002118 <vTaskDelete>
  return osOK;
 8001caa:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <osDelay+0x16>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	e000      	b.n	8001ccc <osDelay+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fa87 	bl	80021e0 <vTaskDelay>
  
  return osOK;
 8001cd2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b004      	add	sp, #16
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 faa0 	bl	800222c <vTaskSuspend>
  
  return osOK;
 8001cec:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8001d00:	f7ff ff8d 	bl	8001c1e <inHandlerMode>
 8001d04:	1e03      	subs	r3, r0, #0
 8001d06:	d00b      	beq.n	8001d20 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fb6a 	bl	80023e4 <xTaskResumeFromISR>
 8001d10:	0003      	movs	r3, r0
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d108      	bne.n	8001d28 <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <osThreadResume+0x3c>)
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	0552      	lsls	r2, r2, #21
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e003      	b.n	8001d28 <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 fb10 	bl	8002348 <vTaskResume>
  }
  return osOK;
 8001d28:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	e000ed04 	.word	0xe000ed04

08001d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3308      	adds	r3, #8
 8001d44:	001a      	movs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4252      	negs	r2, r2
 8001d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3308      	adds	r3, #8
 8001d56:	001a      	movs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3308      	adds	r3, #8
 8001d60:	001a      	movs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d6c:	46c0      	nop			@ (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b004      	add	sp, #16
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	d103      	bne.n	8001dec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e00c      	b.n	8001e06 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3308      	adds	r3, #8
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e002      	b.n	8001dfa <vListInsert+0x2c>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d2f6      	bcs.n	8001df4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	601a      	str	r2, [r3, #0]
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6892      	ldr	r2, [r2, #8]
 8001e50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6852      	ldr	r2, [r2, #4]
 8001e5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d103      	bne.n	8001e6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1e5a      	subs	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b004      	add	sp, #16
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e8a:	b590      	push	{r4, r7, lr}
 8001e8c:	b08d      	sub	sp, #52	@ 0x34
 8001e8e:	af04      	add	r7, sp, #16
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e9a:	1dbb      	adds	r3, r7, #6
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 ff1d 	bl	8002ce0 <pvPortMalloc>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001eb0:	20a0      	movs	r0, #160	@ 0xa0
 8001eb2:	f000 ff15 	bl	8002ce0 <pvPortMalloc>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec6:	e006      	b.n	8001ed6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 ffb8 	bl	8002e40 <vPortFree>
 8001ed0:	e001      	b.n	8001ed6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d016      	beq.n	8001f0a <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001edc:	1dbb      	adds	r3, r7, #6
 8001ede:	881a      	ldrh	r2, [r3, #0]
 8001ee0:	683c      	ldr	r4, [r7, #0]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9303      	str	r3, [sp, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	0023      	movs	r3, r4
 8001ef8:	f000 f810 	bl	8001f1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f8a6 	bl	8002050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	e002      	b.n	8001f10 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f10:	69bb      	ldr	r3, [r7, #24]
	}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b009      	add	sp, #36	@ 0x24
 8001f18:	bd90      	pop	{r4, r7, pc}
	...

08001f1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4943      	ldr	r1, [pc, #268]	@ (8002040 <prvInitialiseNewTask+0x124>)
 8001f32:	468c      	mov	ip, r1
 8001f34:	4463      	add	r3, ip
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	18d3      	adds	r3, r2, r3
 8001f3a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2207      	movs	r2, #7
 8001f40:	4393      	bics	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d002      	beq.n	8001f52 <prvInitialiseNewTask+0x36>
 8001f4c:	b672      	cpsid	i
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	e7fd      	b.n	8001f4e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e013      	b.n	8001f86 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	7818      	ldrb	r0, [r3, #0]
 8001f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f68:	2134      	movs	r1, #52	@ 0x34
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	185b      	adds	r3, r3, r1
 8001f70:	1c02      	adds	r2, r0, #0
 8001f72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	18d3      	adds	r3, r2, r3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b0f      	cmp	r3, #15
 8001f8a:	d9e8      	bls.n	8001f5e <prvInitialiseNewTask+0x42>
 8001f8c:	e000      	b.n	8001f90 <prvInitialiseNewTask+0x74>
			{
				break;
 8001f8e:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	2243      	movs	r2, #67	@ 0x43
 8001f94:	2100      	movs	r1, #0
 8001f96:	5499      	strb	r1, [r3, r2]
 8001f98:	e003      	b.n	8001fa2 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9c:	2234      	movs	r2, #52	@ 0x34
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d901      	bls.n	8001fac <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001fa8:	2306      	movs	r3, #6
 8001faa:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fba:	2200      	movs	r2, #0
 8001fbc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7ff fed6 	bl	8001d74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fca:	3318      	adds	r3, #24
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fed1 	bl	8001d74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2207      	movs	r2, #7
 8001fdc:	1ad2      	subs	r2, r2, r3
 8001fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fe6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fea:	2298      	movs	r2, #152	@ 0x98
 8001fec:	2100      	movs	r1, #0
 8001fee:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff2:	229c      	movs	r2, #156	@ 0x9c
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffa:	334c      	adds	r3, #76	@ 0x4c
 8001ffc:	224c      	movs	r2, #76	@ 0x4c
 8001ffe:	2100      	movs	r1, #0
 8002000:	0018      	movs	r0, r3
 8002002:	f001 f825 	bl	8003050 <memset>
 8002006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002008:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <prvInitialiseNewTask+0x128>)
 800200a:	651a      	str	r2, [r3, #80]	@ 0x50
 800200c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <prvInitialiseNewTask+0x12c>)
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54
 8002012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <prvInitialiseNewTask+0x130>)
 8002016:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	68f9      	ldr	r1, [r7, #12]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fd2a 	bl	8002a78 <pxPortInitialiseStack>
 8002024:	0002      	movs	r2, r0
 8002026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002028:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b006      	add	sp, #24
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	3fffffff 	.word	0x3fffffff
 8002044:	20000e28 	.word	0x20000e28
 8002048:	20000e90 	.word	0x20000e90
 800204c:	20000ef8 	.word	0x20000ef8

08002050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002058:	f000 fdaa 	bl	8002bb0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800205c:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <prvAddNewTaskToReadyList+0xb0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4b27      	ldr	r3, [pc, #156]	@ (8002100 <prvAddNewTaskToReadyList+0xb0>)
 8002064:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002066:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <prvAddNewTaskToReadyList+0xb4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d109      	bne.n	8002082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800206e:	4b25      	ldr	r3, [pc, #148]	@ (8002104 <prvAddNewTaskToReadyList+0xb4>)
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002074:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <prvAddNewTaskToReadyList+0xb0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d110      	bne.n	800209e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800207c:	f000 fc02 	bl	8002884 <prvInitialiseTaskLists>
 8002080:	e00d      	b.n	800209e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <prvAddNewTaskToReadyList+0xb8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <prvAddNewTaskToReadyList+0xb4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	429a      	cmp	r2, r3
 8002096:	d802      	bhi.n	800209e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002098:	4b1a      	ldr	r3, [pc, #104]	@ (8002104 <prvAddNewTaskToReadyList+0xb4>)
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <prvAddNewTaskToReadyList+0xbc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	4b19      	ldr	r3, [pc, #100]	@ (800210c <prvAddNewTaskToReadyList+0xbc>)
 80020a6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <prvAddNewTaskToReadyList+0xc0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d903      	bls.n	80020bc <prvAddNewTaskToReadyList+0x6c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b8:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <prvAddNewTaskToReadyList+0xc0>)
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c0:	0013      	movs	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	189b      	adds	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4a12      	ldr	r2, [pc, #72]	@ (8002114 <prvAddNewTaskToReadyList+0xc4>)
 80020ca:	189a      	adds	r2, r3, r2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	0019      	movs	r1, r3
 80020d2:	0010      	movs	r0, r2
 80020d4:	f7ff fe59 	bl	8001d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80020d8:	f000 fd7c 	bl	8002bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80020dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <prvAddNewTaskToReadyList+0xb8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80020e4:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <prvAddNewTaskToReadyList+0xb4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d201      	bcs.n	80020f6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020f2:	f000 fd4d 	bl	8002b90 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b002      	add	sp, #8
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	200001dc 	.word	0x200001dc
 8002104:	200000dc 	.word	0x200000dc
 8002108:	200001e8 	.word	0x200001e8
 800210c:	200001f8 	.word	0x200001f8
 8002110:	200001e4 	.word	0x200001e4
 8002114:	200000e0 	.word	0x200000e0

08002118 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002120:	f000 fd46 	bl	8002bb0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <vTaskDelete+0x18>
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <vTaskDelete+0xac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	e000      	b.n	8002132 <vTaskDelete+0x1a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3304      	adds	r3, #4
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff fe7e 	bl	8001e3a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3318      	adds	r3, #24
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff fe75 	bl	8001e3a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002150:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <vTaskDelete+0xb0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	4b1c      	ldr	r3, [pc, #112]	@ (80021c8 <vTaskDelete+0xb0>)
 8002158:	601a      	str	r2, [r3, #0]

			if( pxTCB == pxCurrentTCB )
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <vTaskDelete+0xac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	429a      	cmp	r2, r3
 8002162:	d10c      	bne.n	800217e <vTaskDelete+0x66>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1d1a      	adds	r2, r3, #4
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <vTaskDelete+0xb4>)
 800216a:	0011      	movs	r1, r2
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff fe0c 	bl	8001d8a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <vTaskDelete+0xb8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <vTaskDelete+0xb8>)
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e00a      	b.n	8002194 <vTaskDelete+0x7c>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <vTaskDelete+0xbc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <vTaskDelete+0xbc>)
 8002186:	601a      	str	r2, [r3, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 fbec 	bl	8002968 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002190:	f000 fc00 	bl	8002994 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002194:	f000 fd1e 	bl	8002bd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <vTaskDelete+0xc0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <vTaskDelete+0xa4>
		{
			if( pxTCB == pxCurrentTCB )
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <vTaskDelete+0xac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d108      	bne.n	80021bc <vTaskDelete+0xa4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <vTaskDelete+0xc4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <vTaskDelete+0xa0>
 80021b2:	b672      	cpsid	i
 80021b4:	46c0      	nop			@ (mov r8, r8)
 80021b6:	e7fd      	b.n	80021b4 <vTaskDelete+0x9c>
				portYIELD_WITHIN_API();
 80021b8:	f000 fcea 	bl	8002b90 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	b004      	add	sp, #16
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200000dc 	.word	0x200000dc
 80021c8:	200001f8 	.word	0x200001f8
 80021cc:	200001b0 	.word	0x200001b0
 80021d0:	200001c4 	.word	0x200001c4
 80021d4:	200001dc 	.word	0x200001dc
 80021d8:	200001e8 	.word	0x200001e8
 80021dc:	20000204 	.word	0x20000204

080021e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d011      	beq.n	8002216 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80021f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <vTaskDelay+0x48>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <vTaskDelay+0x20>
 80021fa:	b672      	cpsid	i
 80021fc:	46c0      	nop			@ (mov r8, r8)
 80021fe:	e7fd      	b.n	80021fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002200:	f000 f98e 	bl	8002520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2100      	movs	r1, #0
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fbe1 	bl	80029d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800220e:	f000 f993 	bl	8002538 <xTaskResumeAll>
 8002212:	0003      	movs	r3, r0
 8002214:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 800221c:	f000 fcb8 	bl	8002b90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002220:	46c0      	nop			@ (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b004      	add	sp, #16
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000204 	.word	0x20000204

0800222c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002234:	f000 fcbc 	bl	8002bb0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <vTaskSuspend+0x18>
 800223e:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <vTaskSuspend+0xb8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e000      	b.n	8002246 <vTaskSuspend+0x1a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3304      	adds	r3, #4
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff fdf4 	bl	8001e3a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3318      	adds	r3, #24
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff fdeb 	bl	8001e3a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <vTaskSuspend+0xbc>)
 800226a:	0011      	movs	r1, r2
 800226c:	0018      	movs	r0, r3
 800226e:	f7ff fd8c 	bl	8001d8a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	229c      	movs	r2, #156	@ 0x9c
 8002276:	5c9b      	ldrb	r3, [r3, r2]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d103      	bne.n	8002286 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	229c      	movs	r2, #156	@ 0x9c
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002286:	f000 fca5 	bl	8002bd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800228a:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <vTaskSuspend+0xc0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002292:	f000 fc8d 	bl	8002bb0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002296:	f000 fb7d 	bl	8002994 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800229a:	f000 fc9b 	bl	8002bd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <vTaskSuspend+0xb8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d119      	bne.n	80022dc <vTaskSuspend+0xb0>
		{
			if( xSchedulerRunning != pdFALSE )
 80022a8:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <vTaskSuspend+0xc0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <vTaskSuspend+0x98>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <vTaskSuspend+0xc4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <vTaskSuspend+0x92>
 80022b8:	b672      	cpsid	i
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	e7fd      	b.n	80022ba <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 80022be:	f000 fc67 	bl	8002b90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022c2:	e00b      	b.n	80022dc <vTaskSuspend+0xb0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <vTaskSuspend+0xbc>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <vTaskSuspend+0xc8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d103      	bne.n	80022d8 <vTaskSuspend+0xac>
					pxCurrentTCB = NULL;
 80022d0:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <vTaskSuspend+0xb8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
	}
 80022d6:	e001      	b.n	80022dc <vTaskSuspend+0xb0>
					vTaskSwitchContext();
 80022d8:	f000 fa6a 	bl	80027b0 <vTaskSwitchContext>
	}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b004      	add	sp, #16
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200000dc 	.word	0x200000dc
 80022e8:	200001c8 	.word	0x200001c8
 80022ec:	200001e8 	.word	0x200001e8
 80022f0:	20000204 	.word	0x20000204
 80022f4:	200001dc 	.word	0x200001dc

080022f8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <prvTaskIsTaskSuspended+0x1c>
 800230e:	b672      	cpsid	i
 8002310:	46c0      	nop			@ (mov r8, r8)
 8002312:	e7fd      	b.n	8002310 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <prvTaskIsTaskSuspended+0x48>)
 800231a:	429a      	cmp	r2, r3
 800231c:	d10a      	bne.n	8002334 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002322:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <prvTaskIsTaskSuspended+0x4c>)
 8002324:	429a      	cmp	r2, r3
 8002326:	d005      	beq.n	8002334 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 8002330:	2301      	movs	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002334:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	200001c8 	.word	0x200001c8
 8002344:	2000019c 	.word	0x2000019c

08002348 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <vTaskResume+0x18>
 800235a:	b672      	cpsid	i
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	e7fd      	b.n	800235c <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <vTaskResume+0x90>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	429a      	cmp	r2, r3
 8002368:	d032      	beq.n	80023d0 <vTaskResume+0x88>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02f      	beq.n	80023d0 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8002370:	f000 fc1e 	bl	8002bb0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ffbe 	bl	80022f8 <prvTaskIsTaskSuspended>
 800237c:	1e03      	subs	r3, r0, #0
 800237e:	d025      	beq.n	80023cc <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3304      	adds	r3, #4
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff fd58 	bl	8001e3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <vTaskResume+0x94>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d903      	bls.n	800239e <vTaskResume+0x56>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <vTaskResume+0x94>)
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a2:	0013      	movs	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <vTaskResume+0x98>)
 80023ac:	189a      	adds	r2, r3, r2
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3304      	adds	r3, #4
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f7ff fce8 	bl	8001d8a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <vTaskResume+0x90>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d301      	bcc.n	80023cc <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80023c8:	f000 fbe2 	bl	8002b90 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80023cc:	f000 fc02 	bl	8002bd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b004      	add	sp, #16
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200000dc 	.word	0x200000dc
 80023dc:	200001e4 	.word	0x200001e4
 80023e0:	200000e0 	.word	0x200000e0

080023e4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = xTaskToResume;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <xTaskResumeFromISR+0x1c>
 80023fa:	b672      	cpsid	i
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	e7fd      	b.n	80023fc <xTaskResumeFromISR+0x18>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002400:	f000 fc00 	bl	8002c04 <ulSetInterruptMaskFromISR>
 8002404:	0003      	movs	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff ff74 	bl	80022f8 <prvTaskIsTaskSuspended>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d032      	beq.n	800247a <xTaskResumeFromISR+0x96>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002414:	4b1d      	ldr	r3, [pc, #116]	@ (800248c <xTaskResumeFromISR+0xa8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d126      	bne.n	800246a <xTaskResumeFromISR+0x86>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <xTaskResumeFromISR+0xac>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	429a      	cmp	r2, r3
 8002428:	d301      	bcc.n	800242e <xTaskResumeFromISR+0x4a>
					{
						xYieldRequired = pdTRUE;
 800242a:	2301      	movs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	3304      	adds	r3, #4
 8002432:	0018      	movs	r0, r3
 8002434:	f7ff fd01 	bl	8001e3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243c:	4b15      	ldr	r3, [pc, #84]	@ (8002494 <xTaskResumeFromISR+0xb0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d903      	bls.n	800244c <xTaskResumeFromISR+0x68>
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002448:	4b12      	ldr	r3, [pc, #72]	@ (8002494 <xTaskResumeFromISR+0xb0>)
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002450:	0013      	movs	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	189b      	adds	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4a0f      	ldr	r2, [pc, #60]	@ (8002498 <xTaskResumeFromISR+0xb4>)
 800245a:	189a      	adds	r2, r3, r2
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3304      	adds	r3, #4
 8002460:	0019      	movs	r1, r3
 8002462:	0010      	movs	r0, r2
 8002464:	f7ff fc91 	bl	8001d8a <vListInsertEnd>
 8002468:	e007      	b.n	800247a <xTaskResumeFromISR+0x96>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	3318      	adds	r3, #24
 800246e:	001a      	movs	r2, r3
 8002470:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <xTaskResumeFromISR+0xb8>)
 8002472:	0011      	movs	r1, r2
 8002474:	0018      	movs	r0, r3
 8002476:	f7ff fc88 	bl	8001d8a <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 fbc7 	bl	8002c10 <vClearInterruptMaskFromISR>

		return xYieldRequired;
 8002482:	697b      	ldr	r3, [r7, #20]
	}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b006      	add	sp, #24
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000204 	.word	0x20000204
 8002490:	200000dc 	.word	0x200000dc
 8002494:	200001e4 	.word	0x200001e4
 8002498:	200000e0 	.word	0x200000e0
 800249c:	2000019c 	.word	0x2000019c

080024a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80024a6:	4916      	ldr	r1, [pc, #88]	@ (8002500 <vTaskStartScheduler+0x60>)
 80024a8:	4816      	ldr	r0, [pc, #88]	@ (8002504 <vTaskStartScheduler+0x64>)
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <vTaskStartScheduler+0x68>)
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2300      	movs	r3, #0
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	f7ff fce8 	bl	8001e8a <xTaskCreate>
 80024ba:	0003      	movs	r3, r0
 80024bc:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d113      	bne.n	80024ec <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80024c4:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <vTaskStartScheduler+0x6c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	334c      	adds	r3, #76	@ 0x4c
 80024cc:	001a      	movs	r2, r3
 80024ce:	4b10      	ldr	r3, [pc, #64]	@ (8002510 <vTaskStartScheduler+0x70>)
 80024d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <vTaskStartScheduler+0x74>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	4252      	negs	r2, r2
 80024d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80024da:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <vTaskStartScheduler+0x78>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024e0:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <vTaskStartScheduler+0x7c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80024e6:	f000 fb2f 	bl	8002b48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024ea:	e005      	b.n	80024f8 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3301      	adds	r3, #1
 80024f0:	d102      	bne.n	80024f8 <vTaskStartScheduler+0x58>
 80024f2:	b672      	cpsid	i
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	e7fd      	b.n	80024f4 <vTaskStartScheduler+0x54>
}
 80024f8:	46c0      	nop			@ (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	080032ac 	.word	0x080032ac
 8002504:	08002865 	.word	0x08002865
 8002508:	20000200 	.word	0x20000200
 800250c:	200000dc 	.word	0x200000dc
 8002510:	20000010 	.word	0x20000010
 8002514:	200001fc 	.word	0x200001fc
 8002518:	200001e8 	.word	0x200001e8
 800251c:	200001e0 	.word	0x200001e0

08002520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <vTaskSuspendAll+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4b02      	ldr	r3, [pc, #8]	@ (8002534 <vTaskSuspendAll+0x14>)
 800252c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000204 	.word	0x20000204

08002538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002546:	4b3a      	ldr	r3, [pc, #232]	@ (8002630 <xTaskResumeAll+0xf8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <xTaskResumeAll+0x1c>
 800254e:	b672      	cpsid	i
 8002550:	46c0      	nop			@ (mov r8, r8)
 8002552:	e7fd      	b.n	8002550 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002554:	f000 fb2c 	bl	8002bb0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002558:	4b35      	ldr	r3, [pc, #212]	@ (8002630 <xTaskResumeAll+0xf8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <xTaskResumeAll+0xf8>)
 8002560:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002562:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <xTaskResumeAll+0xf8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d15b      	bne.n	8002622 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800256a:	4b32      	ldr	r3, [pc, #200]	@ (8002634 <xTaskResumeAll+0xfc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d057      	beq.n	8002622 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002572:	e02f      	b.n	80025d4 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002574:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <xTaskResumeAll+0x100>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3318      	adds	r3, #24
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff fc5a 	bl	8001e3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3304      	adds	r3, #4
 800258a:	0018      	movs	r0, r3
 800258c:	f7ff fc55 	bl	8001e3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002594:	4b29      	ldr	r3, [pc, #164]	@ (800263c <xTaskResumeAll+0x104>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d903      	bls.n	80025a4 <xTaskResumeAll+0x6c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a0:	4b26      	ldr	r3, [pc, #152]	@ (800263c <xTaskResumeAll+0x104>)
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	0013      	movs	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4a23      	ldr	r2, [pc, #140]	@ (8002640 <xTaskResumeAll+0x108>)
 80025b2:	189a      	adds	r2, r3, r2
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3304      	adds	r3, #4
 80025b8:	0019      	movs	r1, r3
 80025ba:	0010      	movs	r0, r2
 80025bc:	f7ff fbe5 	bl	8001d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002644 <xTaskResumeAll+0x10c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <xTaskResumeAll+0x110>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025d4:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <xTaskResumeAll+0x100>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1cb      	bne.n	8002574 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025e2:	f000 f9d7 	bl	8002994 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025e6:	4b19      	ldr	r3, [pc, #100]	@ (800264c <xTaskResumeAll+0x114>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00f      	beq.n	8002612 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025f2:	f000 f82d 	bl	8002650 <xTaskIncrementTick>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d002      	beq.n	8002600 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 80025fa:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <xTaskResumeAll+0x110>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f2      	bne.n	80025f2 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <xTaskResumeAll+0x114>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <xTaskResumeAll+0x110>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800261a:	2301      	movs	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800261e:	f000 fab7 	bl	8002b90 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002622:	f000 fad7 	bl	8002bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8002626:	68bb      	ldr	r3, [r7, #8]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b004      	add	sp, #16
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000204 	.word	0x20000204
 8002634:	200001dc 	.word	0x200001dc
 8002638:	2000019c 	.word	0x2000019c
 800263c:	200001e4 	.word	0x200001e4
 8002640:	200000e0 	.word	0x200000e0
 8002644:	200000dc 	.word	0x200000dc
 8002648:	200001f0 	.word	0x200001f0
 800264c:	200001ec 	.word	0x200001ec

08002650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265a:	4b4a      	ldr	r3, [pc, #296]	@ (8002784 <xTaskIncrementTick+0x134>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d000      	beq.n	8002664 <xTaskIncrementTick+0x14>
 8002662:	e085      	b.n	8002770 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002664:	4b48      	ldr	r3, [pc, #288]	@ (8002788 <xTaskIncrementTick+0x138>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800266c:	4b46      	ldr	r3, [pc, #280]	@ (8002788 <xTaskIncrementTick+0x138>)
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d118      	bne.n	80026aa <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002678:	4b44      	ldr	r3, [pc, #272]	@ (800278c <xTaskIncrementTick+0x13c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <xTaskIncrementTick+0x38>
 8002682:	b672      	cpsid	i
 8002684:	46c0      	nop			@ (mov r8, r8)
 8002686:	e7fd      	b.n	8002684 <xTaskIncrementTick+0x34>
 8002688:	4b40      	ldr	r3, [pc, #256]	@ (800278c <xTaskIncrementTick+0x13c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b40      	ldr	r3, [pc, #256]	@ (8002790 <xTaskIncrementTick+0x140>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <xTaskIncrementTick+0x13c>)
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	4b3e      	ldr	r3, [pc, #248]	@ (8002790 <xTaskIncrementTick+0x140>)
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <xTaskIncrementTick+0x144>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <xTaskIncrementTick+0x144>)
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f000 f975 	bl	8002994 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <xTaskIncrementTick+0x148>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d349      	bcc.n	8002748 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026b4:	4b35      	ldr	r3, [pc, #212]	@ (800278c <xTaskIncrementTick+0x13c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d104      	bne.n	80026c8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026be:	4b36      	ldr	r3, [pc, #216]	@ (8002798 <xTaskIncrementTick+0x148>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	4252      	negs	r2, r2
 80026c4:	601a      	str	r2, [r3, #0]
					break;
 80026c6:	e03f      	b.n	8002748 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <xTaskIncrementTick+0x13c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d203      	bcs.n	80026e8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <xTaskIncrementTick+0x148>)
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026e6:	e02f      	b.n	8002748 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3304      	adds	r3, #4
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff fba4 	bl	8001e3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3318      	adds	r3, #24
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff fb9b 	bl	8001e3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002708:	4b24      	ldr	r3, [pc, #144]	@ (800279c <xTaskIncrementTick+0x14c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d903      	bls.n	8002718 <xTaskIncrementTick+0xc8>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <xTaskIncrementTick+0x14c>)
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271c:	0013      	movs	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	189b      	adds	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4a1e      	ldr	r2, [pc, #120]	@ (80027a0 <xTaskIncrementTick+0x150>)
 8002726:	189a      	adds	r2, r3, r2
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3304      	adds	r3, #4
 800272c:	0019      	movs	r1, r3
 800272e:	0010      	movs	r0, r2
 8002730:	f7ff fb2b 	bl	8001d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002738:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <xTaskIncrementTick+0x154>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273e:	429a      	cmp	r2, r3
 8002740:	d3b8      	bcc.n	80026b4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002746:	e7b5      	b.n	80026b4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002748:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <xTaskIncrementTick+0x154>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800274e:	4914      	ldr	r1, [pc, #80]	@ (80027a0 <xTaskIncrementTick+0x150>)
 8002750:	0013      	movs	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	189b      	adds	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	585b      	ldr	r3, [r3, r1]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d901      	bls.n	8002762 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 800275e:	2301      	movs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <xTaskIncrementTick+0x158>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800276a:	2301      	movs	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e004      	b.n	800277a <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <xTaskIncrementTick+0x15c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <xTaskIncrementTick+0x15c>)
 8002778:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800277a:	697b      	ldr	r3, [r7, #20]
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b006      	add	sp, #24
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000204 	.word	0x20000204
 8002788:	200001e0 	.word	0x200001e0
 800278c:	20000194 	.word	0x20000194
 8002790:	20000198 	.word	0x20000198
 8002794:	200001f4 	.word	0x200001f4
 8002798:	200001fc 	.word	0x200001fc
 800279c:	200001e4 	.word	0x200001e4
 80027a0:	200000e0 	.word	0x200000e0
 80027a4:	200000dc 	.word	0x200000dc
 80027a8:	200001f0 	.word	0x200001f0
 80027ac:	200001ec 	.word	0x200001ec

080027b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027b6:	4b25      	ldr	r3, [pc, #148]	@ (800284c <vTaskSwitchContext+0x9c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <vTaskSwitchContext+0xa0>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027c4:	e03e      	b.n	8002844 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80027c6:	4b22      	ldr	r3, [pc, #136]	@ (8002850 <vTaskSwitchContext+0xa0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027cc:	4b21      	ldr	r3, [pc, #132]	@ (8002854 <vTaskSwitchContext+0xa4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	e008      	b.n	80027e6 <vTaskSwitchContext+0x36>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <vTaskSwitchContext+0x30>
 80027da:	b672      	cpsid	i
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	e7fd      	b.n	80027dc <vTaskSwitchContext+0x2c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	491c      	ldr	r1, [pc, #112]	@ (8002858 <vTaskSwitchContext+0xa8>)
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	0013      	movs	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	585b      	ldr	r3, [r3, r1]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ed      	beq.n	80027d4 <vTaskSwitchContext+0x24>
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	0013      	movs	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4a15      	ldr	r2, [pc, #84]	@ (8002858 <vTaskSwitchContext+0xa8>)
 8002804:	189b      	adds	r3, r3, r2
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3308      	adds	r3, #8
 800281a:	429a      	cmp	r2, r3
 800281c:	d104      	bne.n	8002828 <vTaskSwitchContext+0x78>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <vTaskSwitchContext+0xac>)
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <vTaskSwitchContext+0xa4>)
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <vTaskSwitchContext+0xac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	334c      	adds	r3, #76	@ 0x4c
 800283e:	001a      	movs	r2, r3
 8002840:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <vTaskSwitchContext+0xb0>)
 8002842:	601a      	str	r2, [r3, #0]
}
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000204 	.word	0x20000204
 8002850:	200001f0 	.word	0x200001f0
 8002854:	200001e4 	.word	0x200001e4
 8002858:	200000e0 	.word	0x200000e0
 800285c:	200000dc 	.word	0x200000dc
 8002860:	20000010 	.word	0x20000010

08002864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800286c:	f000 f84e 	bl	800290c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002870:	4b03      	ldr	r3, [pc, #12]	@ (8002880 <prvIdleTask+0x1c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d9f9      	bls.n	800286c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002878:	f000 f98a 	bl	8002b90 <vPortYield>
		prvCheckTasksWaitingTermination();
 800287c:	e7f6      	b.n	800286c <prvIdleTask+0x8>
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	200000e0 	.word	0x200000e0

08002884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	e00c      	b.n	80028aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	0013      	movs	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	189b      	adds	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <prvInitialiseTaskLists+0x68>)
 800289c:	189b      	adds	r3, r3, r2
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff fa4a 	bl	8001d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3301      	adds	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d9ef      	bls.n	8002890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <prvInitialiseTaskLists+0x6c>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7ff fa40 	bl	8001d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028b8:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <prvInitialiseTaskLists+0x70>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f7ff fa3c 	bl	8001d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028c0:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <prvInitialiseTaskLists+0x74>)
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7ff fa38 	bl	8001d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <prvInitialiseTaskLists+0x78>)
 80028ca:	0018      	movs	r0, r3
 80028cc:	f7ff fa34 	bl	8001d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <prvInitialiseTaskLists+0x7c>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7ff fa30 	bl	8001d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002904 <prvInitialiseTaskLists+0x80>)
 80028da:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <prvInitialiseTaskLists+0x6c>)
 80028dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <prvInitialiseTaskLists+0x84>)
 80028e0:	4a04      	ldr	r2, [pc, #16]	@ (80028f4 <prvInitialiseTaskLists+0x70>)
 80028e2:	601a      	str	r2, [r3, #0]
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200000e0 	.word	0x200000e0
 80028f0:	2000016c 	.word	0x2000016c
 80028f4:	20000180 	.word	0x20000180
 80028f8:	2000019c 	.word	0x2000019c
 80028fc:	200001b0 	.word	0x200001b0
 8002900:	200001c8 	.word	0x200001c8
 8002904:	20000194 	.word	0x20000194
 8002908:	20000198 	.word	0x20000198

0800290c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002912:	e01a      	b.n	800294a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002914:	f000 f94c 	bl	8002bb0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	4b10      	ldr	r3, [pc, #64]	@ (800295c <prvCheckTasksWaitingTermination+0x50>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	0018      	movs	r0, r3
 8002926:	f7ff fa88 	bl	8001e3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <prvCheckTasksWaitingTermination+0x54>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1e5a      	subs	r2, r3, #1
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <prvCheckTasksWaitingTermination+0x54>)
 8002932:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <prvCheckTasksWaitingTermination+0x58>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <prvCheckTasksWaitingTermination+0x58>)
 800293c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800293e:	f000 f949 	bl	8002bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f80f 	bl	8002968 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <prvCheckTasksWaitingTermination+0x58>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e0      	bne.n	8002914 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200001b0 	.word	0x200001b0
 8002960:	200001dc 	.word	0x200001dc
 8002964:	200001c4 	.word	0x200001c4

08002968 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	334c      	adds	r3, #76	@ 0x4c
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fb73 	bl	8003060 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fa5e 	bl	8002e40 <vPortFree>
			vPortFree( pxTCB );
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0018      	movs	r0, r3
 8002988:	f000 fa5a 	bl	8002e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}

08002994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800299a:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <prvResetNextTaskUnblockTime+0x34>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <prvResetNextTaskUnblockTime+0x38>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	4252      	negs	r2, r2
 80029aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029ac:	e008      	b.n	80029c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <prvResetNextTaskUnblockTime+0x34>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <prvResetNextTaskUnblockTime+0x38>)
 80029be:	601a      	str	r2, [r3, #0]
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000194 	.word	0x20000194
 80029cc:	200001fc 	.word	0x200001fc

080029d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029da:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <prvAddCurrentTaskToDelayedList+0x90>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029e0:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <prvAddCurrentTaskToDelayedList+0x94>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7ff fa27 	bl	8001e3a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3301      	adds	r3, #1
 80029f0:	d10b      	bne.n	8002a0a <prvAddCurrentTaskToDelayedList+0x3a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <prvAddCurrentTaskToDelayedList+0x94>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002a68 <prvAddCurrentTaskToDelayedList+0x98>)
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7ff f9c1 	bl	8001d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a08:	e026      	b.n	8002a58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	18d3      	adds	r3, r2, r3
 8002a10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d209      	bcs.n	8002a36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	0010      	movs	r0, r2
 8002a30:	f7ff f9cd 	bl	8001dce <vListInsert>
}
 8002a34:	e010      	b.n	8002a58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a36:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <prvAddCurrentTaskToDelayedList+0x94>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	0019      	movs	r1, r3
 8002a42:	0010      	movs	r0, r2
 8002a44:	f7ff f9c3 	bl	8001dce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d202      	bcs.n	8002a58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002a52:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b004      	add	sp, #16
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200001e0 	.word	0x200001e0
 8002a64:	200000dc 	.word	0x200000dc
 8002a68:	200001c8 	.word	0x200001c8
 8002a6c:	20000198 	.word	0x20000198
 8002a70:	20000194 	.word	0x20000194
 8002a74:	200001fc 	.word	0x200001fc

08002a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3b04      	subs	r3, #4
 8002a88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2280      	movs	r2, #128	@ 0x80
 8002a8e:	0452      	lsls	r2, r2, #17
 8002a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3b04      	subs	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3b04      	subs	r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002aa4:	4a08      	ldr	r2, [pc, #32]	@ (8002ac8 <pxPortInitialiseStack+0x50>)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3b14      	subs	r3, #20
 8002aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3b20      	subs	r3, #32
 8002aba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002abc:	68fb      	ldr	r3, [r7, #12]
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	08002acd 	.word	0x08002acd

08002acc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <prvTaskExitError+0x2c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3301      	adds	r3, #1
 8002adc:	d002      	beq.n	8002ae4 <prvTaskExitError+0x18>
 8002ade:	b672      	cpsid	i
 8002ae0:	46c0      	nop			@ (mov r8, r8)
 8002ae2:	e7fd      	b.n	8002ae0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8002ae4:	b672      	cpsid	i
	while( ulDummy == 0 )
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0fc      	beq.n	8002ae8 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	2000000c 	.word	0x2000000c

08002afc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002b10:	4a0b      	ldr	r2, [pc, #44]	@ (8002b40 <pxCurrentTCBConst2>)
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	3020      	adds	r0, #32
 8002b18:	f380 8809 	msr	PSP, r0
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f380 8814 	msr	CONTROL, r0
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002b28:	46ae      	mov	lr, r5
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	bc04      	pop	{r2}
 8002b2e:	b662      	cpsie	i
 8002b30:	4718      	bx	r3
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	46c0      	nop			@ (mov r8, r8)

08002b40 <pxCurrentTCBConst2>:
 8002b40:	200000dc 	.word	0x200000dc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	46c0      	nop			@ (mov r8, r8)

08002b48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <xPortStartScheduler+0x40>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <xPortStartScheduler+0x40>)
 8002b52:	21ff      	movs	r1, #255	@ 0xff
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	430a      	orrs	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <xPortStartScheduler+0x40>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <xPortStartScheduler+0x40>)
 8002b60:	21ff      	movs	r1, #255	@ 0xff
 8002b62:	0609      	lsls	r1, r1, #24
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002b68:	f000 f898 	bl	8002c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <xPortStartScheduler+0x44>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8002b72:	f7ff ffcd 	bl	8002b10 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002b76:	f7ff fe1b 	bl	80027b0 <vTaskSwitchContext>
	prvTaskExitError();
 8002b7a:	f7ff ffa7 	bl	8002acc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	e000ed20 	.word	0xe000ed20
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b94:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <vPortYield+0x1c>)
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8002b9c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002ba0:	f3bf 8f6f 	isb	sy
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	e000ed04 	.word	0xe000ed04

08002bb0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002bb4:	b672      	cpsid	i
	uxCriticalNesting++;
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <vPortEnterCritical+0x20>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <vPortEnterCritical+0x20>)
 8002bbe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8002bc0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002bc4:	f3bf 8f6f 	isb	sy
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	2000000c 	.word	0x2000000c

08002bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <vPortExitCritical+0x2c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <vPortExitCritical+0x12>
 8002be0:	b672      	cpsid	i
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	e7fd      	b.n	8002be2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <vPortExitCritical+0x2c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1e5a      	subs	r2, r3, #1
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <vPortExitCritical+0x2c>)
 8002bee:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <vPortExitCritical+0x2c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d100      	bne.n	8002bfa <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 8002bf8:	b662      	cpsie	i
	}
}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000000c 	.word	0x2000000c

08002c04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8002c04:	f3ef 8010 	mrs	r0, PRIMASK
 8002c08:	b672      	cpsid	i
 8002c0a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	0018      	movs	r0, r3

08002c10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8002c10:	f380 8810 	msr	PRIMASK, r0
 8002c14:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8002c16:	46c0      	nop			@ (mov r8, r8)
	...

08002c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c20:	f3ef 8009 	mrs	r0, PSP
 8002c24:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <pxCurrentTCBConst>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	3820      	subs	r0, #32
 8002c2a:	6010      	str	r0, [r2, #0]
 8002c2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002c2e:	4644      	mov	r4, r8
 8002c30:	464d      	mov	r5, r9
 8002c32:	4656      	mov	r6, sl
 8002c34:	465f      	mov	r7, fp
 8002c36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8002c38:	b508      	push	{r3, lr}
 8002c3a:	b672      	cpsid	i
 8002c3c:	f7ff fdb8 	bl	80027b0 <vTaskSwitchContext>
 8002c40:	b662      	cpsie	i
 8002c42:	bc0c      	pop	{r2, r3}
 8002c44:	6811      	ldr	r1, [r2, #0]
 8002c46:	6808      	ldr	r0, [r1, #0]
 8002c48:	3010      	adds	r0, #16
 8002c4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002c4c:	46a0      	mov	r8, r4
 8002c4e:	46a9      	mov	r9, r5
 8002c50:	46b2      	mov	sl, r6
 8002c52:	46bb      	mov	fp, r7
 8002c54:	f380 8809 	msr	PSP, r0
 8002c58:	3820      	subs	r0, #32
 8002c5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8002c5c:	4718      	bx	r3
 8002c5e:	46c0      	nop			@ (mov r8, r8)

08002c60 <pxCurrentTCBConst>:
 8002c60:	200000dc 	.word	0x200000dc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46c0      	nop			@ (mov r8, r8)

08002c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c6e:	f7ff ffc9 	bl	8002c04 <ulSetInterruptMaskFromISR>
 8002c72:	0003      	movs	r3, r0
 8002c74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c76:	f7ff fceb 	bl	8002650 <xTaskIncrementTick>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d003      	beq.n	8002c86 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <SysTick_Handler+0x30>)
 8002c80:	2280      	movs	r2, #128	@ 0x80
 8002c82:	0552      	lsls	r2, r2, #21
 8002c84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff ffc1 	bl	8002c10 <vClearInterruptMaskFromISR>
}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b002      	add	sp, #8
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <vPortSetupTimerInterrupt+0x38>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <vPortSetupTimerInterrupt+0x3c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	22fa      	movs	r2, #250	@ 0xfa
 8002cb2:	0091      	lsls	r1, r2, #2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7fd fa27 	bl	8000108 <__udivsi3>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <vPortSetupTimerInterrupt+0x40>)
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002cc4:	4b02      	ldr	r3, [pc, #8]	@ (8002cd0 <vPortSetupTimerInterrupt+0x34>)
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	e000e010 	.word	0xe000e010
 8002cd4:	e000e018 	.word	0xe000e018
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	e000e014 	.word	0xe000e014

08002ce0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8002cec:	f7ff fc18 	bl	8002520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e28 <pvPortMalloc+0x148>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002cf8:	f000 f8f2 	bl	8002ee0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8002e2c <pvPortMalloc+0x14c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4013      	ands	r3, r2
 8002d04:	d000      	beq.n	8002d08 <pvPortMalloc+0x28>
 8002d06:	e080      	b.n	8002e0a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d013      	beq.n	8002d36 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8002d0e:	2208      	movs	r2, #8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2207      	movs	r2, #7
 8002d22:	4393      	bics	r3, r2
 8002d24:	3308      	adds	r3, #8
 8002d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d002      	beq.n	8002d36 <pvPortMalloc+0x56>
 8002d30:	b672      	cpsid	i
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	e7fd      	b.n	8002d32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d066      	beq.n	8002e0a <pvPortMalloc+0x12a>
 8002d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e30 <pvPortMalloc+0x150>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d861      	bhi.n	8002e0a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002d46:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <pvPortMalloc+0x154>)
 8002d48:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e34 <pvPortMalloc+0x154>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d50:	e004      	b.n	8002d5c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d903      	bls.n	8002d6e <pvPortMalloc+0x8e>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f1      	bne.n	8002d52 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <pvPortMalloc+0x148>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d048      	beq.n	8002e0a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	2308      	movs	r3, #8
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d917      	bls.n	8002dca <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	18d3      	adds	r3, r2, r3
 8002da0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2207      	movs	r2, #7
 8002da6:	4013      	ands	r3, r2
 8002da8:	d002      	beq.n	8002db0 <pvPortMalloc+0xd0>
 8002daa:	b672      	cpsid	i
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	e7fd      	b.n	8002dac <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	1ad2      	subs	r2, r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 f8eb 	bl	8002fa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002dca:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <pvPortMalloc+0x150>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	4b16      	ldr	r3, [pc, #88]	@ (8002e30 <pvPortMalloc+0x150>)
 8002dd6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dd8:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <pvPortMalloc+0x150>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <pvPortMalloc+0x158>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d203      	bcs.n	8002dec <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <pvPortMalloc+0x150>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b13      	ldr	r3, [pc, #76]	@ (8002e38 <pvPortMalloc+0x158>)
 8002dea:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <pvPortMalloc+0x14c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002e00:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <pvPortMalloc+0x15c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <pvPortMalloc+0x15c>)
 8002e08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e0a:	f7ff fb95 	bl	8002538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2207      	movs	r2, #7
 8002e12:	4013      	ands	r3, r2
 8002e14:	d002      	beq.n	8002e1c <pvPortMalloc+0x13c>
 8002e16:	b672      	cpsid	i
 8002e18:	46c0      	nop			@ (mov r8, r8)
 8002e1a:	e7fd      	b.n	8002e18 <pvPortMalloc+0x138>
	return pvReturn;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b006      	add	sp, #24
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	20000e10 	.word	0x20000e10
 8002e2c:	20000e24 	.word	0x20000e24
 8002e30:	20000e14 	.word	0x20000e14
 8002e34:	20000e08 	.word	0x20000e08
 8002e38:	20000e18 	.word	0x20000e18
 8002e3c:	20000e1c 	.word	0x20000e1c

08002e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d03c      	beq.n	8002ecc <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e52:	2308      	movs	r3, #8
 8002e54:	425b      	negs	r3, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <vPortFree+0x94>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d102      	bne.n	8002e72 <vPortFree+0x32>
 8002e6c:	b672      	cpsid	i
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	e7fd      	b.n	8002e6e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <vPortFree+0x40>
 8002e7a:	b672      	cpsid	i
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	e7fd      	b.n	8002e7c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <vPortFree+0x94>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d01f      	beq.n	8002ecc <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11b      	bne.n	8002ecc <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <vPortFree+0x94>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ea4:	f7ff fb3c 	bl	8002520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <vPortFree+0x98>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	18d2      	adds	r2, r2, r3
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <vPortFree+0x98>)
 8002eb4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f871 	bl	8002fa0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	@ (8002edc <vPortFree+0x9c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <vPortFree+0x9c>)
 8002ec6:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8002ec8:	f7ff fb36 	bl	8002538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000e24 	.word	0x20000e24
 8002ed8:	20000e14 	.word	0x20000e14
 8002edc:	20000e20 	.word	0x20000e20

08002ee0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ee6:	23c0      	movs	r3, #192	@ 0xc0
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002eec:	4b26      	ldr	r3, [pc, #152]	@ (8002f88 <prvHeapInit+0xa8>)
 8002eee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00c      	beq.n	8002f12 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3307      	adds	r3, #7
 8002efc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2207      	movs	r2, #7
 8002f02:	4393      	bics	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad2      	subs	r2, r2, r3
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <prvHeapInit+0xa8>)
 8002f0e:	18d3      	adds	r3, r2, r3
 8002f10:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <prvHeapInit+0xac>)
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <prvHeapInit+0xac>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2207      	movs	r2, #7
 8002f36:	4393      	bics	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <prvHeapInit+0xb0>)
 8002f3e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002f40:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <prvHeapInit+0xb0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <prvHeapInit+0xb0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	1ad2      	subs	r2, r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <prvHeapInit+0xb0>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <prvHeapInit+0xb4>)
 8002f6c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <prvHeapInit+0xb8>)
 8002f74:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <prvHeapInit+0xbc>)
 8002f78:	2280      	movs	r2, #128	@ 0x80
 8002f7a:	0612      	lsls	r2, r2, #24
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	20000208 	.word	0x20000208
 8002f8c:	20000e08 	.word	0x20000e08
 8002f90:	20000e10 	.word	0x20000e10
 8002f94:	20000e18 	.word	0x20000e18
 8002f98:	20000e14 	.word	0x20000e14
 8002f9c:	20000e24 	.word	0x20000e24

08002fa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fa8:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <prvInsertBlockIntoFreeList+0xa8>)
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e002      	b.n	8002fb4 <prvInsertBlockIntoFreeList+0x14>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d8f7      	bhi.n	8002fae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	18d3      	adds	r3, r2, r3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d108      	bne.n	8002fe2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	18d2      	adds	r2, r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	18d2      	adds	r2, r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d118      	bne.n	8003028 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b14      	ldr	r3, [pc, #80]	@ (800304c <prvInsertBlockIntoFreeList+0xac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d00d      	beq.n	800301e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	18d2      	adds	r2, r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e008      	b.n	8003030 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <prvInsertBlockIntoFreeList+0xac>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e003      	b.n	8003030 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d002      	beq.n	800303e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			@ (mov r8, r8)
 8003048:	20000e08 	.word	0x20000e08
 800304c:	20000e10 	.word	0x20000e10

08003050 <memset>:
 8003050:	0003      	movs	r3, r0
 8003052:	1882      	adds	r2, r0, r2
 8003054:	4293      	cmp	r3, r2
 8003056:	d100      	bne.n	800305a <memset+0xa>
 8003058:	4770      	bx	lr
 800305a:	7019      	strb	r1, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	e7f9      	b.n	8003054 <memset+0x4>

08003060 <_reclaim_reent>:
 8003060:	4b33      	ldr	r3, [pc, #204]	@ (8003130 <_reclaim_reent+0xd0>)
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0004      	movs	r4, r0
 8003068:	4283      	cmp	r3, r0
 800306a:	d05f      	beq.n	800312c <_reclaim_reent+0xcc>
 800306c:	69c3      	ldr	r3, [r0, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d027      	beq.n	80030c2 <_reclaim_reent+0x62>
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <_reclaim_reent+0x34>
 8003078:	2500      	movs	r5, #0
 800307a:	69e3      	ldr	r3, [r4, #28]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	5959      	ldr	r1, [r3, r5]
 8003080:	2900      	cmp	r1, #0
 8003082:	d118      	bne.n	80030b6 <_reclaim_reent+0x56>
 8003084:	3504      	adds	r5, #4
 8003086:	2d80      	cmp	r5, #128	@ 0x80
 8003088:	d1f7      	bne.n	800307a <_reclaim_reent+0x1a>
 800308a:	69e3      	ldr	r3, [r4, #28]
 800308c:	0020      	movs	r0, r4
 800308e:	68d9      	ldr	r1, [r3, #12]
 8003090:	f000 f876 	bl	8003180 <_free_r>
 8003094:	69e3      	ldr	r3, [r4, #28]
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	d002      	beq.n	80030a2 <_reclaim_reent+0x42>
 800309c:	0020      	movs	r0, r4
 800309e:	f000 f86f 	bl	8003180 <_free_r>
 80030a2:	69e3      	ldr	r3, [r4, #28]
 80030a4:	689d      	ldr	r5, [r3, #8]
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	d00b      	beq.n	80030c2 <_reclaim_reent+0x62>
 80030aa:	0029      	movs	r1, r5
 80030ac:	0020      	movs	r0, r4
 80030ae:	682d      	ldr	r5, [r5, #0]
 80030b0:	f000 f866 	bl	8003180 <_free_r>
 80030b4:	e7f7      	b.n	80030a6 <_reclaim_reent+0x46>
 80030b6:	680e      	ldr	r6, [r1, #0]
 80030b8:	0020      	movs	r0, r4
 80030ba:	f000 f861 	bl	8003180 <_free_r>
 80030be:	0031      	movs	r1, r6
 80030c0:	e7de      	b.n	8003080 <_reclaim_reent+0x20>
 80030c2:	6961      	ldr	r1, [r4, #20]
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d002      	beq.n	80030ce <_reclaim_reent+0x6e>
 80030c8:	0020      	movs	r0, r4
 80030ca:	f000 f859 	bl	8003180 <_free_r>
 80030ce:	69e1      	ldr	r1, [r4, #28]
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d002      	beq.n	80030da <_reclaim_reent+0x7a>
 80030d4:	0020      	movs	r0, r4
 80030d6:	f000 f853 	bl	8003180 <_free_r>
 80030da:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80030dc:	2900      	cmp	r1, #0
 80030de:	d002      	beq.n	80030e6 <_reclaim_reent+0x86>
 80030e0:	0020      	movs	r0, r4
 80030e2:	f000 f84d 	bl	8003180 <_free_r>
 80030e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030e8:	2900      	cmp	r1, #0
 80030ea:	d002      	beq.n	80030f2 <_reclaim_reent+0x92>
 80030ec:	0020      	movs	r0, r4
 80030ee:	f000 f847 	bl	8003180 <_free_r>
 80030f2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d002      	beq.n	80030fe <_reclaim_reent+0x9e>
 80030f8:	0020      	movs	r0, r4
 80030fa:	f000 f841 	bl	8003180 <_free_r>
 80030fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003100:	2900      	cmp	r1, #0
 8003102:	d002      	beq.n	800310a <_reclaim_reent+0xaa>
 8003104:	0020      	movs	r0, r4
 8003106:	f000 f83b 	bl	8003180 <_free_r>
 800310a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800310c:	2900      	cmp	r1, #0
 800310e:	d002      	beq.n	8003116 <_reclaim_reent+0xb6>
 8003110:	0020      	movs	r0, r4
 8003112:	f000 f835 	bl	8003180 <_free_r>
 8003116:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003118:	2900      	cmp	r1, #0
 800311a:	d002      	beq.n	8003122 <_reclaim_reent+0xc2>
 800311c:	0020      	movs	r0, r4
 800311e:	f000 f82f 	bl	8003180 <_free_r>
 8003122:	6a23      	ldr	r3, [r4, #32]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <_reclaim_reent+0xcc>
 8003128:	0020      	movs	r0, r4
 800312a:	4798      	blx	r3
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	20000010 	.word	0x20000010

08003134 <__libc_init_array>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	2600      	movs	r6, #0
 8003138:	4c0c      	ldr	r4, [pc, #48]	@ (800316c <__libc_init_array+0x38>)
 800313a:	4d0d      	ldr	r5, [pc, #52]	@ (8003170 <__libc_init_array+0x3c>)
 800313c:	1b64      	subs	r4, r4, r5
 800313e:	10a4      	asrs	r4, r4, #2
 8003140:	42a6      	cmp	r6, r4
 8003142:	d109      	bne.n	8003158 <__libc_init_array+0x24>
 8003144:	2600      	movs	r6, #0
 8003146:	f000 f875 	bl	8003234 <_init>
 800314a:	4c0a      	ldr	r4, [pc, #40]	@ (8003174 <__libc_init_array+0x40>)
 800314c:	4d0a      	ldr	r5, [pc, #40]	@ (8003178 <__libc_init_array+0x44>)
 800314e:	1b64      	subs	r4, r4, r5
 8003150:	10a4      	asrs	r4, r4, #2
 8003152:	42a6      	cmp	r6, r4
 8003154:	d105      	bne.n	8003162 <__libc_init_array+0x2e>
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	00b3      	lsls	r3, r6, #2
 800315a:	58eb      	ldr	r3, [r5, r3]
 800315c:	4798      	blx	r3
 800315e:	3601      	adds	r6, #1
 8003160:	e7ee      	b.n	8003140 <__libc_init_array+0xc>
 8003162:	00b3      	lsls	r3, r6, #2
 8003164:	58eb      	ldr	r3, [r5, r3]
 8003166:	4798      	blx	r3
 8003168:	3601      	adds	r6, #1
 800316a:	e7f2      	b.n	8003152 <__libc_init_array+0x1e>
 800316c:	08003314 	.word	0x08003314
 8003170:	08003314 	.word	0x08003314
 8003174:	08003318 	.word	0x08003318
 8003178:	08003314 	.word	0x08003314

0800317c <__retarget_lock_acquire_recursive>:
 800317c:	4770      	bx	lr

0800317e <__retarget_lock_release_recursive>:
 800317e:	4770      	bx	lr

08003180 <_free_r>:
 8003180:	b570      	push	{r4, r5, r6, lr}
 8003182:	0005      	movs	r5, r0
 8003184:	1e0c      	subs	r4, r1, #0
 8003186:	d010      	beq.n	80031aa <_free_r+0x2a>
 8003188:	3c04      	subs	r4, #4
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	da00      	bge.n	8003192 <_free_r+0x12>
 8003190:	18e4      	adds	r4, r4, r3
 8003192:	0028      	movs	r0, r5
 8003194:	f000 f83e 	bl	8003214 <__malloc_lock>
 8003198:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <_free_r+0x90>)
 800319a:	6813      	ldr	r3, [r2, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <_free_r+0x2c>
 80031a0:	6063      	str	r3, [r4, #4]
 80031a2:	6014      	str	r4, [r2, #0]
 80031a4:	0028      	movs	r0, r5
 80031a6:	f000 f83d 	bl	8003224 <__malloc_unlock>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	d908      	bls.n	80031c2 <_free_r+0x42>
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	1821      	adds	r1, r4, r0
 80031b4:	428b      	cmp	r3, r1
 80031b6:	d1f3      	bne.n	80031a0 <_free_r+0x20>
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	1809      	adds	r1, r1, r0
 80031be:	6021      	str	r1, [r4, #0]
 80031c0:	e7ee      	b.n	80031a0 <_free_r+0x20>
 80031c2:	001a      	movs	r2, r3
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <_free_r+0x4e>
 80031ca:	42a3      	cmp	r3, r4
 80031cc:	d9f9      	bls.n	80031c2 <_free_r+0x42>
 80031ce:	6811      	ldr	r1, [r2, #0]
 80031d0:	1850      	adds	r0, r2, r1
 80031d2:	42a0      	cmp	r0, r4
 80031d4:	d10b      	bne.n	80031ee <_free_r+0x6e>
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	1809      	adds	r1, r1, r0
 80031da:	1850      	adds	r0, r2, r1
 80031dc:	6011      	str	r1, [r2, #0]
 80031de:	4283      	cmp	r3, r0
 80031e0:	d1e0      	bne.n	80031a4 <_free_r+0x24>
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	1841      	adds	r1, r0, r1
 80031e8:	6011      	str	r1, [r2, #0]
 80031ea:	6053      	str	r3, [r2, #4]
 80031ec:	e7da      	b.n	80031a4 <_free_r+0x24>
 80031ee:	42a0      	cmp	r0, r4
 80031f0:	d902      	bls.n	80031f8 <_free_r+0x78>
 80031f2:	230c      	movs	r3, #12
 80031f4:	602b      	str	r3, [r5, #0]
 80031f6:	e7d5      	b.n	80031a4 <_free_r+0x24>
 80031f8:	6820      	ldr	r0, [r4, #0]
 80031fa:	1821      	adds	r1, r4, r0
 80031fc:	428b      	cmp	r3, r1
 80031fe:	d103      	bne.n	8003208 <_free_r+0x88>
 8003200:	6819      	ldr	r1, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	1809      	adds	r1, r1, r0
 8003206:	6021      	str	r1, [r4, #0]
 8003208:	6063      	str	r3, [r4, #4]
 800320a:	6054      	str	r4, [r2, #4]
 800320c:	e7ca      	b.n	80031a4 <_free_r+0x24>
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	20000f64 	.word	0x20000f64

08003214 <__malloc_lock>:
 8003214:	b510      	push	{r4, lr}
 8003216:	4802      	ldr	r0, [pc, #8]	@ (8003220 <__malloc_lock+0xc>)
 8003218:	f7ff ffb0 	bl	800317c <__retarget_lock_acquire_recursive>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	20000f60 	.word	0x20000f60

08003224 <__malloc_unlock>:
 8003224:	b510      	push	{r4, lr}
 8003226:	4802      	ldr	r0, [pc, #8]	@ (8003230 <__malloc_unlock+0xc>)
 8003228:	f7ff ffa9 	bl	800317e <__retarget_lock_release_recursive>
 800322c:	bd10      	pop	{r4, pc}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	20000f60 	.word	0x20000f60

08003234 <_init>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323a:	bc08      	pop	{r3}
 800323c:	469e      	mov	lr, r3
 800323e:	4770      	bx	lr

08003240 <_fini>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr
