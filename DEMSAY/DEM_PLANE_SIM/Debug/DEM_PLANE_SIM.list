
DEM_PLANE_SIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d30  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08007de8  08007de8  00008de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f30  08007f30  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007f30  08007f30  0000905c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007f30  08007f30  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f34  08007f34  00008f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007f38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  08007f94  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08007f94  00009354  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001381e  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002631  00000000  00000000  0001c8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0001eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016909  00000000  00000000  00020d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013590  00000000  00000000  00037697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eda1  00000000  00000000  0004ac27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d99c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004530  00000000  00000000  000d9a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000ddf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007dd0 	.word	0x08007dd0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08007dd0 	.word	0x08007dd0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 fc53 	bl	8001ca8 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f001 fb97 	bl	8001b40 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 fc45 	bl	8001ca8 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f001 fc3b 	bl	8001ca8 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 fbc1 	bl	8001bc8 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fbb7 	bl	8001bc8 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_cfrcmple>:
 8000468:	4684      	mov	ip, r0
 800046a:	0008      	movs	r0, r1
 800046c:	4661      	mov	r1, ip
 800046e:	e7ff      	b.n	8000470 <__aeabi_cfcmpeq>

08000470 <__aeabi_cfcmpeq>:
 8000470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000472:	f000 fa95 	bl	80009a0 <__lesf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	d401      	bmi.n	800047e <__aeabi_cfcmpeq+0xe>
 800047a:	2100      	movs	r1, #0
 800047c:	42c8      	cmn	r0, r1
 800047e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000480 <__aeabi_fcmpeq>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fa1d 	bl	80008c0 <__eqsf2>
 8000486:	4240      	negs	r0, r0
 8000488:	3001      	adds	r0, #1
 800048a:	bd10      	pop	{r4, pc}

0800048c <__aeabi_fcmplt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 fa87 	bl	80009a0 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	db01      	blt.n	800049a <__aeabi_fcmplt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_fcmple>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 fa7d 	bl	80009a0 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dd01      	ble.n	80004ae <__aeabi_fcmple+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__aeabi_fcmpgt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 fa2b 	bl	8000910 <__gesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dc01      	bgt.n	80004c2 <__aeabi_fcmpgt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)

080004c8 <__aeabi_fcmpge>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fa21 	bl	8000910 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	da01      	bge.n	80004d6 <__aeabi_fcmpge+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fadd>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	024b      	lsls	r3, r1, #9
 80004e0:	0a5a      	lsrs	r2, r3, #9
 80004e2:	4694      	mov	ip, r2
 80004e4:	004a      	lsls	r2, r1, #1
 80004e6:	0fc9      	lsrs	r1, r1, #31
 80004e8:	46ce      	mov	lr, r9
 80004ea:	4647      	mov	r7, r8
 80004ec:	4689      	mov	r9, r1
 80004ee:	0045      	lsls	r5, r0, #1
 80004f0:	0246      	lsls	r6, r0, #9
 80004f2:	0e2d      	lsrs	r5, r5, #24
 80004f4:	0e12      	lsrs	r2, r2, #24
 80004f6:	b580      	push	{r7, lr}
 80004f8:	0999      	lsrs	r1, r3, #6
 80004fa:	0a77      	lsrs	r7, r6, #9
 80004fc:	0fc4      	lsrs	r4, r0, #31
 80004fe:	09b6      	lsrs	r6, r6, #6
 8000500:	1aab      	subs	r3, r5, r2
 8000502:	454c      	cmp	r4, r9
 8000504:	d020      	beq.n	8000548 <__aeabi_fadd+0x6c>
 8000506:	2b00      	cmp	r3, #0
 8000508:	dd0c      	ble.n	8000524 <__aeabi_fadd+0x48>
 800050a:	2a00      	cmp	r2, #0
 800050c:	d134      	bne.n	8000578 <__aeabi_fadd+0x9c>
 800050e:	2900      	cmp	r1, #0
 8000510:	d02a      	beq.n	8000568 <__aeabi_fadd+0x8c>
 8000512:	1e5a      	subs	r2, r3, #1
 8000514:	2b01      	cmp	r3, #1
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x3e>
 8000518:	e08f      	b.n	800063a <__aeabi_fadd+0x15e>
 800051a:	2bff      	cmp	r3, #255	@ 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x44>
 800051e:	e0cd      	b.n	80006bc <__aeabi_fadd+0x1e0>
 8000520:	0013      	movs	r3, r2
 8000522:	e02f      	b.n	8000584 <__aeabi_fadd+0xa8>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d060      	beq.n	80005ea <__aeabi_fadd+0x10e>
 8000528:	1b53      	subs	r3, r2, r5
 800052a:	2d00      	cmp	r5, #0
 800052c:	d000      	beq.n	8000530 <__aeabi_fadd+0x54>
 800052e:	e0ee      	b.n	800070e <__aeabi_fadd+0x232>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_fadd+0x5a>
 8000534:	e13e      	b.n	80007b4 <__aeabi_fadd+0x2d8>
 8000536:	1e5c      	subs	r4, r3, #1
 8000538:	2b01      	cmp	r3, #1
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x62>
 800053c:	e16b      	b.n	8000816 <__aeabi_fadd+0x33a>
 800053e:	2bff      	cmp	r3, #255	@ 0xff
 8000540:	d100      	bne.n	8000544 <__aeabi_fadd+0x68>
 8000542:	e0b9      	b.n	80006b8 <__aeabi_fadd+0x1dc>
 8000544:	0023      	movs	r3, r4
 8000546:	e0e7      	b.n	8000718 <__aeabi_fadd+0x23c>
 8000548:	2b00      	cmp	r3, #0
 800054a:	dc00      	bgt.n	800054e <__aeabi_fadd+0x72>
 800054c:	e0a4      	b.n	8000698 <__aeabi_fadd+0x1bc>
 800054e:	2a00      	cmp	r2, #0
 8000550:	d069      	beq.n	8000626 <__aeabi_fadd+0x14a>
 8000552:	2dff      	cmp	r5, #255	@ 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x7c>
 8000556:	e0b1      	b.n	80006bc <__aeabi_fadd+0x1e0>
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	04d2      	lsls	r2, r2, #19
 800055c:	4311      	orrs	r1, r2
 800055e:	2b1b      	cmp	r3, #27
 8000560:	dc00      	bgt.n	8000564 <__aeabi_fadd+0x88>
 8000562:	e0e9      	b.n	8000738 <__aeabi_fadd+0x25c>
 8000564:	002b      	movs	r3, r5
 8000566:	3605      	adds	r6, #5
 8000568:	08f7      	lsrs	r7, r6, #3
 800056a:	2bff      	cmp	r3, #255	@ 0xff
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x94>
 800056e:	e0a5      	b.n	80006bc <__aeabi_fadd+0x1e0>
 8000570:	027a      	lsls	r2, r7, #9
 8000572:	0a52      	lsrs	r2, r2, #9
 8000574:	b2d8      	uxtb	r0, r3
 8000576:	e030      	b.n	80005da <__aeabi_fadd+0xfe>
 8000578:	2dff      	cmp	r5, #255	@ 0xff
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0xa2>
 800057c:	e09e      	b.n	80006bc <__aeabi_fadd+0x1e0>
 800057e:	2280      	movs	r2, #128	@ 0x80
 8000580:	04d2      	lsls	r2, r2, #19
 8000582:	4311      	orrs	r1, r2
 8000584:	2001      	movs	r0, #1
 8000586:	2b1b      	cmp	r3, #27
 8000588:	dc08      	bgt.n	800059c <__aeabi_fadd+0xc0>
 800058a:	0008      	movs	r0, r1
 800058c:	2220      	movs	r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	4099      	lsls	r1, r3
 8000594:	000b      	movs	r3, r1
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	4193      	sbcs	r3, r2
 800059a:	4318      	orrs	r0, r3
 800059c:	1a36      	subs	r6, r6, r0
 800059e:	0173      	lsls	r3, r6, #5
 80005a0:	d400      	bmi.n	80005a4 <__aeabi_fadd+0xc8>
 80005a2:	e071      	b.n	8000688 <__aeabi_fadd+0x1ac>
 80005a4:	01b6      	lsls	r6, r6, #6
 80005a6:	09b7      	lsrs	r7, r6, #6
 80005a8:	0038      	movs	r0, r7
 80005aa:	f002 fbc7 	bl	8002d3c <__clzsi2>
 80005ae:	003b      	movs	r3, r7
 80005b0:	3805      	subs	r0, #5
 80005b2:	4083      	lsls	r3, r0
 80005b4:	4285      	cmp	r5, r0
 80005b6:	dd4d      	ble.n	8000654 <__aeabi_fadd+0x178>
 80005b8:	4eb4      	ldr	r6, [pc, #720]	@ (800088c <__aeabi_fadd+0x3b0>)
 80005ba:	1a2d      	subs	r5, r5, r0
 80005bc:	401e      	ands	r6, r3
 80005be:	075a      	lsls	r2, r3, #29
 80005c0:	d068      	beq.n	8000694 <__aeabi_fadd+0x1b8>
 80005c2:	220f      	movs	r2, #15
 80005c4:	4013      	ands	r3, r2
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d064      	beq.n	8000694 <__aeabi_fadd+0x1b8>
 80005ca:	3604      	adds	r6, #4
 80005cc:	0173      	lsls	r3, r6, #5
 80005ce:	d561      	bpl.n	8000694 <__aeabi_fadd+0x1b8>
 80005d0:	1c68      	adds	r0, r5, #1
 80005d2:	2dfe      	cmp	r5, #254	@ 0xfe
 80005d4:	d154      	bne.n	8000680 <__aeabi_fadd+0x1a4>
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	2200      	movs	r2, #0
 80005da:	05c0      	lsls	r0, r0, #23
 80005dc:	4310      	orrs	r0, r2
 80005de:	07e4      	lsls	r4, r4, #31
 80005e0:	4320      	orrs	r0, r4
 80005e2:	bcc0      	pop	{r6, r7}
 80005e4:	46b9      	mov	r9, r7
 80005e6:	46b0      	mov	r8, r6
 80005e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ea:	22fe      	movs	r2, #254	@ 0xfe
 80005ec:	4690      	mov	r8, r2
 80005ee:	1c68      	adds	r0, r5, #1
 80005f0:	0002      	movs	r2, r0
 80005f2:	4640      	mov	r0, r8
 80005f4:	4210      	tst	r0, r2
 80005f6:	d16b      	bne.n	80006d0 <__aeabi_fadd+0x1f4>
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x122>
 80005fc:	e0dd      	b.n	80007ba <__aeabi_fadd+0x2de>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d100      	bne.n	8000604 <__aeabi_fadd+0x128>
 8000602:	e102      	b.n	800080a <__aeabi_fadd+0x32e>
 8000604:	2900      	cmp	r1, #0
 8000606:	d0b3      	beq.n	8000570 <__aeabi_fadd+0x94>
 8000608:	2280      	movs	r2, #128	@ 0x80
 800060a:	1a77      	subs	r7, r6, r1
 800060c:	04d2      	lsls	r2, r2, #19
 800060e:	4217      	tst	r7, r2
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x138>
 8000612:	e136      	b.n	8000882 <__aeabi_fadd+0x3a6>
 8000614:	464c      	mov	r4, r9
 8000616:	1b8e      	subs	r6, r1, r6
 8000618:	d061      	beq.n	80006de <__aeabi_fadd+0x202>
 800061a:	2001      	movs	r0, #1
 800061c:	4216      	tst	r6, r2
 800061e:	d130      	bne.n	8000682 <__aeabi_fadd+0x1a6>
 8000620:	2300      	movs	r3, #0
 8000622:	08f7      	lsrs	r7, r6, #3
 8000624:	e7a4      	b.n	8000570 <__aeabi_fadd+0x94>
 8000626:	2900      	cmp	r1, #0
 8000628:	d09e      	beq.n	8000568 <__aeabi_fadd+0x8c>
 800062a:	1e5a      	subs	r2, r3, #1
 800062c:	2b01      	cmp	r3, #1
 800062e:	d100      	bne.n	8000632 <__aeabi_fadd+0x156>
 8000630:	e0ca      	b.n	80007c8 <__aeabi_fadd+0x2ec>
 8000632:	2bff      	cmp	r3, #255	@ 0xff
 8000634:	d042      	beq.n	80006bc <__aeabi_fadd+0x1e0>
 8000636:	0013      	movs	r3, r2
 8000638:	e791      	b.n	800055e <__aeabi_fadd+0x82>
 800063a:	1a71      	subs	r1, r6, r1
 800063c:	014b      	lsls	r3, r1, #5
 800063e:	d400      	bmi.n	8000642 <__aeabi_fadd+0x166>
 8000640:	e0d1      	b.n	80007e6 <__aeabi_fadd+0x30a>
 8000642:	018f      	lsls	r7, r1, #6
 8000644:	09bf      	lsrs	r7, r7, #6
 8000646:	0038      	movs	r0, r7
 8000648:	f002 fb78 	bl	8002d3c <__clzsi2>
 800064c:	003b      	movs	r3, r7
 800064e:	3805      	subs	r0, #5
 8000650:	4083      	lsls	r3, r0
 8000652:	2501      	movs	r5, #1
 8000654:	2220      	movs	r2, #32
 8000656:	1b40      	subs	r0, r0, r5
 8000658:	3001      	adds	r0, #1
 800065a:	1a12      	subs	r2, r2, r0
 800065c:	001e      	movs	r6, r3
 800065e:	4093      	lsls	r3, r2
 8000660:	40c6      	lsrs	r6, r0
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	4193      	sbcs	r3, r2
 8000666:	431e      	orrs	r6, r3
 8000668:	d039      	beq.n	80006de <__aeabi_fadd+0x202>
 800066a:	0773      	lsls	r3, r6, #29
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x194>
 800066e:	e11b      	b.n	80008a8 <__aeabi_fadd+0x3cc>
 8000670:	230f      	movs	r3, #15
 8000672:	2500      	movs	r5, #0
 8000674:	4033      	ands	r3, r6
 8000676:	2b04      	cmp	r3, #4
 8000678:	d1a7      	bne.n	80005ca <__aeabi_fadd+0xee>
 800067a:	2001      	movs	r0, #1
 800067c:	0172      	lsls	r2, r6, #5
 800067e:	d57c      	bpl.n	800077a <__aeabi_fadd+0x29e>
 8000680:	b2c0      	uxtb	r0, r0
 8000682:	01b2      	lsls	r2, r6, #6
 8000684:	0a52      	lsrs	r2, r2, #9
 8000686:	e7a8      	b.n	80005da <__aeabi_fadd+0xfe>
 8000688:	0773      	lsls	r3, r6, #29
 800068a:	d003      	beq.n	8000694 <__aeabi_fadd+0x1b8>
 800068c:	230f      	movs	r3, #15
 800068e:	4033      	ands	r3, r6
 8000690:	2b04      	cmp	r3, #4
 8000692:	d19a      	bne.n	80005ca <__aeabi_fadd+0xee>
 8000694:	002b      	movs	r3, r5
 8000696:	e767      	b.n	8000568 <__aeabi_fadd+0x8c>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d023      	beq.n	80006e4 <__aeabi_fadd+0x208>
 800069c:	1b53      	subs	r3, r2, r5
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d17b      	bne.n	800079a <__aeabi_fadd+0x2be>
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x1cc>
 80006a6:	e086      	b.n	80007b6 <__aeabi_fadd+0x2da>
 80006a8:	1e5d      	subs	r5, r3, #1
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_fadd+0x1d4>
 80006ae:	e08b      	b.n	80007c8 <__aeabi_fadd+0x2ec>
 80006b0:	2bff      	cmp	r3, #255	@ 0xff
 80006b2:	d002      	beq.n	80006ba <__aeabi_fadd+0x1de>
 80006b4:	002b      	movs	r3, r5
 80006b6:	e075      	b.n	80007a4 <__aeabi_fadd+0x2c8>
 80006b8:	464c      	mov	r4, r9
 80006ba:	4667      	mov	r7, ip
 80006bc:	2f00      	cmp	r7, #0
 80006be:	d100      	bne.n	80006c2 <__aeabi_fadd+0x1e6>
 80006c0:	e789      	b.n	80005d6 <__aeabi_fadd+0xfa>
 80006c2:	2280      	movs	r2, #128	@ 0x80
 80006c4:	03d2      	lsls	r2, r2, #15
 80006c6:	433a      	orrs	r2, r7
 80006c8:	0252      	lsls	r2, r2, #9
 80006ca:	20ff      	movs	r0, #255	@ 0xff
 80006cc:	0a52      	lsrs	r2, r2, #9
 80006ce:	e784      	b.n	80005da <__aeabi_fadd+0xfe>
 80006d0:	1a77      	subs	r7, r6, r1
 80006d2:	017b      	lsls	r3, r7, #5
 80006d4:	d46b      	bmi.n	80007ae <__aeabi_fadd+0x2d2>
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x200>
 80006da:	e765      	b.n	80005a8 <__aeabi_fadd+0xcc>
 80006dc:	2400      	movs	r4, #0
 80006de:	2000      	movs	r0, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	e77a      	b.n	80005da <__aeabi_fadd+0xfe>
 80006e4:	22fe      	movs	r2, #254	@ 0xfe
 80006e6:	1c6b      	adds	r3, r5, #1
 80006e8:	421a      	tst	r2, r3
 80006ea:	d149      	bne.n	8000780 <__aeabi_fadd+0x2a4>
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0x216>
 80006f0:	e09f      	b.n	8000832 <__aeabi_fadd+0x356>
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x21c>
 80006f6:	e0ba      	b.n	800086e <__aeabi_fadd+0x392>
 80006f8:	2900      	cmp	r1, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x222>
 80006fc:	e0cf      	b.n	800089e <__aeabi_fadd+0x3c2>
 80006fe:	1872      	adds	r2, r6, r1
 8000700:	0153      	lsls	r3, r2, #5
 8000702:	d400      	bmi.n	8000706 <__aeabi_fadd+0x22a>
 8000704:	e0cd      	b.n	80008a2 <__aeabi_fadd+0x3c6>
 8000706:	0192      	lsls	r2, r2, #6
 8000708:	2001      	movs	r0, #1
 800070a:	0a52      	lsrs	r2, r2, #9
 800070c:	e765      	b.n	80005da <__aeabi_fadd+0xfe>
 800070e:	2aff      	cmp	r2, #255	@ 0xff
 8000710:	d0d2      	beq.n	80006b8 <__aeabi_fadd+0x1dc>
 8000712:	2080      	movs	r0, #128	@ 0x80
 8000714:	04c0      	lsls	r0, r0, #19
 8000716:	4306      	orrs	r6, r0
 8000718:	2001      	movs	r0, #1
 800071a:	2b1b      	cmp	r3, #27
 800071c:	dc08      	bgt.n	8000730 <__aeabi_fadd+0x254>
 800071e:	0030      	movs	r0, r6
 8000720:	2420      	movs	r4, #32
 8000722:	40d8      	lsrs	r0, r3
 8000724:	1ae3      	subs	r3, r4, r3
 8000726:	409e      	lsls	r6, r3
 8000728:	0033      	movs	r3, r6
 800072a:	1e5c      	subs	r4, r3, #1
 800072c:	41a3      	sbcs	r3, r4
 800072e:	4318      	orrs	r0, r3
 8000730:	464c      	mov	r4, r9
 8000732:	0015      	movs	r5, r2
 8000734:	1a0e      	subs	r6, r1, r0
 8000736:	e732      	b.n	800059e <__aeabi_fadd+0xc2>
 8000738:	0008      	movs	r0, r1
 800073a:	2220      	movs	r2, #32
 800073c:	40d8      	lsrs	r0, r3
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	4099      	lsls	r1, r3
 8000742:	000b      	movs	r3, r1
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	4193      	sbcs	r3, r2
 8000748:	4303      	orrs	r3, r0
 800074a:	18f6      	adds	r6, r6, r3
 800074c:	0173      	lsls	r3, r6, #5
 800074e:	d59b      	bpl.n	8000688 <__aeabi_fadd+0x1ac>
 8000750:	3501      	adds	r5, #1
 8000752:	2dff      	cmp	r5, #255	@ 0xff
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x27c>
 8000756:	e73e      	b.n	80005d6 <__aeabi_fadd+0xfa>
 8000758:	2301      	movs	r3, #1
 800075a:	494d      	ldr	r1, [pc, #308]	@ (8000890 <__aeabi_fadd+0x3b4>)
 800075c:	0872      	lsrs	r2, r6, #1
 800075e:	4033      	ands	r3, r6
 8000760:	400a      	ands	r2, r1
 8000762:	431a      	orrs	r2, r3
 8000764:	0016      	movs	r6, r2
 8000766:	0753      	lsls	r3, r2, #29
 8000768:	d004      	beq.n	8000774 <__aeabi_fadd+0x298>
 800076a:	230f      	movs	r3, #15
 800076c:	4013      	ands	r3, r2
 800076e:	2b04      	cmp	r3, #4
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x298>
 8000772:	e72a      	b.n	80005ca <__aeabi_fadd+0xee>
 8000774:	0173      	lsls	r3, r6, #5
 8000776:	d500      	bpl.n	800077a <__aeabi_fadd+0x29e>
 8000778:	e72a      	b.n	80005d0 <__aeabi_fadd+0xf4>
 800077a:	002b      	movs	r3, r5
 800077c:	08f7      	lsrs	r7, r6, #3
 800077e:	e6f7      	b.n	8000570 <__aeabi_fadd+0x94>
 8000780:	2bff      	cmp	r3, #255	@ 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x2aa>
 8000784:	e727      	b.n	80005d6 <__aeabi_fadd+0xfa>
 8000786:	1871      	adds	r1, r6, r1
 8000788:	0849      	lsrs	r1, r1, #1
 800078a:	074a      	lsls	r2, r1, #29
 800078c:	d02f      	beq.n	80007ee <__aeabi_fadd+0x312>
 800078e:	220f      	movs	r2, #15
 8000790:	400a      	ands	r2, r1
 8000792:	2a04      	cmp	r2, #4
 8000794:	d02b      	beq.n	80007ee <__aeabi_fadd+0x312>
 8000796:	1d0e      	adds	r6, r1, #4
 8000798:	e6e6      	b.n	8000568 <__aeabi_fadd+0x8c>
 800079a:	2aff      	cmp	r2, #255	@ 0xff
 800079c:	d08d      	beq.n	80006ba <__aeabi_fadd+0x1de>
 800079e:	2080      	movs	r0, #128	@ 0x80
 80007a0:	04c0      	lsls	r0, r0, #19
 80007a2:	4306      	orrs	r6, r0
 80007a4:	2b1b      	cmp	r3, #27
 80007a6:	dd24      	ble.n	80007f2 <__aeabi_fadd+0x316>
 80007a8:	0013      	movs	r3, r2
 80007aa:	1d4e      	adds	r6, r1, #5
 80007ac:	e6dc      	b.n	8000568 <__aeabi_fadd+0x8c>
 80007ae:	464c      	mov	r4, r9
 80007b0:	1b8f      	subs	r7, r1, r6
 80007b2:	e6f9      	b.n	80005a8 <__aeabi_fadd+0xcc>
 80007b4:	464c      	mov	r4, r9
 80007b6:	000e      	movs	r6, r1
 80007b8:	e6d6      	b.n	8000568 <__aeabi_fadd+0x8c>
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d149      	bne.n	8000852 <__aeabi_fadd+0x376>
 80007be:	2900      	cmp	r1, #0
 80007c0:	d068      	beq.n	8000894 <__aeabi_fadd+0x3b8>
 80007c2:	4667      	mov	r7, ip
 80007c4:	464c      	mov	r4, r9
 80007c6:	e77c      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 80007c8:	1870      	adds	r0, r6, r1
 80007ca:	0143      	lsls	r3, r0, #5
 80007cc:	d574      	bpl.n	80008b8 <__aeabi_fadd+0x3dc>
 80007ce:	4930      	ldr	r1, [pc, #192]	@ (8000890 <__aeabi_fadd+0x3b4>)
 80007d0:	0840      	lsrs	r0, r0, #1
 80007d2:	4001      	ands	r1, r0
 80007d4:	0743      	lsls	r3, r0, #29
 80007d6:	d009      	beq.n	80007ec <__aeabi_fadd+0x310>
 80007d8:	230f      	movs	r3, #15
 80007da:	4003      	ands	r3, r0
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d005      	beq.n	80007ec <__aeabi_fadd+0x310>
 80007e0:	2302      	movs	r3, #2
 80007e2:	1d0e      	adds	r6, r1, #4
 80007e4:	e6c0      	b.n	8000568 <__aeabi_fadd+0x8c>
 80007e6:	2301      	movs	r3, #1
 80007e8:	08cf      	lsrs	r7, r1, #3
 80007ea:	e6c1      	b.n	8000570 <__aeabi_fadd+0x94>
 80007ec:	2302      	movs	r3, #2
 80007ee:	08cf      	lsrs	r7, r1, #3
 80007f0:	e6be      	b.n	8000570 <__aeabi_fadd+0x94>
 80007f2:	2520      	movs	r5, #32
 80007f4:	0030      	movs	r0, r6
 80007f6:	40d8      	lsrs	r0, r3
 80007f8:	1aeb      	subs	r3, r5, r3
 80007fa:	409e      	lsls	r6, r3
 80007fc:	0033      	movs	r3, r6
 80007fe:	1e5d      	subs	r5, r3, #1
 8000800:	41ab      	sbcs	r3, r5
 8000802:	4303      	orrs	r3, r0
 8000804:	0015      	movs	r5, r2
 8000806:	185e      	adds	r6, r3, r1
 8000808:	e7a0      	b.n	800074c <__aeabi_fadd+0x270>
 800080a:	2900      	cmp	r1, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x334>
 800080e:	e765      	b.n	80006dc <__aeabi_fadd+0x200>
 8000810:	464c      	mov	r4, r9
 8000812:	4667      	mov	r7, ip
 8000814:	e6ac      	b.n	8000570 <__aeabi_fadd+0x94>
 8000816:	1b8f      	subs	r7, r1, r6
 8000818:	017b      	lsls	r3, r7, #5
 800081a:	d52e      	bpl.n	800087a <__aeabi_fadd+0x39e>
 800081c:	01bf      	lsls	r7, r7, #6
 800081e:	09bf      	lsrs	r7, r7, #6
 8000820:	0038      	movs	r0, r7
 8000822:	f002 fa8b 	bl	8002d3c <__clzsi2>
 8000826:	003b      	movs	r3, r7
 8000828:	3805      	subs	r0, #5
 800082a:	4083      	lsls	r3, r0
 800082c:	464c      	mov	r4, r9
 800082e:	3501      	adds	r5, #1
 8000830:	e710      	b.n	8000654 <__aeabi_fadd+0x178>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x35c>
 8000836:	e740      	b.n	80006ba <__aeabi_fadd+0x1de>
 8000838:	2900      	cmp	r1, #0
 800083a:	d100      	bne.n	800083e <__aeabi_fadd+0x362>
 800083c:	e741      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 800083e:	2380      	movs	r3, #128	@ 0x80
 8000840:	03db      	lsls	r3, r3, #15
 8000842:	429f      	cmp	r7, r3
 8000844:	d200      	bcs.n	8000848 <__aeabi_fadd+0x36c>
 8000846:	e73c      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 8000848:	459c      	cmp	ip, r3
 800084a:	d300      	bcc.n	800084e <__aeabi_fadd+0x372>
 800084c:	e739      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 800084e:	4667      	mov	r7, ip
 8000850:	e737      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 8000852:	2900      	cmp	r1, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x37c>
 8000856:	e734      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	03db      	lsls	r3, r3, #15
 800085c:	429f      	cmp	r7, r3
 800085e:	d200      	bcs.n	8000862 <__aeabi_fadd+0x386>
 8000860:	e72f      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 8000862:	459c      	cmp	ip, r3
 8000864:	d300      	bcc.n	8000868 <__aeabi_fadd+0x38c>
 8000866:	e72c      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 8000868:	464c      	mov	r4, r9
 800086a:	4667      	mov	r7, ip
 800086c:	e729      	b.n	80006c2 <__aeabi_fadd+0x1e6>
 800086e:	2900      	cmp	r1, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x398>
 8000872:	e734      	b.n	80006de <__aeabi_fadd+0x202>
 8000874:	2300      	movs	r3, #0
 8000876:	08cf      	lsrs	r7, r1, #3
 8000878:	e67a      	b.n	8000570 <__aeabi_fadd+0x94>
 800087a:	464c      	mov	r4, r9
 800087c:	2301      	movs	r3, #1
 800087e:	08ff      	lsrs	r7, r7, #3
 8000880:	e676      	b.n	8000570 <__aeabi_fadd+0x94>
 8000882:	2f00      	cmp	r7, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x3ac>
 8000886:	e729      	b.n	80006dc <__aeabi_fadd+0x200>
 8000888:	08ff      	lsrs	r7, r7, #3
 800088a:	e671      	b.n	8000570 <__aeabi_fadd+0x94>
 800088c:	fbffffff 	.word	0xfbffffff
 8000890:	7dffffff 	.word	0x7dffffff
 8000894:	2280      	movs	r2, #128	@ 0x80
 8000896:	2400      	movs	r4, #0
 8000898:	20ff      	movs	r0, #255	@ 0xff
 800089a:	03d2      	lsls	r2, r2, #15
 800089c:	e69d      	b.n	80005da <__aeabi_fadd+0xfe>
 800089e:	2300      	movs	r3, #0
 80008a0:	e666      	b.n	8000570 <__aeabi_fadd+0x94>
 80008a2:	2300      	movs	r3, #0
 80008a4:	08d7      	lsrs	r7, r2, #3
 80008a6:	e663      	b.n	8000570 <__aeabi_fadd+0x94>
 80008a8:	2001      	movs	r0, #1
 80008aa:	0172      	lsls	r2, r6, #5
 80008ac:	d500      	bpl.n	80008b0 <__aeabi_fadd+0x3d4>
 80008ae:	e6e7      	b.n	8000680 <__aeabi_fadd+0x1a4>
 80008b0:	0031      	movs	r1, r6
 80008b2:	2300      	movs	r3, #0
 80008b4:	08cf      	lsrs	r7, r1, #3
 80008b6:	e65b      	b.n	8000570 <__aeabi_fadd+0x94>
 80008b8:	2301      	movs	r3, #1
 80008ba:	08c7      	lsrs	r7, r0, #3
 80008bc:	e658      	b.n	8000570 <__aeabi_fadd+0x94>
 80008be:	46c0      	nop			@ (mov r8, r8)

080008c0 <__eqsf2>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	0042      	lsls	r2, r0, #1
 80008c4:	024e      	lsls	r6, r1, #9
 80008c6:	004c      	lsls	r4, r1, #1
 80008c8:	0245      	lsls	r5, r0, #9
 80008ca:	0a6d      	lsrs	r5, r5, #9
 80008cc:	0e12      	lsrs	r2, r2, #24
 80008ce:	0fc3      	lsrs	r3, r0, #31
 80008d0:	0a76      	lsrs	r6, r6, #9
 80008d2:	0e24      	lsrs	r4, r4, #24
 80008d4:	0fc9      	lsrs	r1, r1, #31
 80008d6:	2aff      	cmp	r2, #255	@ 0xff
 80008d8:	d010      	beq.n	80008fc <__eqsf2+0x3c>
 80008da:	2cff      	cmp	r4, #255	@ 0xff
 80008dc:	d00c      	beq.n	80008f8 <__eqsf2+0x38>
 80008de:	2001      	movs	r0, #1
 80008e0:	42a2      	cmp	r2, r4
 80008e2:	d10a      	bne.n	80008fa <__eqsf2+0x3a>
 80008e4:	42b5      	cmp	r5, r6
 80008e6:	d108      	bne.n	80008fa <__eqsf2+0x3a>
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d00f      	beq.n	800090c <__eqsf2+0x4c>
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d104      	bne.n	80008fa <__eqsf2+0x3a>
 80008f0:	0028      	movs	r0, r5
 80008f2:	1e43      	subs	r3, r0, #1
 80008f4:	4198      	sbcs	r0, r3
 80008f6:	e000      	b.n	80008fa <__eqsf2+0x3a>
 80008f8:	2001      	movs	r0, #1
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	2001      	movs	r0, #1
 80008fe:	2cff      	cmp	r4, #255	@ 0xff
 8000900:	d1fb      	bne.n	80008fa <__eqsf2+0x3a>
 8000902:	4335      	orrs	r5, r6
 8000904:	d1f9      	bne.n	80008fa <__eqsf2+0x3a>
 8000906:	404b      	eors	r3, r1
 8000908:	0018      	movs	r0, r3
 800090a:	e7f6      	b.n	80008fa <__eqsf2+0x3a>
 800090c:	2000      	movs	r0, #0
 800090e:	e7f4      	b.n	80008fa <__eqsf2+0x3a>

08000910 <__gesf2>:
 8000910:	b530      	push	{r4, r5, lr}
 8000912:	0042      	lsls	r2, r0, #1
 8000914:	0244      	lsls	r4, r0, #9
 8000916:	024d      	lsls	r5, r1, #9
 8000918:	0fc3      	lsrs	r3, r0, #31
 800091a:	0048      	lsls	r0, r1, #1
 800091c:	0a64      	lsrs	r4, r4, #9
 800091e:	0e12      	lsrs	r2, r2, #24
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	0e00      	lsrs	r0, r0, #24
 8000924:	0fc9      	lsrs	r1, r1, #31
 8000926:	2aff      	cmp	r2, #255	@ 0xff
 8000928:	d018      	beq.n	800095c <__gesf2+0x4c>
 800092a:	28ff      	cmp	r0, #255	@ 0xff
 800092c:	d00a      	beq.n	8000944 <__gesf2+0x34>
 800092e:	2a00      	cmp	r2, #0
 8000930:	d11e      	bne.n	8000970 <__gesf2+0x60>
 8000932:	2800      	cmp	r0, #0
 8000934:	d10a      	bne.n	800094c <__gesf2+0x3c>
 8000936:	2d00      	cmp	r5, #0
 8000938:	d029      	beq.n	800098e <__gesf2+0x7e>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d12d      	bne.n	800099a <__gesf2+0x8a>
 800093e:	0048      	lsls	r0, r1, #1
 8000940:	3801      	subs	r0, #1
 8000942:	bd30      	pop	{r4, r5, pc}
 8000944:	2d00      	cmp	r5, #0
 8000946:	d125      	bne.n	8000994 <__gesf2+0x84>
 8000948:	2a00      	cmp	r2, #0
 800094a:	d101      	bne.n	8000950 <__gesf2+0x40>
 800094c:	2c00      	cmp	r4, #0
 800094e:	d0f6      	beq.n	800093e <__gesf2+0x2e>
 8000950:	428b      	cmp	r3, r1
 8000952:	d019      	beq.n	8000988 <__gesf2+0x78>
 8000954:	2001      	movs	r0, #1
 8000956:	425b      	negs	r3, r3
 8000958:	4318      	orrs	r0, r3
 800095a:	e7f2      	b.n	8000942 <__gesf2+0x32>
 800095c:	2c00      	cmp	r4, #0
 800095e:	d119      	bne.n	8000994 <__gesf2+0x84>
 8000960:	28ff      	cmp	r0, #255	@ 0xff
 8000962:	d1f7      	bne.n	8000954 <__gesf2+0x44>
 8000964:	2d00      	cmp	r5, #0
 8000966:	d115      	bne.n	8000994 <__gesf2+0x84>
 8000968:	2000      	movs	r0, #0
 800096a:	428b      	cmp	r3, r1
 800096c:	d1f2      	bne.n	8000954 <__gesf2+0x44>
 800096e:	e7e8      	b.n	8000942 <__gesf2+0x32>
 8000970:	2800      	cmp	r0, #0
 8000972:	d0ef      	beq.n	8000954 <__gesf2+0x44>
 8000974:	428b      	cmp	r3, r1
 8000976:	d1ed      	bne.n	8000954 <__gesf2+0x44>
 8000978:	4282      	cmp	r2, r0
 800097a:	dceb      	bgt.n	8000954 <__gesf2+0x44>
 800097c:	db04      	blt.n	8000988 <__gesf2+0x78>
 800097e:	42ac      	cmp	r4, r5
 8000980:	d8e8      	bhi.n	8000954 <__gesf2+0x44>
 8000982:	2000      	movs	r0, #0
 8000984:	42ac      	cmp	r4, r5
 8000986:	d2dc      	bcs.n	8000942 <__gesf2+0x32>
 8000988:	0058      	lsls	r0, r3, #1
 800098a:	3801      	subs	r0, #1
 800098c:	e7d9      	b.n	8000942 <__gesf2+0x32>
 800098e:	2c00      	cmp	r4, #0
 8000990:	d0d7      	beq.n	8000942 <__gesf2+0x32>
 8000992:	e7df      	b.n	8000954 <__gesf2+0x44>
 8000994:	2002      	movs	r0, #2
 8000996:	4240      	negs	r0, r0
 8000998:	e7d3      	b.n	8000942 <__gesf2+0x32>
 800099a:	428b      	cmp	r3, r1
 800099c:	d1da      	bne.n	8000954 <__gesf2+0x44>
 800099e:	e7ee      	b.n	800097e <__gesf2+0x6e>

080009a0 <__lesf2>:
 80009a0:	b530      	push	{r4, r5, lr}
 80009a2:	0042      	lsls	r2, r0, #1
 80009a4:	0244      	lsls	r4, r0, #9
 80009a6:	024d      	lsls	r5, r1, #9
 80009a8:	0fc3      	lsrs	r3, r0, #31
 80009aa:	0048      	lsls	r0, r1, #1
 80009ac:	0a64      	lsrs	r4, r4, #9
 80009ae:	0e12      	lsrs	r2, r2, #24
 80009b0:	0a6d      	lsrs	r5, r5, #9
 80009b2:	0e00      	lsrs	r0, r0, #24
 80009b4:	0fc9      	lsrs	r1, r1, #31
 80009b6:	2aff      	cmp	r2, #255	@ 0xff
 80009b8:	d017      	beq.n	80009ea <__lesf2+0x4a>
 80009ba:	28ff      	cmp	r0, #255	@ 0xff
 80009bc:	d00a      	beq.n	80009d4 <__lesf2+0x34>
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d11b      	bne.n	80009fa <__lesf2+0x5a>
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d10a      	bne.n	80009dc <__lesf2+0x3c>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	d01d      	beq.n	8000a06 <__lesf2+0x66>
 80009ca:	2c00      	cmp	r4, #0
 80009cc:	d12d      	bne.n	8000a2a <__lesf2+0x8a>
 80009ce:	0048      	lsls	r0, r1, #1
 80009d0:	3801      	subs	r0, #1
 80009d2:	e011      	b.n	80009f8 <__lesf2+0x58>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d10e      	bne.n	80009f6 <__lesf2+0x56>
 80009d8:	2a00      	cmp	r2, #0
 80009da:	d101      	bne.n	80009e0 <__lesf2+0x40>
 80009dc:	2c00      	cmp	r4, #0
 80009de:	d0f6      	beq.n	80009ce <__lesf2+0x2e>
 80009e0:	428b      	cmp	r3, r1
 80009e2:	d10c      	bne.n	80009fe <__lesf2+0x5e>
 80009e4:	0058      	lsls	r0, r3, #1
 80009e6:	3801      	subs	r0, #1
 80009e8:	e006      	b.n	80009f8 <__lesf2+0x58>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d103      	bne.n	80009f6 <__lesf2+0x56>
 80009ee:	28ff      	cmp	r0, #255	@ 0xff
 80009f0:	d105      	bne.n	80009fe <__lesf2+0x5e>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d015      	beq.n	8000a22 <__lesf2+0x82>
 80009f6:	2002      	movs	r0, #2
 80009f8:	bd30      	pop	{r4, r5, pc}
 80009fa:	2800      	cmp	r0, #0
 80009fc:	d106      	bne.n	8000a0c <__lesf2+0x6c>
 80009fe:	2001      	movs	r0, #1
 8000a00:	425b      	negs	r3, r3
 8000a02:	4318      	orrs	r0, r3
 8000a04:	e7f8      	b.n	80009f8 <__lesf2+0x58>
 8000a06:	2c00      	cmp	r4, #0
 8000a08:	d0f6      	beq.n	80009f8 <__lesf2+0x58>
 8000a0a:	e7f8      	b.n	80009fe <__lesf2+0x5e>
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d1f6      	bne.n	80009fe <__lesf2+0x5e>
 8000a10:	4282      	cmp	r2, r0
 8000a12:	dcf4      	bgt.n	80009fe <__lesf2+0x5e>
 8000a14:	dbe6      	blt.n	80009e4 <__lesf2+0x44>
 8000a16:	42ac      	cmp	r4, r5
 8000a18:	d8f1      	bhi.n	80009fe <__lesf2+0x5e>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	42ac      	cmp	r4, r5
 8000a1e:	d2eb      	bcs.n	80009f8 <__lesf2+0x58>
 8000a20:	e7e0      	b.n	80009e4 <__lesf2+0x44>
 8000a22:	2000      	movs	r0, #0
 8000a24:	428b      	cmp	r3, r1
 8000a26:	d1ea      	bne.n	80009fe <__lesf2+0x5e>
 8000a28:	e7e6      	b.n	80009f8 <__lesf2+0x58>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d1e7      	bne.n	80009fe <__lesf2+0x5e>
 8000a2e:	e7f2      	b.n	8000a16 <__lesf2+0x76>

08000a30 <__aeabi_fmul>:
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	464f      	mov	r7, r9
 8000a34:	4646      	mov	r6, r8
 8000a36:	46d6      	mov	lr, sl
 8000a38:	0044      	lsls	r4, r0, #1
 8000a3a:	b5c0      	push	{r6, r7, lr}
 8000a3c:	0246      	lsls	r6, r0, #9
 8000a3e:	1c0f      	adds	r7, r1, #0
 8000a40:	0a76      	lsrs	r6, r6, #9
 8000a42:	0e24      	lsrs	r4, r4, #24
 8000a44:	0fc5      	lsrs	r5, r0, #31
 8000a46:	2c00      	cmp	r4, #0
 8000a48:	d100      	bne.n	8000a4c <__aeabi_fmul+0x1c>
 8000a4a:	e0da      	b.n	8000c02 <__aeabi_fmul+0x1d2>
 8000a4c:	2cff      	cmp	r4, #255	@ 0xff
 8000a4e:	d074      	beq.n	8000b3a <__aeabi_fmul+0x10a>
 8000a50:	2380      	movs	r3, #128	@ 0x80
 8000a52:	00f6      	lsls	r6, r6, #3
 8000a54:	04db      	lsls	r3, r3, #19
 8000a56:	431e      	orrs	r6, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	3c7f      	subs	r4, #127	@ 0x7f
 8000a60:	027b      	lsls	r3, r7, #9
 8000a62:	0a5b      	lsrs	r3, r3, #9
 8000a64:	4698      	mov	r8, r3
 8000a66:	007b      	lsls	r3, r7, #1
 8000a68:	0e1b      	lsrs	r3, r3, #24
 8000a6a:	0fff      	lsrs	r7, r7, #31
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d074      	beq.n	8000b5a <__aeabi_fmul+0x12a>
 8000a70:	2bff      	cmp	r3, #255	@ 0xff
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fmul+0x46>
 8000a74:	e08e      	b.n	8000b94 <__aeabi_fmul+0x164>
 8000a76:	4642      	mov	r2, r8
 8000a78:	2180      	movs	r1, #128	@ 0x80
 8000a7a:	00d2      	lsls	r2, r2, #3
 8000a7c:	04c9      	lsls	r1, r1, #19
 8000a7e:	4311      	orrs	r1, r2
 8000a80:	3b7f      	subs	r3, #127	@ 0x7f
 8000a82:	002a      	movs	r2, r5
 8000a84:	18e4      	adds	r4, r4, r3
 8000a86:	464b      	mov	r3, r9
 8000a88:	407a      	eors	r2, r7
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	2b0a      	cmp	r3, #10
 8000a90:	dc75      	bgt.n	8000b7e <__aeabi_fmul+0x14e>
 8000a92:	464b      	mov	r3, r9
 8000a94:	2000      	movs	r0, #0
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	dd0f      	ble.n	8000aba <__aeabi_fmul+0x8a>
 8000a9a:	4649      	mov	r1, r9
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	408b      	lsls	r3, r1
 8000aa0:	21a6      	movs	r1, #166	@ 0xa6
 8000aa2:	00c9      	lsls	r1, r1, #3
 8000aa4:	420b      	tst	r3, r1
 8000aa6:	d169      	bne.n	8000b7c <__aeabi_fmul+0x14c>
 8000aa8:	2190      	movs	r1, #144	@ 0x90
 8000aaa:	0089      	lsls	r1, r1, #2
 8000aac:	420b      	tst	r3, r1
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fmul+0x82>
 8000ab0:	e100      	b.n	8000cb4 <__aeabi_fmul+0x284>
 8000ab2:	2188      	movs	r1, #136	@ 0x88
 8000ab4:	4219      	tst	r1, r3
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fmul+0x8a>
 8000ab8:	e0f5      	b.n	8000ca6 <__aeabi_fmul+0x276>
 8000aba:	4641      	mov	r1, r8
 8000abc:	0409      	lsls	r1, r1, #16
 8000abe:	0c09      	lsrs	r1, r1, #16
 8000ac0:	4643      	mov	r3, r8
 8000ac2:	0008      	movs	r0, r1
 8000ac4:	0c35      	lsrs	r5, r6, #16
 8000ac6:	0436      	lsls	r6, r6, #16
 8000ac8:	0c1b      	lsrs	r3, r3, #16
 8000aca:	0c36      	lsrs	r6, r6, #16
 8000acc:	4370      	muls	r0, r6
 8000ace:	4369      	muls	r1, r5
 8000ad0:	435e      	muls	r6, r3
 8000ad2:	435d      	muls	r5, r3
 8000ad4:	1876      	adds	r6, r6, r1
 8000ad6:	0c03      	lsrs	r3, r0, #16
 8000ad8:	199b      	adds	r3, r3, r6
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d903      	bls.n	8000ae6 <__aeabi_fmul+0xb6>
 8000ade:	2180      	movs	r1, #128	@ 0x80
 8000ae0:	0249      	lsls	r1, r1, #9
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4465      	add	r5, ip
 8000ae6:	0400      	lsls	r0, r0, #16
 8000ae8:	0419      	lsls	r1, r3, #16
 8000aea:	0c00      	lsrs	r0, r0, #16
 8000aec:	1809      	adds	r1, r1, r0
 8000aee:	018e      	lsls	r6, r1, #6
 8000af0:	1e70      	subs	r0, r6, #1
 8000af2:	4186      	sbcs	r6, r0
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	0e89      	lsrs	r1, r1, #26
 8000af8:	195b      	adds	r3, r3, r5
 8000afa:	430e      	orrs	r6, r1
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	431e      	orrs	r6, r3
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	d46c      	bmi.n	8000bde <__aeabi_fmul+0x1ae>
 8000b04:	0023      	movs	r3, r4
 8000b06:	337f      	adds	r3, #127	@ 0x7f
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	dc00      	bgt.n	8000b0e <__aeabi_fmul+0xde>
 8000b0c:	e0b1      	b.n	8000c72 <__aeabi_fmul+0x242>
 8000b0e:	0015      	movs	r5, r2
 8000b10:	0771      	lsls	r1, r6, #29
 8000b12:	d00b      	beq.n	8000b2c <__aeabi_fmul+0xfc>
 8000b14:	200f      	movs	r0, #15
 8000b16:	0021      	movs	r1, r4
 8000b18:	4030      	ands	r0, r6
 8000b1a:	2804      	cmp	r0, #4
 8000b1c:	d006      	beq.n	8000b2c <__aeabi_fmul+0xfc>
 8000b1e:	3604      	adds	r6, #4
 8000b20:	0132      	lsls	r2, r6, #4
 8000b22:	d503      	bpl.n	8000b2c <__aeabi_fmul+0xfc>
 8000b24:	4b6e      	ldr	r3, [pc, #440]	@ (8000ce0 <__aeabi_fmul+0x2b0>)
 8000b26:	401e      	ands	r6, r3
 8000b28:	000b      	movs	r3, r1
 8000b2a:	3380      	adds	r3, #128	@ 0x80
 8000b2c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_fmul+0x102>
 8000b30:	e0bd      	b.n	8000cae <__aeabi_fmul+0x27e>
 8000b32:	01b2      	lsls	r2, r6, #6
 8000b34:	0a52      	lsrs	r2, r2, #9
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	e048      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_fmul+0x110>
 8000b3e:	e092      	b.n	8000c66 <__aeabi_fmul+0x236>
 8000b40:	2308      	movs	r3, #8
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b06      	subs	r3, #6
 8000b46:	469a      	mov	sl, r3
 8000b48:	027b      	lsls	r3, r7, #9
 8000b4a:	0a5b      	lsrs	r3, r3, #9
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	007b      	lsls	r3, r7, #1
 8000b50:	24ff      	movs	r4, #255	@ 0xff
 8000b52:	0e1b      	lsrs	r3, r3, #24
 8000b54:	0fff      	lsrs	r7, r7, #31
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d18a      	bne.n	8000a70 <__aeabi_fmul+0x40>
 8000b5a:	4642      	mov	r2, r8
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	d164      	bne.n	8000c2a <__aeabi_fmul+0x1fa>
 8000b60:	4649      	mov	r1, r9
 8000b62:	3201      	adds	r2, #1
 8000b64:	4311      	orrs	r1, r2
 8000b66:	4689      	mov	r9, r1
 8000b68:	290a      	cmp	r1, #10
 8000b6a:	dc08      	bgt.n	8000b7e <__aeabi_fmul+0x14e>
 8000b6c:	407d      	eors	r5, r7
 8000b6e:	2001      	movs	r0, #1
 8000b70:	b2ea      	uxtb	r2, r5
 8000b72:	2902      	cmp	r1, #2
 8000b74:	dc91      	bgt.n	8000a9a <__aeabi_fmul+0x6a>
 8000b76:	0015      	movs	r5, r2
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e027      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000b7c:	0015      	movs	r5, r2
 8000b7e:	4653      	mov	r3, sl
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d100      	bne.n	8000b86 <__aeabi_fmul+0x156>
 8000b84:	e093      	b.n	8000cae <__aeabi_fmul+0x27e>
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d01a      	beq.n	8000bc0 <__aeabi_fmul+0x190>
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d12c      	bne.n	8000be8 <__aeabi_fmul+0x1b8>
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2200      	movs	r2, #0
 8000b92:	e01b      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000b94:	4643      	mov	r3, r8
 8000b96:	34ff      	adds	r4, #255	@ 0xff
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d055      	beq.n	8000c48 <__aeabi_fmul+0x218>
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	2b0a      	cmp	r3, #10
 8000ba6:	dc00      	bgt.n	8000baa <__aeabi_fmul+0x17a>
 8000ba8:	e092      	b.n	8000cd0 <__aeabi_fmul+0x2a0>
 8000baa:	2b0f      	cmp	r3, #15
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_fmul+0x180>
 8000bae:	e08c      	b.n	8000cca <__aeabi_fmul+0x29a>
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	03d2      	lsls	r2, r2, #15
 8000bb4:	4216      	tst	r6, r2
 8000bb6:	d003      	beq.n	8000bc0 <__aeabi_fmul+0x190>
 8000bb8:	4643      	mov	r3, r8
 8000bba:	4213      	tst	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fmul+0x190>
 8000bbe:	e07d      	b.n	8000cbc <__aeabi_fmul+0x28c>
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	03d2      	lsls	r2, r2, #15
 8000bc4:	4332      	orrs	r2, r6
 8000bc6:	0252      	lsls	r2, r2, #9
 8000bc8:	0a52      	lsrs	r2, r2, #9
 8000bca:	23ff      	movs	r3, #255	@ 0xff
 8000bcc:	05d8      	lsls	r0, r3, #23
 8000bce:	07ed      	lsls	r5, r5, #31
 8000bd0:	4310      	orrs	r0, r2
 8000bd2:	4328      	orrs	r0, r5
 8000bd4:	bce0      	pop	{r5, r6, r7}
 8000bd6:	46ba      	mov	sl, r7
 8000bd8:	46b1      	mov	r9, r6
 8000bda:	46a8      	mov	r8, r5
 8000bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bde:	2301      	movs	r3, #1
 8000be0:	0015      	movs	r5, r2
 8000be2:	0871      	lsrs	r1, r6, #1
 8000be4:	401e      	ands	r6, r3
 8000be6:	430e      	orrs	r6, r1
 8000be8:	0023      	movs	r3, r4
 8000bea:	3380      	adds	r3, #128	@ 0x80
 8000bec:	1c61      	adds	r1, r4, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd41      	ble.n	8000c76 <__aeabi_fmul+0x246>
 8000bf2:	0772      	lsls	r2, r6, #29
 8000bf4:	d094      	beq.n	8000b20 <__aeabi_fmul+0xf0>
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	4032      	ands	r2, r6
 8000bfa:	2a04      	cmp	r2, #4
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fmul+0x1d0>
 8000bfe:	e78e      	b.n	8000b1e <__aeabi_fmul+0xee>
 8000c00:	e78e      	b.n	8000b20 <__aeabi_fmul+0xf0>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d105      	bne.n	8000c12 <__aeabi_fmul+0x1e2>
 8000c06:	2304      	movs	r3, #4
 8000c08:	4699      	mov	r9, r3
 8000c0a:	3b03      	subs	r3, #3
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	469a      	mov	sl, r3
 8000c10:	e726      	b.n	8000a60 <__aeabi_fmul+0x30>
 8000c12:	0030      	movs	r0, r6
 8000c14:	f002 f892 	bl	8002d3c <__clzsi2>
 8000c18:	2476      	movs	r4, #118	@ 0x76
 8000c1a:	1f43      	subs	r3, r0, #5
 8000c1c:	409e      	lsls	r6, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	4264      	negs	r4, r4
 8000c22:	4699      	mov	r9, r3
 8000c24:	469a      	mov	sl, r3
 8000c26:	1a24      	subs	r4, r4, r0
 8000c28:	e71a      	b.n	8000a60 <__aeabi_fmul+0x30>
 8000c2a:	4640      	mov	r0, r8
 8000c2c:	f002 f886 	bl	8002d3c <__clzsi2>
 8000c30:	464b      	mov	r3, r9
 8000c32:	1a24      	subs	r4, r4, r0
 8000c34:	3c76      	subs	r4, #118	@ 0x76
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	dca1      	bgt.n	8000b7e <__aeabi_fmul+0x14e>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	3805      	subs	r0, #5
 8000c3e:	4083      	lsls	r3, r0
 8000c40:	407d      	eors	r5, r7
 8000c42:	4698      	mov	r8, r3
 8000c44:	b2ea      	uxtb	r2, r5
 8000c46:	e724      	b.n	8000a92 <__aeabi_fmul+0x62>
 8000c48:	464a      	mov	r2, r9
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	002a      	movs	r2, r5
 8000c50:	407a      	eors	r2, r7
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	2b0a      	cmp	r3, #10
 8000c56:	dc92      	bgt.n	8000b7e <__aeabi_fmul+0x14e>
 8000c58:	4649      	mov	r1, r9
 8000c5a:	0015      	movs	r5, r2
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d026      	beq.n	8000cae <__aeabi_fmul+0x27e>
 8000c60:	4699      	mov	r9, r3
 8000c62:	2002      	movs	r0, #2
 8000c64:	e719      	b.n	8000a9a <__aeabi_fmul+0x6a>
 8000c66:	230c      	movs	r3, #12
 8000c68:	4699      	mov	r9, r3
 8000c6a:	3b09      	subs	r3, #9
 8000c6c:	24ff      	movs	r4, #255	@ 0xff
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e6f6      	b.n	8000a60 <__aeabi_fmul+0x30>
 8000c72:	0015      	movs	r5, r2
 8000c74:	0021      	movs	r1, r4
 8000c76:	2201      	movs	r2, #1
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b1b      	cmp	r3, #27
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_fmul+0x250>
 8000c7e:	e786      	b.n	8000b8e <__aeabi_fmul+0x15e>
 8000c80:	319e      	adds	r1, #158	@ 0x9e
 8000c82:	0032      	movs	r2, r6
 8000c84:	408e      	lsls	r6, r1
 8000c86:	40da      	lsrs	r2, r3
 8000c88:	1e73      	subs	r3, r6, #1
 8000c8a:	419e      	sbcs	r6, r3
 8000c8c:	4332      	orrs	r2, r6
 8000c8e:	0753      	lsls	r3, r2, #29
 8000c90:	d004      	beq.n	8000c9c <__aeabi_fmul+0x26c>
 8000c92:	230f      	movs	r3, #15
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fmul+0x26c>
 8000c9a:	3204      	adds	r2, #4
 8000c9c:	0153      	lsls	r3, r2, #5
 8000c9e:	d510      	bpl.n	8000cc2 <__aeabi_fmul+0x292>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	e792      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000ca6:	003d      	movs	r5, r7
 8000ca8:	4646      	mov	r6, r8
 8000caa:	4682      	mov	sl, r0
 8000cac:	e767      	b.n	8000b7e <__aeabi_fmul+0x14e>
 8000cae:	23ff      	movs	r3, #255	@ 0xff
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e78b      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000cb4:	2280      	movs	r2, #128	@ 0x80
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	03d2      	lsls	r2, r2, #15
 8000cba:	e786      	b.n	8000bca <__aeabi_fmul+0x19a>
 8000cbc:	003d      	movs	r5, r7
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	e783      	b.n	8000bca <__aeabi_fmul+0x19a>
 8000cc2:	0192      	lsls	r2, r2, #6
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	0a52      	lsrs	r2, r2, #9
 8000cc8:	e780      	b.n	8000bcc <__aeabi_fmul+0x19c>
 8000cca:	003d      	movs	r5, r7
 8000ccc:	4646      	mov	r6, r8
 8000cce:	e777      	b.n	8000bc0 <__aeabi_fmul+0x190>
 8000cd0:	002a      	movs	r2, r5
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	407a      	eors	r2, r7
 8000cd6:	408b      	lsls	r3, r1
 8000cd8:	2003      	movs	r0, #3
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	e6e9      	b.n	8000ab2 <__aeabi_fmul+0x82>
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	f7ffffff 	.word	0xf7ffffff

08000ce4 <__aeabi_i2f>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d012      	beq.n	8000d10 <__aeabi_i2f+0x2c>
 8000cea:	17c3      	asrs	r3, r0, #31
 8000cec:	18c5      	adds	r5, r0, r3
 8000cee:	405d      	eors	r5, r3
 8000cf0:	0fc4      	lsrs	r4, r0, #31
 8000cf2:	0028      	movs	r0, r5
 8000cf4:	f002 f822 	bl	8002d3c <__clzsi2>
 8000cf8:	239e      	movs	r3, #158	@ 0x9e
 8000cfa:	1a1b      	subs	r3, r3, r0
 8000cfc:	2b96      	cmp	r3, #150	@ 0x96
 8000cfe:	dc0f      	bgt.n	8000d20 <__aeabi_i2f+0x3c>
 8000d00:	2808      	cmp	r0, #8
 8000d02:	d038      	beq.n	8000d76 <__aeabi_i2f+0x92>
 8000d04:	3808      	subs	r0, #8
 8000d06:	4085      	lsls	r5, r0
 8000d08:	026d      	lsls	r5, r5, #9
 8000d0a:	0a6d      	lsrs	r5, r5, #9
 8000d0c:	b2d8      	uxtb	r0, r3
 8000d0e:	e002      	b.n	8000d16 <__aeabi_i2f+0x32>
 8000d10:	2400      	movs	r4, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	2500      	movs	r5, #0
 8000d16:	05c0      	lsls	r0, r0, #23
 8000d18:	4328      	orrs	r0, r5
 8000d1a:	07e4      	lsls	r4, r4, #31
 8000d1c:	4320      	orrs	r0, r4
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	2b99      	cmp	r3, #153	@ 0x99
 8000d22:	dc14      	bgt.n	8000d4e <__aeabi_i2f+0x6a>
 8000d24:	1f42      	subs	r2, r0, #5
 8000d26:	4095      	lsls	r5, r2
 8000d28:	002a      	movs	r2, r5
 8000d2a:	4915      	ldr	r1, [pc, #84]	@ (8000d80 <__aeabi_i2f+0x9c>)
 8000d2c:	4011      	ands	r1, r2
 8000d2e:	0755      	lsls	r5, r2, #29
 8000d30:	d01c      	beq.n	8000d6c <__aeabi_i2f+0x88>
 8000d32:	250f      	movs	r5, #15
 8000d34:	402a      	ands	r2, r5
 8000d36:	2a04      	cmp	r2, #4
 8000d38:	d018      	beq.n	8000d6c <__aeabi_i2f+0x88>
 8000d3a:	3104      	adds	r1, #4
 8000d3c:	08ca      	lsrs	r2, r1, #3
 8000d3e:	0149      	lsls	r1, r1, #5
 8000d40:	d515      	bpl.n	8000d6e <__aeabi_i2f+0x8a>
 8000d42:	239f      	movs	r3, #159	@ 0x9f
 8000d44:	0252      	lsls	r2, r2, #9
 8000d46:	1a18      	subs	r0, r3, r0
 8000d48:	0a55      	lsrs	r5, r2, #9
 8000d4a:	b2c0      	uxtb	r0, r0
 8000d4c:	e7e3      	b.n	8000d16 <__aeabi_i2f+0x32>
 8000d4e:	2205      	movs	r2, #5
 8000d50:	0029      	movs	r1, r5
 8000d52:	1a12      	subs	r2, r2, r0
 8000d54:	40d1      	lsrs	r1, r2
 8000d56:	0002      	movs	r2, r0
 8000d58:	321b      	adds	r2, #27
 8000d5a:	4095      	lsls	r5, r2
 8000d5c:	002a      	movs	r2, r5
 8000d5e:	1e55      	subs	r5, r2, #1
 8000d60:	41aa      	sbcs	r2, r5
 8000d62:	430a      	orrs	r2, r1
 8000d64:	4906      	ldr	r1, [pc, #24]	@ (8000d80 <__aeabi_i2f+0x9c>)
 8000d66:	4011      	ands	r1, r2
 8000d68:	0755      	lsls	r5, r2, #29
 8000d6a:	d1e2      	bne.n	8000d32 <__aeabi_i2f+0x4e>
 8000d6c:	08ca      	lsrs	r2, r1, #3
 8000d6e:	0252      	lsls	r2, r2, #9
 8000d70:	0a55      	lsrs	r5, r2, #9
 8000d72:	b2d8      	uxtb	r0, r3
 8000d74:	e7cf      	b.n	8000d16 <__aeabi_i2f+0x32>
 8000d76:	026d      	lsls	r5, r5, #9
 8000d78:	0a6d      	lsrs	r5, r5, #9
 8000d7a:	308e      	adds	r0, #142	@ 0x8e
 8000d7c:	e7cb      	b.n	8000d16 <__aeabi_i2f+0x32>
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	fbffffff 	.word	0xfbffffff

08000d84 <__aeabi_dadd>:
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d86:	464f      	mov	r7, r9
 8000d88:	4646      	mov	r6, r8
 8000d8a:	46d6      	mov	lr, sl
 8000d8c:	b5c0      	push	{r6, r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	9000      	str	r0, [sp, #0]
 8000d92:	9101      	str	r1, [sp, #4]
 8000d94:	030e      	lsls	r6, r1, #12
 8000d96:	004c      	lsls	r4, r1, #1
 8000d98:	0fcd      	lsrs	r5, r1, #31
 8000d9a:	0a71      	lsrs	r1, r6, #9
 8000d9c:	9e00      	ldr	r6, [sp, #0]
 8000d9e:	005f      	lsls	r7, r3, #1
 8000da0:	0f76      	lsrs	r6, r6, #29
 8000da2:	430e      	orrs	r6, r1
 8000da4:	9900      	ldr	r1, [sp, #0]
 8000da6:	9200      	str	r2, [sp, #0]
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	00c9      	lsls	r1, r1, #3
 8000dac:	4689      	mov	r9, r1
 8000dae:	0319      	lsls	r1, r3, #12
 8000db0:	0d7b      	lsrs	r3, r7, #21
 8000db2:	4698      	mov	r8, r3
 8000db4:	9b01      	ldr	r3, [sp, #4]
 8000db6:	0a49      	lsrs	r1, r1, #9
 8000db8:	0fdb      	lsrs	r3, r3, #31
 8000dba:	469c      	mov	ip, r3
 8000dbc:	9b00      	ldr	r3, [sp, #0]
 8000dbe:	9a00      	ldr	r2, [sp, #0]
 8000dc0:	0f5b      	lsrs	r3, r3, #29
 8000dc2:	430b      	orrs	r3, r1
 8000dc4:	4641      	mov	r1, r8
 8000dc6:	0d64      	lsrs	r4, r4, #21
 8000dc8:	00d2      	lsls	r2, r2, #3
 8000dca:	1a61      	subs	r1, r4, r1
 8000dcc:	4565      	cmp	r5, ip
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_dadd+0x4e>
 8000dd0:	e0a6      	b.n	8000f20 <__aeabi_dadd+0x19c>
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	dd72      	ble.n	8000ebc <__aeabi_dadd+0x138>
 8000dd6:	4647      	mov	r7, r8
 8000dd8:	2f00      	cmp	r7, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x5a>
 8000ddc:	e0dd      	b.n	8000f9a <__aeabi_dadd+0x216>
 8000dde:	4fcc      	ldr	r7, [pc, #816]	@ (8001110 <__aeabi_dadd+0x38c>)
 8000de0:	42bc      	cmp	r4, r7
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x62>
 8000de4:	e19a      	b.n	800111c <__aeabi_dadd+0x398>
 8000de6:	2701      	movs	r7, #1
 8000de8:	2938      	cmp	r1, #56	@ 0x38
 8000dea:	dc17      	bgt.n	8000e1c <__aeabi_dadd+0x98>
 8000dec:	2780      	movs	r7, #128	@ 0x80
 8000dee:	043f      	lsls	r7, r7, #16
 8000df0:	433b      	orrs	r3, r7
 8000df2:	291f      	cmp	r1, #31
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x74>
 8000df6:	e1dd      	b.n	80011b4 <__aeabi_dadd+0x430>
 8000df8:	2720      	movs	r7, #32
 8000dfa:	1a78      	subs	r0, r7, r1
 8000dfc:	001f      	movs	r7, r3
 8000dfe:	4087      	lsls	r7, r0
 8000e00:	46ba      	mov	sl, r7
 8000e02:	0017      	movs	r7, r2
 8000e04:	40cf      	lsrs	r7, r1
 8000e06:	4684      	mov	ip, r0
 8000e08:	0038      	movs	r0, r7
 8000e0a:	4657      	mov	r7, sl
 8000e0c:	4307      	orrs	r7, r0
 8000e0e:	4660      	mov	r0, ip
 8000e10:	4082      	lsls	r2, r0
 8000e12:	40cb      	lsrs	r3, r1
 8000e14:	1e50      	subs	r0, r2, #1
 8000e16:	4182      	sbcs	r2, r0
 8000e18:	1af6      	subs	r6, r6, r3
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	1bdf      	subs	r7, r3, r7
 8000e20:	45b9      	cmp	r9, r7
 8000e22:	4180      	sbcs	r0, r0
 8000e24:	4240      	negs	r0, r0
 8000e26:	1a36      	subs	r6, r6, r0
 8000e28:	0233      	lsls	r3, r6, #8
 8000e2a:	d400      	bmi.n	8000e2e <__aeabi_dadd+0xaa>
 8000e2c:	e0ff      	b.n	800102e <__aeabi_dadd+0x2aa>
 8000e2e:	0276      	lsls	r6, r6, #9
 8000e30:	0a76      	lsrs	r6, r6, #9
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dadd+0xb4>
 8000e36:	e13c      	b.n	80010b2 <__aeabi_dadd+0x32e>
 8000e38:	0030      	movs	r0, r6
 8000e3a:	f001 ff7f 	bl	8002d3c <__clzsi2>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	3b08      	subs	r3, #8
 8000e42:	2120      	movs	r1, #32
 8000e44:	0038      	movs	r0, r7
 8000e46:	1aca      	subs	r2, r1, r3
 8000e48:	40d0      	lsrs	r0, r2
 8000e4a:	409e      	lsls	r6, r3
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	409f      	lsls	r7, r3
 8000e50:	4332      	orrs	r2, r6
 8000e52:	429c      	cmp	r4, r3
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_dadd+0xd4>
 8000e56:	e1a6      	b.n	80011a6 <__aeabi_dadd+0x422>
 8000e58:	1b18      	subs	r0, r3, r4
 8000e5a:	3001      	adds	r0, #1
 8000e5c:	1a09      	subs	r1, r1, r0
 8000e5e:	003e      	movs	r6, r7
 8000e60:	408f      	lsls	r7, r1
 8000e62:	40c6      	lsrs	r6, r0
 8000e64:	1e7b      	subs	r3, r7, #1
 8000e66:	419f      	sbcs	r7, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	408b      	lsls	r3, r1
 8000e6c:	4337      	orrs	r7, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	40c2      	lsrs	r2, r0
 8000e72:	003b      	movs	r3, r7
 8000e74:	0016      	movs	r6, r2
 8000e76:	2400      	movs	r4, #0
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dadd+0xfa>
 8000e7c:	e1df      	b.n	800123e <__aeabi_dadd+0x4ba>
 8000e7e:	077b      	lsls	r3, r7, #29
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dadd+0x100>
 8000e82:	e332      	b.n	80014ea <__aeabi_dadd+0x766>
 8000e84:	230f      	movs	r3, #15
 8000e86:	003a      	movs	r2, r7
 8000e88:	403b      	ands	r3, r7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d004      	beq.n	8000e98 <__aeabi_dadd+0x114>
 8000e8e:	1d3a      	adds	r2, r7, #4
 8000e90:	42ba      	cmp	r2, r7
 8000e92:	41bf      	sbcs	r7, r7
 8000e94:	427f      	negs	r7, r7
 8000e96:	19f6      	adds	r6, r6, r7
 8000e98:	0233      	lsls	r3, r6, #8
 8000e9a:	d400      	bmi.n	8000e9e <__aeabi_dadd+0x11a>
 8000e9c:	e323      	b.n	80014e6 <__aeabi_dadd+0x762>
 8000e9e:	4b9c      	ldr	r3, [pc, #624]	@ (8001110 <__aeabi_dadd+0x38c>)
 8000ea0:	3401      	adds	r4, #1
 8000ea2:	429c      	cmp	r4, r3
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dadd+0x124>
 8000ea6:	e0b4      	b.n	8001012 <__aeabi_dadd+0x28e>
 8000ea8:	4b9a      	ldr	r3, [pc, #616]	@ (8001114 <__aeabi_dadd+0x390>)
 8000eaa:	0564      	lsls	r4, r4, #21
 8000eac:	401e      	ands	r6, r3
 8000eae:	0d64      	lsrs	r4, r4, #21
 8000eb0:	0777      	lsls	r7, r6, #29
 8000eb2:	08d2      	lsrs	r2, r2, #3
 8000eb4:	0276      	lsls	r6, r6, #9
 8000eb6:	4317      	orrs	r7, r2
 8000eb8:	0b36      	lsrs	r6, r6, #12
 8000eba:	e0ac      	b.n	8001016 <__aeabi_dadd+0x292>
 8000ebc:	2900      	cmp	r1, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_dadd+0x13e>
 8000ec0:	e07e      	b.n	8000fc0 <__aeabi_dadd+0x23c>
 8000ec2:	4641      	mov	r1, r8
 8000ec4:	1b09      	subs	r1, r1, r4
 8000ec6:	2c00      	cmp	r4, #0
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_dadd+0x148>
 8000eca:	e160      	b.n	800118e <__aeabi_dadd+0x40a>
 8000ecc:	0034      	movs	r4, r6
 8000ece:	4648      	mov	r0, r9
 8000ed0:	4304      	orrs	r4, r0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_dadd+0x152>
 8000ed4:	e1c9      	b.n	800126a <__aeabi_dadd+0x4e6>
 8000ed6:	1e4c      	subs	r4, r1, #1
 8000ed8:	2901      	cmp	r1, #1
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x15a>
 8000edc:	e22e      	b.n	800133c <__aeabi_dadd+0x5b8>
 8000ede:	4d8c      	ldr	r5, [pc, #560]	@ (8001110 <__aeabi_dadd+0x38c>)
 8000ee0:	42a9      	cmp	r1, r5
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_dadd+0x162>
 8000ee4:	e224      	b.n	8001330 <__aeabi_dadd+0x5ac>
 8000ee6:	2701      	movs	r7, #1
 8000ee8:	2c38      	cmp	r4, #56	@ 0x38
 8000eea:	dc11      	bgt.n	8000f10 <__aeabi_dadd+0x18c>
 8000eec:	0021      	movs	r1, r4
 8000eee:	291f      	cmp	r1, #31
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_dadd+0x170>
 8000ef2:	e20b      	b.n	800130c <__aeabi_dadd+0x588>
 8000ef4:	2420      	movs	r4, #32
 8000ef6:	0037      	movs	r7, r6
 8000ef8:	4648      	mov	r0, r9
 8000efa:	1a64      	subs	r4, r4, r1
 8000efc:	40a7      	lsls	r7, r4
 8000efe:	40c8      	lsrs	r0, r1
 8000f00:	4307      	orrs	r7, r0
 8000f02:	4648      	mov	r0, r9
 8000f04:	40a0      	lsls	r0, r4
 8000f06:	40ce      	lsrs	r6, r1
 8000f08:	1e44      	subs	r4, r0, #1
 8000f0a:	41a0      	sbcs	r0, r4
 8000f0c:	1b9b      	subs	r3, r3, r6
 8000f0e:	4307      	orrs	r7, r0
 8000f10:	1bd7      	subs	r7, r2, r7
 8000f12:	42ba      	cmp	r2, r7
 8000f14:	4192      	sbcs	r2, r2
 8000f16:	4252      	negs	r2, r2
 8000f18:	4665      	mov	r5, ip
 8000f1a:	4644      	mov	r4, r8
 8000f1c:	1a9e      	subs	r6, r3, r2
 8000f1e:	e783      	b.n	8000e28 <__aeabi_dadd+0xa4>
 8000f20:	2900      	cmp	r1, #0
 8000f22:	dc00      	bgt.n	8000f26 <__aeabi_dadd+0x1a2>
 8000f24:	e09c      	b.n	8001060 <__aeabi_dadd+0x2dc>
 8000f26:	4647      	mov	r7, r8
 8000f28:	2f00      	cmp	r7, #0
 8000f2a:	d167      	bne.n	8000ffc <__aeabi_dadd+0x278>
 8000f2c:	001f      	movs	r7, r3
 8000f2e:	4317      	orrs	r7, r2
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x1b0>
 8000f32:	e0e4      	b.n	80010fe <__aeabi_dadd+0x37a>
 8000f34:	1e48      	subs	r0, r1, #1
 8000f36:	2901      	cmp	r1, #1
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x1b8>
 8000f3a:	e19b      	b.n	8001274 <__aeabi_dadd+0x4f0>
 8000f3c:	4f74      	ldr	r7, [pc, #464]	@ (8001110 <__aeabi_dadd+0x38c>)
 8000f3e:	42b9      	cmp	r1, r7
 8000f40:	d100      	bne.n	8000f44 <__aeabi_dadd+0x1c0>
 8000f42:	e0eb      	b.n	800111c <__aeabi_dadd+0x398>
 8000f44:	2701      	movs	r7, #1
 8000f46:	0001      	movs	r1, r0
 8000f48:	2838      	cmp	r0, #56	@ 0x38
 8000f4a:	dc11      	bgt.n	8000f70 <__aeabi_dadd+0x1ec>
 8000f4c:	291f      	cmp	r1, #31
 8000f4e:	dd00      	ble.n	8000f52 <__aeabi_dadd+0x1ce>
 8000f50:	e1c7      	b.n	80012e2 <__aeabi_dadd+0x55e>
 8000f52:	2720      	movs	r7, #32
 8000f54:	1a78      	subs	r0, r7, r1
 8000f56:	001f      	movs	r7, r3
 8000f58:	4684      	mov	ip, r0
 8000f5a:	4087      	lsls	r7, r0
 8000f5c:	0010      	movs	r0, r2
 8000f5e:	40c8      	lsrs	r0, r1
 8000f60:	4307      	orrs	r7, r0
 8000f62:	4660      	mov	r0, ip
 8000f64:	4082      	lsls	r2, r0
 8000f66:	40cb      	lsrs	r3, r1
 8000f68:	1e50      	subs	r0, r2, #1
 8000f6a:	4182      	sbcs	r2, r0
 8000f6c:	18f6      	adds	r6, r6, r3
 8000f6e:	4317      	orrs	r7, r2
 8000f70:	444f      	add	r7, r9
 8000f72:	454f      	cmp	r7, r9
 8000f74:	4180      	sbcs	r0, r0
 8000f76:	4240      	negs	r0, r0
 8000f78:	1836      	adds	r6, r6, r0
 8000f7a:	0233      	lsls	r3, r6, #8
 8000f7c:	d557      	bpl.n	800102e <__aeabi_dadd+0x2aa>
 8000f7e:	4b64      	ldr	r3, [pc, #400]	@ (8001110 <__aeabi_dadd+0x38c>)
 8000f80:	3401      	adds	r4, #1
 8000f82:	429c      	cmp	r4, r3
 8000f84:	d045      	beq.n	8001012 <__aeabi_dadd+0x28e>
 8000f86:	2101      	movs	r1, #1
 8000f88:	4b62      	ldr	r3, [pc, #392]	@ (8001114 <__aeabi_dadd+0x390>)
 8000f8a:	087a      	lsrs	r2, r7, #1
 8000f8c:	401e      	ands	r6, r3
 8000f8e:	4039      	ands	r1, r7
 8000f90:	430a      	orrs	r2, r1
 8000f92:	07f7      	lsls	r7, r6, #31
 8000f94:	4317      	orrs	r7, r2
 8000f96:	0876      	lsrs	r6, r6, #1
 8000f98:	e771      	b.n	8000e7e <__aeabi_dadd+0xfa>
 8000f9a:	001f      	movs	r7, r3
 8000f9c:	4317      	orrs	r7, r2
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dadd+0x21e>
 8000fa0:	e0ad      	b.n	80010fe <__aeabi_dadd+0x37a>
 8000fa2:	1e4f      	subs	r7, r1, #1
 8000fa4:	46bc      	mov	ip, r7
 8000fa6:	2901      	cmp	r1, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x228>
 8000faa:	e182      	b.n	80012b2 <__aeabi_dadd+0x52e>
 8000fac:	4f58      	ldr	r7, [pc, #352]	@ (8001110 <__aeabi_dadd+0x38c>)
 8000fae:	42b9      	cmp	r1, r7
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dadd+0x230>
 8000fb2:	e190      	b.n	80012d6 <__aeabi_dadd+0x552>
 8000fb4:	4661      	mov	r1, ip
 8000fb6:	2701      	movs	r7, #1
 8000fb8:	2938      	cmp	r1, #56	@ 0x38
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_dadd+0x23a>
 8000fbc:	e72e      	b.n	8000e1c <__aeabi_dadd+0x98>
 8000fbe:	e718      	b.n	8000df2 <__aeabi_dadd+0x6e>
 8000fc0:	4f55      	ldr	r7, [pc, #340]	@ (8001118 <__aeabi_dadd+0x394>)
 8000fc2:	1c61      	adds	r1, r4, #1
 8000fc4:	4239      	tst	r1, r7
 8000fc6:	d000      	beq.n	8000fca <__aeabi_dadd+0x246>
 8000fc8:	e0d0      	b.n	800116c <__aeabi_dadd+0x3e8>
 8000fca:	0031      	movs	r1, r6
 8000fcc:	4648      	mov	r0, r9
 8000fce:	001f      	movs	r7, r3
 8000fd0:	4301      	orrs	r1, r0
 8000fd2:	4317      	orrs	r7, r2
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_dadd+0x256>
 8000fd8:	e13d      	b.n	8001256 <__aeabi_dadd+0x4d2>
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x25c>
 8000fde:	e1bc      	b.n	800135a <__aeabi_dadd+0x5d6>
 8000fe0:	2f00      	cmp	r7, #0
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_dadd+0x262>
 8000fe4:	e1bf      	b.n	8001366 <__aeabi_dadd+0x5e2>
 8000fe6:	464b      	mov	r3, r9
 8000fe8:	2100      	movs	r1, #0
 8000fea:	08d8      	lsrs	r0, r3, #3
 8000fec:	0777      	lsls	r7, r6, #29
 8000fee:	4307      	orrs	r7, r0
 8000ff0:	08f0      	lsrs	r0, r6, #3
 8000ff2:	0306      	lsls	r6, r0, #12
 8000ff4:	054c      	lsls	r4, r1, #21
 8000ff6:	0b36      	lsrs	r6, r6, #12
 8000ff8:	0d64      	lsrs	r4, r4, #21
 8000ffa:	e00c      	b.n	8001016 <__aeabi_dadd+0x292>
 8000ffc:	4f44      	ldr	r7, [pc, #272]	@ (8001110 <__aeabi_dadd+0x38c>)
 8000ffe:	42bc      	cmp	r4, r7
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x280>
 8001002:	e08b      	b.n	800111c <__aeabi_dadd+0x398>
 8001004:	2701      	movs	r7, #1
 8001006:	2938      	cmp	r1, #56	@ 0x38
 8001008:	dcb2      	bgt.n	8000f70 <__aeabi_dadd+0x1ec>
 800100a:	2780      	movs	r7, #128	@ 0x80
 800100c:	043f      	lsls	r7, r7, #16
 800100e:	433b      	orrs	r3, r7
 8001010:	e79c      	b.n	8000f4c <__aeabi_dadd+0x1c8>
 8001012:	2600      	movs	r6, #0
 8001014:	2700      	movs	r7, #0
 8001016:	0524      	lsls	r4, r4, #20
 8001018:	4334      	orrs	r4, r6
 800101a:	07ed      	lsls	r5, r5, #31
 800101c:	432c      	orrs	r4, r5
 800101e:	0038      	movs	r0, r7
 8001020:	0021      	movs	r1, r4
 8001022:	b002      	add	sp, #8
 8001024:	bce0      	pop	{r5, r6, r7}
 8001026:	46ba      	mov	sl, r7
 8001028:	46b1      	mov	r9, r6
 800102a:	46a8      	mov	r8, r5
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	077b      	lsls	r3, r7, #29
 8001030:	d004      	beq.n	800103c <__aeabi_dadd+0x2b8>
 8001032:	230f      	movs	r3, #15
 8001034:	403b      	ands	r3, r7
 8001036:	2b04      	cmp	r3, #4
 8001038:	d000      	beq.n	800103c <__aeabi_dadd+0x2b8>
 800103a:	e728      	b.n	8000e8e <__aeabi_dadd+0x10a>
 800103c:	08f8      	lsrs	r0, r7, #3
 800103e:	4b34      	ldr	r3, [pc, #208]	@ (8001110 <__aeabi_dadd+0x38c>)
 8001040:	0777      	lsls	r7, r6, #29
 8001042:	4307      	orrs	r7, r0
 8001044:	08f0      	lsrs	r0, r6, #3
 8001046:	429c      	cmp	r4, r3
 8001048:	d000      	beq.n	800104c <__aeabi_dadd+0x2c8>
 800104a:	e24a      	b.n	80014e2 <__aeabi_dadd+0x75e>
 800104c:	003b      	movs	r3, r7
 800104e:	4303      	orrs	r3, r0
 8001050:	d059      	beq.n	8001106 <__aeabi_dadd+0x382>
 8001052:	2680      	movs	r6, #128	@ 0x80
 8001054:	0336      	lsls	r6, r6, #12
 8001056:	4306      	orrs	r6, r0
 8001058:	0336      	lsls	r6, r6, #12
 800105a:	4c2d      	ldr	r4, [pc, #180]	@ (8001110 <__aeabi_dadd+0x38c>)
 800105c:	0b36      	lsrs	r6, r6, #12
 800105e:	e7da      	b.n	8001016 <__aeabi_dadd+0x292>
 8001060:	2900      	cmp	r1, #0
 8001062:	d061      	beq.n	8001128 <__aeabi_dadd+0x3a4>
 8001064:	4641      	mov	r1, r8
 8001066:	1b09      	subs	r1, r1, r4
 8001068:	2c00      	cmp	r4, #0
 800106a:	d100      	bne.n	800106e <__aeabi_dadd+0x2ea>
 800106c:	e0b9      	b.n	80011e2 <__aeabi_dadd+0x45e>
 800106e:	4c28      	ldr	r4, [pc, #160]	@ (8001110 <__aeabi_dadd+0x38c>)
 8001070:	45a0      	cmp	r8, r4
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0x2f2>
 8001074:	e1a5      	b.n	80013c2 <__aeabi_dadd+0x63e>
 8001076:	2701      	movs	r7, #1
 8001078:	2938      	cmp	r1, #56	@ 0x38
 800107a:	dc13      	bgt.n	80010a4 <__aeabi_dadd+0x320>
 800107c:	2480      	movs	r4, #128	@ 0x80
 800107e:	0424      	lsls	r4, r4, #16
 8001080:	4326      	orrs	r6, r4
 8001082:	291f      	cmp	r1, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0x304>
 8001086:	e1c8      	b.n	800141a <__aeabi_dadd+0x696>
 8001088:	2420      	movs	r4, #32
 800108a:	0037      	movs	r7, r6
 800108c:	4648      	mov	r0, r9
 800108e:	1a64      	subs	r4, r4, r1
 8001090:	40a7      	lsls	r7, r4
 8001092:	40c8      	lsrs	r0, r1
 8001094:	4307      	orrs	r7, r0
 8001096:	4648      	mov	r0, r9
 8001098:	40a0      	lsls	r0, r4
 800109a:	40ce      	lsrs	r6, r1
 800109c:	1e44      	subs	r4, r0, #1
 800109e:	41a0      	sbcs	r0, r4
 80010a0:	199b      	adds	r3, r3, r6
 80010a2:	4307      	orrs	r7, r0
 80010a4:	18bf      	adds	r7, r7, r2
 80010a6:	4297      	cmp	r7, r2
 80010a8:	4192      	sbcs	r2, r2
 80010aa:	4252      	negs	r2, r2
 80010ac:	4644      	mov	r4, r8
 80010ae:	18d6      	adds	r6, r2, r3
 80010b0:	e763      	b.n	8000f7a <__aeabi_dadd+0x1f6>
 80010b2:	0038      	movs	r0, r7
 80010b4:	f001 fe42 	bl	8002d3c <__clzsi2>
 80010b8:	0003      	movs	r3, r0
 80010ba:	3318      	adds	r3, #24
 80010bc:	2b1f      	cmp	r3, #31
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_dadd+0x33e>
 80010c0:	e6bf      	b.n	8000e42 <__aeabi_dadd+0xbe>
 80010c2:	003a      	movs	r2, r7
 80010c4:	3808      	subs	r0, #8
 80010c6:	4082      	lsls	r2, r0
 80010c8:	429c      	cmp	r4, r3
 80010ca:	dd00      	ble.n	80010ce <__aeabi_dadd+0x34a>
 80010cc:	e083      	b.n	80011d6 <__aeabi_dadd+0x452>
 80010ce:	1b1b      	subs	r3, r3, r4
 80010d0:	1c58      	adds	r0, r3, #1
 80010d2:	281f      	cmp	r0, #31
 80010d4:	dc00      	bgt.n	80010d8 <__aeabi_dadd+0x354>
 80010d6:	e1b4      	b.n	8001442 <__aeabi_dadd+0x6be>
 80010d8:	0017      	movs	r7, r2
 80010da:	3b1f      	subs	r3, #31
 80010dc:	40df      	lsrs	r7, r3
 80010de:	2820      	cmp	r0, #32
 80010e0:	d005      	beq.n	80010ee <__aeabi_dadd+0x36a>
 80010e2:	2340      	movs	r3, #64	@ 0x40
 80010e4:	1a1b      	subs	r3, r3, r0
 80010e6:	409a      	lsls	r2, r3
 80010e8:	1e53      	subs	r3, r2, #1
 80010ea:	419a      	sbcs	r2, r3
 80010ec:	4317      	orrs	r7, r2
 80010ee:	2400      	movs	r4, #0
 80010f0:	2f00      	cmp	r7, #0
 80010f2:	d00a      	beq.n	800110a <__aeabi_dadd+0x386>
 80010f4:	077b      	lsls	r3, r7, #29
 80010f6:	d000      	beq.n	80010fa <__aeabi_dadd+0x376>
 80010f8:	e6c4      	b.n	8000e84 <__aeabi_dadd+0x100>
 80010fa:	0026      	movs	r6, r4
 80010fc:	e79e      	b.n	800103c <__aeabi_dadd+0x2b8>
 80010fe:	464b      	mov	r3, r9
 8001100:	000c      	movs	r4, r1
 8001102:	08d8      	lsrs	r0, r3, #3
 8001104:	e79b      	b.n	800103e <__aeabi_dadd+0x2ba>
 8001106:	2700      	movs	r7, #0
 8001108:	4c01      	ldr	r4, [pc, #4]	@ (8001110 <__aeabi_dadd+0x38c>)
 800110a:	2600      	movs	r6, #0
 800110c:	e783      	b.n	8001016 <__aeabi_dadd+0x292>
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	000007ff 	.word	0x000007ff
 8001114:	ff7fffff 	.word	0xff7fffff
 8001118:	000007fe 	.word	0x000007fe
 800111c:	464b      	mov	r3, r9
 800111e:	0777      	lsls	r7, r6, #29
 8001120:	08d8      	lsrs	r0, r3, #3
 8001122:	4307      	orrs	r7, r0
 8001124:	08f0      	lsrs	r0, r6, #3
 8001126:	e791      	b.n	800104c <__aeabi_dadd+0x2c8>
 8001128:	4fcd      	ldr	r7, [pc, #820]	@ (8001460 <__aeabi_dadd+0x6dc>)
 800112a:	1c61      	adds	r1, r4, #1
 800112c:	4239      	tst	r1, r7
 800112e:	d16b      	bne.n	8001208 <__aeabi_dadd+0x484>
 8001130:	0031      	movs	r1, r6
 8001132:	4648      	mov	r0, r9
 8001134:	4301      	orrs	r1, r0
 8001136:	2c00      	cmp	r4, #0
 8001138:	d000      	beq.n	800113c <__aeabi_dadd+0x3b8>
 800113a:	e14b      	b.n	80013d4 <__aeabi_dadd+0x650>
 800113c:	001f      	movs	r7, r3
 800113e:	4317      	orrs	r7, r2
 8001140:	2900      	cmp	r1, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_dadd+0x3c2>
 8001144:	e181      	b.n	800144a <__aeabi_dadd+0x6c6>
 8001146:	2f00      	cmp	r7, #0
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x3c8>
 800114a:	e74c      	b.n	8000fe6 <__aeabi_dadd+0x262>
 800114c:	444a      	add	r2, r9
 800114e:	454a      	cmp	r2, r9
 8001150:	4180      	sbcs	r0, r0
 8001152:	18f6      	adds	r6, r6, r3
 8001154:	4240      	negs	r0, r0
 8001156:	1836      	adds	r6, r6, r0
 8001158:	0233      	lsls	r3, r6, #8
 800115a:	d500      	bpl.n	800115e <__aeabi_dadd+0x3da>
 800115c:	e1b0      	b.n	80014c0 <__aeabi_dadd+0x73c>
 800115e:	0017      	movs	r7, r2
 8001160:	4691      	mov	r9, r2
 8001162:	4337      	orrs	r7, r6
 8001164:	d000      	beq.n	8001168 <__aeabi_dadd+0x3e4>
 8001166:	e73e      	b.n	8000fe6 <__aeabi_dadd+0x262>
 8001168:	2600      	movs	r6, #0
 800116a:	e754      	b.n	8001016 <__aeabi_dadd+0x292>
 800116c:	4649      	mov	r1, r9
 800116e:	1a89      	subs	r1, r1, r2
 8001170:	4688      	mov	r8, r1
 8001172:	45c1      	cmp	r9, r8
 8001174:	41bf      	sbcs	r7, r7
 8001176:	1af1      	subs	r1, r6, r3
 8001178:	427f      	negs	r7, r7
 800117a:	1bc9      	subs	r1, r1, r7
 800117c:	020f      	lsls	r7, r1, #8
 800117e:	d461      	bmi.n	8001244 <__aeabi_dadd+0x4c0>
 8001180:	4647      	mov	r7, r8
 8001182:	430f      	orrs	r7, r1
 8001184:	d100      	bne.n	8001188 <__aeabi_dadd+0x404>
 8001186:	e0bd      	b.n	8001304 <__aeabi_dadd+0x580>
 8001188:	000e      	movs	r6, r1
 800118a:	4647      	mov	r7, r8
 800118c:	e651      	b.n	8000e32 <__aeabi_dadd+0xae>
 800118e:	4cb5      	ldr	r4, [pc, #724]	@ (8001464 <__aeabi_dadd+0x6e0>)
 8001190:	45a0      	cmp	r8, r4
 8001192:	d100      	bne.n	8001196 <__aeabi_dadd+0x412>
 8001194:	e100      	b.n	8001398 <__aeabi_dadd+0x614>
 8001196:	2701      	movs	r7, #1
 8001198:	2938      	cmp	r1, #56	@ 0x38
 800119a:	dd00      	ble.n	800119e <__aeabi_dadd+0x41a>
 800119c:	e6b8      	b.n	8000f10 <__aeabi_dadd+0x18c>
 800119e:	2480      	movs	r4, #128	@ 0x80
 80011a0:	0424      	lsls	r4, r4, #16
 80011a2:	4326      	orrs	r6, r4
 80011a4:	e6a3      	b.n	8000eee <__aeabi_dadd+0x16a>
 80011a6:	4eb0      	ldr	r6, [pc, #704]	@ (8001468 <__aeabi_dadd+0x6e4>)
 80011a8:	1ae4      	subs	r4, r4, r3
 80011aa:	4016      	ands	r6, r2
 80011ac:	077b      	lsls	r3, r7, #29
 80011ae:	d000      	beq.n	80011b2 <__aeabi_dadd+0x42e>
 80011b0:	e73f      	b.n	8001032 <__aeabi_dadd+0x2ae>
 80011b2:	e743      	b.n	800103c <__aeabi_dadd+0x2b8>
 80011b4:	000f      	movs	r7, r1
 80011b6:	0018      	movs	r0, r3
 80011b8:	3f20      	subs	r7, #32
 80011ba:	40f8      	lsrs	r0, r7
 80011bc:	4684      	mov	ip, r0
 80011be:	2920      	cmp	r1, #32
 80011c0:	d003      	beq.n	80011ca <__aeabi_dadd+0x446>
 80011c2:	2740      	movs	r7, #64	@ 0x40
 80011c4:	1a79      	subs	r1, r7, r1
 80011c6:	408b      	lsls	r3, r1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	1e53      	subs	r3, r2, #1
 80011cc:	419a      	sbcs	r2, r3
 80011ce:	4663      	mov	r3, ip
 80011d0:	0017      	movs	r7, r2
 80011d2:	431f      	orrs	r7, r3
 80011d4:	e622      	b.n	8000e1c <__aeabi_dadd+0x98>
 80011d6:	48a4      	ldr	r0, [pc, #656]	@ (8001468 <__aeabi_dadd+0x6e4>)
 80011d8:	1ae1      	subs	r1, r4, r3
 80011da:	4010      	ands	r0, r2
 80011dc:	0747      	lsls	r7, r0, #29
 80011de:	08c0      	lsrs	r0, r0, #3
 80011e0:	e707      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 80011e2:	0034      	movs	r4, r6
 80011e4:	4648      	mov	r0, r9
 80011e6:	4304      	orrs	r4, r0
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x468>
 80011ea:	e0fa      	b.n	80013e2 <__aeabi_dadd+0x65e>
 80011ec:	1e4c      	subs	r4, r1, #1
 80011ee:	2901      	cmp	r1, #1
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dadd+0x470>
 80011f2:	e0d7      	b.n	80013a4 <__aeabi_dadd+0x620>
 80011f4:	4f9b      	ldr	r7, [pc, #620]	@ (8001464 <__aeabi_dadd+0x6e0>)
 80011f6:	42b9      	cmp	r1, r7
 80011f8:	d100      	bne.n	80011fc <__aeabi_dadd+0x478>
 80011fa:	e0e2      	b.n	80013c2 <__aeabi_dadd+0x63e>
 80011fc:	2701      	movs	r7, #1
 80011fe:	2c38      	cmp	r4, #56	@ 0x38
 8001200:	dd00      	ble.n	8001204 <__aeabi_dadd+0x480>
 8001202:	e74f      	b.n	80010a4 <__aeabi_dadd+0x320>
 8001204:	0021      	movs	r1, r4
 8001206:	e73c      	b.n	8001082 <__aeabi_dadd+0x2fe>
 8001208:	4c96      	ldr	r4, [pc, #600]	@ (8001464 <__aeabi_dadd+0x6e0>)
 800120a:	42a1      	cmp	r1, r4
 800120c:	d100      	bne.n	8001210 <__aeabi_dadd+0x48c>
 800120e:	e0dd      	b.n	80013cc <__aeabi_dadd+0x648>
 8001210:	444a      	add	r2, r9
 8001212:	454a      	cmp	r2, r9
 8001214:	4180      	sbcs	r0, r0
 8001216:	18f3      	adds	r3, r6, r3
 8001218:	4240      	negs	r0, r0
 800121a:	1818      	adds	r0, r3, r0
 800121c:	07c7      	lsls	r7, r0, #31
 800121e:	0852      	lsrs	r2, r2, #1
 8001220:	4317      	orrs	r7, r2
 8001222:	0846      	lsrs	r6, r0, #1
 8001224:	0752      	lsls	r2, r2, #29
 8001226:	d005      	beq.n	8001234 <__aeabi_dadd+0x4b0>
 8001228:	220f      	movs	r2, #15
 800122a:	000c      	movs	r4, r1
 800122c:	403a      	ands	r2, r7
 800122e:	2a04      	cmp	r2, #4
 8001230:	d000      	beq.n	8001234 <__aeabi_dadd+0x4b0>
 8001232:	e62c      	b.n	8000e8e <__aeabi_dadd+0x10a>
 8001234:	0776      	lsls	r6, r6, #29
 8001236:	08ff      	lsrs	r7, r7, #3
 8001238:	4337      	orrs	r7, r6
 800123a:	0900      	lsrs	r0, r0, #4
 800123c:	e6d9      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 800123e:	2700      	movs	r7, #0
 8001240:	2600      	movs	r6, #0
 8001242:	e6e8      	b.n	8001016 <__aeabi_dadd+0x292>
 8001244:	4649      	mov	r1, r9
 8001246:	1a57      	subs	r7, r2, r1
 8001248:	42ba      	cmp	r2, r7
 800124a:	4192      	sbcs	r2, r2
 800124c:	1b9e      	subs	r6, r3, r6
 800124e:	4252      	negs	r2, r2
 8001250:	4665      	mov	r5, ip
 8001252:	1ab6      	subs	r6, r6, r2
 8001254:	e5ed      	b.n	8000e32 <__aeabi_dadd+0xae>
 8001256:	2900      	cmp	r1, #0
 8001258:	d000      	beq.n	800125c <__aeabi_dadd+0x4d8>
 800125a:	e0c6      	b.n	80013ea <__aeabi_dadd+0x666>
 800125c:	2f00      	cmp	r7, #0
 800125e:	d167      	bne.n	8001330 <__aeabi_dadd+0x5ac>
 8001260:	2680      	movs	r6, #128	@ 0x80
 8001262:	2500      	movs	r5, #0
 8001264:	4c7f      	ldr	r4, [pc, #508]	@ (8001464 <__aeabi_dadd+0x6e0>)
 8001266:	0336      	lsls	r6, r6, #12
 8001268:	e6d5      	b.n	8001016 <__aeabi_dadd+0x292>
 800126a:	4665      	mov	r5, ip
 800126c:	000c      	movs	r4, r1
 800126e:	001e      	movs	r6, r3
 8001270:	08d0      	lsrs	r0, r2, #3
 8001272:	e6e4      	b.n	800103e <__aeabi_dadd+0x2ba>
 8001274:	444a      	add	r2, r9
 8001276:	454a      	cmp	r2, r9
 8001278:	4180      	sbcs	r0, r0
 800127a:	18f3      	adds	r3, r6, r3
 800127c:	4240      	negs	r0, r0
 800127e:	1818      	adds	r0, r3, r0
 8001280:	0011      	movs	r1, r2
 8001282:	0203      	lsls	r3, r0, #8
 8001284:	d400      	bmi.n	8001288 <__aeabi_dadd+0x504>
 8001286:	e096      	b.n	80013b6 <__aeabi_dadd+0x632>
 8001288:	4b77      	ldr	r3, [pc, #476]	@ (8001468 <__aeabi_dadd+0x6e4>)
 800128a:	0849      	lsrs	r1, r1, #1
 800128c:	4018      	ands	r0, r3
 800128e:	07c3      	lsls	r3, r0, #31
 8001290:	430b      	orrs	r3, r1
 8001292:	0844      	lsrs	r4, r0, #1
 8001294:	0749      	lsls	r1, r1, #29
 8001296:	d100      	bne.n	800129a <__aeabi_dadd+0x516>
 8001298:	e129      	b.n	80014ee <__aeabi_dadd+0x76a>
 800129a:	220f      	movs	r2, #15
 800129c:	401a      	ands	r2, r3
 800129e:	2a04      	cmp	r2, #4
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x520>
 80012a2:	e0ea      	b.n	800147a <__aeabi_dadd+0x6f6>
 80012a4:	1d1f      	adds	r7, r3, #4
 80012a6:	429f      	cmp	r7, r3
 80012a8:	41b6      	sbcs	r6, r6
 80012aa:	4276      	negs	r6, r6
 80012ac:	1936      	adds	r6, r6, r4
 80012ae:	2402      	movs	r4, #2
 80012b0:	e6c4      	b.n	800103c <__aeabi_dadd+0x2b8>
 80012b2:	4649      	mov	r1, r9
 80012b4:	1a8f      	subs	r7, r1, r2
 80012b6:	45b9      	cmp	r9, r7
 80012b8:	4180      	sbcs	r0, r0
 80012ba:	1af6      	subs	r6, r6, r3
 80012bc:	4240      	negs	r0, r0
 80012be:	1a36      	subs	r6, r6, r0
 80012c0:	0233      	lsls	r3, r6, #8
 80012c2:	d406      	bmi.n	80012d2 <__aeabi_dadd+0x54e>
 80012c4:	0773      	lsls	r3, r6, #29
 80012c6:	08ff      	lsrs	r7, r7, #3
 80012c8:	2101      	movs	r1, #1
 80012ca:	431f      	orrs	r7, r3
 80012cc:	08f0      	lsrs	r0, r6, #3
 80012ce:	e690      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 80012d0:	4665      	mov	r5, ip
 80012d2:	2401      	movs	r4, #1
 80012d4:	e5ab      	b.n	8000e2e <__aeabi_dadd+0xaa>
 80012d6:	464b      	mov	r3, r9
 80012d8:	0777      	lsls	r7, r6, #29
 80012da:	08d8      	lsrs	r0, r3, #3
 80012dc:	4307      	orrs	r7, r0
 80012de:	08f0      	lsrs	r0, r6, #3
 80012e0:	e6b4      	b.n	800104c <__aeabi_dadd+0x2c8>
 80012e2:	000f      	movs	r7, r1
 80012e4:	0018      	movs	r0, r3
 80012e6:	3f20      	subs	r7, #32
 80012e8:	40f8      	lsrs	r0, r7
 80012ea:	4684      	mov	ip, r0
 80012ec:	2920      	cmp	r1, #32
 80012ee:	d003      	beq.n	80012f8 <__aeabi_dadd+0x574>
 80012f0:	2740      	movs	r7, #64	@ 0x40
 80012f2:	1a79      	subs	r1, r7, r1
 80012f4:	408b      	lsls	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	1e53      	subs	r3, r2, #1
 80012fa:	419a      	sbcs	r2, r3
 80012fc:	4663      	mov	r3, ip
 80012fe:	0017      	movs	r7, r2
 8001300:	431f      	orrs	r7, r3
 8001302:	e635      	b.n	8000f70 <__aeabi_dadd+0x1ec>
 8001304:	2500      	movs	r5, #0
 8001306:	2400      	movs	r4, #0
 8001308:	2600      	movs	r6, #0
 800130a:	e684      	b.n	8001016 <__aeabi_dadd+0x292>
 800130c:	000c      	movs	r4, r1
 800130e:	0035      	movs	r5, r6
 8001310:	3c20      	subs	r4, #32
 8001312:	40e5      	lsrs	r5, r4
 8001314:	2920      	cmp	r1, #32
 8001316:	d005      	beq.n	8001324 <__aeabi_dadd+0x5a0>
 8001318:	2440      	movs	r4, #64	@ 0x40
 800131a:	1a61      	subs	r1, r4, r1
 800131c:	408e      	lsls	r6, r1
 800131e:	4649      	mov	r1, r9
 8001320:	4331      	orrs	r1, r6
 8001322:	4689      	mov	r9, r1
 8001324:	4648      	mov	r0, r9
 8001326:	1e41      	subs	r1, r0, #1
 8001328:	4188      	sbcs	r0, r1
 800132a:	0007      	movs	r7, r0
 800132c:	432f      	orrs	r7, r5
 800132e:	e5ef      	b.n	8000f10 <__aeabi_dadd+0x18c>
 8001330:	08d2      	lsrs	r2, r2, #3
 8001332:	075f      	lsls	r7, r3, #29
 8001334:	4665      	mov	r5, ip
 8001336:	4317      	orrs	r7, r2
 8001338:	08d8      	lsrs	r0, r3, #3
 800133a:	e687      	b.n	800104c <__aeabi_dadd+0x2c8>
 800133c:	1a17      	subs	r7, r2, r0
 800133e:	42ba      	cmp	r2, r7
 8001340:	4192      	sbcs	r2, r2
 8001342:	1b9e      	subs	r6, r3, r6
 8001344:	4252      	negs	r2, r2
 8001346:	1ab6      	subs	r6, r6, r2
 8001348:	0233      	lsls	r3, r6, #8
 800134a:	d4c1      	bmi.n	80012d0 <__aeabi_dadd+0x54c>
 800134c:	0773      	lsls	r3, r6, #29
 800134e:	08ff      	lsrs	r7, r7, #3
 8001350:	4665      	mov	r5, ip
 8001352:	2101      	movs	r1, #1
 8001354:	431f      	orrs	r7, r3
 8001356:	08f0      	lsrs	r0, r6, #3
 8001358:	e64b      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 800135a:	2f00      	cmp	r7, #0
 800135c:	d07b      	beq.n	8001456 <__aeabi_dadd+0x6d2>
 800135e:	4665      	mov	r5, ip
 8001360:	001e      	movs	r6, r3
 8001362:	4691      	mov	r9, r2
 8001364:	e63f      	b.n	8000fe6 <__aeabi_dadd+0x262>
 8001366:	1a81      	subs	r1, r0, r2
 8001368:	4688      	mov	r8, r1
 800136a:	45c1      	cmp	r9, r8
 800136c:	41a4      	sbcs	r4, r4
 800136e:	1af1      	subs	r1, r6, r3
 8001370:	4264      	negs	r4, r4
 8001372:	1b09      	subs	r1, r1, r4
 8001374:	2480      	movs	r4, #128	@ 0x80
 8001376:	0424      	lsls	r4, r4, #16
 8001378:	4221      	tst	r1, r4
 800137a:	d077      	beq.n	800146c <__aeabi_dadd+0x6e8>
 800137c:	1a10      	subs	r0, r2, r0
 800137e:	4282      	cmp	r2, r0
 8001380:	4192      	sbcs	r2, r2
 8001382:	0007      	movs	r7, r0
 8001384:	1b9e      	subs	r6, r3, r6
 8001386:	4252      	negs	r2, r2
 8001388:	1ab6      	subs	r6, r6, r2
 800138a:	4337      	orrs	r7, r6
 800138c:	d000      	beq.n	8001390 <__aeabi_dadd+0x60c>
 800138e:	e0a0      	b.n	80014d2 <__aeabi_dadd+0x74e>
 8001390:	4665      	mov	r5, ip
 8001392:	2400      	movs	r4, #0
 8001394:	2600      	movs	r6, #0
 8001396:	e63e      	b.n	8001016 <__aeabi_dadd+0x292>
 8001398:	075f      	lsls	r7, r3, #29
 800139a:	08d2      	lsrs	r2, r2, #3
 800139c:	4665      	mov	r5, ip
 800139e:	4317      	orrs	r7, r2
 80013a0:	08d8      	lsrs	r0, r3, #3
 80013a2:	e653      	b.n	800104c <__aeabi_dadd+0x2c8>
 80013a4:	1881      	adds	r1, r0, r2
 80013a6:	4291      	cmp	r1, r2
 80013a8:	4192      	sbcs	r2, r2
 80013aa:	18f0      	adds	r0, r6, r3
 80013ac:	4252      	negs	r2, r2
 80013ae:	1880      	adds	r0, r0, r2
 80013b0:	0203      	lsls	r3, r0, #8
 80013b2:	d500      	bpl.n	80013b6 <__aeabi_dadd+0x632>
 80013b4:	e768      	b.n	8001288 <__aeabi_dadd+0x504>
 80013b6:	0747      	lsls	r7, r0, #29
 80013b8:	08c9      	lsrs	r1, r1, #3
 80013ba:	430f      	orrs	r7, r1
 80013bc:	08c0      	lsrs	r0, r0, #3
 80013be:	2101      	movs	r1, #1
 80013c0:	e617      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 80013c2:	08d2      	lsrs	r2, r2, #3
 80013c4:	075f      	lsls	r7, r3, #29
 80013c6:	4317      	orrs	r7, r2
 80013c8:	08d8      	lsrs	r0, r3, #3
 80013ca:	e63f      	b.n	800104c <__aeabi_dadd+0x2c8>
 80013cc:	000c      	movs	r4, r1
 80013ce:	2600      	movs	r6, #0
 80013d0:	2700      	movs	r7, #0
 80013d2:	e620      	b.n	8001016 <__aeabi_dadd+0x292>
 80013d4:	2900      	cmp	r1, #0
 80013d6:	d156      	bne.n	8001486 <__aeabi_dadd+0x702>
 80013d8:	075f      	lsls	r7, r3, #29
 80013da:	08d2      	lsrs	r2, r2, #3
 80013dc:	4317      	orrs	r7, r2
 80013de:	08d8      	lsrs	r0, r3, #3
 80013e0:	e634      	b.n	800104c <__aeabi_dadd+0x2c8>
 80013e2:	000c      	movs	r4, r1
 80013e4:	001e      	movs	r6, r3
 80013e6:	08d0      	lsrs	r0, r2, #3
 80013e8:	e629      	b.n	800103e <__aeabi_dadd+0x2ba>
 80013ea:	08c1      	lsrs	r1, r0, #3
 80013ec:	0770      	lsls	r0, r6, #29
 80013ee:	4301      	orrs	r1, r0
 80013f0:	08f0      	lsrs	r0, r6, #3
 80013f2:	2f00      	cmp	r7, #0
 80013f4:	d062      	beq.n	80014bc <__aeabi_dadd+0x738>
 80013f6:	2480      	movs	r4, #128	@ 0x80
 80013f8:	0324      	lsls	r4, r4, #12
 80013fa:	4220      	tst	r0, r4
 80013fc:	d007      	beq.n	800140e <__aeabi_dadd+0x68a>
 80013fe:	08de      	lsrs	r6, r3, #3
 8001400:	4226      	tst	r6, r4
 8001402:	d104      	bne.n	800140e <__aeabi_dadd+0x68a>
 8001404:	4665      	mov	r5, ip
 8001406:	0030      	movs	r0, r6
 8001408:	08d1      	lsrs	r1, r2, #3
 800140a:	075b      	lsls	r3, r3, #29
 800140c:	4319      	orrs	r1, r3
 800140e:	0f4f      	lsrs	r7, r1, #29
 8001410:	00c9      	lsls	r1, r1, #3
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	077f      	lsls	r7, r7, #29
 8001416:	430f      	orrs	r7, r1
 8001418:	e618      	b.n	800104c <__aeabi_dadd+0x2c8>
 800141a:	000c      	movs	r4, r1
 800141c:	0030      	movs	r0, r6
 800141e:	3c20      	subs	r4, #32
 8001420:	40e0      	lsrs	r0, r4
 8001422:	4684      	mov	ip, r0
 8001424:	2920      	cmp	r1, #32
 8001426:	d005      	beq.n	8001434 <__aeabi_dadd+0x6b0>
 8001428:	2440      	movs	r4, #64	@ 0x40
 800142a:	1a61      	subs	r1, r4, r1
 800142c:	408e      	lsls	r6, r1
 800142e:	4649      	mov	r1, r9
 8001430:	4331      	orrs	r1, r6
 8001432:	4689      	mov	r9, r1
 8001434:	4648      	mov	r0, r9
 8001436:	1e41      	subs	r1, r0, #1
 8001438:	4188      	sbcs	r0, r1
 800143a:	4661      	mov	r1, ip
 800143c:	0007      	movs	r7, r0
 800143e:	430f      	orrs	r7, r1
 8001440:	e630      	b.n	80010a4 <__aeabi_dadd+0x320>
 8001442:	2120      	movs	r1, #32
 8001444:	2700      	movs	r7, #0
 8001446:	1a09      	subs	r1, r1, r0
 8001448:	e50e      	b.n	8000e68 <__aeabi_dadd+0xe4>
 800144a:	001e      	movs	r6, r3
 800144c:	2f00      	cmp	r7, #0
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x6ce>
 8001450:	e522      	b.n	8000e98 <__aeabi_dadd+0x114>
 8001452:	2400      	movs	r4, #0
 8001454:	e758      	b.n	8001308 <__aeabi_dadd+0x584>
 8001456:	2500      	movs	r5, #0
 8001458:	2400      	movs	r4, #0
 800145a:	2600      	movs	r6, #0
 800145c:	e5db      	b.n	8001016 <__aeabi_dadd+0x292>
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	000007fe 	.word	0x000007fe
 8001464:	000007ff 	.word	0x000007ff
 8001468:	ff7fffff 	.word	0xff7fffff
 800146c:	4647      	mov	r7, r8
 800146e:	430f      	orrs	r7, r1
 8001470:	d100      	bne.n	8001474 <__aeabi_dadd+0x6f0>
 8001472:	e747      	b.n	8001304 <__aeabi_dadd+0x580>
 8001474:	000e      	movs	r6, r1
 8001476:	46c1      	mov	r9, r8
 8001478:	e5b5      	b.n	8000fe6 <__aeabi_dadd+0x262>
 800147a:	08df      	lsrs	r7, r3, #3
 800147c:	0764      	lsls	r4, r4, #29
 800147e:	2102      	movs	r1, #2
 8001480:	4327      	orrs	r7, r4
 8001482:	0900      	lsrs	r0, r0, #4
 8001484:	e5b5      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 8001486:	0019      	movs	r1, r3
 8001488:	08c0      	lsrs	r0, r0, #3
 800148a:	0777      	lsls	r7, r6, #29
 800148c:	4307      	orrs	r7, r0
 800148e:	4311      	orrs	r1, r2
 8001490:	08f0      	lsrs	r0, r6, #3
 8001492:	2900      	cmp	r1, #0
 8001494:	d100      	bne.n	8001498 <__aeabi_dadd+0x714>
 8001496:	e5d9      	b.n	800104c <__aeabi_dadd+0x2c8>
 8001498:	2180      	movs	r1, #128	@ 0x80
 800149a:	0309      	lsls	r1, r1, #12
 800149c:	4208      	tst	r0, r1
 800149e:	d007      	beq.n	80014b0 <__aeabi_dadd+0x72c>
 80014a0:	08dc      	lsrs	r4, r3, #3
 80014a2:	420c      	tst	r4, r1
 80014a4:	d104      	bne.n	80014b0 <__aeabi_dadd+0x72c>
 80014a6:	08d2      	lsrs	r2, r2, #3
 80014a8:	075b      	lsls	r3, r3, #29
 80014aa:	431a      	orrs	r2, r3
 80014ac:	0017      	movs	r7, r2
 80014ae:	0020      	movs	r0, r4
 80014b0:	0f7b      	lsrs	r3, r7, #29
 80014b2:	00ff      	lsls	r7, r7, #3
 80014b4:	08ff      	lsrs	r7, r7, #3
 80014b6:	075b      	lsls	r3, r3, #29
 80014b8:	431f      	orrs	r7, r3
 80014ba:	e5c7      	b.n	800104c <__aeabi_dadd+0x2c8>
 80014bc:	000f      	movs	r7, r1
 80014be:	e5c5      	b.n	800104c <__aeabi_dadd+0x2c8>
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <__aeabi_dadd+0x788>)
 80014c2:	08d2      	lsrs	r2, r2, #3
 80014c4:	4033      	ands	r3, r6
 80014c6:	075f      	lsls	r7, r3, #29
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	2401      	movs	r4, #1
 80014cc:	4317      	orrs	r7, r2
 80014ce:	0b1e      	lsrs	r6, r3, #12
 80014d0:	e5a1      	b.n	8001016 <__aeabi_dadd+0x292>
 80014d2:	4226      	tst	r6, r4
 80014d4:	d012      	beq.n	80014fc <__aeabi_dadd+0x778>
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <__aeabi_dadd+0x788>)
 80014d8:	4665      	mov	r5, ip
 80014da:	0002      	movs	r2, r0
 80014dc:	2401      	movs	r4, #1
 80014de:	401e      	ands	r6, r3
 80014e0:	e4e6      	b.n	8000eb0 <__aeabi_dadd+0x12c>
 80014e2:	0021      	movs	r1, r4
 80014e4:	e585      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 80014e6:	0017      	movs	r7, r2
 80014e8:	e5a8      	b.n	800103c <__aeabi_dadd+0x2b8>
 80014ea:	003a      	movs	r2, r7
 80014ec:	e4d4      	b.n	8000e98 <__aeabi_dadd+0x114>
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	0764      	lsls	r4, r4, #29
 80014f2:	431c      	orrs	r4, r3
 80014f4:	0027      	movs	r7, r4
 80014f6:	2102      	movs	r1, #2
 80014f8:	0900      	lsrs	r0, r0, #4
 80014fa:	e57a      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 80014fc:	08c0      	lsrs	r0, r0, #3
 80014fe:	0777      	lsls	r7, r6, #29
 8001500:	4307      	orrs	r7, r0
 8001502:	4665      	mov	r5, ip
 8001504:	2100      	movs	r1, #0
 8001506:	08f0      	lsrs	r0, r6, #3
 8001508:	e573      	b.n	8000ff2 <__aeabi_dadd+0x26e>
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	ff7fffff 	.word	0xff7fffff

08001510 <__aeabi_ddiv>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	46de      	mov	lr, fp
 8001514:	4645      	mov	r5, r8
 8001516:	4657      	mov	r7, sl
 8001518:	464e      	mov	r6, r9
 800151a:	b5e0      	push	{r5, r6, r7, lr}
 800151c:	b087      	sub	sp, #28
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	030b      	lsls	r3, r1, #12
 8001524:	0b1b      	lsrs	r3, r3, #12
 8001526:	469b      	mov	fp, r3
 8001528:	0fca      	lsrs	r2, r1, #31
 800152a:	004b      	lsls	r3, r1, #1
 800152c:	0004      	movs	r4, r0
 800152e:	4680      	mov	r8, r0
 8001530:	0d5b      	lsrs	r3, r3, #21
 8001532:	9202      	str	r2, [sp, #8]
 8001534:	d100      	bne.n	8001538 <__aeabi_ddiv+0x28>
 8001536:	e098      	b.n	800166a <__aeabi_ddiv+0x15a>
 8001538:	4a7c      	ldr	r2, [pc, #496]	@ (800172c <__aeabi_ddiv+0x21c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d037      	beq.n	80015ae <__aeabi_ddiv+0x9e>
 800153e:	4659      	mov	r1, fp
 8001540:	0f42      	lsrs	r2, r0, #29
 8001542:	00c9      	lsls	r1, r1, #3
 8001544:	430a      	orrs	r2, r1
 8001546:	2180      	movs	r1, #128	@ 0x80
 8001548:	0409      	lsls	r1, r1, #16
 800154a:	4311      	orrs	r1, r2
 800154c:	00c2      	lsls	r2, r0, #3
 800154e:	4690      	mov	r8, r2
 8001550:	4a77      	ldr	r2, [pc, #476]	@ (8001730 <__aeabi_ddiv+0x220>)
 8001552:	4689      	mov	r9, r1
 8001554:	4692      	mov	sl, r2
 8001556:	449a      	add	sl, r3
 8001558:	2300      	movs	r3, #0
 800155a:	2400      	movs	r4, #0
 800155c:	9303      	str	r3, [sp, #12]
 800155e:	9e00      	ldr	r6, [sp, #0]
 8001560:	9f01      	ldr	r7, [sp, #4]
 8001562:	033b      	lsls	r3, r7, #12
 8001564:	0b1b      	lsrs	r3, r3, #12
 8001566:	469b      	mov	fp, r3
 8001568:	007b      	lsls	r3, r7, #1
 800156a:	0030      	movs	r0, r6
 800156c:	0d5b      	lsrs	r3, r3, #21
 800156e:	0ffd      	lsrs	r5, r7, #31
 8001570:	2b00      	cmp	r3, #0
 8001572:	d059      	beq.n	8001628 <__aeabi_ddiv+0x118>
 8001574:	4a6d      	ldr	r2, [pc, #436]	@ (800172c <__aeabi_ddiv+0x21c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d048      	beq.n	800160c <__aeabi_ddiv+0xfc>
 800157a:	4659      	mov	r1, fp
 800157c:	0f72      	lsrs	r2, r6, #29
 800157e:	00c9      	lsls	r1, r1, #3
 8001580:	430a      	orrs	r2, r1
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	0409      	lsls	r1, r1, #16
 8001586:	4311      	orrs	r1, r2
 8001588:	468b      	mov	fp, r1
 800158a:	4969      	ldr	r1, [pc, #420]	@ (8001730 <__aeabi_ddiv+0x220>)
 800158c:	00f2      	lsls	r2, r6, #3
 800158e:	468c      	mov	ip, r1
 8001590:	4651      	mov	r1, sl
 8001592:	4463      	add	r3, ip
 8001594:	1acb      	subs	r3, r1, r3
 8001596:	469a      	mov	sl, r3
 8001598:	2100      	movs	r1, #0
 800159a:	9e02      	ldr	r6, [sp, #8]
 800159c:	406e      	eors	r6, r5
 800159e:	b2f6      	uxtb	r6, r6
 80015a0:	2c0f      	cmp	r4, #15
 80015a2:	d900      	bls.n	80015a6 <__aeabi_ddiv+0x96>
 80015a4:	e0ce      	b.n	8001744 <__aeabi_ddiv+0x234>
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <__aeabi_ddiv+0x224>)
 80015a8:	00a4      	lsls	r4, r4, #2
 80015aa:	591b      	ldr	r3, [r3, r4]
 80015ac:	469f      	mov	pc, r3
 80015ae:	465a      	mov	r2, fp
 80015b0:	4302      	orrs	r2, r0
 80015b2:	4691      	mov	r9, r2
 80015b4:	d000      	beq.n	80015b8 <__aeabi_ddiv+0xa8>
 80015b6:	e090      	b.n	80016da <__aeabi_ddiv+0x1ca>
 80015b8:	469a      	mov	sl, r3
 80015ba:	2302      	movs	r3, #2
 80015bc:	4690      	mov	r8, r2
 80015be:	2408      	movs	r4, #8
 80015c0:	9303      	str	r3, [sp, #12]
 80015c2:	e7cc      	b.n	800155e <__aeabi_ddiv+0x4e>
 80015c4:	46cb      	mov	fp, r9
 80015c6:	4642      	mov	r2, r8
 80015c8:	9d02      	ldr	r5, [sp, #8]
 80015ca:	9903      	ldr	r1, [sp, #12]
 80015cc:	2902      	cmp	r1, #2
 80015ce:	d100      	bne.n	80015d2 <__aeabi_ddiv+0xc2>
 80015d0:	e1de      	b.n	8001990 <__aeabi_ddiv+0x480>
 80015d2:	2903      	cmp	r1, #3
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0xc8>
 80015d6:	e08d      	b.n	80016f4 <__aeabi_ddiv+0x1e4>
 80015d8:	2901      	cmp	r1, #1
 80015da:	d000      	beq.n	80015de <__aeabi_ddiv+0xce>
 80015dc:	e179      	b.n	80018d2 <__aeabi_ddiv+0x3c2>
 80015de:	002e      	movs	r6, r5
 80015e0:	2200      	movs	r2, #0
 80015e2:	2300      	movs	r3, #0
 80015e4:	2400      	movs	r4, #0
 80015e6:	4690      	mov	r8, r2
 80015e8:	051b      	lsls	r3, r3, #20
 80015ea:	4323      	orrs	r3, r4
 80015ec:	07f6      	lsls	r6, r6, #31
 80015ee:	4333      	orrs	r3, r6
 80015f0:	4640      	mov	r0, r8
 80015f2:	0019      	movs	r1, r3
 80015f4:	b007      	add	sp, #28
 80015f6:	bcf0      	pop	{r4, r5, r6, r7}
 80015f8:	46bb      	mov	fp, r7
 80015fa:	46b2      	mov	sl, r6
 80015fc:	46a9      	mov	r9, r5
 80015fe:	46a0      	mov	r8, r4
 8001600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001602:	2200      	movs	r2, #0
 8001604:	2400      	movs	r4, #0
 8001606:	4690      	mov	r8, r2
 8001608:	4b48      	ldr	r3, [pc, #288]	@ (800172c <__aeabi_ddiv+0x21c>)
 800160a:	e7ed      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 800160c:	465a      	mov	r2, fp
 800160e:	9b00      	ldr	r3, [sp, #0]
 8001610:	431a      	orrs	r2, r3
 8001612:	4b49      	ldr	r3, [pc, #292]	@ (8001738 <__aeabi_ddiv+0x228>)
 8001614:	469c      	mov	ip, r3
 8001616:	44e2      	add	sl, ip
 8001618:	2a00      	cmp	r2, #0
 800161a:	d159      	bne.n	80016d0 <__aeabi_ddiv+0x1c0>
 800161c:	2302      	movs	r3, #2
 800161e:	431c      	orrs	r4, r3
 8001620:	2300      	movs	r3, #0
 8001622:	2102      	movs	r1, #2
 8001624:	469b      	mov	fp, r3
 8001626:	e7b8      	b.n	800159a <__aeabi_ddiv+0x8a>
 8001628:	465a      	mov	r2, fp
 800162a:	9b00      	ldr	r3, [sp, #0]
 800162c:	431a      	orrs	r2, r3
 800162e:	d049      	beq.n	80016c4 <__aeabi_ddiv+0x1b4>
 8001630:	465b      	mov	r3, fp
 8001632:	2b00      	cmp	r3, #0
 8001634:	d100      	bne.n	8001638 <__aeabi_ddiv+0x128>
 8001636:	e19c      	b.n	8001972 <__aeabi_ddiv+0x462>
 8001638:	4658      	mov	r0, fp
 800163a:	f001 fb7f 	bl	8002d3c <__clzsi2>
 800163e:	0002      	movs	r2, r0
 8001640:	0003      	movs	r3, r0
 8001642:	3a0b      	subs	r2, #11
 8001644:	271d      	movs	r7, #29
 8001646:	9e00      	ldr	r6, [sp, #0]
 8001648:	1aba      	subs	r2, r7, r2
 800164a:	0019      	movs	r1, r3
 800164c:	4658      	mov	r0, fp
 800164e:	40d6      	lsrs	r6, r2
 8001650:	3908      	subs	r1, #8
 8001652:	4088      	lsls	r0, r1
 8001654:	0032      	movs	r2, r6
 8001656:	4302      	orrs	r2, r0
 8001658:	4693      	mov	fp, r2
 800165a:	9a00      	ldr	r2, [sp, #0]
 800165c:	408a      	lsls	r2, r1
 800165e:	4937      	ldr	r1, [pc, #220]	@ (800173c <__aeabi_ddiv+0x22c>)
 8001660:	4453      	add	r3, sl
 8001662:	468a      	mov	sl, r1
 8001664:	2100      	movs	r1, #0
 8001666:	449a      	add	sl, r3
 8001668:	e797      	b.n	800159a <__aeabi_ddiv+0x8a>
 800166a:	465b      	mov	r3, fp
 800166c:	4303      	orrs	r3, r0
 800166e:	4699      	mov	r9, r3
 8001670:	d021      	beq.n	80016b6 <__aeabi_ddiv+0x1a6>
 8001672:	465b      	mov	r3, fp
 8001674:	2b00      	cmp	r3, #0
 8001676:	d100      	bne.n	800167a <__aeabi_ddiv+0x16a>
 8001678:	e169      	b.n	800194e <__aeabi_ddiv+0x43e>
 800167a:	4658      	mov	r0, fp
 800167c:	f001 fb5e 	bl	8002d3c <__clzsi2>
 8001680:	230b      	movs	r3, #11
 8001682:	425b      	negs	r3, r3
 8001684:	469c      	mov	ip, r3
 8001686:	0002      	movs	r2, r0
 8001688:	4484      	add	ip, r0
 800168a:	4666      	mov	r6, ip
 800168c:	231d      	movs	r3, #29
 800168e:	1b9b      	subs	r3, r3, r6
 8001690:	0026      	movs	r6, r4
 8001692:	0011      	movs	r1, r2
 8001694:	4658      	mov	r0, fp
 8001696:	40de      	lsrs	r6, r3
 8001698:	3908      	subs	r1, #8
 800169a:	4088      	lsls	r0, r1
 800169c:	0033      	movs	r3, r6
 800169e:	4303      	orrs	r3, r0
 80016a0:	4699      	mov	r9, r3
 80016a2:	0023      	movs	r3, r4
 80016a4:	408b      	lsls	r3, r1
 80016a6:	4698      	mov	r8, r3
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <__aeabi_ddiv+0x230>)
 80016aa:	2400      	movs	r4, #0
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	469a      	mov	sl, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	9303      	str	r3, [sp, #12]
 80016b4:	e753      	b.n	800155e <__aeabi_ddiv+0x4e>
 80016b6:	2300      	movs	r3, #0
 80016b8:	4698      	mov	r8, r3
 80016ba:	469a      	mov	sl, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	2404      	movs	r4, #4
 80016c0:	9303      	str	r3, [sp, #12]
 80016c2:	e74c      	b.n	800155e <__aeabi_ddiv+0x4e>
 80016c4:	2301      	movs	r3, #1
 80016c6:	431c      	orrs	r4, r3
 80016c8:	2300      	movs	r3, #0
 80016ca:	2101      	movs	r1, #1
 80016cc:	469b      	mov	fp, r3
 80016ce:	e764      	b.n	800159a <__aeabi_ddiv+0x8a>
 80016d0:	2303      	movs	r3, #3
 80016d2:	0032      	movs	r2, r6
 80016d4:	2103      	movs	r1, #3
 80016d6:	431c      	orrs	r4, r3
 80016d8:	e75f      	b.n	800159a <__aeabi_ddiv+0x8a>
 80016da:	469a      	mov	sl, r3
 80016dc:	2303      	movs	r3, #3
 80016de:	46d9      	mov	r9, fp
 80016e0:	240c      	movs	r4, #12
 80016e2:	9303      	str	r3, [sp, #12]
 80016e4:	e73b      	b.n	800155e <__aeabi_ddiv+0x4e>
 80016e6:	2300      	movs	r3, #0
 80016e8:	2480      	movs	r4, #128	@ 0x80
 80016ea:	4698      	mov	r8, r3
 80016ec:	2600      	movs	r6, #0
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <__aeabi_ddiv+0x21c>)
 80016f0:	0324      	lsls	r4, r4, #12
 80016f2:	e779      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 80016f4:	2480      	movs	r4, #128	@ 0x80
 80016f6:	465b      	mov	r3, fp
 80016f8:	0324      	lsls	r4, r4, #12
 80016fa:	431c      	orrs	r4, r3
 80016fc:	0324      	lsls	r4, r4, #12
 80016fe:	002e      	movs	r6, r5
 8001700:	4690      	mov	r8, r2
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <__aeabi_ddiv+0x21c>)
 8001704:	0b24      	lsrs	r4, r4, #12
 8001706:	e76f      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 8001708:	2480      	movs	r4, #128	@ 0x80
 800170a:	464b      	mov	r3, r9
 800170c:	0324      	lsls	r4, r4, #12
 800170e:	4223      	tst	r3, r4
 8001710:	d002      	beq.n	8001718 <__aeabi_ddiv+0x208>
 8001712:	465b      	mov	r3, fp
 8001714:	4223      	tst	r3, r4
 8001716:	d0f0      	beq.n	80016fa <__aeabi_ddiv+0x1ea>
 8001718:	2480      	movs	r4, #128	@ 0x80
 800171a:	464b      	mov	r3, r9
 800171c:	0324      	lsls	r4, r4, #12
 800171e:	431c      	orrs	r4, r3
 8001720:	0324      	lsls	r4, r4, #12
 8001722:	9e02      	ldr	r6, [sp, #8]
 8001724:	4b01      	ldr	r3, [pc, #4]	@ (800172c <__aeabi_ddiv+0x21c>)
 8001726:	0b24      	lsrs	r4, r4, #12
 8001728:	e75e      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	000007ff 	.word	0x000007ff
 8001730:	fffffc01 	.word	0xfffffc01
 8001734:	08007de8 	.word	0x08007de8
 8001738:	fffff801 	.word	0xfffff801
 800173c:	000003f3 	.word	0x000003f3
 8001740:	fffffc0d 	.word	0xfffffc0d
 8001744:	45cb      	cmp	fp, r9
 8001746:	d200      	bcs.n	800174a <__aeabi_ddiv+0x23a>
 8001748:	e0f8      	b.n	800193c <__aeabi_ddiv+0x42c>
 800174a:	d100      	bne.n	800174e <__aeabi_ddiv+0x23e>
 800174c:	e0f3      	b.n	8001936 <__aeabi_ddiv+0x426>
 800174e:	2301      	movs	r3, #1
 8001750:	425b      	negs	r3, r3
 8001752:	469c      	mov	ip, r3
 8001754:	4644      	mov	r4, r8
 8001756:	4648      	mov	r0, r9
 8001758:	2500      	movs	r5, #0
 800175a:	44e2      	add	sl, ip
 800175c:	465b      	mov	r3, fp
 800175e:	0e17      	lsrs	r7, r2, #24
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	431f      	orrs	r7, r3
 8001764:	0c19      	lsrs	r1, r3, #16
 8001766:	043b      	lsls	r3, r7, #16
 8001768:	0212      	lsls	r2, r2, #8
 800176a:	9700      	str	r7, [sp, #0]
 800176c:	0c1f      	lsrs	r7, r3, #16
 800176e:	4691      	mov	r9, r2
 8001770:	9102      	str	r1, [sp, #8]
 8001772:	9703      	str	r7, [sp, #12]
 8001774:	f7fe fd4a 	bl	800020c <__aeabi_uidivmod>
 8001778:	0002      	movs	r2, r0
 800177a:	437a      	muls	r2, r7
 800177c:	040b      	lsls	r3, r1, #16
 800177e:	0c21      	lsrs	r1, r4, #16
 8001780:	4680      	mov	r8, r0
 8001782:	4319      	orrs	r1, r3
 8001784:	428a      	cmp	r2, r1
 8001786:	d909      	bls.n	800179c <__aeabi_ddiv+0x28c>
 8001788:	9f00      	ldr	r7, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	46bc      	mov	ip, r7
 800178e:	425b      	negs	r3, r3
 8001790:	4461      	add	r1, ip
 8001792:	469c      	mov	ip, r3
 8001794:	44e0      	add	r8, ip
 8001796:	428f      	cmp	r7, r1
 8001798:	d800      	bhi.n	800179c <__aeabi_ddiv+0x28c>
 800179a:	e15c      	b.n	8001a56 <__aeabi_ddiv+0x546>
 800179c:	1a88      	subs	r0, r1, r2
 800179e:	9902      	ldr	r1, [sp, #8]
 80017a0:	f7fe fd34 	bl	800020c <__aeabi_uidivmod>
 80017a4:	9a03      	ldr	r2, [sp, #12]
 80017a6:	0424      	lsls	r4, r4, #16
 80017a8:	4342      	muls	r2, r0
 80017aa:	0409      	lsls	r1, r1, #16
 80017ac:	0c24      	lsrs	r4, r4, #16
 80017ae:	0003      	movs	r3, r0
 80017b0:	430c      	orrs	r4, r1
 80017b2:	42a2      	cmp	r2, r4
 80017b4:	d906      	bls.n	80017c4 <__aeabi_ddiv+0x2b4>
 80017b6:	9900      	ldr	r1, [sp, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	468c      	mov	ip, r1
 80017bc:	4464      	add	r4, ip
 80017be:	42a1      	cmp	r1, r4
 80017c0:	d800      	bhi.n	80017c4 <__aeabi_ddiv+0x2b4>
 80017c2:	e142      	b.n	8001a4a <__aeabi_ddiv+0x53a>
 80017c4:	1aa0      	subs	r0, r4, r2
 80017c6:	4642      	mov	r2, r8
 80017c8:	0412      	lsls	r2, r2, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	4693      	mov	fp, r2
 80017ce:	464b      	mov	r3, r9
 80017d0:	4659      	mov	r1, fp
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	001f      	movs	r7, r3
 80017d6:	9304      	str	r3, [sp, #16]
 80017d8:	040b      	lsls	r3, r1, #16
 80017da:	4649      	mov	r1, r9
 80017dc:	0409      	lsls	r1, r1, #16
 80017de:	0c09      	lsrs	r1, r1, #16
 80017e0:	000c      	movs	r4, r1
 80017e2:	0c1b      	lsrs	r3, r3, #16
 80017e4:	435c      	muls	r4, r3
 80017e6:	0c12      	lsrs	r2, r2, #16
 80017e8:	437b      	muls	r3, r7
 80017ea:	4688      	mov	r8, r1
 80017ec:	4351      	muls	r1, r2
 80017ee:	437a      	muls	r2, r7
 80017f0:	0c27      	lsrs	r7, r4, #16
 80017f2:	46bc      	mov	ip, r7
 80017f4:	185b      	adds	r3, r3, r1
 80017f6:	4463      	add	r3, ip
 80017f8:	4299      	cmp	r1, r3
 80017fa:	d903      	bls.n	8001804 <__aeabi_ddiv+0x2f4>
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	0249      	lsls	r1, r1, #9
 8001800:	468c      	mov	ip, r1
 8001802:	4462      	add	r2, ip
 8001804:	0c19      	lsrs	r1, r3, #16
 8001806:	0424      	lsls	r4, r4, #16
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	0c24      	lsrs	r4, r4, #16
 800180c:	188a      	adds	r2, r1, r2
 800180e:	191c      	adds	r4, r3, r4
 8001810:	4290      	cmp	r0, r2
 8001812:	d302      	bcc.n	800181a <__aeabi_ddiv+0x30a>
 8001814:	d116      	bne.n	8001844 <__aeabi_ddiv+0x334>
 8001816:	42a5      	cmp	r5, r4
 8001818:	d214      	bcs.n	8001844 <__aeabi_ddiv+0x334>
 800181a:	465b      	mov	r3, fp
 800181c:	9f00      	ldr	r7, [sp, #0]
 800181e:	3b01      	subs	r3, #1
 8001820:	444d      	add	r5, r9
 8001822:	9305      	str	r3, [sp, #20]
 8001824:	454d      	cmp	r5, r9
 8001826:	419b      	sbcs	r3, r3
 8001828:	46bc      	mov	ip, r7
 800182a:	425b      	negs	r3, r3
 800182c:	4463      	add	r3, ip
 800182e:	18c0      	adds	r0, r0, r3
 8001830:	4287      	cmp	r7, r0
 8001832:	d300      	bcc.n	8001836 <__aeabi_ddiv+0x326>
 8001834:	e102      	b.n	8001a3c <__aeabi_ddiv+0x52c>
 8001836:	4282      	cmp	r2, r0
 8001838:	d900      	bls.n	800183c <__aeabi_ddiv+0x32c>
 800183a:	e129      	b.n	8001a90 <__aeabi_ddiv+0x580>
 800183c:	d100      	bne.n	8001840 <__aeabi_ddiv+0x330>
 800183e:	e124      	b.n	8001a8a <__aeabi_ddiv+0x57a>
 8001840:	9b05      	ldr	r3, [sp, #20]
 8001842:	469b      	mov	fp, r3
 8001844:	1b2c      	subs	r4, r5, r4
 8001846:	42a5      	cmp	r5, r4
 8001848:	41ad      	sbcs	r5, r5
 800184a:	9b00      	ldr	r3, [sp, #0]
 800184c:	1a80      	subs	r0, r0, r2
 800184e:	426d      	negs	r5, r5
 8001850:	1b40      	subs	r0, r0, r5
 8001852:	4283      	cmp	r3, r0
 8001854:	d100      	bne.n	8001858 <__aeabi_ddiv+0x348>
 8001856:	e10f      	b.n	8001a78 <__aeabi_ddiv+0x568>
 8001858:	9902      	ldr	r1, [sp, #8]
 800185a:	f7fe fcd7 	bl	800020c <__aeabi_uidivmod>
 800185e:	9a03      	ldr	r2, [sp, #12]
 8001860:	040b      	lsls	r3, r1, #16
 8001862:	4342      	muls	r2, r0
 8001864:	0c21      	lsrs	r1, r4, #16
 8001866:	0005      	movs	r5, r0
 8001868:	4319      	orrs	r1, r3
 800186a:	428a      	cmp	r2, r1
 800186c:	d900      	bls.n	8001870 <__aeabi_ddiv+0x360>
 800186e:	e0cb      	b.n	8001a08 <__aeabi_ddiv+0x4f8>
 8001870:	1a88      	subs	r0, r1, r2
 8001872:	9902      	ldr	r1, [sp, #8]
 8001874:	f7fe fcca 	bl	800020c <__aeabi_uidivmod>
 8001878:	9a03      	ldr	r2, [sp, #12]
 800187a:	0424      	lsls	r4, r4, #16
 800187c:	4342      	muls	r2, r0
 800187e:	0409      	lsls	r1, r1, #16
 8001880:	0c24      	lsrs	r4, r4, #16
 8001882:	0003      	movs	r3, r0
 8001884:	430c      	orrs	r4, r1
 8001886:	42a2      	cmp	r2, r4
 8001888:	d900      	bls.n	800188c <__aeabi_ddiv+0x37c>
 800188a:	e0ca      	b.n	8001a22 <__aeabi_ddiv+0x512>
 800188c:	4641      	mov	r1, r8
 800188e:	1aa4      	subs	r4, r4, r2
 8001890:	042a      	lsls	r2, r5, #16
 8001892:	431a      	orrs	r2, r3
 8001894:	9f04      	ldr	r7, [sp, #16]
 8001896:	0413      	lsls	r3, r2, #16
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	4359      	muls	r1, r3
 800189c:	4640      	mov	r0, r8
 800189e:	437b      	muls	r3, r7
 80018a0:	469c      	mov	ip, r3
 80018a2:	0c15      	lsrs	r5, r2, #16
 80018a4:	4368      	muls	r0, r5
 80018a6:	0c0b      	lsrs	r3, r1, #16
 80018a8:	4484      	add	ip, r0
 80018aa:	4463      	add	r3, ip
 80018ac:	437d      	muls	r5, r7
 80018ae:	4298      	cmp	r0, r3
 80018b0:	d903      	bls.n	80018ba <__aeabi_ddiv+0x3aa>
 80018b2:	2080      	movs	r0, #128	@ 0x80
 80018b4:	0240      	lsls	r0, r0, #9
 80018b6:	4684      	mov	ip, r0
 80018b8:	4465      	add	r5, ip
 80018ba:	0c18      	lsrs	r0, r3, #16
 80018bc:	0409      	lsls	r1, r1, #16
 80018be:	041b      	lsls	r3, r3, #16
 80018c0:	0c09      	lsrs	r1, r1, #16
 80018c2:	1940      	adds	r0, r0, r5
 80018c4:	185b      	adds	r3, r3, r1
 80018c6:	4284      	cmp	r4, r0
 80018c8:	d327      	bcc.n	800191a <__aeabi_ddiv+0x40a>
 80018ca:	d023      	beq.n	8001914 <__aeabi_ddiv+0x404>
 80018cc:	2301      	movs	r3, #1
 80018ce:	0035      	movs	r5, r6
 80018d0:	431a      	orrs	r2, r3
 80018d2:	4b94      	ldr	r3, [pc, #592]	@ (8001b24 <__aeabi_ddiv+0x614>)
 80018d4:	4453      	add	r3, sl
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dd60      	ble.n	800199c <__aeabi_ddiv+0x48c>
 80018da:	0751      	lsls	r1, r2, #29
 80018dc:	d000      	beq.n	80018e0 <__aeabi_ddiv+0x3d0>
 80018de:	e086      	b.n	80019ee <__aeabi_ddiv+0x4de>
 80018e0:	002e      	movs	r6, r5
 80018e2:	08d1      	lsrs	r1, r2, #3
 80018e4:	465a      	mov	r2, fp
 80018e6:	01d2      	lsls	r2, r2, #7
 80018e8:	d506      	bpl.n	80018f8 <__aeabi_ddiv+0x3e8>
 80018ea:	465a      	mov	r2, fp
 80018ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001b28 <__aeabi_ddiv+0x618>)
 80018ee:	401a      	ands	r2, r3
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	4693      	mov	fp, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4453      	add	r3, sl
 80018f8:	4a8c      	ldr	r2, [pc, #560]	@ (8001b2c <__aeabi_ddiv+0x61c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	dd00      	ble.n	8001900 <__aeabi_ddiv+0x3f0>
 80018fe:	e680      	b.n	8001602 <__aeabi_ddiv+0xf2>
 8001900:	465a      	mov	r2, fp
 8001902:	0752      	lsls	r2, r2, #29
 8001904:	430a      	orrs	r2, r1
 8001906:	4690      	mov	r8, r2
 8001908:	465a      	mov	r2, fp
 800190a:	055b      	lsls	r3, r3, #21
 800190c:	0254      	lsls	r4, r2, #9
 800190e:	0b24      	lsrs	r4, r4, #12
 8001910:	0d5b      	lsrs	r3, r3, #21
 8001912:	e669      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 8001914:	0035      	movs	r5, r6
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0db      	beq.n	80018d2 <__aeabi_ddiv+0x3c2>
 800191a:	9d00      	ldr	r5, [sp, #0]
 800191c:	1e51      	subs	r1, r2, #1
 800191e:	46ac      	mov	ip, r5
 8001920:	4464      	add	r4, ip
 8001922:	42ac      	cmp	r4, r5
 8001924:	d200      	bcs.n	8001928 <__aeabi_ddiv+0x418>
 8001926:	e09e      	b.n	8001a66 <__aeabi_ddiv+0x556>
 8001928:	4284      	cmp	r4, r0
 800192a:	d200      	bcs.n	800192e <__aeabi_ddiv+0x41e>
 800192c:	e0e1      	b.n	8001af2 <__aeabi_ddiv+0x5e2>
 800192e:	d100      	bne.n	8001932 <__aeabi_ddiv+0x422>
 8001930:	e0ee      	b.n	8001b10 <__aeabi_ddiv+0x600>
 8001932:	000a      	movs	r2, r1
 8001934:	e7ca      	b.n	80018cc <__aeabi_ddiv+0x3bc>
 8001936:	4542      	cmp	r2, r8
 8001938:	d900      	bls.n	800193c <__aeabi_ddiv+0x42c>
 800193a:	e708      	b.n	800174e <__aeabi_ddiv+0x23e>
 800193c:	464b      	mov	r3, r9
 800193e:	07dc      	lsls	r4, r3, #31
 8001940:	0858      	lsrs	r0, r3, #1
 8001942:	4643      	mov	r3, r8
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	431c      	orrs	r4, r3
 8001948:	4643      	mov	r3, r8
 800194a:	07dd      	lsls	r5, r3, #31
 800194c:	e706      	b.n	800175c <__aeabi_ddiv+0x24c>
 800194e:	f001 f9f5 	bl	8002d3c <__clzsi2>
 8001952:	2315      	movs	r3, #21
 8001954:	469c      	mov	ip, r3
 8001956:	4484      	add	ip, r0
 8001958:	0002      	movs	r2, r0
 800195a:	4663      	mov	r3, ip
 800195c:	3220      	adds	r2, #32
 800195e:	2b1c      	cmp	r3, #28
 8001960:	dc00      	bgt.n	8001964 <__aeabi_ddiv+0x454>
 8001962:	e692      	b.n	800168a <__aeabi_ddiv+0x17a>
 8001964:	0023      	movs	r3, r4
 8001966:	3808      	subs	r0, #8
 8001968:	4083      	lsls	r3, r0
 800196a:	4699      	mov	r9, r3
 800196c:	2300      	movs	r3, #0
 800196e:	4698      	mov	r8, r3
 8001970:	e69a      	b.n	80016a8 <__aeabi_ddiv+0x198>
 8001972:	f001 f9e3 	bl	8002d3c <__clzsi2>
 8001976:	0002      	movs	r2, r0
 8001978:	0003      	movs	r3, r0
 800197a:	3215      	adds	r2, #21
 800197c:	3320      	adds	r3, #32
 800197e:	2a1c      	cmp	r2, #28
 8001980:	dc00      	bgt.n	8001984 <__aeabi_ddiv+0x474>
 8001982:	e65f      	b.n	8001644 <__aeabi_ddiv+0x134>
 8001984:	9900      	ldr	r1, [sp, #0]
 8001986:	3808      	subs	r0, #8
 8001988:	4081      	lsls	r1, r0
 800198a:	2200      	movs	r2, #0
 800198c:	468b      	mov	fp, r1
 800198e:	e666      	b.n	800165e <__aeabi_ddiv+0x14e>
 8001990:	2200      	movs	r2, #0
 8001992:	002e      	movs	r6, r5
 8001994:	2400      	movs	r4, #0
 8001996:	4690      	mov	r8, r2
 8001998:	4b65      	ldr	r3, [pc, #404]	@ (8001b30 <__aeabi_ddiv+0x620>)
 800199a:	e625      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 800199c:	002e      	movs	r6, r5
 800199e:	2101      	movs	r1, #1
 80019a0:	1ac9      	subs	r1, r1, r3
 80019a2:	2938      	cmp	r1, #56	@ 0x38
 80019a4:	dd00      	ble.n	80019a8 <__aeabi_ddiv+0x498>
 80019a6:	e61b      	b.n	80015e0 <__aeabi_ddiv+0xd0>
 80019a8:	291f      	cmp	r1, #31
 80019aa:	dc7e      	bgt.n	8001aaa <__aeabi_ddiv+0x59a>
 80019ac:	4861      	ldr	r0, [pc, #388]	@ (8001b34 <__aeabi_ddiv+0x624>)
 80019ae:	0014      	movs	r4, r2
 80019b0:	4450      	add	r0, sl
 80019b2:	465b      	mov	r3, fp
 80019b4:	4082      	lsls	r2, r0
 80019b6:	4083      	lsls	r3, r0
 80019b8:	40cc      	lsrs	r4, r1
 80019ba:	1e50      	subs	r0, r2, #1
 80019bc:	4182      	sbcs	r2, r0
 80019be:	4323      	orrs	r3, r4
 80019c0:	431a      	orrs	r2, r3
 80019c2:	465b      	mov	r3, fp
 80019c4:	40cb      	lsrs	r3, r1
 80019c6:	0751      	lsls	r1, r2, #29
 80019c8:	d009      	beq.n	80019de <__aeabi_ddiv+0x4ce>
 80019ca:	210f      	movs	r1, #15
 80019cc:	4011      	ands	r1, r2
 80019ce:	2904      	cmp	r1, #4
 80019d0:	d005      	beq.n	80019de <__aeabi_ddiv+0x4ce>
 80019d2:	1d11      	adds	r1, r2, #4
 80019d4:	4291      	cmp	r1, r2
 80019d6:	4192      	sbcs	r2, r2
 80019d8:	4252      	negs	r2, r2
 80019da:	189b      	adds	r3, r3, r2
 80019dc:	000a      	movs	r2, r1
 80019de:	0219      	lsls	r1, r3, #8
 80019e0:	d400      	bmi.n	80019e4 <__aeabi_ddiv+0x4d4>
 80019e2:	e09b      	b.n	8001b1c <__aeabi_ddiv+0x60c>
 80019e4:	2200      	movs	r2, #0
 80019e6:	2301      	movs	r3, #1
 80019e8:	2400      	movs	r4, #0
 80019ea:	4690      	mov	r8, r2
 80019ec:	e5fc      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 80019ee:	210f      	movs	r1, #15
 80019f0:	4011      	ands	r1, r2
 80019f2:	2904      	cmp	r1, #4
 80019f4:	d100      	bne.n	80019f8 <__aeabi_ddiv+0x4e8>
 80019f6:	e773      	b.n	80018e0 <__aeabi_ddiv+0x3d0>
 80019f8:	1d11      	adds	r1, r2, #4
 80019fa:	4291      	cmp	r1, r2
 80019fc:	4192      	sbcs	r2, r2
 80019fe:	4252      	negs	r2, r2
 8001a00:	002e      	movs	r6, r5
 8001a02:	08c9      	lsrs	r1, r1, #3
 8001a04:	4493      	add	fp, r2
 8001a06:	e76d      	b.n	80018e4 <__aeabi_ddiv+0x3d4>
 8001a08:	9b00      	ldr	r3, [sp, #0]
 8001a0a:	3d01      	subs	r5, #1
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	4461      	add	r1, ip
 8001a10:	428b      	cmp	r3, r1
 8001a12:	d900      	bls.n	8001a16 <__aeabi_ddiv+0x506>
 8001a14:	e72c      	b.n	8001870 <__aeabi_ddiv+0x360>
 8001a16:	428a      	cmp	r2, r1
 8001a18:	d800      	bhi.n	8001a1c <__aeabi_ddiv+0x50c>
 8001a1a:	e729      	b.n	8001870 <__aeabi_ddiv+0x360>
 8001a1c:	1e85      	subs	r5, r0, #2
 8001a1e:	4461      	add	r1, ip
 8001a20:	e726      	b.n	8001870 <__aeabi_ddiv+0x360>
 8001a22:	9900      	ldr	r1, [sp, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	468c      	mov	ip, r1
 8001a28:	4464      	add	r4, ip
 8001a2a:	42a1      	cmp	r1, r4
 8001a2c:	d900      	bls.n	8001a30 <__aeabi_ddiv+0x520>
 8001a2e:	e72d      	b.n	800188c <__aeabi_ddiv+0x37c>
 8001a30:	42a2      	cmp	r2, r4
 8001a32:	d800      	bhi.n	8001a36 <__aeabi_ddiv+0x526>
 8001a34:	e72a      	b.n	800188c <__aeabi_ddiv+0x37c>
 8001a36:	1e83      	subs	r3, r0, #2
 8001a38:	4464      	add	r4, ip
 8001a3a:	e727      	b.n	800188c <__aeabi_ddiv+0x37c>
 8001a3c:	4287      	cmp	r7, r0
 8001a3e:	d000      	beq.n	8001a42 <__aeabi_ddiv+0x532>
 8001a40:	e6fe      	b.n	8001840 <__aeabi_ddiv+0x330>
 8001a42:	45a9      	cmp	r9, r5
 8001a44:	d900      	bls.n	8001a48 <__aeabi_ddiv+0x538>
 8001a46:	e6fb      	b.n	8001840 <__aeabi_ddiv+0x330>
 8001a48:	e6f5      	b.n	8001836 <__aeabi_ddiv+0x326>
 8001a4a:	42a2      	cmp	r2, r4
 8001a4c:	d800      	bhi.n	8001a50 <__aeabi_ddiv+0x540>
 8001a4e:	e6b9      	b.n	80017c4 <__aeabi_ddiv+0x2b4>
 8001a50:	1e83      	subs	r3, r0, #2
 8001a52:	4464      	add	r4, ip
 8001a54:	e6b6      	b.n	80017c4 <__aeabi_ddiv+0x2b4>
 8001a56:	428a      	cmp	r2, r1
 8001a58:	d800      	bhi.n	8001a5c <__aeabi_ddiv+0x54c>
 8001a5a:	e69f      	b.n	800179c <__aeabi_ddiv+0x28c>
 8001a5c:	46bc      	mov	ip, r7
 8001a5e:	1e83      	subs	r3, r0, #2
 8001a60:	4698      	mov	r8, r3
 8001a62:	4461      	add	r1, ip
 8001a64:	e69a      	b.n	800179c <__aeabi_ddiv+0x28c>
 8001a66:	000a      	movs	r2, r1
 8001a68:	4284      	cmp	r4, r0
 8001a6a:	d000      	beq.n	8001a6e <__aeabi_ddiv+0x55e>
 8001a6c:	e72e      	b.n	80018cc <__aeabi_ddiv+0x3bc>
 8001a6e:	454b      	cmp	r3, r9
 8001a70:	d000      	beq.n	8001a74 <__aeabi_ddiv+0x564>
 8001a72:	e72b      	b.n	80018cc <__aeabi_ddiv+0x3bc>
 8001a74:	0035      	movs	r5, r6
 8001a76:	e72c      	b.n	80018d2 <__aeabi_ddiv+0x3c2>
 8001a78:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <__aeabi_ddiv+0x614>)
 8001a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b38 <__aeabi_ddiv+0x628>)
 8001a7c:	4453      	add	r3, sl
 8001a7e:	4592      	cmp	sl, r2
 8001a80:	db43      	blt.n	8001b0a <__aeabi_ddiv+0x5fa>
 8001a82:	2201      	movs	r2, #1
 8001a84:	2100      	movs	r1, #0
 8001a86:	4493      	add	fp, r2
 8001a88:	e72c      	b.n	80018e4 <__aeabi_ddiv+0x3d4>
 8001a8a:	42ac      	cmp	r4, r5
 8001a8c:	d800      	bhi.n	8001a90 <__aeabi_ddiv+0x580>
 8001a8e:	e6d7      	b.n	8001840 <__aeabi_ddiv+0x330>
 8001a90:	2302      	movs	r3, #2
 8001a92:	425b      	negs	r3, r3
 8001a94:	469c      	mov	ip, r3
 8001a96:	9900      	ldr	r1, [sp, #0]
 8001a98:	444d      	add	r5, r9
 8001a9a:	454d      	cmp	r5, r9
 8001a9c:	419b      	sbcs	r3, r3
 8001a9e:	44e3      	add	fp, ip
 8001aa0:	468c      	mov	ip, r1
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	4463      	add	r3, ip
 8001aa6:	18c0      	adds	r0, r0, r3
 8001aa8:	e6cc      	b.n	8001844 <__aeabi_ddiv+0x334>
 8001aaa:	201f      	movs	r0, #31
 8001aac:	4240      	negs	r0, r0
 8001aae:	1ac3      	subs	r3, r0, r3
 8001ab0:	4658      	mov	r0, fp
 8001ab2:	40d8      	lsrs	r0, r3
 8001ab4:	2920      	cmp	r1, #32
 8001ab6:	d004      	beq.n	8001ac2 <__aeabi_ddiv+0x5b2>
 8001ab8:	4659      	mov	r1, fp
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <__aeabi_ddiv+0x62c>)
 8001abc:	4453      	add	r3, sl
 8001abe:	4099      	lsls	r1, r3
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	1e53      	subs	r3, r2, #1
 8001ac4:	419a      	sbcs	r2, r3
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	0019      	movs	r1, r3
 8001aca:	4302      	orrs	r2, r0
 8001acc:	2400      	movs	r4, #0
 8001ace:	4011      	ands	r1, r2
 8001ad0:	4213      	tst	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <__aeabi_ddiv+0x5d8>
 8001ad4:	3308      	adds	r3, #8
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d01d      	beq.n	8001b18 <__aeabi_ddiv+0x608>
 8001adc:	1d13      	adds	r3, r2, #4
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	4189      	sbcs	r1, r1
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	4249      	negs	r1, r1
 8001ae6:	0749      	lsls	r1, r1, #29
 8001ae8:	08d2      	lsrs	r2, r2, #3
 8001aea:	430a      	orrs	r2, r1
 8001aec:	4690      	mov	r8, r2
 8001aee:	2300      	movs	r3, #0
 8001af0:	e57a      	b.n	80015e8 <__aeabi_ddiv+0xd8>
 8001af2:	4649      	mov	r1, r9
 8001af4:	9f00      	ldr	r7, [sp, #0]
 8001af6:	004d      	lsls	r5, r1, #1
 8001af8:	454d      	cmp	r5, r9
 8001afa:	4189      	sbcs	r1, r1
 8001afc:	46bc      	mov	ip, r7
 8001afe:	4249      	negs	r1, r1
 8001b00:	4461      	add	r1, ip
 8001b02:	46a9      	mov	r9, r5
 8001b04:	3a02      	subs	r2, #2
 8001b06:	1864      	adds	r4, r4, r1
 8001b08:	e7ae      	b.n	8001a68 <__aeabi_ddiv+0x558>
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4252      	negs	r2, r2
 8001b0e:	e746      	b.n	800199e <__aeabi_ddiv+0x48e>
 8001b10:	4599      	cmp	r9, r3
 8001b12:	d3ee      	bcc.n	8001af2 <__aeabi_ddiv+0x5e2>
 8001b14:	000a      	movs	r2, r1
 8001b16:	e7aa      	b.n	8001a6e <__aeabi_ddiv+0x55e>
 8001b18:	2100      	movs	r1, #0
 8001b1a:	e7e5      	b.n	8001ae8 <__aeabi_ddiv+0x5d8>
 8001b1c:	0759      	lsls	r1, r3, #29
 8001b1e:	025b      	lsls	r3, r3, #9
 8001b20:	0b1c      	lsrs	r4, r3, #12
 8001b22:	e7e1      	b.n	8001ae8 <__aeabi_ddiv+0x5d8>
 8001b24:	000003ff 	.word	0x000003ff
 8001b28:	feffffff 	.word	0xfeffffff
 8001b2c:	000007fe 	.word	0x000007fe
 8001b30:	000007ff 	.word	0x000007ff
 8001b34:	0000041e 	.word	0x0000041e
 8001b38:	fffffc02 	.word	0xfffffc02
 8001b3c:	0000043e 	.word	0x0000043e

08001b40 <__eqdf2>:
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	4657      	mov	r7, sl
 8001b44:	46de      	mov	lr, fp
 8001b46:	464e      	mov	r6, r9
 8001b48:	4645      	mov	r5, r8
 8001b4a:	b5e0      	push	{r5, r6, r7, lr}
 8001b4c:	000d      	movs	r5, r1
 8001b4e:	0004      	movs	r4, r0
 8001b50:	0fe8      	lsrs	r0, r5, #31
 8001b52:	4683      	mov	fp, r0
 8001b54:	0309      	lsls	r1, r1, #12
 8001b56:	0fd8      	lsrs	r0, r3, #31
 8001b58:	0b09      	lsrs	r1, r1, #12
 8001b5a:	4682      	mov	sl, r0
 8001b5c:	4819      	ldr	r0, [pc, #100]	@ (8001bc4 <__eqdf2+0x84>)
 8001b5e:	468c      	mov	ip, r1
 8001b60:	031f      	lsls	r7, r3, #12
 8001b62:	0069      	lsls	r1, r5, #1
 8001b64:	005e      	lsls	r6, r3, #1
 8001b66:	0d49      	lsrs	r1, r1, #21
 8001b68:	0b3f      	lsrs	r7, r7, #12
 8001b6a:	0d76      	lsrs	r6, r6, #21
 8001b6c:	4281      	cmp	r1, r0
 8001b6e:	d018      	beq.n	8001ba2 <__eqdf2+0x62>
 8001b70:	4286      	cmp	r6, r0
 8001b72:	d00f      	beq.n	8001b94 <__eqdf2+0x54>
 8001b74:	2001      	movs	r0, #1
 8001b76:	42b1      	cmp	r1, r6
 8001b78:	d10d      	bne.n	8001b96 <__eqdf2+0x56>
 8001b7a:	45bc      	cmp	ip, r7
 8001b7c:	d10b      	bne.n	8001b96 <__eqdf2+0x56>
 8001b7e:	4294      	cmp	r4, r2
 8001b80:	d109      	bne.n	8001b96 <__eqdf2+0x56>
 8001b82:	45d3      	cmp	fp, sl
 8001b84:	d01c      	beq.n	8001bc0 <__eqdf2+0x80>
 8001b86:	2900      	cmp	r1, #0
 8001b88:	d105      	bne.n	8001b96 <__eqdf2+0x56>
 8001b8a:	4660      	mov	r0, ip
 8001b8c:	4320      	orrs	r0, r4
 8001b8e:	1e43      	subs	r3, r0, #1
 8001b90:	4198      	sbcs	r0, r3
 8001b92:	e000      	b.n	8001b96 <__eqdf2+0x56>
 8001b94:	2001      	movs	r0, #1
 8001b96:	bcf0      	pop	{r4, r5, r6, r7}
 8001b98:	46bb      	mov	fp, r7
 8001b9a:	46b2      	mov	sl, r6
 8001b9c:	46a9      	mov	r9, r5
 8001b9e:	46a0      	mov	r8, r4
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	428e      	cmp	r6, r1
 8001ba6:	d1f6      	bne.n	8001b96 <__eqdf2+0x56>
 8001ba8:	4661      	mov	r1, ip
 8001baa:	4339      	orrs	r1, r7
 8001bac:	000f      	movs	r7, r1
 8001bae:	4317      	orrs	r7, r2
 8001bb0:	4327      	orrs	r7, r4
 8001bb2:	d1f0      	bne.n	8001b96 <__eqdf2+0x56>
 8001bb4:	465b      	mov	r3, fp
 8001bb6:	4652      	mov	r2, sl
 8001bb8:	1a98      	subs	r0, r3, r2
 8001bba:	1e43      	subs	r3, r0, #1
 8001bbc:	4198      	sbcs	r0, r3
 8001bbe:	e7ea      	b.n	8001b96 <__eqdf2+0x56>
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e7e8      	b.n	8001b96 <__eqdf2+0x56>
 8001bc4:	000007ff 	.word	0x000007ff

08001bc8 <__gedf2>:
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	4657      	mov	r7, sl
 8001bcc:	464e      	mov	r6, r9
 8001bce:	4645      	mov	r5, r8
 8001bd0:	46de      	mov	lr, fp
 8001bd2:	b5e0      	push	{r5, r6, r7, lr}
 8001bd4:	000d      	movs	r5, r1
 8001bd6:	030e      	lsls	r6, r1, #12
 8001bd8:	0049      	lsls	r1, r1, #1
 8001bda:	0d49      	lsrs	r1, r1, #21
 8001bdc:	468a      	mov	sl, r1
 8001bde:	0fdf      	lsrs	r7, r3, #31
 8001be0:	0fe9      	lsrs	r1, r5, #31
 8001be2:	46bc      	mov	ip, r7
 8001be4:	b083      	sub	sp, #12
 8001be6:	4f2f      	ldr	r7, [pc, #188]	@ (8001ca4 <__gedf2+0xdc>)
 8001be8:	0004      	movs	r4, r0
 8001bea:	4680      	mov	r8, r0
 8001bec:	9101      	str	r1, [sp, #4]
 8001bee:	0058      	lsls	r0, r3, #1
 8001bf0:	0319      	lsls	r1, r3, #12
 8001bf2:	4691      	mov	r9, r2
 8001bf4:	0b36      	lsrs	r6, r6, #12
 8001bf6:	0b09      	lsrs	r1, r1, #12
 8001bf8:	0d40      	lsrs	r0, r0, #21
 8001bfa:	45ba      	cmp	sl, r7
 8001bfc:	d01d      	beq.n	8001c3a <__gedf2+0x72>
 8001bfe:	42b8      	cmp	r0, r7
 8001c00:	d00d      	beq.n	8001c1e <__gedf2+0x56>
 8001c02:	4657      	mov	r7, sl
 8001c04:	2f00      	cmp	r7, #0
 8001c06:	d12a      	bne.n	8001c5e <__gedf2+0x96>
 8001c08:	4334      	orrs	r4, r6
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d124      	bne.n	8001c58 <__gedf2+0x90>
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	d036      	beq.n	8001c80 <__gedf2+0xb8>
 8001c12:	2c00      	cmp	r4, #0
 8001c14:	d141      	bne.n	8001c9a <__gedf2+0xd2>
 8001c16:	4663      	mov	r3, ip
 8001c18:	0058      	lsls	r0, r3, #1
 8001c1a:	3801      	subs	r0, #1
 8001c1c:	e015      	b.n	8001c4a <__gedf2+0x82>
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	d138      	bne.n	8001c94 <__gedf2+0xcc>
 8001c22:	4653      	mov	r3, sl
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <__gedf2+0x64>
 8001c28:	4326      	orrs	r6, r4
 8001c2a:	d0f4      	beq.n	8001c16 <__gedf2+0x4e>
 8001c2c:	9b01      	ldr	r3, [sp, #4]
 8001c2e:	4563      	cmp	r3, ip
 8001c30:	d107      	bne.n	8001c42 <__gedf2+0x7a>
 8001c32:	9b01      	ldr	r3, [sp, #4]
 8001c34:	0058      	lsls	r0, r3, #1
 8001c36:	3801      	subs	r0, #1
 8001c38:	e007      	b.n	8001c4a <__gedf2+0x82>
 8001c3a:	4326      	orrs	r6, r4
 8001c3c:	d12a      	bne.n	8001c94 <__gedf2+0xcc>
 8001c3e:	4550      	cmp	r0, sl
 8001c40:	d021      	beq.n	8001c86 <__gedf2+0xbe>
 8001c42:	2001      	movs	r0, #1
 8001c44:	9b01      	ldr	r3, [sp, #4]
 8001c46:	425f      	negs	r7, r3
 8001c48:	4338      	orrs	r0, r7
 8001c4a:	b003      	add	sp, #12
 8001c4c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c4e:	46bb      	mov	fp, r7
 8001c50:	46b2      	mov	sl, r6
 8001c52:	46a9      	mov	r9, r5
 8001c54:	46a0      	mov	r8, r4
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	d0dc      	beq.n	8001c16 <__gedf2+0x4e>
 8001c5c:	e7e6      	b.n	8001c2c <__gedf2+0x64>
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	d0ef      	beq.n	8001c42 <__gedf2+0x7a>
 8001c62:	9b01      	ldr	r3, [sp, #4]
 8001c64:	4563      	cmp	r3, ip
 8001c66:	d1ec      	bne.n	8001c42 <__gedf2+0x7a>
 8001c68:	4582      	cmp	sl, r0
 8001c6a:	dcea      	bgt.n	8001c42 <__gedf2+0x7a>
 8001c6c:	dbe1      	blt.n	8001c32 <__gedf2+0x6a>
 8001c6e:	428e      	cmp	r6, r1
 8001c70:	d8e7      	bhi.n	8001c42 <__gedf2+0x7a>
 8001c72:	d1de      	bne.n	8001c32 <__gedf2+0x6a>
 8001c74:	45c8      	cmp	r8, r9
 8001c76:	d8e4      	bhi.n	8001c42 <__gedf2+0x7a>
 8001c78:	2000      	movs	r0, #0
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d2e5      	bcs.n	8001c4a <__gedf2+0x82>
 8001c7e:	e7d8      	b.n	8001c32 <__gedf2+0x6a>
 8001c80:	2c00      	cmp	r4, #0
 8001c82:	d0e2      	beq.n	8001c4a <__gedf2+0x82>
 8001c84:	e7dd      	b.n	8001c42 <__gedf2+0x7a>
 8001c86:	4311      	orrs	r1, r2
 8001c88:	d104      	bne.n	8001c94 <__gedf2+0xcc>
 8001c8a:	9b01      	ldr	r3, [sp, #4]
 8001c8c:	4563      	cmp	r3, ip
 8001c8e:	d1d8      	bne.n	8001c42 <__gedf2+0x7a>
 8001c90:	2000      	movs	r0, #0
 8001c92:	e7da      	b.n	8001c4a <__gedf2+0x82>
 8001c94:	2002      	movs	r0, #2
 8001c96:	4240      	negs	r0, r0
 8001c98:	e7d7      	b.n	8001c4a <__gedf2+0x82>
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	4563      	cmp	r3, ip
 8001c9e:	d0e6      	beq.n	8001c6e <__gedf2+0xa6>
 8001ca0:	e7cf      	b.n	8001c42 <__gedf2+0x7a>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff

08001ca8 <__ledf2>:
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001caa:	4657      	mov	r7, sl
 8001cac:	464e      	mov	r6, r9
 8001cae:	4645      	mov	r5, r8
 8001cb0:	46de      	mov	lr, fp
 8001cb2:	b5e0      	push	{r5, r6, r7, lr}
 8001cb4:	000d      	movs	r5, r1
 8001cb6:	030e      	lsls	r6, r1, #12
 8001cb8:	0049      	lsls	r1, r1, #1
 8001cba:	0d49      	lsrs	r1, r1, #21
 8001cbc:	468a      	mov	sl, r1
 8001cbe:	0fdf      	lsrs	r7, r3, #31
 8001cc0:	0fe9      	lsrs	r1, r5, #31
 8001cc2:	46bc      	mov	ip, r7
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	4f2e      	ldr	r7, [pc, #184]	@ (8001d80 <__ledf2+0xd8>)
 8001cc8:	0004      	movs	r4, r0
 8001cca:	4680      	mov	r8, r0
 8001ccc:	9101      	str	r1, [sp, #4]
 8001cce:	0058      	lsls	r0, r3, #1
 8001cd0:	0319      	lsls	r1, r3, #12
 8001cd2:	4691      	mov	r9, r2
 8001cd4:	0b36      	lsrs	r6, r6, #12
 8001cd6:	0b09      	lsrs	r1, r1, #12
 8001cd8:	0d40      	lsrs	r0, r0, #21
 8001cda:	45ba      	cmp	sl, r7
 8001cdc:	d01e      	beq.n	8001d1c <__ledf2+0x74>
 8001cde:	42b8      	cmp	r0, r7
 8001ce0:	d00d      	beq.n	8001cfe <__ledf2+0x56>
 8001ce2:	4657      	mov	r7, sl
 8001ce4:	2f00      	cmp	r7, #0
 8001ce6:	d127      	bne.n	8001d38 <__ledf2+0x90>
 8001ce8:	4334      	orrs	r4, r6
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d133      	bne.n	8001d56 <__ledf2+0xae>
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	d034      	beq.n	8001d5c <__ledf2+0xb4>
 8001cf2:	2c00      	cmp	r4, #0
 8001cf4:	d140      	bne.n	8001d78 <__ledf2+0xd0>
 8001cf6:	4663      	mov	r3, ip
 8001cf8:	0058      	lsls	r0, r3, #1
 8001cfa:	3801      	subs	r0, #1
 8001cfc:	e015      	b.n	8001d2a <__ledf2+0x82>
 8001cfe:	4311      	orrs	r1, r2
 8001d00:	d112      	bne.n	8001d28 <__ledf2+0x80>
 8001d02:	4653      	mov	r3, sl
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <__ledf2+0x64>
 8001d08:	4326      	orrs	r6, r4
 8001d0a:	d0f4      	beq.n	8001cf6 <__ledf2+0x4e>
 8001d0c:	9b01      	ldr	r3, [sp, #4]
 8001d0e:	4563      	cmp	r3, ip
 8001d10:	d01d      	beq.n	8001d4e <__ledf2+0xa6>
 8001d12:	2001      	movs	r0, #1
 8001d14:	9b01      	ldr	r3, [sp, #4]
 8001d16:	425f      	negs	r7, r3
 8001d18:	4338      	orrs	r0, r7
 8001d1a:	e006      	b.n	8001d2a <__ledf2+0x82>
 8001d1c:	4326      	orrs	r6, r4
 8001d1e:	d103      	bne.n	8001d28 <__ledf2+0x80>
 8001d20:	4550      	cmp	r0, sl
 8001d22:	d1f6      	bne.n	8001d12 <__ledf2+0x6a>
 8001d24:	4311      	orrs	r1, r2
 8001d26:	d01c      	beq.n	8001d62 <__ledf2+0xba>
 8001d28:	2002      	movs	r0, #2
 8001d2a:	b003      	add	sp, #12
 8001d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d2e:	46bb      	mov	fp, r7
 8001d30:	46b2      	mov	sl, r6
 8001d32:	46a9      	mov	r9, r5
 8001d34:	46a0      	mov	r8, r4
 8001d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d0ea      	beq.n	8001d12 <__ledf2+0x6a>
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	4563      	cmp	r3, ip
 8001d40:	d1e7      	bne.n	8001d12 <__ledf2+0x6a>
 8001d42:	4582      	cmp	sl, r0
 8001d44:	dce5      	bgt.n	8001d12 <__ledf2+0x6a>
 8001d46:	db02      	blt.n	8001d4e <__ledf2+0xa6>
 8001d48:	428e      	cmp	r6, r1
 8001d4a:	d8e2      	bhi.n	8001d12 <__ledf2+0x6a>
 8001d4c:	d00e      	beq.n	8001d6c <__ledf2+0xc4>
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	0058      	lsls	r0, r3, #1
 8001d52:	3801      	subs	r0, #1
 8001d54:	e7e9      	b.n	8001d2a <__ledf2+0x82>
 8001d56:	2c00      	cmp	r4, #0
 8001d58:	d0cd      	beq.n	8001cf6 <__ledf2+0x4e>
 8001d5a:	e7d7      	b.n	8001d0c <__ledf2+0x64>
 8001d5c:	2c00      	cmp	r4, #0
 8001d5e:	d0e4      	beq.n	8001d2a <__ledf2+0x82>
 8001d60:	e7d7      	b.n	8001d12 <__ledf2+0x6a>
 8001d62:	9b01      	ldr	r3, [sp, #4]
 8001d64:	2000      	movs	r0, #0
 8001d66:	4563      	cmp	r3, ip
 8001d68:	d0df      	beq.n	8001d2a <__ledf2+0x82>
 8001d6a:	e7d2      	b.n	8001d12 <__ledf2+0x6a>
 8001d6c:	45c8      	cmp	r8, r9
 8001d6e:	d8d0      	bhi.n	8001d12 <__ledf2+0x6a>
 8001d70:	2000      	movs	r0, #0
 8001d72:	45c8      	cmp	r8, r9
 8001d74:	d2d9      	bcs.n	8001d2a <__ledf2+0x82>
 8001d76:	e7ea      	b.n	8001d4e <__ledf2+0xa6>
 8001d78:	9b01      	ldr	r3, [sp, #4]
 8001d7a:	4563      	cmp	r3, ip
 8001d7c:	d0e4      	beq.n	8001d48 <__ledf2+0xa0>
 8001d7e:	e7c8      	b.n	8001d12 <__ledf2+0x6a>
 8001d80:	000007ff 	.word	0x000007ff

08001d84 <__aeabi_dmul>:
 8001d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d86:	4657      	mov	r7, sl
 8001d88:	464e      	mov	r6, r9
 8001d8a:	46de      	mov	lr, fp
 8001d8c:	4645      	mov	r5, r8
 8001d8e:	b5e0      	push	{r5, r6, r7, lr}
 8001d90:	001f      	movs	r7, r3
 8001d92:	030b      	lsls	r3, r1, #12
 8001d94:	0b1b      	lsrs	r3, r3, #12
 8001d96:	0016      	movs	r6, r2
 8001d98:	469a      	mov	sl, r3
 8001d9a:	0fca      	lsrs	r2, r1, #31
 8001d9c:	004b      	lsls	r3, r1, #1
 8001d9e:	0004      	movs	r4, r0
 8001da0:	4691      	mov	r9, r2
 8001da2:	b085      	sub	sp, #20
 8001da4:	0d5b      	lsrs	r3, r3, #21
 8001da6:	d100      	bne.n	8001daa <__aeabi_dmul+0x26>
 8001da8:	e1cf      	b.n	800214a <__aeabi_dmul+0x3c6>
 8001daa:	4acd      	ldr	r2, [pc, #820]	@ (80020e0 <__aeabi_dmul+0x35c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d055      	beq.n	8001e5c <__aeabi_dmul+0xd8>
 8001db0:	4651      	mov	r1, sl
 8001db2:	0f42      	lsrs	r2, r0, #29
 8001db4:	00c9      	lsls	r1, r1, #3
 8001db6:	430a      	orrs	r2, r1
 8001db8:	2180      	movs	r1, #128	@ 0x80
 8001dba:	0409      	lsls	r1, r1, #16
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	00c2      	lsls	r2, r0, #3
 8001dc0:	4690      	mov	r8, r2
 8001dc2:	4ac8      	ldr	r2, [pc, #800]	@ (80020e4 <__aeabi_dmul+0x360>)
 8001dc4:	468a      	mov	sl, r1
 8001dc6:	4693      	mov	fp, r2
 8001dc8:	449b      	add	fp, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2500      	movs	r5, #0
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	033c      	lsls	r4, r7, #12
 8001dd2:	007b      	lsls	r3, r7, #1
 8001dd4:	0ffa      	lsrs	r2, r7, #31
 8001dd6:	9601      	str	r6, [sp, #4]
 8001dd8:	0b24      	lsrs	r4, r4, #12
 8001dda:	0d5b      	lsrs	r3, r3, #21
 8001ddc:	9200      	str	r2, [sp, #0]
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dmul+0x5e>
 8001de0:	e188      	b.n	80020f4 <__aeabi_dmul+0x370>
 8001de2:	4abf      	ldr	r2, [pc, #764]	@ (80020e0 <__aeabi_dmul+0x35c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d100      	bne.n	8001dea <__aeabi_dmul+0x66>
 8001de8:	e092      	b.n	8001f10 <__aeabi_dmul+0x18c>
 8001dea:	4abe      	ldr	r2, [pc, #760]	@ (80020e4 <__aeabi_dmul+0x360>)
 8001dec:	4694      	mov	ip, r2
 8001dee:	4463      	add	r3, ip
 8001df0:	449b      	add	fp, r3
 8001df2:	2d0a      	cmp	r5, #10
 8001df4:	dc42      	bgt.n	8001e7c <__aeabi_dmul+0xf8>
 8001df6:	00e4      	lsls	r4, r4, #3
 8001df8:	0f73      	lsrs	r3, r6, #29
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	2480      	movs	r4, #128	@ 0x80
 8001dfe:	4649      	mov	r1, r9
 8001e00:	0424      	lsls	r4, r4, #16
 8001e02:	431c      	orrs	r4, r3
 8001e04:	00f3      	lsls	r3, r6, #3
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	9b00      	ldr	r3, [sp, #0]
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	4059      	eors	r1, r3
 8001e0e:	b2cb      	uxtb	r3, r1
 8001e10:	9303      	str	r3, [sp, #12]
 8001e12:	2d02      	cmp	r5, #2
 8001e14:	dc00      	bgt.n	8001e18 <__aeabi_dmul+0x94>
 8001e16:	e094      	b.n	8001f42 <__aeabi_dmul+0x1be>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	40ab      	lsls	r3, r5
 8001e1c:	001d      	movs	r5, r3
 8001e1e:	23a6      	movs	r3, #166	@ 0xa6
 8001e20:	002a      	movs	r2, r5
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	401a      	ands	r2, r3
 8001e26:	421d      	tst	r5, r3
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dmul+0xa8>
 8001e2a:	e229      	b.n	8002280 <__aeabi_dmul+0x4fc>
 8001e2c:	2390      	movs	r3, #144	@ 0x90
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	421d      	tst	r5, r3
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dmul+0xb2>
 8001e34:	e24d      	b.n	80022d2 <__aeabi_dmul+0x54e>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2480      	movs	r4, #128	@ 0x80
 8001e3a:	4699      	mov	r9, r3
 8001e3c:	0324      	lsls	r4, r4, #12
 8001e3e:	4ba8      	ldr	r3, [pc, #672]	@ (80020e0 <__aeabi_dmul+0x35c>)
 8001e40:	0010      	movs	r0, r2
 8001e42:	464a      	mov	r2, r9
 8001e44:	051b      	lsls	r3, r3, #20
 8001e46:	4323      	orrs	r3, r4
 8001e48:	07d2      	lsls	r2, r2, #31
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	b005      	add	sp, #20
 8001e50:	bcf0      	pop	{r4, r5, r6, r7}
 8001e52:	46bb      	mov	fp, r7
 8001e54:	46b2      	mov	sl, r6
 8001e56:	46a9      	mov	r9, r5
 8001e58:	46a0      	mov	r8, r4
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	4302      	orrs	r2, r0
 8001e60:	4690      	mov	r8, r2
 8001e62:	d000      	beq.n	8001e66 <__aeabi_dmul+0xe2>
 8001e64:	e1ac      	b.n	80021c0 <__aeabi_dmul+0x43c>
 8001e66:	469b      	mov	fp, r3
 8001e68:	2302      	movs	r3, #2
 8001e6a:	4692      	mov	sl, r2
 8001e6c:	2508      	movs	r5, #8
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	e7ae      	b.n	8001dd0 <__aeabi_dmul+0x4c>
 8001e72:	9b00      	ldr	r3, [sp, #0]
 8001e74:	46a2      	mov	sl, r4
 8001e76:	4699      	mov	r9, r3
 8001e78:	9b01      	ldr	r3, [sp, #4]
 8001e7a:	4698      	mov	r8, r3
 8001e7c:	9b02      	ldr	r3, [sp, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dmul+0x100>
 8001e82:	e1ca      	b.n	800221a <__aeabi_dmul+0x496>
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dmul+0x106>
 8001e88:	e192      	b.n	80021b0 <__aeabi_dmul+0x42c>
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d110      	bne.n	8001eb0 <__aeabi_dmul+0x12c>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	2200      	movs	r2, #0
 8001e94:	e7d4      	b.n	8001e40 <__aeabi_dmul+0xbc>
 8001e96:	2201      	movs	r2, #1
 8001e98:	087b      	lsrs	r3, r7, #1
 8001e9a:	403a      	ands	r2, r7
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	4652      	mov	r2, sl
 8001ea0:	07d2      	lsls	r2, r2, #31
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	4698      	mov	r8, r3
 8001ea6:	4653      	mov	r3, sl
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	469a      	mov	sl, r3
 8001eac:	9b03      	ldr	r3, [sp, #12]
 8001eae:	4699      	mov	r9, r3
 8001eb0:	465b      	mov	r3, fp
 8001eb2:	1c58      	adds	r0, r3, #1
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	445b      	add	r3, fp
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dc00      	bgt.n	8001ec0 <__aeabi_dmul+0x13c>
 8001ebe:	e1b1      	b.n	8002224 <__aeabi_dmul+0x4a0>
 8001ec0:	4642      	mov	r2, r8
 8001ec2:	0752      	lsls	r2, r2, #29
 8001ec4:	d00b      	beq.n	8001ede <__aeabi_dmul+0x15a>
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	4641      	mov	r1, r8
 8001eca:	400a      	ands	r2, r1
 8001ecc:	2a04      	cmp	r2, #4
 8001ece:	d006      	beq.n	8001ede <__aeabi_dmul+0x15a>
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	1d11      	adds	r1, r2, #4
 8001ed4:	4541      	cmp	r1, r8
 8001ed6:	4192      	sbcs	r2, r2
 8001ed8:	4688      	mov	r8, r1
 8001eda:	4252      	negs	r2, r2
 8001edc:	4492      	add	sl, r2
 8001ede:	4652      	mov	r2, sl
 8001ee0:	01d2      	lsls	r2, r2, #7
 8001ee2:	d506      	bpl.n	8001ef2 <__aeabi_dmul+0x16e>
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	4b80      	ldr	r3, [pc, #512]	@ (80020e8 <__aeabi_dmul+0x364>)
 8001ee8:	401a      	ands	r2, r3
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	4692      	mov	sl, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	18c3      	adds	r3, r0, r3
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ec <__aeabi_dmul+0x368>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	dd00      	ble.n	8001efa <__aeabi_dmul+0x176>
 8001ef8:	e18f      	b.n	800221a <__aeabi_dmul+0x496>
 8001efa:	4642      	mov	r2, r8
 8001efc:	08d1      	lsrs	r1, r2, #3
 8001efe:	4652      	mov	r2, sl
 8001f00:	0752      	lsls	r2, r2, #29
 8001f02:	430a      	orrs	r2, r1
 8001f04:	4651      	mov	r1, sl
 8001f06:	055b      	lsls	r3, r3, #21
 8001f08:	024c      	lsls	r4, r1, #9
 8001f0a:	0b24      	lsrs	r4, r4, #12
 8001f0c:	0d5b      	lsrs	r3, r3, #21
 8001f0e:	e797      	b.n	8001e40 <__aeabi_dmul+0xbc>
 8001f10:	4b73      	ldr	r3, [pc, #460]	@ (80020e0 <__aeabi_dmul+0x35c>)
 8001f12:	4326      	orrs	r6, r4
 8001f14:	469c      	mov	ip, r3
 8001f16:	44e3      	add	fp, ip
 8001f18:	2e00      	cmp	r6, #0
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dmul+0x19a>
 8001f1c:	e16f      	b.n	80021fe <__aeabi_dmul+0x47a>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	4649      	mov	r1, r9
 8001f22:	431d      	orrs	r5, r3
 8001f24:	9b00      	ldr	r3, [sp, #0]
 8001f26:	4059      	eors	r1, r3
 8001f28:	b2cb      	uxtb	r3, r1
 8001f2a:	9303      	str	r3, [sp, #12]
 8001f2c:	2d0a      	cmp	r5, #10
 8001f2e:	dd00      	ble.n	8001f32 <__aeabi_dmul+0x1ae>
 8001f30:	e133      	b.n	800219a <__aeabi_dmul+0x416>
 8001f32:	2301      	movs	r3, #1
 8001f34:	40ab      	lsls	r3, r5
 8001f36:	001d      	movs	r5, r3
 8001f38:	2303      	movs	r3, #3
 8001f3a:	9302      	str	r3, [sp, #8]
 8001f3c:	2288      	movs	r2, #136	@ 0x88
 8001f3e:	422a      	tst	r2, r5
 8001f40:	d197      	bne.n	8001e72 <__aeabi_dmul+0xee>
 8001f42:	4642      	mov	r2, r8
 8001f44:	4643      	mov	r3, r8
 8001f46:	0412      	lsls	r2, r2, #16
 8001f48:	0c12      	lsrs	r2, r2, #16
 8001f4a:	0016      	movs	r6, r2
 8001f4c:	9801      	ldr	r0, [sp, #4]
 8001f4e:	0c1d      	lsrs	r5, r3, #16
 8001f50:	0c03      	lsrs	r3, r0, #16
 8001f52:	0400      	lsls	r0, r0, #16
 8001f54:	0c00      	lsrs	r0, r0, #16
 8001f56:	4346      	muls	r6, r0
 8001f58:	46b4      	mov	ip, r6
 8001f5a:	001e      	movs	r6, r3
 8001f5c:	436e      	muls	r6, r5
 8001f5e:	9600      	str	r6, [sp, #0]
 8001f60:	0016      	movs	r6, r2
 8001f62:	0007      	movs	r7, r0
 8001f64:	435e      	muls	r6, r3
 8001f66:	4661      	mov	r1, ip
 8001f68:	46b0      	mov	r8, r6
 8001f6a:	436f      	muls	r7, r5
 8001f6c:	0c0e      	lsrs	r6, r1, #16
 8001f6e:	44b8      	add	r8, r7
 8001f70:	4446      	add	r6, r8
 8001f72:	42b7      	cmp	r7, r6
 8001f74:	d905      	bls.n	8001f82 <__aeabi_dmul+0x1fe>
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	0249      	lsls	r1, r1, #9
 8001f7a:	4688      	mov	r8, r1
 8001f7c:	9f00      	ldr	r7, [sp, #0]
 8001f7e:	4447      	add	r7, r8
 8001f80:	9700      	str	r7, [sp, #0]
 8001f82:	4661      	mov	r1, ip
 8001f84:	0409      	lsls	r1, r1, #16
 8001f86:	0c09      	lsrs	r1, r1, #16
 8001f88:	0c37      	lsrs	r7, r6, #16
 8001f8a:	0436      	lsls	r6, r6, #16
 8001f8c:	468c      	mov	ip, r1
 8001f8e:	0031      	movs	r1, r6
 8001f90:	4461      	add	r1, ip
 8001f92:	9101      	str	r1, [sp, #4]
 8001f94:	0011      	movs	r1, r2
 8001f96:	0c26      	lsrs	r6, r4, #16
 8001f98:	0424      	lsls	r4, r4, #16
 8001f9a:	0c24      	lsrs	r4, r4, #16
 8001f9c:	4361      	muls	r1, r4
 8001f9e:	468c      	mov	ip, r1
 8001fa0:	0021      	movs	r1, r4
 8001fa2:	4369      	muls	r1, r5
 8001fa4:	4689      	mov	r9, r1
 8001fa6:	4661      	mov	r1, ip
 8001fa8:	0c09      	lsrs	r1, r1, #16
 8001faa:	4688      	mov	r8, r1
 8001fac:	4372      	muls	r2, r6
 8001fae:	444a      	add	r2, r9
 8001fb0:	4442      	add	r2, r8
 8001fb2:	4375      	muls	r5, r6
 8001fb4:	4591      	cmp	r9, r2
 8001fb6:	d903      	bls.n	8001fc0 <__aeabi_dmul+0x23c>
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	0249      	lsls	r1, r1, #9
 8001fbc:	4688      	mov	r8, r1
 8001fbe:	4445      	add	r5, r8
 8001fc0:	0c11      	lsrs	r1, r2, #16
 8001fc2:	4688      	mov	r8, r1
 8001fc4:	4661      	mov	r1, ip
 8001fc6:	0409      	lsls	r1, r1, #16
 8001fc8:	0c09      	lsrs	r1, r1, #16
 8001fca:	468c      	mov	ip, r1
 8001fcc:	0412      	lsls	r2, r2, #16
 8001fce:	4462      	add	r2, ip
 8001fd0:	18b9      	adds	r1, r7, r2
 8001fd2:	9102      	str	r1, [sp, #8]
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	0c09      	lsrs	r1, r1, #16
 8001fd8:	468c      	mov	ip, r1
 8001fda:	4651      	mov	r1, sl
 8001fdc:	040f      	lsls	r7, r1, #16
 8001fde:	0c3f      	lsrs	r7, r7, #16
 8001fe0:	0039      	movs	r1, r7
 8001fe2:	4341      	muls	r1, r0
 8001fe4:	4445      	add	r5, r8
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	4661      	mov	r1, ip
 8001fea:	4341      	muls	r1, r0
 8001fec:	468a      	mov	sl, r1
 8001fee:	4641      	mov	r1, r8
 8001ff0:	4660      	mov	r0, ip
 8001ff2:	0c09      	lsrs	r1, r1, #16
 8001ff4:	4689      	mov	r9, r1
 8001ff6:	4358      	muls	r0, r3
 8001ff8:	437b      	muls	r3, r7
 8001ffa:	4453      	add	r3, sl
 8001ffc:	444b      	add	r3, r9
 8001ffe:	459a      	cmp	sl, r3
 8002000:	d903      	bls.n	800200a <__aeabi_dmul+0x286>
 8002002:	2180      	movs	r1, #128	@ 0x80
 8002004:	0249      	lsls	r1, r1, #9
 8002006:	4689      	mov	r9, r1
 8002008:	4448      	add	r0, r9
 800200a:	0c19      	lsrs	r1, r3, #16
 800200c:	4689      	mov	r9, r1
 800200e:	4641      	mov	r1, r8
 8002010:	0409      	lsls	r1, r1, #16
 8002012:	0c09      	lsrs	r1, r1, #16
 8002014:	4688      	mov	r8, r1
 8002016:	0039      	movs	r1, r7
 8002018:	4361      	muls	r1, r4
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	4443      	add	r3, r8
 800201e:	4688      	mov	r8, r1
 8002020:	4661      	mov	r1, ip
 8002022:	434c      	muls	r4, r1
 8002024:	4371      	muls	r1, r6
 8002026:	468c      	mov	ip, r1
 8002028:	4641      	mov	r1, r8
 800202a:	4377      	muls	r7, r6
 800202c:	0c0e      	lsrs	r6, r1, #16
 800202e:	193f      	adds	r7, r7, r4
 8002030:	19f6      	adds	r6, r6, r7
 8002032:	4448      	add	r0, r9
 8002034:	42b4      	cmp	r4, r6
 8002036:	d903      	bls.n	8002040 <__aeabi_dmul+0x2bc>
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	0249      	lsls	r1, r1, #9
 800203c:	4689      	mov	r9, r1
 800203e:	44cc      	add	ip, r9
 8002040:	9902      	ldr	r1, [sp, #8]
 8002042:	9f00      	ldr	r7, [sp, #0]
 8002044:	4689      	mov	r9, r1
 8002046:	0431      	lsls	r1, r6, #16
 8002048:	444f      	add	r7, r9
 800204a:	4689      	mov	r9, r1
 800204c:	4641      	mov	r1, r8
 800204e:	4297      	cmp	r7, r2
 8002050:	4192      	sbcs	r2, r2
 8002052:	040c      	lsls	r4, r1, #16
 8002054:	0c24      	lsrs	r4, r4, #16
 8002056:	444c      	add	r4, r9
 8002058:	18ff      	adds	r7, r7, r3
 800205a:	4252      	negs	r2, r2
 800205c:	1964      	adds	r4, r4, r5
 800205e:	18a1      	adds	r1, r4, r2
 8002060:	429f      	cmp	r7, r3
 8002062:	419b      	sbcs	r3, r3
 8002064:	4688      	mov	r8, r1
 8002066:	4682      	mov	sl, r0
 8002068:	425b      	negs	r3, r3
 800206a:	4699      	mov	r9, r3
 800206c:	4590      	cmp	r8, r2
 800206e:	4192      	sbcs	r2, r2
 8002070:	42ac      	cmp	r4, r5
 8002072:	41a4      	sbcs	r4, r4
 8002074:	44c2      	add	sl, r8
 8002076:	44d1      	add	r9, sl
 8002078:	4252      	negs	r2, r2
 800207a:	4264      	negs	r4, r4
 800207c:	4314      	orrs	r4, r2
 800207e:	4599      	cmp	r9, r3
 8002080:	419b      	sbcs	r3, r3
 8002082:	4582      	cmp	sl, r0
 8002084:	4192      	sbcs	r2, r2
 8002086:	425b      	negs	r3, r3
 8002088:	4252      	negs	r2, r2
 800208a:	4313      	orrs	r3, r2
 800208c:	464a      	mov	r2, r9
 800208e:	0c36      	lsrs	r6, r6, #16
 8002090:	19a4      	adds	r4, r4, r6
 8002092:	18e3      	adds	r3, r4, r3
 8002094:	4463      	add	r3, ip
 8002096:	025b      	lsls	r3, r3, #9
 8002098:	0dd2      	lsrs	r2, r2, #23
 800209a:	431a      	orrs	r2, r3
 800209c:	9901      	ldr	r1, [sp, #4]
 800209e:	4692      	mov	sl, r2
 80020a0:	027a      	lsls	r2, r7, #9
 80020a2:	430a      	orrs	r2, r1
 80020a4:	1e50      	subs	r0, r2, #1
 80020a6:	4182      	sbcs	r2, r0
 80020a8:	0dff      	lsrs	r7, r7, #23
 80020aa:	4317      	orrs	r7, r2
 80020ac:	464a      	mov	r2, r9
 80020ae:	0252      	lsls	r2, r2, #9
 80020b0:	4317      	orrs	r7, r2
 80020b2:	46b8      	mov	r8, r7
 80020b4:	01db      	lsls	r3, r3, #7
 80020b6:	d500      	bpl.n	80020ba <__aeabi_dmul+0x336>
 80020b8:	e6ed      	b.n	8001e96 <__aeabi_dmul+0x112>
 80020ba:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <__aeabi_dmul+0x36c>)
 80020bc:	9a03      	ldr	r2, [sp, #12]
 80020be:	445b      	add	r3, fp
 80020c0:	4691      	mov	r9, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	dc00      	bgt.n	80020c8 <__aeabi_dmul+0x344>
 80020c6:	e0ac      	b.n	8002222 <__aeabi_dmul+0x49e>
 80020c8:	003a      	movs	r2, r7
 80020ca:	0752      	lsls	r2, r2, #29
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dmul+0x34c>
 80020ce:	e710      	b.n	8001ef2 <__aeabi_dmul+0x16e>
 80020d0:	220f      	movs	r2, #15
 80020d2:	4658      	mov	r0, fp
 80020d4:	403a      	ands	r2, r7
 80020d6:	2a04      	cmp	r2, #4
 80020d8:	d000      	beq.n	80020dc <__aeabi_dmul+0x358>
 80020da:	e6f9      	b.n	8001ed0 <__aeabi_dmul+0x14c>
 80020dc:	e709      	b.n	8001ef2 <__aeabi_dmul+0x16e>
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	000007ff 	.word	0x000007ff
 80020e4:	fffffc01 	.word	0xfffffc01
 80020e8:	feffffff 	.word	0xfeffffff
 80020ec:	000007fe 	.word	0x000007fe
 80020f0:	000003ff 	.word	0x000003ff
 80020f4:	0022      	movs	r2, r4
 80020f6:	4332      	orrs	r2, r6
 80020f8:	d06f      	beq.n	80021da <__aeabi_dmul+0x456>
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d100      	bne.n	8002100 <__aeabi_dmul+0x37c>
 80020fe:	e0c2      	b.n	8002286 <__aeabi_dmul+0x502>
 8002100:	0020      	movs	r0, r4
 8002102:	f000 fe1b 	bl	8002d3c <__clzsi2>
 8002106:	0002      	movs	r2, r0
 8002108:	0003      	movs	r3, r0
 800210a:	3a0b      	subs	r2, #11
 800210c:	201d      	movs	r0, #29
 800210e:	1a82      	subs	r2, r0, r2
 8002110:	0030      	movs	r0, r6
 8002112:	0019      	movs	r1, r3
 8002114:	40d0      	lsrs	r0, r2
 8002116:	3908      	subs	r1, #8
 8002118:	408c      	lsls	r4, r1
 800211a:	0002      	movs	r2, r0
 800211c:	4322      	orrs	r2, r4
 800211e:	0034      	movs	r4, r6
 8002120:	408c      	lsls	r4, r1
 8002122:	4659      	mov	r1, fp
 8002124:	1acb      	subs	r3, r1, r3
 8002126:	4986      	ldr	r1, [pc, #536]	@ (8002340 <__aeabi_dmul+0x5bc>)
 8002128:	468b      	mov	fp, r1
 800212a:	449b      	add	fp, r3
 800212c:	2d0a      	cmp	r5, #10
 800212e:	dd00      	ble.n	8002132 <__aeabi_dmul+0x3ae>
 8002130:	e6a4      	b.n	8001e7c <__aeabi_dmul+0xf8>
 8002132:	4649      	mov	r1, r9
 8002134:	9b00      	ldr	r3, [sp, #0]
 8002136:	9401      	str	r4, [sp, #4]
 8002138:	4059      	eors	r1, r3
 800213a:	b2cb      	uxtb	r3, r1
 800213c:	0014      	movs	r4, r2
 800213e:	2000      	movs	r0, #0
 8002140:	9303      	str	r3, [sp, #12]
 8002142:	2d02      	cmp	r5, #2
 8002144:	dd00      	ble.n	8002148 <__aeabi_dmul+0x3c4>
 8002146:	e667      	b.n	8001e18 <__aeabi_dmul+0x94>
 8002148:	e6fb      	b.n	8001f42 <__aeabi_dmul+0x1be>
 800214a:	4653      	mov	r3, sl
 800214c:	4303      	orrs	r3, r0
 800214e:	4698      	mov	r8, r3
 8002150:	d03c      	beq.n	80021cc <__aeabi_dmul+0x448>
 8002152:	4653      	mov	r3, sl
 8002154:	2b00      	cmp	r3, #0
 8002156:	d100      	bne.n	800215a <__aeabi_dmul+0x3d6>
 8002158:	e0a3      	b.n	80022a2 <__aeabi_dmul+0x51e>
 800215a:	4650      	mov	r0, sl
 800215c:	f000 fdee 	bl	8002d3c <__clzsi2>
 8002160:	230b      	movs	r3, #11
 8002162:	425b      	negs	r3, r3
 8002164:	469c      	mov	ip, r3
 8002166:	0002      	movs	r2, r0
 8002168:	4484      	add	ip, r0
 800216a:	0011      	movs	r1, r2
 800216c:	4650      	mov	r0, sl
 800216e:	3908      	subs	r1, #8
 8002170:	4088      	lsls	r0, r1
 8002172:	231d      	movs	r3, #29
 8002174:	4680      	mov	r8, r0
 8002176:	4660      	mov	r0, ip
 8002178:	1a1b      	subs	r3, r3, r0
 800217a:	0020      	movs	r0, r4
 800217c:	40d8      	lsrs	r0, r3
 800217e:	0003      	movs	r3, r0
 8002180:	4640      	mov	r0, r8
 8002182:	4303      	orrs	r3, r0
 8002184:	469a      	mov	sl, r3
 8002186:	0023      	movs	r3, r4
 8002188:	408b      	lsls	r3, r1
 800218a:	4698      	mov	r8, r3
 800218c:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <__aeabi_dmul+0x5bc>)
 800218e:	2500      	movs	r5, #0
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	469b      	mov	fp, r3
 8002194:	2300      	movs	r3, #0
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	e61a      	b.n	8001dd0 <__aeabi_dmul+0x4c>
 800219a:	2d0f      	cmp	r5, #15
 800219c:	d000      	beq.n	80021a0 <__aeabi_dmul+0x41c>
 800219e:	e0c9      	b.n	8002334 <__aeabi_dmul+0x5b0>
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	4652      	mov	r2, sl
 80021a4:	031b      	lsls	r3, r3, #12
 80021a6:	421a      	tst	r2, r3
 80021a8:	d002      	beq.n	80021b0 <__aeabi_dmul+0x42c>
 80021aa:	421c      	tst	r4, r3
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dmul+0x42c>
 80021ae:	e092      	b.n	80022d6 <__aeabi_dmul+0x552>
 80021b0:	2480      	movs	r4, #128	@ 0x80
 80021b2:	4653      	mov	r3, sl
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	431c      	orrs	r4, r3
 80021b8:	0324      	lsls	r4, r4, #12
 80021ba:	4642      	mov	r2, r8
 80021bc:	0b24      	lsrs	r4, r4, #12
 80021be:	e63e      	b.n	8001e3e <__aeabi_dmul+0xba>
 80021c0:	469b      	mov	fp, r3
 80021c2:	2303      	movs	r3, #3
 80021c4:	4680      	mov	r8, r0
 80021c6:	250c      	movs	r5, #12
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	e601      	b.n	8001dd0 <__aeabi_dmul+0x4c>
 80021cc:	2300      	movs	r3, #0
 80021ce:	469a      	mov	sl, r3
 80021d0:	469b      	mov	fp, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	2504      	movs	r5, #4
 80021d6:	9302      	str	r3, [sp, #8]
 80021d8:	e5fa      	b.n	8001dd0 <__aeabi_dmul+0x4c>
 80021da:	2101      	movs	r1, #1
 80021dc:	430d      	orrs	r5, r1
 80021de:	2d0a      	cmp	r5, #10
 80021e0:	dd00      	ble.n	80021e4 <__aeabi_dmul+0x460>
 80021e2:	e64b      	b.n	8001e7c <__aeabi_dmul+0xf8>
 80021e4:	4649      	mov	r1, r9
 80021e6:	9800      	ldr	r0, [sp, #0]
 80021e8:	4041      	eors	r1, r0
 80021ea:	b2c9      	uxtb	r1, r1
 80021ec:	9103      	str	r1, [sp, #12]
 80021ee:	2d02      	cmp	r5, #2
 80021f0:	dc00      	bgt.n	80021f4 <__aeabi_dmul+0x470>
 80021f2:	e096      	b.n	8002322 <__aeabi_dmul+0x59e>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2400      	movs	r4, #0
 80021f8:	2001      	movs	r0, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	e60c      	b.n	8001e18 <__aeabi_dmul+0x94>
 80021fe:	4649      	mov	r1, r9
 8002200:	2302      	movs	r3, #2
 8002202:	9a00      	ldr	r2, [sp, #0]
 8002204:	432b      	orrs	r3, r5
 8002206:	4051      	eors	r1, r2
 8002208:	b2ca      	uxtb	r2, r1
 800220a:	9203      	str	r2, [sp, #12]
 800220c:	2b0a      	cmp	r3, #10
 800220e:	dd00      	ble.n	8002212 <__aeabi_dmul+0x48e>
 8002210:	e634      	b.n	8001e7c <__aeabi_dmul+0xf8>
 8002212:	2d00      	cmp	r5, #0
 8002214:	d157      	bne.n	80022c6 <__aeabi_dmul+0x542>
 8002216:	9b03      	ldr	r3, [sp, #12]
 8002218:	4699      	mov	r9, r3
 800221a:	2400      	movs	r4, #0
 800221c:	2200      	movs	r2, #0
 800221e:	4b49      	ldr	r3, [pc, #292]	@ (8002344 <__aeabi_dmul+0x5c0>)
 8002220:	e60e      	b.n	8001e40 <__aeabi_dmul+0xbc>
 8002222:	4658      	mov	r0, fp
 8002224:	2101      	movs	r1, #1
 8002226:	1ac9      	subs	r1, r1, r3
 8002228:	2938      	cmp	r1, #56	@ 0x38
 800222a:	dd00      	ble.n	800222e <__aeabi_dmul+0x4aa>
 800222c:	e62f      	b.n	8001e8e <__aeabi_dmul+0x10a>
 800222e:	291f      	cmp	r1, #31
 8002230:	dd56      	ble.n	80022e0 <__aeabi_dmul+0x55c>
 8002232:	221f      	movs	r2, #31
 8002234:	4654      	mov	r4, sl
 8002236:	4252      	negs	r2, r2
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	40dc      	lsrs	r4, r3
 800223c:	2920      	cmp	r1, #32
 800223e:	d007      	beq.n	8002250 <__aeabi_dmul+0x4cc>
 8002240:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <__aeabi_dmul+0x5c4>)
 8002242:	4642      	mov	r2, r8
 8002244:	469c      	mov	ip, r3
 8002246:	4653      	mov	r3, sl
 8002248:	4460      	add	r0, ip
 800224a:	4083      	lsls	r3, r0
 800224c:	431a      	orrs	r2, r3
 800224e:	4690      	mov	r8, r2
 8002250:	4642      	mov	r2, r8
 8002252:	2107      	movs	r1, #7
 8002254:	1e53      	subs	r3, r2, #1
 8002256:	419a      	sbcs	r2, r3
 8002258:	000b      	movs	r3, r1
 800225a:	4322      	orrs	r2, r4
 800225c:	4013      	ands	r3, r2
 800225e:	2400      	movs	r4, #0
 8002260:	4211      	tst	r1, r2
 8002262:	d009      	beq.n	8002278 <__aeabi_dmul+0x4f4>
 8002264:	230f      	movs	r3, #15
 8002266:	4013      	ands	r3, r2
 8002268:	2b04      	cmp	r3, #4
 800226a:	d05d      	beq.n	8002328 <__aeabi_dmul+0x5a4>
 800226c:	1d11      	adds	r1, r2, #4
 800226e:	4291      	cmp	r1, r2
 8002270:	419b      	sbcs	r3, r3
 8002272:	000a      	movs	r2, r1
 8002274:	425b      	negs	r3, r3
 8002276:	075b      	lsls	r3, r3, #29
 8002278:	08d2      	lsrs	r2, r2, #3
 800227a:	431a      	orrs	r2, r3
 800227c:	2300      	movs	r3, #0
 800227e:	e5df      	b.n	8001e40 <__aeabi_dmul+0xbc>
 8002280:	9b03      	ldr	r3, [sp, #12]
 8002282:	4699      	mov	r9, r3
 8002284:	e5fa      	b.n	8001e7c <__aeabi_dmul+0xf8>
 8002286:	9801      	ldr	r0, [sp, #4]
 8002288:	f000 fd58 	bl	8002d3c <__clzsi2>
 800228c:	0002      	movs	r2, r0
 800228e:	0003      	movs	r3, r0
 8002290:	3215      	adds	r2, #21
 8002292:	3320      	adds	r3, #32
 8002294:	2a1c      	cmp	r2, #28
 8002296:	dc00      	bgt.n	800229a <__aeabi_dmul+0x516>
 8002298:	e738      	b.n	800210c <__aeabi_dmul+0x388>
 800229a:	9a01      	ldr	r2, [sp, #4]
 800229c:	3808      	subs	r0, #8
 800229e:	4082      	lsls	r2, r0
 80022a0:	e73f      	b.n	8002122 <__aeabi_dmul+0x39e>
 80022a2:	f000 fd4b 	bl	8002d3c <__clzsi2>
 80022a6:	2315      	movs	r3, #21
 80022a8:	469c      	mov	ip, r3
 80022aa:	4484      	add	ip, r0
 80022ac:	0002      	movs	r2, r0
 80022ae:	4663      	mov	r3, ip
 80022b0:	3220      	adds	r2, #32
 80022b2:	2b1c      	cmp	r3, #28
 80022b4:	dc00      	bgt.n	80022b8 <__aeabi_dmul+0x534>
 80022b6:	e758      	b.n	800216a <__aeabi_dmul+0x3e6>
 80022b8:	2300      	movs	r3, #0
 80022ba:	4698      	mov	r8, r3
 80022bc:	0023      	movs	r3, r4
 80022be:	3808      	subs	r0, #8
 80022c0:	4083      	lsls	r3, r0
 80022c2:	469a      	mov	sl, r3
 80022c4:	e762      	b.n	800218c <__aeabi_dmul+0x408>
 80022c6:	001d      	movs	r5, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	2400      	movs	r4, #0
 80022cc:	2002      	movs	r0, #2
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	e5a2      	b.n	8001e18 <__aeabi_dmul+0x94>
 80022d2:	9002      	str	r0, [sp, #8]
 80022d4:	e632      	b.n	8001f3c <__aeabi_dmul+0x1b8>
 80022d6:	431c      	orrs	r4, r3
 80022d8:	9b00      	ldr	r3, [sp, #0]
 80022da:	9a01      	ldr	r2, [sp, #4]
 80022dc:	4699      	mov	r9, r3
 80022de:	e5ae      	b.n	8001e3e <__aeabi_dmul+0xba>
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <__aeabi_dmul+0x5c8>)
 80022e2:	4652      	mov	r2, sl
 80022e4:	18c3      	adds	r3, r0, r3
 80022e6:	4640      	mov	r0, r8
 80022e8:	409a      	lsls	r2, r3
 80022ea:	40c8      	lsrs	r0, r1
 80022ec:	4302      	orrs	r2, r0
 80022ee:	4640      	mov	r0, r8
 80022f0:	4098      	lsls	r0, r3
 80022f2:	0003      	movs	r3, r0
 80022f4:	1e58      	subs	r0, r3, #1
 80022f6:	4183      	sbcs	r3, r0
 80022f8:	4654      	mov	r4, sl
 80022fa:	431a      	orrs	r2, r3
 80022fc:	40cc      	lsrs	r4, r1
 80022fe:	0753      	lsls	r3, r2, #29
 8002300:	d009      	beq.n	8002316 <__aeabi_dmul+0x592>
 8002302:	230f      	movs	r3, #15
 8002304:	4013      	ands	r3, r2
 8002306:	2b04      	cmp	r3, #4
 8002308:	d005      	beq.n	8002316 <__aeabi_dmul+0x592>
 800230a:	1d13      	adds	r3, r2, #4
 800230c:	4293      	cmp	r3, r2
 800230e:	4192      	sbcs	r2, r2
 8002310:	4252      	negs	r2, r2
 8002312:	18a4      	adds	r4, r4, r2
 8002314:	001a      	movs	r2, r3
 8002316:	0223      	lsls	r3, r4, #8
 8002318:	d508      	bpl.n	800232c <__aeabi_dmul+0x5a8>
 800231a:	2301      	movs	r3, #1
 800231c:	2400      	movs	r4, #0
 800231e:	2200      	movs	r2, #0
 8002320:	e58e      	b.n	8001e40 <__aeabi_dmul+0xbc>
 8002322:	4689      	mov	r9, r1
 8002324:	2400      	movs	r4, #0
 8002326:	e58b      	b.n	8001e40 <__aeabi_dmul+0xbc>
 8002328:	2300      	movs	r3, #0
 800232a:	e7a5      	b.n	8002278 <__aeabi_dmul+0x4f4>
 800232c:	0763      	lsls	r3, r4, #29
 800232e:	0264      	lsls	r4, r4, #9
 8002330:	0b24      	lsrs	r4, r4, #12
 8002332:	e7a1      	b.n	8002278 <__aeabi_dmul+0x4f4>
 8002334:	9b00      	ldr	r3, [sp, #0]
 8002336:	46a2      	mov	sl, r4
 8002338:	4699      	mov	r9, r3
 800233a:	9b01      	ldr	r3, [sp, #4]
 800233c:	4698      	mov	r8, r3
 800233e:	e737      	b.n	80021b0 <__aeabi_dmul+0x42c>
 8002340:	fffffc0d 	.word	0xfffffc0d
 8002344:	000007ff 	.word	0x000007ff
 8002348:	0000043e 	.word	0x0000043e
 800234c:	0000041e 	.word	0x0000041e

08002350 <__aeabi_dsub>:
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	4657      	mov	r7, sl
 8002354:	464e      	mov	r6, r9
 8002356:	4645      	mov	r5, r8
 8002358:	46de      	mov	lr, fp
 800235a:	b5e0      	push	{r5, r6, r7, lr}
 800235c:	b083      	sub	sp, #12
 800235e:	9000      	str	r0, [sp, #0]
 8002360:	9101      	str	r1, [sp, #4]
 8002362:	030c      	lsls	r4, r1, #12
 8002364:	004d      	lsls	r5, r1, #1
 8002366:	0fce      	lsrs	r6, r1, #31
 8002368:	0a61      	lsrs	r1, r4, #9
 800236a:	9c00      	ldr	r4, [sp, #0]
 800236c:	005f      	lsls	r7, r3, #1
 800236e:	0f64      	lsrs	r4, r4, #29
 8002370:	430c      	orrs	r4, r1
 8002372:	9900      	ldr	r1, [sp, #0]
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	00c8      	lsls	r0, r1, #3
 800237a:	0319      	lsls	r1, r3, #12
 800237c:	0d7b      	lsrs	r3, r7, #21
 800237e:	4699      	mov	r9, r3
 8002380:	9b01      	ldr	r3, [sp, #4]
 8002382:	4fcc      	ldr	r7, [pc, #816]	@ (80026b4 <__aeabi_dsub+0x364>)
 8002384:	0fdb      	lsrs	r3, r3, #31
 8002386:	469c      	mov	ip, r3
 8002388:	0a4b      	lsrs	r3, r1, #9
 800238a:	9900      	ldr	r1, [sp, #0]
 800238c:	4680      	mov	r8, r0
 800238e:	0f49      	lsrs	r1, r1, #29
 8002390:	4319      	orrs	r1, r3
 8002392:	9b00      	ldr	r3, [sp, #0]
 8002394:	468b      	mov	fp, r1
 8002396:	00da      	lsls	r2, r3, #3
 8002398:	4692      	mov	sl, r2
 800239a:	0d6d      	lsrs	r5, r5, #21
 800239c:	45b9      	cmp	r9, r7
 800239e:	d100      	bne.n	80023a2 <__aeabi_dsub+0x52>
 80023a0:	e0bf      	b.n	8002522 <__aeabi_dsub+0x1d2>
 80023a2:	2301      	movs	r3, #1
 80023a4:	4661      	mov	r1, ip
 80023a6:	4059      	eors	r1, r3
 80023a8:	464b      	mov	r3, r9
 80023aa:	468c      	mov	ip, r1
 80023ac:	1aeb      	subs	r3, r5, r3
 80023ae:	428e      	cmp	r6, r1
 80023b0:	d075      	beq.n	800249e <__aeabi_dsub+0x14e>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	dc00      	bgt.n	80023b8 <__aeabi_dsub+0x68>
 80023b6:	e2a3      	b.n	8002900 <__aeabi_dsub+0x5b0>
 80023b8:	4649      	mov	r1, r9
 80023ba:	2900      	cmp	r1, #0
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dsub+0x70>
 80023be:	e0ce      	b.n	800255e <__aeabi_dsub+0x20e>
 80023c0:	42bd      	cmp	r5, r7
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x76>
 80023c4:	e200      	b.n	80027c8 <__aeabi_dsub+0x478>
 80023c6:	2701      	movs	r7, #1
 80023c8:	2b38      	cmp	r3, #56	@ 0x38
 80023ca:	dc19      	bgt.n	8002400 <__aeabi_dsub+0xb0>
 80023cc:	2780      	movs	r7, #128	@ 0x80
 80023ce:	4659      	mov	r1, fp
 80023d0:	043f      	lsls	r7, r7, #16
 80023d2:	4339      	orrs	r1, r7
 80023d4:	468b      	mov	fp, r1
 80023d6:	2b1f      	cmp	r3, #31
 80023d8:	dd00      	ble.n	80023dc <__aeabi_dsub+0x8c>
 80023da:	e1fa      	b.n	80027d2 <__aeabi_dsub+0x482>
 80023dc:	2720      	movs	r7, #32
 80023de:	1af9      	subs	r1, r7, r3
 80023e0:	468c      	mov	ip, r1
 80023e2:	4659      	mov	r1, fp
 80023e4:	4667      	mov	r7, ip
 80023e6:	40b9      	lsls	r1, r7
 80023e8:	000f      	movs	r7, r1
 80023ea:	0011      	movs	r1, r2
 80023ec:	40d9      	lsrs	r1, r3
 80023ee:	430f      	orrs	r7, r1
 80023f0:	4661      	mov	r1, ip
 80023f2:	408a      	lsls	r2, r1
 80023f4:	1e51      	subs	r1, r2, #1
 80023f6:	418a      	sbcs	r2, r1
 80023f8:	4659      	mov	r1, fp
 80023fa:	40d9      	lsrs	r1, r3
 80023fc:	4317      	orrs	r7, r2
 80023fe:	1a64      	subs	r4, r4, r1
 8002400:	1bc7      	subs	r7, r0, r7
 8002402:	42b8      	cmp	r0, r7
 8002404:	4180      	sbcs	r0, r0
 8002406:	4240      	negs	r0, r0
 8002408:	1a24      	subs	r4, r4, r0
 800240a:	0223      	lsls	r3, r4, #8
 800240c:	d400      	bmi.n	8002410 <__aeabi_dsub+0xc0>
 800240e:	e140      	b.n	8002692 <__aeabi_dsub+0x342>
 8002410:	0264      	lsls	r4, r4, #9
 8002412:	0a64      	lsrs	r4, r4, #9
 8002414:	2c00      	cmp	r4, #0
 8002416:	d100      	bne.n	800241a <__aeabi_dsub+0xca>
 8002418:	e154      	b.n	80026c4 <__aeabi_dsub+0x374>
 800241a:	0020      	movs	r0, r4
 800241c:	f000 fc8e 	bl	8002d3c <__clzsi2>
 8002420:	0003      	movs	r3, r0
 8002422:	3b08      	subs	r3, #8
 8002424:	2120      	movs	r1, #32
 8002426:	0038      	movs	r0, r7
 8002428:	1aca      	subs	r2, r1, r3
 800242a:	40d0      	lsrs	r0, r2
 800242c:	409c      	lsls	r4, r3
 800242e:	0002      	movs	r2, r0
 8002430:	409f      	lsls	r7, r3
 8002432:	4322      	orrs	r2, r4
 8002434:	429d      	cmp	r5, r3
 8002436:	dd00      	ble.n	800243a <__aeabi_dsub+0xea>
 8002438:	e1a6      	b.n	8002788 <__aeabi_dsub+0x438>
 800243a:	1b58      	subs	r0, r3, r5
 800243c:	3001      	adds	r0, #1
 800243e:	1a09      	subs	r1, r1, r0
 8002440:	003c      	movs	r4, r7
 8002442:	408f      	lsls	r7, r1
 8002444:	40c4      	lsrs	r4, r0
 8002446:	1e7b      	subs	r3, r7, #1
 8002448:	419f      	sbcs	r7, r3
 800244a:	0013      	movs	r3, r2
 800244c:	408b      	lsls	r3, r1
 800244e:	4327      	orrs	r7, r4
 8002450:	431f      	orrs	r7, r3
 8002452:	40c2      	lsrs	r2, r0
 8002454:	003b      	movs	r3, r7
 8002456:	0014      	movs	r4, r2
 8002458:	2500      	movs	r5, #0
 800245a:	4313      	orrs	r3, r2
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x110>
 800245e:	e1f7      	b.n	8002850 <__aeabi_dsub+0x500>
 8002460:	077b      	lsls	r3, r7, #29
 8002462:	d100      	bne.n	8002466 <__aeabi_dsub+0x116>
 8002464:	e377      	b.n	8002b56 <__aeabi_dsub+0x806>
 8002466:	230f      	movs	r3, #15
 8002468:	0038      	movs	r0, r7
 800246a:	403b      	ands	r3, r7
 800246c:	2b04      	cmp	r3, #4
 800246e:	d004      	beq.n	800247a <__aeabi_dsub+0x12a>
 8002470:	1d38      	adds	r0, r7, #4
 8002472:	42b8      	cmp	r0, r7
 8002474:	41bf      	sbcs	r7, r7
 8002476:	427f      	negs	r7, r7
 8002478:	19e4      	adds	r4, r4, r7
 800247a:	0223      	lsls	r3, r4, #8
 800247c:	d400      	bmi.n	8002480 <__aeabi_dsub+0x130>
 800247e:	e368      	b.n	8002b52 <__aeabi_dsub+0x802>
 8002480:	4b8c      	ldr	r3, [pc, #560]	@ (80026b4 <__aeabi_dsub+0x364>)
 8002482:	3501      	adds	r5, #1
 8002484:	429d      	cmp	r5, r3
 8002486:	d100      	bne.n	800248a <__aeabi_dsub+0x13a>
 8002488:	e0f4      	b.n	8002674 <__aeabi_dsub+0x324>
 800248a:	4b8b      	ldr	r3, [pc, #556]	@ (80026b8 <__aeabi_dsub+0x368>)
 800248c:	056d      	lsls	r5, r5, #21
 800248e:	401c      	ands	r4, r3
 8002490:	0d6d      	lsrs	r5, r5, #21
 8002492:	0767      	lsls	r7, r4, #29
 8002494:	08c0      	lsrs	r0, r0, #3
 8002496:	0264      	lsls	r4, r4, #9
 8002498:	4307      	orrs	r7, r0
 800249a:	0b24      	lsrs	r4, r4, #12
 800249c:	e0ec      	b.n	8002678 <__aeabi_dsub+0x328>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	dc00      	bgt.n	80024a4 <__aeabi_dsub+0x154>
 80024a2:	e329      	b.n	8002af8 <__aeabi_dsub+0x7a8>
 80024a4:	4649      	mov	r1, r9
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d000      	beq.n	80024ac <__aeabi_dsub+0x15c>
 80024aa:	e0d6      	b.n	800265a <__aeabi_dsub+0x30a>
 80024ac:	4659      	mov	r1, fp
 80024ae:	4311      	orrs	r1, r2
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x164>
 80024b2:	e12e      	b.n	8002712 <__aeabi_dsub+0x3c2>
 80024b4:	1e59      	subs	r1, r3, #1
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x16c>
 80024ba:	e1e6      	b.n	800288a <__aeabi_dsub+0x53a>
 80024bc:	42bb      	cmp	r3, r7
 80024be:	d100      	bne.n	80024c2 <__aeabi_dsub+0x172>
 80024c0:	e182      	b.n	80027c8 <__aeabi_dsub+0x478>
 80024c2:	2701      	movs	r7, #1
 80024c4:	000b      	movs	r3, r1
 80024c6:	2938      	cmp	r1, #56	@ 0x38
 80024c8:	dc14      	bgt.n	80024f4 <__aeabi_dsub+0x1a4>
 80024ca:	2b1f      	cmp	r3, #31
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_dsub+0x180>
 80024ce:	e23c      	b.n	800294a <__aeabi_dsub+0x5fa>
 80024d0:	2720      	movs	r7, #32
 80024d2:	1af9      	subs	r1, r7, r3
 80024d4:	468c      	mov	ip, r1
 80024d6:	4659      	mov	r1, fp
 80024d8:	4667      	mov	r7, ip
 80024da:	40b9      	lsls	r1, r7
 80024dc:	000f      	movs	r7, r1
 80024de:	0011      	movs	r1, r2
 80024e0:	40d9      	lsrs	r1, r3
 80024e2:	430f      	orrs	r7, r1
 80024e4:	4661      	mov	r1, ip
 80024e6:	408a      	lsls	r2, r1
 80024e8:	1e51      	subs	r1, r2, #1
 80024ea:	418a      	sbcs	r2, r1
 80024ec:	4659      	mov	r1, fp
 80024ee:	40d9      	lsrs	r1, r3
 80024f0:	4317      	orrs	r7, r2
 80024f2:	1864      	adds	r4, r4, r1
 80024f4:	183f      	adds	r7, r7, r0
 80024f6:	4287      	cmp	r7, r0
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	4240      	negs	r0, r0
 80024fc:	1824      	adds	r4, r4, r0
 80024fe:	0223      	lsls	r3, r4, #8
 8002500:	d400      	bmi.n	8002504 <__aeabi_dsub+0x1b4>
 8002502:	e0c6      	b.n	8002692 <__aeabi_dsub+0x342>
 8002504:	4b6b      	ldr	r3, [pc, #428]	@ (80026b4 <__aeabi_dsub+0x364>)
 8002506:	3501      	adds	r5, #1
 8002508:	429d      	cmp	r5, r3
 800250a:	d100      	bne.n	800250e <__aeabi_dsub+0x1be>
 800250c:	e0b2      	b.n	8002674 <__aeabi_dsub+0x324>
 800250e:	2101      	movs	r1, #1
 8002510:	4b69      	ldr	r3, [pc, #420]	@ (80026b8 <__aeabi_dsub+0x368>)
 8002512:	087a      	lsrs	r2, r7, #1
 8002514:	401c      	ands	r4, r3
 8002516:	4039      	ands	r1, r7
 8002518:	430a      	orrs	r2, r1
 800251a:	07e7      	lsls	r7, r4, #31
 800251c:	4317      	orrs	r7, r2
 800251e:	0864      	lsrs	r4, r4, #1
 8002520:	e79e      	b.n	8002460 <__aeabi_dsub+0x110>
 8002522:	4b66      	ldr	r3, [pc, #408]	@ (80026bc <__aeabi_dsub+0x36c>)
 8002524:	4311      	orrs	r1, r2
 8002526:	468a      	mov	sl, r1
 8002528:	18eb      	adds	r3, r5, r3
 800252a:	2900      	cmp	r1, #0
 800252c:	d028      	beq.n	8002580 <__aeabi_dsub+0x230>
 800252e:	4566      	cmp	r6, ip
 8002530:	d02c      	beq.n	800258c <__aeabi_dsub+0x23c>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d05b      	beq.n	80025ee <__aeabi_dsub+0x29e>
 8002536:	2d00      	cmp	r5, #0
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x1ec>
 800253a:	e12c      	b.n	8002796 <__aeabi_dsub+0x446>
 800253c:	465b      	mov	r3, fp
 800253e:	4666      	mov	r6, ip
 8002540:	075f      	lsls	r7, r3, #29
 8002542:	08d2      	lsrs	r2, r2, #3
 8002544:	4317      	orrs	r7, r2
 8002546:	08dd      	lsrs	r5, r3, #3
 8002548:	003b      	movs	r3, r7
 800254a:	432b      	orrs	r3, r5
 800254c:	d100      	bne.n	8002550 <__aeabi_dsub+0x200>
 800254e:	e0e2      	b.n	8002716 <__aeabi_dsub+0x3c6>
 8002550:	2480      	movs	r4, #128	@ 0x80
 8002552:	0324      	lsls	r4, r4, #12
 8002554:	432c      	orrs	r4, r5
 8002556:	0324      	lsls	r4, r4, #12
 8002558:	4d56      	ldr	r5, [pc, #344]	@ (80026b4 <__aeabi_dsub+0x364>)
 800255a:	0b24      	lsrs	r4, r4, #12
 800255c:	e08c      	b.n	8002678 <__aeabi_dsub+0x328>
 800255e:	4659      	mov	r1, fp
 8002560:	4311      	orrs	r1, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dsub+0x216>
 8002564:	e0d5      	b.n	8002712 <__aeabi_dsub+0x3c2>
 8002566:	1e59      	subs	r1, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d100      	bne.n	800256e <__aeabi_dsub+0x21e>
 800256c:	e1b9      	b.n	80028e2 <__aeabi_dsub+0x592>
 800256e:	42bb      	cmp	r3, r7
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0x224>
 8002572:	e1b1      	b.n	80028d8 <__aeabi_dsub+0x588>
 8002574:	2701      	movs	r7, #1
 8002576:	000b      	movs	r3, r1
 8002578:	2938      	cmp	r1, #56	@ 0x38
 800257a:	dd00      	ble.n	800257e <__aeabi_dsub+0x22e>
 800257c:	e740      	b.n	8002400 <__aeabi_dsub+0xb0>
 800257e:	e72a      	b.n	80023d6 <__aeabi_dsub+0x86>
 8002580:	4661      	mov	r1, ip
 8002582:	2701      	movs	r7, #1
 8002584:	4079      	eors	r1, r7
 8002586:	468c      	mov	ip, r1
 8002588:	4566      	cmp	r6, ip
 800258a:	d1d2      	bne.n	8002532 <__aeabi_dsub+0x1e2>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d100      	bne.n	8002592 <__aeabi_dsub+0x242>
 8002590:	e0c5      	b.n	800271e <__aeabi_dsub+0x3ce>
 8002592:	2d00      	cmp	r5, #0
 8002594:	d000      	beq.n	8002598 <__aeabi_dsub+0x248>
 8002596:	e155      	b.n	8002844 <__aeabi_dsub+0x4f4>
 8002598:	464b      	mov	r3, r9
 800259a:	0025      	movs	r5, r4
 800259c:	4305      	orrs	r5, r0
 800259e:	d100      	bne.n	80025a2 <__aeabi_dsub+0x252>
 80025a0:	e212      	b.n	80029c8 <__aeabi_dsub+0x678>
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	468c      	mov	ip, r1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x25c>
 80025aa:	e249      	b.n	8002a40 <__aeabi_dsub+0x6f0>
 80025ac:	4d41      	ldr	r5, [pc, #260]	@ (80026b4 <__aeabi_dsub+0x364>)
 80025ae:	42ab      	cmp	r3, r5
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x264>
 80025b2:	e28f      	b.n	8002ad4 <__aeabi_dsub+0x784>
 80025b4:	2701      	movs	r7, #1
 80025b6:	2938      	cmp	r1, #56	@ 0x38
 80025b8:	dc11      	bgt.n	80025de <__aeabi_dsub+0x28e>
 80025ba:	4663      	mov	r3, ip
 80025bc:	2b1f      	cmp	r3, #31
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dsub+0x272>
 80025c0:	e25b      	b.n	8002a7a <__aeabi_dsub+0x72a>
 80025c2:	4661      	mov	r1, ip
 80025c4:	2320      	movs	r3, #32
 80025c6:	0027      	movs	r7, r4
 80025c8:	1a5b      	subs	r3, r3, r1
 80025ca:	0005      	movs	r5, r0
 80025cc:	4098      	lsls	r0, r3
 80025ce:	409f      	lsls	r7, r3
 80025d0:	40cd      	lsrs	r5, r1
 80025d2:	1e43      	subs	r3, r0, #1
 80025d4:	4198      	sbcs	r0, r3
 80025d6:	40cc      	lsrs	r4, r1
 80025d8:	432f      	orrs	r7, r5
 80025da:	4307      	orrs	r7, r0
 80025dc:	44a3      	add	fp, r4
 80025de:	18bf      	adds	r7, r7, r2
 80025e0:	4297      	cmp	r7, r2
 80025e2:	4192      	sbcs	r2, r2
 80025e4:	4252      	negs	r2, r2
 80025e6:	445a      	add	r2, fp
 80025e8:	0014      	movs	r4, r2
 80025ea:	464d      	mov	r5, r9
 80025ec:	e787      	b.n	80024fe <__aeabi_dsub+0x1ae>
 80025ee:	4f34      	ldr	r7, [pc, #208]	@ (80026c0 <__aeabi_dsub+0x370>)
 80025f0:	1c6b      	adds	r3, r5, #1
 80025f2:	423b      	tst	r3, r7
 80025f4:	d000      	beq.n	80025f8 <__aeabi_dsub+0x2a8>
 80025f6:	e0b6      	b.n	8002766 <__aeabi_dsub+0x416>
 80025f8:	4659      	mov	r1, fp
 80025fa:	0023      	movs	r3, r4
 80025fc:	4311      	orrs	r1, r2
 80025fe:	000f      	movs	r7, r1
 8002600:	4303      	orrs	r3, r0
 8002602:	2d00      	cmp	r5, #0
 8002604:	d000      	beq.n	8002608 <__aeabi_dsub+0x2b8>
 8002606:	e126      	b.n	8002856 <__aeabi_dsub+0x506>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d100      	bne.n	800260e <__aeabi_dsub+0x2be>
 800260c:	e1c0      	b.n	8002990 <__aeabi_dsub+0x640>
 800260e:	2900      	cmp	r1, #0
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x2c4>
 8002612:	e0a1      	b.n	8002758 <__aeabi_dsub+0x408>
 8002614:	1a83      	subs	r3, r0, r2
 8002616:	4698      	mov	r8, r3
 8002618:	465b      	mov	r3, fp
 800261a:	4540      	cmp	r0, r8
 800261c:	41ad      	sbcs	r5, r5
 800261e:	1ae3      	subs	r3, r4, r3
 8002620:	426d      	negs	r5, r5
 8002622:	1b5b      	subs	r3, r3, r5
 8002624:	2580      	movs	r5, #128	@ 0x80
 8002626:	042d      	lsls	r5, r5, #16
 8002628:	422b      	tst	r3, r5
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x2de>
 800262c:	e14b      	b.n	80028c6 <__aeabi_dsub+0x576>
 800262e:	465b      	mov	r3, fp
 8002630:	1a10      	subs	r0, r2, r0
 8002632:	4282      	cmp	r2, r0
 8002634:	4192      	sbcs	r2, r2
 8002636:	1b1c      	subs	r4, r3, r4
 8002638:	0007      	movs	r7, r0
 800263a:	2601      	movs	r6, #1
 800263c:	4663      	mov	r3, ip
 800263e:	4252      	negs	r2, r2
 8002640:	1aa4      	subs	r4, r4, r2
 8002642:	4327      	orrs	r7, r4
 8002644:	401e      	ands	r6, r3
 8002646:	2f00      	cmp	r7, #0
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x2fc>
 800264a:	e142      	b.n	80028d2 <__aeabi_dsub+0x582>
 800264c:	422c      	tst	r4, r5
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x302>
 8002650:	e26d      	b.n	8002b2e <__aeabi_dsub+0x7de>
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <__aeabi_dsub+0x368>)
 8002654:	2501      	movs	r5, #1
 8002656:	401c      	ands	r4, r3
 8002658:	e71b      	b.n	8002492 <__aeabi_dsub+0x142>
 800265a:	42bd      	cmp	r5, r7
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x310>
 800265e:	e13b      	b.n	80028d8 <__aeabi_dsub+0x588>
 8002660:	2701      	movs	r7, #1
 8002662:	2b38      	cmp	r3, #56	@ 0x38
 8002664:	dd00      	ble.n	8002668 <__aeabi_dsub+0x318>
 8002666:	e745      	b.n	80024f4 <__aeabi_dsub+0x1a4>
 8002668:	2780      	movs	r7, #128	@ 0x80
 800266a:	4659      	mov	r1, fp
 800266c:	043f      	lsls	r7, r7, #16
 800266e:	4339      	orrs	r1, r7
 8002670:	468b      	mov	fp, r1
 8002672:	e72a      	b.n	80024ca <__aeabi_dsub+0x17a>
 8002674:	2400      	movs	r4, #0
 8002676:	2700      	movs	r7, #0
 8002678:	052d      	lsls	r5, r5, #20
 800267a:	4325      	orrs	r5, r4
 800267c:	07f6      	lsls	r6, r6, #31
 800267e:	4335      	orrs	r5, r6
 8002680:	0038      	movs	r0, r7
 8002682:	0029      	movs	r1, r5
 8002684:	b003      	add	sp, #12
 8002686:	bcf0      	pop	{r4, r5, r6, r7}
 8002688:	46bb      	mov	fp, r7
 800268a:	46b2      	mov	sl, r6
 800268c:	46a9      	mov	r9, r5
 800268e:	46a0      	mov	r8, r4
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002692:	077b      	lsls	r3, r7, #29
 8002694:	d004      	beq.n	80026a0 <__aeabi_dsub+0x350>
 8002696:	230f      	movs	r3, #15
 8002698:	403b      	ands	r3, r7
 800269a:	2b04      	cmp	r3, #4
 800269c:	d000      	beq.n	80026a0 <__aeabi_dsub+0x350>
 800269e:	e6e7      	b.n	8002470 <__aeabi_dsub+0x120>
 80026a0:	002b      	movs	r3, r5
 80026a2:	08f8      	lsrs	r0, r7, #3
 80026a4:	4a03      	ldr	r2, [pc, #12]	@ (80026b4 <__aeabi_dsub+0x364>)
 80026a6:	0767      	lsls	r7, r4, #29
 80026a8:	4307      	orrs	r7, r0
 80026aa:	08e5      	lsrs	r5, r4, #3
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x362>
 80026b0:	e74a      	b.n	8002548 <__aeabi_dsub+0x1f8>
 80026b2:	e0a5      	b.n	8002800 <__aeabi_dsub+0x4b0>
 80026b4:	000007ff 	.word	0x000007ff
 80026b8:	ff7fffff 	.word	0xff7fffff
 80026bc:	fffff801 	.word	0xfffff801
 80026c0:	000007fe 	.word	0x000007fe
 80026c4:	0038      	movs	r0, r7
 80026c6:	f000 fb39 	bl	8002d3c <__clzsi2>
 80026ca:	0003      	movs	r3, r0
 80026cc:	3318      	adds	r3, #24
 80026ce:	2b1f      	cmp	r3, #31
 80026d0:	dc00      	bgt.n	80026d4 <__aeabi_dsub+0x384>
 80026d2:	e6a7      	b.n	8002424 <__aeabi_dsub+0xd4>
 80026d4:	003a      	movs	r2, r7
 80026d6:	3808      	subs	r0, #8
 80026d8:	4082      	lsls	r2, r0
 80026da:	429d      	cmp	r5, r3
 80026dc:	dd00      	ble.n	80026e0 <__aeabi_dsub+0x390>
 80026de:	e08a      	b.n	80027f6 <__aeabi_dsub+0x4a6>
 80026e0:	1b5b      	subs	r3, r3, r5
 80026e2:	1c58      	adds	r0, r3, #1
 80026e4:	281f      	cmp	r0, #31
 80026e6:	dc00      	bgt.n	80026ea <__aeabi_dsub+0x39a>
 80026e8:	e1d8      	b.n	8002a9c <__aeabi_dsub+0x74c>
 80026ea:	0017      	movs	r7, r2
 80026ec:	3b1f      	subs	r3, #31
 80026ee:	40df      	lsrs	r7, r3
 80026f0:	2820      	cmp	r0, #32
 80026f2:	d005      	beq.n	8002700 <__aeabi_dsub+0x3b0>
 80026f4:	2340      	movs	r3, #64	@ 0x40
 80026f6:	1a1b      	subs	r3, r3, r0
 80026f8:	409a      	lsls	r2, r3
 80026fa:	1e53      	subs	r3, r2, #1
 80026fc:	419a      	sbcs	r2, r3
 80026fe:	4317      	orrs	r7, r2
 8002700:	2500      	movs	r5, #0
 8002702:	2f00      	cmp	r7, #0
 8002704:	d100      	bne.n	8002708 <__aeabi_dsub+0x3b8>
 8002706:	e0e5      	b.n	80028d4 <__aeabi_dsub+0x584>
 8002708:	077b      	lsls	r3, r7, #29
 800270a:	d000      	beq.n	800270e <__aeabi_dsub+0x3be>
 800270c:	e6ab      	b.n	8002466 <__aeabi_dsub+0x116>
 800270e:	002c      	movs	r4, r5
 8002710:	e7c6      	b.n	80026a0 <__aeabi_dsub+0x350>
 8002712:	08c0      	lsrs	r0, r0, #3
 8002714:	e7c6      	b.n	80026a4 <__aeabi_dsub+0x354>
 8002716:	2700      	movs	r7, #0
 8002718:	2400      	movs	r4, #0
 800271a:	4dd1      	ldr	r5, [pc, #836]	@ (8002a60 <__aeabi_dsub+0x710>)
 800271c:	e7ac      	b.n	8002678 <__aeabi_dsub+0x328>
 800271e:	4fd1      	ldr	r7, [pc, #836]	@ (8002a64 <__aeabi_dsub+0x714>)
 8002720:	1c6b      	adds	r3, r5, #1
 8002722:	423b      	tst	r3, r7
 8002724:	d171      	bne.n	800280a <__aeabi_dsub+0x4ba>
 8002726:	0023      	movs	r3, r4
 8002728:	4303      	orrs	r3, r0
 800272a:	2d00      	cmp	r5, #0
 800272c:	d000      	beq.n	8002730 <__aeabi_dsub+0x3e0>
 800272e:	e14e      	b.n	80029ce <__aeabi_dsub+0x67e>
 8002730:	4657      	mov	r7, sl
 8002732:	2b00      	cmp	r3, #0
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x3e8>
 8002736:	e1b5      	b.n	8002aa4 <__aeabi_dsub+0x754>
 8002738:	2f00      	cmp	r7, #0
 800273a:	d00d      	beq.n	8002758 <__aeabi_dsub+0x408>
 800273c:	1883      	adds	r3, r0, r2
 800273e:	4283      	cmp	r3, r0
 8002740:	4180      	sbcs	r0, r0
 8002742:	445c      	add	r4, fp
 8002744:	4240      	negs	r0, r0
 8002746:	1824      	adds	r4, r4, r0
 8002748:	0222      	lsls	r2, r4, #8
 800274a:	d500      	bpl.n	800274e <__aeabi_dsub+0x3fe>
 800274c:	e1c8      	b.n	8002ae0 <__aeabi_dsub+0x790>
 800274e:	001f      	movs	r7, r3
 8002750:	4698      	mov	r8, r3
 8002752:	4327      	orrs	r7, r4
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x408>
 8002756:	e0bc      	b.n	80028d2 <__aeabi_dsub+0x582>
 8002758:	4643      	mov	r3, r8
 800275a:	0767      	lsls	r7, r4, #29
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	431f      	orrs	r7, r3
 8002760:	08e5      	lsrs	r5, r4, #3
 8002762:	2300      	movs	r3, #0
 8002764:	e04c      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002766:	1a83      	subs	r3, r0, r2
 8002768:	4698      	mov	r8, r3
 800276a:	465b      	mov	r3, fp
 800276c:	4540      	cmp	r0, r8
 800276e:	41bf      	sbcs	r7, r7
 8002770:	1ae3      	subs	r3, r4, r3
 8002772:	427f      	negs	r7, r7
 8002774:	1bdb      	subs	r3, r3, r7
 8002776:	021f      	lsls	r7, r3, #8
 8002778:	d47c      	bmi.n	8002874 <__aeabi_dsub+0x524>
 800277a:	4647      	mov	r7, r8
 800277c:	431f      	orrs	r7, r3
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x432>
 8002780:	e0a6      	b.n	80028d0 <__aeabi_dsub+0x580>
 8002782:	001c      	movs	r4, r3
 8002784:	4647      	mov	r7, r8
 8002786:	e645      	b.n	8002414 <__aeabi_dsub+0xc4>
 8002788:	4cb7      	ldr	r4, [pc, #732]	@ (8002a68 <__aeabi_dsub+0x718>)
 800278a:	1aed      	subs	r5, r5, r3
 800278c:	4014      	ands	r4, r2
 800278e:	077b      	lsls	r3, r7, #29
 8002790:	d000      	beq.n	8002794 <__aeabi_dsub+0x444>
 8002792:	e780      	b.n	8002696 <__aeabi_dsub+0x346>
 8002794:	e784      	b.n	80026a0 <__aeabi_dsub+0x350>
 8002796:	464b      	mov	r3, r9
 8002798:	0025      	movs	r5, r4
 800279a:	4305      	orrs	r5, r0
 800279c:	d066      	beq.n	800286c <__aeabi_dsub+0x51c>
 800279e:	1e5f      	subs	r7, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dsub+0x456>
 80027a4:	e0fc      	b.n	80029a0 <__aeabi_dsub+0x650>
 80027a6:	4dae      	ldr	r5, [pc, #696]	@ (8002a60 <__aeabi_dsub+0x710>)
 80027a8:	42ab      	cmp	r3, r5
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x45e>
 80027ac:	e15e      	b.n	8002a6c <__aeabi_dsub+0x71c>
 80027ae:	4666      	mov	r6, ip
 80027b0:	2f38      	cmp	r7, #56	@ 0x38
 80027b2:	dc00      	bgt.n	80027b6 <__aeabi_dsub+0x466>
 80027b4:	e0b4      	b.n	8002920 <__aeabi_dsub+0x5d0>
 80027b6:	2001      	movs	r0, #1
 80027b8:	1a17      	subs	r7, r2, r0
 80027ba:	42ba      	cmp	r2, r7
 80027bc:	4192      	sbcs	r2, r2
 80027be:	465b      	mov	r3, fp
 80027c0:	4252      	negs	r2, r2
 80027c2:	464d      	mov	r5, r9
 80027c4:	1a9c      	subs	r4, r3, r2
 80027c6:	e620      	b.n	800240a <__aeabi_dsub+0xba>
 80027c8:	0767      	lsls	r7, r4, #29
 80027ca:	08c0      	lsrs	r0, r0, #3
 80027cc:	4307      	orrs	r7, r0
 80027ce:	08e5      	lsrs	r5, r4, #3
 80027d0:	e6ba      	b.n	8002548 <__aeabi_dsub+0x1f8>
 80027d2:	001f      	movs	r7, r3
 80027d4:	4659      	mov	r1, fp
 80027d6:	3f20      	subs	r7, #32
 80027d8:	40f9      	lsrs	r1, r7
 80027da:	000f      	movs	r7, r1
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d005      	beq.n	80027ec <__aeabi_dsub+0x49c>
 80027e0:	2140      	movs	r1, #64	@ 0x40
 80027e2:	1acb      	subs	r3, r1, r3
 80027e4:	4659      	mov	r1, fp
 80027e6:	4099      	lsls	r1, r3
 80027e8:	430a      	orrs	r2, r1
 80027ea:	4692      	mov	sl, r2
 80027ec:	4653      	mov	r3, sl
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	4193      	sbcs	r3, r2
 80027f2:	431f      	orrs	r7, r3
 80027f4:	e604      	b.n	8002400 <__aeabi_dsub+0xb0>
 80027f6:	1aeb      	subs	r3, r5, r3
 80027f8:	4d9b      	ldr	r5, [pc, #620]	@ (8002a68 <__aeabi_dsub+0x718>)
 80027fa:	4015      	ands	r5, r2
 80027fc:	076f      	lsls	r7, r5, #29
 80027fe:	08ed      	lsrs	r5, r5, #3
 8002800:	032c      	lsls	r4, r5, #12
 8002802:	055d      	lsls	r5, r3, #21
 8002804:	0b24      	lsrs	r4, r4, #12
 8002806:	0d6d      	lsrs	r5, r5, #21
 8002808:	e736      	b.n	8002678 <__aeabi_dsub+0x328>
 800280a:	4d95      	ldr	r5, [pc, #596]	@ (8002a60 <__aeabi_dsub+0x710>)
 800280c:	42ab      	cmp	r3, r5
 800280e:	d100      	bne.n	8002812 <__aeabi_dsub+0x4c2>
 8002810:	e0d6      	b.n	80029c0 <__aeabi_dsub+0x670>
 8002812:	1882      	adds	r2, r0, r2
 8002814:	0021      	movs	r1, r4
 8002816:	4282      	cmp	r2, r0
 8002818:	4180      	sbcs	r0, r0
 800281a:	4459      	add	r1, fp
 800281c:	4240      	negs	r0, r0
 800281e:	1808      	adds	r0, r1, r0
 8002820:	07c7      	lsls	r7, r0, #31
 8002822:	0852      	lsrs	r2, r2, #1
 8002824:	4317      	orrs	r7, r2
 8002826:	0844      	lsrs	r4, r0, #1
 8002828:	0752      	lsls	r2, r2, #29
 800282a:	d400      	bmi.n	800282e <__aeabi_dsub+0x4de>
 800282c:	e185      	b.n	8002b3a <__aeabi_dsub+0x7ea>
 800282e:	220f      	movs	r2, #15
 8002830:	001d      	movs	r5, r3
 8002832:	403a      	ands	r2, r7
 8002834:	2a04      	cmp	r2, #4
 8002836:	d000      	beq.n	800283a <__aeabi_dsub+0x4ea>
 8002838:	e61a      	b.n	8002470 <__aeabi_dsub+0x120>
 800283a:	08ff      	lsrs	r7, r7, #3
 800283c:	0764      	lsls	r4, r4, #29
 800283e:	4327      	orrs	r7, r4
 8002840:	0905      	lsrs	r5, r0, #4
 8002842:	e7dd      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002844:	465b      	mov	r3, fp
 8002846:	08d2      	lsrs	r2, r2, #3
 8002848:	075f      	lsls	r7, r3, #29
 800284a:	4317      	orrs	r7, r2
 800284c:	08dd      	lsrs	r5, r3, #3
 800284e:	e67b      	b.n	8002548 <__aeabi_dsub+0x1f8>
 8002850:	2700      	movs	r7, #0
 8002852:	2400      	movs	r4, #0
 8002854:	e710      	b.n	8002678 <__aeabi_dsub+0x328>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d000      	beq.n	800285c <__aeabi_dsub+0x50c>
 800285a:	e0d6      	b.n	8002a0a <__aeabi_dsub+0x6ba>
 800285c:	2900      	cmp	r1, #0
 800285e:	d000      	beq.n	8002862 <__aeabi_dsub+0x512>
 8002860:	e12f      	b.n	8002ac2 <__aeabi_dsub+0x772>
 8002862:	2480      	movs	r4, #128	@ 0x80
 8002864:	2600      	movs	r6, #0
 8002866:	4d7e      	ldr	r5, [pc, #504]	@ (8002a60 <__aeabi_dsub+0x710>)
 8002868:	0324      	lsls	r4, r4, #12
 800286a:	e705      	b.n	8002678 <__aeabi_dsub+0x328>
 800286c:	4666      	mov	r6, ip
 800286e:	465c      	mov	r4, fp
 8002870:	08d0      	lsrs	r0, r2, #3
 8002872:	e717      	b.n	80026a4 <__aeabi_dsub+0x354>
 8002874:	465b      	mov	r3, fp
 8002876:	1a17      	subs	r7, r2, r0
 8002878:	42ba      	cmp	r2, r7
 800287a:	4192      	sbcs	r2, r2
 800287c:	1b1c      	subs	r4, r3, r4
 800287e:	2601      	movs	r6, #1
 8002880:	4663      	mov	r3, ip
 8002882:	4252      	negs	r2, r2
 8002884:	1aa4      	subs	r4, r4, r2
 8002886:	401e      	ands	r6, r3
 8002888:	e5c4      	b.n	8002414 <__aeabi_dsub+0xc4>
 800288a:	1883      	adds	r3, r0, r2
 800288c:	4283      	cmp	r3, r0
 800288e:	4180      	sbcs	r0, r0
 8002890:	445c      	add	r4, fp
 8002892:	4240      	negs	r0, r0
 8002894:	1825      	adds	r5, r4, r0
 8002896:	022a      	lsls	r2, r5, #8
 8002898:	d400      	bmi.n	800289c <__aeabi_dsub+0x54c>
 800289a:	e0da      	b.n	8002a52 <__aeabi_dsub+0x702>
 800289c:	4a72      	ldr	r2, [pc, #456]	@ (8002a68 <__aeabi_dsub+0x718>)
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	4015      	ands	r5, r2
 80028a2:	07ea      	lsls	r2, r5, #31
 80028a4:	431a      	orrs	r2, r3
 80028a6:	0869      	lsrs	r1, r5, #1
 80028a8:	075b      	lsls	r3, r3, #29
 80028aa:	d400      	bmi.n	80028ae <__aeabi_dsub+0x55e>
 80028ac:	e14a      	b.n	8002b44 <__aeabi_dsub+0x7f4>
 80028ae:	230f      	movs	r3, #15
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x568>
 80028b6:	e0fc      	b.n	8002ab2 <__aeabi_dsub+0x762>
 80028b8:	1d17      	adds	r7, r2, #4
 80028ba:	4297      	cmp	r7, r2
 80028bc:	41a4      	sbcs	r4, r4
 80028be:	4264      	negs	r4, r4
 80028c0:	2502      	movs	r5, #2
 80028c2:	1864      	adds	r4, r4, r1
 80028c4:	e6ec      	b.n	80026a0 <__aeabi_dsub+0x350>
 80028c6:	4647      	mov	r7, r8
 80028c8:	001c      	movs	r4, r3
 80028ca:	431f      	orrs	r7, r3
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x580>
 80028ce:	e743      	b.n	8002758 <__aeabi_dsub+0x408>
 80028d0:	2600      	movs	r6, #0
 80028d2:	2500      	movs	r5, #0
 80028d4:	2400      	movs	r4, #0
 80028d6:	e6cf      	b.n	8002678 <__aeabi_dsub+0x328>
 80028d8:	08c0      	lsrs	r0, r0, #3
 80028da:	0767      	lsls	r7, r4, #29
 80028dc:	4307      	orrs	r7, r0
 80028de:	08e5      	lsrs	r5, r4, #3
 80028e0:	e632      	b.n	8002548 <__aeabi_dsub+0x1f8>
 80028e2:	1a87      	subs	r7, r0, r2
 80028e4:	465b      	mov	r3, fp
 80028e6:	42b8      	cmp	r0, r7
 80028e8:	4180      	sbcs	r0, r0
 80028ea:	1ae4      	subs	r4, r4, r3
 80028ec:	4240      	negs	r0, r0
 80028ee:	1a24      	subs	r4, r4, r0
 80028f0:	0223      	lsls	r3, r4, #8
 80028f2:	d428      	bmi.n	8002946 <__aeabi_dsub+0x5f6>
 80028f4:	0763      	lsls	r3, r4, #29
 80028f6:	08ff      	lsrs	r7, r7, #3
 80028f8:	431f      	orrs	r7, r3
 80028fa:	08e5      	lsrs	r5, r4, #3
 80028fc:	2301      	movs	r3, #1
 80028fe:	e77f      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d100      	bne.n	8002906 <__aeabi_dsub+0x5b6>
 8002904:	e673      	b.n	80025ee <__aeabi_dsub+0x29e>
 8002906:	464b      	mov	r3, r9
 8002908:	1b5f      	subs	r7, r3, r5
 800290a:	003b      	movs	r3, r7
 800290c:	2d00      	cmp	r5, #0
 800290e:	d100      	bne.n	8002912 <__aeabi_dsub+0x5c2>
 8002910:	e742      	b.n	8002798 <__aeabi_dsub+0x448>
 8002912:	2f38      	cmp	r7, #56	@ 0x38
 8002914:	dd00      	ble.n	8002918 <__aeabi_dsub+0x5c8>
 8002916:	e0ec      	b.n	8002af2 <__aeabi_dsub+0x7a2>
 8002918:	2380      	movs	r3, #128	@ 0x80
 800291a:	000e      	movs	r6, r1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431c      	orrs	r4, r3
 8002920:	2f1f      	cmp	r7, #31
 8002922:	dc25      	bgt.n	8002970 <__aeabi_dsub+0x620>
 8002924:	2520      	movs	r5, #32
 8002926:	0023      	movs	r3, r4
 8002928:	1bed      	subs	r5, r5, r7
 800292a:	0001      	movs	r1, r0
 800292c:	40a8      	lsls	r0, r5
 800292e:	40ab      	lsls	r3, r5
 8002930:	40f9      	lsrs	r1, r7
 8002932:	1e45      	subs	r5, r0, #1
 8002934:	41a8      	sbcs	r0, r5
 8002936:	430b      	orrs	r3, r1
 8002938:	40fc      	lsrs	r4, r7
 800293a:	4318      	orrs	r0, r3
 800293c:	465b      	mov	r3, fp
 800293e:	1b1b      	subs	r3, r3, r4
 8002940:	469b      	mov	fp, r3
 8002942:	e739      	b.n	80027b8 <__aeabi_dsub+0x468>
 8002944:	4666      	mov	r6, ip
 8002946:	2501      	movs	r5, #1
 8002948:	e562      	b.n	8002410 <__aeabi_dsub+0xc0>
 800294a:	001f      	movs	r7, r3
 800294c:	4659      	mov	r1, fp
 800294e:	3f20      	subs	r7, #32
 8002950:	40f9      	lsrs	r1, r7
 8002952:	468c      	mov	ip, r1
 8002954:	2b20      	cmp	r3, #32
 8002956:	d005      	beq.n	8002964 <__aeabi_dsub+0x614>
 8002958:	2740      	movs	r7, #64	@ 0x40
 800295a:	4659      	mov	r1, fp
 800295c:	1afb      	subs	r3, r7, r3
 800295e:	4099      	lsls	r1, r3
 8002960:	430a      	orrs	r2, r1
 8002962:	4692      	mov	sl, r2
 8002964:	4657      	mov	r7, sl
 8002966:	1e7b      	subs	r3, r7, #1
 8002968:	419f      	sbcs	r7, r3
 800296a:	4663      	mov	r3, ip
 800296c:	431f      	orrs	r7, r3
 800296e:	e5c1      	b.n	80024f4 <__aeabi_dsub+0x1a4>
 8002970:	003b      	movs	r3, r7
 8002972:	0025      	movs	r5, r4
 8002974:	3b20      	subs	r3, #32
 8002976:	40dd      	lsrs	r5, r3
 8002978:	2f20      	cmp	r7, #32
 800297a:	d004      	beq.n	8002986 <__aeabi_dsub+0x636>
 800297c:	2340      	movs	r3, #64	@ 0x40
 800297e:	1bdb      	subs	r3, r3, r7
 8002980:	409c      	lsls	r4, r3
 8002982:	4320      	orrs	r0, r4
 8002984:	4680      	mov	r8, r0
 8002986:	4640      	mov	r0, r8
 8002988:	1e43      	subs	r3, r0, #1
 800298a:	4198      	sbcs	r0, r3
 800298c:	4328      	orrs	r0, r5
 800298e:	e713      	b.n	80027b8 <__aeabi_dsub+0x468>
 8002990:	2900      	cmp	r1, #0
 8002992:	d09d      	beq.n	80028d0 <__aeabi_dsub+0x580>
 8002994:	2601      	movs	r6, #1
 8002996:	4663      	mov	r3, ip
 8002998:	465c      	mov	r4, fp
 800299a:	4690      	mov	r8, r2
 800299c:	401e      	ands	r6, r3
 800299e:	e6db      	b.n	8002758 <__aeabi_dsub+0x408>
 80029a0:	1a17      	subs	r7, r2, r0
 80029a2:	465b      	mov	r3, fp
 80029a4:	42ba      	cmp	r2, r7
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	1b1c      	subs	r4, r3, r4
 80029aa:	4252      	negs	r2, r2
 80029ac:	1aa4      	subs	r4, r4, r2
 80029ae:	0223      	lsls	r3, r4, #8
 80029b0:	d4c8      	bmi.n	8002944 <__aeabi_dsub+0x5f4>
 80029b2:	0763      	lsls	r3, r4, #29
 80029b4:	08ff      	lsrs	r7, r7, #3
 80029b6:	431f      	orrs	r7, r3
 80029b8:	4666      	mov	r6, ip
 80029ba:	2301      	movs	r3, #1
 80029bc:	08e5      	lsrs	r5, r4, #3
 80029be:	e71f      	b.n	8002800 <__aeabi_dsub+0x4b0>
 80029c0:	001d      	movs	r5, r3
 80029c2:	2400      	movs	r4, #0
 80029c4:	2700      	movs	r7, #0
 80029c6:	e657      	b.n	8002678 <__aeabi_dsub+0x328>
 80029c8:	465c      	mov	r4, fp
 80029ca:	08d0      	lsrs	r0, r2, #3
 80029cc:	e66a      	b.n	80026a4 <__aeabi_dsub+0x354>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x684>
 80029d2:	e737      	b.n	8002844 <__aeabi_dsub+0x4f4>
 80029d4:	4653      	mov	r3, sl
 80029d6:	08c0      	lsrs	r0, r0, #3
 80029d8:	0767      	lsls	r7, r4, #29
 80029da:	4307      	orrs	r7, r0
 80029dc:	08e5      	lsrs	r5, r4, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x694>
 80029e2:	e5b1      	b.n	8002548 <__aeabi_dsub+0x1f8>
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	031b      	lsls	r3, r3, #12
 80029e8:	421d      	tst	r5, r3
 80029ea:	d008      	beq.n	80029fe <__aeabi_dsub+0x6ae>
 80029ec:	4659      	mov	r1, fp
 80029ee:	08c8      	lsrs	r0, r1, #3
 80029f0:	4218      	tst	r0, r3
 80029f2:	d104      	bne.n	80029fe <__aeabi_dsub+0x6ae>
 80029f4:	08d2      	lsrs	r2, r2, #3
 80029f6:	0749      	lsls	r1, r1, #29
 80029f8:	430a      	orrs	r2, r1
 80029fa:	0017      	movs	r7, r2
 80029fc:	0005      	movs	r5, r0
 80029fe:	0f7b      	lsrs	r3, r7, #29
 8002a00:	00ff      	lsls	r7, r7, #3
 8002a02:	08ff      	lsrs	r7, r7, #3
 8002a04:	075b      	lsls	r3, r3, #29
 8002a06:	431f      	orrs	r7, r3
 8002a08:	e59e      	b.n	8002548 <__aeabi_dsub+0x1f8>
 8002a0a:	08c0      	lsrs	r0, r0, #3
 8002a0c:	0763      	lsls	r3, r4, #29
 8002a0e:	4318      	orrs	r0, r3
 8002a10:	08e5      	lsrs	r5, r4, #3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d053      	beq.n	8002abe <__aeabi_dsub+0x76e>
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	031b      	lsls	r3, r3, #12
 8002a1a:	421d      	tst	r5, r3
 8002a1c:	d00a      	beq.n	8002a34 <__aeabi_dsub+0x6e4>
 8002a1e:	4659      	mov	r1, fp
 8002a20:	08cc      	lsrs	r4, r1, #3
 8002a22:	421c      	tst	r4, r3
 8002a24:	d106      	bne.n	8002a34 <__aeabi_dsub+0x6e4>
 8002a26:	2601      	movs	r6, #1
 8002a28:	4663      	mov	r3, ip
 8002a2a:	0025      	movs	r5, r4
 8002a2c:	08d0      	lsrs	r0, r2, #3
 8002a2e:	0749      	lsls	r1, r1, #29
 8002a30:	4308      	orrs	r0, r1
 8002a32:	401e      	ands	r6, r3
 8002a34:	0f47      	lsrs	r7, r0, #29
 8002a36:	00c0      	lsls	r0, r0, #3
 8002a38:	08c0      	lsrs	r0, r0, #3
 8002a3a:	077f      	lsls	r7, r7, #29
 8002a3c:	4307      	orrs	r7, r0
 8002a3e:	e583      	b.n	8002548 <__aeabi_dsub+0x1f8>
 8002a40:	1883      	adds	r3, r0, r2
 8002a42:	4293      	cmp	r3, r2
 8002a44:	4192      	sbcs	r2, r2
 8002a46:	445c      	add	r4, fp
 8002a48:	4252      	negs	r2, r2
 8002a4a:	18a5      	adds	r5, r4, r2
 8002a4c:	022a      	lsls	r2, r5, #8
 8002a4e:	d500      	bpl.n	8002a52 <__aeabi_dsub+0x702>
 8002a50:	e724      	b.n	800289c <__aeabi_dsub+0x54c>
 8002a52:	076f      	lsls	r7, r5, #29
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	431f      	orrs	r7, r3
 8002a58:	08ed      	lsrs	r5, r5, #3
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e6d0      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	000007ff 	.word	0x000007ff
 8002a64:	000007fe 	.word	0x000007fe
 8002a68:	ff7fffff 	.word	0xff7fffff
 8002a6c:	465b      	mov	r3, fp
 8002a6e:	08d2      	lsrs	r2, r2, #3
 8002a70:	075f      	lsls	r7, r3, #29
 8002a72:	4666      	mov	r6, ip
 8002a74:	4317      	orrs	r7, r2
 8002a76:	08dd      	lsrs	r5, r3, #3
 8002a78:	e566      	b.n	8002548 <__aeabi_dsub+0x1f8>
 8002a7a:	0025      	movs	r5, r4
 8002a7c:	3b20      	subs	r3, #32
 8002a7e:	40dd      	lsrs	r5, r3
 8002a80:	4663      	mov	r3, ip
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d005      	beq.n	8002a92 <__aeabi_dsub+0x742>
 8002a86:	2340      	movs	r3, #64	@ 0x40
 8002a88:	4661      	mov	r1, ip
 8002a8a:	1a5b      	subs	r3, r3, r1
 8002a8c:	409c      	lsls	r4, r3
 8002a8e:	4320      	orrs	r0, r4
 8002a90:	4680      	mov	r8, r0
 8002a92:	4647      	mov	r7, r8
 8002a94:	1e7b      	subs	r3, r7, #1
 8002a96:	419f      	sbcs	r7, r3
 8002a98:	432f      	orrs	r7, r5
 8002a9a:	e5a0      	b.n	80025de <__aeabi_dsub+0x28e>
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	2700      	movs	r7, #0
 8002aa0:	1a09      	subs	r1, r1, r0
 8002aa2:	e4d2      	b.n	800244a <__aeabi_dsub+0xfa>
 8002aa4:	2f00      	cmp	r7, #0
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x75a>
 8002aa8:	e713      	b.n	80028d2 <__aeabi_dsub+0x582>
 8002aaa:	465c      	mov	r4, fp
 8002aac:	0017      	movs	r7, r2
 8002aae:	2500      	movs	r5, #0
 8002ab0:	e5f6      	b.n	80026a0 <__aeabi_dsub+0x350>
 8002ab2:	08d7      	lsrs	r7, r2, #3
 8002ab4:	0749      	lsls	r1, r1, #29
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	430f      	orrs	r7, r1
 8002aba:	092d      	lsrs	r5, r5, #4
 8002abc:	e6a0      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002abe:	0007      	movs	r7, r0
 8002ac0:	e542      	b.n	8002548 <__aeabi_dsub+0x1f8>
 8002ac2:	465b      	mov	r3, fp
 8002ac4:	2601      	movs	r6, #1
 8002ac6:	075f      	lsls	r7, r3, #29
 8002ac8:	08dd      	lsrs	r5, r3, #3
 8002aca:	4663      	mov	r3, ip
 8002acc:	08d2      	lsrs	r2, r2, #3
 8002ace:	4317      	orrs	r7, r2
 8002ad0:	401e      	ands	r6, r3
 8002ad2:	e539      	b.n	8002548 <__aeabi_dsub+0x1f8>
 8002ad4:	465b      	mov	r3, fp
 8002ad6:	08d2      	lsrs	r2, r2, #3
 8002ad8:	075f      	lsls	r7, r3, #29
 8002ada:	4317      	orrs	r7, r2
 8002adc:	08dd      	lsrs	r5, r3, #3
 8002ade:	e533      	b.n	8002548 <__aeabi_dsub+0x1f8>
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <__aeabi_dsub+0x80c>)
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	4022      	ands	r2, r4
 8002ae6:	0757      	lsls	r7, r2, #29
 8002ae8:	0252      	lsls	r2, r2, #9
 8002aea:	2501      	movs	r5, #1
 8002aec:	431f      	orrs	r7, r3
 8002aee:	0b14      	lsrs	r4, r2, #12
 8002af0:	e5c2      	b.n	8002678 <__aeabi_dsub+0x328>
 8002af2:	000e      	movs	r6, r1
 8002af4:	2001      	movs	r0, #1
 8002af6:	e65f      	b.n	80027b8 <__aeabi_dsub+0x468>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00d      	beq.n	8002b18 <__aeabi_dsub+0x7c8>
 8002afc:	464b      	mov	r3, r9
 8002afe:	1b5b      	subs	r3, r3, r5
 8002b00:	469c      	mov	ip, r3
 8002b02:	2d00      	cmp	r5, #0
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x7b8>
 8002b06:	e548      	b.n	800259a <__aeabi_dsub+0x24a>
 8002b08:	2701      	movs	r7, #1
 8002b0a:	2b38      	cmp	r3, #56	@ 0x38
 8002b0c:	dd00      	ble.n	8002b10 <__aeabi_dsub+0x7c0>
 8002b0e:	e566      	b.n	80025de <__aeabi_dsub+0x28e>
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	431c      	orrs	r4, r3
 8002b16:	e550      	b.n	80025ba <__aeabi_dsub+0x26a>
 8002b18:	1c6b      	adds	r3, r5, #1
 8002b1a:	4d11      	ldr	r5, [pc, #68]	@ (8002b60 <__aeabi_dsub+0x810>)
 8002b1c:	422b      	tst	r3, r5
 8002b1e:	d000      	beq.n	8002b22 <__aeabi_dsub+0x7d2>
 8002b20:	e673      	b.n	800280a <__aeabi_dsub+0x4ba>
 8002b22:	4659      	mov	r1, fp
 8002b24:	0023      	movs	r3, r4
 8002b26:	4311      	orrs	r1, r2
 8002b28:	468a      	mov	sl, r1
 8002b2a:	4303      	orrs	r3, r0
 8002b2c:	e600      	b.n	8002730 <__aeabi_dsub+0x3e0>
 8002b2e:	0767      	lsls	r7, r4, #29
 8002b30:	08c0      	lsrs	r0, r0, #3
 8002b32:	2300      	movs	r3, #0
 8002b34:	4307      	orrs	r7, r0
 8002b36:	08e5      	lsrs	r5, r4, #3
 8002b38:	e662      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002b3a:	0764      	lsls	r4, r4, #29
 8002b3c:	08ff      	lsrs	r7, r7, #3
 8002b3e:	4327      	orrs	r7, r4
 8002b40:	0905      	lsrs	r5, r0, #4
 8002b42:	e65d      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002b44:	08d2      	lsrs	r2, r2, #3
 8002b46:	0749      	lsls	r1, r1, #29
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	000f      	movs	r7, r1
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	092d      	lsrs	r5, r5, #4
 8002b50:	e656      	b.n	8002800 <__aeabi_dsub+0x4b0>
 8002b52:	0007      	movs	r7, r0
 8002b54:	e5a4      	b.n	80026a0 <__aeabi_dsub+0x350>
 8002b56:	0038      	movs	r0, r7
 8002b58:	e48f      	b.n	800247a <__aeabi_dsub+0x12a>
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	ff7fffff 	.word	0xff7fffff
 8002b60:	000007fe 	.word	0x000007fe

08002b64 <__aeabi_dcmpun>:
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	46c6      	mov	lr, r8
 8002b68:	031e      	lsls	r6, r3, #12
 8002b6a:	0b36      	lsrs	r6, r6, #12
 8002b6c:	46b0      	mov	r8, r6
 8002b6e:	4e0d      	ldr	r6, [pc, #52]	@ (8002ba4 <__aeabi_dcmpun+0x40>)
 8002b70:	030c      	lsls	r4, r1, #12
 8002b72:	004d      	lsls	r5, r1, #1
 8002b74:	005f      	lsls	r7, r3, #1
 8002b76:	b500      	push	{lr}
 8002b78:	0b24      	lsrs	r4, r4, #12
 8002b7a:	0d6d      	lsrs	r5, r5, #21
 8002b7c:	0d7f      	lsrs	r7, r7, #21
 8002b7e:	42b5      	cmp	r5, r6
 8002b80:	d00b      	beq.n	8002b9a <__aeabi_dcmpun+0x36>
 8002b82:	4908      	ldr	r1, [pc, #32]	@ (8002ba4 <__aeabi_dcmpun+0x40>)
 8002b84:	2000      	movs	r0, #0
 8002b86:	428f      	cmp	r7, r1
 8002b88:	d104      	bne.n	8002b94 <__aeabi_dcmpun+0x30>
 8002b8a:	4646      	mov	r6, r8
 8002b8c:	4316      	orrs	r6, r2
 8002b8e:	0030      	movs	r0, r6
 8002b90:	1e43      	subs	r3, r0, #1
 8002b92:	4198      	sbcs	r0, r3
 8002b94:	bc80      	pop	{r7}
 8002b96:	46b8      	mov	r8, r7
 8002b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b9a:	4304      	orrs	r4, r0
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	2c00      	cmp	r4, #0
 8002ba0:	d1f8      	bne.n	8002b94 <__aeabi_dcmpun+0x30>
 8002ba2:	e7ee      	b.n	8002b82 <__aeabi_dcmpun+0x1e>
 8002ba4:	000007ff 	.word	0x000007ff

08002ba8 <__aeabi_f2d>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	0242      	lsls	r2, r0, #9
 8002bac:	0043      	lsls	r3, r0, #1
 8002bae:	0fc4      	lsrs	r4, r0, #31
 8002bb0:	20fe      	movs	r0, #254	@ 0xfe
 8002bb2:	0e1b      	lsrs	r3, r3, #24
 8002bb4:	1c59      	adds	r1, r3, #1
 8002bb6:	0a55      	lsrs	r5, r2, #9
 8002bb8:	4208      	tst	r0, r1
 8002bba:	d00c      	beq.n	8002bd6 <__aeabi_f2d+0x2e>
 8002bbc:	21e0      	movs	r1, #224	@ 0xe0
 8002bbe:	0089      	lsls	r1, r1, #2
 8002bc0:	468c      	mov	ip, r1
 8002bc2:	076d      	lsls	r5, r5, #29
 8002bc4:	0b12      	lsrs	r2, r2, #12
 8002bc6:	4463      	add	r3, ip
 8002bc8:	051b      	lsls	r3, r3, #20
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	07e4      	lsls	r4, r4, #31
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	0028      	movs	r0, r5
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	bd70      	pop	{r4, r5, r6, pc}
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d114      	bne.n	8002c04 <__aeabi_f2d+0x5c>
 8002bda:	2d00      	cmp	r5, #0
 8002bdc:	d01b      	beq.n	8002c16 <__aeabi_f2d+0x6e>
 8002bde:	0028      	movs	r0, r5
 8002be0:	f000 f8ac 	bl	8002d3c <__clzsi2>
 8002be4:	280a      	cmp	r0, #10
 8002be6:	dc1c      	bgt.n	8002c22 <__aeabi_f2d+0x7a>
 8002be8:	230b      	movs	r3, #11
 8002bea:	002a      	movs	r2, r5
 8002bec:	1a1b      	subs	r3, r3, r0
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	3315      	adds	r3, #21
 8002bf4:	409d      	lsls	r5, r3
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <__aeabi_f2d+0x88>)
 8002bf8:	0312      	lsls	r2, r2, #12
 8002bfa:	1a1b      	subs	r3, r3, r0
 8002bfc:	055b      	lsls	r3, r3, #21
 8002bfe:	0b12      	lsrs	r2, r2, #12
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	e7e1      	b.n	8002bc8 <__aeabi_f2d+0x20>
 8002c04:	2d00      	cmp	r5, #0
 8002c06:	d009      	beq.n	8002c1c <__aeabi_f2d+0x74>
 8002c08:	0b13      	lsrs	r3, r2, #12
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	0312      	lsls	r2, r2, #12
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	076d      	lsls	r5, r5, #29
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <__aeabi_f2d+0x8c>)
 8002c14:	e7d8      	b.n	8002bc8 <__aeabi_f2d+0x20>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2200      	movs	r2, #0
 8002c1a:	e7d5      	b.n	8002bc8 <__aeabi_f2d+0x20>
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <__aeabi_f2d+0x8c>)
 8002c20:	e7d2      	b.n	8002bc8 <__aeabi_f2d+0x20>
 8002c22:	0003      	movs	r3, r0
 8002c24:	002a      	movs	r2, r5
 8002c26:	3b0b      	subs	r3, #11
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	2500      	movs	r5, #0
 8002c2c:	e7e3      	b.n	8002bf6 <__aeabi_f2d+0x4e>
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	00000389 	.word	0x00000389
 8002c34:	000007ff 	.word	0x000007ff

08002c38 <__aeabi_d2f>:
 8002c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3a:	004b      	lsls	r3, r1, #1
 8002c3c:	030f      	lsls	r7, r1, #12
 8002c3e:	0d5b      	lsrs	r3, r3, #21
 8002c40:	4c3a      	ldr	r4, [pc, #232]	@ (8002d2c <__aeabi_d2f+0xf4>)
 8002c42:	0f45      	lsrs	r5, r0, #29
 8002c44:	b083      	sub	sp, #12
 8002c46:	0a7f      	lsrs	r7, r7, #9
 8002c48:	1c5e      	adds	r6, r3, #1
 8002c4a:	432f      	orrs	r7, r5
 8002c4c:	9000      	str	r0, [sp, #0]
 8002c4e:	9101      	str	r1, [sp, #4]
 8002c50:	0fca      	lsrs	r2, r1, #31
 8002c52:	00c5      	lsls	r5, r0, #3
 8002c54:	4226      	tst	r6, r4
 8002c56:	d00b      	beq.n	8002c70 <__aeabi_d2f+0x38>
 8002c58:	4935      	ldr	r1, [pc, #212]	@ (8002d30 <__aeabi_d2f+0xf8>)
 8002c5a:	185c      	adds	r4, r3, r1
 8002c5c:	2cfe      	cmp	r4, #254	@ 0xfe
 8002c5e:	dd13      	ble.n	8002c88 <__aeabi_d2f+0x50>
 8002c60:	20ff      	movs	r0, #255	@ 0xff
 8002c62:	2300      	movs	r3, #0
 8002c64:	05c0      	lsls	r0, r0, #23
 8002c66:	4318      	orrs	r0, r3
 8002c68:	07d2      	lsls	r2, r2, #31
 8002c6a:	4310      	orrs	r0, r2
 8002c6c:	b003      	add	sp, #12
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c70:	433d      	orrs	r5, r7
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <__aeabi_d2f+0x42>
 8002c76:	2000      	movs	r0, #0
 8002c78:	e7f4      	b.n	8002c64 <__aeabi_d2f+0x2c>
 8002c7a:	2d00      	cmp	r5, #0
 8002c7c:	d0f0      	beq.n	8002c60 <__aeabi_d2f+0x28>
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	03db      	lsls	r3, r3, #15
 8002c82:	20ff      	movs	r0, #255	@ 0xff
 8002c84:	433b      	orrs	r3, r7
 8002c86:	e7ed      	b.n	8002c64 <__aeabi_d2f+0x2c>
 8002c88:	2c00      	cmp	r4, #0
 8002c8a:	dd0c      	ble.n	8002ca6 <__aeabi_d2f+0x6e>
 8002c8c:	9b00      	ldr	r3, [sp, #0]
 8002c8e:	00ff      	lsls	r7, r7, #3
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	1e58      	subs	r0, r3, #1
 8002c94:	4183      	sbcs	r3, r0
 8002c96:	0f69      	lsrs	r1, r5, #29
 8002c98:	433b      	orrs	r3, r7
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	0759      	lsls	r1, r3, #29
 8002c9e:	d127      	bne.n	8002cf0 <__aeabi_d2f+0xb8>
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	b2e0      	uxtb	r0, r4
 8002ca4:	e7de      	b.n	8002c64 <__aeabi_d2f+0x2c>
 8002ca6:	0021      	movs	r1, r4
 8002ca8:	3117      	adds	r1, #23
 8002caa:	db31      	blt.n	8002d10 <__aeabi_d2f+0xd8>
 8002cac:	2180      	movs	r1, #128	@ 0x80
 8002cae:	201e      	movs	r0, #30
 8002cb0:	0409      	lsls	r1, r1, #16
 8002cb2:	4339      	orrs	r1, r7
 8002cb4:	1b00      	subs	r0, r0, r4
 8002cb6:	281f      	cmp	r0, #31
 8002cb8:	dd2d      	ble.n	8002d16 <__aeabi_d2f+0xde>
 8002cba:	2602      	movs	r6, #2
 8002cbc:	4276      	negs	r6, r6
 8002cbe:	1b34      	subs	r4, r6, r4
 8002cc0:	000e      	movs	r6, r1
 8002cc2:	40e6      	lsrs	r6, r4
 8002cc4:	0034      	movs	r4, r6
 8002cc6:	2820      	cmp	r0, #32
 8002cc8:	d004      	beq.n	8002cd4 <__aeabi_d2f+0x9c>
 8002cca:	481a      	ldr	r0, [pc, #104]	@ (8002d34 <__aeabi_d2f+0xfc>)
 8002ccc:	4684      	mov	ip, r0
 8002cce:	4463      	add	r3, ip
 8002cd0:	4099      	lsls	r1, r3
 8002cd2:	430d      	orrs	r5, r1
 8002cd4:	002b      	movs	r3, r5
 8002cd6:	1e59      	subs	r1, r3, #1
 8002cd8:	418b      	sbcs	r3, r1
 8002cda:	4323      	orrs	r3, r4
 8002cdc:	0759      	lsls	r1, r3, #29
 8002cde:	d003      	beq.n	8002ce8 <__aeabi_d2f+0xb0>
 8002ce0:	210f      	movs	r1, #15
 8002ce2:	4019      	ands	r1, r3
 8002ce4:	2904      	cmp	r1, #4
 8002ce6:	d10b      	bne.n	8002d00 <__aeabi_d2f+0xc8>
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	2000      	movs	r0, #0
 8002cec:	0a5b      	lsrs	r3, r3, #9
 8002cee:	e7b9      	b.n	8002c64 <__aeabi_d2f+0x2c>
 8002cf0:	210f      	movs	r1, #15
 8002cf2:	4019      	ands	r1, r3
 8002cf4:	2904      	cmp	r1, #4
 8002cf6:	d104      	bne.n	8002d02 <__aeabi_d2f+0xca>
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	0a5b      	lsrs	r3, r3, #9
 8002cfc:	b2e0      	uxtb	r0, r4
 8002cfe:	e7b1      	b.n	8002c64 <__aeabi_d2f+0x2c>
 8002d00:	2400      	movs	r4, #0
 8002d02:	3304      	adds	r3, #4
 8002d04:	0159      	lsls	r1, r3, #5
 8002d06:	d5f7      	bpl.n	8002cf8 <__aeabi_d2f+0xc0>
 8002d08:	3401      	adds	r4, #1
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	b2e0      	uxtb	r0, r4
 8002d0e:	e7a9      	b.n	8002c64 <__aeabi_d2f+0x2c>
 8002d10:	2000      	movs	r0, #0
 8002d12:	2300      	movs	r3, #0
 8002d14:	e7a6      	b.n	8002c64 <__aeabi_d2f+0x2c>
 8002d16:	4c08      	ldr	r4, [pc, #32]	@ (8002d38 <__aeabi_d2f+0x100>)
 8002d18:	191c      	adds	r4, r3, r4
 8002d1a:	002b      	movs	r3, r5
 8002d1c:	40a5      	lsls	r5, r4
 8002d1e:	40c3      	lsrs	r3, r0
 8002d20:	40a1      	lsls	r1, r4
 8002d22:	1e68      	subs	r0, r5, #1
 8002d24:	4185      	sbcs	r5, r0
 8002d26:	4329      	orrs	r1, r5
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	e7d7      	b.n	8002cdc <__aeabi_d2f+0xa4>
 8002d2c:	000007fe 	.word	0x000007fe
 8002d30:	fffffc80 	.word	0xfffffc80
 8002d34:	fffffca2 	.word	0xfffffca2
 8002d38:	fffffc82 	.word	0xfffffc82

08002d3c <__clzsi2>:
 8002d3c:	211c      	movs	r1, #28
 8002d3e:	2301      	movs	r3, #1
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	4298      	cmp	r0, r3
 8002d44:	d301      	bcc.n	8002d4a <__clzsi2+0xe>
 8002d46:	0c00      	lsrs	r0, r0, #16
 8002d48:	3910      	subs	r1, #16
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	4298      	cmp	r0, r3
 8002d4e:	d301      	bcc.n	8002d54 <__clzsi2+0x18>
 8002d50:	0a00      	lsrs	r0, r0, #8
 8002d52:	3908      	subs	r1, #8
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	4298      	cmp	r0, r3
 8002d58:	d301      	bcc.n	8002d5e <__clzsi2+0x22>
 8002d5a:	0900      	lsrs	r0, r0, #4
 8002d5c:	3904      	subs	r1, #4
 8002d5e:	a202      	add	r2, pc, #8	@ (adr r2, 8002d68 <__clzsi2+0x2c>)
 8002d60:	5c10      	ldrb	r0, [r2, r0]
 8002d62:	1840      	adds	r0, r0, r1
 8002d64:	4770      	bx	lr
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	02020304 	.word	0x02020304
 8002d6c:	01010101 	.word	0x01010101
	...

08002d78 <Trimpot_to_Angle>:
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len);
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);

uint16_t Trimpot_to_Angle(uint16_t trimpotValue) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	0002      	movs	r2, r0
 8002d80:	1dbb      	adds	r3, r7, #6
 8002d82:	801a      	strh	r2, [r3, #0]
    return (trimpotValue * 360) / 4095;
 8002d84:	1dbb      	adds	r3, r7, #6
 8002d86:	881a      	ldrh	r2, [r3, #0]
 8002d88:	0013      	movs	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	189b      	adds	r3, r3, r2
 8002d8e:	011a      	lsls	r2, r3, #4
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	00d3      	lsls	r3, r2, #3
 8002d94:	001a      	movs	r2, r3
 8002d96:	0013      	movs	r3, r2
 8002d98:	4904      	ldr	r1, [pc, #16]	@ (8002dac <Trimpot_to_Angle+0x34>)
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7fd fa3a 	bl	8000214 <__divsi3>
 8002da0:	0003      	movs	r3, r0
 8002da2:	b29b      	uxth	r3, r3
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00000fff 	.word	0x00000fff

08002db0 <Joystick_to_Percentage>:

uint16_t Joystick_to_Percentage(uint16_t angle) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	0002      	movs	r2, r0
 8002db8:	1dbb      	adds	r3, r7, #6
 8002dba:	801a      	strh	r2, [r3, #0]
    return (angle * 100) / 4095;
 8002dbc:	1dbb      	adds	r3, r7, #6
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	2264      	movs	r2, #100	@ 0x64
 8002dc2:	4353      	muls	r3, r2
 8002dc4:	4904      	ldr	r1, [pc, #16]	@ (8002dd8 <Joystick_to_Percentage+0x28>)
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7fd fa24 	bl	8000214 <__divsi3>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	b29b      	uxth	r3, r3
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	00000fff 	.word	0x00000fff

08002ddc <calculateAngles>:

Angles calculateAngles(float x, float y, float z) {
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
    Angles angles;
    angles.roll = atan2(y, z) * 180.0 / M_PI;
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fedc 	bl	8002ba8 <__aeabi_f2d>
 8002df0:	0004      	movs	r4, r0
 8002df2:	000d      	movs	r5, r1
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	f7ff fed7 	bl	8002ba8 <__aeabi_f2d>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	000b      	movs	r3, r1
 8002dfe:	0020      	movs	r0, r4
 8002e00:	0029      	movs	r1, r5
 8002e02:	f004 fcad 	bl	8007760 <atan2>
 8002e06:	2200      	movs	r2, #0
 8002e08:	4b40      	ldr	r3, [pc, #256]	@ (8002f0c <calculateAngles+0x130>)
 8002e0a:	f7fe ffbb 	bl	8001d84 <__aeabi_dmul>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	000b      	movs	r3, r1
 8002e12:	0010      	movs	r0, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	4a3e      	ldr	r2, [pc, #248]	@ (8002f10 <calculateAngles+0x134>)
 8002e18:	4b3e      	ldr	r3, [pc, #248]	@ (8002f14 <calculateAngles+0x138>)
 8002e1a:	f7fe fb79 	bl	8001510 <__aeabi_ddiv>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	000b      	movs	r3, r1
 8002e22:	0010      	movs	r0, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	f7ff ff07 	bl	8002c38 <__aeabi_d2f>
 8002e2a:	1c02      	adds	r2, r0, #0
 8002e2c:	2410      	movs	r4, #16
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	601a      	str	r2, [r3, #0]
    angles.pitch = atan2(-x, sqrt(y * y + z * z)) * 180.0 / M_PI;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2280      	movs	r2, #128	@ 0x80
 8002e36:	0612      	lsls	r2, r2, #24
 8002e38:	4053      	eors	r3, r2
 8002e3a:	1c18      	adds	r0, r3, #0
 8002e3c:	f7ff feb4 	bl	8002ba8 <__aeabi_f2d>
 8002e40:	0004      	movs	r4, r0
 8002e42:	000d      	movs	r5, r1
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fdf2 	bl	8000a30 <__aeabi_fmul>
 8002e4c:	1c03      	adds	r3, r0, #0
 8002e4e:	1c1e      	adds	r6, r3, #0
 8002e50:	6839      	ldr	r1, [r7, #0]
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f7fd fdec 	bl	8000a30 <__aeabi_fmul>
 8002e58:	1c03      	adds	r3, r0, #0
 8002e5a:	1c19      	adds	r1, r3, #0
 8002e5c:	1c30      	adds	r0, r6, #0
 8002e5e:	f7fd fb3d 	bl	80004dc <__aeabi_fadd>
 8002e62:	1c03      	adds	r3, r0, #0
 8002e64:	1c18      	adds	r0, r3, #0
 8002e66:	f7ff fe9f 	bl	8002ba8 <__aeabi_f2d>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	000b      	movs	r3, r1
 8002e6e:	0010      	movs	r0, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	f004 fc79 	bl	8007768 <sqrt>
 8002e76:	0002      	movs	r2, r0
 8002e78:	000b      	movs	r3, r1
 8002e7a:	0020      	movs	r0, r4
 8002e7c:	0029      	movs	r1, r5
 8002e7e:	f004 fc6f 	bl	8007760 <atan2>
 8002e82:	2200      	movs	r2, #0
 8002e84:	4b21      	ldr	r3, [pc, #132]	@ (8002f0c <calculateAngles+0x130>)
 8002e86:	f7fe ff7d 	bl	8001d84 <__aeabi_dmul>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	000b      	movs	r3, r1
 8002e8e:	0010      	movs	r0, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	4a1f      	ldr	r2, [pc, #124]	@ (8002f10 <calculateAngles+0x134>)
 8002e94:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <calculateAngles+0x138>)
 8002e96:	f7fe fb3b 	bl	8001510 <__aeabi_ddiv>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	000b      	movs	r3, r1
 8002e9e:	0010      	movs	r0, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	f7ff fec9 	bl	8002c38 <__aeabi_d2f>
 8002ea6:	1c02      	adds	r2, r0, #0
 8002ea8:	2410      	movs	r4, #16
 8002eaa:	193b      	adds	r3, r7, r4
 8002eac:	605a      	str	r2, [r3, #4]

    if (angles.roll < 0) angles.roll += 360;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	1c18      	adds	r0, r3, #0
 8002eb6:	f7fd fae9 	bl	800048c <__aeabi_fcmplt>
 8002eba:	1e03      	subs	r3, r0, #0
 8002ebc:	d009      	beq.n	8002ed2 <calculateAngles+0xf6>
 8002ebe:	193b      	adds	r3, r7, r4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4915      	ldr	r1, [pc, #84]	@ (8002f18 <calculateAngles+0x13c>)
 8002ec4:	1c18      	adds	r0, r3, #0
 8002ec6:	f7fd fb09 	bl	80004dc <__aeabi_fadd>
 8002eca:	1c03      	adds	r3, r0, #0
 8002ecc:	1c1a      	adds	r2, r3, #0
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	601a      	str	r2, [r3, #0]
    if (angles.pitch < 0) angles.pitch += 360;
 8002ed2:	2410      	movs	r4, #16
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2100      	movs	r1, #0
 8002eda:	1c18      	adds	r0, r3, #0
 8002edc:	f7fd fad6 	bl	800048c <__aeabi_fcmplt>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d009      	beq.n	8002ef8 <calculateAngles+0x11c>
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	490b      	ldr	r1, [pc, #44]	@ (8002f18 <calculateAngles+0x13c>)
 8002eea:	1c18      	adds	r0, r3, #0
 8002eec:	f7fd faf6 	bl	80004dc <__aeabi_fadd>
 8002ef0:	1c03      	adds	r3, r0, #0
 8002ef2:	1c1a      	adds	r2, r3, #0
 8002ef4:	193b      	adds	r3, r7, r4
 8002ef6:	605a      	str	r2, [r3, #4]

    return angles;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2210      	movs	r2, #16
 8002efc:	18ba      	adds	r2, r7, r2
 8002efe:	ca03      	ldmia	r2!, {r0, r1}
 8002f00:	c303      	stmia	r3!, {r0, r1}
}
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b007      	add	sp, #28
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	40668000 	.word	0x40668000
 8002f10:	54442d18 	.word	0x54442d18
 8002f14:	400921fb 	.word	0x400921fb
 8002f18:	43b40000 	.word	0x43b40000

08002f1c <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
    isADCFinished = 1;
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_ADC_ConvCpltCallback+0x18>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	200001d4 	.word	0x200001d4

08002f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f3e:	f000 fcfd 	bl	800393c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f42:	f000 f945 	bl	80031d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f46:	f000 fabb 	bl	80034c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002f4a:	f000 fa6b 	bl	8003424 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002f4e:	f000 f987 	bl	8003260 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002f52:	f000 fa27 	bl	80033a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  dev_ctx.write_reg = platform_write;
 8002f56:	4b8a      	ldr	r3, [pc, #552]	@ (8003180 <main+0x248>)
 8002f58:	4a8a      	ldr	r2, [pc, #552]	@ (8003184 <main+0x24c>)
 8002f5a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8002f5c:	4b88      	ldr	r3, [pc, #544]	@ (8003180 <main+0x248>)
 8002f5e:	4a8a      	ldr	r2, [pc, #552]	@ (8003188 <main+0x250>)
 8002f60:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 8002f62:	4b87      	ldr	r3, [pc, #540]	@ (8003180 <main+0x248>)
 8002f64:	4a89      	ldr	r2, [pc, #548]	@ (800318c <main+0x254>)
 8002f66:	60da      	str	r2, [r3, #12]

  lis2dw12_device_id_get(&dev_ctx, &whoamI);
 8002f68:	4a89      	ldr	r2, [pc, #548]	@ (8003190 <main+0x258>)
 8002f6a:	4b85      	ldr	r3, [pc, #532]	@ (8003180 <main+0x248>)
 8002f6c:	0011      	movs	r1, r2
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f004 fadf 	bl	8007532 <lis2dw12_device_id_get>
  lis2dw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8002f74:	4b82      	ldr	r3, [pc, #520]	@ (8003180 <main+0x248>)
 8002f76:	2101      	movs	r1, #1
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f004 faec 	bl	8007556 <lis2dw12_reset_set>

  do {
      lis2dw12_reset_get(&dev_ctx, &rst);
 8002f7e:	4a85      	ldr	r2, [pc, #532]	@ (8003194 <main+0x25c>)
 8002f80:	4b7f      	ldr	r3, [pc, #508]	@ (8003180 <main+0x248>)
 8002f82:	0011      	movs	r1, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f004 fb16 	bl	80075b6 <lis2dw12_reset_get>
  } while (rst);
 8002f8a:	4b82      	ldr	r3, [pc, #520]	@ (8003194 <main+0x25c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f5      	bne.n	8002f7e <main+0x46>

  lis2dw12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002f92:	4b7b      	ldr	r3, [pc, #492]	@ (8003180 <main+0x248>)
 8002f94:	2101      	movs	r1, #1
 8002f96:	0018      	movs	r0, r3
 8002f98:	f004 fa00 	bl	800739c <lis2dw12_block_data_update_set>
  lis2dw12_full_scale_set(&dev_ctx, LIS2DW12_2g);
 8002f9c:	4b78      	ldr	r3, [pc, #480]	@ (8003180 <main+0x248>)
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f004 fa2b 	bl	80073fc <lis2dw12_full_scale_set>
  lis2dw12_filter_path_set(&dev_ctx, LIS2DW12_LPF_ON_OUT);
 8002fa6:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <main+0x248>)
 8002fa8:	2100      	movs	r1, #0
 8002faa:	0018      	movs	r0, r3
 8002fac:	f004 fb1e 	bl	80075ec <lis2dw12_filter_path_set>
  lis2dw12_filter_bandwidth_set(&dev_ctx, LIS2DW12_ODR_DIV_4);
 8002fb0:	4b73      	ldr	r3, [pc, #460]	@ (8003180 <main+0x248>)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f004 fb73 	bl	80076a0 <lis2dw12_filter_bandwidth_set>
  lis2dw12_power_mode_set(&dev_ctx, LIS2DW12_HIGH_PERFORMANCE);
 8002fba:	4b71      	ldr	r3, [pc, #452]	@ (8003180 <main+0x248>)
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f004 f928 	bl	8007214 <lis2dw12_power_mode_set>
  lis2dw12_data_rate_set(&dev_ctx, LIS2DW12_XL_ODR_25Hz);
 8002fc4:	4b6e      	ldr	r3, [pc, #440]	@ (8003180 <main+0x248>)
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f004 f98f 	bl	80072ec <lis2dw12_data_rate_set>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_VAL, 4);
 8002fce:	4972      	ldr	r1, [pc, #456]	@ (8003198 <main+0x260>)
 8002fd0:	4b72      	ldr	r3, [pc, #456]	@ (800319c <main+0x264>)
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f001 f84b 	bl	8004070 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    count++;
 8002fda:	4b71      	ldr	r3, [pc, #452]	@ (80031a0 <main+0x268>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80031a0 <main+0x268>)
 8002fe2:	601a      	str	r2, [r3, #0]
    HAL_Delay(250);
 8002fe4:	20fa      	movs	r0, #250	@ 0xfa
 8002fe6:	f000 fd2f 	bl	8003a48 <HAL_Delay>
    if (isADCFinished == 1) {
 8002fea:	4b6e      	ldr	r3, [pc, #440]	@ (80031a4 <main+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d108      	bne.n	8003004 <main+0xcc>
        isADCFinished = 0;
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80031a4 <main+0x26c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_VAL, 4);
 8002ff8:	4967      	ldr	r1, [pc, #412]	@ (8003198 <main+0x260>)
 8002ffa:	4b68      	ldr	r3, [pc, #416]	@ (800319c <main+0x264>)
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	0018      	movs	r0, r3
 8003000:	f001 f836 	bl	8004070 <HAL_ADC_Start_DMA>
    }
    CamX = Trimpot_to_Angle(ADC_VAL[0]);
 8003004:	4b64      	ldr	r3, [pc, #400]	@ (8003198 <main+0x260>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff feb5 	bl	8002d78 <Trimpot_to_Angle>
 800300e:	0003      	movs	r3, r0
 8003010:	001a      	movs	r2, r3
 8003012:	4b65      	ldr	r3, [pc, #404]	@ (80031a8 <main+0x270>)
 8003014:	801a      	strh	r2, [r3, #0]
    CamY = Trimpot_to_Angle(ADC_VAL[1]);
 8003016:	4b60      	ldr	r3, [pc, #384]	@ (8003198 <main+0x260>)
 8003018:	885b      	ldrh	r3, [r3, #2]
 800301a:	0018      	movs	r0, r3
 800301c:	f7ff feac 	bl	8002d78 <Trimpot_to_Angle>
 8003020:	0003      	movs	r3, r0
 8003022:	001a      	movs	r2, r3
 8003024:	4b61      	ldr	r3, [pc, #388]	@ (80031ac <main+0x274>)
 8003026:	801a      	strh	r2, [r3, #0]
    Throttle = Joystick_to_Percentage(ADC_VAL[2]);
 8003028:	4b5b      	ldr	r3, [pc, #364]	@ (8003198 <main+0x260>)
 800302a:	889b      	ldrh	r3, [r3, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff febf 	bl	8002db0 <Joystick_to_Percentage>
 8003032:	0003      	movs	r3, r0
 8003034:	001a      	movs	r2, r3
 8003036:	4b5e      	ldr	r3, [pc, #376]	@ (80031b0 <main+0x278>)
 8003038:	801a      	strh	r2, [r3, #0]
    Yaw = Joystick_to_Percentage(ADC_VAL[3]);
 800303a:	4b57      	ldr	r3, [pc, #348]	@ (8003198 <main+0x260>)
 800303c:	88db      	ldrh	r3, [r3, #6]
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff feb6 	bl	8002db0 <Joystick_to_Percentage>
 8003044:	0003      	movs	r3, r0
 8003046:	001a      	movs	r2, r3
 8003048:	4b5a      	ldr	r3, [pc, #360]	@ (80031b4 <main+0x27c>)
 800304a:	801a      	strh	r2, [r3, #0]

    uint8_t reg;
    lis2dw12_flag_data_ready_get(&dev_ctx, &reg);
 800304c:	240f      	movs	r4, #15
 800304e:	193a      	adds	r2, r7, r4
 8003050:	4b4b      	ldr	r3, [pc, #300]	@ (8003180 <main+0x248>)
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f004 fa01 	bl	800745c <lis2dw12_flag_data_ready_get>

    if (reg) {
 800305a:	193b      	adds	r3, r7, r4
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d026      	beq.n	80030b0 <main+0x178>
        memset(data_raw_acceleration, 0, sizeof(data_raw_acceleration));
 8003062:	4b55      	ldr	r3, [pc, #340]	@ (80031b8 <main+0x280>)
 8003064:	2206      	movs	r2, #6
 8003066:	2100      	movs	r1, #0
 8003068:	0018      	movs	r0, r3
 800306a:	f004 fb47 	bl	80076fc <memset>
        lis2dw12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800306e:	4a52      	ldr	r2, [pc, #328]	@ (80031b8 <main+0x280>)
 8003070:	4b43      	ldr	r3, [pc, #268]	@ (8003180 <main+0x248>)
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f004 fa0c 	bl	8007492 <lis2dw12_acceleration_raw_get>
        acceleration_mg[0] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[0]);
 800307a:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <main+0x280>)
 800307c:	2200      	movs	r2, #0
 800307e:	5e9b      	ldrsh	r3, [r3, r2]
 8003080:	0018      	movs	r0, r3
 8003082:	f004 f8af 	bl	80071e4 <lis2dw12_from_fs2_to_mg>
 8003086:	1c02      	adds	r2, r0, #0
 8003088:	4b4c      	ldr	r3, [pc, #304]	@ (80031bc <main+0x284>)
 800308a:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[1]);
 800308c:	4b4a      	ldr	r3, [pc, #296]	@ (80031b8 <main+0x280>)
 800308e:	2202      	movs	r2, #2
 8003090:	5e9b      	ldrsh	r3, [r3, r2]
 8003092:	0018      	movs	r0, r3
 8003094:	f004 f8a6 	bl	80071e4 <lis2dw12_from_fs2_to_mg>
 8003098:	1c02      	adds	r2, r0, #0
 800309a:	4b48      	ldr	r3, [pc, #288]	@ (80031bc <main+0x284>)
 800309c:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[2]);
 800309e:	4b46      	ldr	r3, [pc, #280]	@ (80031b8 <main+0x280>)
 80030a0:	2204      	movs	r2, #4
 80030a2:	5e9b      	ldrsh	r3, [r3, r2]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f004 f89d 	bl	80071e4 <lis2dw12_from_fs2_to_mg>
 80030aa:	1c02      	adds	r2, r0, #0
 80030ac:	4b43      	ldr	r3, [pc, #268]	@ (80031bc <main+0x284>)
 80030ae:	609a      	str	r2, [r3, #8]
    }
    angle = calculateAngles(acceleration_mg[1], acceleration_mg[0], acceleration_mg[2]);
 80030b0:	4b42      	ldr	r3, [pc, #264]	@ (80031bc <main+0x284>)
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	4b41      	ldr	r3, [pc, #260]	@ (80031bc <main+0x284>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b40      	ldr	r3, [pc, #256]	@ (80031bc <main+0x284>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4c40      	ldr	r4, [pc, #256]	@ (80031c0 <main+0x288>)
 80030be:	0038      	movs	r0, r7
 80030c0:	f7ff fe8c 	bl	8002ddc <calculateAngles>
 80030c4:	003a      	movs	r2, r7
 80030c6:	0023      	movs	r3, r4
 80030c8:	ca03      	ldmia	r2!, {r0, r1}
 80030ca:	c303      	stmia	r3!, {r0, r1}

    if (SysClkTim._50msn == 1) {
 80030cc:	4b3d      	ldr	r3, [pc, #244]	@ (80031c4 <main+0x28c>)
 80030ce:	789b      	ldrb	r3, [r3, #2]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d000      	beq.n	80030d6 <main+0x19e>
 80030d4:	e781      	b.n	8002fda <main+0xa2>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 0) {
 80030d6:	2380      	movs	r3, #128	@ 0x80
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	4a3b      	ldr	r2, [pc, #236]	@ (80031c8 <main+0x290>)
 80030dc:	0019      	movs	r1, r3
 80030de:	0010      	movs	r0, r2
 80030e0:	f001 fe2e 	bl	8004d40 <HAL_GPIO_ReadPin>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d106      	bne.n	80030f6 <main+0x1be>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80030e8:	4b38      	ldr	r3, [pc, #224]	@ (80031cc <main+0x294>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	2101      	movs	r1, #1
 80030ee:	0018      	movs	r0, r3
 80030f0:	f001 fe43 	bl	8004d7a <HAL_GPIO_WritePin>
 80030f4:	e005      	b.n	8003102 <main+0x1ca>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80030f6:	4b35      	ldr	r3, [pc, #212]	@ (80031cc <main+0x294>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	2101      	movs	r1, #1
 80030fc:	0018      	movs	r0, r3
 80030fe:	f001 fe3c 	bl	8004d7a <HAL_GPIO_WritePin>
        }
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0) {
 8003102:	2380      	movs	r3, #128	@ 0x80
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4a30      	ldr	r2, [pc, #192]	@ (80031c8 <main+0x290>)
 8003108:	0019      	movs	r1, r3
 800310a:	0010      	movs	r0, r2
 800310c:	f001 fe18 	bl	8004d40 <HAL_GPIO_ReadPin>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d106      	bne.n	8003122 <main+0x1ea>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8003114:	4b2d      	ldr	r3, [pc, #180]	@ (80031cc <main+0x294>)
 8003116:	2201      	movs	r2, #1
 8003118:	2102      	movs	r1, #2
 800311a:	0018      	movs	r0, r3
 800311c:	f001 fe2d 	bl	8004d7a <HAL_GPIO_WritePin>
 8003120:	e005      	b.n	800312e <main+0x1f6>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8003122:	4b2a      	ldr	r3, [pc, #168]	@ (80031cc <main+0x294>)
 8003124:	2200      	movs	r2, #0
 8003126:	2102      	movs	r1, #2
 8003128:	0018      	movs	r0, r3
 800312a:	f001 fe26 	bl	8004d7a <HAL_GPIO_WritePin>
        }
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0) {
 800312e:	4b26      	ldr	r3, [pc, #152]	@ (80031c8 <main+0x290>)
 8003130:	2104      	movs	r1, #4
 8003132:	0018      	movs	r0, r3
 8003134:	f001 fe04 	bl	8004d40 <HAL_GPIO_ReadPin>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d106      	bne.n	800314a <main+0x212>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800313c:	4b23      	ldr	r3, [pc, #140]	@ (80031cc <main+0x294>)
 800313e:	2201      	movs	r2, #1
 8003140:	2104      	movs	r1, #4
 8003142:	0018      	movs	r0, r3
 8003144:	f001 fe19 	bl	8004d7a <HAL_GPIO_WritePin>
 8003148:	e005      	b.n	8003156 <main+0x21e>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800314a:	4b20      	ldr	r3, [pc, #128]	@ (80031cc <main+0x294>)
 800314c:	2200      	movs	r2, #0
 800314e:	2104      	movs	r1, #4
 8003150:	0018      	movs	r0, r3
 8003152:	f001 fe12 	bl	8004d7a <HAL_GPIO_WritePin>
        }
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0) {
 8003156:	4b1c      	ldr	r3, [pc, #112]	@ (80031c8 <main+0x290>)
 8003158:	2102      	movs	r1, #2
 800315a:	0018      	movs	r0, r3
 800315c:	f001 fdf0 	bl	8004d40 <HAL_GPIO_ReadPin>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d106      	bne.n	8003172 <main+0x23a>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <main+0x294>)
 8003166:	2201      	movs	r2, #1
 8003168:	2108      	movs	r1, #8
 800316a:	0018      	movs	r0, r3
 800316c:	f001 fe05 	bl	8004d7a <HAL_GPIO_WritePin>
 8003170:	e733      	b.n	8002fda <main+0xa2>
        } else {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8003172:	4b16      	ldr	r3, [pc, #88]	@ (80031cc <main+0x294>)
 8003174:	2200      	movs	r2, #0
 8003176:	2108      	movs	r1, #8
 8003178:	0018      	movs	r0, r3
 800317a:	f001 fdfe 	bl	8004d7a <HAL_GPIO_WritePin>
  {
 800317e:	e72c      	b.n	8002fda <main+0xa2>
 8003180:	200001e4 	.word	0x200001e4
 8003184:	080035b9 	.word	0x080035b9
 8003188:	08003601 	.word	0x08003601
 800318c:	200000dc 	.word	0x200000dc
 8003190:	20000208 	.word	0x20000208
 8003194:	20000209 	.word	0x20000209
 8003198:	200001c4 	.word	0x200001c4
 800319c:	20000078 	.word	0x20000078
 80031a0:	200001d8 	.word	0x200001d8
 80031a4:	200001d4 	.word	0x200001d4
 80031a8:	200001cc 	.word	0x200001cc
 80031ac:	200001ce 	.word	0x200001ce
 80031b0:	200001d0 	.word	0x200001d0
 80031b4:	200001d2 	.word	0x200001d2
 80031b8:	200001f4 	.word	0x200001f4
 80031bc:	200001fc 	.word	0x200001fc
 80031c0:	200001dc 	.word	0x200001dc
 80031c4:	2000020c 	.word	0x2000020c
 80031c8:	50000400 	.word	0x50000400
 80031cc:	50000c00 	.word	0x50000c00

080031d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b093      	sub	sp, #76	@ 0x4c
 80031d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d6:	2414      	movs	r4, #20
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	0018      	movs	r0, r3
 80031dc:	2334      	movs	r3, #52	@ 0x34
 80031de:	001a      	movs	r2, r3
 80031e0:	2100      	movs	r1, #0
 80031e2:	f004 fa8b 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	0018      	movs	r0, r3
 80031ea:	2310      	movs	r3, #16
 80031ec:	001a      	movs	r2, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f004 fa84 	bl	80076fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f002 fc77 	bl	8005aec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	2202      	movs	r2, #2
 8003202:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	0052      	lsls	r2, r2, #1
 800320a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800320c:	193b      	adds	r3, r7, r4
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003212:	193b      	adds	r3, r7, r4
 8003214:	2240      	movs	r2, #64	@ 0x40
 8003216:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003218:	193b      	adds	r3, r7, r4
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800321e:	193b      	adds	r3, r7, r4
 8003220:	0018      	movs	r0, r3
 8003222:	f002 fcaf 	bl	8005b84 <HAL_RCC_OscConfig>
 8003226:	1e03      	subs	r3, r0, #0
 8003228:	d001      	beq.n	800322e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800322a:	f000 fa0d 	bl	8003648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	2207      	movs	r2, #7
 8003232:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	2100      	movs	r1, #0
 800324a:	0018      	movs	r0, r3
 800324c:	f002 ffaa 	bl	80061a4 <HAL_RCC_ClockConfig>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d001      	beq.n	8003258 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003254:	f000 f9f8 	bl	8003648 <Error_Handler>
  }
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b013      	add	sp, #76	@ 0x4c
 800325e:	bd90      	pop	{r4, r7, pc}

08003260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	0018      	movs	r0, r3
 800326a:	230c      	movs	r3, #12
 800326c:	001a      	movs	r2, r3
 800326e:	2100      	movs	r1, #0
 8003270:	f004 fa44 	bl	80076fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003274:	4b46      	ldr	r3, [pc, #280]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003276:	4a47      	ldr	r2, [pc, #284]	@ (8003394 <MX_ADC1_Init+0x134>)
 8003278:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800327a:	4b45      	ldr	r3, [pc, #276]	@ (8003390 <MX_ADC1_Init+0x130>)
 800327c:	2280      	movs	r2, #128	@ 0x80
 800327e:	05d2      	lsls	r2, r2, #23
 8003280:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003282:	4b43      	ldr	r3, [pc, #268]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003288:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <MX_ADC1_Init+0x130>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800328e:	4b40      	ldr	r3, [pc, #256]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003290:	2280      	movs	r2, #128	@ 0x80
 8003292:	0392      	lsls	r2, r2, #14
 8003294:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003296:	4b3e      	ldr	r3, [pc, #248]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003298:	2204      	movs	r2, #4
 800329a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800329c:	4b3c      	ldr	r3, [pc, #240]	@ (8003390 <MX_ADC1_Init+0x130>)
 800329e:	2200      	movs	r2, #0
 80032a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80032a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032a8:	4b39      	ldr	r3, [pc, #228]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80032ae:	4b38      	ldr	r3, [pc, #224]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032b0:	2204      	movs	r2, #4
 80032b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032b4:	4b36      	ldr	r3, [pc, #216]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032b6:	2220      	movs	r2, #32
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032bc:	4b34      	ldr	r3, [pc, #208]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032c2:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032c8:	4b31      	ldr	r3, [pc, #196]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032ca:	222c      	movs	r2, #44	@ 0x2c
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80032d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032d8:	2200      	movs	r2, #0
 80032da:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80032dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032de:	2200      	movs	r2, #0
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80032e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032e4:	223c      	movs	r2, #60	@ 0x3c
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80032ea:	4b29      	ldr	r3, [pc, #164]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032f0:	4b27      	ldr	r3, [pc, #156]	@ (8003390 <MX_ADC1_Init+0x130>)
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 fd14 	bl	8003d20 <HAL_ADC_Init>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80032fc:	f000 f9a4 	bl	8003648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2200      	movs	r2, #0
 800330a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003312:	1d3a      	adds	r2, r7, #4
 8003314:	4b1e      	ldr	r3, [pc, #120]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f000 ff47 	bl	80041ac <HAL_ADC_ConfigChannel>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d001      	beq.n	8003326 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8003322:	f000 f991 	bl	8003648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	4a1b      	ldr	r2, [pc, #108]	@ (8003398 <MX_ADC1_Init+0x138>)
 800332a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	2204      	movs	r2, #4
 8003330:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003332:	1d3a      	adds	r2, r7, #4
 8003334:	4b16      	ldr	r3, [pc, #88]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f000 ff37 	bl	80041ac <HAL_ADC_ConfigChannel>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d001      	beq.n	8003346 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8003342:	f000 f981 	bl	8003648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	4a14      	ldr	r2, [pc, #80]	@ (800339c <MX_ADC1_Init+0x13c>)
 800334a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	2208      	movs	r2, #8
 8003350:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003352:	1d3a      	adds	r2, r7, #4
 8003354:	4b0e      	ldr	r3, [pc, #56]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003356:	0011      	movs	r1, r2
 8003358:	0018      	movs	r0, r3
 800335a:	f000 ff27 	bl	80041ac <HAL_ADC_ConfigChannel>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8003362:	f000 f971 	bl	8003648 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	4a0d      	ldr	r2, [pc, #52]	@ (80033a0 <MX_ADC1_Init+0x140>)
 800336a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	220c      	movs	r2, #12
 8003370:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003372:	1d3a      	adds	r2, r7, #4
 8003374:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <MX_ADC1_Init+0x130>)
 8003376:	0011      	movs	r1, r2
 8003378:	0018      	movs	r0, r3
 800337a:	f000 ff17 	bl	80041ac <HAL_ADC_ConfigChannel>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d001      	beq.n	8003386 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8003382:	f000 f961 	bl	8003648 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b004      	add	sp, #16
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	20000078 	.word	0x20000078
 8003394:	40012400 	.word	0x40012400
 8003398:	04000002 	.word	0x04000002
 800339c:	10000010 	.word	0x10000010
 80033a0:	14000020 	.word	0x14000020

080033a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033aa:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <MX_I2C1_Init+0x78>)
 80033ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <MX_I2C1_Init+0x7c>)
 80033b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033b4:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ba:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033bc:	2201      	movs	r2, #1
 80033be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033c0:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033c6:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033cc:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033d2:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033da:	2200      	movs	r2, #0
 80033dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033e0:	0018      	movs	r0, r3
 80033e2:	f001 fce7 	bl	8004db4 <HAL_I2C_Init>
 80033e6:	1e03      	subs	r3, r0, #0
 80033e8:	d001      	beq.n	80033ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033ea:	f000 f92d 	bl	8003648 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <MX_I2C1_Init+0x74>)
 80033f0:	2100      	movs	r1, #0
 80033f2:	0018      	movs	r0, r3
 80033f4:	f002 fae2 	bl	80059bc <HAL_I2CEx_ConfigAnalogFilter>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d001      	beq.n	8003400 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033fc:	f000 f924 	bl	8003648 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <MX_I2C1_Init+0x74>)
 8003402:	2100      	movs	r1, #0
 8003404:	0018      	movs	r0, r3
 8003406:	f002 fb25 	bl	8005a54 <HAL_I2CEx_ConfigDigitalFilter>
 800340a:	1e03      	subs	r3, r0, #0
 800340c:	d001      	beq.n	8003412 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800340e:	f000 f91b 	bl	8003648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200000dc 	.word	0x200000dc
 800341c:	40005400 	.word	0x40005400
 8003420:	00503d58 	.word	0x00503d58

08003424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 800342a:	4a24      	ldr	r2, [pc, #144]	@ (80034bc <MX_USART1_UART_Init+0x98>)
 800342c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800342e:	4b22      	ldr	r3, [pc, #136]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003430:	22e1      	movs	r2, #225	@ 0xe1
 8003432:	0252      	lsls	r2, r2, #9
 8003434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003436:	4b20      	ldr	r3, [pc, #128]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800343c:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003442:	4b1d      	ldr	r3, [pc, #116]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 800344a:	220c      	movs	r2, #12
 800344c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344e:	4b1a      	ldr	r3, [pc, #104]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003454:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345a:	4b17      	ldr	r3, [pc, #92]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003460:	4b15      	ldr	r3, [pc, #84]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003466:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003468:	2200      	movs	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800346c:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 800346e:	0018      	movs	r0, r3
 8003470:	f003 f968 	bl	8006744 <HAL_UART_Init>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	d001      	beq.n	800347c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003478:	f000 f8e6 	bl	8003648 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800347c:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 800347e:	2100      	movs	r1, #0
 8003480:	0018      	movs	r0, r3
 8003482:	f003 fd8d 	bl	8006fa0 <HAL_UARTEx_SetTxFifoThreshold>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800348a:	f000 f8dd 	bl	8003648 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800348e:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 8003490:	2100      	movs	r1, #0
 8003492:	0018      	movs	r0, r3
 8003494:	f003 fdc4 	bl	8007020 <HAL_UARTEx_SetRxFifoThreshold>
 8003498:	1e03      	subs	r3, r0, #0
 800349a:	d001      	beq.n	80034a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800349c:	f000 f8d4 	bl	8003648 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <MX_USART1_UART_Init+0x94>)
 80034a2:	0018      	movs	r0, r3
 80034a4:	f003 fd42 	bl	8006f2c <HAL_UARTEx_DisableFifoMode>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80034ac:	f000 f8cc 	bl	8003648 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	20000130 	.word	0x20000130
 80034bc:	40013800 	.word	0x40013800

080034c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b089      	sub	sp, #36	@ 0x24
 80034c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c6:	240c      	movs	r4, #12
 80034c8:	193b      	adds	r3, r7, r4
 80034ca:	0018      	movs	r0, r3
 80034cc:	2314      	movs	r3, #20
 80034ce:	001a      	movs	r2, r3
 80034d0:	2100      	movs	r1, #0
 80034d2:	f004 f913 	bl	80076fc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034d6:	4b35      	ldr	r3, [pc, #212]	@ (80035ac <MX_GPIO_Init+0xec>)
 80034d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <MX_GPIO_Init+0xec>)
 80034dc:	2120      	movs	r1, #32
 80034de:	430a      	orrs	r2, r1
 80034e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80034e2:	4b32      	ldr	r3, [pc, #200]	@ (80035ac <MX_GPIO_Init+0xec>)
 80034e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e6:	2220      	movs	r2, #32
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	4b2f      	ldr	r3, [pc, #188]	@ (80035ac <MX_GPIO_Init+0xec>)
 80034f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f2:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <MX_GPIO_Init+0xec>)
 80034f4:	2101      	movs	r1, #1
 80034f6:	430a      	orrs	r2, r1
 80034f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80034fa:	4b2c      	ldr	r3, [pc, #176]	@ (80035ac <MX_GPIO_Init+0xec>)
 80034fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fe:	2201      	movs	r2, #1
 8003500:	4013      	ands	r3, r2
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003506:	4b29      	ldr	r3, [pc, #164]	@ (80035ac <MX_GPIO_Init+0xec>)
 8003508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800350a:	4b28      	ldr	r3, [pc, #160]	@ (80035ac <MX_GPIO_Init+0xec>)
 800350c:	2102      	movs	r1, #2
 800350e:	430a      	orrs	r2, r1
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34
 8003512:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <MX_GPIO_Init+0xec>)
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	2202      	movs	r2, #2
 8003518:	4013      	ands	r3, r2
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800351e:	193b      	adds	r3, r7, r4
 8003520:	2280      	movs	r2, #128	@ 0x80
 8003522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003524:	193b      	adds	r3, r7, r4
 8003526:	2288      	movs	r2, #136	@ 0x88
 8003528:	0352      	lsls	r2, r2, #13
 800352a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	193b      	adds	r3, r7, r4
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003532:	193a      	adds	r2, r7, r4
 8003534:	23a0      	movs	r3, #160	@ 0xa0
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f001 fa9c 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003540:	0021      	movs	r1, r4
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2203      	movs	r2, #3
 8003546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2288      	movs	r2, #136	@ 0x88
 800354c:	0352      	lsls	r2, r2, #13
 800354e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	000c      	movs	r4, r1
 8003552:	193b      	adds	r3, r7, r4
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003558:	193b      	adds	r3, r7, r4
 800355a:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <MX_GPIO_Init+0xf0>)
 800355c:	0019      	movs	r1, r3
 800355e:	0010      	movs	r0, r2
 8003560:	f001 fa8a 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8003564:	193b      	adds	r3, r7, r4
 8003566:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <MX_GPIO_Init+0xf4>)
 8003568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800356a:	193b      	adds	r3, r7, r4
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003570:	193b      	adds	r3, r7, r4
 8003572:	2201      	movs	r2, #1
 8003574:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003576:	193b      	adds	r3, r7, r4
 8003578:	4a0d      	ldr	r2, [pc, #52]	@ (80035b0 <MX_GPIO_Init+0xf0>)
 800357a:	0019      	movs	r1, r3
 800357c:	0010      	movs	r0, r2
 800357e:	f001 fa7b 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003582:	0021      	movs	r1, r4
 8003584:	187b      	adds	r3, r7, r1
 8003586:	2280      	movs	r2, #128	@ 0x80
 8003588:	0152      	lsls	r2, r2, #5
 800358a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358c:	187b      	adds	r3, r7, r1
 800358e:	2203      	movs	r2, #3
 8003590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	187b      	adds	r3, r7, r1
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003598:	187b      	adds	r3, r7, r1
 800359a:	4a05      	ldr	r2, [pc, #20]	@ (80035b0 <MX_GPIO_Init+0xf0>)
 800359c:	0019      	movs	r1, r3
 800359e:	0010      	movs	r0, r2
 80035a0:	f001 fa6a 	bl	8004a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b009      	add	sp, #36	@ 0x24
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	50000400 	.word	0x50000400
 80035b4:	00000c04 	.word	0x00000c04

080035b8 <platform_write>:
	}

}
//platform_write ve platform_read Fonksiyonları
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
		uint16_t len) {
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af04      	add	r7, sp, #16
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	0008      	movs	r0, r1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	0019      	movs	r1, r3
 80035c6:	240b      	movs	r4, #11
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	1c02      	adds	r2, r0, #0
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	2508      	movs	r5, #8
 80035d0:	197b      	adds	r3, r7, r5
 80035d2:	1c0a      	adds	r2, r1, #0
 80035d4:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg,
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	23fa      	movs	r3, #250	@ 0xfa
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	9302      	str	r3, [sp, #8]
 80035e4:	197b      	adds	r3, r7, r5
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2301      	movs	r3, #1
 80035f0:	2133      	movs	r1, #51	@ 0x33
 80035f2:	f001 fc85 	bl	8004f00 <HAL_I2C_Mem_Write>
	I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);

	return 0;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bdb0      	pop	{r4, r5, r7, pc}

08003600 <platform_read>:
 * @param reg register to read
 * @param bufp pointer to buffer that store the data read
 * @param len number of consecutive register to read
 *
 */static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
		uint16_t len) {
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af04      	add	r7, sp, #16
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	0008      	movs	r0, r1
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	0019      	movs	r1, r3
 800360e:	240b      	movs	r4, #11
 8003610:	193b      	adds	r3, r7, r4
 8003612:	1c02      	adds	r2, r0, #0
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	2508      	movs	r5, #8
 8003618:	197b      	adds	r3, r7, r5
 800361a:	1c0a      	adds	r2, r1, #0
 800361c:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg,
 800361e:	193b      	adds	r3, r7, r4
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b29a      	uxth	r2, r3
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	23fa      	movs	r3, #250	@ 0xfa
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	197b      	adds	r3, r7, r5
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	2301      	movs	r3, #1
 8003638:	2133      	movs	r1, #51	@ 0x33
 800363a:	f001 fd8f 	bl	800515c <HAL_I2C_Mem_Read>
	I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
 800363e:	2300      	movs	r3, #0
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b004      	add	sp, #16
 8003646:	bdb0      	pop	{r4, r5, r7, pc}

08003648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800364c:	b672      	cpsid	i
}
 800364e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003650:	46c0      	nop			@ (mov r8, r8)
 8003652:	e7fd      	b.n	8003650 <Error_Handler+0x8>

08003654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365a:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <HAL_MspInit+0x44>)
 800365c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800365e:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <HAL_MspInit+0x44>)
 8003660:	2101      	movs	r1, #1
 8003662:	430a      	orrs	r2, r1
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40
 8003666:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <HAL_MspInit+0x44>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	2201      	movs	r2, #1
 800366c:	4013      	ands	r3, r2
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_MspInit+0x44>)
 8003674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <HAL_MspInit+0x44>)
 8003678:	2180      	movs	r1, #128	@ 0x80
 800367a:	0549      	lsls	r1, r1, #21
 800367c:	430a      	orrs	r2, r1
 800367e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_MspInit+0x44>)
 8003682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003684:	2380      	movs	r3, #128	@ 0x80
 8003686:	055b      	lsls	r3, r3, #21
 8003688:	4013      	ands	r3, r2
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	46bd      	mov	sp, r7
 8003692:	b002      	add	sp, #8
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b08b      	sub	sp, #44	@ 0x2c
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	2414      	movs	r4, #20
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	0018      	movs	r0, r3
 80036aa:	2314      	movs	r3, #20
 80036ac:	001a      	movs	r2, r3
 80036ae:	2100      	movs	r1, #0
 80036b0:	f004 f824 	bl	80076fc <memset>
  if(hadc->Instance==ADC1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a18      	ldr	r2, [pc, #96]	@ (800371c <HAL_ADC_MspInit+0x80>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d129      	bne.n	8003712 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80036be:	4b18      	ldr	r3, [pc, #96]	@ (8003720 <HAL_ADC_MspInit+0x84>)
 80036c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c2:	4b17      	ldr	r3, [pc, #92]	@ (8003720 <HAL_ADC_MspInit+0x84>)
 80036c4:	2180      	movs	r1, #128	@ 0x80
 80036c6:	0349      	lsls	r1, r1, #13
 80036c8:	430a      	orrs	r2, r1
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80036cc:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <HAL_ADC_MspInit+0x84>)
 80036ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	035b      	lsls	r3, r3, #13
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_ADC_MspInit+0x84>)
 80036dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036de:	4b10      	ldr	r3, [pc, #64]	@ (8003720 <HAL_ADC_MspInit+0x84>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	430a      	orrs	r2, r1
 80036e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <HAL_ADC_MspInit+0x84>)
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	2233      	movs	r2, #51	@ 0x33
 80036f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	2203      	movs	r2, #3
 80036fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003704:	193a      	adds	r2, r7, r4
 8003706:	23a0      	movs	r3, #160	@ 0xa0
 8003708:	05db      	lsls	r3, r3, #23
 800370a:	0011      	movs	r1, r2
 800370c:	0018      	movs	r0, r3
 800370e:	f001 f9b3 	bl	8004a78 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b00b      	add	sp, #44	@ 0x2c
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	40012400 	.word	0x40012400
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003724:	b590      	push	{r4, r7, lr}
 8003726:	b091      	sub	sp, #68	@ 0x44
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	232c      	movs	r3, #44	@ 0x2c
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	0018      	movs	r0, r3
 8003732:	2314      	movs	r3, #20
 8003734:	001a      	movs	r2, r3
 8003736:	2100      	movs	r1, #0
 8003738:	f003 ffe0 	bl	80076fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800373c:	2414      	movs	r4, #20
 800373e:	193b      	adds	r3, r7, r4
 8003740:	0018      	movs	r0, r3
 8003742:	2318      	movs	r3, #24
 8003744:	001a      	movs	r2, r3
 8003746:	2100      	movs	r1, #0
 8003748:	f003 ffd8 	bl	80076fc <memset>
  if(hi2c->Instance==I2C1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a22      	ldr	r2, [pc, #136]	@ (80037dc <HAL_I2C_MspInit+0xb8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d13d      	bne.n	80037d2 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003756:	193b      	adds	r3, r7, r4
 8003758:	2220      	movs	r2, #32
 800375a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800375c:	193b      	adds	r3, r7, r4
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003762:	193b      	adds	r3, r7, r4
 8003764:	0018      	movs	r0, r3
 8003766:	f002 fec7 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800376e:	f7ff ff6b 	bl	8003648 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_I2C_MspInit+0xbc>)
 8003774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003776:	4b1a      	ldr	r3, [pc, #104]	@ (80037e0 <HAL_I2C_MspInit+0xbc>)
 8003778:	2102      	movs	r1, #2
 800377a:	430a      	orrs	r2, r1
 800377c:	635a      	str	r2, [r3, #52]	@ 0x34
 800377e:	4b18      	ldr	r3, [pc, #96]	@ (80037e0 <HAL_I2C_MspInit+0xbc>)
 8003780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003782:	2202      	movs	r2, #2
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800378a:	212c      	movs	r1, #44	@ 0x2c
 800378c:	187b      	adds	r3, r7, r1
 800378e:	22c0      	movs	r2, #192	@ 0xc0
 8003790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2212      	movs	r2, #18
 8003796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2206      	movs	r2, #6
 80037a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <HAL_I2C_MspInit+0xc0>)
 80037ae:	0019      	movs	r1, r3
 80037b0:	0010      	movs	r0, r2
 80037b2:	f001 f961 	bl	8004a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037b6:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <HAL_I2C_MspInit+0xbc>)
 80037b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037ba:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <HAL_I2C_MspInit+0xbc>)
 80037bc:	2180      	movs	r1, #128	@ 0x80
 80037be:	0389      	lsls	r1, r1, #14
 80037c0:	430a      	orrs	r2, r1
 80037c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037c4:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_I2C_MspInit+0xbc>)
 80037c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	039b      	lsls	r3, r3, #14
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b011      	add	sp, #68	@ 0x44
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	40005400 	.word	0x40005400
 80037e0:	40021000 	.word	0x40021000
 80037e4:	50000400 	.word	0x50000400

080037e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b091      	sub	sp, #68	@ 0x44
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f0:	232c      	movs	r3, #44	@ 0x2c
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	0018      	movs	r0, r3
 80037f6:	2314      	movs	r3, #20
 80037f8:	001a      	movs	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	f003 ff7e 	bl	80076fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003800:	2414      	movs	r4, #20
 8003802:	193b      	adds	r3, r7, r4
 8003804:	0018      	movs	r0, r3
 8003806:	2318      	movs	r3, #24
 8003808:	001a      	movs	r2, r3
 800380a:	2100      	movs	r1, #0
 800380c:	f003 ff76 	bl	80076fc <memset>
  if(huart->Instance==USART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a23      	ldr	r2, [pc, #140]	@ (80038a4 <HAL_UART_MspInit+0xbc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d13f      	bne.n	800389a <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800381a:	193b      	adds	r3, r7, r4
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003820:	193b      	adds	r3, r7, r4
 8003822:	2200      	movs	r2, #0
 8003824:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003826:	193b      	adds	r3, r7, r4
 8003828:	0018      	movs	r0, r3
 800382a:	f002 fe65 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d001      	beq.n	8003836 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003832:	f7ff ff09 	bl	8003648 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003836:	4b1c      	ldr	r3, [pc, #112]	@ (80038a8 <HAL_UART_MspInit+0xc0>)
 8003838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800383a:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_UART_MspInit+0xc0>)
 800383c:	2180      	movs	r1, #128	@ 0x80
 800383e:	01c9      	lsls	r1, r1, #7
 8003840:	430a      	orrs	r2, r1
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40
 8003844:	4b18      	ldr	r3, [pc, #96]	@ (80038a8 <HAL_UART_MspInit+0xc0>)
 8003846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	4b15      	ldr	r3, [pc, #84]	@ (80038a8 <HAL_UART_MspInit+0xc0>)
 8003854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003856:	4b14      	ldr	r3, [pc, #80]	@ (80038a8 <HAL_UART_MspInit+0xc0>)
 8003858:	2101      	movs	r1, #1
 800385a:	430a      	orrs	r2, r1
 800385c:	635a      	str	r2, [r3, #52]	@ 0x34
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_UART_MspInit+0xc0>)
 8003860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003862:	2201      	movs	r2, #1
 8003864:	4013      	ands	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800386a:	212c      	movs	r1, #44	@ 0x2c
 800386c:	187b      	adds	r3, r7, r1
 800386e:	22c0      	movs	r2, #192	@ 0xc0
 8003870:	00d2      	lsls	r2, r2, #3
 8003872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	187b      	adds	r3, r7, r1
 8003876:	2202      	movs	r2, #2
 8003878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	187b      	adds	r3, r7, r1
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003880:	187b      	adds	r3, r7, r1
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003886:	187b      	adds	r3, r7, r1
 8003888:	2201      	movs	r2, #1
 800388a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388c:	187a      	adds	r2, r7, r1
 800388e:	23a0      	movs	r3, #160	@ 0xa0
 8003890:	05db      	lsls	r3, r3, #23
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f001 f8ef 	bl	8004a78 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b011      	add	sp, #68	@ 0x44
 80038a0:	bd90      	pop	{r4, r7, pc}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40021000 	.word	0x40021000

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	e7fd      	b.n	80038b0 <NMI_Handler+0x4>

080038b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b8:	46c0      	nop			@ (mov r8, r8)
 80038ba:	e7fd      	b.n	80038b8 <HardFault_Handler+0x4>

080038bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d4:	f000 f89c 	bl	8003a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038e8:	480d      	ldr	r0, [pc, #52]	@ (8003920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80038ec:	f7ff fff7 	bl	80038de <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038f0:	480c      	ldr	r0, [pc, #48]	@ (8003924 <LoopForever+0x6>)
  ldr r1, =_edata
 80038f2:	490d      	ldr	r1, [pc, #52]	@ (8003928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038f4:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <LoopForever+0xe>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f8:	e002      	b.n	8003900 <LoopCopyDataInit>

080038fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fe:	3304      	adds	r3, #4

08003900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003904:	d3f9      	bcc.n	80038fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003906:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003908:	4c0a      	ldr	r4, [pc, #40]	@ (8003934 <LoopForever+0x16>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800390c:	e001      	b.n	8003912 <LoopFillZerobss>

0800390e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003910:	3204      	adds	r2, #4

08003912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003914:	d3fb      	bcc.n	800390e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003916:	f003 feff 	bl	8007718 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800391a:	f7ff fb0d 	bl	8002f38 <main>

0800391e <LoopForever>:

LoopForever:
  b LoopForever
 800391e:	e7fe      	b.n	800391e <LoopForever>
  ldr   r0, =_estack
 8003920:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003928:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800392c:	08007f38 	.word	0x08007f38
  ldr r2, =_sbss
 8003930:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003934:	20000354 	.word	0x20000354

08003938 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003938:	e7fe      	b.n	8003938 <ADC1_IRQHandler>
	...

0800393c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <HAL_Init+0x3c>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <HAL_Init+0x3c>)
 800394e:	2180      	movs	r1, #128	@ 0x80
 8003950:	0049      	lsls	r1, r1, #1
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003956:	2003      	movs	r0, #3
 8003958:	f000 f810 	bl	800397c <HAL_InitTick>
 800395c:	1e03      	subs	r3, r0, #0
 800395e:	d003      	beq.n	8003968 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e001      	b.n	800396c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003968:	f7ff fe74 	bl	8003654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	781b      	ldrb	r3, [r3, #0]
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40022000 	.word	0x40022000

0800397c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003984:	230f      	movs	r3, #15
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800398c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <HAL_InitTick+0x88>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02b      	beq.n	80039ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003994:	4b1c      	ldr	r3, [pc, #112]	@ (8003a08 <HAL_InitTick+0x8c>)
 8003996:	681c      	ldr	r4, [r3, #0]
 8003998:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <HAL_InitTick+0x88>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	0019      	movs	r1, r3
 800399e:	23fa      	movs	r3, #250	@ 0xfa
 80039a0:	0098      	lsls	r0, r3, #2
 80039a2:	f7fc fbad 	bl	8000100 <__udivsi3>
 80039a6:	0003      	movs	r3, r0
 80039a8:	0019      	movs	r1, r3
 80039aa:	0020      	movs	r0, r4
 80039ac:	f7fc fba8 	bl	8000100 <__udivsi3>
 80039b0:	0003      	movs	r3, r0
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 ff8d 	bl	80048d2 <HAL_SYSTICK_Config>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d112      	bne.n	80039e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d80a      	bhi.n	80039d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	2301      	movs	r3, #1
 80039c6:	425b      	negs	r3, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 ff6c 	bl	80048a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039d0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <HAL_InitTick+0x90>)
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e00d      	b.n	80039f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80039d8:	230f      	movs	r3, #15
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e008      	b.n	80039f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039e2:	230f      	movs	r3, #15
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e003      	b.n	80039f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039ec:	230f      	movs	r3, #15
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80039f4:	230f      	movs	r3, #15
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b005      	add	sp, #20
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	20000008 	.word	0x20000008
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	20000004 	.word	0x20000004

08003a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <HAL_IncTick+0x1c>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	001a      	movs	r2, r3
 8003a1a:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <HAL_IncTick+0x20>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	18d2      	adds	r2, r2, r3
 8003a20:	4b03      	ldr	r3, [pc, #12]	@ (8003a30 <HAL_IncTick+0x20>)
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	20000008 	.word	0x20000008
 8003a30:	20000218 	.word	0x20000218

08003a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  return uwTick;
 8003a38:	4b02      	ldr	r3, [pc, #8]	@ (8003a44 <HAL_GetTick+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	20000218 	.word	0x20000218

08003a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	d005      	beq.n	8003a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <HAL_Delay+0x44>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	001a      	movs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	f7ff ffe0 	bl	8003a34 <HAL_GetTick>
 8003a74:	0002      	movs	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d8f7      	bhi.n	8003a70 <HAL_Delay+0x28>
  {
  }
}
 8003a80:	46c0      	nop			@ (mov r8, r8)
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b004      	add	sp, #16
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	20000008 	.word	0x20000008

08003a90 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a05      	ldr	r2, [pc, #20]	@ (8003ab4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	fe3fffff 	.word	0xfe3fffff

08003ab8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	23e0      	movs	r3, #224	@ 0xe0
 8003ac6:	045b      	lsls	r3, r3, #17
 8003ac8:	4013      	ands	r3, r2
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	2107      	movs	r1, #7
 8003aea:	4091      	lsls	r1, r2
 8003aec:	000a      	movs	r2, r1
 8003aee:	43d2      	mvns	r2, r2
 8003af0:	401a      	ands	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2104      	movs	r1, #4
 8003af6:	400b      	ands	r3, r1
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4099      	lsls	r1, r3
 8003afc:	000b      	movs	r3, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	2104      	movs	r1, #4
 8003b1e:	400a      	ands	r2, r1
 8003b20:	2107      	movs	r1, #7
 8003b22:	4091      	lsls	r1, r2
 8003b24:	000a      	movs	r2, r1
 8003b26:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b2e:	40da      	lsrs	r2, r3
 8003b30:	0013      	movs	r3, r2
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b002      	add	sp, #8
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	23c0      	movs	r3, #192	@ 0xc0
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	211f      	movs	r1, #31
 8003b70:	400a      	ands	r2, r1
 8003b72:	210f      	movs	r1, #15
 8003b74:	4091      	lsls	r1, r2
 8003b76:	000a      	movs	r2, r1
 8003b78:	43d2      	mvns	r2, r2
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0e9b      	lsrs	r3, r3, #26
 8003b80:	210f      	movs	r1, #15
 8003b82:	4019      	ands	r1, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	201f      	movs	r0, #31
 8003b88:	4003      	ands	r3, r0
 8003b8a:	4099      	lsls	r1, r3
 8003b8c:	000b      	movs	r3, r1
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	035b      	lsls	r3, r3, #13
 8003bae:	0b5b      	lsrs	r3, r3, #13
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	0352      	lsls	r2, r2, #13
 8003bd0:	0b52      	lsrs	r2, r2, #13
 8003bd2:	43d2      	mvns	r2, r2
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b002      	add	sp, #8
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	0212      	lsls	r2, r2, #8
 8003bf8:	43d2      	mvns	r2, r2
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	400b      	ands	r3, r1
 8003c04:	4904      	ldr	r1, [pc, #16]	@ (8003c18 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003c06:	400b      	ands	r3, r1
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b004      	add	sp, #16
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	07ffff00 	.word	0x07ffff00

08003c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a05      	ldr	r2, [pc, #20]	@ (8003c40 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2280      	movs	r2, #128	@ 0x80
 8003c2e:	0552      	lsls	r2, r2, #21
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	6fffffe8 	.word	0x6fffffe8

08003c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	055b      	lsls	r3, r3, #21
 8003c54:	401a      	ands	r2, r3
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	055b      	lsls	r3, r3, #21
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d101      	bne.n	8003c62 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <LL_ADC_Enable+0x20>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b002      	add	sp, #8
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	7fffffe8 	.word	0x7fffffe8

08003c90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a04      	ldr	r2, [pc, #16]	@ (8003cb0 <LL_ADC_Disable+0x20>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	7fffffe8 	.word	0x7fffffe8

08003cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <LL_ADC_IsEnabled+0x18>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <LL_ADC_IsEnabled+0x1a>
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <LL_ADC_REG_StartConversion+0x20>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2204      	movs	r2, #4
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	7fffffe8 	.word	0x7fffffe8

08003cfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d101      	bne.n	8003d14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d28:	231f      	movs	r3, #31
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e17f      	b.n	8004046 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7ff fca3 	bl	800369c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2254      	movs	r2, #84	@ 0x54
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7ff ff6b 	bl	8003c44 <LL_ADC_IsInternalRegulatorEnabled>
 8003d6e:	1e03      	subs	r3, r0, #0
 8003d70:	d115      	bne.n	8003d9e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff ff50 	bl	8003c1c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d7c:	4bb4      	ldr	r3, [pc, #720]	@ (8004050 <HAL_ADC_Init+0x330>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	49b4      	ldr	r1, [pc, #720]	@ (8004054 <HAL_ADC_Init+0x334>)
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fc f9bc 	bl	8000100 <__udivsi3>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d90:	e002      	b.n	8003d98 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f9      	bne.n	8003d92 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff ff4e 	bl	8003c44 <LL_ADC_IsInternalRegulatorEnabled>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d10f      	bne.n	8003dcc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	2210      	movs	r2, #16
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003dc4:	231f      	movs	r3, #31
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff ff93 	bl	8003cfc <LL_ADC_REG_IsConversionOngoing>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	2210      	movs	r2, #16
 8003de0:	4013      	ands	r3, r2
 8003de2:	d000      	beq.n	8003de6 <HAL_ADC_Init+0xc6>
 8003de4:	e122      	b.n	800402c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d000      	beq.n	8003dee <HAL_ADC_Init+0xce>
 8003dec:	e11e      	b.n	800402c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	4a99      	ldr	r2, [pc, #612]	@ (8004058 <HAL_ADC_Init+0x338>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	2202      	movs	r2, #2
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f7ff ff56 	bl	8003cb4 <LL_ADC_IsEnabled>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d000      	beq.n	8003e0e <HAL_ADC_Init+0xee>
 8003e0c:	e0ad      	b.n	8003f6a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7e1b      	ldrb	r3, [r3, #24]
 8003e16:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003e18:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7e5b      	ldrb	r3, [r3, #25]
 8003e1e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e20:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7e9b      	ldrb	r3, [r3, #26]
 8003e26:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e28:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_ADC_Init+0x118>
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	015b      	lsls	r3, r3, #5
 8003e36:	e000      	b.n	8003e3a <HAL_ADC_Init+0x11a>
 8003e38:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e3a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e40:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	da04      	bge.n	8003e54 <HAL_ADC_Init+0x134>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	e001      	b.n	8003e58 <HAL_ADC_Init+0x138>
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003e58:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	212c      	movs	r1, #44	@ 0x2c
 8003e5e:	5c5b      	ldrb	r3, [r3, r1]
 8003e60:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e62:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	5c9b      	ldrb	r3, [r3, r2]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d115      	bne.n	8003ea0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7e9b      	ldrb	r3, [r3, #26]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2280      	movs	r2, #128	@ 0x80
 8003e80:	0252      	lsls	r2, r2, #9
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	e00b      	b.n	8003ea0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e98:	2201      	movs	r2, #1
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eac:	23e0      	movs	r3, #224	@ 0xe0
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a65      	ldr	r2, [pc, #404]	@ (800405c <HAL_ADC_Init+0x33c>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	0f9b      	lsrs	r3, r3, #30
 8003eda:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	223c      	movs	r2, #60	@ 0x3c
 8003eec:	5c9b      	ldrb	r3, [r3, r2]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d111      	bne.n	8003f16 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	0f9b      	lsrs	r3, r3, #30
 8003ef8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003efe:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003f04:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003f0a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	2201      	movs	r2, #1
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	4a50      	ldr	r2, [pc, #320]	@ (8004060 <HAL_ADC_Init+0x340>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	23c0      	movs	r3, #192	@ 0xc0
 8003f32:	061b      	lsls	r3, r3, #24
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d018      	beq.n	8003f6a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f3c:	2380      	movs	r3, #128	@ 0x80
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d012      	beq.n	8003f6a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f48:	2380      	movs	r3, #128	@ 0x80
 8003f4a:	061b      	lsls	r3, r3, #24
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d00c      	beq.n	8003f6a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003f50:	4b44      	ldr	r3, [pc, #272]	@ (8004064 <HAL_ADC_Init+0x344>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a44      	ldr	r2, [pc, #272]	@ (8004068 <HAL_ADC_Init+0x348>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	0019      	movs	r1, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	23f0      	movs	r3, #240	@ 0xf0
 8003f60:	039b      	lsls	r3, r3, #14
 8003f62:	401a      	ands	r2, r3
 8003f64:	4b3f      	ldr	r3, [pc, #252]	@ (8004064 <HAL_ADC_Init+0x344>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f72:	001a      	movs	r2, r3
 8003f74:	2100      	movs	r1, #0
 8003f76:	f7ff fdac 	bl	8003ad2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	493a      	ldr	r1, [pc, #232]	@ (800406c <HAL_ADC_Init+0x34c>)
 8003f84:	001a      	movs	r2, r3
 8003f86:	f7ff fda4 	bl	8003ad2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	4249      	negs	r1, r1
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fa4:	e018      	b.n	8003fd8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	2380      	movs	r3, #128	@ 0x80
 8003fac:	039b      	lsls	r3, r3, #14
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d112      	bne.n	8003fd8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	221c      	movs	r2, #28
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	4252      	negs	r2, r2
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	0011      	movs	r1, r2
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2100      	movs	r1, #0
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7ff fd94 	bl	8003b0c <LL_ADC_GetSamplingTimeCommonChannels>
 8003fe4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d10b      	bne.n	8004006 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004004:	e01c      	b.n	8004040 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	2212      	movs	r2, #18
 800400c:	4393      	bics	r3, r2
 800400e:	2210      	movs	r2, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401a:	2201      	movs	r2, #1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004022:	231f      	movs	r3, #31
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800402a:	e009      	b.n	8004040 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	2210      	movs	r2, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004038:	231f      	movs	r3, #31
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004040:	231f      	movs	r3, #31
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	781b      	ldrb	r3, [r3, #0]
}
 8004046:	0018      	movs	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	b008      	add	sp, #32
 800404c:	bd80      	pop	{r7, pc}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	20000000 	.word	0x20000000
 8004054:	00030d40 	.word	0x00030d40
 8004058:	fffffefd 	.word	0xfffffefd
 800405c:	ffde0201 	.word	0xffde0201
 8004060:	1ffffc02 	.word	0x1ffffc02
 8004064:	40012708 	.word	0x40012708
 8004068:	ffc3ffff 	.word	0xffc3ffff
 800406c:	07ffff04 	.word	0x07ffff04

08004070 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff fe3b 	bl	8003cfc <LL_ADC_REG_IsConversionOngoing>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d16c      	bne.n	8004164 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2254      	movs	r2, #84	@ 0x54
 800408e:	5c9b      	ldrb	r3, [r3, r2]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_ADC_Start_DMA+0x28>
 8004094:	2302      	movs	r3, #2
 8004096:	e06c      	b.n	8004172 <HAL_ADC_Start_DMA+0x102>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2254      	movs	r2, #84	@ 0x54
 800409c:	2101      	movs	r1, #1
 800409e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	d113      	bne.n	80040d4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f7ff fdff 	bl	8003cb4 <LL_ADC_IsEnabled>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d004      	beq.n	80040c4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0018      	movs	r0, r3
 80040c0:	f7ff fde6 	bl	8003c90 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2101      	movs	r1, #1
 80040d0:	430a      	orrs	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80040d4:	2517      	movs	r5, #23
 80040d6:	197c      	adds	r4, r7, r5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 fa3e 	bl	800455c <ADC_Enable>
 80040e0:	0003      	movs	r3, r0
 80040e2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80040e4:	002c      	movs	r4, r5
 80040e6:	193b      	adds	r3, r7, r4
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d13e      	bne.n	800416c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	4a22      	ldr	r2, [pc, #136]	@ (800417c <HAL_ADC_Start_DMA+0x10c>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	2280      	movs	r2, #128	@ 0x80
 80040f8:	0052      	lsls	r2, r2, #1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800410a:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <HAL_ADC_Start_DMA+0x110>)
 800410c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004112:	4a1c      	ldr	r2, [pc, #112]	@ (8004184 <HAL_ADC_Start_DMA+0x114>)
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411a:	4a1b      	ldr	r2, [pc, #108]	@ (8004188 <HAL_ADC_Start_DMA+0x118>)
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	221c      	movs	r2, #28
 8004124:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2254      	movs	r2, #84	@ 0x54
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2110      	movs	r1, #16
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3340      	adds	r3, #64	@ 0x40
 8004148:	0019      	movs	r1, r3
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	193c      	adds	r4, r7, r4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f000 fbcc 	bl	80048ec <HAL_DMA_Start_IT>
 8004154:	0003      	movs	r3, r0
 8004156:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0018      	movs	r0, r3
 800415e:	f7ff fdbb 	bl	8003cd8 <LL_ADC_REG_StartConversion>
 8004162:	e003      	b.n	800416c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004164:	2317      	movs	r3, #23
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	2202      	movs	r2, #2
 800416a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800416c:	2317      	movs	r3, #23
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	781b      	ldrb	r3, [r3, #0]
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b006      	add	sp, #24
 8004178:	bdb0      	pop	{r4, r5, r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	fffff0fe 	.word	0xfffff0fe
 8004180:	08004669 	.word	0x08004669
 8004184:	08004731 	.word	0x08004731
 8004188:	0800474f 	.word	0x0800474f

0800418c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004194:	46c0      	nop			@ (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b002      	add	sp, #8
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041a4:	46c0      	nop			@ (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b6:	2317      	movs	r3, #23
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2254      	movs	r2, #84	@ 0x54
 80041c6:	5c9b      	ldrb	r3, [r3, r2]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x24>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e1c0      	b.n	8004552 <HAL_ADC_ConfigChannel+0x3a6>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2254      	movs	r2, #84	@ 0x54
 80041d4:	2101      	movs	r1, #1
 80041d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	0018      	movs	r0, r3
 80041de:	f7ff fd8d 	bl	8003cfc <LL_ADC_REG_IsConversionOngoing>
 80041e2:	1e03      	subs	r3, r0, #0
 80041e4:	d000      	beq.n	80041e8 <HAL_ADC_ConfigChannel+0x3c>
 80041e6:	e1a3      	b.n	8004530 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d100      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x46>
 80041f0:	e143      	b.n	800447a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	2380      	movs	r3, #128	@ 0x80
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d004      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004202:	4ac1      	ldr	r2, [pc, #772]	@ (8004508 <HAL_ADC_ConfigChannel+0x35c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0019      	movs	r1, r3
 8004212:	0010      	movs	r0, r2
 8004214:	f7ff fcc2 	bl	8003b9c <LL_ADC_REG_SetSequencerChAdd>
 8004218:	e0c9      	b.n	80043ae <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	211f      	movs	r1, #31
 8004224:	400b      	ands	r3, r1
 8004226:	210f      	movs	r1, #15
 8004228:	4099      	lsls	r1, r3
 800422a:	000b      	movs	r3, r1
 800422c:	43db      	mvns	r3, r3
 800422e:	4013      	ands	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	035b      	lsls	r3, r3, #13
 8004238:	0b5b      	lsrs	r3, r3, #13
 800423a:	d105      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x9c>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	221f      	movs	r2, #31
 8004244:	4013      	ands	r3, r2
 8004246:	e098      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	4013      	ands	r3, r2
 8004250:	d000      	beq.n	8004254 <HAL_ADC_ConfigChannel+0xa8>
 8004252:	e091      	b.n	8004378 <HAL_ADC_ConfigChannel+0x1cc>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2202      	movs	r2, #2
 800425a:	4013      	ands	r3, r2
 800425c:	d000      	beq.n	8004260 <HAL_ADC_ConfigChannel+0xb4>
 800425e:	e089      	b.n	8004374 <HAL_ADC_ConfigChannel+0x1c8>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2204      	movs	r2, #4
 8004266:	4013      	ands	r3, r2
 8004268:	d000      	beq.n	800426c <HAL_ADC_ConfigChannel+0xc0>
 800426a:	e081      	b.n	8004370 <HAL_ADC_ConfigChannel+0x1c4>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2208      	movs	r2, #8
 8004272:	4013      	ands	r3, r2
 8004274:	d000      	beq.n	8004278 <HAL_ADC_ConfigChannel+0xcc>
 8004276:	e079      	b.n	800436c <HAL_ADC_ConfigChannel+0x1c0>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2210      	movs	r2, #16
 800427e:	4013      	ands	r3, r2
 8004280:	d000      	beq.n	8004284 <HAL_ADC_ConfigChannel+0xd8>
 8004282:	e071      	b.n	8004368 <HAL_ADC_ConfigChannel+0x1bc>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2220      	movs	r2, #32
 800428a:	4013      	ands	r3, r2
 800428c:	d000      	beq.n	8004290 <HAL_ADC_ConfigChannel+0xe4>
 800428e:	e069      	b.n	8004364 <HAL_ADC_ConfigChannel+0x1b8>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2240      	movs	r2, #64	@ 0x40
 8004296:	4013      	ands	r3, r2
 8004298:	d000      	beq.n	800429c <HAL_ADC_ConfigChannel+0xf0>
 800429a:	e061      	b.n	8004360 <HAL_ADC_ConfigChannel+0x1b4>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2280      	movs	r2, #128	@ 0x80
 80042a2:	4013      	ands	r3, r2
 80042a4:	d000      	beq.n	80042a8 <HAL_ADC_ConfigChannel+0xfc>
 80042a6:	e059      	b.n	800435c <HAL_ADC_ConfigChannel+0x1b0>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	2380      	movs	r3, #128	@ 0x80
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	4013      	ands	r3, r2
 80042b2:	d151      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x1ac>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4013      	ands	r3, r2
 80042be:	d149      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x1a8>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4013      	ands	r3, r2
 80042ca:	d141      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x1a4>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	@ 0x80
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	4013      	ands	r3, r2
 80042d6:	d139      	bne.n	800434c <HAL_ADC_ConfigChannel+0x1a0>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	015b      	lsls	r3, r3, #5
 80042e0:	4013      	ands	r3, r2
 80042e2:	d131      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x19c>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	019b      	lsls	r3, r3, #6
 80042ec:	4013      	ands	r3, r2
 80042ee:	d129      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x198>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	01db      	lsls	r3, r3, #7
 80042f8:	4013      	ands	r3, r2
 80042fa:	d121      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x194>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	2380      	movs	r3, #128	@ 0x80
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	4013      	ands	r3, r2
 8004306:	d119      	bne.n	800433c <HAL_ADC_ConfigChannel+0x190>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	4013      	ands	r3, r2
 8004312:	d111      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x18c>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	2380      	movs	r3, #128	@ 0x80
 800431a:	029b      	lsls	r3, r3, #10
 800431c:	4013      	ands	r3, r2
 800431e:	d109      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x188>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	@ 0x80
 8004326:	02db      	lsls	r3, r3, #11
 8004328:	4013      	ands	r3, r2
 800432a:	d001      	beq.n	8004330 <HAL_ADC_ConfigChannel+0x184>
 800432c:	2312      	movs	r3, #18
 800432e:	e024      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004330:	2300      	movs	r3, #0
 8004332:	e022      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004334:	2311      	movs	r3, #17
 8004336:	e020      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004338:	2310      	movs	r3, #16
 800433a:	e01e      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 800433c:	230f      	movs	r3, #15
 800433e:	e01c      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004340:	230e      	movs	r3, #14
 8004342:	e01a      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004344:	230d      	movs	r3, #13
 8004346:	e018      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004348:	230c      	movs	r3, #12
 800434a:	e016      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 800434c:	230b      	movs	r3, #11
 800434e:	e014      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004350:	230a      	movs	r3, #10
 8004352:	e012      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004354:	2309      	movs	r3, #9
 8004356:	e010      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004358:	2308      	movs	r3, #8
 800435a:	e00e      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 800435c:	2307      	movs	r3, #7
 800435e:	e00c      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004360:	2306      	movs	r3, #6
 8004362:	e00a      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004364:	2305      	movs	r3, #5
 8004366:	e008      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004368:	2304      	movs	r3, #4
 800436a:	e006      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 800436c:	2303      	movs	r3, #3
 800436e:	e004      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004370:	2302      	movs	r3, #2
 8004372:	e002      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_ADC_ConfigChannel+0x1ce>
 8004378:	2300      	movs	r3, #0
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	6852      	ldr	r2, [r2, #4]
 800437e:	201f      	movs	r0, #31
 8004380:	4002      	ands	r2, r0
 8004382:	4093      	lsls	r3, r2
 8004384:	000a      	movs	r2, r1
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	429a      	cmp	r2, r3
 800439a:	d808      	bhi.n	80043ae <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	001a      	movs	r2, r3
 80043aa:	f7ff fbd7 	bl	8003b5c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6819      	ldr	r1, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	001a      	movs	r2, r3
 80043bc:	f7ff fc12 	bl	8003be4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	db00      	blt.n	80043ca <HAL_ADC_ConfigChannel+0x21e>
 80043c8:	e0bc      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043ca:	4b50      	ldr	r3, [pc, #320]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7ff fb73 	bl	8003ab8 <LL_ADC_GetCommonPathInternalCh>
 80043d2:	0003      	movs	r3, r0
 80043d4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a4d      	ldr	r2, [pc, #308]	@ (8004510 <HAL_ADC_ConfigChannel+0x364>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d122      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043e8:	d11d      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2280      	movs	r2, #128	@ 0x80
 80043ee:	0412      	lsls	r2, r2, #16
 80043f0:	4313      	orrs	r3, r2
 80043f2:	4a46      	ldr	r2, [pc, #280]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 80043f4:	0019      	movs	r1, r3
 80043f6:	0010      	movs	r0, r2
 80043f8:	f7ff fb4a 	bl	8003a90 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043fc:	4b45      	ldr	r3, [pc, #276]	@ (8004514 <HAL_ADC_ConfigChannel+0x368>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4945      	ldr	r1, [pc, #276]	@ (8004518 <HAL_ADC_ConfigChannel+0x36c>)
 8004402:	0018      	movs	r0, r3
 8004404:	f7fb fe7c 	bl	8000100 <__udivsi3>
 8004408:	0003      	movs	r3, r0
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	0013      	movs	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	189b      	adds	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004416:	e002      	b.n	800441e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3b01      	subs	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f9      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004424:	e08e      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3c      	ldr	r2, [pc, #240]	@ (800451c <HAL_ADC_ConfigChannel+0x370>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d10e      	bne.n	800444e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	045b      	lsls	r3, r3, #17
 8004436:	4013      	ands	r3, r2
 8004438:	d109      	bne.n	800444e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2280      	movs	r2, #128	@ 0x80
 800443e:	0452      	lsls	r2, r2, #17
 8004440:	4313      	orrs	r3, r2
 8004442:	4a32      	ldr	r2, [pc, #200]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 8004444:	0019      	movs	r1, r3
 8004446:	0010      	movs	r0, r2
 8004448:	f7ff fb22 	bl	8003a90 <LL_ADC_SetCommonPathInternalCh>
 800444c:	e07a      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a33      	ldr	r2, [pc, #204]	@ (8004520 <HAL_ADC_ConfigChannel+0x374>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d000      	beq.n	800445a <HAL_ADC_ConfigChannel+0x2ae>
 8004458:	e074      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	03db      	lsls	r3, r3, #15
 8004460:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004462:	d000      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x2ba>
 8004464:	e06e      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2280      	movs	r2, #128	@ 0x80
 800446a:	03d2      	lsls	r2, r2, #15
 800446c:	4313      	orrs	r3, r2
 800446e:	4a27      	ldr	r2, [pc, #156]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 8004470:	0019      	movs	r1, r3
 8004472:	0010      	movs	r0, r2
 8004474:	f7ff fb0c 	bl	8003a90 <LL_ADC_SetCommonPathInternalCh>
 8004478:	e064      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	429a      	cmp	r2, r3
 8004484:	d004      	beq.n	8004490 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800448a:	4a1f      	ldr	r2, [pc, #124]	@ (8004508 <HAL_ADC_ConfigChannel+0x35c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d107      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	0019      	movs	r1, r3
 800449a:	0010      	movs	r0, r2
 800449c:	f7ff fb8f 	bl	8003bbe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	da4d      	bge.n	8004544 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044a8:	4b18      	ldr	r3, [pc, #96]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7ff fb04 	bl	8003ab8 <LL_ADC_GetCommonPathInternalCh>
 80044b0:	0003      	movs	r3, r0
 80044b2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a15      	ldr	r2, [pc, #84]	@ (8004510 <HAL_ADC_ConfigChannel+0x364>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d108      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4a18      	ldr	r2, [pc, #96]	@ (8004524 <HAL_ADC_ConfigChannel+0x378>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	4a11      	ldr	r2, [pc, #68]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 80044c6:	0019      	movs	r1, r3
 80044c8:	0010      	movs	r0, r2
 80044ca:	f7ff fae1 	bl	8003a90 <LL_ADC_SetCommonPathInternalCh>
 80044ce:	e039      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a11      	ldr	r2, [pc, #68]	@ (800451c <HAL_ADC_ConfigChannel+0x370>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <HAL_ADC_ConfigChannel+0x37c>)
 80044de:	4013      	ands	r3, r2
 80044e0:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 80044e2:	0019      	movs	r1, r3
 80044e4:	0010      	movs	r0, r2
 80044e6:	f7ff fad3 	bl	8003a90 <LL_ADC_SetCommonPathInternalCh>
 80044ea:	e02b      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004520 <HAL_ADC_ConfigChannel+0x374>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d126      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4a0c      	ldr	r2, [pc, #48]	@ (800452c <HAL_ADC_ConfigChannel+0x380>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	4a03      	ldr	r2, [pc, #12]	@ (800450c <HAL_ADC_ConfigChannel+0x360>)
 80044fe:	0019      	movs	r1, r3
 8004500:	0010      	movs	r0, r2
 8004502:	f7ff fac5 	bl	8003a90 <LL_ADC_SetCommonPathInternalCh>
 8004506:	e01d      	b.n	8004544 <HAL_ADC_ConfigChannel+0x398>
 8004508:	80000004 	.word	0x80000004
 800450c:	40012708 	.word	0x40012708
 8004510:	b0001000 	.word	0xb0001000
 8004514:	20000000 	.word	0x20000000
 8004518:	00030d40 	.word	0x00030d40
 800451c:	b8004000 	.word	0xb8004000
 8004520:	b4002000 	.word	0xb4002000
 8004524:	ff7fffff 	.word	0xff7fffff
 8004528:	feffffff 	.word	0xfeffffff
 800452c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004534:	2220      	movs	r2, #32
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800453c:	2317      	movs	r3, #23
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2254      	movs	r2, #84	@ 0x54
 8004548:	2100      	movs	r1, #0
 800454a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800454c:	2317      	movs	r3, #23
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b006      	add	sp, #24
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)

0800455c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff fba1 	bl	8003cb4 <LL_ADC_IsEnabled>
 8004572:	1e03      	subs	r3, r0, #0
 8004574:	d000      	beq.n	8004578 <ADC_Enable+0x1c>
 8004576:	e069      	b.n	800464c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4a36      	ldr	r2, [pc, #216]	@ (8004658 <ADC_Enable+0xfc>)
 8004580:	4013      	ands	r3, r2
 8004582:	d00d      	beq.n	80045a0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	2210      	movs	r2, #16
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004594:	2201      	movs	r2, #1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e056      	b.n	800464e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7ff fb61 	bl	8003c6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80045aa:	4b2c      	ldr	r3, [pc, #176]	@ (800465c <ADC_Enable+0x100>)
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7ff fa83 	bl	8003ab8 <LL_ADC_GetCommonPathInternalCh>
 80045b2:	0002      	movs	r2, r0
 80045b4:	2380      	movs	r3, #128	@ 0x80
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	4013      	ands	r3, r2
 80045ba:	d00f      	beq.n	80045dc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045bc:	4b28      	ldr	r3, [pc, #160]	@ (8004660 <ADC_Enable+0x104>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4928      	ldr	r1, [pc, #160]	@ (8004664 <ADC_Enable+0x108>)
 80045c2:	0018      	movs	r0, r3
 80045c4:	f7fb fd9c 	bl	8000100 <__udivsi3>
 80045c8:	0003      	movs	r3, r0
 80045ca:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80045cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045ce:	e002      	b.n	80045d6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7e5b      	ldrb	r3, [r3, #25]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d033      	beq.n	800464c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80045e4:	f7ff fa26 	bl	8003a34 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ec:	e027      	b.n	800463e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7ff fb5e 	bl	8003cb4 <LL_ADC_IsEnabled>
 80045f8:	1e03      	subs	r3, r0, #0
 80045fa:	d104      	bne.n	8004606 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0018      	movs	r0, r3
 8004602:	f7ff fb33 	bl	8003c6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004606:	f7ff fa15 	bl	8003a34 <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d914      	bls.n	800463e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	4013      	ands	r3, r2
 800461e:	2b01      	cmp	r3, #1
 8004620:	d00d      	beq.n	800463e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	2210      	movs	r2, #16
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004632:	2201      	movs	r2, #1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e007      	b.n	800464e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2201      	movs	r2, #1
 8004646:	4013      	ands	r3, r2
 8004648:	2b01      	cmp	r3, #1
 800464a:	d1d0      	bne.n	80045ee <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	0018      	movs	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	b004      	add	sp, #16
 8004654:	bd80      	pop	{r7, pc}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	80000017 	.word	0x80000017
 800465c:	40012708 	.word	0x40012708
 8004660:	20000000 	.word	0x20000000
 8004664:	00030d40 	.word	0x00030d40

08004668 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467a:	2250      	movs	r2, #80	@ 0x50
 800467c:	4013      	ands	r3, r2
 800467e:	d141      	bne.n	8004704 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004684:	2280      	movs	r2, #128	@ 0x80
 8004686:	0092      	lsls	r2, r2, #2
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	0018      	movs	r0, r3
 8004694:	f7ff fa51 	bl	8003b3a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004698:	1e03      	subs	r3, r0, #0
 800469a:	d02e      	beq.n	80046fa <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	7e9b      	ldrb	r3, [r3, #26]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d12a      	bne.n	80046fa <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d123      	bne.n	80046fa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7ff fb20 	bl	8003cfc <LL_ADC_REG_IsConversionOngoing>
 80046bc:	1e03      	subs	r3, r0, #0
 80046be:	d110      	bne.n	80046e2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	210c      	movs	r1, #12
 80046cc:	438a      	bics	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	4a15      	ldr	r2, [pc, #84]	@ (800472c <ADC_DMAConvCplt+0xc4>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	2201      	movs	r2, #1
 80046da:	431a      	orrs	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	659a      	str	r2, [r3, #88]	@ 0x58
 80046e0:	e00b      	b.n	80046fa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	2220      	movs	r2, #32
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f2:	2201      	movs	r2, #1
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f7fe fc0d 	bl	8002f1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004702:	e00f      	b.n	8004724 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	2210      	movs	r2, #16
 800470a:	4013      	ands	r3, r2
 800470c:	d004      	beq.n	8004718 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	0018      	movs	r0, r3
 8004712:	f7ff fd43 	bl	800419c <HAL_ADC_ErrorCallback>
}
 8004716:	e005      	b.n	8004724 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	0010      	movs	r0, r2
 8004722:	4798      	blx	r3
}
 8004724:	46c0      	nop			@ (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bd80      	pop	{r7, pc}
 800472c:	fffffefe 	.word	0xfffffefe

08004730 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	0018      	movs	r0, r3
 8004742:	f7ff fd23 	bl	800418c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	b004      	add	sp, #16
 800474c:	bd80      	pop	{r7, pc}

0800474e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	2240      	movs	r2, #64	@ 0x40
 8004762:	431a      	orrs	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476c:	2204      	movs	r2, #4
 800476e:	431a      	orrs	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	0018      	movs	r0, r3
 8004778:	f7ff fd10 	bl	800419c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b004      	add	sp, #16
 8004782:	bd80      	pop	{r7, pc}

08004784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	0002      	movs	r2, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	1dfb      	adds	r3, r7, #7
 8004790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004792:	1dfb      	adds	r3, r7, #7
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b7f      	cmp	r3, #127	@ 0x7f
 8004798:	d828      	bhi.n	80047ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800479a:	4a2f      	ldr	r2, [pc, #188]	@ (8004858 <__NVIC_SetPriority+0xd4>)
 800479c:	1dfb      	adds	r3, r7, #7
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	089b      	lsrs	r3, r3, #2
 80047a4:	33c0      	adds	r3, #192	@ 0xc0
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	589b      	ldr	r3, [r3, r2]
 80047aa:	1dfa      	adds	r2, r7, #7
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	0011      	movs	r1, r2
 80047b0:	2203      	movs	r2, #3
 80047b2:	400a      	ands	r2, r1
 80047b4:	00d2      	lsls	r2, r2, #3
 80047b6:	21ff      	movs	r1, #255	@ 0xff
 80047b8:	4091      	lsls	r1, r2
 80047ba:	000a      	movs	r2, r1
 80047bc:	43d2      	mvns	r2, r2
 80047be:	401a      	ands	r2, r3
 80047c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	019b      	lsls	r3, r3, #6
 80047c6:	22ff      	movs	r2, #255	@ 0xff
 80047c8:	401a      	ands	r2, r3
 80047ca:	1dfb      	adds	r3, r7, #7
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	0018      	movs	r0, r3
 80047d0:	2303      	movs	r3, #3
 80047d2:	4003      	ands	r3, r0
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047d8:	481f      	ldr	r0, [pc, #124]	@ (8004858 <__NVIC_SetPriority+0xd4>)
 80047da:	1dfb      	adds	r3, r7, #7
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	430a      	orrs	r2, r1
 80047e4:	33c0      	adds	r3, #192	@ 0xc0
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80047ea:	e031      	b.n	8004850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047ec:	4a1b      	ldr	r2, [pc, #108]	@ (800485c <__NVIC_SetPriority+0xd8>)
 80047ee:	1dfb      	adds	r3, r7, #7
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	0019      	movs	r1, r3
 80047f4:	230f      	movs	r3, #15
 80047f6:	400b      	ands	r3, r1
 80047f8:	3b08      	subs	r3, #8
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3306      	adds	r3, #6
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	18d3      	adds	r3, r2, r3
 8004802:	3304      	adds	r3, #4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	1dfa      	adds	r2, r7, #7
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	0011      	movs	r1, r2
 800480c:	2203      	movs	r2, #3
 800480e:	400a      	ands	r2, r1
 8004810:	00d2      	lsls	r2, r2, #3
 8004812:	21ff      	movs	r1, #255	@ 0xff
 8004814:	4091      	lsls	r1, r2
 8004816:	000a      	movs	r2, r1
 8004818:	43d2      	mvns	r2, r2
 800481a:	401a      	ands	r2, r3
 800481c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	019b      	lsls	r3, r3, #6
 8004822:	22ff      	movs	r2, #255	@ 0xff
 8004824:	401a      	ands	r2, r3
 8004826:	1dfb      	adds	r3, r7, #7
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	0018      	movs	r0, r3
 800482c:	2303      	movs	r3, #3
 800482e:	4003      	ands	r3, r0
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004834:	4809      	ldr	r0, [pc, #36]	@ (800485c <__NVIC_SetPriority+0xd8>)
 8004836:	1dfb      	adds	r3, r7, #7
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	001c      	movs	r4, r3
 800483c:	230f      	movs	r3, #15
 800483e:	4023      	ands	r3, r4
 8004840:	3b08      	subs	r3, #8
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	430a      	orrs	r2, r1
 8004846:	3306      	adds	r3, #6
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	18c3      	adds	r3, r0, r3
 800484c:	3304      	adds	r3, #4
 800484e:	601a      	str	r2, [r3, #0]
}
 8004850:	46c0      	nop			@ (mov r8, r8)
 8004852:	46bd      	mov	sp, r7
 8004854:	b003      	add	sp, #12
 8004856:	bd90      	pop	{r4, r7, pc}
 8004858:	e000e100 	.word	0xe000e100
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	1e5a      	subs	r2, r3, #1
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	045b      	lsls	r3, r3, #17
 8004870:	429a      	cmp	r2, r3
 8004872:	d301      	bcc.n	8004878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004874:	2301      	movs	r3, #1
 8004876:	e010      	b.n	800489a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004878:	4b0a      	ldr	r3, [pc, #40]	@ (80048a4 <SysTick_Config+0x44>)
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	3a01      	subs	r2, #1
 800487e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004880:	2301      	movs	r3, #1
 8004882:	425b      	negs	r3, r3
 8004884:	2103      	movs	r1, #3
 8004886:	0018      	movs	r0, r3
 8004888:	f7ff ff7c 	bl	8004784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800488c:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <SysTick_Config+0x44>)
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004892:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <SysTick_Config+0x44>)
 8004894:	2207      	movs	r2, #7
 8004896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004898:	2300      	movs	r3, #0
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b002      	add	sp, #8
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	e000e010 	.word	0xe000e010

080048a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	210f      	movs	r1, #15
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	1c02      	adds	r2, r0, #0
 80048b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	b25b      	sxtb	r3, r3
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff ff5d 	bl	8004784 <__NVIC_SetPriority>
}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b004      	add	sp, #16
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f7ff ffbf 	bl	8004860 <SysTick_Config>
 80048e2:	0003      	movs	r3, r0
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b002      	add	sp, #8
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2317      	movs	r3, #23
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2224      	movs	r2, #36	@ 0x24
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_DMA_Start_IT+0x24>
 800490c:	2302      	movs	r3, #2
 800490e:	e06f      	b.n	80049f0 <HAL_DMA_Start_IT+0x104>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2224      	movs	r2, #36	@ 0x24
 8004914:	2101      	movs	r1, #1
 8004916:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2225      	movs	r2, #37	@ 0x25
 800491c:	5c9b      	ldrb	r3, [r3, r2]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d157      	bne.n	80049d4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2225      	movs	r2, #37	@ 0x25
 8004928:	2102      	movs	r1, #2
 800492a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	438a      	bics	r2, r1
 8004940:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f855 	bl	80049f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	210e      	movs	r1, #14
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e00f      	b.n	8004988 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2104      	movs	r1, #4
 8004974:	438a      	bics	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	210a      	movs	r1, #10
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	2380      	movs	r3, #128	@ 0x80
 8004990:	025b      	lsls	r3, r3, #9
 8004992:	4013      	ands	r3, r2
 8004994:	d008      	beq.n	80049a8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a0:	2180      	movs	r1, #128	@ 0x80
 80049a2:	0049      	lsls	r1, r1, #1
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ba:	2180      	movs	r1, #128	@ 0x80
 80049bc:	0049      	lsls	r1, r1, #1
 80049be:	430a      	orrs	r2, r1
 80049c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2101      	movs	r1, #1
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e00a      	b.n	80049ea <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2280      	movs	r2, #128	@ 0x80
 80049d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2224      	movs	r2, #36	@ 0x24
 80049de:	2100      	movs	r1, #0
 80049e0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80049e2:	2317      	movs	r3, #23
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80049ea:	2317      	movs	r3, #23
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	781b      	ldrb	r3, [r3, #0]
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b006      	add	sp, #24
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004a0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004a20:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004a22:	4b14      	ldr	r3, [pc, #80]	@ (8004a74 <DMA_SetConfig+0x7c>)
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	221c      	movs	r2, #28
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2201      	movs	r2, #1
 8004a30:	409a      	lsls	r2, r3
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <DMA_SetConfig+0x7c>)
 8004a34:	430a      	orrs	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d108      	bne.n	8004a5a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a58:	e007      	b.n	8004a6a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]
}
 8004a6a:	46c0      	nop			@ (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b004      	add	sp, #16
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	40020000 	.word	0x40020000

08004a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a86:	e147      	b.n	8004d18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4091      	lsls	r1, r2
 8004a92:	000a      	movs	r2, r1
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d100      	bne.n	8004aa0 <HAL_GPIO_Init+0x28>
 8004a9e:	e138      	b.n	8004d12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d005      	beq.n	8004ab8 <HAL_GPIO_Init+0x40>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d130      	bne.n	8004b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	0013      	movs	r3, r2
 8004ac8:	43da      	mvns	r2, r3
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4013      	ands	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	0013      	movs	r3, r2
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aee:	2201      	movs	r2, #1
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	409a      	lsls	r2, r3
 8004af4:	0013      	movs	r3, r2
 8004af6:	43da      	mvns	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	2201      	movs	r2, #1
 8004b06:	401a      	ands	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	0013      	movs	r3, r2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d017      	beq.n	8004b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	2203      	movs	r2, #3
 8004b32:	409a      	lsls	r2, r3
 8004b34:	0013      	movs	r3, r2
 8004b36:	43da      	mvns	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	409a      	lsls	r2, r3
 8004b48:	0013      	movs	r3, r2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2203      	movs	r2, #3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d123      	bne.n	8004baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	08da      	lsrs	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3208      	adds	r2, #8
 8004b6a:	0092      	lsls	r2, r2, #2
 8004b6c:	58d3      	ldr	r3, [r2, r3]
 8004b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2207      	movs	r2, #7
 8004b74:	4013      	ands	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	220f      	movs	r2, #15
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	0013      	movs	r3, r2
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2107      	movs	r1, #7
 8004b8e:	400b      	ands	r3, r1
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	409a      	lsls	r2, r3
 8004b94:	0013      	movs	r3, r2
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	08da      	lsrs	r2, r3, #3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3208      	adds	r2, #8
 8004ba4:	0092      	lsls	r2, r2, #2
 8004ba6:	6939      	ldr	r1, [r7, #16]
 8004ba8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	0013      	movs	r3, r2
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	401a      	ands	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	0013      	movs	r3, r2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	23c0      	movs	r3, #192	@ 0xc0
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	4013      	ands	r3, r2
 8004be8:	d100      	bne.n	8004bec <HAL_GPIO_Init+0x174>
 8004bea:	e092      	b.n	8004d12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004bec:	4a50      	ldr	r2, [pc, #320]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	3318      	adds	r3, #24
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	589b      	ldr	r3, [r3, r2]
 8004bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	4013      	ands	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	220f      	movs	r2, #15
 8004c04:	409a      	lsls	r2, r3
 8004c06:	0013      	movs	r3, r2
 8004c08:	43da      	mvns	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	23a0      	movs	r3, #160	@ 0xa0
 8004c14:	05db      	lsls	r3, r3, #23
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d013      	beq.n	8004c42 <HAL_GPIO_Init+0x1ca>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a45      	ldr	r2, [pc, #276]	@ (8004d34 <HAL_GPIO_Init+0x2bc>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00d      	beq.n	8004c3e <HAL_GPIO_Init+0x1c6>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a44      	ldr	r2, [pc, #272]	@ (8004d38 <HAL_GPIO_Init+0x2c0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d007      	beq.n	8004c3a <HAL_GPIO_Init+0x1c2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a43      	ldr	r2, [pc, #268]	@ (8004d3c <HAL_GPIO_Init+0x2c4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d101      	bne.n	8004c36 <HAL_GPIO_Init+0x1be>
 8004c32:	2303      	movs	r3, #3
 8004c34:	e006      	b.n	8004c44 <HAL_GPIO_Init+0x1cc>
 8004c36:	2305      	movs	r3, #5
 8004c38:	e004      	b.n	8004c44 <HAL_GPIO_Init+0x1cc>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e002      	b.n	8004c44 <HAL_GPIO_Init+0x1cc>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_GPIO_Init+0x1cc>
 8004c42:	2300      	movs	r3, #0
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	2103      	movs	r1, #3
 8004c48:	400a      	ands	r2, r1
 8004c4a:	00d2      	lsls	r2, r2, #3
 8004c4c:	4093      	lsls	r3, r2
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004c54:	4936      	ldr	r1, [pc, #216]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	3318      	adds	r3, #24
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c62:	4b33      	ldr	r3, [pc, #204]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	2380      	movs	r3, #128	@ 0x80
 8004c78:	035b      	lsls	r3, r3, #13
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c86:	4b2a      	ldr	r3, [pc, #168]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004c8c:	4b28      	ldr	r3, [pc, #160]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	43da      	mvns	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	2380      	movs	r3, #128	@ 0x80
 8004ca2:	039b      	lsls	r3, r3, #14
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004cb8:	2384      	movs	r3, #132	@ 0x84
 8004cba:	58d3      	ldr	r3, [r2, r3]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	029b      	lsls	r3, r3, #10
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cdc:	4914      	ldr	r1, [pc, #80]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004cde:	2284      	movs	r2, #132	@ 0x84
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004ce4:	4a12      	ldr	r2, [pc, #72]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	58d3      	ldr	r3, [r2, r3]
 8004cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	2380      	movs	r3, #128	@ 0x80
 8004cfc:	025b      	lsls	r3, r3, #9
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d0a:	4909      	ldr	r1, [pc, #36]	@ (8004d30 <HAL_GPIO_Init+0x2b8>)
 8004d0c:	2280      	movs	r2, #128	@ 0x80
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	3301      	adds	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	40da      	lsrs	r2, r3
 8004d20:	1e13      	subs	r3, r2, #0
 8004d22:	d000      	beq.n	8004d26 <HAL_GPIO_Init+0x2ae>
 8004d24:	e6b0      	b.n	8004a88 <HAL_GPIO_Init+0x10>
  }
}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	46c0      	nop			@ (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b006      	add	sp, #24
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40021800 	.word	0x40021800
 8004d34:	50000400 	.word	0x50000400
 8004d38:	50000800 	.word	0x50000800
 8004d3c:	50000c00 	.word	0x50000c00

08004d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	000a      	movs	r2, r1
 8004d4a:	1cbb      	adds	r3, r7, #2
 8004d4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	1cba      	adds	r2, r7, #2
 8004d54:	8812      	ldrh	r2, [r2, #0]
 8004d56:	4013      	ands	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004d5a:	230f      	movs	r3, #15
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e003      	b.n	8004d6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d64:	230f      	movs	r3, #15
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	2200      	movs	r2, #0
 8004d6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	781b      	ldrb	r3, [r3, #0]
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	0008      	movs	r0, r1
 8004d84:	0011      	movs	r1, r2
 8004d86:	1cbb      	adds	r3, r7, #2
 8004d88:	1c02      	adds	r2, r0, #0
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	1c7b      	adds	r3, r7, #1
 8004d8e:	1c0a      	adds	r2, r1, #0
 8004d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d92:	1c7b      	adds	r3, r7, #1
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d9a:	1cbb      	adds	r3, r7, #2
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004da2:	e003      	b.n	8004dac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004da4:	1cbb      	adds	r3, r7, #2
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b002      	add	sp, #8
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e08f      	b.n	8004ee6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2241      	movs	r2, #65	@ 0x41
 8004dca:	5c9b      	ldrb	r3, [r3, r2]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d107      	bne.n	8004de2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2240      	movs	r2, #64	@ 0x40
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7fe fca1 	bl	8003724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2241      	movs	r2, #65	@ 0x41
 8004de6:	2124      	movs	r1, #36	@ 0x24
 8004de8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2101      	movs	r1, #1
 8004df6:	438a      	bics	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	493b      	ldr	r1, [pc, #236]	@ (8004ef0 <HAL_I2C_Init+0x13c>)
 8004e04:	400a      	ands	r2, r1
 8004e06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4938      	ldr	r1, [pc, #224]	@ (8004ef4 <HAL_I2C_Init+0x140>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d108      	bne.n	8004e32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2180      	movs	r1, #128	@ 0x80
 8004e2a:	0209      	lsls	r1, r1, #8
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
 8004e30:	e007      	b.n	8004e42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2184      	movs	r1, #132	@ 0x84
 8004e3c:	0209      	lsls	r1, r1, #8
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d109      	bne.n	8004e5e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2180      	movs	r1, #128	@ 0x80
 8004e56:	0109      	lsls	r1, r1, #4
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	e007      	b.n	8004e6e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4923      	ldr	r1, [pc, #140]	@ (8004ef8 <HAL_I2C_Init+0x144>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4920      	ldr	r1, [pc, #128]	@ (8004efc <HAL_I2C_Init+0x148>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	491a      	ldr	r1, [pc, #104]	@ (8004ef4 <HAL_I2C_Init+0x140>)
 8004e8a:	400a      	ands	r2, r1
 8004e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69d9      	ldr	r1, [r3, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2241      	movs	r2, #65	@ 0x41
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2242      	movs	r2, #66	@ 0x42
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	f0ffffff 	.word	0xf0ffffff
 8004ef4:	ffff7fff 	.word	0xffff7fff
 8004ef8:	fffff7ff 	.word	0xfffff7ff
 8004efc:	02008000 	.word	0x02008000

08004f00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b089      	sub	sp, #36	@ 0x24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	000c      	movs	r4, r1
 8004f0a:	0010      	movs	r0, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	230a      	movs	r3, #10
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	1c22      	adds	r2, r4, #0
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	2308      	movs	r3, #8
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	1c02      	adds	r2, r0, #0
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	1dbb      	adds	r3, r7, #6
 8004f20:	1c0a      	adds	r2, r1, #0
 8004f22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2241      	movs	r2, #65	@ 0x41
 8004f28:	5c9b      	ldrb	r3, [r3, r2]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d000      	beq.n	8004f32 <HAL_I2C_Mem_Write+0x32>
 8004f30:	e10c      	b.n	800514c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <HAL_I2C_Mem_Write+0x42>
 8004f38:	232c      	movs	r3, #44	@ 0x2c
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2280      	movs	r2, #128	@ 0x80
 8004f46:	0092      	lsls	r2, r2, #2
 8004f48:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0ff      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2240      	movs	r2, #64	@ 0x40
 8004f52:	5c9b      	ldrb	r3, [r3, r2]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_I2C_Mem_Write+0x5c>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0f8      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2240      	movs	r2, #64	@ 0x40
 8004f60:	2101      	movs	r1, #1
 8004f62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f64:	f7fe fd66 	bl	8003a34 <HAL_GetTick>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f6c:	2380      	movs	r3, #128	@ 0x80
 8004f6e:	0219      	lsls	r1, r3, #8
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	2319      	movs	r3, #25
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f000 fb0b 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	1e03      	subs	r3, r0, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e0e3      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2241      	movs	r2, #65	@ 0x41
 8004f8a:	2121      	movs	r1, #33	@ 0x21
 8004f8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2242      	movs	r2, #66	@ 0x42
 8004f92:	2140      	movs	r1, #64	@ 0x40
 8004f94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	222c      	movs	r2, #44	@ 0x2c
 8004fa6:	18ba      	adds	r2, r7, r2
 8004fa8:	8812      	ldrh	r2, [r2, #0]
 8004faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fb2:	1dbb      	adds	r3, r7, #6
 8004fb4:	881c      	ldrh	r4, [r3, #0]
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	8819      	ldrh	r1, [r3, #0]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	0023      	movs	r3, r4
 8004fce:	f000 f9f9 	bl	80053c4 <I2C_RequestMemoryWrite>
 8004fd2:	1e03      	subs	r3, r0, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2240      	movs	r2, #64	@ 0x40
 8004fda:	2100      	movs	r1, #0
 8004fdc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0b5      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2bff      	cmp	r3, #255	@ 0xff
 8004fea:	d911      	bls.n	8005010 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	22ff      	movs	r2, #255	@ 0xff
 8004ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	2380      	movs	r3, #128	@ 0x80
 8004ffa:	045c      	lsls	r4, r3, #17
 8004ffc:	230a      	movs	r3, #10
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	8819      	ldrh	r1, [r3, #0]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	2300      	movs	r3, #0
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	0023      	movs	r3, r4
 800500a:	f000 fc9d 	bl	8005948 <I2C_TransferConfig>
 800500e:	e012      	b.n	8005036 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501e:	b2da      	uxtb	r2, r3
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	049c      	lsls	r4, r3, #18
 8005024:	230a      	movs	r3, #10
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	8819      	ldrh	r1, [r3, #0]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	2300      	movs	r3, #0
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	0023      	movs	r3, r4
 8005032:	f000 fc89 	bl	8005948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 fb01 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 8005042:	1e03      	subs	r3, r0, #0
 8005044:	d001      	beq.n	800504a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e081      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	781a      	ldrb	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d03a      	beq.n	80050fa <HAL_I2C_Mem_Write+0x1fa>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d136      	bne.n	80050fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800508c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	0013      	movs	r3, r2
 8005096:	2200      	movs	r2, #0
 8005098:	2180      	movs	r1, #128	@ 0x80
 800509a:	f000 fa7b 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 800509e:	1e03      	subs	r3, r0, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e053      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2bff      	cmp	r3, #255	@ 0xff
 80050ae:	d911      	bls.n	80050d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	22ff      	movs	r2, #255	@ 0xff
 80050b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	045c      	lsls	r4, r3, #17
 80050c0:	230a      	movs	r3, #10
 80050c2:	18fb      	adds	r3, r7, r3
 80050c4:	8819      	ldrh	r1, [r3, #0]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	2300      	movs	r3, #0
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	0023      	movs	r3, r4
 80050ce:	f000 fc3b 	bl	8005948 <I2C_TransferConfig>
 80050d2:	e012      	b.n	80050fa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	049c      	lsls	r4, r3, #18
 80050e8:	230a      	movs	r3, #10
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	8819      	ldrh	r1, [r3, #0]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	0023      	movs	r3, r4
 80050f6:	f000 fc27 	bl	8005948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d198      	bne.n	8005036 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	0018      	movs	r0, r3
 800510c:	f000 fae0 	bl	80056d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005110:	1e03      	subs	r3, r0, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e01a      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2220      	movs	r2, #32
 800511e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	490b      	ldr	r1, [pc, #44]	@ (8005158 <HAL_I2C_Mem_Write+0x258>)
 800512c:	400a      	ands	r2, r1
 800512e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2241      	movs	r2, #65	@ 0x41
 8005134:	2120      	movs	r1, #32
 8005136:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2242      	movs	r2, #66	@ 0x42
 800513c:	2100      	movs	r1, #0
 800513e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2240      	movs	r2, #64	@ 0x40
 8005144:	2100      	movs	r1, #0
 8005146:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b007      	add	sp, #28
 8005154:	bd90      	pop	{r4, r7, pc}
 8005156:	46c0      	nop			@ (mov r8, r8)
 8005158:	fe00e800 	.word	0xfe00e800

0800515c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515c:	b590      	push	{r4, r7, lr}
 800515e:	b089      	sub	sp, #36	@ 0x24
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	000c      	movs	r4, r1
 8005166:	0010      	movs	r0, r2
 8005168:	0019      	movs	r1, r3
 800516a:	230a      	movs	r3, #10
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	1c22      	adds	r2, r4, #0
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	2308      	movs	r3, #8
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	1c02      	adds	r2, r0, #0
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	1dbb      	adds	r3, r7, #6
 800517c:	1c0a      	adds	r2, r1, #0
 800517e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2241      	movs	r2, #65	@ 0x41
 8005184:	5c9b      	ldrb	r3, [r3, r2]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d000      	beq.n	800518e <HAL_I2C_Mem_Read+0x32>
 800518c:	e110      	b.n	80053b0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d004      	beq.n	800519e <HAL_I2C_Mem_Read+0x42>
 8005194:	232c      	movs	r3, #44	@ 0x2c
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2280      	movs	r2, #128	@ 0x80
 80051a2:	0092      	lsls	r2, r2, #2
 80051a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e103      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2240      	movs	r2, #64	@ 0x40
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_I2C_Mem_Read+0x5c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e0fc      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2240      	movs	r2, #64	@ 0x40
 80051bc:	2101      	movs	r1, #1
 80051be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051c0:	f7fe fc38 	bl	8003a34 <HAL_GetTick>
 80051c4:	0003      	movs	r3, r0
 80051c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	0219      	lsls	r1, r3, #8
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2319      	movs	r3, #25
 80051d4:	2201      	movs	r2, #1
 80051d6:	f000 f9dd 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0e7      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2241      	movs	r2, #65	@ 0x41
 80051e6:	2122      	movs	r1, #34	@ 0x22
 80051e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2242      	movs	r2, #66	@ 0x42
 80051ee:	2140      	movs	r1, #64	@ 0x40
 80051f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	222c      	movs	r2, #44	@ 0x2c
 8005202:	18ba      	adds	r2, r7, r2
 8005204:	8812      	ldrh	r2, [r2, #0]
 8005206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800520e:	1dbb      	adds	r3, r7, #6
 8005210:	881c      	ldrh	r4, [r3, #0]
 8005212:	2308      	movs	r3, #8
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	230a      	movs	r3, #10
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	8819      	ldrh	r1, [r3, #0]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	0023      	movs	r3, r4
 800522a:	f000 f92f 	bl	800548c <I2C_RequestMemoryRead>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d005      	beq.n	800523e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2240      	movs	r2, #64	@ 0x40
 8005236:	2100      	movs	r1, #0
 8005238:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0b9      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2bff      	cmp	r3, #255	@ 0xff
 8005246:	d911      	bls.n	800526c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	22ff      	movs	r2, #255	@ 0xff
 800524c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005252:	b2da      	uxtb	r2, r3
 8005254:	2380      	movs	r3, #128	@ 0x80
 8005256:	045c      	lsls	r4, r3, #17
 8005258:	230a      	movs	r3, #10
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	8819      	ldrh	r1, [r3, #0]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	4b56      	ldr	r3, [pc, #344]	@ (80053bc <HAL_I2C_Mem_Read+0x260>)
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	0023      	movs	r3, r4
 8005266:	f000 fb6f 	bl	8005948 <I2C_TransferConfig>
 800526a:	e012      	b.n	8005292 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527a:	b2da      	uxtb	r2, r3
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	049c      	lsls	r4, r3, #18
 8005280:	230a      	movs	r3, #10
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	8819      	ldrh	r1, [r3, #0]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	4b4c      	ldr	r3, [pc, #304]	@ (80053bc <HAL_I2C_Mem_Read+0x260>)
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	0023      	movs	r3, r4
 800528e:	f000 fb5b 	bl	8005948 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	0013      	movs	r3, r2
 800529c:	2200      	movs	r2, #0
 800529e:	2104      	movs	r1, #4
 80052a0:	f000 f978 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 80052a4:	1e03      	subs	r3, r0, #0
 80052a6:	d001      	beq.n	80052ac <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e082      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d03a      	beq.n	800535e <HAL_I2C_Mem_Read+0x202>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d136      	bne.n	800535e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	0013      	movs	r3, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	2180      	movs	r1, #128	@ 0x80
 80052fe:	f000 f949 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 8005302:	1e03      	subs	r3, r0, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e053      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2bff      	cmp	r3, #255	@ 0xff
 8005312:	d911      	bls.n	8005338 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	22ff      	movs	r2, #255	@ 0xff
 8005318:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531e:	b2da      	uxtb	r2, r3
 8005320:	2380      	movs	r3, #128	@ 0x80
 8005322:	045c      	lsls	r4, r3, #17
 8005324:	230a      	movs	r3, #10
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	8819      	ldrh	r1, [r3, #0]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	2300      	movs	r3, #0
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	0023      	movs	r3, r4
 8005332:	f000 fb09 	bl	8005948 <I2C_TransferConfig>
 8005336:	e012      	b.n	800535e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005346:	b2da      	uxtb	r2, r3
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	049c      	lsls	r4, r3, #18
 800534c:	230a      	movs	r3, #10
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	8819      	ldrh	r1, [r3, #0]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	0023      	movs	r3, r4
 800535a:	f000 faf5 	bl	8005948 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d194      	bne.n	8005292 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	0018      	movs	r0, r3
 8005370:	f000 f9ae 	bl	80056d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005374:	1e03      	subs	r3, r0, #0
 8005376:	d001      	beq.n	800537c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e01a      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2220      	movs	r2, #32
 8005382:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	490c      	ldr	r1, [pc, #48]	@ (80053c0 <HAL_I2C_Mem_Read+0x264>)
 8005390:	400a      	ands	r2, r1
 8005392:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2241      	movs	r2, #65	@ 0x41
 8005398:	2120      	movs	r1, #32
 800539a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2242      	movs	r2, #66	@ 0x42
 80053a0:	2100      	movs	r1, #0
 80053a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2240      	movs	r2, #64	@ 0x40
 80053a8:	2100      	movs	r1, #0
 80053aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	0018      	movs	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b007      	add	sp, #28
 80053b8:	bd90      	pop	{r4, r7, pc}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	80002400 	.word	0x80002400
 80053c0:	fe00e800 	.word	0xfe00e800

080053c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80053c4:	b5b0      	push	{r4, r5, r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	000c      	movs	r4, r1
 80053ce:	0010      	movs	r0, r2
 80053d0:	0019      	movs	r1, r3
 80053d2:	250a      	movs	r5, #10
 80053d4:	197b      	adds	r3, r7, r5
 80053d6:	1c22      	adds	r2, r4, #0
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	2308      	movs	r3, #8
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	1c02      	adds	r2, r0, #0
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	1dbb      	adds	r3, r7, #6
 80053e4:	1c0a      	adds	r2, r1, #0
 80053e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053e8:	1dbb      	adds	r3, r7, #6
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	045c      	lsls	r4, r3, #17
 80053f2:	197b      	adds	r3, r7, r5
 80053f4:	8819      	ldrh	r1, [r3, #0]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	4b23      	ldr	r3, [pc, #140]	@ (8005488 <I2C_RequestMemoryWrite+0xc4>)
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	0023      	movs	r3, r4
 80053fe:	f000 faa3 	bl	8005948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005404:	6a39      	ldr	r1, [r7, #32]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 f91b 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 800540e:	1e03      	subs	r3, r0, #0
 8005410:	d001      	beq.n	8005416 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e033      	b.n	800547e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005416:	1dbb      	adds	r3, r7, #6
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800541e:	2308      	movs	r3, #8
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	629a      	str	r2, [r3, #40]	@ 0x28
 800542c:	e019      	b.n	8005462 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800542e:	2308      	movs	r3, #8
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	0a1b      	lsrs	r3, r3, #8
 8005436:	b29b      	uxth	r3, r3
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	6a39      	ldr	r1, [r7, #32]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	0018      	movs	r0, r3
 8005448:	f000 f8fc 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 800544c:	1e03      	subs	r3, r0, #0
 800544e:	d001      	beq.n	8005454 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e014      	b.n	800547e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005454:	2308      	movs	r3, #8
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	0013      	movs	r3, r2
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	@ 0x80
 8005470:	f000 f890 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d001      	beq.n	800547c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	0018      	movs	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	b004      	add	sp, #16
 8005484:	bdb0      	pop	{r4, r5, r7, pc}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	80002000 	.word	0x80002000

0800548c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800548c:	b5b0      	push	{r4, r5, r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	000c      	movs	r4, r1
 8005496:	0010      	movs	r0, r2
 8005498:	0019      	movs	r1, r3
 800549a:	250a      	movs	r5, #10
 800549c:	197b      	adds	r3, r7, r5
 800549e:	1c22      	adds	r2, r4, #0
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	2308      	movs	r3, #8
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	1c02      	adds	r2, r0, #0
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	1dbb      	adds	r3, r7, #6
 80054ac:	1c0a      	adds	r2, r1, #0
 80054ae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80054b0:	1dbb      	adds	r3, r7, #6
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	197b      	adds	r3, r7, r5
 80054b8:	8819      	ldrh	r1, [r3, #0]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	4b23      	ldr	r3, [pc, #140]	@ (800554c <I2C_RequestMemoryRead+0xc0>)
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	2300      	movs	r3, #0
 80054c2:	f000 fa41 	bl	8005948 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c8:	6a39      	ldr	r1, [r7, #32]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 f8b9 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 80054d2:	1e03      	subs	r3, r0, #0
 80054d4:	d001      	beq.n	80054da <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e033      	b.n	8005542 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054da:	1dbb      	adds	r3, r7, #6
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d107      	bne.n	80054f2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054e2:	2308      	movs	r3, #8
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80054f0:	e019      	b.n	8005526 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054f2:	2308      	movs	r3, #8
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005506:	6a39      	ldr	r1, [r7, #32]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	0018      	movs	r0, r3
 800550c:	f000 f89a 	bl	8005644 <I2C_WaitOnTXISFlagUntilTimeout>
 8005510:	1e03      	subs	r3, r0, #0
 8005512:	d001      	beq.n	8005518 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e014      	b.n	8005542 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005518:	2308      	movs	r3, #8
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005526:	6a3a      	ldr	r2, [r7, #32]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	0013      	movs	r3, r2
 8005530:	2200      	movs	r2, #0
 8005532:	2140      	movs	r1, #64	@ 0x40
 8005534:	f000 f82e 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 8005538:	1e03      	subs	r3, r0, #0
 800553a:	d001      	beq.n	8005540 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b004      	add	sp, #16
 8005548:	bdb0      	pop	{r4, r5, r7, pc}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	80002000 	.word	0x80002000

08005550 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2202      	movs	r2, #2
 8005560:	4013      	ands	r3, r2
 8005562:	2b02      	cmp	r3, #2
 8005564:	d103      	bne.n	800556e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2201      	movs	r2, #1
 8005576:	4013      	ands	r3, r2
 8005578:	2b01      	cmp	r3, #1
 800557a:	d007      	beq.n	800558c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2101      	movs	r1, #1
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]
  }
}
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b002      	add	sp, #8
 8005592:	bd80      	pop	{r7, pc}

08005594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	1dfb      	adds	r3, r7, #7
 80055a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a4:	e03a      	b.n	800561c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 f8d3 	bl	8005758 <I2C_IsErrorOccurred>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d001      	beq.n	80055ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e040      	b.n	800563c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	d02d      	beq.n	800561c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7fe fa38 	bl	8003a34 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d122      	bne.n	800561c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	425a      	negs	r2, r3
 80055e6:	4153      	adcs	r3, r2
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	001a      	movs	r2, r3
 80055ec:	1dfb      	adds	r3, r7, #7
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d113      	bne.n	800561c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f8:	2220      	movs	r2, #32
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2241      	movs	r2, #65	@ 0x41
 8005604:	2120      	movs	r1, #32
 8005606:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2242      	movs	r2, #66	@ 0x42
 800560c:	2100      	movs	r1, #0
 800560e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2240      	movs	r2, #64	@ 0x40
 8005614:	2100      	movs	r1, #0
 8005616:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e00f      	b.n	800563c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	425a      	negs	r2, r3
 800562c:	4153      	adcs	r3, r2
 800562e:	b2db      	uxtb	r3, r3
 8005630:	001a      	movs	r2, r3
 8005632:	1dfb      	adds	r3, r7, #7
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d0b5      	beq.n	80055a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b004      	add	sp, #16
 8005642:	bd80      	pop	{r7, pc}

08005644 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005650:	e032      	b.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 f87d 	bl	8005758 <I2C_IsErrorOccurred>
 800565e:	1e03      	subs	r3, r0, #0
 8005660:	d001      	beq.n	8005666 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e030      	b.n	80056c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	3301      	adds	r3, #1
 800566a:	d025      	beq.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566c:	f7fe f9e2 	bl	8003a34 <HAL_GetTick>
 8005670:	0002      	movs	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d302      	bcc.n	8005682 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d11a      	bne.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2202      	movs	r2, #2
 800568a:	4013      	ands	r3, r2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d013      	beq.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005694:	2220      	movs	r2, #32
 8005696:	431a      	orrs	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2241      	movs	r2, #65	@ 0x41
 80056a0:	2120      	movs	r1, #32
 80056a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2242      	movs	r2, #66	@ 0x42
 80056a8:	2100      	movs	r1, #0
 80056aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2240      	movs	r2, #64	@ 0x40
 80056b0:	2100      	movs	r1, #0
 80056b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e007      	b.n	80056c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2202      	movs	r2, #2
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d1c5      	bne.n	8005652 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b004      	add	sp, #16
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056dc:	e02f      	b.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f837 	bl	8005758 <I2C_IsErrorOccurred>
 80056ea:	1e03      	subs	r3, r0, #0
 80056ec:	d001      	beq.n	80056f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e02d      	b.n	800574e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fe f99f 	bl	8003a34 <HAL_GetTick>
 80056f6:	0002      	movs	r2, r0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11a      	bne.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	2220      	movs	r2, #32
 8005710:	4013      	ands	r3, r2
 8005712:	2b20      	cmp	r3, #32
 8005714:	d013      	beq.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	2220      	movs	r2, #32
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2241      	movs	r2, #65	@ 0x41
 8005726:	2120      	movs	r1, #32
 8005728:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2242      	movs	r2, #66	@ 0x42
 800572e:	2100      	movs	r1, #0
 8005730:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2240      	movs	r2, #64	@ 0x40
 8005736:	2100      	movs	r1, #0
 8005738:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e007      	b.n	800574e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2220      	movs	r2, #32
 8005746:	4013      	ands	r3, r2
 8005748:	2b20      	cmp	r3, #32
 800574a:	d1c8      	bne.n	80056de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	0018      	movs	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	@ 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2327      	movs	r3, #39	@ 0x27
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2210      	movs	r2, #16
 8005780:	4013      	ands	r3, r2
 8005782:	d100      	bne.n	8005786 <I2C_IsErrorOccurred+0x2e>
 8005784:	e079      	b.n	800587a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2210      	movs	r2, #16
 800578c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800578e:	e057      	b.n	8005840 <I2C_IsErrorOccurred+0xe8>
 8005790:	2227      	movs	r2, #39	@ 0x27
 8005792:	18bb      	adds	r3, r7, r2
 8005794:	18ba      	adds	r2, r7, r2
 8005796:	7812      	ldrb	r2, [r2, #0]
 8005798:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3301      	adds	r3, #1
 800579e:	d04f      	beq.n	8005840 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057a0:	f7fe f948 	bl	8003a34 <HAL_GetTick>
 80057a4:	0002      	movs	r2, r0
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <I2C_IsErrorOccurred+0x5e>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d144      	bne.n	8005840 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	2380      	movs	r3, #128	@ 0x80
 80057be:	01db      	lsls	r3, r3, #7
 80057c0:	4013      	ands	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057c4:	2013      	movs	r0, #19
 80057c6:	183b      	adds	r3, r7, r0
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	2142      	movs	r1, #66	@ 0x42
 80057cc:	5c52      	ldrb	r2, [r2, r1]
 80057ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	2380      	movs	r3, #128	@ 0x80
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	401a      	ands	r2, r3
 80057dc:	2380      	movs	r3, #128	@ 0x80
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d126      	bne.n	8005832 <I2C_IsErrorOccurred+0xda>
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	2380      	movs	r3, #128	@ 0x80
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d021      	beq.n	8005832 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80057ee:	183b      	adds	r3, r7, r0
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d01d      	beq.n	8005832 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2180      	movs	r1, #128	@ 0x80
 8005802:	01c9      	lsls	r1, r1, #7
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005808:	f7fe f914 	bl	8003a34 <HAL_GetTick>
 800580c:	0003      	movs	r3, r0
 800580e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005810:	e00f      	b.n	8005832 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005812:	f7fe f90f 	bl	8003a34 <HAL_GetTick>
 8005816:	0002      	movs	r2, r0
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b19      	cmp	r3, #25
 800581e:	d908      	bls.n	8005832 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	2220      	movs	r2, #32
 8005824:	4313      	orrs	r3, r2
 8005826:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005828:	2327      	movs	r3, #39	@ 0x27
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]

              break;
 8005830:	e006      	b.n	8005840 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2220      	movs	r2, #32
 800583a:	4013      	ands	r3, r2
 800583c:	2b20      	cmp	r3, #32
 800583e:	d1e8      	bne.n	8005812 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	2220      	movs	r2, #32
 8005848:	4013      	ands	r3, r2
 800584a:	2b20      	cmp	r3, #32
 800584c:	d004      	beq.n	8005858 <I2C_IsErrorOccurred+0x100>
 800584e:	2327      	movs	r3, #39	@ 0x27
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d09b      	beq.n	8005790 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005858:	2327      	movs	r3, #39	@ 0x27
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2220      	movs	r2, #32
 8005868:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2204      	movs	r2, #4
 800586e:	4313      	orrs	r3, r2
 8005870:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005872:	2327      	movs	r3, #39	@ 0x27
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4013      	ands	r3, r2
 800588a:	d00c      	beq.n	80058a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2201      	movs	r2, #1
 8005890:	4313      	orrs	r3, r2
 8005892:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2280      	movs	r2, #128	@ 0x80
 800589a:	0052      	lsls	r2, r2, #1
 800589c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800589e:	2327      	movs	r3, #39	@ 0x27
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4013      	ands	r3, r2
 80058ae:	d00c      	beq.n	80058ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2208      	movs	r2, #8
 80058b4:	4313      	orrs	r3, r2
 80058b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2280      	movs	r2, #128	@ 0x80
 80058be:	00d2      	lsls	r2, r2, #3
 80058c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058c2:	2327      	movs	r3, #39	@ 0x27
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4013      	ands	r3, r2
 80058d2:	d00c      	beq.n	80058ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2202      	movs	r2, #2
 80058d8:	4313      	orrs	r3, r2
 80058da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2280      	movs	r2, #128	@ 0x80
 80058e2:	0092      	lsls	r2, r2, #2
 80058e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058e6:	2327      	movs	r3, #39	@ 0x27
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80058ee:	2327      	movs	r3, #39	@ 0x27
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01d      	beq.n	8005934 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7ff fe28 	bl	8005550 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	490e      	ldr	r1, [pc, #56]	@ (8005944 <I2C_IsErrorOccurred+0x1ec>)
 800590c:	400a      	ands	r2, r1
 800590e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	431a      	orrs	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2241      	movs	r2, #65	@ 0x41
 8005920:	2120      	movs	r1, #32
 8005922:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2242      	movs	r2, #66	@ 0x42
 8005928:	2100      	movs	r1, #0
 800592a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2240      	movs	r2, #64	@ 0x40
 8005930:	2100      	movs	r1, #0
 8005932:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005934:	2327      	movs	r3, #39	@ 0x27
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	781b      	ldrb	r3, [r3, #0]
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b00a      	add	sp, #40	@ 0x28
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	fe00e800 	.word	0xfe00e800

08005948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	0008      	movs	r0, r1
 8005952:	0011      	movs	r1, r2
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	240a      	movs	r4, #10
 8005958:	193b      	adds	r3, r7, r4
 800595a:	1c02      	adds	r2, r0, #0
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	2009      	movs	r0, #9
 8005960:	183b      	adds	r3, r7, r0
 8005962:	1c0a      	adds	r2, r1, #0
 8005964:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005966:	193b      	adds	r3, r7, r4
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	059b      	lsls	r3, r3, #22
 800596c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800596e:	183b      	adds	r3, r7, r0
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	0419      	lsls	r1, r3, #16
 8005974:	23ff      	movs	r3, #255	@ 0xff
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800597a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	4313      	orrs	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005992:	0d51      	lsrs	r1, r2, #21
 8005994:	2280      	movs	r2, #128	@ 0x80
 8005996:	00d2      	lsls	r2, r2, #3
 8005998:	400a      	ands	r2, r1
 800599a:	4907      	ldr	r1, [pc, #28]	@ (80059b8 <I2C_TransferConfig+0x70>)
 800599c:	430a      	orrs	r2, r1
 800599e:	43d2      	mvns	r2, r2
 80059a0:	401a      	ands	r2, r3
 80059a2:	0011      	movs	r1, r2
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	46bd      	mov	sp, r7
 80059b2:	b007      	add	sp, #28
 80059b4:	bd90      	pop	{r4, r7, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	03ff63ff 	.word	0x03ff63ff

080059bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2241      	movs	r2, #65	@ 0x41
 80059ca:	5c9b      	ldrb	r3, [r3, r2]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d138      	bne.n	8005a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2240      	movs	r2, #64	@ 0x40
 80059d6:	5c9b      	ldrb	r3, [r3, r2]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059dc:	2302      	movs	r3, #2
 80059de:	e032      	b.n	8005a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	2101      	movs	r1, #1
 80059e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2241      	movs	r2, #65	@ 0x41
 80059ec:	2124      	movs	r1, #36	@ 0x24
 80059ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2101      	movs	r1, #1
 80059fc:	438a      	bics	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4911      	ldr	r1, [pc, #68]	@ (8005a50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6819      	ldr	r1, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2241      	movs	r2, #65	@ 0x41
 8005a34:	2120      	movs	r1, #32
 8005a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2240      	movs	r2, #64	@ 0x40
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	0018      	movs	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b002      	add	sp, #8
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	ffffefff 	.word	0xffffefff

08005a54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2241      	movs	r2, #65	@ 0x41
 8005a62:	5c9b      	ldrb	r3, [r3, r2]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d139      	bne.n	8005ade <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2240      	movs	r2, #64	@ 0x40
 8005a6e:	5c9b      	ldrb	r3, [r3, r2]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e033      	b.n	8005ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2240      	movs	r2, #64	@ 0x40
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2241      	movs	r2, #65	@ 0x41
 8005a84:	2124      	movs	r1, #36	@ 0x24
 8005a86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2101      	movs	r1, #1
 8005a94:	438a      	bics	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a11      	ldr	r2, [pc, #68]	@ (8005ae8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2241      	movs	r2, #65	@ 0x41
 8005ace:	2120      	movs	r1, #32
 8005ad0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2240      	movs	r2, #64	@ 0x40
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	fffff0ff 	.word	0xfffff0ff

08005aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a19      	ldr	r2, [pc, #100]	@ (8005b60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	0019      	movs	r1, r3
 8005afe:	4b17      	ldr	r3, [pc, #92]	@ (8005b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	2380      	movs	r3, #128	@ 0x80
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d11f      	bne.n	8005b50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005b10:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	0013      	movs	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	189b      	adds	r3, r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4912      	ldr	r1, [pc, #72]	@ (8005b68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005b1e:	0018      	movs	r0, r3
 8005b20:	f7fa faee 	bl	8000100 <__udivsi3>
 8005b24:	0003      	movs	r3, r0
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b2a:	e008      	b.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e001      	b.n	8005b3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e009      	b.n	8005b52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b3e:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	2380      	movs	r3, #128	@ 0x80
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	401a      	ands	r2, r3
 8005b48:	2380      	movs	r3, #128	@ 0x80
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d0ed      	beq.n	8005b2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b004      	add	sp, #16
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	40007000 	.word	0x40007000
 8005b60:	fffff9ff 	.word	0xfffff9ff
 8005b64:	20000000 	.word	0x20000000
 8005b68:	000f4240 	.word	0x000f4240

08005b6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005b70:	4b03      	ldr	r3, [pc, #12]	@ (8005b80 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	23e0      	movs	r3, #224	@ 0xe0
 8005b76:	01db      	lsls	r3, r3, #7
 8005b78:	4013      	ands	r3, r2
}
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000

08005b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e2f3      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x1e>
 8005ba0:	e07c      	b.n	8005c9c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ba2:	4bc3      	ldr	r3, [pc, #780]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2238      	movs	r2, #56	@ 0x38
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bac:	4bc0      	ldr	r3, [pc, #768]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d102      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x3e>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d002      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d10b      	bne.n	8005be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc8:	4bb9      	ldr	r3, [pc, #740]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	2380      	movs	r3, #128	@ 0x80
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d062      	beq.n	8005c9a <HAL_RCC_OscConfig+0x116>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d15e      	bne.n	8005c9a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e2ce      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	2380      	movs	r3, #128	@ 0x80
 8005be6:	025b      	lsls	r3, r3, #9
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x78>
 8005bec:	4bb0      	ldr	r3, [pc, #704]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4baf      	ldr	r3, [pc, #700]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005bf2:	2180      	movs	r1, #128	@ 0x80
 8005bf4:	0249      	lsls	r1, r1, #9
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e020      	b.n	8005c3e <HAL_RCC_OscConfig+0xba>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	23a0      	movs	r3, #160	@ 0xa0
 8005c02:	02db      	lsls	r3, r3, #11
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d10e      	bne.n	8005c26 <HAL_RCC_OscConfig+0xa2>
 8005c08:	4ba9      	ldr	r3, [pc, #676]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4ba8      	ldr	r3, [pc, #672]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c0e:	2180      	movs	r1, #128	@ 0x80
 8005c10:	02c9      	lsls	r1, r1, #11
 8005c12:	430a      	orrs	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	4ba6      	ldr	r3, [pc, #664]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4ba5      	ldr	r3, [pc, #660]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c1c:	2180      	movs	r1, #128	@ 0x80
 8005c1e:	0249      	lsls	r1, r1, #9
 8005c20:	430a      	orrs	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	e00b      	b.n	8005c3e <HAL_RCC_OscConfig+0xba>
 8005c26:	4ba2      	ldr	r3, [pc, #648]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4ba1      	ldr	r3, [pc, #644]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c2c:	49a1      	ldr	r1, [pc, #644]	@ (8005eb4 <HAL_RCC_OscConfig+0x330>)
 8005c2e:	400a      	ands	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	4b9f      	ldr	r3, [pc, #636]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b9e      	ldr	r3, [pc, #632]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c38:	499f      	ldr	r1, [pc, #636]	@ (8005eb8 <HAL_RCC_OscConfig+0x334>)
 8005c3a:	400a      	ands	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d014      	beq.n	8005c70 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fd fef5 	bl	8003a34 <HAL_GetTick>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c50:	f7fd fef0 	bl	8003a34 <HAL_GetTick>
 8005c54:	0002      	movs	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b64      	cmp	r3, #100	@ 0x64
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e28d      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c62:	4b93      	ldr	r3, [pc, #588]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	2380      	movs	r3, #128	@ 0x80
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0xcc>
 8005c6e:	e015      	b.n	8005c9c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c70:	f7fd fee0 	bl	8003a34 <HAL_GetTick>
 8005c74:	0003      	movs	r3, r0
 8005c76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c7a:	f7fd fedb 	bl	8003a34 <HAL_GetTick>
 8005c7e:	0002      	movs	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b64      	cmp	r3, #100	@ 0x64
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e278      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c8c:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	2380      	movs	r3, #128	@ 0x80
 8005c92:	029b      	lsls	r3, r3, #10
 8005c94:	4013      	ands	r3, r2
 8005c96:	d1f0      	bne.n	8005c7a <HAL_RCC_OscConfig+0xf6>
 8005c98:	e000      	b.n	8005c9c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d100      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x124>
 8005ca6:	e099      	b.n	8005ddc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca8:	4b81      	ldr	r3, [pc, #516]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2238      	movs	r2, #56	@ 0x38
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	4013      	ands	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d102      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x144>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d002      	beq.n	8005cce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d135      	bne.n	8005d3a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cce:	4b78      	ldr	r3, [pc, #480]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	2380      	movs	r3, #128	@ 0x80
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d005      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x162>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e24b      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce6:	4b72      	ldr	r3, [pc, #456]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4a74      	ldr	r2, [pc, #464]	@ (8005ebc <HAL_RCC_OscConfig+0x338>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	0019      	movs	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	021a      	lsls	r2, r3, #8
 8005cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d112      	bne.n	8005d28 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d02:	4b6b      	ldr	r3, [pc, #428]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec0 <HAL_RCC_OscConfig+0x33c>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	4b67      	ldr	r3, [pc, #412]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d12:	430a      	orrs	r2, r1
 8005d14:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005d16:	4b66      	ldr	r3, [pc, #408]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	0adb      	lsrs	r3, r3, #11
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	4013      	ands	r3, r2
 8005d20:	4a68      	ldr	r2, [pc, #416]	@ (8005ec4 <HAL_RCC_OscConfig+0x340>)
 8005d22:	40da      	lsrs	r2, r3
 8005d24:	4b68      	ldr	r3, [pc, #416]	@ (8005ec8 <HAL_RCC_OscConfig+0x344>)
 8005d26:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d28:	4b68      	ldr	r3, [pc, #416]	@ (8005ecc <HAL_RCC_OscConfig+0x348>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f7fd fe25 	bl	800397c <HAL_InitTick>
 8005d32:	1e03      	subs	r3, r0, #0
 8005d34:	d051      	beq.n	8005dda <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e221      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d030      	beq.n	8005da4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005d42:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec0 <HAL_RCC_OscConfig+0x33c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	4b57      	ldr	r3, [pc, #348]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d52:	430a      	orrs	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005d56:	4b56      	ldr	r3, [pc, #344]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b55      	ldr	r3, [pc, #340]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d5c:	2180      	movs	r1, #128	@ 0x80
 8005d5e:	0049      	lsls	r1, r1, #1
 8005d60:	430a      	orrs	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fd fe66 	bl	8003a34 <HAL_GetTick>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d6e:	f7fd fe61 	bl	8003a34 <HAL_GetTick>
 8005d72:	0002      	movs	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e1fe      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d80:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8c:	4b48      	ldr	r3, [pc, #288]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4a4a      	ldr	r2, [pc, #296]	@ (8005ebc <HAL_RCC_OscConfig+0x338>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	0019      	movs	r1, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	021a      	lsls	r2, r3, #8
 8005d9c:	4b44      	ldr	r3, [pc, #272]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	e01b      	b.n	8005ddc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005da4:	4b42      	ldr	r3, [pc, #264]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b41      	ldr	r3, [pc, #260]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005daa:	4949      	ldr	r1, [pc, #292]	@ (8005ed0 <HAL_RCC_OscConfig+0x34c>)
 8005dac:	400a      	ands	r2, r1
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fd fe40 	bl	8003a34 <HAL_GetTick>
 8005db4:	0003      	movs	r3, r0
 8005db6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005db8:	e008      	b.n	8005dcc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dba:	f7fd fe3b 	bl	8003a34 <HAL_GetTick>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e1d8      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dcc:	4b38      	ldr	r3, [pc, #224]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d1f0      	bne.n	8005dba <HAL_RCC_OscConfig+0x236>
 8005dd8:	e000      	b.n	8005ddc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dda:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2208      	movs	r2, #8
 8005de2:	4013      	ands	r3, r2
 8005de4:	d047      	beq.n	8005e76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005de6:	4b32      	ldr	r3, [pc, #200]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2238      	movs	r2, #56	@ 0x38
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b18      	cmp	r3, #24
 8005df0:	d10a      	bne.n	8005e08 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005df2:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df6:	2202      	movs	r2, #2
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d03c      	beq.n	8005e76 <HAL_RCC_OscConfig+0x2f2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d138      	bne.n	8005e76 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e1ba      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d019      	beq.n	8005e44 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005e10:	4b27      	ldr	r3, [pc, #156]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e14:	4b26      	ldr	r3, [pc, #152]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e16:	2101      	movs	r1, #1
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fd fe0a 	bl	8003a34 <HAL_GetTick>
 8005e20:	0003      	movs	r3, r0
 8005e22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e26:	f7fd fe05 	bl	8003a34 <HAL_GetTick>
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e1a2      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e38:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d0f1      	beq.n	8005e26 <HAL_RCC_OscConfig+0x2a2>
 8005e42:	e018      	b.n	8005e76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005e44:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e48:	4b19      	ldr	r3, [pc, #100]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	438a      	bics	r2, r1
 8005e4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd fdf0 	bl	8003a34 <HAL_GetTick>
 8005e54:	0003      	movs	r3, r0
 8005e56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5a:	f7fd fdeb 	bl	8003a34 <HAL_GetTick>
 8005e5e:	0002      	movs	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e188      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e6c:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e70:	2202      	movs	r2, #2
 8005e72:	4013      	ands	r3, r2
 8005e74:	d1f1      	bne.n	8005e5a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <HAL_RCC_OscConfig+0x2fe>
 8005e80:	e0c6      	b.n	8006010 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e82:	231f      	movs	r3, #31
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005e8a:	4b09      	ldr	r3, [pc, #36]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2238      	movs	r2, #56	@ 0x38
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d11e      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005e96:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <HAL_RCC_OscConfig+0x32c>)
 8005e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d100      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x31e>
 8005ea0:	e0b6      	b.n	8006010 <HAL_RCC_OscConfig+0x48c>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d000      	beq.n	8005eac <HAL_RCC_OscConfig+0x328>
 8005eaa:	e0b1      	b.n	8006010 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e166      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	fffeffff 	.word	0xfffeffff
 8005eb8:	fffbffff 	.word	0xfffbffff
 8005ebc:	ffff80ff 	.word	0xffff80ff
 8005ec0:	ffffc7ff 	.word	0xffffc7ff
 8005ec4:	00f42400 	.word	0x00f42400
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	20000004 	.word	0x20000004
 8005ed0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ed4:	4bac      	ldr	r3, [pc, #688]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ed8:	2380      	movs	r3, #128	@ 0x80
 8005eda:	055b      	lsls	r3, r3, #21
 8005edc:	4013      	ands	r3, r2
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x360>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x362>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d011      	beq.n	8005f0e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005eea:	4ba7      	ldr	r3, [pc, #668]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eee:	4ba6      	ldr	r3, [pc, #664]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005ef0:	2180      	movs	r1, #128	@ 0x80
 8005ef2:	0549      	lsls	r1, r1, #21
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ef8:	4ba3      	ldr	r3, [pc, #652]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005efa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005efc:	2380      	movs	r3, #128	@ 0x80
 8005efe:	055b      	lsls	r3, r3, #21
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005f06:	231f      	movs	r3, #31
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f0e:	4b9f      	ldr	r3, [pc, #636]	@ (800618c <HAL_RCC_OscConfig+0x608>)
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	2380      	movs	r3, #128	@ 0x80
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	4013      	ands	r3, r2
 8005f18:	d11a      	bne.n	8005f50 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800618c <HAL_RCC_OscConfig+0x608>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b9b      	ldr	r3, [pc, #620]	@ (800618c <HAL_RCC_OscConfig+0x608>)
 8005f20:	2180      	movs	r1, #128	@ 0x80
 8005f22:	0049      	lsls	r1, r1, #1
 8005f24:	430a      	orrs	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005f28:	f7fd fd84 	bl	8003a34 <HAL_GetTick>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f32:	f7fd fd7f 	bl	8003a34 <HAL_GetTick>
 8005f36:	0002      	movs	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e11c      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f44:	4b91      	ldr	r3, [pc, #580]	@ (800618c <HAL_RCC_OscConfig+0x608>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	2380      	movs	r3, #128	@ 0x80
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d106      	bne.n	8005f66 <HAL_RCC_OscConfig+0x3e2>
 8005f58:	4b8b      	ldr	r3, [pc, #556]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f5e:	2101      	movs	r1, #1
 8005f60:	430a      	orrs	r2, r1
 8005f62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f64:	e01c      	b.n	8005fa0 <HAL_RCC_OscConfig+0x41c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCC_OscConfig+0x404>
 8005f6e:	4b86      	ldr	r3, [pc, #536]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f72:	4b85      	ldr	r3, [pc, #532]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f74:	2104      	movs	r1, #4
 8005f76:	430a      	orrs	r2, r1
 8005f78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f7a:	4b83      	ldr	r3, [pc, #524]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f7e:	4b82      	ldr	r3, [pc, #520]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f80:	2101      	movs	r1, #1
 8005f82:	430a      	orrs	r2, r1
 8005f84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f86:	e00b      	b.n	8005fa0 <HAL_RCC_OscConfig+0x41c>
 8005f88:	4b7f      	ldr	r3, [pc, #508]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f8e:	2101      	movs	r1, #1
 8005f90:	438a      	bics	r2, r1
 8005f92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f94:	4b7c      	ldr	r3, [pc, #496]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f98:	4b7b      	ldr	r3, [pc, #492]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005f9a:	2104      	movs	r1, #4
 8005f9c:	438a      	bics	r2, r1
 8005f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d014      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa8:	f7fd fd44 	bl	8003a34 <HAL_GetTick>
 8005fac:	0003      	movs	r3, r0
 8005fae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb0:	e009      	b.n	8005fc6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb2:	f7fd fd3f 	bl	8003a34 <HAL_GetTick>
 8005fb6:	0002      	movs	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	4a74      	ldr	r2, [pc, #464]	@ (8006190 <HAL_RCC_OscConfig+0x60c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e0db      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc6:	4b70      	ldr	r3, [pc, #448]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fca:	2202      	movs	r2, #2
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d0f0      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x42e>
 8005fd0:	e013      	b.n	8005ffa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fd fd2f 	bl	8003a34 <HAL_GetTick>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fda:	e009      	b.n	8005ff0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fdc:	f7fd fd2a 	bl	8003a34 <HAL_GetTick>
 8005fe0:	0002      	movs	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	4a6a      	ldr	r2, [pc, #424]	@ (8006190 <HAL_RCC_OscConfig+0x60c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e0c6      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ff0:	4b65      	ldr	r3, [pc, #404]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005ffa:	231f      	movs	r3, #31
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d105      	bne.n	8006010 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006004:	4b60      	ldr	r3, [pc, #384]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006008:	4b5f      	ldr	r3, [pc, #380]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 800600a:	4962      	ldr	r1, [pc, #392]	@ (8006194 <HAL_RCC_OscConfig+0x610>)
 800600c:	400a      	ands	r2, r1
 800600e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d100      	bne.n	800601a <HAL_RCC_OscConfig+0x496>
 8006018:	e0b0      	b.n	800617c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800601a:	4b5b      	ldr	r3, [pc, #364]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2238      	movs	r2, #56	@ 0x38
 8006020:	4013      	ands	r3, r2
 8006022:	2b10      	cmp	r3, #16
 8006024:	d100      	bne.n	8006028 <HAL_RCC_OscConfig+0x4a4>
 8006026:	e078      	b.n	800611a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d153      	bne.n	80060d8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006030:	4b55      	ldr	r3, [pc, #340]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b54      	ldr	r3, [pc, #336]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006036:	4958      	ldr	r1, [pc, #352]	@ (8006198 <HAL_RCC_OscConfig+0x614>)
 8006038:	400a      	ands	r2, r1
 800603a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fd fcfa 	bl	8003a34 <HAL_GetTick>
 8006040:	0003      	movs	r3, r0
 8006042:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006046:	f7fd fcf5 	bl	8003a34 <HAL_GetTick>
 800604a:	0002      	movs	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e092      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006058:	4b4b      	ldr	r3, [pc, #300]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	2380      	movs	r3, #128	@ 0x80
 800605e:	049b      	lsls	r3, r3, #18
 8006060:	4013      	ands	r3, r2
 8006062:	d1f0      	bne.n	8006046 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006064:	4b48      	ldr	r3, [pc, #288]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a4c      	ldr	r2, [pc, #304]	@ (800619c <HAL_RCC_OscConfig+0x618>)
 800606a:	4013      	ands	r3, r2
 800606c:	0019      	movs	r1, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	431a      	orrs	r2, r3
 800608c:	4b3e      	ldr	r3, [pc, #248]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 800608e:	430a      	orrs	r2, r1
 8006090:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006092:	4b3d      	ldr	r3, [pc, #244]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4b3c      	ldr	r3, [pc, #240]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006098:	2180      	movs	r1, #128	@ 0x80
 800609a:	0449      	lsls	r1, r1, #17
 800609c:	430a      	orrs	r2, r1
 800609e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80060a0:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	4b38      	ldr	r3, [pc, #224]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 80060a6:	2180      	movs	r1, #128	@ 0x80
 80060a8:	0549      	lsls	r1, r1, #21
 80060aa:	430a      	orrs	r2, r1
 80060ac:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ae:	f7fd fcc1 	bl	8003a34 <HAL_GetTick>
 80060b2:	0003      	movs	r3, r0
 80060b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fd fcbc 	bl	8003a34 <HAL_GetTick>
 80060bc:	0002      	movs	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e059      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	2380      	movs	r3, #128	@ 0x80
 80060d0:	049b      	lsls	r3, r3, #18
 80060d2:	4013      	ands	r3, r2
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x534>
 80060d6:	e051      	b.n	800617c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 80060de:	492e      	ldr	r1, [pc, #184]	@ (8006198 <HAL_RCC_OscConfig+0x614>)
 80060e0:	400a      	ands	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e4:	f7fd fca6 	bl	8003a34 <HAL_GetTick>
 80060e8:	0003      	movs	r3, r0
 80060ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ec:	e008      	b.n	8006100 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ee:	f7fd fca1 	bl	8003a34 <HAL_GetTick>
 80060f2:	0002      	movs	r2, r0
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e03e      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006100:	4b21      	ldr	r3, [pc, #132]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	2380      	movs	r3, #128	@ 0x80
 8006106:	049b      	lsls	r3, r3, #18
 8006108:	4013      	ands	r3, r2
 800610a:	d1f0      	bne.n	80060ee <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800610c:	4b1e      	ldr	r3, [pc, #120]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	4b1d      	ldr	r3, [pc, #116]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006112:	4923      	ldr	r1, [pc, #140]	@ (80061a0 <HAL_RCC_OscConfig+0x61c>)
 8006114:	400a      	ands	r2, r1
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	e030      	b.n	800617c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e02b      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006126:	4b18      	ldr	r3, [pc, #96]	@ (8006188 <HAL_RCC_OscConfig+0x604>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2203      	movs	r2, #3
 8006130:	401a      	ands	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	429a      	cmp	r2, r3
 8006138:	d11e      	bne.n	8006178 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2270      	movs	r2, #112	@ 0x70
 800613e:	401a      	ands	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006144:	429a      	cmp	r2, r3
 8006146:	d117      	bne.n	8006178 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	23fe      	movs	r3, #254	@ 0xfe
 800614c:	01db      	lsls	r3, r3, #7
 800614e:	401a      	ands	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006156:	429a      	cmp	r2, r3
 8006158:	d10e      	bne.n	8006178 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	23f8      	movs	r3, #248	@ 0xf8
 800615e:	039b      	lsls	r3, r3, #14
 8006160:	401a      	ands	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006166:	429a      	cmp	r2, r3
 8006168:	d106      	bne.n	8006178 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	0f5b      	lsrs	r3, r3, #29
 800616e:	075a      	lsls	r2, r3, #29
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	0018      	movs	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	b008      	add	sp, #32
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			@ (mov r8, r8)
 8006188:	40021000 	.word	0x40021000
 800618c:	40007000 	.word	0x40007000
 8006190:	00001388 	.word	0x00001388
 8006194:	efffffff 	.word	0xefffffff
 8006198:	feffffff 	.word	0xfeffffff
 800619c:	1fc1808c 	.word	0x1fc1808c
 80061a0:	effefffc 	.word	0xeffefffc

080061a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0e9      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061b8:	4b76      	ldr	r3, [pc, #472]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2207      	movs	r2, #7
 80061be:	4013      	ands	r3, r2
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d91e      	bls.n	8006204 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c6:	4b73      	ldr	r3, [pc, #460]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2207      	movs	r2, #7
 80061cc:	4393      	bics	r3, r2
 80061ce:	0019      	movs	r1, r3
 80061d0:	4b70      	ldr	r3, [pc, #448]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061d8:	f7fd fc2c 	bl	8003a34 <HAL_GetTick>
 80061dc:	0003      	movs	r3, r0
 80061de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061e0:	e009      	b.n	80061f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e2:	f7fd fc27 	bl	8003a34 <HAL_GetTick>
 80061e6:	0002      	movs	r2, r0
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	4a6a      	ldr	r2, [pc, #424]	@ (8006398 <HAL_RCC_ClockConfig+0x1f4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e0ca      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061f6:	4b67      	ldr	r3, [pc, #412]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2207      	movs	r2, #7
 80061fc:	4013      	ands	r3, r2
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d1ee      	bne.n	80061e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2202      	movs	r2, #2
 800620a:	4013      	ands	r3, r2
 800620c:	d015      	beq.n	800623a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2204      	movs	r2, #4
 8006214:	4013      	ands	r3, r2
 8006216:	d006      	beq.n	8006226 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006218:	4b60      	ldr	r3, [pc, #384]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	4b5f      	ldr	r3, [pc, #380]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 800621e:	21e0      	movs	r1, #224	@ 0xe0
 8006220:	01c9      	lsls	r1, r1, #7
 8006222:	430a      	orrs	r2, r1
 8006224:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006226:	4b5d      	ldr	r3, [pc, #372]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	4a5d      	ldr	r2, [pc, #372]	@ (80063a0 <HAL_RCC_ClockConfig+0x1fc>)
 800622c:	4013      	ands	r3, r2
 800622e:	0019      	movs	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	4b59      	ldr	r3, [pc, #356]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 8006236:	430a      	orrs	r2, r1
 8006238:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2201      	movs	r2, #1
 8006240:	4013      	ands	r3, r2
 8006242:	d057      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d107      	bne.n	800625c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800624c:	4b53      	ldr	r3, [pc, #332]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	2380      	movs	r3, #128	@ 0x80
 8006252:	029b      	lsls	r3, r3, #10
 8006254:	4013      	ands	r3, r2
 8006256:	d12b      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e097      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d107      	bne.n	8006274 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006264:	4b4d      	ldr	r3, [pc, #308]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	049b      	lsls	r3, r3, #18
 800626c:	4013      	ands	r3, r2
 800626e:	d11f      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e08b      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800627c:	4b47      	ldr	r3, [pc, #284]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4013      	ands	r3, r2
 8006286:	d113      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e07f      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b03      	cmp	r3, #3
 8006292:	d106      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006294:	4b41      	ldr	r3, [pc, #260]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 8006296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006298:	2202      	movs	r2, #2
 800629a:	4013      	ands	r3, r2
 800629c:	d108      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e074      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a2:	4b3e      	ldr	r3, [pc, #248]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 80062a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a6:	2202      	movs	r2, #2
 80062a8:	4013      	ands	r3, r2
 80062aa:	d101      	bne.n	80062b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e06d      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062b0:	4b3a      	ldr	r3, [pc, #232]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2207      	movs	r2, #7
 80062b6:	4393      	bics	r3, r2
 80062b8:	0019      	movs	r1, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	4b37      	ldr	r3, [pc, #220]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 80062c0:	430a      	orrs	r2, r1
 80062c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c4:	f7fd fbb6 	bl	8003a34 <HAL_GetTick>
 80062c8:	0003      	movs	r3, r0
 80062ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062cc:	e009      	b.n	80062e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ce:	f7fd fbb1 	bl	8003a34 <HAL_GetTick>
 80062d2:	0002      	movs	r2, r0
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006398 <HAL_RCC_ClockConfig+0x1f4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e054      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	4b2e      	ldr	r3, [pc, #184]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2238      	movs	r2, #56	@ 0x38
 80062e8:	401a      	ands	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d1ec      	bne.n	80062ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062f4:	4b27      	ldr	r3, [pc, #156]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2207      	movs	r2, #7
 80062fa:	4013      	ands	r3, r2
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d21e      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006302:	4b24      	ldr	r3, [pc, #144]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2207      	movs	r2, #7
 8006308:	4393      	bics	r3, r2
 800630a:	0019      	movs	r1, r3
 800630c:	4b21      	ldr	r3, [pc, #132]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006314:	f7fd fb8e 	bl	8003a34 <HAL_GetTick>
 8006318:	0003      	movs	r3, r0
 800631a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800631c:	e009      	b.n	8006332 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631e:	f7fd fb89 	bl	8003a34 <HAL_GetTick>
 8006322:	0002      	movs	r2, r0
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	4a1b      	ldr	r2, [pc, #108]	@ (8006398 <HAL_RCC_ClockConfig+0x1f4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e02c      	b.n	800638c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006332:	4b18      	ldr	r3, [pc, #96]	@ (8006394 <HAL_RCC_ClockConfig+0x1f0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2207      	movs	r2, #7
 8006338:	4013      	ands	r3, r2
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d1ee      	bne.n	800631e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2204      	movs	r2, #4
 8006346:	4013      	ands	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800634a:	4b14      	ldr	r3, [pc, #80]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	4a15      	ldr	r2, [pc, #84]	@ (80063a4 <HAL_RCC_ClockConfig+0x200>)
 8006350:	4013      	ands	r3, r2
 8006352:	0019      	movs	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	4b10      	ldr	r3, [pc, #64]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800635e:	f000 f829 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8006362:	0001      	movs	r1, r0
 8006364:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <HAL_RCC_ClockConfig+0x1f8>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	220f      	movs	r2, #15
 800636c:	401a      	ands	r2, r3
 800636e:	4b0e      	ldr	r3, [pc, #56]	@ (80063a8 <HAL_RCC_ClockConfig+0x204>)
 8006370:	0092      	lsls	r2, r2, #2
 8006372:	58d3      	ldr	r3, [r2, r3]
 8006374:	221f      	movs	r2, #31
 8006376:	4013      	ands	r3, r2
 8006378:	000a      	movs	r2, r1
 800637a:	40da      	lsrs	r2, r3
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <HAL_RCC_ClockConfig+0x208>)
 800637e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006380:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <HAL_RCC_ClockConfig+0x20c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	0018      	movs	r0, r3
 8006386:	f7fd faf9 	bl	800397c <HAL_InitTick>
 800638a:	0003      	movs	r3, r0
}
 800638c:	0018      	movs	r0, r3
 800638e:	46bd      	mov	sp, r7
 8006390:	b004      	add	sp, #16
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40022000 	.word	0x40022000
 8006398:	00001388 	.word	0x00001388
 800639c:	40021000 	.word	0x40021000
 80063a0:	fffff0ff 	.word	0xfffff0ff
 80063a4:	ffff8fff 	.word	0xffff8fff
 80063a8:	08007e28 	.word	0x08007e28
 80063ac:	20000000 	.word	0x20000000
 80063b0:	20000004 	.word	0x20000004

080063b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063ba:	4b3c      	ldr	r3, [pc, #240]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2238      	movs	r2, #56	@ 0x38
 80063c0:	4013      	ands	r3, r2
 80063c2:	d10f      	bne.n	80063e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80063c4:	4b39      	ldr	r3, [pc, #228]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0adb      	lsrs	r3, r3, #11
 80063ca:	2207      	movs	r2, #7
 80063cc:	4013      	ands	r3, r2
 80063ce:	2201      	movs	r2, #1
 80063d0:	409a      	lsls	r2, r3
 80063d2:	0013      	movs	r3, r2
 80063d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	4835      	ldr	r0, [pc, #212]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80063da:	f7f9 fe91 	bl	8000100 <__udivsi3>
 80063de:	0003      	movs	r3, r0
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	e05d      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063e4:	4b31      	ldr	r3, [pc, #196]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2238      	movs	r2, #56	@ 0x38
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d102      	bne.n	80063f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063f0:	4b30      	ldr	r3, [pc, #192]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	e054      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063f6:	4b2d      	ldr	r3, [pc, #180]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2238      	movs	r2, #56	@ 0x38
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d138      	bne.n	8006474 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006402:	4b2a      	ldr	r3, [pc, #168]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	2203      	movs	r2, #3
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800640c:	4b27      	ldr	r3, [pc, #156]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	091b      	lsrs	r3, r3, #4
 8006412:	2207      	movs	r2, #7
 8006414:	4013      	ands	r3, r2
 8006416:	3301      	adds	r3, #1
 8006418:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d10d      	bne.n	800643c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4824      	ldr	r0, [pc, #144]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006424:	f7f9 fe6c 	bl	8000100 <__udivsi3>
 8006428:	0003      	movs	r3, r0
 800642a:	0019      	movs	r1, r3
 800642c:	4b1f      	ldr	r3, [pc, #124]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	227f      	movs	r2, #127	@ 0x7f
 8006434:	4013      	ands	r3, r2
 8006436:	434b      	muls	r3, r1
 8006438:	617b      	str	r3, [r7, #20]
        break;
 800643a:	e00d      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	481c      	ldr	r0, [pc, #112]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006440:	f7f9 fe5e 	bl	8000100 <__udivsi3>
 8006444:	0003      	movs	r3, r0
 8006446:	0019      	movs	r1, r3
 8006448:	4b18      	ldr	r3, [pc, #96]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	0a1b      	lsrs	r3, r3, #8
 800644e:	227f      	movs	r2, #127	@ 0x7f
 8006450:	4013      	ands	r3, r2
 8006452:	434b      	muls	r3, r1
 8006454:	617b      	str	r3, [r7, #20]
        break;
 8006456:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006458:	4b14      	ldr	r3, [pc, #80]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	0f5b      	lsrs	r3, r3, #29
 800645e:	2207      	movs	r2, #7
 8006460:	4013      	ands	r3, r2
 8006462:	3301      	adds	r3, #1
 8006464:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	6978      	ldr	r0, [r7, #20]
 800646a:	f7f9 fe49 	bl	8000100 <__udivsi3>
 800646e:	0003      	movs	r3, r0
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e015      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006474:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2238      	movs	r2, #56	@ 0x38
 800647a:	4013      	ands	r3, r2
 800647c:	2b20      	cmp	r3, #32
 800647e:	d103      	bne.n	8006488 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	e00b      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006488:	4b08      	ldr	r3, [pc, #32]	@ (80064ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2238      	movs	r2, #56	@ 0x38
 800648e:	4013      	ands	r3, r2
 8006490:	2b18      	cmp	r3, #24
 8006492:	d103      	bne.n	800649c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006494:	23fa      	movs	r3, #250	@ 0xfa
 8006496:	01db      	lsls	r3, r3, #7
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	e001      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80064a0:	693b      	ldr	r3, [r7, #16]
}
 80064a2:	0018      	movs	r0, r3
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b006      	add	sp, #24
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			@ (mov r8, r8)
 80064ac:	40021000 	.word	0x40021000
 80064b0:	00f42400 	.word	0x00f42400
 80064b4:	007a1200 	.word	0x007a1200

080064b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064bc:	4b02      	ldr	r3, [pc, #8]	@ (80064c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80064be:	681b      	ldr	r3, [r3, #0]
}
 80064c0:	0018      	movs	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	46c0      	nop			@ (mov r8, r8)
 80064c8:	20000000 	.word	0x20000000

080064cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064cc:	b5b0      	push	{r4, r5, r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80064d0:	f7ff fff2 	bl	80064b8 <HAL_RCC_GetHCLKFreq>
 80064d4:	0004      	movs	r4, r0
 80064d6:	f7ff fb49 	bl	8005b6c <LL_RCC_GetAPB1Prescaler>
 80064da:	0003      	movs	r3, r0
 80064dc:	0b1a      	lsrs	r2, r3, #12
 80064de:	4b05      	ldr	r3, [pc, #20]	@ (80064f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064e0:	0092      	lsls	r2, r2, #2
 80064e2:	58d3      	ldr	r3, [r2, r3]
 80064e4:	221f      	movs	r2, #31
 80064e6:	4013      	ands	r3, r2
 80064e8:	40dc      	lsrs	r4, r3
 80064ea:	0023      	movs	r3, r4
}
 80064ec:	0018      	movs	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bdb0      	pop	{r4, r5, r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	08007e68 	.word	0x08007e68

080064f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006500:	2313      	movs	r3, #19
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006508:	2312      	movs	r3, #18
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	2380      	movs	r3, #128	@ 0x80
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	4013      	ands	r3, r2
 800651a:	d100      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800651c:	e0a3      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800651e:	2011      	movs	r0, #17
 8006520:	183b      	adds	r3, r7, r0
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006526:	4b7f      	ldr	r3, [pc, #508]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800652a:	2380      	movs	r3, #128	@ 0x80
 800652c:	055b      	lsls	r3, r3, #21
 800652e:	4013      	ands	r3, r2
 8006530:	d110      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006532:	4b7c      	ldr	r3, [pc, #496]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006536:	4b7b      	ldr	r3, [pc, #492]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006538:	2180      	movs	r1, #128	@ 0x80
 800653a:	0549      	lsls	r1, r1, #21
 800653c:	430a      	orrs	r2, r1
 800653e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006540:	4b78      	ldr	r3, [pc, #480]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	055b      	lsls	r3, r3, #21
 8006548:	4013      	ands	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654e:	183b      	adds	r3, r7, r0
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006554:	4b74      	ldr	r3, [pc, #464]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	4b73      	ldr	r3, [pc, #460]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800655a:	2180      	movs	r1, #128	@ 0x80
 800655c:	0049      	lsls	r1, r1, #1
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006562:	f7fd fa67 	bl	8003a34 <HAL_GetTick>
 8006566:	0003      	movs	r3, r0
 8006568:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800656a:	e00b      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656c:	f7fd fa62 	bl	8003a34 <HAL_GetTick>
 8006570:	0002      	movs	r2, r0
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d904      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800657a:	2313      	movs	r3, #19
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	2203      	movs	r2, #3
 8006580:	701a      	strb	r2, [r3, #0]
        break;
 8006582:	e005      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006584:	4b68      	ldr	r3, [pc, #416]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	2380      	movs	r3, #128	@ 0x80
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4013      	ands	r3, r2
 800658e:	d0ed      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006590:	2313      	movs	r3, #19
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d154      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800659a:	4b62      	ldr	r3, [pc, #392]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800659c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800659e:	23c0      	movs	r3, #192	@ 0xc0
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4013      	ands	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d019      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d014      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ba:	4a5c      	ldr	r2, [pc, #368]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80065bc:	4013      	ands	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065c0:	4b58      	ldr	r3, [pc, #352]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065c4:	4b57      	ldr	r3, [pc, #348]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065c6:	2180      	movs	r1, #128	@ 0x80
 80065c8:	0249      	lsls	r1, r1, #9
 80065ca:	430a      	orrs	r2, r1
 80065cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ce:	4b55      	ldr	r3, [pc, #340]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065d2:	4b54      	ldr	r3, [pc, #336]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065d4:	4956      	ldr	r1, [pc, #344]	@ (8006730 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80065d6:	400a      	ands	r2, r1
 80065d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065da:	4b52      	ldr	r3, [pc, #328]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2201      	movs	r2, #1
 80065e4:	4013      	ands	r3, r2
 80065e6:	d016      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fd fa24 	bl	8003a34 <HAL_GetTick>
 80065ec:	0003      	movs	r3, r0
 80065ee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f0:	e00c      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fd fa1f 	bl	8003a34 <HAL_GetTick>
 80065f6:	0002      	movs	r2, r0
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	4a4d      	ldr	r2, [pc, #308]	@ (8006734 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d904      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006602:	2313      	movs	r3, #19
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2203      	movs	r2, #3
 8006608:	701a      	strb	r2, [r3, #0]
            break;
 800660a:	e004      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800660c:	4b45      	ldr	r3, [pc, #276]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800660e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006610:	2202      	movs	r2, #2
 8006612:	4013      	ands	r3, r2
 8006614:	d0ed      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006616:	2313      	movs	r3, #19
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006620:	4b40      	ldr	r3, [pc, #256]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006624:	4a41      	ldr	r2, [pc, #260]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006626:	4013      	ands	r3, r2
 8006628:	0019      	movs	r1, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	4b3d      	ldr	r3, [pc, #244]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006630:	430a      	orrs	r2, r1
 8006632:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006634:	e00c      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006636:	2312      	movs	r3, #18
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	2213      	movs	r2, #19
 800663c:	18ba      	adds	r2, r7, r2
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	701a      	strb	r2, [r3, #0]
 8006642:	e005      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006644:	2312      	movs	r3, #18
 8006646:	18fb      	adds	r3, r7, r3
 8006648:	2213      	movs	r2, #19
 800664a:	18ba      	adds	r2, r7, r2
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006650:	2311      	movs	r3, #17
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d105      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800665a:	4b32      	ldr	r3, [pc, #200]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800665c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800665e:	4b31      	ldr	r3, [pc, #196]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006660:	4935      	ldr	r1, [pc, #212]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006662:	400a      	ands	r2, r1
 8006664:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2201      	movs	r2, #1
 800666c:	4013      	ands	r3, r2
 800666e:	d009      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006670:	4b2c      	ldr	r3, [pc, #176]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006674:	2203      	movs	r2, #3
 8006676:	4393      	bics	r3, r2
 8006678:	0019      	movs	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	4b29      	ldr	r3, [pc, #164]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006680:	430a      	orrs	r2, r1
 8006682:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2220      	movs	r2, #32
 800668a:	4013      	ands	r3, r2
 800668c:	d009      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800668e:	4b25      	ldr	r3, [pc, #148]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006692:	4a2a      	ldr	r2, [pc, #168]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006694:	4013      	ands	r3, r2
 8006696:	0019      	movs	r1, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	4b21      	ldr	r3, [pc, #132]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800669e:	430a      	orrs	r2, r1
 80066a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	2380      	movs	r3, #128	@ 0x80
 80066a8:	01db      	lsls	r3, r3, #7
 80066aa:	4013      	ands	r3, r2
 80066ac:	d015      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	0899      	lsrs	r1, r3, #2
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066bc:	430a      	orrs	r2, r1
 80066be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	2380      	movs	r3, #128	@ 0x80
 80066c6:	05db      	lsls	r3, r3, #23
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d106      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80066cc:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	4b14      	ldr	r3, [pc, #80]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066d2:	2180      	movs	r1, #128	@ 0x80
 80066d4:	0249      	lsls	r1, r1, #9
 80066d6:	430a      	orrs	r2, r1
 80066d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	2380      	movs	r3, #128	@ 0x80
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	4013      	ands	r3, r2
 80066e4:	d016      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80066e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ea:	4a15      	ldr	r2, [pc, #84]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	0019      	movs	r1, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066f6:	430a      	orrs	r2, r1
 80066f8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	2380      	movs	r3, #128	@ 0x80
 8006700:	01db      	lsls	r3, r3, #7
 8006702:	429a      	cmp	r2, r3
 8006704:	d106      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006706:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800670c:	2180      	movs	r1, #128	@ 0x80
 800670e:	0249      	lsls	r1, r1, #9
 8006710:	430a      	orrs	r2, r1
 8006712:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006714:	2312      	movs	r3, #18
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	781b      	ldrb	r3, [r3, #0]
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b006      	add	sp, #24
 8006720:	bd80      	pop	{r7, pc}
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	40021000 	.word	0x40021000
 8006728:	40007000 	.word	0x40007000
 800672c:	fffffcff 	.word	0xfffffcff
 8006730:	fffeffff 	.word	0xfffeffff
 8006734:	00001388 	.word	0x00001388
 8006738:	efffffff 	.word	0xefffffff
 800673c:	ffffcfff 	.word	0xffffcfff
 8006740:	ffff3fff 	.word	0xffff3fff

08006744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e046      	b.n	80067e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2288      	movs	r2, #136	@ 0x88
 800675a:	589b      	ldr	r3, [r3, r2]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2284      	movs	r2, #132	@ 0x84
 8006764:	2100      	movs	r1, #0
 8006766:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0018      	movs	r0, r3
 800676c:	f7fd f83c 	bl	80037e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2288      	movs	r2, #136	@ 0x88
 8006774:	2124      	movs	r1, #36	@ 0x24
 8006776:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2101      	movs	r1, #1
 8006784:	438a      	bics	r2, r1
 8006786:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0018      	movs	r0, r3
 8006794:	f000 f996 	bl	8006ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	0018      	movs	r0, r3
 800679c:	f000 f828 	bl	80067f0 <UART_SetConfig>
 80067a0:	0003      	movs	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d101      	bne.n	80067aa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e01c      	b.n	80067e4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	490d      	ldr	r1, [pc, #52]	@ (80067ec <HAL_UART_Init+0xa8>)
 80067b6:	400a      	ands	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	212a      	movs	r1, #42	@ 0x2a
 80067c6:	438a      	bics	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2101      	movs	r1, #1
 80067d6:	430a      	orrs	r2, r1
 80067d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0018      	movs	r0, r3
 80067de:	f000 fa25 	bl	8006c2c <UART_CheckIdleState>
 80067e2:	0003      	movs	r3, r0
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	ffffb7ff 	.word	0xffffb7ff

080067f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f8:	231a      	movs	r3, #26
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	4313      	orrs	r3, r2
 8006816:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4aa1      	ldr	r2, [pc, #644]	@ (8006aa4 <UART_SetConfig+0x2b4>)
 8006820:	4013      	ands	r3, r2
 8006822:	0019      	movs	r1, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	430a      	orrs	r2, r1
 800682c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a9c      	ldr	r2, [pc, #624]	@ (8006aa8 <UART_SetConfig+0x2b8>)
 8006836:	4013      	ands	r3, r2
 8006838:	0019      	movs	r1, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	4313      	orrs	r3, r2
 8006854:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4a93      	ldr	r2, [pc, #588]	@ (8006aac <UART_SetConfig+0x2bc>)
 800685e:	4013      	ands	r3, r2
 8006860:	0019      	movs	r1, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	220f      	movs	r2, #15
 8006874:	4393      	bics	r3, r2
 8006876:	0019      	movs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a89      	ldr	r2, [pc, #548]	@ (8006ab0 <UART_SetConfig+0x2c0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d127      	bne.n	80068de <UART_SetConfig+0xee>
 800688e:	4b89      	ldr	r3, [pc, #548]	@ (8006ab4 <UART_SetConfig+0x2c4>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	2203      	movs	r2, #3
 8006894:	4013      	ands	r3, r2
 8006896:	2b03      	cmp	r3, #3
 8006898:	d017      	beq.n	80068ca <UART_SetConfig+0xda>
 800689a:	d81b      	bhi.n	80068d4 <UART_SetConfig+0xe4>
 800689c:	2b02      	cmp	r3, #2
 800689e:	d00a      	beq.n	80068b6 <UART_SetConfig+0xc6>
 80068a0:	d818      	bhi.n	80068d4 <UART_SetConfig+0xe4>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <UART_SetConfig+0xbc>
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d00a      	beq.n	80068c0 <UART_SetConfig+0xd0>
 80068aa:	e013      	b.n	80068d4 <UART_SetConfig+0xe4>
 80068ac:	231b      	movs	r3, #27
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	e021      	b.n	80068fa <UART_SetConfig+0x10a>
 80068b6:	231b      	movs	r3, #27
 80068b8:	18fb      	adds	r3, r7, r3
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e01c      	b.n	80068fa <UART_SetConfig+0x10a>
 80068c0:	231b      	movs	r3, #27
 80068c2:	18fb      	adds	r3, r7, r3
 80068c4:	2204      	movs	r2, #4
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	e017      	b.n	80068fa <UART_SetConfig+0x10a>
 80068ca:	231b      	movs	r3, #27
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	2208      	movs	r2, #8
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e012      	b.n	80068fa <UART_SetConfig+0x10a>
 80068d4:	231b      	movs	r3, #27
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	2210      	movs	r2, #16
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	e00d      	b.n	80068fa <UART_SetConfig+0x10a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a75      	ldr	r2, [pc, #468]	@ (8006ab8 <UART_SetConfig+0x2c8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d104      	bne.n	80068f2 <UART_SetConfig+0x102>
 80068e8:	231b      	movs	r3, #27
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	2200      	movs	r2, #0
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	e003      	b.n	80068fa <UART_SetConfig+0x10a>
 80068f2:	231b      	movs	r3, #27
 80068f4:	18fb      	adds	r3, r7, r3
 80068f6:	2210      	movs	r2, #16
 80068f8:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69da      	ldr	r2, [r3, #28]
 80068fe:	2380      	movs	r3, #128	@ 0x80
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	429a      	cmp	r2, r3
 8006904:	d000      	beq.n	8006908 <UART_SetConfig+0x118>
 8006906:	e065      	b.n	80069d4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8006908:	231b      	movs	r3, #27
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d015      	beq.n	800693e <UART_SetConfig+0x14e>
 8006912:	dc18      	bgt.n	8006946 <UART_SetConfig+0x156>
 8006914:	2b04      	cmp	r3, #4
 8006916:	d00d      	beq.n	8006934 <UART_SetConfig+0x144>
 8006918:	dc15      	bgt.n	8006946 <UART_SetConfig+0x156>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <UART_SetConfig+0x134>
 800691e:	2b02      	cmp	r3, #2
 8006920:	d005      	beq.n	800692e <UART_SetConfig+0x13e>
 8006922:	e010      	b.n	8006946 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006924:	f7ff fdd2 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 8006928:	0003      	movs	r3, r0
 800692a:	617b      	str	r3, [r7, #20]
        break;
 800692c:	e012      	b.n	8006954 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800692e:	4b63      	ldr	r3, [pc, #396]	@ (8006abc <UART_SetConfig+0x2cc>)
 8006930:	617b      	str	r3, [r7, #20]
        break;
 8006932:	e00f      	b.n	8006954 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006934:	f7ff fd3e 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8006938:	0003      	movs	r3, r0
 800693a:	617b      	str	r3, [r7, #20]
        break;
 800693c:	e00a      	b.n	8006954 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800693e:	2380      	movs	r3, #128	@ 0x80
 8006940:	021b      	lsls	r3, r3, #8
 8006942:	617b      	str	r3, [r7, #20]
        break;
 8006944:	e006      	b.n	8006954 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800694a:	231a      	movs	r3, #26
 800694c:	18fb      	adds	r3, r7, r3
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
        break;
 8006952:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d100      	bne.n	800695c <UART_SetConfig+0x16c>
 800695a:	e08d      	b.n	8006a78 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006960:	4b57      	ldr	r3, [pc, #348]	@ (8006ac0 <UART_SetConfig+0x2d0>)
 8006962:	0052      	lsls	r2, r2, #1
 8006964:	5ad3      	ldrh	r3, [r2, r3]
 8006966:	0019      	movs	r1, r3
 8006968:	6978      	ldr	r0, [r7, #20]
 800696a:	f7f9 fbc9 	bl	8000100 <__udivsi3>
 800696e:	0003      	movs	r3, r0
 8006970:	005a      	lsls	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	085b      	lsrs	r3, r3, #1
 8006978:	18d2      	adds	r2, r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	0019      	movs	r1, r3
 8006980:	0010      	movs	r0, r2
 8006982:	f7f9 fbbd 	bl	8000100 <__udivsi3>
 8006986:	0003      	movs	r3, r0
 8006988:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b0f      	cmp	r3, #15
 800698e:	d91c      	bls.n	80069ca <UART_SetConfig+0x1da>
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	2380      	movs	r3, #128	@ 0x80
 8006994:	025b      	lsls	r3, r3, #9
 8006996:	429a      	cmp	r2, r3
 8006998:	d217      	bcs.n	80069ca <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	b29a      	uxth	r2, r3
 800699e:	200e      	movs	r0, #14
 80069a0:	183b      	adds	r3, r7, r0
 80069a2:	210f      	movs	r1, #15
 80069a4:	438a      	bics	r2, r1
 80069a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2207      	movs	r2, #7
 80069b0:	4013      	ands	r3, r2
 80069b2:	b299      	uxth	r1, r3
 80069b4:	183b      	adds	r3, r7, r0
 80069b6:	183a      	adds	r2, r7, r0
 80069b8:	8812      	ldrh	r2, [r2, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	183a      	adds	r2, r7, r0
 80069c4:	8812      	ldrh	r2, [r2, #0]
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e056      	b.n	8006a78 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80069ca:	231a      	movs	r3, #26
 80069cc:	18fb      	adds	r3, r7, r3
 80069ce:	2201      	movs	r2, #1
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	e051      	b.n	8006a78 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069d4:	231b      	movs	r3, #27
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d015      	beq.n	8006a0a <UART_SetConfig+0x21a>
 80069de:	dc18      	bgt.n	8006a12 <UART_SetConfig+0x222>
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d00d      	beq.n	8006a00 <UART_SetConfig+0x210>
 80069e4:	dc15      	bgt.n	8006a12 <UART_SetConfig+0x222>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <UART_SetConfig+0x200>
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d005      	beq.n	80069fa <UART_SetConfig+0x20a>
 80069ee:	e010      	b.n	8006a12 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f0:	f7ff fd6c 	bl	80064cc <HAL_RCC_GetPCLK1Freq>
 80069f4:	0003      	movs	r3, r0
 80069f6:	617b      	str	r3, [r7, #20]
        break;
 80069f8:	e012      	b.n	8006a20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069fa:	4b30      	ldr	r3, [pc, #192]	@ (8006abc <UART_SetConfig+0x2cc>)
 80069fc:	617b      	str	r3, [r7, #20]
        break;
 80069fe:	e00f      	b.n	8006a20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a00:	f7ff fcd8 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8006a04:	0003      	movs	r3, r0
 8006a06:	617b      	str	r3, [r7, #20]
        break;
 8006a08:	e00a      	b.n	8006a20 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0a:	2380      	movs	r3, #128	@ 0x80
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	617b      	str	r3, [r7, #20]
        break;
 8006a10:	e006      	b.n	8006a20 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a16:	231a      	movs	r3, #26
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
        break;
 8006a1e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d028      	beq.n	8006a78 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a2a:	4b25      	ldr	r3, [pc, #148]	@ (8006ac0 <UART_SetConfig+0x2d0>)
 8006a2c:	0052      	lsls	r2, r2, #1
 8006a2e:	5ad3      	ldrh	r3, [r2, r3]
 8006a30:	0019      	movs	r1, r3
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f7f9 fb64 	bl	8000100 <__udivsi3>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	001a      	movs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	18d2      	adds	r2, r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	0019      	movs	r1, r3
 8006a4a:	0010      	movs	r0, r2
 8006a4c:	f7f9 fb58 	bl	8000100 <__udivsi3>
 8006a50:	0003      	movs	r3, r0
 8006a52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b0f      	cmp	r3, #15
 8006a58:	d90a      	bls.n	8006a70 <UART_SetConfig+0x280>
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	2380      	movs	r3, #128	@ 0x80
 8006a5e:	025b      	lsls	r3, r3, #9
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d205      	bcs.n	8006a70 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e003      	b.n	8006a78 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8006a70:	231a      	movs	r3, #26
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	2201      	movs	r2, #1
 8006a76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	226a      	movs	r2, #106	@ 0x6a
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2268      	movs	r2, #104	@ 0x68
 8006a84:	2101      	movs	r1, #1
 8006a86:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a94:	231a      	movs	r3, #26
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	781b      	ldrb	r3, [r3, #0]
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b008      	add	sp, #32
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	cfff69f3 	.word	0xcfff69f3
 8006aa8:	ffffcfff 	.word	0xffffcfff
 8006aac:	11fff4ff 	.word	0x11fff4ff
 8006ab0:	40013800 	.word	0x40013800
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40004400 	.word	0x40004400
 8006abc:	00f42400 	.word	0x00f42400
 8006ac0:	08007e88 	.word	0x08007e88

08006ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d00b      	beq.n	8006aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	4a4a      	ldr	r2, [pc, #296]	@ (8006c08 <UART_AdvFeatureConfig+0x144>)
 8006ade:	4013      	ands	r3, r2
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	2201      	movs	r2, #1
 8006af4:	4013      	ands	r3, r2
 8006af6:	d00b      	beq.n	8006b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	4a43      	ldr	r2, [pc, #268]	@ (8006c0c <UART_AdvFeatureConfig+0x148>)
 8006b00:	4013      	ands	r3, r2
 8006b02:	0019      	movs	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b14:	2202      	movs	r2, #2
 8006b16:	4013      	ands	r3, r2
 8006b18:	d00b      	beq.n	8006b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a3b      	ldr	r2, [pc, #236]	@ (8006c10 <UART_AdvFeatureConfig+0x14c>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	0019      	movs	r1, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b36:	2204      	movs	r2, #4
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4a34      	ldr	r2, [pc, #208]	@ (8006c14 <UART_AdvFeatureConfig+0x150>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	0019      	movs	r1, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	2210      	movs	r2, #16
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d00b      	beq.n	8006b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4a2c      	ldr	r2, [pc, #176]	@ (8006c18 <UART_AdvFeatureConfig+0x154>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	0019      	movs	r1, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	4a25      	ldr	r2, [pc, #148]	@ (8006c1c <UART_AdvFeatureConfig+0x158>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9c:	2240      	movs	r2, #64	@ 0x40
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d01d      	beq.n	8006bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c20 <UART_AdvFeatureConfig+0x15c>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	0019      	movs	r1, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bbe:	2380      	movs	r3, #128	@ 0x80
 8006bc0:	035b      	lsls	r3, r3, #13
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d10b      	bne.n	8006bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4a15      	ldr	r2, [pc, #84]	@ (8006c24 <UART_AdvFeatureConfig+0x160>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	0019      	movs	r1, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	2280      	movs	r2, #128	@ 0x80
 8006be4:	4013      	ands	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	4a0e      	ldr	r2, [pc, #56]	@ (8006c28 <UART_AdvFeatureConfig+0x164>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	0019      	movs	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]
  }
}
 8006c00:	46c0      	nop			@ (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b002      	add	sp, #8
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	ffff7fff 	.word	0xffff7fff
 8006c0c:	fffdffff 	.word	0xfffdffff
 8006c10:	fffeffff 	.word	0xfffeffff
 8006c14:	fffbffff 	.word	0xfffbffff
 8006c18:	ffffefff 	.word	0xffffefff
 8006c1c:	ffffdfff 	.word	0xffffdfff
 8006c20:	ffefffff 	.word	0xffefffff
 8006c24:	ff9fffff 	.word	0xff9fffff
 8006c28:	fff7ffff 	.word	0xfff7ffff

08006c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b092      	sub	sp, #72	@ 0x48
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2290      	movs	r2, #144	@ 0x90
 8006c38:	2100      	movs	r1, #0
 8006c3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c3c:	f7fc fefa 	bl	8003a34 <HAL_GetTick>
 8006c40:	0003      	movs	r3, r0
 8006c42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d12d      	bne.n	8006cae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	2280      	movs	r2, #128	@ 0x80
 8006c56:	0391      	lsls	r1, r2, #14
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4a47      	ldr	r2, [pc, #284]	@ (8006d78 <UART_CheckIdleState+0x14c>)
 8006c5c:	9200      	str	r2, [sp, #0]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f000 f88e 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8006c64:	1e03      	subs	r3, r0, #0
 8006c66:	d022      	beq.n	8006cae <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c68:	f3ef 8310 	mrs	r3, PRIMASK
 8006c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c72:	2301      	movs	r3, #1
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	f383 8810 	msr	PRIMASK, r3
}
 8006c7c:	46c0      	nop			@ (mov r8, r8)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2180      	movs	r1, #128	@ 0x80
 8006c8a:	438a      	bics	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c94:	f383 8810 	msr	PRIMASK, r3
}
 8006c98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2288      	movs	r2, #136	@ 0x88
 8006c9e:	2120      	movs	r1, #32
 8006ca0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2284      	movs	r2, #132	@ 0x84
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e060      	b.n	8006d70 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d146      	bne.n	8006d4a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cbe:	2280      	movs	r2, #128	@ 0x80
 8006cc0:	03d1      	lsls	r1, r2, #15
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d78 <UART_CheckIdleState+0x14c>)
 8006cc6:	9200      	str	r2, [sp, #0]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f000 f859 	bl	8006d80 <UART_WaitOnFlagUntilTimeout>
 8006cce:	1e03      	subs	r3, r0, #0
 8006cd0:	d03b      	beq.n	8006d4a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cdc:	2301      	movs	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			@ (mov r8, r8)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4922      	ldr	r1, [pc, #136]	@ (8006d7c <UART_CheckIdleState+0x150>)
 8006cf4:	400a      	ands	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f383 8810 	msr	PRIMASK, r3
}
 8006d02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d04:	f3ef 8310 	mrs	r3, PRIMASK
 8006d08:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d0e:	2301      	movs	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f383 8810 	msr	PRIMASK, r3
}
 8006d18:	46c0      	nop			@ (mov r8, r8)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2101      	movs	r1, #1
 8006d26:	438a      	bics	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f383 8810 	msr	PRIMASK, r3
}
 8006d34:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	228c      	movs	r2, #140	@ 0x8c
 8006d3a:	2120      	movs	r1, #32
 8006d3c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2284      	movs	r2, #132	@ 0x84
 8006d42:	2100      	movs	r1, #0
 8006d44:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e012      	b.n	8006d70 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2288      	movs	r2, #136	@ 0x88
 8006d4e:	2120      	movs	r1, #32
 8006d50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	228c      	movs	r2, #140	@ 0x8c
 8006d56:	2120      	movs	r1, #32
 8006d58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2284      	movs	r2, #132	@ 0x84
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	0018      	movs	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b010      	add	sp, #64	@ 0x40
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	01ffffff 	.word	0x01ffffff
 8006d7c:	fffffedf 	.word	0xfffffedf

08006d80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	1dfb      	adds	r3, r7, #7
 8006d8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d90:	e051      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	3301      	adds	r3, #1
 8006d96:	d04e      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d98:	f7fc fe4c 	bl	8003a34 <HAL_GetTick>
 8006d9c:	0002      	movs	r2, r0
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <UART_WaitOnFlagUntilTimeout+0x2e>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e051      	b.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2204      	movs	r2, #4
 8006dba:	4013      	ands	r3, r2
 8006dbc:	d03b      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b80      	cmp	r3, #128	@ 0x80
 8006dc2:	d038      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	d035      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d111      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2208      	movs	r2, #8
 8006dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	0018      	movs	r0, r3
 8006de4:	f000 f83c 	bl	8006e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2290      	movs	r2, #144	@ 0x90
 8006dec:	2108      	movs	r1, #8
 8006dee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2284      	movs	r2, #132	@ 0x84
 8006df4:	2100      	movs	r1, #0
 8006df6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e02c      	b.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69da      	ldr	r2, [r3, #28]
 8006e02:	2380      	movs	r3, #128	@ 0x80
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	401a      	ands	r2, r3
 8006e08:	2380      	movs	r3, #128	@ 0x80
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d112      	bne.n	8006e36 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2280      	movs	r2, #128	@ 0x80
 8006e16:	0112      	lsls	r2, r2, #4
 8006e18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f000 f81f 	bl	8006e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2290      	movs	r2, #144	@ 0x90
 8006e26:	2120      	movs	r1, #32
 8006e28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2284      	movs	r2, #132	@ 0x84
 8006e2e:	2100      	movs	r1, #0
 8006e30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e00f      	b.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	425a      	negs	r2, r3
 8006e46:	4153      	adcs	r3, r2
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	1dfb      	adds	r3, r7, #7
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d09e      	beq.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	0018      	movs	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	b004      	add	sp, #16
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08e      	sub	sp, #56	@ 0x38
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e68:	f3ef 8310 	mrs	r3, PRIMASK
 8006e6c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e72:	2301      	movs	r3, #1
 8006e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f383 8810 	msr	PRIMASK, r3
}
 8006e7c:	46c0      	nop			@ (mov r8, r8)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4926      	ldr	r1, [pc, #152]	@ (8006f24 <UART_EndRxTransfer+0xc4>)
 8006e8a:	400a      	ands	r2, r1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f383 8810 	msr	PRIMASK, r3
}
 8006e98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e9e:	623b      	str	r3, [r7, #32]
  return(result);
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ea2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	f383 8810 	msr	PRIMASK, r3
}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	491b      	ldr	r1, [pc, #108]	@ (8006f28 <UART_EndRxTransfer+0xc8>)
 8006ebc:	400a      	ands	r2, r1
 8006ebe:	609a      	str	r2, [r3, #8]
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec6:	f383 8810 	msr	PRIMASK, r3
}
 8006eca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d118      	bne.n	8006f06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006eda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ede:	2301      	movs	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f383 8810 	msr	PRIMASK, r3
}
 8006ee8:	46c0      	nop			@ (mov r8, r8)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2110      	movs	r1, #16
 8006ef6:	438a      	bics	r2, r1
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f383 8810 	msr	PRIMASK, r3
}
 8006f04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	228c      	movs	r2, #140	@ 0x8c
 8006f0a:	2120      	movs	r1, #32
 8006f0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f1a:	46c0      	nop			@ (mov r8, r8)
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b00e      	add	sp, #56	@ 0x38
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	fffffedf 	.word	0xfffffedf
 8006f28:	effffffe 	.word	0xeffffffe

08006f2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2284      	movs	r2, #132	@ 0x84
 8006f38:	5c9b      	ldrb	r3, [r3, r2]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e027      	b.n	8006f92 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2284      	movs	r2, #132	@ 0x84
 8006f46:	2101      	movs	r1, #1
 8006f48:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2288      	movs	r2, #136	@ 0x88
 8006f4e:	2124      	movs	r1, #36	@ 0x24
 8006f50:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2101      	movs	r1, #1
 8006f66:	438a      	bics	r2, r1
 8006f68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8006f9c <HAL_UARTEx_DisableFifoMode+0x70>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2288      	movs	r2, #136	@ 0x88
 8006f84:	2120      	movs	r1, #32
 8006f86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2284      	movs	r2, #132	@ 0x84
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	0018      	movs	r0, r3
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b004      	add	sp, #16
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	46c0      	nop			@ (mov r8, r8)
 8006f9c:	dfffffff 	.word	0xdfffffff

08006fa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2284      	movs	r2, #132	@ 0x84
 8006fae:	5c9b      	ldrb	r3, [r3, r2]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e02e      	b.n	8007016 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2284      	movs	r2, #132	@ 0x84
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2288      	movs	r2, #136	@ 0x88
 8006fc4:	2124      	movs	r1, #36	@ 0x24
 8006fc6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2101      	movs	r1, #1
 8006fdc:	438a      	bics	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	08d9      	lsrs	r1, r3, #3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 f854 	bl	80070a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2288      	movs	r2, #136	@ 0x88
 8007008:	2120      	movs	r1, #32
 800700a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2284      	movs	r2, #132	@ 0x84
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	0018      	movs	r0, r3
 8007018:	46bd      	mov	sp, r7
 800701a:	b004      	add	sp, #16
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2284      	movs	r2, #132	@ 0x84
 800702e:	5c9b      	ldrb	r3, [r3, r2]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007034:	2302      	movs	r3, #2
 8007036:	e02f      	b.n	8007098 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2284      	movs	r2, #132	@ 0x84
 800703c:	2101      	movs	r1, #1
 800703e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2288      	movs	r2, #136	@ 0x88
 8007044:	2124      	movs	r1, #36	@ 0x24
 8007046:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2101      	movs	r1, #1
 800705c:	438a      	bics	r2, r1
 800705e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	4a0e      	ldr	r2, [pc, #56]	@ (80070a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007068:	4013      	ands	r3, r2
 800706a:	0019      	movs	r1, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	0018      	movs	r0, r3
 800707a:	f000 f813 	bl	80070a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2288      	movs	r2, #136	@ 0x88
 800708a:	2120      	movs	r1, #32
 800708c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2284      	movs	r2, #132	@ 0x84
 8007092:	2100      	movs	r1, #0
 8007094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	0018      	movs	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	b004      	add	sp, #16
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	f1ffffff 	.word	0xf1ffffff

080070a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d108      	bne.n	80070c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	226a      	movs	r2, #106	@ 0x6a
 80070b8:	2101      	movs	r1, #1
 80070ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2268      	movs	r2, #104	@ 0x68
 80070c0:	2101      	movs	r1, #1
 80070c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070c4:	e043      	b.n	800714e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070c6:	260f      	movs	r6, #15
 80070c8:	19bb      	adds	r3, r7, r6
 80070ca:	2208      	movs	r2, #8
 80070cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ce:	200e      	movs	r0, #14
 80070d0:	183b      	adds	r3, r7, r0
 80070d2:	2208      	movs	r2, #8
 80070d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	0e5b      	lsrs	r3, r3, #25
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	240d      	movs	r4, #13
 80070e2:	193b      	adds	r3, r7, r4
 80070e4:	2107      	movs	r1, #7
 80070e6:	400a      	ands	r2, r1
 80070e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	0f5b      	lsrs	r3, r3, #29
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	250c      	movs	r5, #12
 80070f6:	197b      	adds	r3, r7, r5
 80070f8:	2107      	movs	r1, #7
 80070fa:	400a      	ands	r2, r1
 80070fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070fe:	183b      	adds	r3, r7, r0
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	197a      	adds	r2, r7, r5
 8007104:	7812      	ldrb	r2, [r2, #0]
 8007106:	4914      	ldr	r1, [pc, #80]	@ (8007158 <UARTEx_SetNbDataToProcess+0xb4>)
 8007108:	5c8a      	ldrb	r2, [r1, r2]
 800710a:	435a      	muls	r2, r3
 800710c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800710e:	197b      	adds	r3, r7, r5
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	4a12      	ldr	r2, [pc, #72]	@ (800715c <UARTEx_SetNbDataToProcess+0xb8>)
 8007114:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007116:	0019      	movs	r1, r3
 8007118:	f7f9 f87c 	bl	8000214 <__divsi3>
 800711c:	0003      	movs	r3, r0
 800711e:	b299      	uxth	r1, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	226a      	movs	r2, #106	@ 0x6a
 8007124:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007126:	19bb      	adds	r3, r7, r6
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	193a      	adds	r2, r7, r4
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	490a      	ldr	r1, [pc, #40]	@ (8007158 <UARTEx_SetNbDataToProcess+0xb4>)
 8007130:	5c8a      	ldrb	r2, [r1, r2]
 8007132:	435a      	muls	r2, r3
 8007134:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007136:	193b      	adds	r3, r7, r4
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	4a08      	ldr	r2, [pc, #32]	@ (800715c <UARTEx_SetNbDataToProcess+0xb8>)
 800713c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800713e:	0019      	movs	r1, r3
 8007140:	f7f9 f868 	bl	8000214 <__divsi3>
 8007144:	0003      	movs	r3, r0
 8007146:	b299      	uxth	r1, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2268      	movs	r2, #104	@ 0x68
 800714c:	5299      	strh	r1, [r3, r2]
}
 800714e:	46c0      	nop			@ (mov r8, r8)
 8007150:	46bd      	mov	sp, r7
 8007152:	b005      	add	sp, #20
 8007154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007156:	46c0      	nop			@ (mov r8, r8)
 8007158:	08007ea0 	.word	0x08007ea0
 800715c:	08007ea8 	.word	0x08007ea8

08007160 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	0008      	movs	r0, r1
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	0019      	movs	r1, r3
 800716e:	260b      	movs	r6, #11
 8007170:	19bb      	adds	r3, r7, r6
 8007172:	1c02      	adds	r2, r0, #0
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	2508      	movs	r5, #8
 8007178:	197b      	adds	r3, r7, r5
 800717a:	1c0a      	adds	r2, r1, #0
 800717c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685c      	ldr	r4, [r3, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68d8      	ldr	r0, [r3, #12]
 8007186:	197b      	adds	r3, r7, r5
 8007188:	881d      	ldrh	r5, [r3, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	19bb      	adds	r3, r7, r6
 800718e:	7819      	ldrb	r1, [r3, #0]
 8007190:	002b      	movs	r3, r5
 8007192:	47a0      	blx	r4
 8007194:	0003      	movs	r3, r0
 8007196:	617b      	str	r3, [r7, #20]

  return ret;
 8007198:	697b      	ldr	r3, [r7, #20]
}
 800719a:	0018      	movs	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	b007      	add	sp, #28
 80071a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071a2 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80071a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a4:	b087      	sub	sp, #28
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	0008      	movs	r0, r1
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	0019      	movs	r1, r3
 80071b0:	260b      	movs	r6, #11
 80071b2:	19bb      	adds	r3, r7, r6
 80071b4:	1c02      	adds	r2, r0, #0
 80071b6:	701a      	strb	r2, [r3, #0]
 80071b8:	2508      	movs	r5, #8
 80071ba:	197b      	adds	r3, r7, r5
 80071bc:	1c0a      	adds	r2, r1, #0
 80071be:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681c      	ldr	r4, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68d8      	ldr	r0, [r3, #12]
 80071c8:	197b      	adds	r3, r7, r5
 80071ca:	881d      	ldrh	r5, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	19bb      	adds	r3, r7, r6
 80071d0:	7819      	ldrb	r1, [r3, #0]
 80071d2:	002b      	movs	r3, r5
 80071d4:	47a0      	blx	r4
 80071d6:	0003      	movs	r3, r0
 80071d8:	617b      	str	r3, [r7, #20]

  return ret;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b007      	add	sp, #28
 80071e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071e4 <lis2dw12_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis2dw12_from_fs2_to_mg(int16_t lsb)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	0002      	movs	r2, r0
 80071ec:	1dbb      	adds	r3, r7, #6
 80071ee:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
 80071f0:	1dbb      	adds	r3, r7, #6
 80071f2:	2200      	movs	r2, #0
 80071f4:	5e9b      	ldrsh	r3, [r3, r2]
 80071f6:	0018      	movs	r0, r3
 80071f8:	f7f9 fd74 	bl	8000ce4 <__aeabi_i2f>
 80071fc:	1c03      	adds	r3, r0, #0
 80071fe:	4904      	ldr	r1, [pc, #16]	@ (8007210 <lis2dw12_from_fs2_to_mg+0x2c>)
 8007200:	1c18      	adds	r0, r3, #0
 8007202:	f7f9 fc15 	bl	8000a30 <__aeabi_fmul>
 8007206:	1c03      	adds	r3, r0, #0
}
 8007208:	1c18      	adds	r0, r3, #0
 800720a:	46bd      	mov	sp, r7
 800720c:	b002      	add	sp, #8
 800720e:	bd80      	pop	{r7, pc}
 8007210:	3d79db23 	.word	0x3d79db23

08007214 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8007214:	b590      	push	{r4, r7, lr}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	000a      	movs	r2, r1
 800721e:	1cfb      	adds	r3, r7, #3
 8007220:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8007222:	2410      	movs	r4, #16
 8007224:	193a      	adds	r2, r7, r4
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	2301      	movs	r3, #1
 800722a:	2120      	movs	r1, #32
 800722c:	f7ff ff98 	bl	8007160 <lis2dw12_read_reg>
 8007230:	0003      	movs	r3, r0
 8007232:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d129      	bne.n	800728e <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800723a:	1cfb      	adds	r3, r7, #3
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	089b      	lsrs	r3, r3, #2
 8007240:	1c1a      	adds	r2, r3, #0
 8007242:	2303      	movs	r3, #3
 8007244:	4013      	ands	r3, r2
 8007246:	b2da      	uxtb	r2, r3
 8007248:	193b      	adds	r3, r7, r4
 800724a:	2103      	movs	r1, #3
 800724c:	400a      	ands	r2, r1
 800724e:	0090      	lsls	r0, r2, #2
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	210c      	movs	r1, #12
 8007254:	438a      	bics	r2, r1
 8007256:	1c11      	adds	r1, r2, #0
 8007258:	1c02      	adds	r2, r0, #0
 800725a:	430a      	orrs	r2, r1
 800725c:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800725e:	1cfb      	adds	r3, r7, #3
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2203      	movs	r2, #3
 8007264:	4013      	ands	r3, r2
 8007266:	b2da      	uxtb	r2, r3
 8007268:	193b      	adds	r3, r7, r4
 800726a:	2103      	movs	r1, #3
 800726c:	400a      	ands	r2, r1
 800726e:	0010      	movs	r0, r2
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	2103      	movs	r1, #3
 8007274:	438a      	bics	r2, r1
 8007276:	1c11      	adds	r1, r2, #0
 8007278:	1c02      	adds	r2, r0, #0
 800727a:	430a      	orrs	r2, r1
 800727c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800727e:	193a      	adds	r2, r7, r4
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	2301      	movs	r3, #1
 8007284:	2120      	movs	r1, #32
 8007286:	f7ff ff8c 	bl	80071a2 <lis2dw12_write_reg>
 800728a:	0003      	movs	r3, r0
 800728c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d108      	bne.n	80072a6 <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8007294:	230c      	movs	r3, #12
 8007296:	18fa      	adds	r2, r7, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	2301      	movs	r3, #1
 800729c:	2125      	movs	r1, #37	@ 0x25
 800729e:	f7ff ff5f 	bl	8007160 <lis2dw12_read_reg>
 80072a2:	0003      	movs	r3, r0
 80072a4:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11a      	bne.n	80072e2 <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80072ac:	1cfb      	adds	r3, r7, #3
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	091b      	lsrs	r3, r3, #4
 80072b2:	1c1a      	adds	r2, r3, #0
 80072b4:	2301      	movs	r3, #1
 80072b6:	4013      	ands	r3, r2
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	240c      	movs	r4, #12
 80072bc:	193b      	adds	r3, r7, r4
 80072be:	2101      	movs	r1, #1
 80072c0:	400a      	ands	r2, r1
 80072c2:	0090      	lsls	r0, r2, #2
 80072c4:	781a      	ldrb	r2, [r3, #0]
 80072c6:	2104      	movs	r1, #4
 80072c8:	438a      	bics	r2, r1
 80072ca:	1c11      	adds	r1, r2, #0
 80072cc:	1c02      	adds	r2, r0, #0
 80072ce:	430a      	orrs	r2, r1
 80072d0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80072d2:	193a      	adds	r2, r7, r4
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	2301      	movs	r3, #1
 80072d8:	2125      	movs	r1, #37	@ 0x25
 80072da:	f7ff ff62 	bl	80071a2 <lis2dw12_write_reg>
 80072de:	0003      	movs	r3, r0
 80072e0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80072e2:	697b      	ldr	r3, [r7, #20]
}
 80072e4:	0018      	movs	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b007      	add	sp, #28
 80072ea:	bd90      	pop	{r4, r7, pc}

080072ec <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	000a      	movs	r2, r1
 80072f6:	1cfb      	adds	r3, r7, #3
 80072f8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80072fa:	2410      	movs	r4, #16
 80072fc:	193a      	adds	r2, r7, r4
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	2301      	movs	r3, #1
 8007302:	2120      	movs	r1, #32
 8007304:	f7ff ff2c 	bl	8007160 <lis2dw12_read_reg>
 8007308:	0003      	movs	r3, r0
 800730a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d115      	bne.n	800733e <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8007312:	1cfb      	adds	r3, r7, #3
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	220f      	movs	r2, #15
 8007318:	4013      	ands	r3, r2
 800731a:	b2da      	uxtb	r2, r3
 800731c:	193b      	adds	r3, r7, r4
 800731e:	0110      	lsls	r0, r2, #4
 8007320:	781a      	ldrb	r2, [r3, #0]
 8007322:	210f      	movs	r1, #15
 8007324:	400a      	ands	r2, r1
 8007326:	1c11      	adds	r1, r2, #0
 8007328:	1c02      	adds	r2, r0, #0
 800732a:	430a      	orrs	r2, r1
 800732c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800732e:	193a      	adds	r2, r7, r4
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	2301      	movs	r3, #1
 8007334:	2120      	movs	r1, #32
 8007336:	f7ff ff34 	bl	80071a2 <lis2dw12_write_reg>
 800733a:	0003      	movs	r3, r0
 800733c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8007344:	230c      	movs	r3, #12
 8007346:	18fa      	adds	r2, r7, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	2301      	movs	r3, #1
 800734c:	2122      	movs	r1, #34	@ 0x22
 800734e:	f7ff ff07 	bl	8007160 <lis2dw12_read_reg>
 8007352:	0003      	movs	r3, r0
 8007354:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d11a      	bne.n	8007392 <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800735c:	1cfb      	adds	r3, r7, #3
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	1c1a      	adds	r2, r3, #0
 8007364:	2303      	movs	r3, #3
 8007366:	4013      	ands	r3, r2
 8007368:	b2da      	uxtb	r2, r3
 800736a:	240c      	movs	r4, #12
 800736c:	193b      	adds	r3, r7, r4
 800736e:	2103      	movs	r1, #3
 8007370:	400a      	ands	r2, r1
 8007372:	0010      	movs	r0, r2
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	2103      	movs	r1, #3
 8007378:	438a      	bics	r2, r1
 800737a:	1c11      	adds	r1, r2, #0
 800737c:	1c02      	adds	r2, r0, #0
 800737e:	430a      	orrs	r2, r1
 8007380:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8007382:	193a      	adds	r2, r7, r4
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	2301      	movs	r3, #1
 8007388:	2122      	movs	r1, #34	@ 0x22
 800738a:	f7ff ff0a 	bl	80071a2 <lis2dw12_write_reg>
 800738e:	0003      	movs	r3, r0
 8007390:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007392:	697b      	ldr	r3, [r7, #20]
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b007      	add	sp, #28
 800739a:	bd90      	pop	{r4, r7, pc}

0800739c <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800739c:	b590      	push	{r4, r7, lr}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	000a      	movs	r2, r1
 80073a6:	1cfb      	adds	r3, r7, #3
 80073a8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80073aa:	2408      	movs	r4, #8
 80073ac:	193a      	adds	r2, r7, r4
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	2301      	movs	r3, #1
 80073b2:	2121      	movs	r1, #33	@ 0x21
 80073b4:	f7ff fed4 	bl	8007160 <lis2dw12_read_reg>
 80073b8:	0003      	movs	r3, r0
 80073ba:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d117      	bne.n	80073f2 <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 80073c2:	1cfb      	adds	r3, r7, #3
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2201      	movs	r2, #1
 80073c8:	4013      	ands	r3, r2
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	193b      	adds	r3, r7, r4
 80073ce:	2101      	movs	r1, #1
 80073d0:	400a      	ands	r2, r1
 80073d2:	00d0      	lsls	r0, r2, #3
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	2108      	movs	r1, #8
 80073d8:	438a      	bics	r2, r1
 80073da:	1c11      	adds	r1, r2, #0
 80073dc:	1c02      	adds	r2, r0, #0
 80073de:	430a      	orrs	r2, r1
 80073e0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80073e2:	193a      	adds	r2, r7, r4
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	2301      	movs	r3, #1
 80073e8:	2121      	movs	r1, #33	@ 0x21
 80073ea:	f7ff feda 	bl	80071a2 <lis2dw12_write_reg>
 80073ee:	0003      	movs	r3, r0
 80073f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80073f2:	68fb      	ldr	r3, [r7, #12]
}
 80073f4:	0018      	movs	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b005      	add	sp, #20
 80073fa:	bd90      	pop	{r4, r7, pc}

080073fc <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80073fc:	b590      	push	{r4, r7, lr}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	000a      	movs	r2, r1
 8007406:	1cfb      	adds	r3, r7, #3
 8007408:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800740a:	2408      	movs	r4, #8
 800740c:	193a      	adds	r2, r7, r4
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	2301      	movs	r3, #1
 8007412:	2125      	movs	r1, #37	@ 0x25
 8007414:	f7ff fea4 	bl	8007160 <lis2dw12_read_reg>
 8007418:	0003      	movs	r3, r0
 800741a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d117      	bne.n	8007452 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8007422:	1cfb      	adds	r3, r7, #3
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2203      	movs	r2, #3
 8007428:	4013      	ands	r3, r2
 800742a:	b2da      	uxtb	r2, r3
 800742c:	193b      	adds	r3, r7, r4
 800742e:	2103      	movs	r1, #3
 8007430:	400a      	ands	r2, r1
 8007432:	0110      	lsls	r0, r2, #4
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	2130      	movs	r1, #48	@ 0x30
 8007438:	438a      	bics	r2, r1
 800743a:	1c11      	adds	r1, r2, #0
 800743c:	1c02      	adds	r2, r0, #0
 800743e:	430a      	orrs	r2, r1
 8007440:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8007442:	193a      	adds	r2, r7, r4
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	2301      	movs	r3, #1
 8007448:	2125      	movs	r1, #37	@ 0x25
 800744a:	f7ff feaa 	bl	80071a2 <lis2dw12_write_reg>
 800744e:	0003      	movs	r3, r0
 8007450:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007452:	68fb      	ldr	r3, [r7, #12]
}
 8007454:	0018      	movs	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	b005      	add	sp, #20
 800745a:	bd90      	pop	{r4, r7, pc}

0800745c <lis2dw12_flag_data_ready_get>:
  * @param  val      change the values of drdy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  lis2dw12_status_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) &reg, 1);
 8007466:	2408      	movs	r4, #8
 8007468:	193a      	adds	r2, r7, r4
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	2301      	movs	r3, #1
 800746e:	2127      	movs	r1, #39	@ 0x27
 8007470:	f7ff fe76 	bl	8007160 <lis2dw12_read_reg>
 8007474:	0003      	movs	r3, r0
 8007476:	60fb      	str	r3, [r7, #12]
  *val = reg.drdy;
 8007478:	193b      	adds	r3, r7, r4
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	07db      	lsls	r3, r3, #31
 800747e:	0fdb      	lsrs	r3, r3, #31
 8007480:	b2db      	uxtb	r3, r3
 8007482:	001a      	movs	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	701a      	strb	r2, [r3, #0]

  return ret;
 8007488:	68fb      	ldr	r3, [r7, #12]
}
 800748a:	0018      	movs	r0, r3
 800748c:	46bd      	mov	sp, r7
 800748e:	b005      	add	sp, #20
 8007490:	bd90      	pop	{r4, r7, pc}

08007492 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007492:	b590      	push	{r4, r7, lr}
 8007494:	b087      	sub	sp, #28
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800749c:	240c      	movs	r4, #12
 800749e:	193a      	adds	r2, r7, r4
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	2306      	movs	r3, #6
 80074a4:	2128      	movs	r1, #40	@ 0x28
 80074a6:	f7ff fe5b 	bl	8007160 <lis2dw12_read_reg>
 80074aa:	0003      	movs	r3, r0
 80074ac:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 80074ae:	0021      	movs	r1, r4
 80074b0:	187b      	adds	r3, r7, r1
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	b21a      	sxth	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2200      	movs	r2, #0
 80074be:	5e9b      	ldrsh	r3, [r3, r2]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	187a      	adds	r2, r7, r1
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	b21a      	sxth	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80074d4:	187b      	adds	r3, r7, r1
 80074d6:	78da      	ldrb	r2, [r3, #3]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	3302      	adds	r3, #2
 80074dc:	b212      	sxth	r2, r2
 80074de:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	3302      	adds	r3, #2
 80074e4:	2200      	movs	r2, #0
 80074e6:	5e9b      	ldrsh	r3, [r3, r2]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	187a      	adds	r2, r7, r1
 80074f0:	7892      	ldrb	r2, [r2, #2]
 80074f2:	189b      	adds	r3, r3, r2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	3302      	adds	r3, #2
 80074fa:	b212      	sxth	r2, r2
 80074fc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	795a      	ldrb	r2, [r3, #5]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	3304      	adds	r3, #4
 8007506:	b212      	sxth	r2, r2
 8007508:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	3304      	adds	r3, #4
 800750e:	2200      	movs	r2, #0
 8007510:	5e9b      	ldrsh	r3, [r3, r2]
 8007512:	b29b      	uxth	r3, r3
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	b29b      	uxth	r3, r3
 8007518:	187a      	adds	r2, r7, r1
 800751a:	7912      	ldrb	r2, [r2, #4]
 800751c:	189b      	adds	r3, r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	3304      	adds	r3, #4
 8007524:	b212      	sxth	r2, r2
 8007526:	801a      	strh	r2, [r3, #0]

  return ret;
 8007528:	697b      	ldr	r3, [r7, #20]
}
 800752a:	0018      	movs	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	b007      	add	sp, #28
 8007530:	bd90      	pop	{r4, r7, pc}

08007532 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	2301      	movs	r3, #1
 8007542:	210f      	movs	r1, #15
 8007544:	f7ff fe0c 	bl	8007160 <lis2dw12_read_reg>
 8007548:	0003      	movs	r3, r0
 800754a:	60fb      	str	r3, [r7, #12]

  return ret;
 800754c:	68fb      	ldr	r3, [r7, #12]
}
 800754e:	0018      	movs	r0, r3
 8007550:	46bd      	mov	sp, r7
 8007552:	b004      	add	sp, #16
 8007554:	bd80      	pop	{r7, pc}

08007556 <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007556:	b590      	push	{r4, r7, lr}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	000a      	movs	r2, r1
 8007560:	1cfb      	adds	r3, r7, #3
 8007562:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8007564:	2408      	movs	r4, #8
 8007566:	193a      	adds	r2, r7, r4
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	2301      	movs	r3, #1
 800756c:	2121      	movs	r1, #33	@ 0x21
 800756e:	f7ff fdf7 	bl	8007160 <lis2dw12_read_reg>
 8007572:	0003      	movs	r3, r0
 8007574:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d117      	bne.n	80075ac <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 800757c:	1cfb      	adds	r3, r7, #3
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2201      	movs	r2, #1
 8007582:	4013      	ands	r3, r2
 8007584:	b2da      	uxtb	r2, r3
 8007586:	193b      	adds	r3, r7, r4
 8007588:	2101      	movs	r1, #1
 800758a:	400a      	ands	r2, r1
 800758c:	0190      	lsls	r0, r2, #6
 800758e:	781a      	ldrb	r2, [r3, #0]
 8007590:	2140      	movs	r1, #64	@ 0x40
 8007592:	438a      	bics	r2, r1
 8007594:	1c11      	adds	r1, r2, #0
 8007596:	1c02      	adds	r2, r0, #0
 8007598:	430a      	orrs	r2, r1
 800759a:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800759c:	193a      	adds	r2, r7, r4
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	2301      	movs	r3, #1
 80075a2:	2121      	movs	r1, #33	@ 0x21
 80075a4:	f7ff fdfd 	bl	80071a2 <lis2dw12_write_reg>
 80075a8:	0003      	movs	r3, r0
 80075aa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	0018      	movs	r0, r3
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b005      	add	sp, #20
 80075b4:	bd90      	pop	{r4, r7, pc}

080075b6 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80075b6:	b590      	push	{r4, r7, lr}
 80075b8:	b085      	sub	sp, #20
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80075c0:	2408      	movs	r4, #8
 80075c2:	193a      	adds	r2, r7, r4
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	2301      	movs	r3, #1
 80075c8:	2121      	movs	r1, #33	@ 0x21
 80075ca:	f7ff fdc9 	bl	8007160 <lis2dw12_read_reg>
 80075ce:	0003      	movs	r3, r0
 80075d0:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 80075d2:	193b      	adds	r3, r7, r4
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	065b      	lsls	r3, r3, #25
 80075d8:	0fdb      	lsrs	r3, r3, #31
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	001a      	movs	r2, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	701a      	strb	r2, [r3, #0]

  return ret;
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	0018      	movs	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b005      	add	sp, #20
 80075ea:	bd90      	pop	{r4, r7, pc}

080075ec <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	000a      	movs	r2, r1
 80075f6:	1cfb      	adds	r3, r7, #3
 80075f8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80075fa:	2410      	movs	r4, #16
 80075fc:	193a      	adds	r2, r7, r4
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	2301      	movs	r3, #1
 8007602:	2125      	movs	r1, #37	@ 0x25
 8007604:	f7ff fdac 	bl	8007160 <lis2dw12_read_reg>
 8007608:	0003      	movs	r3, r0
 800760a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d119      	bne.n	8007646 <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8007612:	1cfb      	adds	r3, r7, #3
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	091b      	lsrs	r3, r3, #4
 8007618:	1c1a      	adds	r2, r3, #0
 800761a:	2301      	movs	r3, #1
 800761c:	4013      	ands	r3, r2
 800761e:	b2da      	uxtb	r2, r3
 8007620:	193b      	adds	r3, r7, r4
 8007622:	2101      	movs	r1, #1
 8007624:	400a      	ands	r2, r1
 8007626:	00d0      	lsls	r0, r2, #3
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	2108      	movs	r1, #8
 800762c:	438a      	bics	r2, r1
 800762e:	1c11      	adds	r1, r2, #0
 8007630:	1c02      	adds	r2, r0, #0
 8007632:	430a      	orrs	r2, r1
 8007634:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8007636:	193a      	adds	r2, r7, r4
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	2301      	movs	r3, #1
 800763c:	2125      	movs	r1, #37	@ 0x25
 800763e:	f7ff fdb0 	bl	80071a2 <lis2dw12_write_reg>
 8007642:	0003      	movs	r3, r0
 8007644:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 800764c:	230c      	movs	r3, #12
 800764e:	18fa      	adds	r2, r7, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	2301      	movs	r3, #1
 8007654:	213f      	movs	r1, #63	@ 0x3f
 8007656:	f7ff fd83 	bl	8007160 <lis2dw12_read_reg>
 800765a:	0003      	movs	r3, r0
 800765c:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d118      	bne.n	8007696 <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8007664:	1cfb      	adds	r3, r7, #3
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	4013      	ands	r3, r2
 800766c:	b2da      	uxtb	r2, r3
 800766e:	240c      	movs	r4, #12
 8007670:	193b      	adds	r3, r7, r4
 8007672:	2101      	movs	r1, #1
 8007674:	400a      	ands	r2, r1
 8007676:	0110      	lsls	r0, r2, #4
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	2110      	movs	r1, #16
 800767c:	438a      	bics	r2, r1
 800767e:	1c11      	adds	r1, r2, #0
 8007680:	1c02      	adds	r2, r0, #0
 8007682:	430a      	orrs	r2, r1
 8007684:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8007686:	193a      	adds	r2, r7, r4
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	2301      	movs	r3, #1
 800768c:	213f      	movs	r1, #63	@ 0x3f
 800768e:	f7ff fd88 	bl	80071a2 <lis2dw12_write_reg>
 8007692:	0003      	movs	r3, r0
 8007694:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8007696:	697b      	ldr	r3, [r7, #20]
}
 8007698:	0018      	movs	r0, r3
 800769a:	46bd      	mov	sp, r7
 800769c:	b007      	add	sp, #28
 800769e:	bd90      	pop	{r4, r7, pc}

080076a0 <lis2dw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_bandwidth_set(stmdev_ctx_t *ctx,
                                      lis2dw12_bw_filt_t val)
{
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	000a      	movs	r2, r1
 80076aa:	1cfb      	adds	r3, r7, #3
 80076ac:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80076ae:	2408      	movs	r4, #8
 80076b0:	193a      	adds	r2, r7, r4
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	2301      	movs	r3, #1
 80076b6:	2125      	movs	r1, #37	@ 0x25
 80076b8:	f7ff fd52 	bl	8007160 <lis2dw12_read_reg>
 80076bc:	0003      	movs	r3, r0
 80076be:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d115      	bne.n	80076f2 <lis2dw12_filter_bandwidth_set+0x52>
  {
    reg.bw_filt = (uint8_t) val;
 80076c6:	1cfb      	adds	r3, r7, #3
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2203      	movs	r2, #3
 80076cc:	4013      	ands	r3, r2
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	193b      	adds	r3, r7, r4
 80076d2:	0190      	lsls	r0, r2, #6
 80076d4:	781a      	ldrb	r2, [r3, #0]
 80076d6:	213f      	movs	r1, #63	@ 0x3f
 80076d8:	400a      	ands	r2, r1
 80076da:	1c11      	adds	r1, r2, #0
 80076dc:	1c02      	adds	r2, r0, #0
 80076de:	430a      	orrs	r2, r1
 80076e0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80076e2:	193a      	adds	r2, r7, r4
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	2301      	movs	r3, #1
 80076e8:	2125      	movs	r1, #37	@ 0x25
 80076ea:	f7ff fd5a 	bl	80071a2 <lis2dw12_write_reg>
 80076ee:	0003      	movs	r3, r0
 80076f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076f2:	68fb      	ldr	r3, [r7, #12]
}
 80076f4:	0018      	movs	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b005      	add	sp, #20
 80076fa:	bd90      	pop	{r4, r7, pc}

080076fc <memset>:
 80076fc:	0003      	movs	r3, r0
 80076fe:	1882      	adds	r2, r0, r2
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	7019      	strb	r1, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>

0800770c <__errno>:
 800770c:	4b01      	ldr	r3, [pc, #4]	@ (8007714 <__errno+0x8>)
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	4770      	bx	lr
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	2000000c 	.word	0x2000000c

08007718 <__libc_init_array>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	2600      	movs	r6, #0
 800771c:	4c0c      	ldr	r4, [pc, #48]	@ (8007750 <__libc_init_array+0x38>)
 800771e:	4d0d      	ldr	r5, [pc, #52]	@ (8007754 <__libc_init_array+0x3c>)
 8007720:	1b64      	subs	r4, r4, r5
 8007722:	10a4      	asrs	r4, r4, #2
 8007724:	42a6      	cmp	r6, r4
 8007726:	d109      	bne.n	800773c <__libc_init_array+0x24>
 8007728:	2600      	movs	r6, #0
 800772a:	f000 fb51 	bl	8007dd0 <_init>
 800772e:	4c0a      	ldr	r4, [pc, #40]	@ (8007758 <__libc_init_array+0x40>)
 8007730:	4d0a      	ldr	r5, [pc, #40]	@ (800775c <__libc_init_array+0x44>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	42a6      	cmp	r6, r4
 8007738:	d105      	bne.n	8007746 <__libc_init_array+0x2e>
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	00b3      	lsls	r3, r6, #2
 800773e:	58eb      	ldr	r3, [r5, r3]
 8007740:	4798      	blx	r3
 8007742:	3601      	adds	r6, #1
 8007744:	e7ee      	b.n	8007724 <__libc_init_array+0xc>
 8007746:	00b3      	lsls	r3, r6, #2
 8007748:	58eb      	ldr	r3, [r5, r3]
 800774a:	4798      	blx	r3
 800774c:	3601      	adds	r6, #1
 800774e:	e7f2      	b.n	8007736 <__libc_init_array+0x1e>
 8007750:	08007f30 	.word	0x08007f30
 8007754:	08007f30 	.word	0x08007f30
 8007758:	08007f34 	.word	0x08007f34
 800775c:	08007f30 	.word	0x08007f30

08007760 <atan2>:
 8007760:	b510      	push	{r4, lr}
 8007762:	f000 f90b 	bl	800797c <__ieee754_atan2>
 8007766:	bd10      	pop	{r4, pc}

08007768 <sqrt>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	0004      	movs	r4, r0
 800776c:	000d      	movs	r5, r1
 800776e:	f000 f821 	bl	80077b4 <__ieee754_sqrt>
 8007772:	0022      	movs	r2, r4
 8007774:	0006      	movs	r6, r0
 8007776:	000f      	movs	r7, r1
 8007778:	002b      	movs	r3, r5
 800777a:	0020      	movs	r0, r4
 800777c:	0029      	movs	r1, r5
 800777e:	f7fb f9f1 	bl	8002b64 <__aeabi_dcmpun>
 8007782:	2800      	cmp	r0, #0
 8007784:	d113      	bne.n	80077ae <sqrt+0x46>
 8007786:	2200      	movs	r2, #0
 8007788:	2300      	movs	r3, #0
 800778a:	0020      	movs	r0, r4
 800778c:	0029      	movs	r1, r5
 800778e:	f7f8 fe43 	bl	8000418 <__aeabi_dcmplt>
 8007792:	2800      	cmp	r0, #0
 8007794:	d00b      	beq.n	80077ae <sqrt+0x46>
 8007796:	f7ff ffb9 	bl	800770c <__errno>
 800779a:	2321      	movs	r3, #33	@ 0x21
 800779c:	2200      	movs	r2, #0
 800779e:	6003      	str	r3, [r0, #0]
 80077a0:	2300      	movs	r3, #0
 80077a2:	0010      	movs	r0, r2
 80077a4:	0019      	movs	r1, r3
 80077a6:	f7f9 feb3 	bl	8001510 <__aeabi_ddiv>
 80077aa:	0006      	movs	r6, r0
 80077ac:	000f      	movs	r7, r1
 80077ae:	0030      	movs	r0, r6
 80077b0:	0039      	movs	r1, r7
 80077b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077b4 <__ieee754_sqrt>:
 80077b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077b6:	000a      	movs	r2, r1
 80077b8:	000d      	movs	r5, r1
 80077ba:	496b      	ldr	r1, [pc, #428]	@ (8007968 <__ieee754_sqrt+0x1b4>)
 80077bc:	0004      	movs	r4, r0
 80077be:	0003      	movs	r3, r0
 80077c0:	0008      	movs	r0, r1
 80077c2:	b087      	sub	sp, #28
 80077c4:	4028      	ands	r0, r5
 80077c6:	4288      	cmp	r0, r1
 80077c8:	d111      	bne.n	80077ee <__ieee754_sqrt+0x3a>
 80077ca:	0022      	movs	r2, r4
 80077cc:	002b      	movs	r3, r5
 80077ce:	0020      	movs	r0, r4
 80077d0:	0029      	movs	r1, r5
 80077d2:	f7fa fad7 	bl	8001d84 <__aeabi_dmul>
 80077d6:	0002      	movs	r2, r0
 80077d8:	000b      	movs	r3, r1
 80077da:	0020      	movs	r0, r4
 80077dc:	0029      	movs	r1, r5
 80077de:	f7f9 fad1 	bl	8000d84 <__aeabi_dadd>
 80077e2:	0004      	movs	r4, r0
 80077e4:	000d      	movs	r5, r1
 80077e6:	0020      	movs	r0, r4
 80077e8:	0029      	movs	r1, r5
 80077ea:	b007      	add	sp, #28
 80077ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	dc11      	bgt.n	8007816 <__ieee754_sqrt+0x62>
 80077f2:	0069      	lsls	r1, r5, #1
 80077f4:	0849      	lsrs	r1, r1, #1
 80077f6:	4321      	orrs	r1, r4
 80077f8:	d0f5      	beq.n	80077e6 <__ieee754_sqrt+0x32>
 80077fa:	2000      	movs	r0, #0
 80077fc:	4285      	cmp	r5, r0
 80077fe:	d010      	beq.n	8007822 <__ieee754_sqrt+0x6e>
 8007800:	0022      	movs	r2, r4
 8007802:	002b      	movs	r3, r5
 8007804:	0020      	movs	r0, r4
 8007806:	0029      	movs	r1, r5
 8007808:	f7fa fda2 	bl	8002350 <__aeabi_dsub>
 800780c:	0002      	movs	r2, r0
 800780e:	000b      	movs	r3, r1
 8007810:	f7f9 fe7e 	bl	8001510 <__aeabi_ddiv>
 8007814:	e7e5      	b.n	80077e2 <__ieee754_sqrt+0x2e>
 8007816:	1528      	asrs	r0, r5, #20
 8007818:	d115      	bne.n	8007846 <__ieee754_sqrt+0x92>
 800781a:	2480      	movs	r4, #128	@ 0x80
 800781c:	2100      	movs	r1, #0
 800781e:	0364      	lsls	r4, r4, #13
 8007820:	e007      	b.n	8007832 <__ieee754_sqrt+0x7e>
 8007822:	0ada      	lsrs	r2, r3, #11
 8007824:	3815      	subs	r0, #21
 8007826:	055b      	lsls	r3, r3, #21
 8007828:	2a00      	cmp	r2, #0
 800782a:	d0fa      	beq.n	8007822 <__ieee754_sqrt+0x6e>
 800782c:	e7f5      	b.n	800781a <__ieee754_sqrt+0x66>
 800782e:	0052      	lsls	r2, r2, #1
 8007830:	3101      	adds	r1, #1
 8007832:	4222      	tst	r2, r4
 8007834:	d0fb      	beq.n	800782e <__ieee754_sqrt+0x7a>
 8007836:	1e4c      	subs	r4, r1, #1
 8007838:	1b00      	subs	r0, r0, r4
 800783a:	2420      	movs	r4, #32
 800783c:	001d      	movs	r5, r3
 800783e:	1a64      	subs	r4, r4, r1
 8007840:	40e5      	lsrs	r5, r4
 8007842:	408b      	lsls	r3, r1
 8007844:	432a      	orrs	r2, r5
 8007846:	4949      	ldr	r1, [pc, #292]	@ (800796c <__ieee754_sqrt+0x1b8>)
 8007848:	0312      	lsls	r2, r2, #12
 800784a:	1844      	adds	r4, r0, r1
 800784c:	2180      	movs	r1, #128	@ 0x80
 800784e:	0b12      	lsrs	r2, r2, #12
 8007850:	0349      	lsls	r1, r1, #13
 8007852:	4311      	orrs	r1, r2
 8007854:	07c0      	lsls	r0, r0, #31
 8007856:	d403      	bmi.n	8007860 <__ieee754_sqrt+0xac>
 8007858:	0fda      	lsrs	r2, r3, #31
 800785a:	0049      	lsls	r1, r1, #1
 800785c:	1851      	adds	r1, r2, r1
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	2500      	movs	r5, #0
 8007862:	1062      	asrs	r2, r4, #1
 8007864:	0049      	lsls	r1, r1, #1
 8007866:	2480      	movs	r4, #128	@ 0x80
 8007868:	9205      	str	r2, [sp, #20]
 800786a:	0fda      	lsrs	r2, r3, #31
 800786c:	1852      	adds	r2, r2, r1
 800786e:	2016      	movs	r0, #22
 8007870:	0029      	movs	r1, r5
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	03a4      	lsls	r4, r4, #14
 8007876:	190e      	adds	r6, r1, r4
 8007878:	4296      	cmp	r6, r2
 800787a:	dc02      	bgt.n	8007882 <__ieee754_sqrt+0xce>
 800787c:	1931      	adds	r1, r6, r4
 800787e:	1b92      	subs	r2, r2, r6
 8007880:	192d      	adds	r5, r5, r4
 8007882:	0fde      	lsrs	r6, r3, #31
 8007884:	0052      	lsls	r2, r2, #1
 8007886:	3801      	subs	r0, #1
 8007888:	1992      	adds	r2, r2, r6
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	0864      	lsrs	r4, r4, #1
 800788e:	2800      	cmp	r0, #0
 8007890:	d1f1      	bne.n	8007876 <__ieee754_sqrt+0xc2>
 8007892:	2620      	movs	r6, #32
 8007894:	2780      	movs	r7, #128	@ 0x80
 8007896:	0004      	movs	r4, r0
 8007898:	9604      	str	r6, [sp, #16]
 800789a:	063f      	lsls	r7, r7, #24
 800789c:	183e      	adds	r6, r7, r0
 800789e:	46b4      	mov	ip, r6
 80078a0:	428a      	cmp	r2, r1
 80078a2:	dc02      	bgt.n	80078aa <__ieee754_sqrt+0xf6>
 80078a4:	d114      	bne.n	80078d0 <__ieee754_sqrt+0x11c>
 80078a6:	429e      	cmp	r6, r3
 80078a8:	d812      	bhi.n	80078d0 <__ieee754_sqrt+0x11c>
 80078aa:	4660      	mov	r0, ip
 80078ac:	4666      	mov	r6, ip
 80078ae:	19c0      	adds	r0, r0, r7
 80078b0:	9100      	str	r1, [sp, #0]
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	da03      	bge.n	80078be <__ieee754_sqrt+0x10a>
 80078b6:	43c6      	mvns	r6, r0
 80078b8:	0ff6      	lsrs	r6, r6, #31
 80078ba:	198e      	adds	r6, r1, r6
 80078bc:	9600      	str	r6, [sp, #0]
 80078be:	1a52      	subs	r2, r2, r1
 80078c0:	4563      	cmp	r3, ip
 80078c2:	4189      	sbcs	r1, r1
 80078c4:	4249      	negs	r1, r1
 80078c6:	1a52      	subs	r2, r2, r1
 80078c8:	4661      	mov	r1, ip
 80078ca:	1a5b      	subs	r3, r3, r1
 80078cc:	9900      	ldr	r1, [sp, #0]
 80078ce:	19e4      	adds	r4, r4, r7
 80078d0:	0fde      	lsrs	r6, r3, #31
 80078d2:	0052      	lsls	r2, r2, #1
 80078d4:	1992      	adds	r2, r2, r6
 80078d6:	9e04      	ldr	r6, [sp, #16]
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	3e01      	subs	r6, #1
 80078dc:	087f      	lsrs	r7, r7, #1
 80078de:	9604      	str	r6, [sp, #16]
 80078e0:	2e00      	cmp	r6, #0
 80078e2:	d1db      	bne.n	800789c <__ieee754_sqrt+0xe8>
 80078e4:	431a      	orrs	r2, r3
 80078e6:	d01f      	beq.n	8007928 <__ieee754_sqrt+0x174>
 80078e8:	4e21      	ldr	r6, [pc, #132]	@ (8007970 <__ieee754_sqrt+0x1bc>)
 80078ea:	4f22      	ldr	r7, [pc, #136]	@ (8007974 <__ieee754_sqrt+0x1c0>)
 80078ec:	6830      	ldr	r0, [r6, #0]
 80078ee:	6871      	ldr	r1, [r6, #4]
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	9200      	str	r2, [sp, #0]
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	6832      	ldr	r2, [r6, #0]
 80078fa:	6873      	ldr	r3, [r6, #4]
 80078fc:	9202      	str	r2, [sp, #8]
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	9a00      	ldr	r2, [sp, #0]
 8007902:	9b01      	ldr	r3, [sp, #4]
 8007904:	f7fa fd24 	bl	8002350 <__aeabi_dsub>
 8007908:	0002      	movs	r2, r0
 800790a:	000b      	movs	r3, r1
 800790c:	9802      	ldr	r0, [sp, #8]
 800790e:	9903      	ldr	r1, [sp, #12]
 8007910:	f7f8 fd8c 	bl	800042c <__aeabi_dcmple>
 8007914:	2800      	cmp	r0, #0
 8007916:	d007      	beq.n	8007928 <__ieee754_sqrt+0x174>
 8007918:	6830      	ldr	r0, [r6, #0]
 800791a:	6871      	ldr	r1, [r6, #4]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	1c67      	adds	r7, r4, #1
 8007922:	d10c      	bne.n	800793e <__ieee754_sqrt+0x18a>
 8007924:	9c04      	ldr	r4, [sp, #16]
 8007926:	3501      	adds	r5, #1
 8007928:	4a13      	ldr	r2, [pc, #76]	@ (8007978 <__ieee754_sqrt+0x1c4>)
 800792a:	106b      	asrs	r3, r5, #1
 800792c:	189b      	adds	r3, r3, r2
 800792e:	9a05      	ldr	r2, [sp, #20]
 8007930:	07ed      	lsls	r5, r5, #31
 8007932:	0864      	lsrs	r4, r4, #1
 8007934:	0512      	lsls	r2, r2, #20
 8007936:	4325      	orrs	r5, r4
 8007938:	0028      	movs	r0, r5
 800793a:	18d1      	adds	r1, r2, r3
 800793c:	e751      	b.n	80077e2 <__ieee754_sqrt+0x2e>
 800793e:	f7f9 fa21 	bl	8000d84 <__aeabi_dadd>
 8007942:	6877      	ldr	r7, [r6, #4]
 8007944:	6836      	ldr	r6, [r6, #0]
 8007946:	0002      	movs	r2, r0
 8007948:	000b      	movs	r3, r1
 800794a:	0030      	movs	r0, r6
 800794c:	0039      	movs	r1, r7
 800794e:	f7f8 fd63 	bl	8000418 <__aeabi_dcmplt>
 8007952:	2800      	cmp	r0, #0
 8007954:	d004      	beq.n	8007960 <__ieee754_sqrt+0x1ac>
 8007956:	3402      	adds	r4, #2
 8007958:	4263      	negs	r3, r4
 800795a:	4163      	adcs	r3, r4
 800795c:	18ed      	adds	r5, r5, r3
 800795e:	e7e3      	b.n	8007928 <__ieee754_sqrt+0x174>
 8007960:	2301      	movs	r3, #1
 8007962:	3401      	adds	r4, #1
 8007964:	439c      	bics	r4, r3
 8007966:	e7df      	b.n	8007928 <__ieee754_sqrt+0x174>
 8007968:	7ff00000 	.word	0x7ff00000
 800796c:	fffffc01 	.word	0xfffffc01
 8007970:	08007eb8 	.word	0x08007eb8
 8007974:	08007eb0 	.word	0x08007eb0
 8007978:	3fe00000 	.word	0x3fe00000

0800797c <__ieee754_atan2>:
 800797c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800797e:	4254      	negs	r4, r2
 8007980:	005e      	lsls	r6, r3, #1
 8007982:	4314      	orrs	r4, r2
 8007984:	4f44      	ldr	r7, [pc, #272]	@ (8007a98 <__ieee754_atan2+0x11c>)
 8007986:	b085      	sub	sp, #20
 8007988:	0876      	lsrs	r6, r6, #1
 800798a:	0fe4      	lsrs	r4, r4, #31
 800798c:	9302      	str	r3, [sp, #8]
 800798e:	4334      	orrs	r4, r6
 8007990:	42bc      	cmp	r4, r7
 8007992:	d809      	bhi.n	80079a8 <__ieee754_atan2+0x2c>
 8007994:	4244      	negs	r4, r0
 8007996:	004d      	lsls	r5, r1, #1
 8007998:	4304      	orrs	r4, r0
 800799a:	086d      	lsrs	r5, r5, #1
 800799c:	0fe4      	lsrs	r4, r4, #31
 800799e:	9101      	str	r1, [sp, #4]
 80079a0:	9003      	str	r0, [sp, #12]
 80079a2:	432c      	orrs	r4, r5
 80079a4:	42bc      	cmp	r4, r7
 80079a6:	d903      	bls.n	80079b0 <__ieee754_atan2+0x34>
 80079a8:	f7f9 f9ec 	bl	8000d84 <__aeabi_dadd>
 80079ac:	b005      	add	sp, #20
 80079ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b0:	4c3a      	ldr	r4, [pc, #232]	@ (8007a9c <__ieee754_atan2+0x120>)
 80079b2:	191c      	adds	r4, r3, r4
 80079b4:	4314      	orrs	r4, r2
 80079b6:	d102      	bne.n	80079be <__ieee754_atan2+0x42>
 80079b8:	f000 f886 	bl	8007ac8 <atan>
 80079bc:	e7f6      	b.n	80079ac <__ieee754_atan2+0x30>
 80079be:	179c      	asrs	r4, r3, #30
 80079c0:	46a4      	mov	ip, r4
 80079c2:	2402      	movs	r4, #2
 80079c4:	4667      	mov	r7, ip
 80079c6:	403c      	ands	r4, r7
 80079c8:	9f01      	ldr	r7, [sp, #4]
 80079ca:	0fff      	lsrs	r7, r7, #31
 80079cc:	433c      	orrs	r4, r7
 80079ce:	9f03      	ldr	r7, [sp, #12]
 80079d0:	432f      	orrs	r7, r5
 80079d2:	d106      	bne.n	80079e2 <__ieee754_atan2+0x66>
 80079d4:	2c02      	cmp	r4, #2
 80079d6:	d056      	beq.n	8007a86 <__ieee754_atan2+0x10a>
 80079d8:	2c03      	cmp	r4, #3
 80079da:	d1e7      	bne.n	80079ac <__ieee754_atan2+0x30>
 80079dc:	4830      	ldr	r0, [pc, #192]	@ (8007aa0 <__ieee754_atan2+0x124>)
 80079de:	4931      	ldr	r1, [pc, #196]	@ (8007aa4 <__ieee754_atan2+0x128>)
 80079e0:	e7e4      	b.n	80079ac <__ieee754_atan2+0x30>
 80079e2:	0037      	movs	r7, r6
 80079e4:	4317      	orrs	r7, r2
 80079e6:	d105      	bne.n	80079f4 <__ieee754_atan2+0x78>
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	482d      	ldr	r0, [pc, #180]	@ (8007aa0 <__ieee754_atan2+0x124>)
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	db50      	blt.n	8007a92 <__ieee754_atan2+0x116>
 80079f0:	492d      	ldr	r1, [pc, #180]	@ (8007aa8 <__ieee754_atan2+0x12c>)
 80079f2:	e7db      	b.n	80079ac <__ieee754_atan2+0x30>
 80079f4:	4f28      	ldr	r7, [pc, #160]	@ (8007a98 <__ieee754_atan2+0x11c>)
 80079f6:	42be      	cmp	r6, r7
 80079f8:	d110      	bne.n	8007a1c <__ieee754_atan2+0xa0>
 80079fa:	3c01      	subs	r4, #1
 80079fc:	42b5      	cmp	r5, r6
 80079fe:	d105      	bne.n	8007a0c <__ieee754_atan2+0x90>
 8007a00:	4b2a      	ldr	r3, [pc, #168]	@ (8007aac <__ieee754_atan2+0x130>)
 8007a02:	2c02      	cmp	r4, #2
 8007a04:	d905      	bls.n	8007a12 <__ieee754_atan2+0x96>
 8007a06:	4826      	ldr	r0, [pc, #152]	@ (8007aa0 <__ieee754_atan2+0x124>)
 8007a08:	4929      	ldr	r1, [pc, #164]	@ (8007ab0 <__ieee754_atan2+0x134>)
 8007a0a:	e7cf      	b.n	80079ac <__ieee754_atan2+0x30>
 8007a0c:	2c02      	cmp	r4, #2
 8007a0e:	d83d      	bhi.n	8007a8c <__ieee754_atan2+0x110>
 8007a10:	4b28      	ldr	r3, [pc, #160]	@ (8007ab4 <__ieee754_atan2+0x138>)
 8007a12:	00e4      	lsls	r4, r4, #3
 8007a14:	191b      	adds	r3, r3, r4
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	6859      	ldr	r1, [r3, #4]
 8007a1a:	e7c7      	b.n	80079ac <__ieee754_atan2+0x30>
 8007a1c:	4f1e      	ldr	r7, [pc, #120]	@ (8007a98 <__ieee754_atan2+0x11c>)
 8007a1e:	42bd      	cmp	r5, r7
 8007a20:	d0e2      	beq.n	80079e8 <__ieee754_atan2+0x6c>
 8007a22:	1bad      	subs	r5, r5, r6
 8007a24:	152d      	asrs	r5, r5, #20
 8007a26:	2d3c      	cmp	r5, #60	@ 0x3c
 8007a28:	dc17      	bgt.n	8007a5a <__ieee754_atan2+0xde>
 8007a2a:	9e02      	ldr	r6, [sp, #8]
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	da01      	bge.n	8007a34 <__ieee754_atan2+0xb8>
 8007a30:	353c      	adds	r5, #60	@ 0x3c
 8007a32:	db15      	blt.n	8007a60 <__ieee754_atan2+0xe4>
 8007a34:	f7f9 fd6c 	bl	8001510 <__aeabi_ddiv>
 8007a38:	f000 f9c6 	bl	8007dc8 <fabs>
 8007a3c:	f000 f844 	bl	8007ac8 <atan>
 8007a40:	2c01      	cmp	r4, #1
 8007a42:	d010      	beq.n	8007a66 <__ieee754_atan2+0xea>
 8007a44:	2c02      	cmp	r4, #2
 8007a46:	d013      	beq.n	8007a70 <__ieee754_atan2+0xf4>
 8007a48:	2c00      	cmp	r4, #0
 8007a4a:	d0af      	beq.n	80079ac <__ieee754_atan2+0x30>
 8007a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ab8 <__ieee754_atan2+0x13c>)
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007abc <__ieee754_atan2+0x140>)
 8007a50:	f7fa fc7e 	bl	8002350 <__aeabi_dsub>
 8007a54:	4a12      	ldr	r2, [pc, #72]	@ (8007aa0 <__ieee754_atan2+0x124>)
 8007a56:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac0 <__ieee754_atan2+0x144>)
 8007a58:	e012      	b.n	8007a80 <__ieee754_atan2+0x104>
 8007a5a:	4811      	ldr	r0, [pc, #68]	@ (8007aa0 <__ieee754_atan2+0x124>)
 8007a5c:	4912      	ldr	r1, [pc, #72]	@ (8007aa8 <__ieee754_atan2+0x12c>)
 8007a5e:	e7ef      	b.n	8007a40 <__ieee754_atan2+0xc4>
 8007a60:	2000      	movs	r0, #0
 8007a62:	2100      	movs	r1, #0
 8007a64:	e7ec      	b.n	8007a40 <__ieee754_atan2+0xc4>
 8007a66:	2480      	movs	r4, #128	@ 0x80
 8007a68:	0624      	lsls	r4, r4, #24
 8007a6a:	190b      	adds	r3, r1, r4
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	e79d      	b.n	80079ac <__ieee754_atan2+0x30>
 8007a70:	4a11      	ldr	r2, [pc, #68]	@ (8007ab8 <__ieee754_atan2+0x13c>)
 8007a72:	4b12      	ldr	r3, [pc, #72]	@ (8007abc <__ieee754_atan2+0x140>)
 8007a74:	f7fa fc6c 	bl	8002350 <__aeabi_dsub>
 8007a78:	0002      	movs	r2, r0
 8007a7a:	000b      	movs	r3, r1
 8007a7c:	4808      	ldr	r0, [pc, #32]	@ (8007aa0 <__ieee754_atan2+0x124>)
 8007a7e:	4910      	ldr	r1, [pc, #64]	@ (8007ac0 <__ieee754_atan2+0x144>)
 8007a80:	f7fa fc66 	bl	8002350 <__aeabi_dsub>
 8007a84:	e792      	b.n	80079ac <__ieee754_atan2+0x30>
 8007a86:	4806      	ldr	r0, [pc, #24]	@ (8007aa0 <__ieee754_atan2+0x124>)
 8007a88:	490d      	ldr	r1, [pc, #52]	@ (8007ac0 <__ieee754_atan2+0x144>)
 8007a8a:	e78f      	b.n	80079ac <__ieee754_atan2+0x30>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	e78c      	b.n	80079ac <__ieee754_atan2+0x30>
 8007a92:	490c      	ldr	r1, [pc, #48]	@ (8007ac4 <__ieee754_atan2+0x148>)
 8007a94:	e78a      	b.n	80079ac <__ieee754_atan2+0x30>
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	c0100000 	.word	0xc0100000
 8007aa0:	54442d18 	.word	0x54442d18
 8007aa4:	c00921fb 	.word	0xc00921fb
 8007aa8:	3ff921fb 	.word	0x3ff921fb
 8007aac:	08007ed8 	.word	0x08007ed8
 8007ab0:	3fe921fb 	.word	0x3fe921fb
 8007ab4:	08007ec0 	.word	0x08007ec0
 8007ab8:	33145c07 	.word	0x33145c07
 8007abc:	3ca1a626 	.word	0x3ca1a626
 8007ac0:	400921fb 	.word	0x400921fb
 8007ac4:	bff921fb 	.word	0xbff921fb

08007ac8 <atan>:
 8007ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aca:	4b98      	ldr	r3, [pc, #608]	@ (8007d2c <atan+0x264>)
 8007acc:	b085      	sub	sp, #20
 8007ace:	004e      	lsls	r6, r1, #1
 8007ad0:	0004      	movs	r4, r0
 8007ad2:	000d      	movs	r5, r1
 8007ad4:	9103      	str	r1, [sp, #12]
 8007ad6:	0876      	lsrs	r6, r6, #1
 8007ad8:	429e      	cmp	r6, r3
 8007ada:	d918      	bls.n	8007b0e <atan+0x46>
 8007adc:	4b94      	ldr	r3, [pc, #592]	@ (8007d30 <atan+0x268>)
 8007ade:	429e      	cmp	r6, r3
 8007ae0:	d802      	bhi.n	8007ae8 <atan+0x20>
 8007ae2:	d10a      	bne.n	8007afa <atan+0x32>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d008      	beq.n	8007afa <atan+0x32>
 8007ae8:	0022      	movs	r2, r4
 8007aea:	002b      	movs	r3, r5
 8007aec:	0020      	movs	r0, r4
 8007aee:	0029      	movs	r1, r5
 8007af0:	f7f9 f948 	bl	8000d84 <__aeabi_dadd>
 8007af4:	0004      	movs	r4, r0
 8007af6:	000d      	movs	r5, r1
 8007af8:	e005      	b.n	8007b06 <atan+0x3e>
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	4c8d      	ldr	r4, [pc, #564]	@ (8007d34 <atan+0x26c>)
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dc00      	bgt.n	8007b04 <atan+0x3c>
 8007b02:	e111      	b.n	8007d28 <atan+0x260>
 8007b04:	4d8c      	ldr	r5, [pc, #560]	@ (8007d38 <atan+0x270>)
 8007b06:	0020      	movs	r0, r4
 8007b08:	0029      	movs	r1, r5
 8007b0a:	b005      	add	sp, #20
 8007b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8007d3c <atan+0x274>)
 8007b10:	429e      	cmp	r6, r3
 8007b12:	d80f      	bhi.n	8007b34 <atan+0x6c>
 8007b14:	4b8a      	ldr	r3, [pc, #552]	@ (8007d40 <atan+0x278>)
 8007b16:	429e      	cmp	r6, r3
 8007b18:	d809      	bhi.n	8007b2e <atan+0x66>
 8007b1a:	4a8a      	ldr	r2, [pc, #552]	@ (8007d44 <atan+0x27c>)
 8007b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8007d48 <atan+0x280>)
 8007b1e:	f7f9 f931 	bl	8000d84 <__aeabi_dadd>
 8007b22:	2200      	movs	r2, #0
 8007b24:	4b89      	ldr	r3, [pc, #548]	@ (8007d4c <atan+0x284>)
 8007b26:	f7f8 fc8b 	bl	8000440 <__aeabi_dcmpgt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d1eb      	bne.n	8007b06 <atan+0x3e>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	425b      	negs	r3, r3
 8007b32:	e025      	b.n	8007b80 <atan+0xb8>
 8007b34:	f000 f948 	bl	8007dc8 <fabs>
 8007b38:	4b85      	ldr	r3, [pc, #532]	@ (8007d50 <atan+0x288>)
 8007b3a:	0004      	movs	r4, r0
 8007b3c:	000d      	movs	r5, r1
 8007b3e:	429e      	cmp	r6, r3
 8007b40:	d900      	bls.n	8007b44 <atan+0x7c>
 8007b42:	e0aa      	b.n	8007c9a <atan+0x1d2>
 8007b44:	4b83      	ldr	r3, [pc, #524]	@ (8007d54 <atan+0x28c>)
 8007b46:	429e      	cmp	r6, r3
 8007b48:	d900      	bls.n	8007b4c <atan+0x84>
 8007b4a:	e090      	b.n	8007c6e <atan+0x1a6>
 8007b4c:	0002      	movs	r2, r0
 8007b4e:	000b      	movs	r3, r1
 8007b50:	f7f9 f918 	bl	8000d84 <__aeabi_dadd>
 8007b54:	2200      	movs	r2, #0
 8007b56:	4b7d      	ldr	r3, [pc, #500]	@ (8007d4c <atan+0x284>)
 8007b58:	f7fa fbfa 	bl	8002350 <__aeabi_dsub>
 8007b5c:	2380      	movs	r3, #128	@ 0x80
 8007b5e:	0006      	movs	r6, r0
 8007b60:	000f      	movs	r7, r1
 8007b62:	2200      	movs	r2, #0
 8007b64:	0020      	movs	r0, r4
 8007b66:	0029      	movs	r1, r5
 8007b68:	05db      	lsls	r3, r3, #23
 8007b6a:	f7f9 f90b 	bl	8000d84 <__aeabi_dadd>
 8007b6e:	000b      	movs	r3, r1
 8007b70:	0002      	movs	r2, r0
 8007b72:	0039      	movs	r1, r7
 8007b74:	0030      	movs	r0, r6
 8007b76:	f7f9 fccb 	bl	8001510 <__aeabi_ddiv>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	0004      	movs	r4, r0
 8007b7e:	000d      	movs	r5, r1
 8007b80:	0022      	movs	r2, r4
 8007b82:	9302      	str	r3, [sp, #8]
 8007b84:	0020      	movs	r0, r4
 8007b86:	002b      	movs	r3, r5
 8007b88:	0029      	movs	r1, r5
 8007b8a:	f7fa f8fb 	bl	8001d84 <__aeabi_dmul>
 8007b8e:	0002      	movs	r2, r0
 8007b90:	000b      	movs	r3, r1
 8007b92:	9000      	str	r0, [sp, #0]
 8007b94:	9101      	str	r1, [sp, #4]
 8007b96:	f7fa f8f5 	bl	8001d84 <__aeabi_dmul>
 8007b9a:	0006      	movs	r6, r0
 8007b9c:	000f      	movs	r7, r1
 8007b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8007d58 <atan+0x290>)
 8007ba0:	4b6e      	ldr	r3, [pc, #440]	@ (8007d5c <atan+0x294>)
 8007ba2:	f7fa f8ef 	bl	8001d84 <__aeabi_dmul>
 8007ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8007d60 <atan+0x298>)
 8007ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8007d64 <atan+0x29c>)
 8007baa:	f7f9 f8eb 	bl	8000d84 <__aeabi_dadd>
 8007bae:	0032      	movs	r2, r6
 8007bb0:	003b      	movs	r3, r7
 8007bb2:	f7fa f8e7 	bl	8001d84 <__aeabi_dmul>
 8007bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8007d68 <atan+0x2a0>)
 8007bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8007d6c <atan+0x2a4>)
 8007bba:	f7f9 f8e3 	bl	8000d84 <__aeabi_dadd>
 8007bbe:	0032      	movs	r2, r6
 8007bc0:	003b      	movs	r3, r7
 8007bc2:	f7fa f8df 	bl	8001d84 <__aeabi_dmul>
 8007bc6:	4a6a      	ldr	r2, [pc, #424]	@ (8007d70 <atan+0x2a8>)
 8007bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8007d74 <atan+0x2ac>)
 8007bca:	f7f9 f8db 	bl	8000d84 <__aeabi_dadd>
 8007bce:	0032      	movs	r2, r6
 8007bd0:	003b      	movs	r3, r7
 8007bd2:	f7fa f8d7 	bl	8001d84 <__aeabi_dmul>
 8007bd6:	4a68      	ldr	r2, [pc, #416]	@ (8007d78 <atan+0x2b0>)
 8007bd8:	4b68      	ldr	r3, [pc, #416]	@ (8007d7c <atan+0x2b4>)
 8007bda:	f7f9 f8d3 	bl	8000d84 <__aeabi_dadd>
 8007bde:	0032      	movs	r2, r6
 8007be0:	003b      	movs	r3, r7
 8007be2:	f7fa f8cf 	bl	8001d84 <__aeabi_dmul>
 8007be6:	4a66      	ldr	r2, [pc, #408]	@ (8007d80 <atan+0x2b8>)
 8007be8:	4b66      	ldr	r3, [pc, #408]	@ (8007d84 <atan+0x2bc>)
 8007bea:	f7f9 f8cb 	bl	8000d84 <__aeabi_dadd>
 8007bee:	9a00      	ldr	r2, [sp, #0]
 8007bf0:	9b01      	ldr	r3, [sp, #4]
 8007bf2:	f7fa f8c7 	bl	8001d84 <__aeabi_dmul>
 8007bf6:	4a64      	ldr	r2, [pc, #400]	@ (8007d88 <atan+0x2c0>)
 8007bf8:	9000      	str	r0, [sp, #0]
 8007bfa:	9101      	str	r1, [sp, #4]
 8007bfc:	4b63      	ldr	r3, [pc, #396]	@ (8007d8c <atan+0x2c4>)
 8007bfe:	0030      	movs	r0, r6
 8007c00:	0039      	movs	r1, r7
 8007c02:	f7fa f8bf 	bl	8001d84 <__aeabi_dmul>
 8007c06:	4a62      	ldr	r2, [pc, #392]	@ (8007d90 <atan+0x2c8>)
 8007c08:	4b62      	ldr	r3, [pc, #392]	@ (8007d94 <atan+0x2cc>)
 8007c0a:	f7fa fba1 	bl	8002350 <__aeabi_dsub>
 8007c0e:	0032      	movs	r2, r6
 8007c10:	003b      	movs	r3, r7
 8007c12:	f7fa f8b7 	bl	8001d84 <__aeabi_dmul>
 8007c16:	4a60      	ldr	r2, [pc, #384]	@ (8007d98 <atan+0x2d0>)
 8007c18:	4b60      	ldr	r3, [pc, #384]	@ (8007d9c <atan+0x2d4>)
 8007c1a:	f7fa fb99 	bl	8002350 <__aeabi_dsub>
 8007c1e:	0032      	movs	r2, r6
 8007c20:	003b      	movs	r3, r7
 8007c22:	f7fa f8af 	bl	8001d84 <__aeabi_dmul>
 8007c26:	4a5e      	ldr	r2, [pc, #376]	@ (8007da0 <atan+0x2d8>)
 8007c28:	4b5e      	ldr	r3, [pc, #376]	@ (8007da4 <atan+0x2dc>)
 8007c2a:	f7fa fb91 	bl	8002350 <__aeabi_dsub>
 8007c2e:	0032      	movs	r2, r6
 8007c30:	003b      	movs	r3, r7
 8007c32:	f7fa f8a7 	bl	8001d84 <__aeabi_dmul>
 8007c36:	4a5c      	ldr	r2, [pc, #368]	@ (8007da8 <atan+0x2e0>)
 8007c38:	4b5c      	ldr	r3, [pc, #368]	@ (8007dac <atan+0x2e4>)
 8007c3a:	f7fa fb89 	bl	8002350 <__aeabi_dsub>
 8007c3e:	0032      	movs	r2, r6
 8007c40:	003b      	movs	r3, r7
 8007c42:	f7fa f89f 	bl	8001d84 <__aeabi_dmul>
 8007c46:	0002      	movs	r2, r0
 8007c48:	000b      	movs	r3, r1
 8007c4a:	9800      	ldr	r0, [sp, #0]
 8007c4c:	9901      	ldr	r1, [sp, #4]
 8007c4e:	f7f9 f899 	bl	8000d84 <__aeabi_dadd>
 8007c52:	002b      	movs	r3, r5
 8007c54:	0022      	movs	r2, r4
 8007c56:	f7fa f895 	bl	8001d84 <__aeabi_dmul>
 8007c5a:	9b02      	ldr	r3, [sp, #8]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	d143      	bne.n	8007ce8 <atan+0x220>
 8007c60:	0002      	movs	r2, r0
 8007c62:	000b      	movs	r3, r1
 8007c64:	0020      	movs	r0, r4
 8007c66:	0029      	movs	r1, r5
 8007c68:	f7fa fb72 	bl	8002350 <__aeabi_dsub>
 8007c6c:	e742      	b.n	8007af4 <atan+0x2c>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4b36      	ldr	r3, [pc, #216]	@ (8007d4c <atan+0x284>)
 8007c72:	f7fa fb6d 	bl	8002350 <__aeabi_dsub>
 8007c76:	2200      	movs	r2, #0
 8007c78:	0006      	movs	r6, r0
 8007c7a:	000f      	movs	r7, r1
 8007c7c:	0020      	movs	r0, r4
 8007c7e:	0029      	movs	r1, r5
 8007c80:	4b32      	ldr	r3, [pc, #200]	@ (8007d4c <atan+0x284>)
 8007c82:	f7f9 f87f 	bl	8000d84 <__aeabi_dadd>
 8007c86:	000b      	movs	r3, r1
 8007c88:	0002      	movs	r2, r0
 8007c8a:	0039      	movs	r1, r7
 8007c8c:	0030      	movs	r0, r6
 8007c8e:	f7f9 fc3f 	bl	8001510 <__aeabi_ddiv>
 8007c92:	2301      	movs	r3, #1
 8007c94:	0004      	movs	r4, r0
 8007c96:	000d      	movs	r5, r1
 8007c98:	e772      	b.n	8007b80 <atan+0xb8>
 8007c9a:	4b45      	ldr	r3, [pc, #276]	@ (8007db0 <atan+0x2e8>)
 8007c9c:	429e      	cmp	r6, r3
 8007c9e:	d819      	bhi.n	8007cd4 <atan+0x20c>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4b44      	ldr	r3, [pc, #272]	@ (8007db4 <atan+0x2ec>)
 8007ca4:	f7fa fb54 	bl	8002350 <__aeabi_dsub>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	0006      	movs	r6, r0
 8007cac:	000f      	movs	r7, r1
 8007cae:	0020      	movs	r0, r4
 8007cb0:	0029      	movs	r1, r5
 8007cb2:	4b40      	ldr	r3, [pc, #256]	@ (8007db4 <atan+0x2ec>)
 8007cb4:	f7fa f866 	bl	8001d84 <__aeabi_dmul>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4b24      	ldr	r3, [pc, #144]	@ (8007d4c <atan+0x284>)
 8007cbc:	f7f9 f862 	bl	8000d84 <__aeabi_dadd>
 8007cc0:	000b      	movs	r3, r1
 8007cc2:	0002      	movs	r2, r0
 8007cc4:	0039      	movs	r1, r7
 8007cc6:	0030      	movs	r0, r6
 8007cc8:	f7f9 fc22 	bl	8001510 <__aeabi_ddiv>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	0004      	movs	r4, r0
 8007cd0:	000d      	movs	r5, r1
 8007cd2:	e755      	b.n	8007b80 <atan+0xb8>
 8007cd4:	000b      	movs	r3, r1
 8007cd6:	0002      	movs	r2, r0
 8007cd8:	4937      	ldr	r1, [pc, #220]	@ (8007db8 <atan+0x2f0>)
 8007cda:	2000      	movs	r0, #0
 8007cdc:	f7f9 fc18 	bl	8001510 <__aeabi_ddiv>
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	0004      	movs	r4, r0
 8007ce4:	000d      	movs	r5, r1
 8007ce6:	e74b      	b.n	8007b80 <atan+0xb8>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	4f34      	ldr	r7, [pc, #208]	@ (8007dbc <atan+0x2f4>)
 8007cec:	00de      	lsls	r6, r3, #3
 8007cee:	4b34      	ldr	r3, [pc, #208]	@ (8007dc0 <atan+0x2f8>)
 8007cf0:	19bf      	adds	r7, r7, r6
 8007cf2:	199e      	adds	r6, r3, r6
 8007cf4:	6832      	ldr	r2, [r6, #0]
 8007cf6:	6873      	ldr	r3, [r6, #4]
 8007cf8:	f7fa fb2a 	bl	8002350 <__aeabi_dsub>
 8007cfc:	0022      	movs	r2, r4
 8007cfe:	002b      	movs	r3, r5
 8007d00:	f7fa fb26 	bl	8002350 <__aeabi_dsub>
 8007d04:	000b      	movs	r3, r1
 8007d06:	0002      	movs	r2, r0
 8007d08:	6838      	ldr	r0, [r7, #0]
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	f7fa fb20 	bl	8002350 <__aeabi_dsub>
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	0004      	movs	r4, r0
 8007d14:	000d      	movs	r5, r1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	db00      	blt.n	8007d1c <atan+0x254>
 8007d1a:	e6f4      	b.n	8007b06 <atan+0x3e>
 8007d1c:	2180      	movs	r1, #128	@ 0x80
 8007d1e:	0609      	lsls	r1, r1, #24
 8007d20:	186b      	adds	r3, r5, r1
 8007d22:	0004      	movs	r4, r0
 8007d24:	001d      	movs	r5, r3
 8007d26:	e6ee      	b.n	8007b06 <atan+0x3e>
 8007d28:	4d26      	ldr	r5, [pc, #152]	@ (8007dc4 <atan+0x2fc>)
 8007d2a:	e6ec      	b.n	8007b06 <atan+0x3e>
 8007d2c:	440fffff 	.word	0x440fffff
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	54442d18 	.word	0x54442d18
 8007d38:	3ff921fb 	.word	0x3ff921fb
 8007d3c:	3fdbffff 	.word	0x3fdbffff
 8007d40:	3e1fffff 	.word	0x3e1fffff
 8007d44:	8800759c 	.word	0x8800759c
 8007d48:	7e37e43c 	.word	0x7e37e43c
 8007d4c:	3ff00000 	.word	0x3ff00000
 8007d50:	3ff2ffff 	.word	0x3ff2ffff
 8007d54:	3fe5ffff 	.word	0x3fe5ffff
 8007d58:	e322da11 	.word	0xe322da11
 8007d5c:	3f90ad3a 	.word	0x3f90ad3a
 8007d60:	24760deb 	.word	0x24760deb
 8007d64:	3fa97b4b 	.word	0x3fa97b4b
 8007d68:	a0d03d51 	.word	0xa0d03d51
 8007d6c:	3fb10d66 	.word	0x3fb10d66
 8007d70:	c54c206e 	.word	0xc54c206e
 8007d74:	3fb745cd 	.word	0x3fb745cd
 8007d78:	920083ff 	.word	0x920083ff
 8007d7c:	3fc24924 	.word	0x3fc24924
 8007d80:	5555550d 	.word	0x5555550d
 8007d84:	3fd55555 	.word	0x3fd55555
 8007d88:	2c6a6c2f 	.word	0x2c6a6c2f
 8007d8c:	bfa2b444 	.word	0xbfa2b444
 8007d90:	52defd9a 	.word	0x52defd9a
 8007d94:	3fadde2d 	.word	0x3fadde2d
 8007d98:	af749a6d 	.word	0xaf749a6d
 8007d9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007da0:	fe231671 	.word	0xfe231671
 8007da4:	3fbc71c6 	.word	0x3fbc71c6
 8007da8:	9998ebc4 	.word	0x9998ebc4
 8007dac:	3fc99999 	.word	0x3fc99999
 8007db0:	40037fff 	.word	0x40037fff
 8007db4:	3ff80000 	.word	0x3ff80000
 8007db8:	bff00000 	.word	0xbff00000
 8007dbc:	08007f10 	.word	0x08007f10
 8007dc0:	08007ef0 	.word	0x08007ef0
 8007dc4:	bff921fb 	.word	0xbff921fb

08007dc8 <fabs>:
 8007dc8:	0049      	lsls	r1, r1, #1
 8007dca:	084b      	lsrs	r3, r1, #1
 8007dcc:	0019      	movs	r1, r3
 8007dce:	4770      	bx	lr

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	46c0      	nop			@ (mov r8, r8)
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	46c0      	nop			@ (mov r8, r8)
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
