
DEM_ACC_NTC_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a47c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  0800a538  0800a538  0000b538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b73c  0800b73c  0000d1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b73c  0800b73c  0000c73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b744  0800b744  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b744  0800b744  0000c744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b748  0800b748  0000c748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800b74c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  200001e0  0800b928  0000d1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  0800b928  0000d8b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff1c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e9  00000000  00000000  0001d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001f810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5d  00000000  00000000  00020868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ad8  00000000  00000000  000214c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001196a  00000000  00000000  00038f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091bff  00000000  00000000  0004a907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc506  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ddc  00000000  00000000  000dc54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e1328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e0 	.word	0x200001e0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800a51c 	.word	0x0800a51c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e4 	.word	0x200001e4
 80000fc:	0800a51c 	.word	0x0800a51c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fb71 	bl	8001b1c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fab5 	bl	80019b4 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fb63 	bl	8001b1c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fb59 	bl	8001b1c <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fadf 	bl	8001a3c <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fad5 	bl	8001a3c <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_uldivmod>:
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d111      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d10f      	bne.n	80004c8 <__aeabi_uldivmod+0x28>
 80004a8:	2900      	cmp	r1, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_uldivmod+0xe>
 80004ac:	2800      	cmp	r0, #0
 80004ae:	d002      	beq.n	80004b6 <__aeabi_uldivmod+0x16>
 80004b0:	2100      	movs	r1, #0
 80004b2:	43c9      	mvns	r1, r1
 80004b4:	0008      	movs	r0, r1
 80004b6:	b407      	push	{r0, r1, r2}
 80004b8:	4802      	ldr	r0, [pc, #8]	@ (80004c4 <__aeabi_uldivmod+0x24>)
 80004ba:	a102      	add	r1, pc, #8	@ (adr r1, 80004c4 <__aeabi_uldivmod+0x24>)
 80004bc:	1840      	adds	r0, r0, r1
 80004be:	9002      	str	r0, [sp, #8]
 80004c0:	bd03      	pop	{r0, r1, pc}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	ffffff5d 	.word	0xffffff5d
 80004c8:	b403      	push	{r0, r1}
 80004ca:	4668      	mov	r0, sp
 80004cc:	b501      	push	{r0, lr}
 80004ce:	9802      	ldr	r0, [sp, #8]
 80004d0:	f000 f806 	bl	80004e0 <__udivmoddi4>
 80004d4:	9b01      	ldr	r3, [sp, #4]
 80004d6:	469e      	mov	lr, r3
 80004d8:	b002      	add	sp, #8
 80004da:	bc0c      	pop	{r2, r3}
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__udivmoddi4>:
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	4657      	mov	r7, sl
 80004e4:	464e      	mov	r6, r9
 80004e6:	4645      	mov	r5, r8
 80004e8:	46de      	mov	lr, fp
 80004ea:	b5e0      	push	{r5, r6, r7, lr}
 80004ec:	0004      	movs	r4, r0
 80004ee:	000d      	movs	r5, r1
 80004f0:	4692      	mov	sl, r2
 80004f2:	4699      	mov	r9, r3
 80004f4:	b083      	sub	sp, #12
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d830      	bhi.n	800055c <__udivmoddi4+0x7c>
 80004fa:	d02d      	beq.n	8000558 <__udivmoddi4+0x78>
 80004fc:	4649      	mov	r1, r9
 80004fe:	4650      	mov	r0, sl
 8000500:	f002 fb80 	bl	8002c04 <__clzdi2>
 8000504:	0029      	movs	r1, r5
 8000506:	0006      	movs	r6, r0
 8000508:	0020      	movs	r0, r4
 800050a:	f002 fb7b 	bl	8002c04 <__clzdi2>
 800050e:	1a33      	subs	r3, r6, r0
 8000510:	4698      	mov	r8, r3
 8000512:	3b20      	subs	r3, #32
 8000514:	d434      	bmi.n	8000580 <__udivmoddi4+0xa0>
 8000516:	469b      	mov	fp, r3
 8000518:	4653      	mov	r3, sl
 800051a:	465a      	mov	r2, fp
 800051c:	4093      	lsls	r3, r2
 800051e:	4642      	mov	r2, r8
 8000520:	001f      	movs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d83b      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800052c:	42af      	cmp	r7, r5
 800052e:	d100      	bne.n	8000532 <__udivmoddi4+0x52>
 8000530:	e079      	b.n	8000626 <__udivmoddi4+0x146>
 8000532:	465b      	mov	r3, fp
 8000534:	1ba4      	subs	r4, r4, r6
 8000536:	41bd      	sbcs	r5, r7
 8000538:	2b00      	cmp	r3, #0
 800053a:	da00      	bge.n	800053e <__udivmoddi4+0x5e>
 800053c:	e076      	b.n	800062c <__udivmoddi4+0x14c>
 800053e:	2200      	movs	r2, #0
 8000540:	2300      	movs	r3, #0
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	465a      	mov	r2, fp
 800054a:	4093      	lsls	r3, r2
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	4642      	mov	r2, r8
 8000552:	4093      	lsls	r3, r2
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	e029      	b.n	80005ac <__udivmoddi4+0xcc>
 8000558:	4282      	cmp	r2, r0
 800055a:	d9cf      	bls.n	80004fc <__udivmoddi4+0x1c>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <__udivmoddi4+0x8e>
 800056a:	601c      	str	r4, [r3, #0]
 800056c:	605d      	str	r5, [r3, #4]
 800056e:	9800      	ldr	r0, [sp, #0]
 8000570:	9901      	ldr	r1, [sp, #4]
 8000572:	b003      	add	sp, #12
 8000574:	bcf0      	pop	{r4, r5, r6, r7}
 8000576:	46bb      	mov	fp, r7
 8000578:	46b2      	mov	sl, r6
 800057a:	46a9      	mov	r9, r5
 800057c:	46a0      	mov	r8, r4
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	4642      	mov	r2, r8
 8000582:	469b      	mov	fp, r3
 8000584:	2320      	movs	r3, #32
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	4652      	mov	r2, sl
 800058a:	40da      	lsrs	r2, r3
 800058c:	4641      	mov	r1, r8
 800058e:	0013      	movs	r3, r2
 8000590:	464a      	mov	r2, r9
 8000592:	408a      	lsls	r2, r1
 8000594:	0017      	movs	r7, r2
 8000596:	4642      	mov	r2, r8
 8000598:	431f      	orrs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d9c3      	bls.n	800052c <__udivmoddi4+0x4c>
 80005a4:	2200      	movs	r2, #0
 80005a6:	2300      	movs	r3, #0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	4643      	mov	r3, r8
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0d8      	beq.n	8000564 <__udivmoddi4+0x84>
 80005b2:	07fb      	lsls	r3, r7, #31
 80005b4:	0872      	lsrs	r2, r6, #1
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4646      	mov	r6, r8
 80005ba:	087b      	lsrs	r3, r7, #1
 80005bc:	e00e      	b.n	80005dc <__udivmoddi4+0xfc>
 80005be:	42ab      	cmp	r3, r5
 80005c0:	d101      	bne.n	80005c6 <__udivmoddi4+0xe6>
 80005c2:	42a2      	cmp	r2, r4
 80005c4:	d80c      	bhi.n	80005e0 <__udivmoddi4+0x100>
 80005c6:	1aa4      	subs	r4, r4, r2
 80005c8:	419d      	sbcs	r5, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	1924      	adds	r4, r4, r4
 80005ce:	416d      	adcs	r5, r5
 80005d0:	2100      	movs	r1, #0
 80005d2:	3e01      	subs	r6, #1
 80005d4:	1824      	adds	r4, r4, r0
 80005d6:	414d      	adcs	r5, r1
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d006      	beq.n	80005ea <__udivmoddi4+0x10a>
 80005dc:	42ab      	cmp	r3, r5
 80005de:	d9ee      	bls.n	80005be <__udivmoddi4+0xde>
 80005e0:	3e01      	subs	r6, #1
 80005e2:	1924      	adds	r4, r4, r4
 80005e4:	416d      	adcs	r5, r5
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d1f8      	bne.n	80005dc <__udivmoddi4+0xfc>
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	465b      	mov	r3, fp
 80005f0:	1900      	adds	r0, r0, r4
 80005f2:	4169      	adcs	r1, r5
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db24      	blt.n	8000642 <__udivmoddi4+0x162>
 80005f8:	002b      	movs	r3, r5
 80005fa:	465a      	mov	r2, fp
 80005fc:	4644      	mov	r4, r8
 80005fe:	40d3      	lsrs	r3, r2
 8000600:	002a      	movs	r2, r5
 8000602:	40e2      	lsrs	r2, r4
 8000604:	001c      	movs	r4, r3
 8000606:	465b      	mov	r3, fp
 8000608:	0015      	movs	r5, r2
 800060a:	2b00      	cmp	r3, #0
 800060c:	db2a      	blt.n	8000664 <__udivmoddi4+0x184>
 800060e:	0026      	movs	r6, r4
 8000610:	409e      	lsls	r6, r3
 8000612:	0033      	movs	r3, r6
 8000614:	0026      	movs	r6, r4
 8000616:	4647      	mov	r7, r8
 8000618:	40be      	lsls	r6, r7
 800061a:	0032      	movs	r2, r6
 800061c:	1a80      	subs	r0, r0, r2
 800061e:	4199      	sbcs	r1, r3
 8000620:	9000      	str	r0, [sp, #0]
 8000622:	9101      	str	r1, [sp, #4]
 8000624:	e79e      	b.n	8000564 <__udivmoddi4+0x84>
 8000626:	42a3      	cmp	r3, r4
 8000628:	d8bc      	bhi.n	80005a4 <__udivmoddi4+0xc4>
 800062a:	e782      	b.n	8000532 <__udivmoddi4+0x52>
 800062c:	4642      	mov	r2, r8
 800062e:	2320      	movs	r3, #32
 8000630:	2100      	movs	r1, #0
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	2200      	movs	r2, #0
 8000636:	9100      	str	r1, [sp, #0]
 8000638:	9201      	str	r2, [sp, #4]
 800063a:	2201      	movs	r2, #1
 800063c:	40da      	lsrs	r2, r3
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	e785      	b.n	800054e <__udivmoddi4+0x6e>
 8000642:	4642      	mov	r2, r8
 8000644:	2320      	movs	r3, #32
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	4646      	mov	r6, r8
 800064c:	409a      	lsls	r2, r3
 800064e:	0023      	movs	r3, r4
 8000650:	40f3      	lsrs	r3, r6
 8000652:	4644      	mov	r4, r8
 8000654:	4313      	orrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	dad4      	bge.n	800060e <__udivmoddi4+0x12e>
 8000664:	4642      	mov	r2, r8
 8000666:	002f      	movs	r7, r5
 8000668:	2320      	movs	r3, #32
 800066a:	0026      	movs	r6, r4
 800066c:	4097      	lsls	r7, r2
 800066e:	1a9b      	subs	r3, r3, r2
 8000670:	40de      	lsrs	r6, r3
 8000672:	003b      	movs	r3, r7
 8000674:	4333      	orrs	r3, r6
 8000676:	e7cd      	b.n	8000614 <__udivmoddi4+0x134>

08000678 <__aeabi_fdiv>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	4646      	mov	r6, r8
 800067c:	464f      	mov	r7, r9
 800067e:	46d6      	mov	lr, sl
 8000680:	0245      	lsls	r5, r0, #9
 8000682:	b5c0      	push	{r6, r7, lr}
 8000684:	0fc3      	lsrs	r3, r0, #31
 8000686:	0047      	lsls	r7, r0, #1
 8000688:	4698      	mov	r8, r3
 800068a:	1c0e      	adds	r6, r1, #0
 800068c:	0a6d      	lsrs	r5, r5, #9
 800068e:	0e3f      	lsrs	r7, r7, #24
 8000690:	d05b      	beq.n	800074a <__aeabi_fdiv+0xd2>
 8000692:	2fff      	cmp	r7, #255	@ 0xff
 8000694:	d021      	beq.n	80006da <__aeabi_fdiv+0x62>
 8000696:	2380      	movs	r3, #128	@ 0x80
 8000698:	00ed      	lsls	r5, r5, #3
 800069a:	04db      	lsls	r3, r3, #19
 800069c:	431d      	orrs	r5, r3
 800069e:	2300      	movs	r3, #0
 80006a0:	4699      	mov	r9, r3
 80006a2:	469a      	mov	sl, r3
 80006a4:	3f7f      	subs	r7, #127	@ 0x7f
 80006a6:	0274      	lsls	r4, r6, #9
 80006a8:	0073      	lsls	r3, r6, #1
 80006aa:	0a64      	lsrs	r4, r4, #9
 80006ac:	0e1b      	lsrs	r3, r3, #24
 80006ae:	0ff6      	lsrs	r6, r6, #31
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d020      	beq.n	80006f6 <__aeabi_fdiv+0x7e>
 80006b4:	2bff      	cmp	r3, #255	@ 0xff
 80006b6:	d043      	beq.n	8000740 <__aeabi_fdiv+0xc8>
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	2000      	movs	r0, #0
 80006bc:	00e4      	lsls	r4, r4, #3
 80006be:	04d2      	lsls	r2, r2, #19
 80006c0:	4314      	orrs	r4, r2
 80006c2:	3b7f      	subs	r3, #127	@ 0x7f
 80006c4:	4642      	mov	r2, r8
 80006c6:	1aff      	subs	r7, r7, r3
 80006c8:	464b      	mov	r3, r9
 80006ca:	4072      	eors	r2, r6
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d900      	bls.n	80006d2 <__aeabi_fdiv+0x5a>
 80006d0:	e09d      	b.n	800080e <__aeabi_fdiv+0x196>
 80006d2:	4971      	ldr	r1, [pc, #452]	@ (8000898 <__aeabi_fdiv+0x220>)
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	58cb      	ldr	r3, [r1, r3]
 80006d8:	469f      	mov	pc, r3
 80006da:	2d00      	cmp	r5, #0
 80006dc:	d15a      	bne.n	8000794 <__aeabi_fdiv+0x11c>
 80006de:	2308      	movs	r3, #8
 80006e0:	4699      	mov	r9, r3
 80006e2:	3b06      	subs	r3, #6
 80006e4:	0274      	lsls	r4, r6, #9
 80006e6:	469a      	mov	sl, r3
 80006e8:	0073      	lsls	r3, r6, #1
 80006ea:	27ff      	movs	r7, #255	@ 0xff
 80006ec:	0a64      	lsrs	r4, r4, #9
 80006ee:	0e1b      	lsrs	r3, r3, #24
 80006f0:	0ff6      	lsrs	r6, r6, #31
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1de      	bne.n	80006b4 <__aeabi_fdiv+0x3c>
 80006f6:	2c00      	cmp	r4, #0
 80006f8:	d13b      	bne.n	8000772 <__aeabi_fdiv+0xfa>
 80006fa:	2301      	movs	r3, #1
 80006fc:	4642      	mov	r2, r8
 80006fe:	4649      	mov	r1, r9
 8000700:	4072      	eors	r2, r6
 8000702:	4319      	orrs	r1, r3
 8000704:	290e      	cmp	r1, #14
 8000706:	d818      	bhi.n	800073a <__aeabi_fdiv+0xc2>
 8000708:	4864      	ldr	r0, [pc, #400]	@ (800089c <__aeabi_fdiv+0x224>)
 800070a:	0089      	lsls	r1, r1, #2
 800070c:	5841      	ldr	r1, [r0, r1]
 800070e:	468f      	mov	pc, r1
 8000710:	4653      	mov	r3, sl
 8000712:	2b02      	cmp	r3, #2
 8000714:	d100      	bne.n	8000718 <__aeabi_fdiv+0xa0>
 8000716:	e0b8      	b.n	800088a <__aeabi_fdiv+0x212>
 8000718:	2b03      	cmp	r3, #3
 800071a:	d06e      	beq.n	80007fa <__aeabi_fdiv+0x182>
 800071c:	4642      	mov	r2, r8
 800071e:	002c      	movs	r4, r5
 8000720:	2b01      	cmp	r3, #1
 8000722:	d140      	bne.n	80007a6 <__aeabi_fdiv+0x12e>
 8000724:	2000      	movs	r0, #0
 8000726:	2400      	movs	r4, #0
 8000728:	05c0      	lsls	r0, r0, #23
 800072a:	4320      	orrs	r0, r4
 800072c:	07d2      	lsls	r2, r2, #31
 800072e:	4310      	orrs	r0, r2
 8000730:	bce0      	pop	{r5, r6, r7}
 8000732:	46ba      	mov	sl, r7
 8000734:	46b1      	mov	r9, r6
 8000736:	46a8      	mov	r8, r5
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073a:	20ff      	movs	r0, #255	@ 0xff
 800073c:	2400      	movs	r4, #0
 800073e:	e7f3      	b.n	8000728 <__aeabi_fdiv+0xb0>
 8000740:	2c00      	cmp	r4, #0
 8000742:	d120      	bne.n	8000786 <__aeabi_fdiv+0x10e>
 8000744:	2302      	movs	r3, #2
 8000746:	3fff      	subs	r7, #255	@ 0xff
 8000748:	e7d8      	b.n	80006fc <__aeabi_fdiv+0x84>
 800074a:	2d00      	cmp	r5, #0
 800074c:	d105      	bne.n	800075a <__aeabi_fdiv+0xe2>
 800074e:	2304      	movs	r3, #4
 8000750:	4699      	mov	r9, r3
 8000752:	3b03      	subs	r3, #3
 8000754:	2700      	movs	r7, #0
 8000756:	469a      	mov	sl, r3
 8000758:	e7a5      	b.n	80006a6 <__aeabi_fdiv+0x2e>
 800075a:	0028      	movs	r0, r5
 800075c:	f002 fa34 	bl	8002bc8 <__clzsi2>
 8000760:	2776      	movs	r7, #118	@ 0x76
 8000762:	1f43      	subs	r3, r0, #5
 8000764:	409d      	lsls	r5, r3
 8000766:	2300      	movs	r3, #0
 8000768:	427f      	negs	r7, r7
 800076a:	4699      	mov	r9, r3
 800076c:	469a      	mov	sl, r3
 800076e:	1a3f      	subs	r7, r7, r0
 8000770:	e799      	b.n	80006a6 <__aeabi_fdiv+0x2e>
 8000772:	0020      	movs	r0, r4
 8000774:	f002 fa28 	bl	8002bc8 <__clzsi2>
 8000778:	1f43      	subs	r3, r0, #5
 800077a:	409c      	lsls	r4, r3
 800077c:	2376      	movs	r3, #118	@ 0x76
 800077e:	425b      	negs	r3, r3
 8000780:	1a1b      	subs	r3, r3, r0
 8000782:	2000      	movs	r0, #0
 8000784:	e79e      	b.n	80006c4 <__aeabi_fdiv+0x4c>
 8000786:	2303      	movs	r3, #3
 8000788:	464a      	mov	r2, r9
 800078a:	431a      	orrs	r2, r3
 800078c:	4691      	mov	r9, r2
 800078e:	2003      	movs	r0, #3
 8000790:	33fc      	adds	r3, #252	@ 0xfc
 8000792:	e797      	b.n	80006c4 <__aeabi_fdiv+0x4c>
 8000794:	230c      	movs	r3, #12
 8000796:	4699      	mov	r9, r3
 8000798:	3b09      	subs	r3, #9
 800079a:	27ff      	movs	r7, #255	@ 0xff
 800079c:	469a      	mov	sl, r3
 800079e:	e782      	b.n	80006a6 <__aeabi_fdiv+0x2e>
 80007a0:	2803      	cmp	r0, #3
 80007a2:	d02c      	beq.n	80007fe <__aeabi_fdiv+0x186>
 80007a4:	0032      	movs	r2, r6
 80007a6:	0038      	movs	r0, r7
 80007a8:	307f      	adds	r0, #127	@ 0x7f
 80007aa:	2800      	cmp	r0, #0
 80007ac:	dd47      	ble.n	800083e <__aeabi_fdiv+0x1c6>
 80007ae:	0763      	lsls	r3, r4, #29
 80007b0:	d004      	beq.n	80007bc <__aeabi_fdiv+0x144>
 80007b2:	230f      	movs	r3, #15
 80007b4:	4023      	ands	r3, r4
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d000      	beq.n	80007bc <__aeabi_fdiv+0x144>
 80007ba:	3404      	adds	r4, #4
 80007bc:	0123      	lsls	r3, r4, #4
 80007be:	d503      	bpl.n	80007c8 <__aeabi_fdiv+0x150>
 80007c0:	0038      	movs	r0, r7
 80007c2:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <__aeabi_fdiv+0x228>)
 80007c4:	3080      	adds	r0, #128	@ 0x80
 80007c6:	401c      	ands	r4, r3
 80007c8:	28fe      	cmp	r0, #254	@ 0xfe
 80007ca:	dcb6      	bgt.n	800073a <__aeabi_fdiv+0xc2>
 80007cc:	01a4      	lsls	r4, r4, #6
 80007ce:	0a64      	lsrs	r4, r4, #9
 80007d0:	b2c0      	uxtb	r0, r0
 80007d2:	e7a9      	b.n	8000728 <__aeabi_fdiv+0xb0>
 80007d4:	2480      	movs	r4, #128	@ 0x80
 80007d6:	2200      	movs	r2, #0
 80007d8:	20ff      	movs	r0, #255	@ 0xff
 80007da:	03e4      	lsls	r4, r4, #15
 80007dc:	e7a4      	b.n	8000728 <__aeabi_fdiv+0xb0>
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	03db      	lsls	r3, r3, #15
 80007e2:	421d      	tst	r5, r3
 80007e4:	d001      	beq.n	80007ea <__aeabi_fdiv+0x172>
 80007e6:	421c      	tst	r4, r3
 80007e8:	d00b      	beq.n	8000802 <__aeabi_fdiv+0x18a>
 80007ea:	2480      	movs	r4, #128	@ 0x80
 80007ec:	03e4      	lsls	r4, r4, #15
 80007ee:	432c      	orrs	r4, r5
 80007f0:	0264      	lsls	r4, r4, #9
 80007f2:	4642      	mov	r2, r8
 80007f4:	20ff      	movs	r0, #255	@ 0xff
 80007f6:	0a64      	lsrs	r4, r4, #9
 80007f8:	e796      	b.n	8000728 <__aeabi_fdiv+0xb0>
 80007fa:	4646      	mov	r6, r8
 80007fc:	002c      	movs	r4, r5
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	431c      	orrs	r4, r3
 8000804:	0264      	lsls	r4, r4, #9
 8000806:	0032      	movs	r2, r6
 8000808:	20ff      	movs	r0, #255	@ 0xff
 800080a:	0a64      	lsrs	r4, r4, #9
 800080c:	e78c      	b.n	8000728 <__aeabi_fdiv+0xb0>
 800080e:	016d      	lsls	r5, r5, #5
 8000810:	0160      	lsls	r0, r4, #5
 8000812:	4285      	cmp	r5, r0
 8000814:	d22d      	bcs.n	8000872 <__aeabi_fdiv+0x1fa>
 8000816:	231b      	movs	r3, #27
 8000818:	2400      	movs	r4, #0
 800081a:	3f01      	subs	r7, #1
 800081c:	2601      	movs	r6, #1
 800081e:	0029      	movs	r1, r5
 8000820:	0064      	lsls	r4, r4, #1
 8000822:	006d      	lsls	r5, r5, #1
 8000824:	2900      	cmp	r1, #0
 8000826:	db01      	blt.n	800082c <__aeabi_fdiv+0x1b4>
 8000828:	4285      	cmp	r5, r0
 800082a:	d301      	bcc.n	8000830 <__aeabi_fdiv+0x1b8>
 800082c:	1a2d      	subs	r5, r5, r0
 800082e:	4334      	orrs	r4, r6
 8000830:	3b01      	subs	r3, #1
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f3      	bne.n	800081e <__aeabi_fdiv+0x1a6>
 8000836:	1e6b      	subs	r3, r5, #1
 8000838:	419d      	sbcs	r5, r3
 800083a:	432c      	orrs	r4, r5
 800083c:	e7b3      	b.n	80007a6 <__aeabi_fdiv+0x12e>
 800083e:	2301      	movs	r3, #1
 8000840:	1a1b      	subs	r3, r3, r0
 8000842:	2b1b      	cmp	r3, #27
 8000844:	dd00      	ble.n	8000848 <__aeabi_fdiv+0x1d0>
 8000846:	e76d      	b.n	8000724 <__aeabi_fdiv+0xac>
 8000848:	0021      	movs	r1, r4
 800084a:	379e      	adds	r7, #158	@ 0x9e
 800084c:	40d9      	lsrs	r1, r3
 800084e:	40bc      	lsls	r4, r7
 8000850:	000b      	movs	r3, r1
 8000852:	1e61      	subs	r1, r4, #1
 8000854:	418c      	sbcs	r4, r1
 8000856:	4323      	orrs	r3, r4
 8000858:	0759      	lsls	r1, r3, #29
 800085a:	d004      	beq.n	8000866 <__aeabi_fdiv+0x1ee>
 800085c:	210f      	movs	r1, #15
 800085e:	4019      	ands	r1, r3
 8000860:	2904      	cmp	r1, #4
 8000862:	d000      	beq.n	8000866 <__aeabi_fdiv+0x1ee>
 8000864:	3304      	adds	r3, #4
 8000866:	0159      	lsls	r1, r3, #5
 8000868:	d413      	bmi.n	8000892 <__aeabi_fdiv+0x21a>
 800086a:	019b      	lsls	r3, r3, #6
 800086c:	2000      	movs	r0, #0
 800086e:	0a5c      	lsrs	r4, r3, #9
 8000870:	e75a      	b.n	8000728 <__aeabi_fdiv+0xb0>
 8000872:	231a      	movs	r3, #26
 8000874:	2401      	movs	r4, #1
 8000876:	1a2d      	subs	r5, r5, r0
 8000878:	e7d0      	b.n	800081c <__aeabi_fdiv+0x1a4>
 800087a:	1e98      	subs	r0, r3, #2
 800087c:	4243      	negs	r3, r0
 800087e:	4158      	adcs	r0, r3
 8000880:	4240      	negs	r0, r0
 8000882:	0032      	movs	r2, r6
 8000884:	2400      	movs	r4, #0
 8000886:	b2c0      	uxtb	r0, r0
 8000888:	e74e      	b.n	8000728 <__aeabi_fdiv+0xb0>
 800088a:	4642      	mov	r2, r8
 800088c:	20ff      	movs	r0, #255	@ 0xff
 800088e:	2400      	movs	r4, #0
 8000890:	e74a      	b.n	8000728 <__aeabi_fdiv+0xb0>
 8000892:	2001      	movs	r0, #1
 8000894:	2400      	movs	r4, #0
 8000896:	e747      	b.n	8000728 <__aeabi_fdiv+0xb0>
 8000898:	0800a558 	.word	0x0800a558
 800089c:	0800a598 	.word	0x0800a598
 80008a0:	f7ffffff 	.word	0xf7ffffff

080008a4 <__aeabi_fmul>:
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	464f      	mov	r7, r9
 80008a8:	4646      	mov	r6, r8
 80008aa:	46d6      	mov	lr, sl
 80008ac:	0044      	lsls	r4, r0, #1
 80008ae:	b5c0      	push	{r6, r7, lr}
 80008b0:	0246      	lsls	r6, r0, #9
 80008b2:	1c0f      	adds	r7, r1, #0
 80008b4:	0a76      	lsrs	r6, r6, #9
 80008b6:	0e24      	lsrs	r4, r4, #24
 80008b8:	0fc5      	lsrs	r5, r0, #31
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fmul+0x1c>
 80008be:	e0da      	b.n	8000a76 <__aeabi_fmul+0x1d2>
 80008c0:	2cff      	cmp	r4, #255	@ 0xff
 80008c2:	d074      	beq.n	80009ae <__aeabi_fmul+0x10a>
 80008c4:	2380      	movs	r3, #128	@ 0x80
 80008c6:	00f6      	lsls	r6, r6, #3
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	431e      	orrs	r6, r3
 80008cc:	2300      	movs	r3, #0
 80008ce:	4699      	mov	r9, r3
 80008d0:	469a      	mov	sl, r3
 80008d2:	3c7f      	subs	r4, #127	@ 0x7f
 80008d4:	027b      	lsls	r3, r7, #9
 80008d6:	0a5b      	lsrs	r3, r3, #9
 80008d8:	4698      	mov	r8, r3
 80008da:	007b      	lsls	r3, r7, #1
 80008dc:	0e1b      	lsrs	r3, r3, #24
 80008de:	0fff      	lsrs	r7, r7, #31
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d074      	beq.n	80009ce <__aeabi_fmul+0x12a>
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fmul+0x46>
 80008e8:	e08e      	b.n	8000a08 <__aeabi_fmul+0x164>
 80008ea:	4642      	mov	r2, r8
 80008ec:	2180      	movs	r1, #128	@ 0x80
 80008ee:	00d2      	lsls	r2, r2, #3
 80008f0:	04c9      	lsls	r1, r1, #19
 80008f2:	4311      	orrs	r1, r2
 80008f4:	3b7f      	subs	r3, #127	@ 0x7f
 80008f6:	002a      	movs	r2, r5
 80008f8:	18e4      	adds	r4, r4, r3
 80008fa:	464b      	mov	r3, r9
 80008fc:	407a      	eors	r2, r7
 80008fe:	4688      	mov	r8, r1
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	2b0a      	cmp	r3, #10
 8000904:	dc75      	bgt.n	80009f2 <__aeabi_fmul+0x14e>
 8000906:	464b      	mov	r3, r9
 8000908:	2000      	movs	r0, #0
 800090a:	2b02      	cmp	r3, #2
 800090c:	dd0f      	ble.n	800092e <__aeabi_fmul+0x8a>
 800090e:	4649      	mov	r1, r9
 8000910:	2301      	movs	r3, #1
 8000912:	408b      	lsls	r3, r1
 8000914:	21a6      	movs	r1, #166	@ 0xa6
 8000916:	00c9      	lsls	r1, r1, #3
 8000918:	420b      	tst	r3, r1
 800091a:	d169      	bne.n	80009f0 <__aeabi_fmul+0x14c>
 800091c:	2190      	movs	r1, #144	@ 0x90
 800091e:	0089      	lsls	r1, r1, #2
 8000920:	420b      	tst	r3, r1
 8000922:	d000      	beq.n	8000926 <__aeabi_fmul+0x82>
 8000924:	e100      	b.n	8000b28 <__aeabi_fmul+0x284>
 8000926:	2188      	movs	r1, #136	@ 0x88
 8000928:	4219      	tst	r1, r3
 800092a:	d000      	beq.n	800092e <__aeabi_fmul+0x8a>
 800092c:	e0f5      	b.n	8000b1a <__aeabi_fmul+0x276>
 800092e:	4641      	mov	r1, r8
 8000930:	0409      	lsls	r1, r1, #16
 8000932:	0c09      	lsrs	r1, r1, #16
 8000934:	4643      	mov	r3, r8
 8000936:	0008      	movs	r0, r1
 8000938:	0c35      	lsrs	r5, r6, #16
 800093a:	0436      	lsls	r6, r6, #16
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	0c36      	lsrs	r6, r6, #16
 8000940:	4370      	muls	r0, r6
 8000942:	4369      	muls	r1, r5
 8000944:	435e      	muls	r6, r3
 8000946:	435d      	muls	r5, r3
 8000948:	1876      	adds	r6, r6, r1
 800094a:	0c03      	lsrs	r3, r0, #16
 800094c:	199b      	adds	r3, r3, r6
 800094e:	4299      	cmp	r1, r3
 8000950:	d903      	bls.n	800095a <__aeabi_fmul+0xb6>
 8000952:	2180      	movs	r1, #128	@ 0x80
 8000954:	0249      	lsls	r1, r1, #9
 8000956:	468c      	mov	ip, r1
 8000958:	4465      	add	r5, ip
 800095a:	0400      	lsls	r0, r0, #16
 800095c:	0419      	lsls	r1, r3, #16
 800095e:	0c00      	lsrs	r0, r0, #16
 8000960:	1809      	adds	r1, r1, r0
 8000962:	018e      	lsls	r6, r1, #6
 8000964:	1e70      	subs	r0, r6, #1
 8000966:	4186      	sbcs	r6, r0
 8000968:	0c1b      	lsrs	r3, r3, #16
 800096a:	0e89      	lsrs	r1, r1, #26
 800096c:	195b      	adds	r3, r3, r5
 800096e:	430e      	orrs	r6, r1
 8000970:	019b      	lsls	r3, r3, #6
 8000972:	431e      	orrs	r6, r3
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	d46c      	bmi.n	8000a52 <__aeabi_fmul+0x1ae>
 8000978:	0023      	movs	r3, r4
 800097a:	337f      	adds	r3, #127	@ 0x7f
 800097c:	2b00      	cmp	r3, #0
 800097e:	dc00      	bgt.n	8000982 <__aeabi_fmul+0xde>
 8000980:	e0b1      	b.n	8000ae6 <__aeabi_fmul+0x242>
 8000982:	0015      	movs	r5, r2
 8000984:	0771      	lsls	r1, r6, #29
 8000986:	d00b      	beq.n	80009a0 <__aeabi_fmul+0xfc>
 8000988:	200f      	movs	r0, #15
 800098a:	0021      	movs	r1, r4
 800098c:	4030      	ands	r0, r6
 800098e:	2804      	cmp	r0, #4
 8000990:	d006      	beq.n	80009a0 <__aeabi_fmul+0xfc>
 8000992:	3604      	adds	r6, #4
 8000994:	0132      	lsls	r2, r6, #4
 8000996:	d503      	bpl.n	80009a0 <__aeabi_fmul+0xfc>
 8000998:	4b6e      	ldr	r3, [pc, #440]	@ (8000b54 <__aeabi_fmul+0x2b0>)
 800099a:	401e      	ands	r6, r3
 800099c:	000b      	movs	r3, r1
 800099e:	3380      	adds	r3, #128	@ 0x80
 80009a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80009a2:	dd00      	ble.n	80009a6 <__aeabi_fmul+0x102>
 80009a4:	e0bd      	b.n	8000b22 <__aeabi_fmul+0x27e>
 80009a6:	01b2      	lsls	r2, r6, #6
 80009a8:	0a52      	lsrs	r2, r2, #9
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	e048      	b.n	8000a40 <__aeabi_fmul+0x19c>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_fmul+0x110>
 80009b2:	e092      	b.n	8000ada <__aeabi_fmul+0x236>
 80009b4:	2308      	movs	r3, #8
 80009b6:	4699      	mov	r9, r3
 80009b8:	3b06      	subs	r3, #6
 80009ba:	469a      	mov	sl, r3
 80009bc:	027b      	lsls	r3, r7, #9
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	4698      	mov	r8, r3
 80009c2:	007b      	lsls	r3, r7, #1
 80009c4:	24ff      	movs	r4, #255	@ 0xff
 80009c6:	0e1b      	lsrs	r3, r3, #24
 80009c8:	0fff      	lsrs	r7, r7, #31
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d18a      	bne.n	80008e4 <__aeabi_fmul+0x40>
 80009ce:	4642      	mov	r2, r8
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d164      	bne.n	8000a9e <__aeabi_fmul+0x1fa>
 80009d4:	4649      	mov	r1, r9
 80009d6:	3201      	adds	r2, #1
 80009d8:	4311      	orrs	r1, r2
 80009da:	4689      	mov	r9, r1
 80009dc:	290a      	cmp	r1, #10
 80009de:	dc08      	bgt.n	80009f2 <__aeabi_fmul+0x14e>
 80009e0:	407d      	eors	r5, r7
 80009e2:	2001      	movs	r0, #1
 80009e4:	b2ea      	uxtb	r2, r5
 80009e6:	2902      	cmp	r1, #2
 80009e8:	dc91      	bgt.n	800090e <__aeabi_fmul+0x6a>
 80009ea:	0015      	movs	r5, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	e027      	b.n	8000a40 <__aeabi_fmul+0x19c>
 80009f0:	0015      	movs	r5, r2
 80009f2:	4653      	mov	r3, sl
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d100      	bne.n	80009fa <__aeabi_fmul+0x156>
 80009f8:	e093      	b.n	8000b22 <__aeabi_fmul+0x27e>
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d01a      	beq.n	8000a34 <__aeabi_fmul+0x190>
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d12c      	bne.n	8000a5c <__aeabi_fmul+0x1b8>
 8000a02:	2300      	movs	r3, #0
 8000a04:	2200      	movs	r2, #0
 8000a06:	e01b      	b.n	8000a40 <__aeabi_fmul+0x19c>
 8000a08:	4643      	mov	r3, r8
 8000a0a:	34ff      	adds	r4, #255	@ 0xff
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d055      	beq.n	8000abc <__aeabi_fmul+0x218>
 8000a10:	2103      	movs	r1, #3
 8000a12:	464b      	mov	r3, r9
 8000a14:	430b      	orrs	r3, r1
 8000a16:	0019      	movs	r1, r3
 8000a18:	2b0a      	cmp	r3, #10
 8000a1a:	dc00      	bgt.n	8000a1e <__aeabi_fmul+0x17a>
 8000a1c:	e092      	b.n	8000b44 <__aeabi_fmul+0x2a0>
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fmul+0x180>
 8000a22:	e08c      	b.n	8000b3e <__aeabi_fmul+0x29a>
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	03d2      	lsls	r2, r2, #15
 8000a28:	4216      	tst	r6, r2
 8000a2a:	d003      	beq.n	8000a34 <__aeabi_fmul+0x190>
 8000a2c:	4643      	mov	r3, r8
 8000a2e:	4213      	tst	r3, r2
 8000a30:	d100      	bne.n	8000a34 <__aeabi_fmul+0x190>
 8000a32:	e07d      	b.n	8000b30 <__aeabi_fmul+0x28c>
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	03d2      	lsls	r2, r2, #15
 8000a38:	4332      	orrs	r2, r6
 8000a3a:	0252      	lsls	r2, r2, #9
 8000a3c:	0a52      	lsrs	r2, r2, #9
 8000a3e:	23ff      	movs	r3, #255	@ 0xff
 8000a40:	05d8      	lsls	r0, r3, #23
 8000a42:	07ed      	lsls	r5, r5, #31
 8000a44:	4310      	orrs	r0, r2
 8000a46:	4328      	orrs	r0, r5
 8000a48:	bce0      	pop	{r5, r6, r7}
 8000a4a:	46ba      	mov	sl, r7
 8000a4c:	46b1      	mov	r9, r6
 8000a4e:	46a8      	mov	r8, r5
 8000a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a52:	2301      	movs	r3, #1
 8000a54:	0015      	movs	r5, r2
 8000a56:	0871      	lsrs	r1, r6, #1
 8000a58:	401e      	ands	r6, r3
 8000a5a:	430e      	orrs	r6, r1
 8000a5c:	0023      	movs	r3, r4
 8000a5e:	3380      	adds	r3, #128	@ 0x80
 8000a60:	1c61      	adds	r1, r4, #1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	dd41      	ble.n	8000aea <__aeabi_fmul+0x246>
 8000a66:	0772      	lsls	r2, r6, #29
 8000a68:	d094      	beq.n	8000994 <__aeabi_fmul+0xf0>
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	4032      	ands	r2, r6
 8000a6e:	2a04      	cmp	r2, #4
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fmul+0x1d0>
 8000a72:	e78e      	b.n	8000992 <__aeabi_fmul+0xee>
 8000a74:	e78e      	b.n	8000994 <__aeabi_fmul+0xf0>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d105      	bne.n	8000a86 <__aeabi_fmul+0x1e2>
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	4699      	mov	r9, r3
 8000a7e:	3b03      	subs	r3, #3
 8000a80:	2400      	movs	r4, #0
 8000a82:	469a      	mov	sl, r3
 8000a84:	e726      	b.n	80008d4 <__aeabi_fmul+0x30>
 8000a86:	0030      	movs	r0, r6
 8000a88:	f002 f89e 	bl	8002bc8 <__clzsi2>
 8000a8c:	2476      	movs	r4, #118	@ 0x76
 8000a8e:	1f43      	subs	r3, r0, #5
 8000a90:	409e      	lsls	r6, r3
 8000a92:	2300      	movs	r3, #0
 8000a94:	4264      	negs	r4, r4
 8000a96:	4699      	mov	r9, r3
 8000a98:	469a      	mov	sl, r3
 8000a9a:	1a24      	subs	r4, r4, r0
 8000a9c:	e71a      	b.n	80008d4 <__aeabi_fmul+0x30>
 8000a9e:	4640      	mov	r0, r8
 8000aa0:	f002 f892 	bl	8002bc8 <__clzsi2>
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	1a24      	subs	r4, r4, r0
 8000aa8:	3c76      	subs	r4, #118	@ 0x76
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	dca1      	bgt.n	80009f2 <__aeabi_fmul+0x14e>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	3805      	subs	r0, #5
 8000ab2:	4083      	lsls	r3, r0
 8000ab4:	407d      	eors	r5, r7
 8000ab6:	4698      	mov	r8, r3
 8000ab8:	b2ea      	uxtb	r2, r5
 8000aba:	e724      	b.n	8000906 <__aeabi_fmul+0x62>
 8000abc:	464a      	mov	r2, r9
 8000abe:	3302      	adds	r3, #2
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	002a      	movs	r2, r5
 8000ac4:	407a      	eors	r2, r7
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	2b0a      	cmp	r3, #10
 8000aca:	dc92      	bgt.n	80009f2 <__aeabi_fmul+0x14e>
 8000acc:	4649      	mov	r1, r9
 8000ace:	0015      	movs	r5, r2
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	d026      	beq.n	8000b22 <__aeabi_fmul+0x27e>
 8000ad4:	4699      	mov	r9, r3
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	e719      	b.n	800090e <__aeabi_fmul+0x6a>
 8000ada:	230c      	movs	r3, #12
 8000adc:	4699      	mov	r9, r3
 8000ade:	3b09      	subs	r3, #9
 8000ae0:	24ff      	movs	r4, #255	@ 0xff
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	e6f6      	b.n	80008d4 <__aeabi_fmul+0x30>
 8000ae6:	0015      	movs	r5, r2
 8000ae8:	0021      	movs	r1, r4
 8000aea:	2201      	movs	r2, #1
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b1b      	cmp	r3, #27
 8000af0:	dd00      	ble.n	8000af4 <__aeabi_fmul+0x250>
 8000af2:	e786      	b.n	8000a02 <__aeabi_fmul+0x15e>
 8000af4:	319e      	adds	r1, #158	@ 0x9e
 8000af6:	0032      	movs	r2, r6
 8000af8:	408e      	lsls	r6, r1
 8000afa:	40da      	lsrs	r2, r3
 8000afc:	1e73      	subs	r3, r6, #1
 8000afe:	419e      	sbcs	r6, r3
 8000b00:	4332      	orrs	r2, r6
 8000b02:	0753      	lsls	r3, r2, #29
 8000b04:	d004      	beq.n	8000b10 <__aeabi_fmul+0x26c>
 8000b06:	230f      	movs	r3, #15
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fmul+0x26c>
 8000b0e:	3204      	adds	r2, #4
 8000b10:	0153      	lsls	r3, r2, #5
 8000b12:	d510      	bpl.n	8000b36 <__aeabi_fmul+0x292>
 8000b14:	2301      	movs	r3, #1
 8000b16:	2200      	movs	r2, #0
 8000b18:	e792      	b.n	8000a40 <__aeabi_fmul+0x19c>
 8000b1a:	003d      	movs	r5, r7
 8000b1c:	4646      	mov	r6, r8
 8000b1e:	4682      	mov	sl, r0
 8000b20:	e767      	b.n	80009f2 <__aeabi_fmul+0x14e>
 8000b22:	23ff      	movs	r3, #255	@ 0xff
 8000b24:	2200      	movs	r2, #0
 8000b26:	e78b      	b.n	8000a40 <__aeabi_fmul+0x19c>
 8000b28:	2280      	movs	r2, #128	@ 0x80
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	03d2      	lsls	r2, r2, #15
 8000b2e:	e786      	b.n	8000a3e <__aeabi_fmul+0x19a>
 8000b30:	003d      	movs	r5, r7
 8000b32:	431a      	orrs	r2, r3
 8000b34:	e783      	b.n	8000a3e <__aeabi_fmul+0x19a>
 8000b36:	0192      	lsls	r2, r2, #6
 8000b38:	2300      	movs	r3, #0
 8000b3a:	0a52      	lsrs	r2, r2, #9
 8000b3c:	e780      	b.n	8000a40 <__aeabi_fmul+0x19c>
 8000b3e:	003d      	movs	r5, r7
 8000b40:	4646      	mov	r6, r8
 8000b42:	e777      	b.n	8000a34 <__aeabi_fmul+0x190>
 8000b44:	002a      	movs	r2, r5
 8000b46:	2301      	movs	r3, #1
 8000b48:	407a      	eors	r2, r7
 8000b4a:	408b      	lsls	r3, r1
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	e6e9      	b.n	8000926 <__aeabi_fmul+0x82>
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	f7ffffff 	.word	0xf7ffffff

08000b58 <__aeabi_i2f>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d012      	beq.n	8000b84 <__aeabi_i2f+0x2c>
 8000b5e:	17c3      	asrs	r3, r0, #31
 8000b60:	18c5      	adds	r5, r0, r3
 8000b62:	405d      	eors	r5, r3
 8000b64:	0fc4      	lsrs	r4, r0, #31
 8000b66:	0028      	movs	r0, r5
 8000b68:	f002 f82e 	bl	8002bc8 <__clzsi2>
 8000b6c:	239e      	movs	r3, #158	@ 0x9e
 8000b6e:	1a1b      	subs	r3, r3, r0
 8000b70:	2b96      	cmp	r3, #150	@ 0x96
 8000b72:	dc0f      	bgt.n	8000b94 <__aeabi_i2f+0x3c>
 8000b74:	2808      	cmp	r0, #8
 8000b76:	d038      	beq.n	8000bea <__aeabi_i2f+0x92>
 8000b78:	3808      	subs	r0, #8
 8000b7a:	4085      	lsls	r5, r0
 8000b7c:	026d      	lsls	r5, r5, #9
 8000b7e:	0a6d      	lsrs	r5, r5, #9
 8000b80:	b2d8      	uxtb	r0, r3
 8000b82:	e002      	b.n	8000b8a <__aeabi_i2f+0x32>
 8000b84:	2400      	movs	r4, #0
 8000b86:	2000      	movs	r0, #0
 8000b88:	2500      	movs	r5, #0
 8000b8a:	05c0      	lsls	r0, r0, #23
 8000b8c:	4328      	orrs	r0, r5
 8000b8e:	07e4      	lsls	r4, r4, #31
 8000b90:	4320      	orrs	r0, r4
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	2b99      	cmp	r3, #153	@ 0x99
 8000b96:	dc14      	bgt.n	8000bc2 <__aeabi_i2f+0x6a>
 8000b98:	1f42      	subs	r2, r0, #5
 8000b9a:	4095      	lsls	r5, r2
 8000b9c:	002a      	movs	r2, r5
 8000b9e:	4915      	ldr	r1, [pc, #84]	@ (8000bf4 <__aeabi_i2f+0x9c>)
 8000ba0:	4011      	ands	r1, r2
 8000ba2:	0755      	lsls	r5, r2, #29
 8000ba4:	d01c      	beq.n	8000be0 <__aeabi_i2f+0x88>
 8000ba6:	250f      	movs	r5, #15
 8000ba8:	402a      	ands	r2, r5
 8000baa:	2a04      	cmp	r2, #4
 8000bac:	d018      	beq.n	8000be0 <__aeabi_i2f+0x88>
 8000bae:	3104      	adds	r1, #4
 8000bb0:	08ca      	lsrs	r2, r1, #3
 8000bb2:	0149      	lsls	r1, r1, #5
 8000bb4:	d515      	bpl.n	8000be2 <__aeabi_i2f+0x8a>
 8000bb6:	239f      	movs	r3, #159	@ 0x9f
 8000bb8:	0252      	lsls	r2, r2, #9
 8000bba:	1a18      	subs	r0, r3, r0
 8000bbc:	0a55      	lsrs	r5, r2, #9
 8000bbe:	b2c0      	uxtb	r0, r0
 8000bc0:	e7e3      	b.n	8000b8a <__aeabi_i2f+0x32>
 8000bc2:	2205      	movs	r2, #5
 8000bc4:	0029      	movs	r1, r5
 8000bc6:	1a12      	subs	r2, r2, r0
 8000bc8:	40d1      	lsrs	r1, r2
 8000bca:	0002      	movs	r2, r0
 8000bcc:	321b      	adds	r2, #27
 8000bce:	4095      	lsls	r5, r2
 8000bd0:	002a      	movs	r2, r5
 8000bd2:	1e55      	subs	r5, r2, #1
 8000bd4:	41aa      	sbcs	r2, r5
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	4906      	ldr	r1, [pc, #24]	@ (8000bf4 <__aeabi_i2f+0x9c>)
 8000bda:	4011      	ands	r1, r2
 8000bdc:	0755      	lsls	r5, r2, #29
 8000bde:	d1e2      	bne.n	8000ba6 <__aeabi_i2f+0x4e>
 8000be0:	08ca      	lsrs	r2, r1, #3
 8000be2:	0252      	lsls	r2, r2, #9
 8000be4:	0a55      	lsrs	r5, r2, #9
 8000be6:	b2d8      	uxtb	r0, r3
 8000be8:	e7cf      	b.n	8000b8a <__aeabi_i2f+0x32>
 8000bea:	026d      	lsls	r5, r5, #9
 8000bec:	0a6d      	lsrs	r5, r5, #9
 8000bee:	308e      	adds	r0, #142	@ 0x8e
 8000bf0:	e7cb      	b.n	8000b8a <__aeabi_i2f+0x32>
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	fbffffff 	.word	0xfbffffff

08000bf8 <__aeabi_dadd>:
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	464f      	mov	r7, r9
 8000bfc:	4646      	mov	r6, r8
 8000bfe:	46d6      	mov	lr, sl
 8000c00:	b5c0      	push	{r6, r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	9000      	str	r0, [sp, #0]
 8000c06:	9101      	str	r1, [sp, #4]
 8000c08:	030e      	lsls	r6, r1, #12
 8000c0a:	004c      	lsls	r4, r1, #1
 8000c0c:	0fcd      	lsrs	r5, r1, #31
 8000c0e:	0a71      	lsrs	r1, r6, #9
 8000c10:	9e00      	ldr	r6, [sp, #0]
 8000c12:	005f      	lsls	r7, r3, #1
 8000c14:	0f76      	lsrs	r6, r6, #29
 8000c16:	430e      	orrs	r6, r1
 8000c18:	9900      	ldr	r1, [sp, #0]
 8000c1a:	9200      	str	r2, [sp, #0]
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	00c9      	lsls	r1, r1, #3
 8000c20:	4689      	mov	r9, r1
 8000c22:	0319      	lsls	r1, r3, #12
 8000c24:	0d7b      	lsrs	r3, r7, #21
 8000c26:	4698      	mov	r8, r3
 8000c28:	9b01      	ldr	r3, [sp, #4]
 8000c2a:	0a49      	lsrs	r1, r1, #9
 8000c2c:	0fdb      	lsrs	r3, r3, #31
 8000c2e:	469c      	mov	ip, r3
 8000c30:	9b00      	ldr	r3, [sp, #0]
 8000c32:	9a00      	ldr	r2, [sp, #0]
 8000c34:	0f5b      	lsrs	r3, r3, #29
 8000c36:	430b      	orrs	r3, r1
 8000c38:	4641      	mov	r1, r8
 8000c3a:	0d64      	lsrs	r4, r4, #21
 8000c3c:	00d2      	lsls	r2, r2, #3
 8000c3e:	1a61      	subs	r1, r4, r1
 8000c40:	4565      	cmp	r5, ip
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x4e>
 8000c44:	e0a6      	b.n	8000d94 <__aeabi_dadd+0x19c>
 8000c46:	2900      	cmp	r1, #0
 8000c48:	dd72      	ble.n	8000d30 <__aeabi_dadd+0x138>
 8000c4a:	4647      	mov	r7, r8
 8000c4c:	2f00      	cmp	r7, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x5a>
 8000c50:	e0dd      	b.n	8000e0e <__aeabi_dadd+0x216>
 8000c52:	4fcc      	ldr	r7, [pc, #816]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000c54:	42bc      	cmp	r4, r7
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x62>
 8000c58:	e19a      	b.n	8000f90 <__aeabi_dadd+0x398>
 8000c5a:	2701      	movs	r7, #1
 8000c5c:	2938      	cmp	r1, #56	@ 0x38
 8000c5e:	dc17      	bgt.n	8000c90 <__aeabi_dadd+0x98>
 8000c60:	2780      	movs	r7, #128	@ 0x80
 8000c62:	043f      	lsls	r7, r7, #16
 8000c64:	433b      	orrs	r3, r7
 8000c66:	291f      	cmp	r1, #31
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_dadd+0x74>
 8000c6a:	e1dd      	b.n	8001028 <__aeabi_dadd+0x430>
 8000c6c:	2720      	movs	r7, #32
 8000c6e:	1a78      	subs	r0, r7, r1
 8000c70:	001f      	movs	r7, r3
 8000c72:	4087      	lsls	r7, r0
 8000c74:	46ba      	mov	sl, r7
 8000c76:	0017      	movs	r7, r2
 8000c78:	40cf      	lsrs	r7, r1
 8000c7a:	4684      	mov	ip, r0
 8000c7c:	0038      	movs	r0, r7
 8000c7e:	4657      	mov	r7, sl
 8000c80:	4307      	orrs	r7, r0
 8000c82:	4660      	mov	r0, ip
 8000c84:	4082      	lsls	r2, r0
 8000c86:	40cb      	lsrs	r3, r1
 8000c88:	1e50      	subs	r0, r2, #1
 8000c8a:	4182      	sbcs	r2, r0
 8000c8c:	1af6      	subs	r6, r6, r3
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	464b      	mov	r3, r9
 8000c92:	1bdf      	subs	r7, r3, r7
 8000c94:	45b9      	cmp	r9, r7
 8000c96:	4180      	sbcs	r0, r0
 8000c98:	4240      	negs	r0, r0
 8000c9a:	1a36      	subs	r6, r6, r0
 8000c9c:	0233      	lsls	r3, r6, #8
 8000c9e:	d400      	bmi.n	8000ca2 <__aeabi_dadd+0xaa>
 8000ca0:	e0ff      	b.n	8000ea2 <__aeabi_dadd+0x2aa>
 8000ca2:	0276      	lsls	r6, r6, #9
 8000ca4:	0a76      	lsrs	r6, r6, #9
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_dadd+0xb4>
 8000caa:	e13c      	b.n	8000f26 <__aeabi_dadd+0x32e>
 8000cac:	0030      	movs	r0, r6
 8000cae:	f001 ff8b 	bl	8002bc8 <__clzsi2>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	0038      	movs	r0, r7
 8000cba:	1aca      	subs	r2, r1, r3
 8000cbc:	40d0      	lsrs	r0, r2
 8000cbe:	409e      	lsls	r6, r3
 8000cc0:	0002      	movs	r2, r0
 8000cc2:	409f      	lsls	r7, r3
 8000cc4:	4332      	orrs	r2, r6
 8000cc6:	429c      	cmp	r4, r3
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_dadd+0xd4>
 8000cca:	e1a6      	b.n	800101a <__aeabi_dadd+0x422>
 8000ccc:	1b18      	subs	r0, r3, r4
 8000cce:	3001      	adds	r0, #1
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	003e      	movs	r6, r7
 8000cd4:	408f      	lsls	r7, r1
 8000cd6:	40c6      	lsrs	r6, r0
 8000cd8:	1e7b      	subs	r3, r7, #1
 8000cda:	419f      	sbcs	r7, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	408b      	lsls	r3, r1
 8000ce0:	4337      	orrs	r7, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	40c2      	lsrs	r2, r0
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	0016      	movs	r6, r2
 8000cea:	2400      	movs	r4, #0
 8000cec:	4313      	orrs	r3, r2
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0xfa>
 8000cf0:	e1df      	b.n	80010b2 <__aeabi_dadd+0x4ba>
 8000cf2:	077b      	lsls	r3, r7, #29
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dadd+0x100>
 8000cf6:	e332      	b.n	800135e <__aeabi_dadd+0x766>
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	003a      	movs	r2, r7
 8000cfc:	403b      	ands	r3, r7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d004      	beq.n	8000d0c <__aeabi_dadd+0x114>
 8000d02:	1d3a      	adds	r2, r7, #4
 8000d04:	42ba      	cmp	r2, r7
 8000d06:	41bf      	sbcs	r7, r7
 8000d08:	427f      	negs	r7, r7
 8000d0a:	19f6      	adds	r6, r6, r7
 8000d0c:	0233      	lsls	r3, r6, #8
 8000d0e:	d400      	bmi.n	8000d12 <__aeabi_dadd+0x11a>
 8000d10:	e323      	b.n	800135a <__aeabi_dadd+0x762>
 8000d12:	4b9c      	ldr	r3, [pc, #624]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000d14:	3401      	adds	r4, #1
 8000d16:	429c      	cmp	r4, r3
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x124>
 8000d1a:	e0b4      	b.n	8000e86 <__aeabi_dadd+0x28e>
 8000d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8000f88 <__aeabi_dadd+0x390>)
 8000d1e:	0564      	lsls	r4, r4, #21
 8000d20:	401e      	ands	r6, r3
 8000d22:	0d64      	lsrs	r4, r4, #21
 8000d24:	0777      	lsls	r7, r6, #29
 8000d26:	08d2      	lsrs	r2, r2, #3
 8000d28:	0276      	lsls	r6, r6, #9
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	0b36      	lsrs	r6, r6, #12
 8000d2e:	e0ac      	b.n	8000e8a <__aeabi_dadd+0x292>
 8000d30:	2900      	cmp	r1, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x13e>
 8000d34:	e07e      	b.n	8000e34 <__aeabi_dadd+0x23c>
 8000d36:	4641      	mov	r1, r8
 8000d38:	1b09      	subs	r1, r1, r4
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_dadd+0x148>
 8000d3e:	e160      	b.n	8001002 <__aeabi_dadd+0x40a>
 8000d40:	0034      	movs	r4, r6
 8000d42:	4648      	mov	r0, r9
 8000d44:	4304      	orrs	r4, r0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dadd+0x152>
 8000d48:	e1c9      	b.n	80010de <__aeabi_dadd+0x4e6>
 8000d4a:	1e4c      	subs	r4, r1, #1
 8000d4c:	2901      	cmp	r1, #1
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_dadd+0x15a>
 8000d50:	e22e      	b.n	80011b0 <__aeabi_dadd+0x5b8>
 8000d52:	4d8c      	ldr	r5, [pc, #560]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000d54:	42a9      	cmp	r1, r5
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dadd+0x162>
 8000d58:	e224      	b.n	80011a4 <__aeabi_dadd+0x5ac>
 8000d5a:	2701      	movs	r7, #1
 8000d5c:	2c38      	cmp	r4, #56	@ 0x38
 8000d5e:	dc11      	bgt.n	8000d84 <__aeabi_dadd+0x18c>
 8000d60:	0021      	movs	r1, r4
 8000d62:	291f      	cmp	r1, #31
 8000d64:	dd00      	ble.n	8000d68 <__aeabi_dadd+0x170>
 8000d66:	e20b      	b.n	8001180 <__aeabi_dadd+0x588>
 8000d68:	2420      	movs	r4, #32
 8000d6a:	0037      	movs	r7, r6
 8000d6c:	4648      	mov	r0, r9
 8000d6e:	1a64      	subs	r4, r4, r1
 8000d70:	40a7      	lsls	r7, r4
 8000d72:	40c8      	lsrs	r0, r1
 8000d74:	4307      	orrs	r7, r0
 8000d76:	4648      	mov	r0, r9
 8000d78:	40a0      	lsls	r0, r4
 8000d7a:	40ce      	lsrs	r6, r1
 8000d7c:	1e44      	subs	r4, r0, #1
 8000d7e:	41a0      	sbcs	r0, r4
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	4307      	orrs	r7, r0
 8000d84:	1bd7      	subs	r7, r2, r7
 8000d86:	42ba      	cmp	r2, r7
 8000d88:	4192      	sbcs	r2, r2
 8000d8a:	4252      	negs	r2, r2
 8000d8c:	4665      	mov	r5, ip
 8000d8e:	4644      	mov	r4, r8
 8000d90:	1a9e      	subs	r6, r3, r2
 8000d92:	e783      	b.n	8000c9c <__aeabi_dadd+0xa4>
 8000d94:	2900      	cmp	r1, #0
 8000d96:	dc00      	bgt.n	8000d9a <__aeabi_dadd+0x1a2>
 8000d98:	e09c      	b.n	8000ed4 <__aeabi_dadd+0x2dc>
 8000d9a:	4647      	mov	r7, r8
 8000d9c:	2f00      	cmp	r7, #0
 8000d9e:	d167      	bne.n	8000e70 <__aeabi_dadd+0x278>
 8000da0:	001f      	movs	r7, r3
 8000da2:	4317      	orrs	r7, r2
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x1b0>
 8000da6:	e0e4      	b.n	8000f72 <__aeabi_dadd+0x37a>
 8000da8:	1e48      	subs	r0, r1, #1
 8000daa:	2901      	cmp	r1, #1
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x1b8>
 8000dae:	e19b      	b.n	80010e8 <__aeabi_dadd+0x4f0>
 8000db0:	4f74      	ldr	r7, [pc, #464]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000db2:	42b9      	cmp	r1, r7
 8000db4:	d100      	bne.n	8000db8 <__aeabi_dadd+0x1c0>
 8000db6:	e0eb      	b.n	8000f90 <__aeabi_dadd+0x398>
 8000db8:	2701      	movs	r7, #1
 8000dba:	0001      	movs	r1, r0
 8000dbc:	2838      	cmp	r0, #56	@ 0x38
 8000dbe:	dc11      	bgt.n	8000de4 <__aeabi_dadd+0x1ec>
 8000dc0:	291f      	cmp	r1, #31
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_dadd+0x1ce>
 8000dc4:	e1c7      	b.n	8001156 <__aeabi_dadd+0x55e>
 8000dc6:	2720      	movs	r7, #32
 8000dc8:	1a78      	subs	r0, r7, r1
 8000dca:	001f      	movs	r7, r3
 8000dcc:	4684      	mov	ip, r0
 8000dce:	4087      	lsls	r7, r0
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	40c8      	lsrs	r0, r1
 8000dd4:	4307      	orrs	r7, r0
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	4082      	lsls	r2, r0
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	1e50      	subs	r0, r2, #1
 8000dde:	4182      	sbcs	r2, r0
 8000de0:	18f6      	adds	r6, r6, r3
 8000de2:	4317      	orrs	r7, r2
 8000de4:	444f      	add	r7, r9
 8000de6:	454f      	cmp	r7, r9
 8000de8:	4180      	sbcs	r0, r0
 8000dea:	4240      	negs	r0, r0
 8000dec:	1836      	adds	r6, r6, r0
 8000dee:	0233      	lsls	r3, r6, #8
 8000df0:	d557      	bpl.n	8000ea2 <__aeabi_dadd+0x2aa>
 8000df2:	4b64      	ldr	r3, [pc, #400]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000df4:	3401      	adds	r4, #1
 8000df6:	429c      	cmp	r4, r3
 8000df8:	d045      	beq.n	8000e86 <__aeabi_dadd+0x28e>
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	4b62      	ldr	r3, [pc, #392]	@ (8000f88 <__aeabi_dadd+0x390>)
 8000dfe:	087a      	lsrs	r2, r7, #1
 8000e00:	401e      	ands	r6, r3
 8000e02:	4039      	ands	r1, r7
 8000e04:	430a      	orrs	r2, r1
 8000e06:	07f7      	lsls	r7, r6, #31
 8000e08:	4317      	orrs	r7, r2
 8000e0a:	0876      	lsrs	r6, r6, #1
 8000e0c:	e771      	b.n	8000cf2 <__aeabi_dadd+0xfa>
 8000e0e:	001f      	movs	r7, r3
 8000e10:	4317      	orrs	r7, r2
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dadd+0x21e>
 8000e14:	e0ad      	b.n	8000f72 <__aeabi_dadd+0x37a>
 8000e16:	1e4f      	subs	r7, r1, #1
 8000e18:	46bc      	mov	ip, r7
 8000e1a:	2901      	cmp	r1, #1
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_dadd+0x228>
 8000e1e:	e182      	b.n	8001126 <__aeabi_dadd+0x52e>
 8000e20:	4f58      	ldr	r7, [pc, #352]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000e22:	42b9      	cmp	r1, r7
 8000e24:	d100      	bne.n	8000e28 <__aeabi_dadd+0x230>
 8000e26:	e190      	b.n	800114a <__aeabi_dadd+0x552>
 8000e28:	4661      	mov	r1, ip
 8000e2a:	2701      	movs	r7, #1
 8000e2c:	2938      	cmp	r1, #56	@ 0x38
 8000e2e:	dd00      	ble.n	8000e32 <__aeabi_dadd+0x23a>
 8000e30:	e72e      	b.n	8000c90 <__aeabi_dadd+0x98>
 8000e32:	e718      	b.n	8000c66 <__aeabi_dadd+0x6e>
 8000e34:	4f55      	ldr	r7, [pc, #340]	@ (8000f8c <__aeabi_dadd+0x394>)
 8000e36:	1c61      	adds	r1, r4, #1
 8000e38:	4239      	tst	r1, r7
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_dadd+0x246>
 8000e3c:	e0d0      	b.n	8000fe0 <__aeabi_dadd+0x3e8>
 8000e3e:	0031      	movs	r1, r6
 8000e40:	4648      	mov	r0, r9
 8000e42:	001f      	movs	r7, r3
 8000e44:	4301      	orrs	r1, r0
 8000e46:	4317      	orrs	r7, r2
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x256>
 8000e4c:	e13d      	b.n	80010ca <__aeabi_dadd+0x4d2>
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d100      	bne.n	8000e54 <__aeabi_dadd+0x25c>
 8000e52:	e1bc      	b.n	80011ce <__aeabi_dadd+0x5d6>
 8000e54:	2f00      	cmp	r7, #0
 8000e56:	d000      	beq.n	8000e5a <__aeabi_dadd+0x262>
 8000e58:	e1bf      	b.n	80011da <__aeabi_dadd+0x5e2>
 8000e5a:	464b      	mov	r3, r9
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	08d8      	lsrs	r0, r3, #3
 8000e60:	0777      	lsls	r7, r6, #29
 8000e62:	4307      	orrs	r7, r0
 8000e64:	08f0      	lsrs	r0, r6, #3
 8000e66:	0306      	lsls	r6, r0, #12
 8000e68:	054c      	lsls	r4, r1, #21
 8000e6a:	0b36      	lsrs	r6, r6, #12
 8000e6c:	0d64      	lsrs	r4, r4, #21
 8000e6e:	e00c      	b.n	8000e8a <__aeabi_dadd+0x292>
 8000e70:	4f44      	ldr	r7, [pc, #272]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000e72:	42bc      	cmp	r4, r7
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x280>
 8000e76:	e08b      	b.n	8000f90 <__aeabi_dadd+0x398>
 8000e78:	2701      	movs	r7, #1
 8000e7a:	2938      	cmp	r1, #56	@ 0x38
 8000e7c:	dcb2      	bgt.n	8000de4 <__aeabi_dadd+0x1ec>
 8000e7e:	2780      	movs	r7, #128	@ 0x80
 8000e80:	043f      	lsls	r7, r7, #16
 8000e82:	433b      	orrs	r3, r7
 8000e84:	e79c      	b.n	8000dc0 <__aeabi_dadd+0x1c8>
 8000e86:	2600      	movs	r6, #0
 8000e88:	2700      	movs	r7, #0
 8000e8a:	0524      	lsls	r4, r4, #20
 8000e8c:	4334      	orrs	r4, r6
 8000e8e:	07ed      	lsls	r5, r5, #31
 8000e90:	432c      	orrs	r4, r5
 8000e92:	0038      	movs	r0, r7
 8000e94:	0021      	movs	r1, r4
 8000e96:	b002      	add	sp, #8
 8000e98:	bce0      	pop	{r5, r6, r7}
 8000e9a:	46ba      	mov	sl, r7
 8000e9c:	46b1      	mov	r9, r6
 8000e9e:	46a8      	mov	r8, r5
 8000ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ea2:	077b      	lsls	r3, r7, #29
 8000ea4:	d004      	beq.n	8000eb0 <__aeabi_dadd+0x2b8>
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	403b      	ands	r3, r7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_dadd+0x2b8>
 8000eae:	e728      	b.n	8000d02 <__aeabi_dadd+0x10a>
 8000eb0:	08f8      	lsrs	r0, r7, #3
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000eb4:	0777      	lsls	r7, r6, #29
 8000eb6:	4307      	orrs	r7, r0
 8000eb8:	08f0      	lsrs	r0, r6, #3
 8000eba:	429c      	cmp	r4, r3
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_dadd+0x2c8>
 8000ebe:	e24a      	b.n	8001356 <__aeabi_dadd+0x75e>
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	4303      	orrs	r3, r0
 8000ec4:	d059      	beq.n	8000f7a <__aeabi_dadd+0x382>
 8000ec6:	2680      	movs	r6, #128	@ 0x80
 8000ec8:	0336      	lsls	r6, r6, #12
 8000eca:	4306      	orrs	r6, r0
 8000ecc:	0336      	lsls	r6, r6, #12
 8000ece:	4c2d      	ldr	r4, [pc, #180]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000ed0:	0b36      	lsrs	r6, r6, #12
 8000ed2:	e7da      	b.n	8000e8a <__aeabi_dadd+0x292>
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d061      	beq.n	8000f9c <__aeabi_dadd+0x3a4>
 8000ed8:	4641      	mov	r1, r8
 8000eda:	1b09      	subs	r1, r1, r4
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x2ea>
 8000ee0:	e0b9      	b.n	8001056 <__aeabi_dadd+0x45e>
 8000ee2:	4c28      	ldr	r4, [pc, #160]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000ee4:	45a0      	cmp	r8, r4
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dadd+0x2f2>
 8000ee8:	e1a5      	b.n	8001236 <__aeabi_dadd+0x63e>
 8000eea:	2701      	movs	r7, #1
 8000eec:	2938      	cmp	r1, #56	@ 0x38
 8000eee:	dc13      	bgt.n	8000f18 <__aeabi_dadd+0x320>
 8000ef0:	2480      	movs	r4, #128	@ 0x80
 8000ef2:	0424      	lsls	r4, r4, #16
 8000ef4:	4326      	orrs	r6, r4
 8000ef6:	291f      	cmp	r1, #31
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_dadd+0x304>
 8000efa:	e1c8      	b.n	800128e <__aeabi_dadd+0x696>
 8000efc:	2420      	movs	r4, #32
 8000efe:	0037      	movs	r7, r6
 8000f00:	4648      	mov	r0, r9
 8000f02:	1a64      	subs	r4, r4, r1
 8000f04:	40a7      	lsls	r7, r4
 8000f06:	40c8      	lsrs	r0, r1
 8000f08:	4307      	orrs	r7, r0
 8000f0a:	4648      	mov	r0, r9
 8000f0c:	40a0      	lsls	r0, r4
 8000f0e:	40ce      	lsrs	r6, r1
 8000f10:	1e44      	subs	r4, r0, #1
 8000f12:	41a0      	sbcs	r0, r4
 8000f14:	199b      	adds	r3, r3, r6
 8000f16:	4307      	orrs	r7, r0
 8000f18:	18bf      	adds	r7, r7, r2
 8000f1a:	4297      	cmp	r7, r2
 8000f1c:	4192      	sbcs	r2, r2
 8000f1e:	4252      	negs	r2, r2
 8000f20:	4644      	mov	r4, r8
 8000f22:	18d6      	adds	r6, r2, r3
 8000f24:	e763      	b.n	8000dee <__aeabi_dadd+0x1f6>
 8000f26:	0038      	movs	r0, r7
 8000f28:	f001 fe4e 	bl	8002bc8 <__clzsi2>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	3318      	adds	r3, #24
 8000f30:	2b1f      	cmp	r3, #31
 8000f32:	dc00      	bgt.n	8000f36 <__aeabi_dadd+0x33e>
 8000f34:	e6bf      	b.n	8000cb6 <__aeabi_dadd+0xbe>
 8000f36:	003a      	movs	r2, r7
 8000f38:	3808      	subs	r0, #8
 8000f3a:	4082      	lsls	r2, r0
 8000f3c:	429c      	cmp	r4, r3
 8000f3e:	dd00      	ble.n	8000f42 <__aeabi_dadd+0x34a>
 8000f40:	e083      	b.n	800104a <__aeabi_dadd+0x452>
 8000f42:	1b1b      	subs	r3, r3, r4
 8000f44:	1c58      	adds	r0, r3, #1
 8000f46:	281f      	cmp	r0, #31
 8000f48:	dc00      	bgt.n	8000f4c <__aeabi_dadd+0x354>
 8000f4a:	e1b4      	b.n	80012b6 <__aeabi_dadd+0x6be>
 8000f4c:	0017      	movs	r7, r2
 8000f4e:	3b1f      	subs	r3, #31
 8000f50:	40df      	lsrs	r7, r3
 8000f52:	2820      	cmp	r0, #32
 8000f54:	d005      	beq.n	8000f62 <__aeabi_dadd+0x36a>
 8000f56:	2340      	movs	r3, #64	@ 0x40
 8000f58:	1a1b      	subs	r3, r3, r0
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	1e53      	subs	r3, r2, #1
 8000f5e:	419a      	sbcs	r2, r3
 8000f60:	4317      	orrs	r7, r2
 8000f62:	2400      	movs	r4, #0
 8000f64:	2f00      	cmp	r7, #0
 8000f66:	d00a      	beq.n	8000f7e <__aeabi_dadd+0x386>
 8000f68:	077b      	lsls	r3, r7, #29
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_dadd+0x376>
 8000f6c:	e6c4      	b.n	8000cf8 <__aeabi_dadd+0x100>
 8000f6e:	0026      	movs	r6, r4
 8000f70:	e79e      	b.n	8000eb0 <__aeabi_dadd+0x2b8>
 8000f72:	464b      	mov	r3, r9
 8000f74:	000c      	movs	r4, r1
 8000f76:	08d8      	lsrs	r0, r3, #3
 8000f78:	e79b      	b.n	8000eb2 <__aeabi_dadd+0x2ba>
 8000f7a:	2700      	movs	r7, #0
 8000f7c:	4c01      	ldr	r4, [pc, #4]	@ (8000f84 <__aeabi_dadd+0x38c>)
 8000f7e:	2600      	movs	r6, #0
 8000f80:	e783      	b.n	8000e8a <__aeabi_dadd+0x292>
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	000007ff 	.word	0x000007ff
 8000f88:	ff7fffff 	.word	0xff7fffff
 8000f8c:	000007fe 	.word	0x000007fe
 8000f90:	464b      	mov	r3, r9
 8000f92:	0777      	lsls	r7, r6, #29
 8000f94:	08d8      	lsrs	r0, r3, #3
 8000f96:	4307      	orrs	r7, r0
 8000f98:	08f0      	lsrs	r0, r6, #3
 8000f9a:	e791      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 8000f9c:	4fcd      	ldr	r7, [pc, #820]	@ (80012d4 <__aeabi_dadd+0x6dc>)
 8000f9e:	1c61      	adds	r1, r4, #1
 8000fa0:	4239      	tst	r1, r7
 8000fa2:	d16b      	bne.n	800107c <__aeabi_dadd+0x484>
 8000fa4:	0031      	movs	r1, r6
 8000fa6:	4648      	mov	r0, r9
 8000fa8:	4301      	orrs	r1, r0
 8000faa:	2c00      	cmp	r4, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_dadd+0x3b8>
 8000fae:	e14b      	b.n	8001248 <__aeabi_dadd+0x650>
 8000fb0:	001f      	movs	r7, r3
 8000fb2:	4317      	orrs	r7, r2
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_dadd+0x3c2>
 8000fb8:	e181      	b.n	80012be <__aeabi_dadd+0x6c6>
 8000fba:	2f00      	cmp	r7, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x3c8>
 8000fbe:	e74c      	b.n	8000e5a <__aeabi_dadd+0x262>
 8000fc0:	444a      	add	r2, r9
 8000fc2:	454a      	cmp	r2, r9
 8000fc4:	4180      	sbcs	r0, r0
 8000fc6:	18f6      	adds	r6, r6, r3
 8000fc8:	4240      	negs	r0, r0
 8000fca:	1836      	adds	r6, r6, r0
 8000fcc:	0233      	lsls	r3, r6, #8
 8000fce:	d500      	bpl.n	8000fd2 <__aeabi_dadd+0x3da>
 8000fd0:	e1b0      	b.n	8001334 <__aeabi_dadd+0x73c>
 8000fd2:	0017      	movs	r7, r2
 8000fd4:	4691      	mov	r9, r2
 8000fd6:	4337      	orrs	r7, r6
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_dadd+0x3e4>
 8000fda:	e73e      	b.n	8000e5a <__aeabi_dadd+0x262>
 8000fdc:	2600      	movs	r6, #0
 8000fde:	e754      	b.n	8000e8a <__aeabi_dadd+0x292>
 8000fe0:	4649      	mov	r1, r9
 8000fe2:	1a89      	subs	r1, r1, r2
 8000fe4:	4688      	mov	r8, r1
 8000fe6:	45c1      	cmp	r9, r8
 8000fe8:	41bf      	sbcs	r7, r7
 8000fea:	1af1      	subs	r1, r6, r3
 8000fec:	427f      	negs	r7, r7
 8000fee:	1bc9      	subs	r1, r1, r7
 8000ff0:	020f      	lsls	r7, r1, #8
 8000ff2:	d461      	bmi.n	80010b8 <__aeabi_dadd+0x4c0>
 8000ff4:	4647      	mov	r7, r8
 8000ff6:	430f      	orrs	r7, r1
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dadd+0x404>
 8000ffa:	e0bd      	b.n	8001178 <__aeabi_dadd+0x580>
 8000ffc:	000e      	movs	r6, r1
 8000ffe:	4647      	mov	r7, r8
 8001000:	e651      	b.n	8000ca6 <__aeabi_dadd+0xae>
 8001002:	4cb5      	ldr	r4, [pc, #724]	@ (80012d8 <__aeabi_dadd+0x6e0>)
 8001004:	45a0      	cmp	r8, r4
 8001006:	d100      	bne.n	800100a <__aeabi_dadd+0x412>
 8001008:	e100      	b.n	800120c <__aeabi_dadd+0x614>
 800100a:	2701      	movs	r7, #1
 800100c:	2938      	cmp	r1, #56	@ 0x38
 800100e:	dd00      	ble.n	8001012 <__aeabi_dadd+0x41a>
 8001010:	e6b8      	b.n	8000d84 <__aeabi_dadd+0x18c>
 8001012:	2480      	movs	r4, #128	@ 0x80
 8001014:	0424      	lsls	r4, r4, #16
 8001016:	4326      	orrs	r6, r4
 8001018:	e6a3      	b.n	8000d62 <__aeabi_dadd+0x16a>
 800101a:	4eb0      	ldr	r6, [pc, #704]	@ (80012dc <__aeabi_dadd+0x6e4>)
 800101c:	1ae4      	subs	r4, r4, r3
 800101e:	4016      	ands	r6, r2
 8001020:	077b      	lsls	r3, r7, #29
 8001022:	d000      	beq.n	8001026 <__aeabi_dadd+0x42e>
 8001024:	e73f      	b.n	8000ea6 <__aeabi_dadd+0x2ae>
 8001026:	e743      	b.n	8000eb0 <__aeabi_dadd+0x2b8>
 8001028:	000f      	movs	r7, r1
 800102a:	0018      	movs	r0, r3
 800102c:	3f20      	subs	r7, #32
 800102e:	40f8      	lsrs	r0, r7
 8001030:	4684      	mov	ip, r0
 8001032:	2920      	cmp	r1, #32
 8001034:	d003      	beq.n	800103e <__aeabi_dadd+0x446>
 8001036:	2740      	movs	r7, #64	@ 0x40
 8001038:	1a79      	subs	r1, r7, r1
 800103a:	408b      	lsls	r3, r1
 800103c:	431a      	orrs	r2, r3
 800103e:	1e53      	subs	r3, r2, #1
 8001040:	419a      	sbcs	r2, r3
 8001042:	4663      	mov	r3, ip
 8001044:	0017      	movs	r7, r2
 8001046:	431f      	orrs	r7, r3
 8001048:	e622      	b.n	8000c90 <__aeabi_dadd+0x98>
 800104a:	48a4      	ldr	r0, [pc, #656]	@ (80012dc <__aeabi_dadd+0x6e4>)
 800104c:	1ae1      	subs	r1, r4, r3
 800104e:	4010      	ands	r0, r2
 8001050:	0747      	lsls	r7, r0, #29
 8001052:	08c0      	lsrs	r0, r0, #3
 8001054:	e707      	b.n	8000e66 <__aeabi_dadd+0x26e>
 8001056:	0034      	movs	r4, r6
 8001058:	4648      	mov	r0, r9
 800105a:	4304      	orrs	r4, r0
 800105c:	d100      	bne.n	8001060 <__aeabi_dadd+0x468>
 800105e:	e0fa      	b.n	8001256 <__aeabi_dadd+0x65e>
 8001060:	1e4c      	subs	r4, r1, #1
 8001062:	2901      	cmp	r1, #1
 8001064:	d100      	bne.n	8001068 <__aeabi_dadd+0x470>
 8001066:	e0d7      	b.n	8001218 <__aeabi_dadd+0x620>
 8001068:	4f9b      	ldr	r7, [pc, #620]	@ (80012d8 <__aeabi_dadd+0x6e0>)
 800106a:	42b9      	cmp	r1, r7
 800106c:	d100      	bne.n	8001070 <__aeabi_dadd+0x478>
 800106e:	e0e2      	b.n	8001236 <__aeabi_dadd+0x63e>
 8001070:	2701      	movs	r7, #1
 8001072:	2c38      	cmp	r4, #56	@ 0x38
 8001074:	dd00      	ble.n	8001078 <__aeabi_dadd+0x480>
 8001076:	e74f      	b.n	8000f18 <__aeabi_dadd+0x320>
 8001078:	0021      	movs	r1, r4
 800107a:	e73c      	b.n	8000ef6 <__aeabi_dadd+0x2fe>
 800107c:	4c96      	ldr	r4, [pc, #600]	@ (80012d8 <__aeabi_dadd+0x6e0>)
 800107e:	42a1      	cmp	r1, r4
 8001080:	d100      	bne.n	8001084 <__aeabi_dadd+0x48c>
 8001082:	e0dd      	b.n	8001240 <__aeabi_dadd+0x648>
 8001084:	444a      	add	r2, r9
 8001086:	454a      	cmp	r2, r9
 8001088:	4180      	sbcs	r0, r0
 800108a:	18f3      	adds	r3, r6, r3
 800108c:	4240      	negs	r0, r0
 800108e:	1818      	adds	r0, r3, r0
 8001090:	07c7      	lsls	r7, r0, #31
 8001092:	0852      	lsrs	r2, r2, #1
 8001094:	4317      	orrs	r7, r2
 8001096:	0846      	lsrs	r6, r0, #1
 8001098:	0752      	lsls	r2, r2, #29
 800109a:	d005      	beq.n	80010a8 <__aeabi_dadd+0x4b0>
 800109c:	220f      	movs	r2, #15
 800109e:	000c      	movs	r4, r1
 80010a0:	403a      	ands	r2, r7
 80010a2:	2a04      	cmp	r2, #4
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dadd+0x4b0>
 80010a6:	e62c      	b.n	8000d02 <__aeabi_dadd+0x10a>
 80010a8:	0776      	lsls	r6, r6, #29
 80010aa:	08ff      	lsrs	r7, r7, #3
 80010ac:	4337      	orrs	r7, r6
 80010ae:	0900      	lsrs	r0, r0, #4
 80010b0:	e6d9      	b.n	8000e66 <__aeabi_dadd+0x26e>
 80010b2:	2700      	movs	r7, #0
 80010b4:	2600      	movs	r6, #0
 80010b6:	e6e8      	b.n	8000e8a <__aeabi_dadd+0x292>
 80010b8:	4649      	mov	r1, r9
 80010ba:	1a57      	subs	r7, r2, r1
 80010bc:	42ba      	cmp	r2, r7
 80010be:	4192      	sbcs	r2, r2
 80010c0:	1b9e      	subs	r6, r3, r6
 80010c2:	4252      	negs	r2, r2
 80010c4:	4665      	mov	r5, ip
 80010c6:	1ab6      	subs	r6, r6, r2
 80010c8:	e5ed      	b.n	8000ca6 <__aeabi_dadd+0xae>
 80010ca:	2900      	cmp	r1, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_dadd+0x4d8>
 80010ce:	e0c6      	b.n	800125e <__aeabi_dadd+0x666>
 80010d0:	2f00      	cmp	r7, #0
 80010d2:	d167      	bne.n	80011a4 <__aeabi_dadd+0x5ac>
 80010d4:	2680      	movs	r6, #128	@ 0x80
 80010d6:	2500      	movs	r5, #0
 80010d8:	4c7f      	ldr	r4, [pc, #508]	@ (80012d8 <__aeabi_dadd+0x6e0>)
 80010da:	0336      	lsls	r6, r6, #12
 80010dc:	e6d5      	b.n	8000e8a <__aeabi_dadd+0x292>
 80010de:	4665      	mov	r5, ip
 80010e0:	000c      	movs	r4, r1
 80010e2:	001e      	movs	r6, r3
 80010e4:	08d0      	lsrs	r0, r2, #3
 80010e6:	e6e4      	b.n	8000eb2 <__aeabi_dadd+0x2ba>
 80010e8:	444a      	add	r2, r9
 80010ea:	454a      	cmp	r2, r9
 80010ec:	4180      	sbcs	r0, r0
 80010ee:	18f3      	adds	r3, r6, r3
 80010f0:	4240      	negs	r0, r0
 80010f2:	1818      	adds	r0, r3, r0
 80010f4:	0011      	movs	r1, r2
 80010f6:	0203      	lsls	r3, r0, #8
 80010f8:	d400      	bmi.n	80010fc <__aeabi_dadd+0x504>
 80010fa:	e096      	b.n	800122a <__aeabi_dadd+0x632>
 80010fc:	4b77      	ldr	r3, [pc, #476]	@ (80012dc <__aeabi_dadd+0x6e4>)
 80010fe:	0849      	lsrs	r1, r1, #1
 8001100:	4018      	ands	r0, r3
 8001102:	07c3      	lsls	r3, r0, #31
 8001104:	430b      	orrs	r3, r1
 8001106:	0844      	lsrs	r4, r0, #1
 8001108:	0749      	lsls	r1, r1, #29
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x516>
 800110c:	e129      	b.n	8001362 <__aeabi_dadd+0x76a>
 800110e:	220f      	movs	r2, #15
 8001110:	401a      	ands	r2, r3
 8001112:	2a04      	cmp	r2, #4
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x520>
 8001116:	e0ea      	b.n	80012ee <__aeabi_dadd+0x6f6>
 8001118:	1d1f      	adds	r7, r3, #4
 800111a:	429f      	cmp	r7, r3
 800111c:	41b6      	sbcs	r6, r6
 800111e:	4276      	negs	r6, r6
 8001120:	1936      	adds	r6, r6, r4
 8001122:	2402      	movs	r4, #2
 8001124:	e6c4      	b.n	8000eb0 <__aeabi_dadd+0x2b8>
 8001126:	4649      	mov	r1, r9
 8001128:	1a8f      	subs	r7, r1, r2
 800112a:	45b9      	cmp	r9, r7
 800112c:	4180      	sbcs	r0, r0
 800112e:	1af6      	subs	r6, r6, r3
 8001130:	4240      	negs	r0, r0
 8001132:	1a36      	subs	r6, r6, r0
 8001134:	0233      	lsls	r3, r6, #8
 8001136:	d406      	bmi.n	8001146 <__aeabi_dadd+0x54e>
 8001138:	0773      	lsls	r3, r6, #29
 800113a:	08ff      	lsrs	r7, r7, #3
 800113c:	2101      	movs	r1, #1
 800113e:	431f      	orrs	r7, r3
 8001140:	08f0      	lsrs	r0, r6, #3
 8001142:	e690      	b.n	8000e66 <__aeabi_dadd+0x26e>
 8001144:	4665      	mov	r5, ip
 8001146:	2401      	movs	r4, #1
 8001148:	e5ab      	b.n	8000ca2 <__aeabi_dadd+0xaa>
 800114a:	464b      	mov	r3, r9
 800114c:	0777      	lsls	r7, r6, #29
 800114e:	08d8      	lsrs	r0, r3, #3
 8001150:	4307      	orrs	r7, r0
 8001152:	08f0      	lsrs	r0, r6, #3
 8001154:	e6b4      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 8001156:	000f      	movs	r7, r1
 8001158:	0018      	movs	r0, r3
 800115a:	3f20      	subs	r7, #32
 800115c:	40f8      	lsrs	r0, r7
 800115e:	4684      	mov	ip, r0
 8001160:	2920      	cmp	r1, #32
 8001162:	d003      	beq.n	800116c <__aeabi_dadd+0x574>
 8001164:	2740      	movs	r7, #64	@ 0x40
 8001166:	1a79      	subs	r1, r7, r1
 8001168:	408b      	lsls	r3, r1
 800116a:	431a      	orrs	r2, r3
 800116c:	1e53      	subs	r3, r2, #1
 800116e:	419a      	sbcs	r2, r3
 8001170:	4663      	mov	r3, ip
 8001172:	0017      	movs	r7, r2
 8001174:	431f      	orrs	r7, r3
 8001176:	e635      	b.n	8000de4 <__aeabi_dadd+0x1ec>
 8001178:	2500      	movs	r5, #0
 800117a:	2400      	movs	r4, #0
 800117c:	2600      	movs	r6, #0
 800117e:	e684      	b.n	8000e8a <__aeabi_dadd+0x292>
 8001180:	000c      	movs	r4, r1
 8001182:	0035      	movs	r5, r6
 8001184:	3c20      	subs	r4, #32
 8001186:	40e5      	lsrs	r5, r4
 8001188:	2920      	cmp	r1, #32
 800118a:	d005      	beq.n	8001198 <__aeabi_dadd+0x5a0>
 800118c:	2440      	movs	r4, #64	@ 0x40
 800118e:	1a61      	subs	r1, r4, r1
 8001190:	408e      	lsls	r6, r1
 8001192:	4649      	mov	r1, r9
 8001194:	4331      	orrs	r1, r6
 8001196:	4689      	mov	r9, r1
 8001198:	4648      	mov	r0, r9
 800119a:	1e41      	subs	r1, r0, #1
 800119c:	4188      	sbcs	r0, r1
 800119e:	0007      	movs	r7, r0
 80011a0:	432f      	orrs	r7, r5
 80011a2:	e5ef      	b.n	8000d84 <__aeabi_dadd+0x18c>
 80011a4:	08d2      	lsrs	r2, r2, #3
 80011a6:	075f      	lsls	r7, r3, #29
 80011a8:	4665      	mov	r5, ip
 80011aa:	4317      	orrs	r7, r2
 80011ac:	08d8      	lsrs	r0, r3, #3
 80011ae:	e687      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 80011b0:	1a17      	subs	r7, r2, r0
 80011b2:	42ba      	cmp	r2, r7
 80011b4:	4192      	sbcs	r2, r2
 80011b6:	1b9e      	subs	r6, r3, r6
 80011b8:	4252      	negs	r2, r2
 80011ba:	1ab6      	subs	r6, r6, r2
 80011bc:	0233      	lsls	r3, r6, #8
 80011be:	d4c1      	bmi.n	8001144 <__aeabi_dadd+0x54c>
 80011c0:	0773      	lsls	r3, r6, #29
 80011c2:	08ff      	lsrs	r7, r7, #3
 80011c4:	4665      	mov	r5, ip
 80011c6:	2101      	movs	r1, #1
 80011c8:	431f      	orrs	r7, r3
 80011ca:	08f0      	lsrs	r0, r6, #3
 80011cc:	e64b      	b.n	8000e66 <__aeabi_dadd+0x26e>
 80011ce:	2f00      	cmp	r7, #0
 80011d0:	d07b      	beq.n	80012ca <__aeabi_dadd+0x6d2>
 80011d2:	4665      	mov	r5, ip
 80011d4:	001e      	movs	r6, r3
 80011d6:	4691      	mov	r9, r2
 80011d8:	e63f      	b.n	8000e5a <__aeabi_dadd+0x262>
 80011da:	1a81      	subs	r1, r0, r2
 80011dc:	4688      	mov	r8, r1
 80011de:	45c1      	cmp	r9, r8
 80011e0:	41a4      	sbcs	r4, r4
 80011e2:	1af1      	subs	r1, r6, r3
 80011e4:	4264      	negs	r4, r4
 80011e6:	1b09      	subs	r1, r1, r4
 80011e8:	2480      	movs	r4, #128	@ 0x80
 80011ea:	0424      	lsls	r4, r4, #16
 80011ec:	4221      	tst	r1, r4
 80011ee:	d077      	beq.n	80012e0 <__aeabi_dadd+0x6e8>
 80011f0:	1a10      	subs	r0, r2, r0
 80011f2:	4282      	cmp	r2, r0
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	0007      	movs	r7, r0
 80011f8:	1b9e      	subs	r6, r3, r6
 80011fa:	4252      	negs	r2, r2
 80011fc:	1ab6      	subs	r6, r6, r2
 80011fe:	4337      	orrs	r7, r6
 8001200:	d000      	beq.n	8001204 <__aeabi_dadd+0x60c>
 8001202:	e0a0      	b.n	8001346 <__aeabi_dadd+0x74e>
 8001204:	4665      	mov	r5, ip
 8001206:	2400      	movs	r4, #0
 8001208:	2600      	movs	r6, #0
 800120a:	e63e      	b.n	8000e8a <__aeabi_dadd+0x292>
 800120c:	075f      	lsls	r7, r3, #29
 800120e:	08d2      	lsrs	r2, r2, #3
 8001210:	4665      	mov	r5, ip
 8001212:	4317      	orrs	r7, r2
 8001214:	08d8      	lsrs	r0, r3, #3
 8001216:	e653      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 8001218:	1881      	adds	r1, r0, r2
 800121a:	4291      	cmp	r1, r2
 800121c:	4192      	sbcs	r2, r2
 800121e:	18f0      	adds	r0, r6, r3
 8001220:	4252      	negs	r2, r2
 8001222:	1880      	adds	r0, r0, r2
 8001224:	0203      	lsls	r3, r0, #8
 8001226:	d500      	bpl.n	800122a <__aeabi_dadd+0x632>
 8001228:	e768      	b.n	80010fc <__aeabi_dadd+0x504>
 800122a:	0747      	lsls	r7, r0, #29
 800122c:	08c9      	lsrs	r1, r1, #3
 800122e:	430f      	orrs	r7, r1
 8001230:	08c0      	lsrs	r0, r0, #3
 8001232:	2101      	movs	r1, #1
 8001234:	e617      	b.n	8000e66 <__aeabi_dadd+0x26e>
 8001236:	08d2      	lsrs	r2, r2, #3
 8001238:	075f      	lsls	r7, r3, #29
 800123a:	4317      	orrs	r7, r2
 800123c:	08d8      	lsrs	r0, r3, #3
 800123e:	e63f      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 8001240:	000c      	movs	r4, r1
 8001242:	2600      	movs	r6, #0
 8001244:	2700      	movs	r7, #0
 8001246:	e620      	b.n	8000e8a <__aeabi_dadd+0x292>
 8001248:	2900      	cmp	r1, #0
 800124a:	d156      	bne.n	80012fa <__aeabi_dadd+0x702>
 800124c:	075f      	lsls	r7, r3, #29
 800124e:	08d2      	lsrs	r2, r2, #3
 8001250:	4317      	orrs	r7, r2
 8001252:	08d8      	lsrs	r0, r3, #3
 8001254:	e634      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 8001256:	000c      	movs	r4, r1
 8001258:	001e      	movs	r6, r3
 800125a:	08d0      	lsrs	r0, r2, #3
 800125c:	e629      	b.n	8000eb2 <__aeabi_dadd+0x2ba>
 800125e:	08c1      	lsrs	r1, r0, #3
 8001260:	0770      	lsls	r0, r6, #29
 8001262:	4301      	orrs	r1, r0
 8001264:	08f0      	lsrs	r0, r6, #3
 8001266:	2f00      	cmp	r7, #0
 8001268:	d062      	beq.n	8001330 <__aeabi_dadd+0x738>
 800126a:	2480      	movs	r4, #128	@ 0x80
 800126c:	0324      	lsls	r4, r4, #12
 800126e:	4220      	tst	r0, r4
 8001270:	d007      	beq.n	8001282 <__aeabi_dadd+0x68a>
 8001272:	08de      	lsrs	r6, r3, #3
 8001274:	4226      	tst	r6, r4
 8001276:	d104      	bne.n	8001282 <__aeabi_dadd+0x68a>
 8001278:	4665      	mov	r5, ip
 800127a:	0030      	movs	r0, r6
 800127c:	08d1      	lsrs	r1, r2, #3
 800127e:	075b      	lsls	r3, r3, #29
 8001280:	4319      	orrs	r1, r3
 8001282:	0f4f      	lsrs	r7, r1, #29
 8001284:	00c9      	lsls	r1, r1, #3
 8001286:	08c9      	lsrs	r1, r1, #3
 8001288:	077f      	lsls	r7, r7, #29
 800128a:	430f      	orrs	r7, r1
 800128c:	e618      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 800128e:	000c      	movs	r4, r1
 8001290:	0030      	movs	r0, r6
 8001292:	3c20      	subs	r4, #32
 8001294:	40e0      	lsrs	r0, r4
 8001296:	4684      	mov	ip, r0
 8001298:	2920      	cmp	r1, #32
 800129a:	d005      	beq.n	80012a8 <__aeabi_dadd+0x6b0>
 800129c:	2440      	movs	r4, #64	@ 0x40
 800129e:	1a61      	subs	r1, r4, r1
 80012a0:	408e      	lsls	r6, r1
 80012a2:	4649      	mov	r1, r9
 80012a4:	4331      	orrs	r1, r6
 80012a6:	4689      	mov	r9, r1
 80012a8:	4648      	mov	r0, r9
 80012aa:	1e41      	subs	r1, r0, #1
 80012ac:	4188      	sbcs	r0, r1
 80012ae:	4661      	mov	r1, ip
 80012b0:	0007      	movs	r7, r0
 80012b2:	430f      	orrs	r7, r1
 80012b4:	e630      	b.n	8000f18 <__aeabi_dadd+0x320>
 80012b6:	2120      	movs	r1, #32
 80012b8:	2700      	movs	r7, #0
 80012ba:	1a09      	subs	r1, r1, r0
 80012bc:	e50e      	b.n	8000cdc <__aeabi_dadd+0xe4>
 80012be:	001e      	movs	r6, r3
 80012c0:	2f00      	cmp	r7, #0
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dadd+0x6ce>
 80012c4:	e522      	b.n	8000d0c <__aeabi_dadd+0x114>
 80012c6:	2400      	movs	r4, #0
 80012c8:	e758      	b.n	800117c <__aeabi_dadd+0x584>
 80012ca:	2500      	movs	r5, #0
 80012cc:	2400      	movs	r4, #0
 80012ce:	2600      	movs	r6, #0
 80012d0:	e5db      	b.n	8000e8a <__aeabi_dadd+0x292>
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	000007fe 	.word	0x000007fe
 80012d8:	000007ff 	.word	0x000007ff
 80012dc:	ff7fffff 	.word	0xff7fffff
 80012e0:	4647      	mov	r7, r8
 80012e2:	430f      	orrs	r7, r1
 80012e4:	d100      	bne.n	80012e8 <__aeabi_dadd+0x6f0>
 80012e6:	e747      	b.n	8001178 <__aeabi_dadd+0x580>
 80012e8:	000e      	movs	r6, r1
 80012ea:	46c1      	mov	r9, r8
 80012ec:	e5b5      	b.n	8000e5a <__aeabi_dadd+0x262>
 80012ee:	08df      	lsrs	r7, r3, #3
 80012f0:	0764      	lsls	r4, r4, #29
 80012f2:	2102      	movs	r1, #2
 80012f4:	4327      	orrs	r7, r4
 80012f6:	0900      	lsrs	r0, r0, #4
 80012f8:	e5b5      	b.n	8000e66 <__aeabi_dadd+0x26e>
 80012fa:	0019      	movs	r1, r3
 80012fc:	08c0      	lsrs	r0, r0, #3
 80012fe:	0777      	lsls	r7, r6, #29
 8001300:	4307      	orrs	r7, r0
 8001302:	4311      	orrs	r1, r2
 8001304:	08f0      	lsrs	r0, r6, #3
 8001306:	2900      	cmp	r1, #0
 8001308:	d100      	bne.n	800130c <__aeabi_dadd+0x714>
 800130a:	e5d9      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 800130c:	2180      	movs	r1, #128	@ 0x80
 800130e:	0309      	lsls	r1, r1, #12
 8001310:	4208      	tst	r0, r1
 8001312:	d007      	beq.n	8001324 <__aeabi_dadd+0x72c>
 8001314:	08dc      	lsrs	r4, r3, #3
 8001316:	420c      	tst	r4, r1
 8001318:	d104      	bne.n	8001324 <__aeabi_dadd+0x72c>
 800131a:	08d2      	lsrs	r2, r2, #3
 800131c:	075b      	lsls	r3, r3, #29
 800131e:	431a      	orrs	r2, r3
 8001320:	0017      	movs	r7, r2
 8001322:	0020      	movs	r0, r4
 8001324:	0f7b      	lsrs	r3, r7, #29
 8001326:	00ff      	lsls	r7, r7, #3
 8001328:	08ff      	lsrs	r7, r7, #3
 800132a:	075b      	lsls	r3, r3, #29
 800132c:	431f      	orrs	r7, r3
 800132e:	e5c7      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 8001330:	000f      	movs	r7, r1
 8001332:	e5c5      	b.n	8000ec0 <__aeabi_dadd+0x2c8>
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <__aeabi_dadd+0x788>)
 8001336:	08d2      	lsrs	r2, r2, #3
 8001338:	4033      	ands	r3, r6
 800133a:	075f      	lsls	r7, r3, #29
 800133c:	025b      	lsls	r3, r3, #9
 800133e:	2401      	movs	r4, #1
 8001340:	4317      	orrs	r7, r2
 8001342:	0b1e      	lsrs	r6, r3, #12
 8001344:	e5a1      	b.n	8000e8a <__aeabi_dadd+0x292>
 8001346:	4226      	tst	r6, r4
 8001348:	d012      	beq.n	8001370 <__aeabi_dadd+0x778>
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <__aeabi_dadd+0x788>)
 800134c:	4665      	mov	r5, ip
 800134e:	0002      	movs	r2, r0
 8001350:	2401      	movs	r4, #1
 8001352:	401e      	ands	r6, r3
 8001354:	e4e6      	b.n	8000d24 <__aeabi_dadd+0x12c>
 8001356:	0021      	movs	r1, r4
 8001358:	e585      	b.n	8000e66 <__aeabi_dadd+0x26e>
 800135a:	0017      	movs	r7, r2
 800135c:	e5a8      	b.n	8000eb0 <__aeabi_dadd+0x2b8>
 800135e:	003a      	movs	r2, r7
 8001360:	e4d4      	b.n	8000d0c <__aeabi_dadd+0x114>
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	0764      	lsls	r4, r4, #29
 8001366:	431c      	orrs	r4, r3
 8001368:	0027      	movs	r7, r4
 800136a:	2102      	movs	r1, #2
 800136c:	0900      	lsrs	r0, r0, #4
 800136e:	e57a      	b.n	8000e66 <__aeabi_dadd+0x26e>
 8001370:	08c0      	lsrs	r0, r0, #3
 8001372:	0777      	lsls	r7, r6, #29
 8001374:	4307      	orrs	r7, r0
 8001376:	4665      	mov	r5, ip
 8001378:	2100      	movs	r1, #0
 800137a:	08f0      	lsrs	r0, r6, #3
 800137c:	e573      	b.n	8000e66 <__aeabi_dadd+0x26e>
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	ff7fffff 	.word	0xff7fffff

08001384 <__aeabi_ddiv>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	46de      	mov	lr, fp
 8001388:	4645      	mov	r5, r8
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	b5e0      	push	{r5, r6, r7, lr}
 8001390:	b087      	sub	sp, #28
 8001392:	9200      	str	r2, [sp, #0]
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	030b      	lsls	r3, r1, #12
 8001398:	0b1b      	lsrs	r3, r3, #12
 800139a:	469b      	mov	fp, r3
 800139c:	0fca      	lsrs	r2, r1, #31
 800139e:	004b      	lsls	r3, r1, #1
 80013a0:	0004      	movs	r4, r0
 80013a2:	4680      	mov	r8, r0
 80013a4:	0d5b      	lsrs	r3, r3, #21
 80013a6:	9202      	str	r2, [sp, #8]
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x28>
 80013aa:	e098      	b.n	80014de <__aeabi_ddiv+0x15a>
 80013ac:	4a7c      	ldr	r2, [pc, #496]	@ (80015a0 <__aeabi_ddiv+0x21c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d037      	beq.n	8001422 <__aeabi_ddiv+0x9e>
 80013b2:	4659      	mov	r1, fp
 80013b4:	0f42      	lsrs	r2, r0, #29
 80013b6:	00c9      	lsls	r1, r1, #3
 80013b8:	430a      	orrs	r2, r1
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	0409      	lsls	r1, r1, #16
 80013be:	4311      	orrs	r1, r2
 80013c0:	00c2      	lsls	r2, r0, #3
 80013c2:	4690      	mov	r8, r2
 80013c4:	4a77      	ldr	r2, [pc, #476]	@ (80015a4 <__aeabi_ddiv+0x220>)
 80013c6:	4689      	mov	r9, r1
 80013c8:	4692      	mov	sl, r2
 80013ca:	449a      	add	sl, r3
 80013cc:	2300      	movs	r3, #0
 80013ce:	2400      	movs	r4, #0
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	9e00      	ldr	r6, [sp, #0]
 80013d4:	9f01      	ldr	r7, [sp, #4]
 80013d6:	033b      	lsls	r3, r7, #12
 80013d8:	0b1b      	lsrs	r3, r3, #12
 80013da:	469b      	mov	fp, r3
 80013dc:	007b      	lsls	r3, r7, #1
 80013de:	0030      	movs	r0, r6
 80013e0:	0d5b      	lsrs	r3, r3, #21
 80013e2:	0ffd      	lsrs	r5, r7, #31
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d059      	beq.n	800149c <__aeabi_ddiv+0x118>
 80013e8:	4a6d      	ldr	r2, [pc, #436]	@ (80015a0 <__aeabi_ddiv+0x21c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d048      	beq.n	8001480 <__aeabi_ddiv+0xfc>
 80013ee:	4659      	mov	r1, fp
 80013f0:	0f72      	lsrs	r2, r6, #29
 80013f2:	00c9      	lsls	r1, r1, #3
 80013f4:	430a      	orrs	r2, r1
 80013f6:	2180      	movs	r1, #128	@ 0x80
 80013f8:	0409      	lsls	r1, r1, #16
 80013fa:	4311      	orrs	r1, r2
 80013fc:	468b      	mov	fp, r1
 80013fe:	4969      	ldr	r1, [pc, #420]	@ (80015a4 <__aeabi_ddiv+0x220>)
 8001400:	00f2      	lsls	r2, r6, #3
 8001402:	468c      	mov	ip, r1
 8001404:	4651      	mov	r1, sl
 8001406:	4463      	add	r3, ip
 8001408:	1acb      	subs	r3, r1, r3
 800140a:	469a      	mov	sl, r3
 800140c:	2100      	movs	r1, #0
 800140e:	9e02      	ldr	r6, [sp, #8]
 8001410:	406e      	eors	r6, r5
 8001412:	b2f6      	uxtb	r6, r6
 8001414:	2c0f      	cmp	r4, #15
 8001416:	d900      	bls.n	800141a <__aeabi_ddiv+0x96>
 8001418:	e0ce      	b.n	80015b8 <__aeabi_ddiv+0x234>
 800141a:	4b63      	ldr	r3, [pc, #396]	@ (80015a8 <__aeabi_ddiv+0x224>)
 800141c:	00a4      	lsls	r4, r4, #2
 800141e:	591b      	ldr	r3, [r3, r4]
 8001420:	469f      	mov	pc, r3
 8001422:	465a      	mov	r2, fp
 8001424:	4302      	orrs	r2, r0
 8001426:	4691      	mov	r9, r2
 8001428:	d000      	beq.n	800142c <__aeabi_ddiv+0xa8>
 800142a:	e090      	b.n	800154e <__aeabi_ddiv+0x1ca>
 800142c:	469a      	mov	sl, r3
 800142e:	2302      	movs	r3, #2
 8001430:	4690      	mov	r8, r2
 8001432:	2408      	movs	r4, #8
 8001434:	9303      	str	r3, [sp, #12]
 8001436:	e7cc      	b.n	80013d2 <__aeabi_ddiv+0x4e>
 8001438:	46cb      	mov	fp, r9
 800143a:	4642      	mov	r2, r8
 800143c:	9d02      	ldr	r5, [sp, #8]
 800143e:	9903      	ldr	r1, [sp, #12]
 8001440:	2902      	cmp	r1, #2
 8001442:	d100      	bne.n	8001446 <__aeabi_ddiv+0xc2>
 8001444:	e1de      	b.n	8001804 <__aeabi_ddiv+0x480>
 8001446:	2903      	cmp	r1, #3
 8001448:	d100      	bne.n	800144c <__aeabi_ddiv+0xc8>
 800144a:	e08d      	b.n	8001568 <__aeabi_ddiv+0x1e4>
 800144c:	2901      	cmp	r1, #1
 800144e:	d000      	beq.n	8001452 <__aeabi_ddiv+0xce>
 8001450:	e179      	b.n	8001746 <__aeabi_ddiv+0x3c2>
 8001452:	002e      	movs	r6, r5
 8001454:	2200      	movs	r2, #0
 8001456:	2300      	movs	r3, #0
 8001458:	2400      	movs	r4, #0
 800145a:	4690      	mov	r8, r2
 800145c:	051b      	lsls	r3, r3, #20
 800145e:	4323      	orrs	r3, r4
 8001460:	07f6      	lsls	r6, r6, #31
 8001462:	4333      	orrs	r3, r6
 8001464:	4640      	mov	r0, r8
 8001466:	0019      	movs	r1, r3
 8001468:	b007      	add	sp, #28
 800146a:	bcf0      	pop	{r4, r5, r6, r7}
 800146c:	46bb      	mov	fp, r7
 800146e:	46b2      	mov	sl, r6
 8001470:	46a9      	mov	r9, r5
 8001472:	46a0      	mov	r8, r4
 8001474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001476:	2200      	movs	r2, #0
 8001478:	2400      	movs	r4, #0
 800147a:	4690      	mov	r8, r2
 800147c:	4b48      	ldr	r3, [pc, #288]	@ (80015a0 <__aeabi_ddiv+0x21c>)
 800147e:	e7ed      	b.n	800145c <__aeabi_ddiv+0xd8>
 8001480:	465a      	mov	r2, fp
 8001482:	9b00      	ldr	r3, [sp, #0]
 8001484:	431a      	orrs	r2, r3
 8001486:	4b49      	ldr	r3, [pc, #292]	@ (80015ac <__aeabi_ddiv+0x228>)
 8001488:	469c      	mov	ip, r3
 800148a:	44e2      	add	sl, ip
 800148c:	2a00      	cmp	r2, #0
 800148e:	d159      	bne.n	8001544 <__aeabi_ddiv+0x1c0>
 8001490:	2302      	movs	r3, #2
 8001492:	431c      	orrs	r4, r3
 8001494:	2300      	movs	r3, #0
 8001496:	2102      	movs	r1, #2
 8001498:	469b      	mov	fp, r3
 800149a:	e7b8      	b.n	800140e <__aeabi_ddiv+0x8a>
 800149c:	465a      	mov	r2, fp
 800149e:	9b00      	ldr	r3, [sp, #0]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	d049      	beq.n	8001538 <__aeabi_ddiv+0x1b4>
 80014a4:	465b      	mov	r3, fp
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d100      	bne.n	80014ac <__aeabi_ddiv+0x128>
 80014aa:	e19c      	b.n	80017e6 <__aeabi_ddiv+0x462>
 80014ac:	4658      	mov	r0, fp
 80014ae:	f001 fb8b 	bl	8002bc8 <__clzsi2>
 80014b2:	0002      	movs	r2, r0
 80014b4:	0003      	movs	r3, r0
 80014b6:	3a0b      	subs	r2, #11
 80014b8:	271d      	movs	r7, #29
 80014ba:	9e00      	ldr	r6, [sp, #0]
 80014bc:	1aba      	subs	r2, r7, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	4658      	mov	r0, fp
 80014c2:	40d6      	lsrs	r6, r2
 80014c4:	3908      	subs	r1, #8
 80014c6:	4088      	lsls	r0, r1
 80014c8:	0032      	movs	r2, r6
 80014ca:	4302      	orrs	r2, r0
 80014cc:	4693      	mov	fp, r2
 80014ce:	9a00      	ldr	r2, [sp, #0]
 80014d0:	408a      	lsls	r2, r1
 80014d2:	4937      	ldr	r1, [pc, #220]	@ (80015b0 <__aeabi_ddiv+0x22c>)
 80014d4:	4453      	add	r3, sl
 80014d6:	468a      	mov	sl, r1
 80014d8:	2100      	movs	r1, #0
 80014da:	449a      	add	sl, r3
 80014dc:	e797      	b.n	800140e <__aeabi_ddiv+0x8a>
 80014de:	465b      	mov	r3, fp
 80014e0:	4303      	orrs	r3, r0
 80014e2:	4699      	mov	r9, r3
 80014e4:	d021      	beq.n	800152a <__aeabi_ddiv+0x1a6>
 80014e6:	465b      	mov	r3, fp
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d100      	bne.n	80014ee <__aeabi_ddiv+0x16a>
 80014ec:	e169      	b.n	80017c2 <__aeabi_ddiv+0x43e>
 80014ee:	4658      	mov	r0, fp
 80014f0:	f001 fb6a 	bl	8002bc8 <__clzsi2>
 80014f4:	230b      	movs	r3, #11
 80014f6:	425b      	negs	r3, r3
 80014f8:	469c      	mov	ip, r3
 80014fa:	0002      	movs	r2, r0
 80014fc:	4484      	add	ip, r0
 80014fe:	4666      	mov	r6, ip
 8001500:	231d      	movs	r3, #29
 8001502:	1b9b      	subs	r3, r3, r6
 8001504:	0026      	movs	r6, r4
 8001506:	0011      	movs	r1, r2
 8001508:	4658      	mov	r0, fp
 800150a:	40de      	lsrs	r6, r3
 800150c:	3908      	subs	r1, #8
 800150e:	4088      	lsls	r0, r1
 8001510:	0033      	movs	r3, r6
 8001512:	4303      	orrs	r3, r0
 8001514:	4699      	mov	r9, r3
 8001516:	0023      	movs	r3, r4
 8001518:	408b      	lsls	r3, r1
 800151a:	4698      	mov	r8, r3
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <__aeabi_ddiv+0x230>)
 800151e:	2400      	movs	r4, #0
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	469a      	mov	sl, r3
 8001524:	2300      	movs	r3, #0
 8001526:	9303      	str	r3, [sp, #12]
 8001528:	e753      	b.n	80013d2 <__aeabi_ddiv+0x4e>
 800152a:	2300      	movs	r3, #0
 800152c:	4698      	mov	r8, r3
 800152e:	469a      	mov	sl, r3
 8001530:	3301      	adds	r3, #1
 8001532:	2404      	movs	r4, #4
 8001534:	9303      	str	r3, [sp, #12]
 8001536:	e74c      	b.n	80013d2 <__aeabi_ddiv+0x4e>
 8001538:	2301      	movs	r3, #1
 800153a:	431c      	orrs	r4, r3
 800153c:	2300      	movs	r3, #0
 800153e:	2101      	movs	r1, #1
 8001540:	469b      	mov	fp, r3
 8001542:	e764      	b.n	800140e <__aeabi_ddiv+0x8a>
 8001544:	2303      	movs	r3, #3
 8001546:	0032      	movs	r2, r6
 8001548:	2103      	movs	r1, #3
 800154a:	431c      	orrs	r4, r3
 800154c:	e75f      	b.n	800140e <__aeabi_ddiv+0x8a>
 800154e:	469a      	mov	sl, r3
 8001550:	2303      	movs	r3, #3
 8001552:	46d9      	mov	r9, fp
 8001554:	240c      	movs	r4, #12
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	e73b      	b.n	80013d2 <__aeabi_ddiv+0x4e>
 800155a:	2300      	movs	r3, #0
 800155c:	2480      	movs	r4, #128	@ 0x80
 800155e:	4698      	mov	r8, r3
 8001560:	2600      	movs	r6, #0
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <__aeabi_ddiv+0x21c>)
 8001564:	0324      	lsls	r4, r4, #12
 8001566:	e779      	b.n	800145c <__aeabi_ddiv+0xd8>
 8001568:	2480      	movs	r4, #128	@ 0x80
 800156a:	465b      	mov	r3, fp
 800156c:	0324      	lsls	r4, r4, #12
 800156e:	431c      	orrs	r4, r3
 8001570:	0324      	lsls	r4, r4, #12
 8001572:	002e      	movs	r6, r5
 8001574:	4690      	mov	r8, r2
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <__aeabi_ddiv+0x21c>)
 8001578:	0b24      	lsrs	r4, r4, #12
 800157a:	e76f      	b.n	800145c <__aeabi_ddiv+0xd8>
 800157c:	2480      	movs	r4, #128	@ 0x80
 800157e:	464b      	mov	r3, r9
 8001580:	0324      	lsls	r4, r4, #12
 8001582:	4223      	tst	r3, r4
 8001584:	d002      	beq.n	800158c <__aeabi_ddiv+0x208>
 8001586:	465b      	mov	r3, fp
 8001588:	4223      	tst	r3, r4
 800158a:	d0f0      	beq.n	800156e <__aeabi_ddiv+0x1ea>
 800158c:	2480      	movs	r4, #128	@ 0x80
 800158e:	464b      	mov	r3, r9
 8001590:	0324      	lsls	r4, r4, #12
 8001592:	431c      	orrs	r4, r3
 8001594:	0324      	lsls	r4, r4, #12
 8001596:	9e02      	ldr	r6, [sp, #8]
 8001598:	4b01      	ldr	r3, [pc, #4]	@ (80015a0 <__aeabi_ddiv+0x21c>)
 800159a:	0b24      	lsrs	r4, r4, #12
 800159c:	e75e      	b.n	800145c <__aeabi_ddiv+0xd8>
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff
 80015a4:	fffffc01 	.word	0xfffffc01
 80015a8:	0800a5d4 	.word	0x0800a5d4
 80015ac:	fffff801 	.word	0xfffff801
 80015b0:	000003f3 	.word	0x000003f3
 80015b4:	fffffc0d 	.word	0xfffffc0d
 80015b8:	45cb      	cmp	fp, r9
 80015ba:	d200      	bcs.n	80015be <__aeabi_ddiv+0x23a>
 80015bc:	e0f8      	b.n	80017b0 <__aeabi_ddiv+0x42c>
 80015be:	d100      	bne.n	80015c2 <__aeabi_ddiv+0x23e>
 80015c0:	e0f3      	b.n	80017aa <__aeabi_ddiv+0x426>
 80015c2:	2301      	movs	r3, #1
 80015c4:	425b      	negs	r3, r3
 80015c6:	469c      	mov	ip, r3
 80015c8:	4644      	mov	r4, r8
 80015ca:	4648      	mov	r0, r9
 80015cc:	2500      	movs	r5, #0
 80015ce:	44e2      	add	sl, ip
 80015d0:	465b      	mov	r3, fp
 80015d2:	0e17      	lsrs	r7, r2, #24
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	431f      	orrs	r7, r3
 80015d8:	0c19      	lsrs	r1, r3, #16
 80015da:	043b      	lsls	r3, r7, #16
 80015dc:	0212      	lsls	r2, r2, #8
 80015de:	9700      	str	r7, [sp, #0]
 80015e0:	0c1f      	lsrs	r7, r3, #16
 80015e2:	4691      	mov	r9, r2
 80015e4:	9102      	str	r1, [sp, #8]
 80015e6:	9703      	str	r7, [sp, #12]
 80015e8:	f7fe fe2c 	bl	8000244 <__aeabi_uidivmod>
 80015ec:	0002      	movs	r2, r0
 80015ee:	437a      	muls	r2, r7
 80015f0:	040b      	lsls	r3, r1, #16
 80015f2:	0c21      	lsrs	r1, r4, #16
 80015f4:	4680      	mov	r8, r0
 80015f6:	4319      	orrs	r1, r3
 80015f8:	428a      	cmp	r2, r1
 80015fa:	d909      	bls.n	8001610 <__aeabi_ddiv+0x28c>
 80015fc:	9f00      	ldr	r7, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	46bc      	mov	ip, r7
 8001602:	425b      	negs	r3, r3
 8001604:	4461      	add	r1, ip
 8001606:	469c      	mov	ip, r3
 8001608:	44e0      	add	r8, ip
 800160a:	428f      	cmp	r7, r1
 800160c:	d800      	bhi.n	8001610 <__aeabi_ddiv+0x28c>
 800160e:	e15c      	b.n	80018ca <__aeabi_ddiv+0x546>
 8001610:	1a88      	subs	r0, r1, r2
 8001612:	9902      	ldr	r1, [sp, #8]
 8001614:	f7fe fe16 	bl	8000244 <__aeabi_uidivmod>
 8001618:	9a03      	ldr	r2, [sp, #12]
 800161a:	0424      	lsls	r4, r4, #16
 800161c:	4342      	muls	r2, r0
 800161e:	0409      	lsls	r1, r1, #16
 8001620:	0c24      	lsrs	r4, r4, #16
 8001622:	0003      	movs	r3, r0
 8001624:	430c      	orrs	r4, r1
 8001626:	42a2      	cmp	r2, r4
 8001628:	d906      	bls.n	8001638 <__aeabi_ddiv+0x2b4>
 800162a:	9900      	ldr	r1, [sp, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	468c      	mov	ip, r1
 8001630:	4464      	add	r4, ip
 8001632:	42a1      	cmp	r1, r4
 8001634:	d800      	bhi.n	8001638 <__aeabi_ddiv+0x2b4>
 8001636:	e142      	b.n	80018be <__aeabi_ddiv+0x53a>
 8001638:	1aa0      	subs	r0, r4, r2
 800163a:	4642      	mov	r2, r8
 800163c:	0412      	lsls	r2, r2, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	4693      	mov	fp, r2
 8001642:	464b      	mov	r3, r9
 8001644:	4659      	mov	r1, fp
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	001f      	movs	r7, r3
 800164a:	9304      	str	r3, [sp, #16]
 800164c:	040b      	lsls	r3, r1, #16
 800164e:	4649      	mov	r1, r9
 8001650:	0409      	lsls	r1, r1, #16
 8001652:	0c09      	lsrs	r1, r1, #16
 8001654:	000c      	movs	r4, r1
 8001656:	0c1b      	lsrs	r3, r3, #16
 8001658:	435c      	muls	r4, r3
 800165a:	0c12      	lsrs	r2, r2, #16
 800165c:	437b      	muls	r3, r7
 800165e:	4688      	mov	r8, r1
 8001660:	4351      	muls	r1, r2
 8001662:	437a      	muls	r2, r7
 8001664:	0c27      	lsrs	r7, r4, #16
 8001666:	46bc      	mov	ip, r7
 8001668:	185b      	adds	r3, r3, r1
 800166a:	4463      	add	r3, ip
 800166c:	4299      	cmp	r1, r3
 800166e:	d903      	bls.n	8001678 <__aeabi_ddiv+0x2f4>
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	0249      	lsls	r1, r1, #9
 8001674:	468c      	mov	ip, r1
 8001676:	4462      	add	r2, ip
 8001678:	0c19      	lsrs	r1, r3, #16
 800167a:	0424      	lsls	r4, r4, #16
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	0c24      	lsrs	r4, r4, #16
 8001680:	188a      	adds	r2, r1, r2
 8001682:	191c      	adds	r4, r3, r4
 8001684:	4290      	cmp	r0, r2
 8001686:	d302      	bcc.n	800168e <__aeabi_ddiv+0x30a>
 8001688:	d116      	bne.n	80016b8 <__aeabi_ddiv+0x334>
 800168a:	42a5      	cmp	r5, r4
 800168c:	d214      	bcs.n	80016b8 <__aeabi_ddiv+0x334>
 800168e:	465b      	mov	r3, fp
 8001690:	9f00      	ldr	r7, [sp, #0]
 8001692:	3b01      	subs	r3, #1
 8001694:	444d      	add	r5, r9
 8001696:	9305      	str	r3, [sp, #20]
 8001698:	454d      	cmp	r5, r9
 800169a:	419b      	sbcs	r3, r3
 800169c:	46bc      	mov	ip, r7
 800169e:	425b      	negs	r3, r3
 80016a0:	4463      	add	r3, ip
 80016a2:	18c0      	adds	r0, r0, r3
 80016a4:	4287      	cmp	r7, r0
 80016a6:	d300      	bcc.n	80016aa <__aeabi_ddiv+0x326>
 80016a8:	e102      	b.n	80018b0 <__aeabi_ddiv+0x52c>
 80016aa:	4282      	cmp	r2, r0
 80016ac:	d900      	bls.n	80016b0 <__aeabi_ddiv+0x32c>
 80016ae:	e129      	b.n	8001904 <__aeabi_ddiv+0x580>
 80016b0:	d100      	bne.n	80016b4 <__aeabi_ddiv+0x330>
 80016b2:	e124      	b.n	80018fe <__aeabi_ddiv+0x57a>
 80016b4:	9b05      	ldr	r3, [sp, #20]
 80016b6:	469b      	mov	fp, r3
 80016b8:	1b2c      	subs	r4, r5, r4
 80016ba:	42a5      	cmp	r5, r4
 80016bc:	41ad      	sbcs	r5, r5
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	1a80      	subs	r0, r0, r2
 80016c2:	426d      	negs	r5, r5
 80016c4:	1b40      	subs	r0, r0, r5
 80016c6:	4283      	cmp	r3, r0
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x348>
 80016ca:	e10f      	b.n	80018ec <__aeabi_ddiv+0x568>
 80016cc:	9902      	ldr	r1, [sp, #8]
 80016ce:	f7fe fdb9 	bl	8000244 <__aeabi_uidivmod>
 80016d2:	9a03      	ldr	r2, [sp, #12]
 80016d4:	040b      	lsls	r3, r1, #16
 80016d6:	4342      	muls	r2, r0
 80016d8:	0c21      	lsrs	r1, r4, #16
 80016da:	0005      	movs	r5, r0
 80016dc:	4319      	orrs	r1, r3
 80016de:	428a      	cmp	r2, r1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_ddiv+0x360>
 80016e2:	e0cb      	b.n	800187c <__aeabi_ddiv+0x4f8>
 80016e4:	1a88      	subs	r0, r1, r2
 80016e6:	9902      	ldr	r1, [sp, #8]
 80016e8:	f7fe fdac 	bl	8000244 <__aeabi_uidivmod>
 80016ec:	9a03      	ldr	r2, [sp, #12]
 80016ee:	0424      	lsls	r4, r4, #16
 80016f0:	4342      	muls	r2, r0
 80016f2:	0409      	lsls	r1, r1, #16
 80016f4:	0c24      	lsrs	r4, r4, #16
 80016f6:	0003      	movs	r3, r0
 80016f8:	430c      	orrs	r4, r1
 80016fa:	42a2      	cmp	r2, r4
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x37c>
 80016fe:	e0ca      	b.n	8001896 <__aeabi_ddiv+0x512>
 8001700:	4641      	mov	r1, r8
 8001702:	1aa4      	subs	r4, r4, r2
 8001704:	042a      	lsls	r2, r5, #16
 8001706:	431a      	orrs	r2, r3
 8001708:	9f04      	ldr	r7, [sp, #16]
 800170a:	0413      	lsls	r3, r2, #16
 800170c:	0c1b      	lsrs	r3, r3, #16
 800170e:	4359      	muls	r1, r3
 8001710:	4640      	mov	r0, r8
 8001712:	437b      	muls	r3, r7
 8001714:	469c      	mov	ip, r3
 8001716:	0c15      	lsrs	r5, r2, #16
 8001718:	4368      	muls	r0, r5
 800171a:	0c0b      	lsrs	r3, r1, #16
 800171c:	4484      	add	ip, r0
 800171e:	4463      	add	r3, ip
 8001720:	437d      	muls	r5, r7
 8001722:	4298      	cmp	r0, r3
 8001724:	d903      	bls.n	800172e <__aeabi_ddiv+0x3aa>
 8001726:	2080      	movs	r0, #128	@ 0x80
 8001728:	0240      	lsls	r0, r0, #9
 800172a:	4684      	mov	ip, r0
 800172c:	4465      	add	r5, ip
 800172e:	0c18      	lsrs	r0, r3, #16
 8001730:	0409      	lsls	r1, r1, #16
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	0c09      	lsrs	r1, r1, #16
 8001736:	1940      	adds	r0, r0, r5
 8001738:	185b      	adds	r3, r3, r1
 800173a:	4284      	cmp	r4, r0
 800173c:	d327      	bcc.n	800178e <__aeabi_ddiv+0x40a>
 800173e:	d023      	beq.n	8001788 <__aeabi_ddiv+0x404>
 8001740:	2301      	movs	r3, #1
 8001742:	0035      	movs	r5, r6
 8001744:	431a      	orrs	r2, r3
 8001746:	4b94      	ldr	r3, [pc, #592]	@ (8001998 <__aeabi_ddiv+0x614>)
 8001748:	4453      	add	r3, sl
 800174a:	2b00      	cmp	r3, #0
 800174c:	dd60      	ble.n	8001810 <__aeabi_ddiv+0x48c>
 800174e:	0751      	lsls	r1, r2, #29
 8001750:	d000      	beq.n	8001754 <__aeabi_ddiv+0x3d0>
 8001752:	e086      	b.n	8001862 <__aeabi_ddiv+0x4de>
 8001754:	002e      	movs	r6, r5
 8001756:	08d1      	lsrs	r1, r2, #3
 8001758:	465a      	mov	r2, fp
 800175a:	01d2      	lsls	r2, r2, #7
 800175c:	d506      	bpl.n	800176c <__aeabi_ddiv+0x3e8>
 800175e:	465a      	mov	r2, fp
 8001760:	4b8e      	ldr	r3, [pc, #568]	@ (800199c <__aeabi_ddiv+0x618>)
 8001762:	401a      	ands	r2, r3
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	4693      	mov	fp, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4453      	add	r3, sl
 800176c:	4a8c      	ldr	r2, [pc, #560]	@ (80019a0 <__aeabi_ddiv+0x61c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	dd00      	ble.n	8001774 <__aeabi_ddiv+0x3f0>
 8001772:	e680      	b.n	8001476 <__aeabi_ddiv+0xf2>
 8001774:	465a      	mov	r2, fp
 8001776:	0752      	lsls	r2, r2, #29
 8001778:	430a      	orrs	r2, r1
 800177a:	4690      	mov	r8, r2
 800177c:	465a      	mov	r2, fp
 800177e:	055b      	lsls	r3, r3, #21
 8001780:	0254      	lsls	r4, r2, #9
 8001782:	0b24      	lsrs	r4, r4, #12
 8001784:	0d5b      	lsrs	r3, r3, #21
 8001786:	e669      	b.n	800145c <__aeabi_ddiv+0xd8>
 8001788:	0035      	movs	r5, r6
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0db      	beq.n	8001746 <__aeabi_ddiv+0x3c2>
 800178e:	9d00      	ldr	r5, [sp, #0]
 8001790:	1e51      	subs	r1, r2, #1
 8001792:	46ac      	mov	ip, r5
 8001794:	4464      	add	r4, ip
 8001796:	42ac      	cmp	r4, r5
 8001798:	d200      	bcs.n	800179c <__aeabi_ddiv+0x418>
 800179a:	e09e      	b.n	80018da <__aeabi_ddiv+0x556>
 800179c:	4284      	cmp	r4, r0
 800179e:	d200      	bcs.n	80017a2 <__aeabi_ddiv+0x41e>
 80017a0:	e0e1      	b.n	8001966 <__aeabi_ddiv+0x5e2>
 80017a2:	d100      	bne.n	80017a6 <__aeabi_ddiv+0x422>
 80017a4:	e0ee      	b.n	8001984 <__aeabi_ddiv+0x600>
 80017a6:	000a      	movs	r2, r1
 80017a8:	e7ca      	b.n	8001740 <__aeabi_ddiv+0x3bc>
 80017aa:	4542      	cmp	r2, r8
 80017ac:	d900      	bls.n	80017b0 <__aeabi_ddiv+0x42c>
 80017ae:	e708      	b.n	80015c2 <__aeabi_ddiv+0x23e>
 80017b0:	464b      	mov	r3, r9
 80017b2:	07dc      	lsls	r4, r3, #31
 80017b4:	0858      	lsrs	r0, r3, #1
 80017b6:	4643      	mov	r3, r8
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	431c      	orrs	r4, r3
 80017bc:	4643      	mov	r3, r8
 80017be:	07dd      	lsls	r5, r3, #31
 80017c0:	e706      	b.n	80015d0 <__aeabi_ddiv+0x24c>
 80017c2:	f001 fa01 	bl	8002bc8 <__clzsi2>
 80017c6:	2315      	movs	r3, #21
 80017c8:	469c      	mov	ip, r3
 80017ca:	4484      	add	ip, r0
 80017cc:	0002      	movs	r2, r0
 80017ce:	4663      	mov	r3, ip
 80017d0:	3220      	adds	r2, #32
 80017d2:	2b1c      	cmp	r3, #28
 80017d4:	dc00      	bgt.n	80017d8 <__aeabi_ddiv+0x454>
 80017d6:	e692      	b.n	80014fe <__aeabi_ddiv+0x17a>
 80017d8:	0023      	movs	r3, r4
 80017da:	3808      	subs	r0, #8
 80017dc:	4083      	lsls	r3, r0
 80017de:	4699      	mov	r9, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	4698      	mov	r8, r3
 80017e4:	e69a      	b.n	800151c <__aeabi_ddiv+0x198>
 80017e6:	f001 f9ef 	bl	8002bc8 <__clzsi2>
 80017ea:	0002      	movs	r2, r0
 80017ec:	0003      	movs	r3, r0
 80017ee:	3215      	adds	r2, #21
 80017f0:	3320      	adds	r3, #32
 80017f2:	2a1c      	cmp	r2, #28
 80017f4:	dc00      	bgt.n	80017f8 <__aeabi_ddiv+0x474>
 80017f6:	e65f      	b.n	80014b8 <__aeabi_ddiv+0x134>
 80017f8:	9900      	ldr	r1, [sp, #0]
 80017fa:	3808      	subs	r0, #8
 80017fc:	4081      	lsls	r1, r0
 80017fe:	2200      	movs	r2, #0
 8001800:	468b      	mov	fp, r1
 8001802:	e666      	b.n	80014d2 <__aeabi_ddiv+0x14e>
 8001804:	2200      	movs	r2, #0
 8001806:	002e      	movs	r6, r5
 8001808:	2400      	movs	r4, #0
 800180a:	4690      	mov	r8, r2
 800180c:	4b65      	ldr	r3, [pc, #404]	@ (80019a4 <__aeabi_ddiv+0x620>)
 800180e:	e625      	b.n	800145c <__aeabi_ddiv+0xd8>
 8001810:	002e      	movs	r6, r5
 8001812:	2101      	movs	r1, #1
 8001814:	1ac9      	subs	r1, r1, r3
 8001816:	2938      	cmp	r1, #56	@ 0x38
 8001818:	dd00      	ble.n	800181c <__aeabi_ddiv+0x498>
 800181a:	e61b      	b.n	8001454 <__aeabi_ddiv+0xd0>
 800181c:	291f      	cmp	r1, #31
 800181e:	dc7e      	bgt.n	800191e <__aeabi_ddiv+0x59a>
 8001820:	4861      	ldr	r0, [pc, #388]	@ (80019a8 <__aeabi_ddiv+0x624>)
 8001822:	0014      	movs	r4, r2
 8001824:	4450      	add	r0, sl
 8001826:	465b      	mov	r3, fp
 8001828:	4082      	lsls	r2, r0
 800182a:	4083      	lsls	r3, r0
 800182c:	40cc      	lsrs	r4, r1
 800182e:	1e50      	subs	r0, r2, #1
 8001830:	4182      	sbcs	r2, r0
 8001832:	4323      	orrs	r3, r4
 8001834:	431a      	orrs	r2, r3
 8001836:	465b      	mov	r3, fp
 8001838:	40cb      	lsrs	r3, r1
 800183a:	0751      	lsls	r1, r2, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_ddiv+0x4ce>
 800183e:	210f      	movs	r1, #15
 8001840:	4011      	ands	r1, r2
 8001842:	2904      	cmp	r1, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_ddiv+0x4ce>
 8001846:	1d11      	adds	r1, r2, #4
 8001848:	4291      	cmp	r1, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	4252      	negs	r2, r2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	000a      	movs	r2, r1
 8001852:	0219      	lsls	r1, r3, #8
 8001854:	d400      	bmi.n	8001858 <__aeabi_ddiv+0x4d4>
 8001856:	e09b      	b.n	8001990 <__aeabi_ddiv+0x60c>
 8001858:	2200      	movs	r2, #0
 800185a:	2301      	movs	r3, #1
 800185c:	2400      	movs	r4, #0
 800185e:	4690      	mov	r8, r2
 8001860:	e5fc      	b.n	800145c <__aeabi_ddiv+0xd8>
 8001862:	210f      	movs	r1, #15
 8001864:	4011      	ands	r1, r2
 8001866:	2904      	cmp	r1, #4
 8001868:	d100      	bne.n	800186c <__aeabi_ddiv+0x4e8>
 800186a:	e773      	b.n	8001754 <__aeabi_ddiv+0x3d0>
 800186c:	1d11      	adds	r1, r2, #4
 800186e:	4291      	cmp	r1, r2
 8001870:	4192      	sbcs	r2, r2
 8001872:	4252      	negs	r2, r2
 8001874:	002e      	movs	r6, r5
 8001876:	08c9      	lsrs	r1, r1, #3
 8001878:	4493      	add	fp, r2
 800187a:	e76d      	b.n	8001758 <__aeabi_ddiv+0x3d4>
 800187c:	9b00      	ldr	r3, [sp, #0]
 800187e:	3d01      	subs	r5, #1
 8001880:	469c      	mov	ip, r3
 8001882:	4461      	add	r1, ip
 8001884:	428b      	cmp	r3, r1
 8001886:	d900      	bls.n	800188a <__aeabi_ddiv+0x506>
 8001888:	e72c      	b.n	80016e4 <__aeabi_ddiv+0x360>
 800188a:	428a      	cmp	r2, r1
 800188c:	d800      	bhi.n	8001890 <__aeabi_ddiv+0x50c>
 800188e:	e729      	b.n	80016e4 <__aeabi_ddiv+0x360>
 8001890:	1e85      	subs	r5, r0, #2
 8001892:	4461      	add	r1, ip
 8001894:	e726      	b.n	80016e4 <__aeabi_ddiv+0x360>
 8001896:	9900      	ldr	r1, [sp, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	468c      	mov	ip, r1
 800189c:	4464      	add	r4, ip
 800189e:	42a1      	cmp	r1, r4
 80018a0:	d900      	bls.n	80018a4 <__aeabi_ddiv+0x520>
 80018a2:	e72d      	b.n	8001700 <__aeabi_ddiv+0x37c>
 80018a4:	42a2      	cmp	r2, r4
 80018a6:	d800      	bhi.n	80018aa <__aeabi_ddiv+0x526>
 80018a8:	e72a      	b.n	8001700 <__aeabi_ddiv+0x37c>
 80018aa:	1e83      	subs	r3, r0, #2
 80018ac:	4464      	add	r4, ip
 80018ae:	e727      	b.n	8001700 <__aeabi_ddiv+0x37c>
 80018b0:	4287      	cmp	r7, r0
 80018b2:	d000      	beq.n	80018b6 <__aeabi_ddiv+0x532>
 80018b4:	e6fe      	b.n	80016b4 <__aeabi_ddiv+0x330>
 80018b6:	45a9      	cmp	r9, r5
 80018b8:	d900      	bls.n	80018bc <__aeabi_ddiv+0x538>
 80018ba:	e6fb      	b.n	80016b4 <__aeabi_ddiv+0x330>
 80018bc:	e6f5      	b.n	80016aa <__aeabi_ddiv+0x326>
 80018be:	42a2      	cmp	r2, r4
 80018c0:	d800      	bhi.n	80018c4 <__aeabi_ddiv+0x540>
 80018c2:	e6b9      	b.n	8001638 <__aeabi_ddiv+0x2b4>
 80018c4:	1e83      	subs	r3, r0, #2
 80018c6:	4464      	add	r4, ip
 80018c8:	e6b6      	b.n	8001638 <__aeabi_ddiv+0x2b4>
 80018ca:	428a      	cmp	r2, r1
 80018cc:	d800      	bhi.n	80018d0 <__aeabi_ddiv+0x54c>
 80018ce:	e69f      	b.n	8001610 <__aeabi_ddiv+0x28c>
 80018d0:	46bc      	mov	ip, r7
 80018d2:	1e83      	subs	r3, r0, #2
 80018d4:	4698      	mov	r8, r3
 80018d6:	4461      	add	r1, ip
 80018d8:	e69a      	b.n	8001610 <__aeabi_ddiv+0x28c>
 80018da:	000a      	movs	r2, r1
 80018dc:	4284      	cmp	r4, r0
 80018de:	d000      	beq.n	80018e2 <__aeabi_ddiv+0x55e>
 80018e0:	e72e      	b.n	8001740 <__aeabi_ddiv+0x3bc>
 80018e2:	454b      	cmp	r3, r9
 80018e4:	d000      	beq.n	80018e8 <__aeabi_ddiv+0x564>
 80018e6:	e72b      	b.n	8001740 <__aeabi_ddiv+0x3bc>
 80018e8:	0035      	movs	r5, r6
 80018ea:	e72c      	b.n	8001746 <__aeabi_ddiv+0x3c2>
 80018ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <__aeabi_ddiv+0x614>)
 80018ee:	4a2f      	ldr	r2, [pc, #188]	@ (80019ac <__aeabi_ddiv+0x628>)
 80018f0:	4453      	add	r3, sl
 80018f2:	4592      	cmp	sl, r2
 80018f4:	db43      	blt.n	800197e <__aeabi_ddiv+0x5fa>
 80018f6:	2201      	movs	r2, #1
 80018f8:	2100      	movs	r1, #0
 80018fa:	4493      	add	fp, r2
 80018fc:	e72c      	b.n	8001758 <__aeabi_ddiv+0x3d4>
 80018fe:	42ac      	cmp	r4, r5
 8001900:	d800      	bhi.n	8001904 <__aeabi_ddiv+0x580>
 8001902:	e6d7      	b.n	80016b4 <__aeabi_ddiv+0x330>
 8001904:	2302      	movs	r3, #2
 8001906:	425b      	negs	r3, r3
 8001908:	469c      	mov	ip, r3
 800190a:	9900      	ldr	r1, [sp, #0]
 800190c:	444d      	add	r5, r9
 800190e:	454d      	cmp	r5, r9
 8001910:	419b      	sbcs	r3, r3
 8001912:	44e3      	add	fp, ip
 8001914:	468c      	mov	ip, r1
 8001916:	425b      	negs	r3, r3
 8001918:	4463      	add	r3, ip
 800191a:	18c0      	adds	r0, r0, r3
 800191c:	e6cc      	b.n	80016b8 <__aeabi_ddiv+0x334>
 800191e:	201f      	movs	r0, #31
 8001920:	4240      	negs	r0, r0
 8001922:	1ac3      	subs	r3, r0, r3
 8001924:	4658      	mov	r0, fp
 8001926:	40d8      	lsrs	r0, r3
 8001928:	2920      	cmp	r1, #32
 800192a:	d004      	beq.n	8001936 <__aeabi_ddiv+0x5b2>
 800192c:	4659      	mov	r1, fp
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <__aeabi_ddiv+0x62c>)
 8001930:	4453      	add	r3, sl
 8001932:	4099      	lsls	r1, r3
 8001934:	430a      	orrs	r2, r1
 8001936:	1e53      	subs	r3, r2, #1
 8001938:	419a      	sbcs	r2, r3
 800193a:	2307      	movs	r3, #7
 800193c:	0019      	movs	r1, r3
 800193e:	4302      	orrs	r2, r0
 8001940:	2400      	movs	r4, #0
 8001942:	4011      	ands	r1, r2
 8001944:	4213      	tst	r3, r2
 8001946:	d009      	beq.n	800195c <__aeabi_ddiv+0x5d8>
 8001948:	3308      	adds	r3, #8
 800194a:	4013      	ands	r3, r2
 800194c:	2b04      	cmp	r3, #4
 800194e:	d01d      	beq.n	800198c <__aeabi_ddiv+0x608>
 8001950:	1d13      	adds	r3, r2, #4
 8001952:	4293      	cmp	r3, r2
 8001954:	4189      	sbcs	r1, r1
 8001956:	001a      	movs	r2, r3
 8001958:	4249      	negs	r1, r1
 800195a:	0749      	lsls	r1, r1, #29
 800195c:	08d2      	lsrs	r2, r2, #3
 800195e:	430a      	orrs	r2, r1
 8001960:	4690      	mov	r8, r2
 8001962:	2300      	movs	r3, #0
 8001964:	e57a      	b.n	800145c <__aeabi_ddiv+0xd8>
 8001966:	4649      	mov	r1, r9
 8001968:	9f00      	ldr	r7, [sp, #0]
 800196a:	004d      	lsls	r5, r1, #1
 800196c:	454d      	cmp	r5, r9
 800196e:	4189      	sbcs	r1, r1
 8001970:	46bc      	mov	ip, r7
 8001972:	4249      	negs	r1, r1
 8001974:	4461      	add	r1, ip
 8001976:	46a9      	mov	r9, r5
 8001978:	3a02      	subs	r2, #2
 800197a:	1864      	adds	r4, r4, r1
 800197c:	e7ae      	b.n	80018dc <__aeabi_ddiv+0x558>
 800197e:	2201      	movs	r2, #1
 8001980:	4252      	negs	r2, r2
 8001982:	e746      	b.n	8001812 <__aeabi_ddiv+0x48e>
 8001984:	4599      	cmp	r9, r3
 8001986:	d3ee      	bcc.n	8001966 <__aeabi_ddiv+0x5e2>
 8001988:	000a      	movs	r2, r1
 800198a:	e7aa      	b.n	80018e2 <__aeabi_ddiv+0x55e>
 800198c:	2100      	movs	r1, #0
 800198e:	e7e5      	b.n	800195c <__aeabi_ddiv+0x5d8>
 8001990:	0759      	lsls	r1, r3, #29
 8001992:	025b      	lsls	r3, r3, #9
 8001994:	0b1c      	lsrs	r4, r3, #12
 8001996:	e7e1      	b.n	800195c <__aeabi_ddiv+0x5d8>
 8001998:	000003ff 	.word	0x000003ff
 800199c:	feffffff 	.word	0xfeffffff
 80019a0:	000007fe 	.word	0x000007fe
 80019a4:	000007ff 	.word	0x000007ff
 80019a8:	0000041e 	.word	0x0000041e
 80019ac:	fffffc02 	.word	0xfffffc02
 80019b0:	0000043e 	.word	0x0000043e

080019b4 <__eqdf2>:
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	4657      	mov	r7, sl
 80019b8:	46de      	mov	lr, fp
 80019ba:	464e      	mov	r6, r9
 80019bc:	4645      	mov	r5, r8
 80019be:	b5e0      	push	{r5, r6, r7, lr}
 80019c0:	000d      	movs	r5, r1
 80019c2:	0004      	movs	r4, r0
 80019c4:	0fe8      	lsrs	r0, r5, #31
 80019c6:	4683      	mov	fp, r0
 80019c8:	0309      	lsls	r1, r1, #12
 80019ca:	0fd8      	lsrs	r0, r3, #31
 80019cc:	0b09      	lsrs	r1, r1, #12
 80019ce:	4682      	mov	sl, r0
 80019d0:	4819      	ldr	r0, [pc, #100]	@ (8001a38 <__eqdf2+0x84>)
 80019d2:	468c      	mov	ip, r1
 80019d4:	031f      	lsls	r7, r3, #12
 80019d6:	0069      	lsls	r1, r5, #1
 80019d8:	005e      	lsls	r6, r3, #1
 80019da:	0d49      	lsrs	r1, r1, #21
 80019dc:	0b3f      	lsrs	r7, r7, #12
 80019de:	0d76      	lsrs	r6, r6, #21
 80019e0:	4281      	cmp	r1, r0
 80019e2:	d018      	beq.n	8001a16 <__eqdf2+0x62>
 80019e4:	4286      	cmp	r6, r0
 80019e6:	d00f      	beq.n	8001a08 <__eqdf2+0x54>
 80019e8:	2001      	movs	r0, #1
 80019ea:	42b1      	cmp	r1, r6
 80019ec:	d10d      	bne.n	8001a0a <__eqdf2+0x56>
 80019ee:	45bc      	cmp	ip, r7
 80019f0:	d10b      	bne.n	8001a0a <__eqdf2+0x56>
 80019f2:	4294      	cmp	r4, r2
 80019f4:	d109      	bne.n	8001a0a <__eqdf2+0x56>
 80019f6:	45d3      	cmp	fp, sl
 80019f8:	d01c      	beq.n	8001a34 <__eqdf2+0x80>
 80019fa:	2900      	cmp	r1, #0
 80019fc:	d105      	bne.n	8001a0a <__eqdf2+0x56>
 80019fe:	4660      	mov	r0, ip
 8001a00:	4320      	orrs	r0, r4
 8001a02:	1e43      	subs	r3, r0, #1
 8001a04:	4198      	sbcs	r0, r3
 8001a06:	e000      	b.n	8001a0a <__eqdf2+0x56>
 8001a08:	2001      	movs	r0, #1
 8001a0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a0c:	46bb      	mov	fp, r7
 8001a0e:	46b2      	mov	sl, r6
 8001a10:	46a9      	mov	r9, r5
 8001a12:	46a0      	mov	r8, r4
 8001a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a16:	2001      	movs	r0, #1
 8001a18:	428e      	cmp	r6, r1
 8001a1a:	d1f6      	bne.n	8001a0a <__eqdf2+0x56>
 8001a1c:	4661      	mov	r1, ip
 8001a1e:	4339      	orrs	r1, r7
 8001a20:	000f      	movs	r7, r1
 8001a22:	4317      	orrs	r7, r2
 8001a24:	4327      	orrs	r7, r4
 8001a26:	d1f0      	bne.n	8001a0a <__eqdf2+0x56>
 8001a28:	465b      	mov	r3, fp
 8001a2a:	4652      	mov	r2, sl
 8001a2c:	1a98      	subs	r0, r3, r2
 8001a2e:	1e43      	subs	r3, r0, #1
 8001a30:	4198      	sbcs	r0, r3
 8001a32:	e7ea      	b.n	8001a0a <__eqdf2+0x56>
 8001a34:	2000      	movs	r0, #0
 8001a36:	e7e8      	b.n	8001a0a <__eqdf2+0x56>
 8001a38:	000007ff 	.word	0x000007ff

08001a3c <__gedf2>:
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3e:	4657      	mov	r7, sl
 8001a40:	464e      	mov	r6, r9
 8001a42:	4645      	mov	r5, r8
 8001a44:	46de      	mov	lr, fp
 8001a46:	b5e0      	push	{r5, r6, r7, lr}
 8001a48:	000d      	movs	r5, r1
 8001a4a:	030e      	lsls	r6, r1, #12
 8001a4c:	0049      	lsls	r1, r1, #1
 8001a4e:	0d49      	lsrs	r1, r1, #21
 8001a50:	468a      	mov	sl, r1
 8001a52:	0fdf      	lsrs	r7, r3, #31
 8001a54:	0fe9      	lsrs	r1, r5, #31
 8001a56:	46bc      	mov	ip, r7
 8001a58:	b083      	sub	sp, #12
 8001a5a:	4f2f      	ldr	r7, [pc, #188]	@ (8001b18 <__gedf2+0xdc>)
 8001a5c:	0004      	movs	r4, r0
 8001a5e:	4680      	mov	r8, r0
 8001a60:	9101      	str	r1, [sp, #4]
 8001a62:	0058      	lsls	r0, r3, #1
 8001a64:	0319      	lsls	r1, r3, #12
 8001a66:	4691      	mov	r9, r2
 8001a68:	0b36      	lsrs	r6, r6, #12
 8001a6a:	0b09      	lsrs	r1, r1, #12
 8001a6c:	0d40      	lsrs	r0, r0, #21
 8001a6e:	45ba      	cmp	sl, r7
 8001a70:	d01d      	beq.n	8001aae <__gedf2+0x72>
 8001a72:	42b8      	cmp	r0, r7
 8001a74:	d00d      	beq.n	8001a92 <__gedf2+0x56>
 8001a76:	4657      	mov	r7, sl
 8001a78:	2f00      	cmp	r7, #0
 8001a7a:	d12a      	bne.n	8001ad2 <__gedf2+0x96>
 8001a7c:	4334      	orrs	r4, r6
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d124      	bne.n	8001acc <__gedf2+0x90>
 8001a82:	430a      	orrs	r2, r1
 8001a84:	d036      	beq.n	8001af4 <__gedf2+0xb8>
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d141      	bne.n	8001b0e <__gedf2+0xd2>
 8001a8a:	4663      	mov	r3, ip
 8001a8c:	0058      	lsls	r0, r3, #1
 8001a8e:	3801      	subs	r0, #1
 8001a90:	e015      	b.n	8001abe <__gedf2+0x82>
 8001a92:	4311      	orrs	r1, r2
 8001a94:	d138      	bne.n	8001b08 <__gedf2+0xcc>
 8001a96:	4653      	mov	r3, sl
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <__gedf2+0x64>
 8001a9c:	4326      	orrs	r6, r4
 8001a9e:	d0f4      	beq.n	8001a8a <__gedf2+0x4e>
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	4563      	cmp	r3, ip
 8001aa4:	d107      	bne.n	8001ab6 <__gedf2+0x7a>
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	0058      	lsls	r0, r3, #1
 8001aaa:	3801      	subs	r0, #1
 8001aac:	e007      	b.n	8001abe <__gedf2+0x82>
 8001aae:	4326      	orrs	r6, r4
 8001ab0:	d12a      	bne.n	8001b08 <__gedf2+0xcc>
 8001ab2:	4550      	cmp	r0, sl
 8001ab4:	d021      	beq.n	8001afa <__gedf2+0xbe>
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	9b01      	ldr	r3, [sp, #4]
 8001aba:	425f      	negs	r7, r3
 8001abc:	4338      	orrs	r0, r7
 8001abe:	b003      	add	sp, #12
 8001ac0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac2:	46bb      	mov	fp, r7
 8001ac4:	46b2      	mov	sl, r6
 8001ac6:	46a9      	mov	r9, r5
 8001ac8:	46a0      	mov	r8, r4
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001acc:	2c00      	cmp	r4, #0
 8001ace:	d0dc      	beq.n	8001a8a <__gedf2+0x4e>
 8001ad0:	e7e6      	b.n	8001aa0 <__gedf2+0x64>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d0ef      	beq.n	8001ab6 <__gedf2+0x7a>
 8001ad6:	9b01      	ldr	r3, [sp, #4]
 8001ad8:	4563      	cmp	r3, ip
 8001ada:	d1ec      	bne.n	8001ab6 <__gedf2+0x7a>
 8001adc:	4582      	cmp	sl, r0
 8001ade:	dcea      	bgt.n	8001ab6 <__gedf2+0x7a>
 8001ae0:	dbe1      	blt.n	8001aa6 <__gedf2+0x6a>
 8001ae2:	428e      	cmp	r6, r1
 8001ae4:	d8e7      	bhi.n	8001ab6 <__gedf2+0x7a>
 8001ae6:	d1de      	bne.n	8001aa6 <__gedf2+0x6a>
 8001ae8:	45c8      	cmp	r8, r9
 8001aea:	d8e4      	bhi.n	8001ab6 <__gedf2+0x7a>
 8001aec:	2000      	movs	r0, #0
 8001aee:	45c8      	cmp	r8, r9
 8001af0:	d2e5      	bcs.n	8001abe <__gedf2+0x82>
 8001af2:	e7d8      	b.n	8001aa6 <__gedf2+0x6a>
 8001af4:	2c00      	cmp	r4, #0
 8001af6:	d0e2      	beq.n	8001abe <__gedf2+0x82>
 8001af8:	e7dd      	b.n	8001ab6 <__gedf2+0x7a>
 8001afa:	4311      	orrs	r1, r2
 8001afc:	d104      	bne.n	8001b08 <__gedf2+0xcc>
 8001afe:	9b01      	ldr	r3, [sp, #4]
 8001b00:	4563      	cmp	r3, ip
 8001b02:	d1d8      	bne.n	8001ab6 <__gedf2+0x7a>
 8001b04:	2000      	movs	r0, #0
 8001b06:	e7da      	b.n	8001abe <__gedf2+0x82>
 8001b08:	2002      	movs	r0, #2
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	e7d7      	b.n	8001abe <__gedf2+0x82>
 8001b0e:	9b01      	ldr	r3, [sp, #4]
 8001b10:	4563      	cmp	r3, ip
 8001b12:	d0e6      	beq.n	8001ae2 <__gedf2+0xa6>
 8001b14:	e7cf      	b.n	8001ab6 <__gedf2+0x7a>
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	000007ff 	.word	0x000007ff

08001b1c <__ledf2>:
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	4657      	mov	r7, sl
 8001b20:	464e      	mov	r6, r9
 8001b22:	4645      	mov	r5, r8
 8001b24:	46de      	mov	lr, fp
 8001b26:	b5e0      	push	{r5, r6, r7, lr}
 8001b28:	000d      	movs	r5, r1
 8001b2a:	030e      	lsls	r6, r1, #12
 8001b2c:	0049      	lsls	r1, r1, #1
 8001b2e:	0d49      	lsrs	r1, r1, #21
 8001b30:	468a      	mov	sl, r1
 8001b32:	0fdf      	lsrs	r7, r3, #31
 8001b34:	0fe9      	lsrs	r1, r5, #31
 8001b36:	46bc      	mov	ip, r7
 8001b38:	b083      	sub	sp, #12
 8001b3a:	4f2e      	ldr	r7, [pc, #184]	@ (8001bf4 <__ledf2+0xd8>)
 8001b3c:	0004      	movs	r4, r0
 8001b3e:	4680      	mov	r8, r0
 8001b40:	9101      	str	r1, [sp, #4]
 8001b42:	0058      	lsls	r0, r3, #1
 8001b44:	0319      	lsls	r1, r3, #12
 8001b46:	4691      	mov	r9, r2
 8001b48:	0b36      	lsrs	r6, r6, #12
 8001b4a:	0b09      	lsrs	r1, r1, #12
 8001b4c:	0d40      	lsrs	r0, r0, #21
 8001b4e:	45ba      	cmp	sl, r7
 8001b50:	d01e      	beq.n	8001b90 <__ledf2+0x74>
 8001b52:	42b8      	cmp	r0, r7
 8001b54:	d00d      	beq.n	8001b72 <__ledf2+0x56>
 8001b56:	4657      	mov	r7, sl
 8001b58:	2f00      	cmp	r7, #0
 8001b5a:	d127      	bne.n	8001bac <__ledf2+0x90>
 8001b5c:	4334      	orrs	r4, r6
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d133      	bne.n	8001bca <__ledf2+0xae>
 8001b62:	430a      	orrs	r2, r1
 8001b64:	d034      	beq.n	8001bd0 <__ledf2+0xb4>
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d140      	bne.n	8001bec <__ledf2+0xd0>
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	0058      	lsls	r0, r3, #1
 8001b6e:	3801      	subs	r0, #1
 8001b70:	e015      	b.n	8001b9e <__ledf2+0x82>
 8001b72:	4311      	orrs	r1, r2
 8001b74:	d112      	bne.n	8001b9c <__ledf2+0x80>
 8001b76:	4653      	mov	r3, sl
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <__ledf2+0x64>
 8001b7c:	4326      	orrs	r6, r4
 8001b7e:	d0f4      	beq.n	8001b6a <__ledf2+0x4e>
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	4563      	cmp	r3, ip
 8001b84:	d01d      	beq.n	8001bc2 <__ledf2+0xa6>
 8001b86:	2001      	movs	r0, #1
 8001b88:	9b01      	ldr	r3, [sp, #4]
 8001b8a:	425f      	negs	r7, r3
 8001b8c:	4338      	orrs	r0, r7
 8001b8e:	e006      	b.n	8001b9e <__ledf2+0x82>
 8001b90:	4326      	orrs	r6, r4
 8001b92:	d103      	bne.n	8001b9c <__ledf2+0x80>
 8001b94:	4550      	cmp	r0, sl
 8001b96:	d1f6      	bne.n	8001b86 <__ledf2+0x6a>
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	d01c      	beq.n	8001bd6 <__ledf2+0xba>
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	b003      	add	sp, #12
 8001ba0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba2:	46bb      	mov	fp, r7
 8001ba4:	46b2      	mov	sl, r6
 8001ba6:	46a9      	mov	r9, r5
 8001ba8:	46a0      	mov	r8, r4
 8001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d0ea      	beq.n	8001b86 <__ledf2+0x6a>
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	4563      	cmp	r3, ip
 8001bb4:	d1e7      	bne.n	8001b86 <__ledf2+0x6a>
 8001bb6:	4582      	cmp	sl, r0
 8001bb8:	dce5      	bgt.n	8001b86 <__ledf2+0x6a>
 8001bba:	db02      	blt.n	8001bc2 <__ledf2+0xa6>
 8001bbc:	428e      	cmp	r6, r1
 8001bbe:	d8e2      	bhi.n	8001b86 <__ledf2+0x6a>
 8001bc0:	d00e      	beq.n	8001be0 <__ledf2+0xc4>
 8001bc2:	9b01      	ldr	r3, [sp, #4]
 8001bc4:	0058      	lsls	r0, r3, #1
 8001bc6:	3801      	subs	r0, #1
 8001bc8:	e7e9      	b.n	8001b9e <__ledf2+0x82>
 8001bca:	2c00      	cmp	r4, #0
 8001bcc:	d0cd      	beq.n	8001b6a <__ledf2+0x4e>
 8001bce:	e7d7      	b.n	8001b80 <__ledf2+0x64>
 8001bd0:	2c00      	cmp	r4, #0
 8001bd2:	d0e4      	beq.n	8001b9e <__ledf2+0x82>
 8001bd4:	e7d7      	b.n	8001b86 <__ledf2+0x6a>
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	2000      	movs	r0, #0
 8001bda:	4563      	cmp	r3, ip
 8001bdc:	d0df      	beq.n	8001b9e <__ledf2+0x82>
 8001bde:	e7d2      	b.n	8001b86 <__ledf2+0x6a>
 8001be0:	45c8      	cmp	r8, r9
 8001be2:	d8d0      	bhi.n	8001b86 <__ledf2+0x6a>
 8001be4:	2000      	movs	r0, #0
 8001be6:	45c8      	cmp	r8, r9
 8001be8:	d2d9      	bcs.n	8001b9e <__ledf2+0x82>
 8001bea:	e7ea      	b.n	8001bc2 <__ledf2+0xa6>
 8001bec:	9b01      	ldr	r3, [sp, #4]
 8001bee:	4563      	cmp	r3, ip
 8001bf0:	d0e4      	beq.n	8001bbc <__ledf2+0xa0>
 8001bf2:	e7c8      	b.n	8001b86 <__ledf2+0x6a>
 8001bf4:	000007ff 	.word	0x000007ff

08001bf8 <__aeabi_dmul>:
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	4657      	mov	r7, sl
 8001bfc:	464e      	mov	r6, r9
 8001bfe:	46de      	mov	lr, fp
 8001c00:	4645      	mov	r5, r8
 8001c02:	b5e0      	push	{r5, r6, r7, lr}
 8001c04:	001f      	movs	r7, r3
 8001c06:	030b      	lsls	r3, r1, #12
 8001c08:	0b1b      	lsrs	r3, r3, #12
 8001c0a:	0016      	movs	r6, r2
 8001c0c:	469a      	mov	sl, r3
 8001c0e:	0fca      	lsrs	r2, r1, #31
 8001c10:	004b      	lsls	r3, r1, #1
 8001c12:	0004      	movs	r4, r0
 8001c14:	4691      	mov	r9, r2
 8001c16:	b085      	sub	sp, #20
 8001c18:	0d5b      	lsrs	r3, r3, #21
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dmul+0x26>
 8001c1c:	e1cf      	b.n	8001fbe <__aeabi_dmul+0x3c6>
 8001c1e:	4acd      	ldr	r2, [pc, #820]	@ (8001f54 <__aeabi_dmul+0x35c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d055      	beq.n	8001cd0 <__aeabi_dmul+0xd8>
 8001c24:	4651      	mov	r1, sl
 8001c26:	0f42      	lsrs	r2, r0, #29
 8001c28:	00c9      	lsls	r1, r1, #3
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	2180      	movs	r1, #128	@ 0x80
 8001c2e:	0409      	lsls	r1, r1, #16
 8001c30:	4311      	orrs	r1, r2
 8001c32:	00c2      	lsls	r2, r0, #3
 8001c34:	4690      	mov	r8, r2
 8001c36:	4ac8      	ldr	r2, [pc, #800]	@ (8001f58 <__aeabi_dmul+0x360>)
 8001c38:	468a      	mov	sl, r1
 8001c3a:	4693      	mov	fp, r2
 8001c3c:	449b      	add	fp, r3
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2500      	movs	r5, #0
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	033c      	lsls	r4, r7, #12
 8001c46:	007b      	lsls	r3, r7, #1
 8001c48:	0ffa      	lsrs	r2, r7, #31
 8001c4a:	9601      	str	r6, [sp, #4]
 8001c4c:	0b24      	lsrs	r4, r4, #12
 8001c4e:	0d5b      	lsrs	r3, r3, #21
 8001c50:	9200      	str	r2, [sp, #0]
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x5e>
 8001c54:	e188      	b.n	8001f68 <__aeabi_dmul+0x370>
 8001c56:	4abf      	ldr	r2, [pc, #764]	@ (8001f54 <__aeabi_dmul+0x35c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dmul+0x66>
 8001c5c:	e092      	b.n	8001d84 <__aeabi_dmul+0x18c>
 8001c5e:	4abe      	ldr	r2, [pc, #760]	@ (8001f58 <__aeabi_dmul+0x360>)
 8001c60:	4694      	mov	ip, r2
 8001c62:	4463      	add	r3, ip
 8001c64:	449b      	add	fp, r3
 8001c66:	2d0a      	cmp	r5, #10
 8001c68:	dc42      	bgt.n	8001cf0 <__aeabi_dmul+0xf8>
 8001c6a:	00e4      	lsls	r4, r4, #3
 8001c6c:	0f73      	lsrs	r3, r6, #29
 8001c6e:	4323      	orrs	r3, r4
 8001c70:	2480      	movs	r4, #128	@ 0x80
 8001c72:	4649      	mov	r1, r9
 8001c74:	0424      	lsls	r4, r4, #16
 8001c76:	431c      	orrs	r4, r3
 8001c78:	00f3      	lsls	r3, r6, #3
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	9b00      	ldr	r3, [sp, #0]
 8001c7e:	2000      	movs	r0, #0
 8001c80:	4059      	eors	r1, r3
 8001c82:	b2cb      	uxtb	r3, r1
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	2d02      	cmp	r5, #2
 8001c88:	dc00      	bgt.n	8001c8c <__aeabi_dmul+0x94>
 8001c8a:	e094      	b.n	8001db6 <__aeabi_dmul+0x1be>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	40ab      	lsls	r3, r5
 8001c90:	001d      	movs	r5, r3
 8001c92:	23a6      	movs	r3, #166	@ 0xa6
 8001c94:	002a      	movs	r2, r5
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	401a      	ands	r2, r3
 8001c9a:	421d      	tst	r5, r3
 8001c9c:	d000      	beq.n	8001ca0 <__aeabi_dmul+0xa8>
 8001c9e:	e229      	b.n	80020f4 <__aeabi_dmul+0x4fc>
 8001ca0:	2390      	movs	r3, #144	@ 0x90
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	421d      	tst	r5, r3
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dmul+0xb2>
 8001ca8:	e24d      	b.n	8002146 <__aeabi_dmul+0x54e>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2480      	movs	r4, #128	@ 0x80
 8001cae:	4699      	mov	r9, r3
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	4ba8      	ldr	r3, [pc, #672]	@ (8001f54 <__aeabi_dmul+0x35c>)
 8001cb4:	0010      	movs	r0, r2
 8001cb6:	464a      	mov	r2, r9
 8001cb8:	051b      	lsls	r3, r3, #20
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	07d2      	lsls	r2, r2, #31
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	b005      	add	sp, #20
 8001cc4:	bcf0      	pop	{r4, r5, r6, r7}
 8001cc6:	46bb      	mov	fp, r7
 8001cc8:	46b2      	mov	sl, r6
 8001cca:	46a9      	mov	r9, r5
 8001ccc:	46a0      	mov	r8, r4
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd0:	4652      	mov	r2, sl
 8001cd2:	4302      	orrs	r2, r0
 8001cd4:	4690      	mov	r8, r2
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dmul+0xe2>
 8001cd8:	e1ac      	b.n	8002034 <__aeabi_dmul+0x43c>
 8001cda:	469b      	mov	fp, r3
 8001cdc:	2302      	movs	r3, #2
 8001cde:	4692      	mov	sl, r2
 8001ce0:	2508      	movs	r5, #8
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	e7ae      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8001ce6:	9b00      	ldr	r3, [sp, #0]
 8001ce8:	46a2      	mov	sl, r4
 8001cea:	4699      	mov	r9, r3
 8001cec:	9b01      	ldr	r3, [sp, #4]
 8001cee:	4698      	mov	r8, r3
 8001cf0:	9b02      	ldr	r3, [sp, #8]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dmul+0x100>
 8001cf6:	e1ca      	b.n	800208e <__aeabi_dmul+0x496>
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dmul+0x106>
 8001cfc:	e192      	b.n	8002024 <__aeabi_dmul+0x42c>
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d110      	bne.n	8001d24 <__aeabi_dmul+0x12c>
 8001d02:	2300      	movs	r3, #0
 8001d04:	2400      	movs	r4, #0
 8001d06:	2200      	movs	r2, #0
 8001d08:	e7d4      	b.n	8001cb4 <__aeabi_dmul+0xbc>
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	087b      	lsrs	r3, r7, #1
 8001d0e:	403a      	ands	r2, r7
 8001d10:	4313      	orrs	r3, r2
 8001d12:	4652      	mov	r2, sl
 8001d14:	07d2      	lsls	r2, r2, #31
 8001d16:	4313      	orrs	r3, r2
 8001d18:	4698      	mov	r8, r3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	085b      	lsrs	r3, r3, #1
 8001d1e:	469a      	mov	sl, r3
 8001d20:	9b03      	ldr	r3, [sp, #12]
 8001d22:	4699      	mov	r9, r3
 8001d24:	465b      	mov	r3, fp
 8001d26:	1c58      	adds	r0, r3, #1
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	445b      	add	r3, fp
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	dc00      	bgt.n	8001d34 <__aeabi_dmul+0x13c>
 8001d32:	e1b1      	b.n	8002098 <__aeabi_dmul+0x4a0>
 8001d34:	4642      	mov	r2, r8
 8001d36:	0752      	lsls	r2, r2, #29
 8001d38:	d00b      	beq.n	8001d52 <__aeabi_dmul+0x15a>
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	4641      	mov	r1, r8
 8001d3e:	400a      	ands	r2, r1
 8001d40:	2a04      	cmp	r2, #4
 8001d42:	d006      	beq.n	8001d52 <__aeabi_dmul+0x15a>
 8001d44:	4642      	mov	r2, r8
 8001d46:	1d11      	adds	r1, r2, #4
 8001d48:	4541      	cmp	r1, r8
 8001d4a:	4192      	sbcs	r2, r2
 8001d4c:	4688      	mov	r8, r1
 8001d4e:	4252      	negs	r2, r2
 8001d50:	4492      	add	sl, r2
 8001d52:	4652      	mov	r2, sl
 8001d54:	01d2      	lsls	r2, r2, #7
 8001d56:	d506      	bpl.n	8001d66 <__aeabi_dmul+0x16e>
 8001d58:	4652      	mov	r2, sl
 8001d5a:	4b80      	ldr	r3, [pc, #512]	@ (8001f5c <__aeabi_dmul+0x364>)
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	4692      	mov	sl, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	18c3      	adds	r3, r0, r3
 8001d66:	4a7e      	ldr	r2, [pc, #504]	@ (8001f60 <__aeabi_dmul+0x368>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dmul+0x176>
 8001d6c:	e18f      	b.n	800208e <__aeabi_dmul+0x496>
 8001d6e:	4642      	mov	r2, r8
 8001d70:	08d1      	lsrs	r1, r2, #3
 8001d72:	4652      	mov	r2, sl
 8001d74:	0752      	lsls	r2, r2, #29
 8001d76:	430a      	orrs	r2, r1
 8001d78:	4651      	mov	r1, sl
 8001d7a:	055b      	lsls	r3, r3, #21
 8001d7c:	024c      	lsls	r4, r1, #9
 8001d7e:	0b24      	lsrs	r4, r4, #12
 8001d80:	0d5b      	lsrs	r3, r3, #21
 8001d82:	e797      	b.n	8001cb4 <__aeabi_dmul+0xbc>
 8001d84:	4b73      	ldr	r3, [pc, #460]	@ (8001f54 <__aeabi_dmul+0x35c>)
 8001d86:	4326      	orrs	r6, r4
 8001d88:	469c      	mov	ip, r3
 8001d8a:	44e3      	add	fp, ip
 8001d8c:	2e00      	cmp	r6, #0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dmul+0x19a>
 8001d90:	e16f      	b.n	8002072 <__aeabi_dmul+0x47a>
 8001d92:	2303      	movs	r3, #3
 8001d94:	4649      	mov	r1, r9
 8001d96:	431d      	orrs	r5, r3
 8001d98:	9b00      	ldr	r3, [sp, #0]
 8001d9a:	4059      	eors	r1, r3
 8001d9c:	b2cb      	uxtb	r3, r1
 8001d9e:	9303      	str	r3, [sp, #12]
 8001da0:	2d0a      	cmp	r5, #10
 8001da2:	dd00      	ble.n	8001da6 <__aeabi_dmul+0x1ae>
 8001da4:	e133      	b.n	800200e <__aeabi_dmul+0x416>
 8001da6:	2301      	movs	r3, #1
 8001da8:	40ab      	lsls	r3, r5
 8001daa:	001d      	movs	r5, r3
 8001dac:	2303      	movs	r3, #3
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2288      	movs	r2, #136	@ 0x88
 8001db2:	422a      	tst	r2, r5
 8001db4:	d197      	bne.n	8001ce6 <__aeabi_dmul+0xee>
 8001db6:	4642      	mov	r2, r8
 8001db8:	4643      	mov	r3, r8
 8001dba:	0412      	lsls	r2, r2, #16
 8001dbc:	0c12      	lsrs	r2, r2, #16
 8001dbe:	0016      	movs	r6, r2
 8001dc0:	9801      	ldr	r0, [sp, #4]
 8001dc2:	0c1d      	lsrs	r5, r3, #16
 8001dc4:	0c03      	lsrs	r3, r0, #16
 8001dc6:	0400      	lsls	r0, r0, #16
 8001dc8:	0c00      	lsrs	r0, r0, #16
 8001dca:	4346      	muls	r6, r0
 8001dcc:	46b4      	mov	ip, r6
 8001dce:	001e      	movs	r6, r3
 8001dd0:	436e      	muls	r6, r5
 8001dd2:	9600      	str	r6, [sp, #0]
 8001dd4:	0016      	movs	r6, r2
 8001dd6:	0007      	movs	r7, r0
 8001dd8:	435e      	muls	r6, r3
 8001dda:	4661      	mov	r1, ip
 8001ddc:	46b0      	mov	r8, r6
 8001dde:	436f      	muls	r7, r5
 8001de0:	0c0e      	lsrs	r6, r1, #16
 8001de2:	44b8      	add	r8, r7
 8001de4:	4446      	add	r6, r8
 8001de6:	42b7      	cmp	r7, r6
 8001de8:	d905      	bls.n	8001df6 <__aeabi_dmul+0x1fe>
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	0249      	lsls	r1, r1, #9
 8001dee:	4688      	mov	r8, r1
 8001df0:	9f00      	ldr	r7, [sp, #0]
 8001df2:	4447      	add	r7, r8
 8001df4:	9700      	str	r7, [sp, #0]
 8001df6:	4661      	mov	r1, ip
 8001df8:	0409      	lsls	r1, r1, #16
 8001dfa:	0c09      	lsrs	r1, r1, #16
 8001dfc:	0c37      	lsrs	r7, r6, #16
 8001dfe:	0436      	lsls	r6, r6, #16
 8001e00:	468c      	mov	ip, r1
 8001e02:	0031      	movs	r1, r6
 8001e04:	4461      	add	r1, ip
 8001e06:	9101      	str	r1, [sp, #4]
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0c26      	lsrs	r6, r4, #16
 8001e0c:	0424      	lsls	r4, r4, #16
 8001e0e:	0c24      	lsrs	r4, r4, #16
 8001e10:	4361      	muls	r1, r4
 8001e12:	468c      	mov	ip, r1
 8001e14:	0021      	movs	r1, r4
 8001e16:	4369      	muls	r1, r5
 8001e18:	4689      	mov	r9, r1
 8001e1a:	4661      	mov	r1, ip
 8001e1c:	0c09      	lsrs	r1, r1, #16
 8001e1e:	4688      	mov	r8, r1
 8001e20:	4372      	muls	r2, r6
 8001e22:	444a      	add	r2, r9
 8001e24:	4442      	add	r2, r8
 8001e26:	4375      	muls	r5, r6
 8001e28:	4591      	cmp	r9, r2
 8001e2a:	d903      	bls.n	8001e34 <__aeabi_dmul+0x23c>
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0249      	lsls	r1, r1, #9
 8001e30:	4688      	mov	r8, r1
 8001e32:	4445      	add	r5, r8
 8001e34:	0c11      	lsrs	r1, r2, #16
 8001e36:	4688      	mov	r8, r1
 8001e38:	4661      	mov	r1, ip
 8001e3a:	0409      	lsls	r1, r1, #16
 8001e3c:	0c09      	lsrs	r1, r1, #16
 8001e3e:	468c      	mov	ip, r1
 8001e40:	0412      	lsls	r2, r2, #16
 8001e42:	4462      	add	r2, ip
 8001e44:	18b9      	adds	r1, r7, r2
 8001e46:	9102      	str	r1, [sp, #8]
 8001e48:	4651      	mov	r1, sl
 8001e4a:	0c09      	lsrs	r1, r1, #16
 8001e4c:	468c      	mov	ip, r1
 8001e4e:	4651      	mov	r1, sl
 8001e50:	040f      	lsls	r7, r1, #16
 8001e52:	0c3f      	lsrs	r7, r7, #16
 8001e54:	0039      	movs	r1, r7
 8001e56:	4341      	muls	r1, r0
 8001e58:	4445      	add	r5, r8
 8001e5a:	4688      	mov	r8, r1
 8001e5c:	4661      	mov	r1, ip
 8001e5e:	4341      	muls	r1, r0
 8001e60:	468a      	mov	sl, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	4660      	mov	r0, ip
 8001e66:	0c09      	lsrs	r1, r1, #16
 8001e68:	4689      	mov	r9, r1
 8001e6a:	4358      	muls	r0, r3
 8001e6c:	437b      	muls	r3, r7
 8001e6e:	4453      	add	r3, sl
 8001e70:	444b      	add	r3, r9
 8001e72:	459a      	cmp	sl, r3
 8001e74:	d903      	bls.n	8001e7e <__aeabi_dmul+0x286>
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	0249      	lsls	r1, r1, #9
 8001e7a:	4689      	mov	r9, r1
 8001e7c:	4448      	add	r0, r9
 8001e7e:	0c19      	lsrs	r1, r3, #16
 8001e80:	4689      	mov	r9, r1
 8001e82:	4641      	mov	r1, r8
 8001e84:	0409      	lsls	r1, r1, #16
 8001e86:	0c09      	lsrs	r1, r1, #16
 8001e88:	4688      	mov	r8, r1
 8001e8a:	0039      	movs	r1, r7
 8001e8c:	4361      	muls	r1, r4
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	4443      	add	r3, r8
 8001e92:	4688      	mov	r8, r1
 8001e94:	4661      	mov	r1, ip
 8001e96:	434c      	muls	r4, r1
 8001e98:	4371      	muls	r1, r6
 8001e9a:	468c      	mov	ip, r1
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	4377      	muls	r7, r6
 8001ea0:	0c0e      	lsrs	r6, r1, #16
 8001ea2:	193f      	adds	r7, r7, r4
 8001ea4:	19f6      	adds	r6, r6, r7
 8001ea6:	4448      	add	r0, r9
 8001ea8:	42b4      	cmp	r4, r6
 8001eaa:	d903      	bls.n	8001eb4 <__aeabi_dmul+0x2bc>
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	0249      	lsls	r1, r1, #9
 8001eb0:	4689      	mov	r9, r1
 8001eb2:	44cc      	add	ip, r9
 8001eb4:	9902      	ldr	r1, [sp, #8]
 8001eb6:	9f00      	ldr	r7, [sp, #0]
 8001eb8:	4689      	mov	r9, r1
 8001eba:	0431      	lsls	r1, r6, #16
 8001ebc:	444f      	add	r7, r9
 8001ebe:	4689      	mov	r9, r1
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	4297      	cmp	r7, r2
 8001ec4:	4192      	sbcs	r2, r2
 8001ec6:	040c      	lsls	r4, r1, #16
 8001ec8:	0c24      	lsrs	r4, r4, #16
 8001eca:	444c      	add	r4, r9
 8001ecc:	18ff      	adds	r7, r7, r3
 8001ece:	4252      	negs	r2, r2
 8001ed0:	1964      	adds	r4, r4, r5
 8001ed2:	18a1      	adds	r1, r4, r2
 8001ed4:	429f      	cmp	r7, r3
 8001ed6:	419b      	sbcs	r3, r3
 8001ed8:	4688      	mov	r8, r1
 8001eda:	4682      	mov	sl, r0
 8001edc:	425b      	negs	r3, r3
 8001ede:	4699      	mov	r9, r3
 8001ee0:	4590      	cmp	r8, r2
 8001ee2:	4192      	sbcs	r2, r2
 8001ee4:	42ac      	cmp	r4, r5
 8001ee6:	41a4      	sbcs	r4, r4
 8001ee8:	44c2      	add	sl, r8
 8001eea:	44d1      	add	r9, sl
 8001eec:	4252      	negs	r2, r2
 8001eee:	4264      	negs	r4, r4
 8001ef0:	4314      	orrs	r4, r2
 8001ef2:	4599      	cmp	r9, r3
 8001ef4:	419b      	sbcs	r3, r3
 8001ef6:	4582      	cmp	sl, r0
 8001ef8:	4192      	sbcs	r2, r2
 8001efa:	425b      	negs	r3, r3
 8001efc:	4252      	negs	r2, r2
 8001efe:	4313      	orrs	r3, r2
 8001f00:	464a      	mov	r2, r9
 8001f02:	0c36      	lsrs	r6, r6, #16
 8001f04:	19a4      	adds	r4, r4, r6
 8001f06:	18e3      	adds	r3, r4, r3
 8001f08:	4463      	add	r3, ip
 8001f0a:	025b      	lsls	r3, r3, #9
 8001f0c:	0dd2      	lsrs	r2, r2, #23
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	9901      	ldr	r1, [sp, #4]
 8001f12:	4692      	mov	sl, r2
 8001f14:	027a      	lsls	r2, r7, #9
 8001f16:	430a      	orrs	r2, r1
 8001f18:	1e50      	subs	r0, r2, #1
 8001f1a:	4182      	sbcs	r2, r0
 8001f1c:	0dff      	lsrs	r7, r7, #23
 8001f1e:	4317      	orrs	r7, r2
 8001f20:	464a      	mov	r2, r9
 8001f22:	0252      	lsls	r2, r2, #9
 8001f24:	4317      	orrs	r7, r2
 8001f26:	46b8      	mov	r8, r7
 8001f28:	01db      	lsls	r3, r3, #7
 8001f2a:	d500      	bpl.n	8001f2e <__aeabi_dmul+0x336>
 8001f2c:	e6ed      	b.n	8001d0a <__aeabi_dmul+0x112>
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <__aeabi_dmul+0x36c>)
 8001f30:	9a03      	ldr	r2, [sp, #12]
 8001f32:	445b      	add	r3, fp
 8001f34:	4691      	mov	r9, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	dc00      	bgt.n	8001f3c <__aeabi_dmul+0x344>
 8001f3a:	e0ac      	b.n	8002096 <__aeabi_dmul+0x49e>
 8001f3c:	003a      	movs	r2, r7
 8001f3e:	0752      	lsls	r2, r2, #29
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x34c>
 8001f42:	e710      	b.n	8001d66 <__aeabi_dmul+0x16e>
 8001f44:	220f      	movs	r2, #15
 8001f46:	4658      	mov	r0, fp
 8001f48:	403a      	ands	r2, r7
 8001f4a:	2a04      	cmp	r2, #4
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dmul+0x358>
 8001f4e:	e6f9      	b.n	8001d44 <__aeabi_dmul+0x14c>
 8001f50:	e709      	b.n	8001d66 <__aeabi_dmul+0x16e>
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	000007ff 	.word	0x000007ff
 8001f58:	fffffc01 	.word	0xfffffc01
 8001f5c:	feffffff 	.word	0xfeffffff
 8001f60:	000007fe 	.word	0x000007fe
 8001f64:	000003ff 	.word	0x000003ff
 8001f68:	0022      	movs	r2, r4
 8001f6a:	4332      	orrs	r2, r6
 8001f6c:	d06f      	beq.n	800204e <__aeabi_dmul+0x456>
 8001f6e:	2c00      	cmp	r4, #0
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dmul+0x37c>
 8001f72:	e0c2      	b.n	80020fa <__aeabi_dmul+0x502>
 8001f74:	0020      	movs	r0, r4
 8001f76:	f000 fe27 	bl	8002bc8 <__clzsi2>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	3a0b      	subs	r2, #11
 8001f80:	201d      	movs	r0, #29
 8001f82:	1a82      	subs	r2, r0, r2
 8001f84:	0030      	movs	r0, r6
 8001f86:	0019      	movs	r1, r3
 8001f88:	40d0      	lsrs	r0, r2
 8001f8a:	3908      	subs	r1, #8
 8001f8c:	408c      	lsls	r4, r1
 8001f8e:	0002      	movs	r2, r0
 8001f90:	4322      	orrs	r2, r4
 8001f92:	0034      	movs	r4, r6
 8001f94:	408c      	lsls	r4, r1
 8001f96:	4659      	mov	r1, fp
 8001f98:	1acb      	subs	r3, r1, r3
 8001f9a:	4986      	ldr	r1, [pc, #536]	@ (80021b4 <__aeabi_dmul+0x5bc>)
 8001f9c:	468b      	mov	fp, r1
 8001f9e:	449b      	add	fp, r3
 8001fa0:	2d0a      	cmp	r5, #10
 8001fa2:	dd00      	ble.n	8001fa6 <__aeabi_dmul+0x3ae>
 8001fa4:	e6a4      	b.n	8001cf0 <__aeabi_dmul+0xf8>
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	9b00      	ldr	r3, [sp, #0]
 8001faa:	9401      	str	r4, [sp, #4]
 8001fac:	4059      	eors	r1, r3
 8001fae:	b2cb      	uxtb	r3, r1
 8001fb0:	0014      	movs	r4, r2
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	9303      	str	r3, [sp, #12]
 8001fb6:	2d02      	cmp	r5, #2
 8001fb8:	dd00      	ble.n	8001fbc <__aeabi_dmul+0x3c4>
 8001fba:	e667      	b.n	8001c8c <__aeabi_dmul+0x94>
 8001fbc:	e6fb      	b.n	8001db6 <__aeabi_dmul+0x1be>
 8001fbe:	4653      	mov	r3, sl
 8001fc0:	4303      	orrs	r3, r0
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	d03c      	beq.n	8002040 <__aeabi_dmul+0x448>
 8001fc6:	4653      	mov	r3, sl
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d100      	bne.n	8001fce <__aeabi_dmul+0x3d6>
 8001fcc:	e0a3      	b.n	8002116 <__aeabi_dmul+0x51e>
 8001fce:	4650      	mov	r0, sl
 8001fd0:	f000 fdfa 	bl	8002bc8 <__clzsi2>
 8001fd4:	230b      	movs	r3, #11
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	469c      	mov	ip, r3
 8001fda:	0002      	movs	r2, r0
 8001fdc:	4484      	add	ip, r0
 8001fde:	0011      	movs	r1, r2
 8001fe0:	4650      	mov	r0, sl
 8001fe2:	3908      	subs	r1, #8
 8001fe4:	4088      	lsls	r0, r1
 8001fe6:	231d      	movs	r3, #29
 8001fe8:	4680      	mov	r8, r0
 8001fea:	4660      	mov	r0, ip
 8001fec:	1a1b      	subs	r3, r3, r0
 8001fee:	0020      	movs	r0, r4
 8001ff0:	40d8      	lsrs	r0, r3
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	4640      	mov	r0, r8
 8001ff6:	4303      	orrs	r3, r0
 8001ff8:	469a      	mov	sl, r3
 8001ffa:	0023      	movs	r3, r4
 8001ffc:	408b      	lsls	r3, r1
 8001ffe:	4698      	mov	r8, r3
 8002000:	4b6c      	ldr	r3, [pc, #432]	@ (80021b4 <__aeabi_dmul+0x5bc>)
 8002002:	2500      	movs	r5, #0
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	469b      	mov	fp, r3
 8002008:	2300      	movs	r3, #0
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	e61a      	b.n	8001c44 <__aeabi_dmul+0x4c>
 800200e:	2d0f      	cmp	r5, #15
 8002010:	d000      	beq.n	8002014 <__aeabi_dmul+0x41c>
 8002012:	e0c9      	b.n	80021a8 <__aeabi_dmul+0x5b0>
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	4652      	mov	r2, sl
 8002018:	031b      	lsls	r3, r3, #12
 800201a:	421a      	tst	r2, r3
 800201c:	d002      	beq.n	8002024 <__aeabi_dmul+0x42c>
 800201e:	421c      	tst	r4, r3
 8002020:	d100      	bne.n	8002024 <__aeabi_dmul+0x42c>
 8002022:	e092      	b.n	800214a <__aeabi_dmul+0x552>
 8002024:	2480      	movs	r4, #128	@ 0x80
 8002026:	4653      	mov	r3, sl
 8002028:	0324      	lsls	r4, r4, #12
 800202a:	431c      	orrs	r4, r3
 800202c:	0324      	lsls	r4, r4, #12
 800202e:	4642      	mov	r2, r8
 8002030:	0b24      	lsrs	r4, r4, #12
 8002032:	e63e      	b.n	8001cb2 <__aeabi_dmul+0xba>
 8002034:	469b      	mov	fp, r3
 8002036:	2303      	movs	r3, #3
 8002038:	4680      	mov	r8, r0
 800203a:	250c      	movs	r5, #12
 800203c:	9302      	str	r3, [sp, #8]
 800203e:	e601      	b.n	8001c44 <__aeabi_dmul+0x4c>
 8002040:	2300      	movs	r3, #0
 8002042:	469a      	mov	sl, r3
 8002044:	469b      	mov	fp, r3
 8002046:	3301      	adds	r3, #1
 8002048:	2504      	movs	r5, #4
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	e5fa      	b.n	8001c44 <__aeabi_dmul+0x4c>
 800204e:	2101      	movs	r1, #1
 8002050:	430d      	orrs	r5, r1
 8002052:	2d0a      	cmp	r5, #10
 8002054:	dd00      	ble.n	8002058 <__aeabi_dmul+0x460>
 8002056:	e64b      	b.n	8001cf0 <__aeabi_dmul+0xf8>
 8002058:	4649      	mov	r1, r9
 800205a:	9800      	ldr	r0, [sp, #0]
 800205c:	4041      	eors	r1, r0
 800205e:	b2c9      	uxtb	r1, r1
 8002060:	9103      	str	r1, [sp, #12]
 8002062:	2d02      	cmp	r5, #2
 8002064:	dc00      	bgt.n	8002068 <__aeabi_dmul+0x470>
 8002066:	e096      	b.n	8002196 <__aeabi_dmul+0x59e>
 8002068:	2300      	movs	r3, #0
 800206a:	2400      	movs	r4, #0
 800206c:	2001      	movs	r0, #1
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	e60c      	b.n	8001c8c <__aeabi_dmul+0x94>
 8002072:	4649      	mov	r1, r9
 8002074:	2302      	movs	r3, #2
 8002076:	9a00      	ldr	r2, [sp, #0]
 8002078:	432b      	orrs	r3, r5
 800207a:	4051      	eors	r1, r2
 800207c:	b2ca      	uxtb	r2, r1
 800207e:	9203      	str	r2, [sp, #12]
 8002080:	2b0a      	cmp	r3, #10
 8002082:	dd00      	ble.n	8002086 <__aeabi_dmul+0x48e>
 8002084:	e634      	b.n	8001cf0 <__aeabi_dmul+0xf8>
 8002086:	2d00      	cmp	r5, #0
 8002088:	d157      	bne.n	800213a <__aeabi_dmul+0x542>
 800208a:	9b03      	ldr	r3, [sp, #12]
 800208c:	4699      	mov	r9, r3
 800208e:	2400      	movs	r4, #0
 8002090:	2200      	movs	r2, #0
 8002092:	4b49      	ldr	r3, [pc, #292]	@ (80021b8 <__aeabi_dmul+0x5c0>)
 8002094:	e60e      	b.n	8001cb4 <__aeabi_dmul+0xbc>
 8002096:	4658      	mov	r0, fp
 8002098:	2101      	movs	r1, #1
 800209a:	1ac9      	subs	r1, r1, r3
 800209c:	2938      	cmp	r1, #56	@ 0x38
 800209e:	dd00      	ble.n	80020a2 <__aeabi_dmul+0x4aa>
 80020a0:	e62f      	b.n	8001d02 <__aeabi_dmul+0x10a>
 80020a2:	291f      	cmp	r1, #31
 80020a4:	dd56      	ble.n	8002154 <__aeabi_dmul+0x55c>
 80020a6:	221f      	movs	r2, #31
 80020a8:	4654      	mov	r4, sl
 80020aa:	4252      	negs	r2, r2
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	40dc      	lsrs	r4, r3
 80020b0:	2920      	cmp	r1, #32
 80020b2:	d007      	beq.n	80020c4 <__aeabi_dmul+0x4cc>
 80020b4:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <__aeabi_dmul+0x5c4>)
 80020b6:	4642      	mov	r2, r8
 80020b8:	469c      	mov	ip, r3
 80020ba:	4653      	mov	r3, sl
 80020bc:	4460      	add	r0, ip
 80020be:	4083      	lsls	r3, r0
 80020c0:	431a      	orrs	r2, r3
 80020c2:	4690      	mov	r8, r2
 80020c4:	4642      	mov	r2, r8
 80020c6:	2107      	movs	r1, #7
 80020c8:	1e53      	subs	r3, r2, #1
 80020ca:	419a      	sbcs	r2, r3
 80020cc:	000b      	movs	r3, r1
 80020ce:	4322      	orrs	r2, r4
 80020d0:	4013      	ands	r3, r2
 80020d2:	2400      	movs	r4, #0
 80020d4:	4211      	tst	r1, r2
 80020d6:	d009      	beq.n	80020ec <__aeabi_dmul+0x4f4>
 80020d8:	230f      	movs	r3, #15
 80020da:	4013      	ands	r3, r2
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d05d      	beq.n	800219c <__aeabi_dmul+0x5a4>
 80020e0:	1d11      	adds	r1, r2, #4
 80020e2:	4291      	cmp	r1, r2
 80020e4:	419b      	sbcs	r3, r3
 80020e6:	000a      	movs	r2, r1
 80020e8:	425b      	negs	r3, r3
 80020ea:	075b      	lsls	r3, r3, #29
 80020ec:	08d2      	lsrs	r2, r2, #3
 80020ee:	431a      	orrs	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	e5df      	b.n	8001cb4 <__aeabi_dmul+0xbc>
 80020f4:	9b03      	ldr	r3, [sp, #12]
 80020f6:	4699      	mov	r9, r3
 80020f8:	e5fa      	b.n	8001cf0 <__aeabi_dmul+0xf8>
 80020fa:	9801      	ldr	r0, [sp, #4]
 80020fc:	f000 fd64 	bl	8002bc8 <__clzsi2>
 8002100:	0002      	movs	r2, r0
 8002102:	0003      	movs	r3, r0
 8002104:	3215      	adds	r2, #21
 8002106:	3320      	adds	r3, #32
 8002108:	2a1c      	cmp	r2, #28
 800210a:	dc00      	bgt.n	800210e <__aeabi_dmul+0x516>
 800210c:	e738      	b.n	8001f80 <__aeabi_dmul+0x388>
 800210e:	9a01      	ldr	r2, [sp, #4]
 8002110:	3808      	subs	r0, #8
 8002112:	4082      	lsls	r2, r0
 8002114:	e73f      	b.n	8001f96 <__aeabi_dmul+0x39e>
 8002116:	f000 fd57 	bl	8002bc8 <__clzsi2>
 800211a:	2315      	movs	r3, #21
 800211c:	469c      	mov	ip, r3
 800211e:	4484      	add	ip, r0
 8002120:	0002      	movs	r2, r0
 8002122:	4663      	mov	r3, ip
 8002124:	3220      	adds	r2, #32
 8002126:	2b1c      	cmp	r3, #28
 8002128:	dc00      	bgt.n	800212c <__aeabi_dmul+0x534>
 800212a:	e758      	b.n	8001fde <__aeabi_dmul+0x3e6>
 800212c:	2300      	movs	r3, #0
 800212e:	4698      	mov	r8, r3
 8002130:	0023      	movs	r3, r4
 8002132:	3808      	subs	r0, #8
 8002134:	4083      	lsls	r3, r0
 8002136:	469a      	mov	sl, r3
 8002138:	e762      	b.n	8002000 <__aeabi_dmul+0x408>
 800213a:	001d      	movs	r5, r3
 800213c:	2300      	movs	r3, #0
 800213e:	2400      	movs	r4, #0
 8002140:	2002      	movs	r0, #2
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	e5a2      	b.n	8001c8c <__aeabi_dmul+0x94>
 8002146:	9002      	str	r0, [sp, #8]
 8002148:	e632      	b.n	8001db0 <__aeabi_dmul+0x1b8>
 800214a:	431c      	orrs	r4, r3
 800214c:	9b00      	ldr	r3, [sp, #0]
 800214e:	9a01      	ldr	r2, [sp, #4]
 8002150:	4699      	mov	r9, r3
 8002152:	e5ae      	b.n	8001cb2 <__aeabi_dmul+0xba>
 8002154:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <__aeabi_dmul+0x5c8>)
 8002156:	4652      	mov	r2, sl
 8002158:	18c3      	adds	r3, r0, r3
 800215a:	4640      	mov	r0, r8
 800215c:	409a      	lsls	r2, r3
 800215e:	40c8      	lsrs	r0, r1
 8002160:	4302      	orrs	r2, r0
 8002162:	4640      	mov	r0, r8
 8002164:	4098      	lsls	r0, r3
 8002166:	0003      	movs	r3, r0
 8002168:	1e58      	subs	r0, r3, #1
 800216a:	4183      	sbcs	r3, r0
 800216c:	4654      	mov	r4, sl
 800216e:	431a      	orrs	r2, r3
 8002170:	40cc      	lsrs	r4, r1
 8002172:	0753      	lsls	r3, r2, #29
 8002174:	d009      	beq.n	800218a <__aeabi_dmul+0x592>
 8002176:	230f      	movs	r3, #15
 8002178:	4013      	ands	r3, r2
 800217a:	2b04      	cmp	r3, #4
 800217c:	d005      	beq.n	800218a <__aeabi_dmul+0x592>
 800217e:	1d13      	adds	r3, r2, #4
 8002180:	4293      	cmp	r3, r2
 8002182:	4192      	sbcs	r2, r2
 8002184:	4252      	negs	r2, r2
 8002186:	18a4      	adds	r4, r4, r2
 8002188:	001a      	movs	r2, r3
 800218a:	0223      	lsls	r3, r4, #8
 800218c:	d508      	bpl.n	80021a0 <__aeabi_dmul+0x5a8>
 800218e:	2301      	movs	r3, #1
 8002190:	2400      	movs	r4, #0
 8002192:	2200      	movs	r2, #0
 8002194:	e58e      	b.n	8001cb4 <__aeabi_dmul+0xbc>
 8002196:	4689      	mov	r9, r1
 8002198:	2400      	movs	r4, #0
 800219a:	e58b      	b.n	8001cb4 <__aeabi_dmul+0xbc>
 800219c:	2300      	movs	r3, #0
 800219e:	e7a5      	b.n	80020ec <__aeabi_dmul+0x4f4>
 80021a0:	0763      	lsls	r3, r4, #29
 80021a2:	0264      	lsls	r4, r4, #9
 80021a4:	0b24      	lsrs	r4, r4, #12
 80021a6:	e7a1      	b.n	80020ec <__aeabi_dmul+0x4f4>
 80021a8:	9b00      	ldr	r3, [sp, #0]
 80021aa:	46a2      	mov	sl, r4
 80021ac:	4699      	mov	r9, r3
 80021ae:	9b01      	ldr	r3, [sp, #4]
 80021b0:	4698      	mov	r8, r3
 80021b2:	e737      	b.n	8002024 <__aeabi_dmul+0x42c>
 80021b4:	fffffc0d 	.word	0xfffffc0d
 80021b8:	000007ff 	.word	0x000007ff
 80021bc:	0000043e 	.word	0x0000043e
 80021c0:	0000041e 	.word	0x0000041e

080021c4 <__aeabi_dsub>:
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	4657      	mov	r7, sl
 80021c8:	464e      	mov	r6, r9
 80021ca:	4645      	mov	r5, r8
 80021cc:	46de      	mov	lr, fp
 80021ce:	b5e0      	push	{r5, r6, r7, lr}
 80021d0:	b083      	sub	sp, #12
 80021d2:	9000      	str	r0, [sp, #0]
 80021d4:	9101      	str	r1, [sp, #4]
 80021d6:	030c      	lsls	r4, r1, #12
 80021d8:	004d      	lsls	r5, r1, #1
 80021da:	0fce      	lsrs	r6, r1, #31
 80021dc:	0a61      	lsrs	r1, r4, #9
 80021de:	9c00      	ldr	r4, [sp, #0]
 80021e0:	005f      	lsls	r7, r3, #1
 80021e2:	0f64      	lsrs	r4, r4, #29
 80021e4:	430c      	orrs	r4, r1
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	9200      	str	r2, [sp, #0]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	00c8      	lsls	r0, r1, #3
 80021ee:	0319      	lsls	r1, r3, #12
 80021f0:	0d7b      	lsrs	r3, r7, #21
 80021f2:	4699      	mov	r9, r3
 80021f4:	9b01      	ldr	r3, [sp, #4]
 80021f6:	4fcc      	ldr	r7, [pc, #816]	@ (8002528 <__aeabi_dsub+0x364>)
 80021f8:	0fdb      	lsrs	r3, r3, #31
 80021fa:	469c      	mov	ip, r3
 80021fc:	0a4b      	lsrs	r3, r1, #9
 80021fe:	9900      	ldr	r1, [sp, #0]
 8002200:	4680      	mov	r8, r0
 8002202:	0f49      	lsrs	r1, r1, #29
 8002204:	4319      	orrs	r1, r3
 8002206:	9b00      	ldr	r3, [sp, #0]
 8002208:	468b      	mov	fp, r1
 800220a:	00da      	lsls	r2, r3, #3
 800220c:	4692      	mov	sl, r2
 800220e:	0d6d      	lsrs	r5, r5, #21
 8002210:	45b9      	cmp	r9, r7
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x52>
 8002214:	e0bf      	b.n	8002396 <__aeabi_dsub+0x1d2>
 8002216:	2301      	movs	r3, #1
 8002218:	4661      	mov	r1, ip
 800221a:	4059      	eors	r1, r3
 800221c:	464b      	mov	r3, r9
 800221e:	468c      	mov	ip, r1
 8002220:	1aeb      	subs	r3, r5, r3
 8002222:	428e      	cmp	r6, r1
 8002224:	d075      	beq.n	8002312 <__aeabi_dsub+0x14e>
 8002226:	2b00      	cmp	r3, #0
 8002228:	dc00      	bgt.n	800222c <__aeabi_dsub+0x68>
 800222a:	e2a3      	b.n	8002774 <__aeabi_dsub+0x5b0>
 800222c:	4649      	mov	r1, r9
 800222e:	2900      	cmp	r1, #0
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x70>
 8002232:	e0ce      	b.n	80023d2 <__aeabi_dsub+0x20e>
 8002234:	42bd      	cmp	r5, r7
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x76>
 8002238:	e200      	b.n	800263c <__aeabi_dsub+0x478>
 800223a:	2701      	movs	r7, #1
 800223c:	2b38      	cmp	r3, #56	@ 0x38
 800223e:	dc19      	bgt.n	8002274 <__aeabi_dsub+0xb0>
 8002240:	2780      	movs	r7, #128	@ 0x80
 8002242:	4659      	mov	r1, fp
 8002244:	043f      	lsls	r7, r7, #16
 8002246:	4339      	orrs	r1, r7
 8002248:	468b      	mov	fp, r1
 800224a:	2b1f      	cmp	r3, #31
 800224c:	dd00      	ble.n	8002250 <__aeabi_dsub+0x8c>
 800224e:	e1fa      	b.n	8002646 <__aeabi_dsub+0x482>
 8002250:	2720      	movs	r7, #32
 8002252:	1af9      	subs	r1, r7, r3
 8002254:	468c      	mov	ip, r1
 8002256:	4659      	mov	r1, fp
 8002258:	4667      	mov	r7, ip
 800225a:	40b9      	lsls	r1, r7
 800225c:	000f      	movs	r7, r1
 800225e:	0011      	movs	r1, r2
 8002260:	40d9      	lsrs	r1, r3
 8002262:	430f      	orrs	r7, r1
 8002264:	4661      	mov	r1, ip
 8002266:	408a      	lsls	r2, r1
 8002268:	1e51      	subs	r1, r2, #1
 800226a:	418a      	sbcs	r2, r1
 800226c:	4659      	mov	r1, fp
 800226e:	40d9      	lsrs	r1, r3
 8002270:	4317      	orrs	r7, r2
 8002272:	1a64      	subs	r4, r4, r1
 8002274:	1bc7      	subs	r7, r0, r7
 8002276:	42b8      	cmp	r0, r7
 8002278:	4180      	sbcs	r0, r0
 800227a:	4240      	negs	r0, r0
 800227c:	1a24      	subs	r4, r4, r0
 800227e:	0223      	lsls	r3, r4, #8
 8002280:	d400      	bmi.n	8002284 <__aeabi_dsub+0xc0>
 8002282:	e140      	b.n	8002506 <__aeabi_dsub+0x342>
 8002284:	0264      	lsls	r4, r4, #9
 8002286:	0a64      	lsrs	r4, r4, #9
 8002288:	2c00      	cmp	r4, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0xca>
 800228c:	e154      	b.n	8002538 <__aeabi_dsub+0x374>
 800228e:	0020      	movs	r0, r4
 8002290:	f000 fc9a 	bl	8002bc8 <__clzsi2>
 8002294:	0003      	movs	r3, r0
 8002296:	3b08      	subs	r3, #8
 8002298:	2120      	movs	r1, #32
 800229a:	0038      	movs	r0, r7
 800229c:	1aca      	subs	r2, r1, r3
 800229e:	40d0      	lsrs	r0, r2
 80022a0:	409c      	lsls	r4, r3
 80022a2:	0002      	movs	r2, r0
 80022a4:	409f      	lsls	r7, r3
 80022a6:	4322      	orrs	r2, r4
 80022a8:	429d      	cmp	r5, r3
 80022aa:	dd00      	ble.n	80022ae <__aeabi_dsub+0xea>
 80022ac:	e1a6      	b.n	80025fc <__aeabi_dsub+0x438>
 80022ae:	1b58      	subs	r0, r3, r5
 80022b0:	3001      	adds	r0, #1
 80022b2:	1a09      	subs	r1, r1, r0
 80022b4:	003c      	movs	r4, r7
 80022b6:	408f      	lsls	r7, r1
 80022b8:	40c4      	lsrs	r4, r0
 80022ba:	1e7b      	subs	r3, r7, #1
 80022bc:	419f      	sbcs	r7, r3
 80022be:	0013      	movs	r3, r2
 80022c0:	408b      	lsls	r3, r1
 80022c2:	4327      	orrs	r7, r4
 80022c4:	431f      	orrs	r7, r3
 80022c6:	40c2      	lsrs	r2, r0
 80022c8:	003b      	movs	r3, r7
 80022ca:	0014      	movs	r4, r2
 80022cc:	2500      	movs	r5, #0
 80022ce:	4313      	orrs	r3, r2
 80022d0:	d100      	bne.n	80022d4 <__aeabi_dsub+0x110>
 80022d2:	e1f7      	b.n	80026c4 <__aeabi_dsub+0x500>
 80022d4:	077b      	lsls	r3, r7, #29
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x116>
 80022d8:	e377      	b.n	80029ca <__aeabi_dsub+0x806>
 80022da:	230f      	movs	r3, #15
 80022dc:	0038      	movs	r0, r7
 80022de:	403b      	ands	r3, r7
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d004      	beq.n	80022ee <__aeabi_dsub+0x12a>
 80022e4:	1d38      	adds	r0, r7, #4
 80022e6:	42b8      	cmp	r0, r7
 80022e8:	41bf      	sbcs	r7, r7
 80022ea:	427f      	negs	r7, r7
 80022ec:	19e4      	adds	r4, r4, r7
 80022ee:	0223      	lsls	r3, r4, #8
 80022f0:	d400      	bmi.n	80022f4 <__aeabi_dsub+0x130>
 80022f2:	e368      	b.n	80029c6 <__aeabi_dsub+0x802>
 80022f4:	4b8c      	ldr	r3, [pc, #560]	@ (8002528 <__aeabi_dsub+0x364>)
 80022f6:	3501      	adds	r5, #1
 80022f8:	429d      	cmp	r5, r3
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x13a>
 80022fc:	e0f4      	b.n	80024e8 <__aeabi_dsub+0x324>
 80022fe:	4b8b      	ldr	r3, [pc, #556]	@ (800252c <__aeabi_dsub+0x368>)
 8002300:	056d      	lsls	r5, r5, #21
 8002302:	401c      	ands	r4, r3
 8002304:	0d6d      	lsrs	r5, r5, #21
 8002306:	0767      	lsls	r7, r4, #29
 8002308:	08c0      	lsrs	r0, r0, #3
 800230a:	0264      	lsls	r4, r4, #9
 800230c:	4307      	orrs	r7, r0
 800230e:	0b24      	lsrs	r4, r4, #12
 8002310:	e0ec      	b.n	80024ec <__aeabi_dsub+0x328>
 8002312:	2b00      	cmp	r3, #0
 8002314:	dc00      	bgt.n	8002318 <__aeabi_dsub+0x154>
 8002316:	e329      	b.n	800296c <__aeabi_dsub+0x7a8>
 8002318:	4649      	mov	r1, r9
 800231a:	2900      	cmp	r1, #0
 800231c:	d000      	beq.n	8002320 <__aeabi_dsub+0x15c>
 800231e:	e0d6      	b.n	80024ce <__aeabi_dsub+0x30a>
 8002320:	4659      	mov	r1, fp
 8002322:	4311      	orrs	r1, r2
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x164>
 8002326:	e12e      	b.n	8002586 <__aeabi_dsub+0x3c2>
 8002328:	1e59      	subs	r1, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x16c>
 800232e:	e1e6      	b.n	80026fe <__aeabi_dsub+0x53a>
 8002330:	42bb      	cmp	r3, r7
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x172>
 8002334:	e182      	b.n	800263c <__aeabi_dsub+0x478>
 8002336:	2701      	movs	r7, #1
 8002338:	000b      	movs	r3, r1
 800233a:	2938      	cmp	r1, #56	@ 0x38
 800233c:	dc14      	bgt.n	8002368 <__aeabi_dsub+0x1a4>
 800233e:	2b1f      	cmp	r3, #31
 8002340:	dd00      	ble.n	8002344 <__aeabi_dsub+0x180>
 8002342:	e23c      	b.n	80027be <__aeabi_dsub+0x5fa>
 8002344:	2720      	movs	r7, #32
 8002346:	1af9      	subs	r1, r7, r3
 8002348:	468c      	mov	ip, r1
 800234a:	4659      	mov	r1, fp
 800234c:	4667      	mov	r7, ip
 800234e:	40b9      	lsls	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	0011      	movs	r1, r2
 8002354:	40d9      	lsrs	r1, r3
 8002356:	430f      	orrs	r7, r1
 8002358:	4661      	mov	r1, ip
 800235a:	408a      	lsls	r2, r1
 800235c:	1e51      	subs	r1, r2, #1
 800235e:	418a      	sbcs	r2, r1
 8002360:	4659      	mov	r1, fp
 8002362:	40d9      	lsrs	r1, r3
 8002364:	4317      	orrs	r7, r2
 8002366:	1864      	adds	r4, r4, r1
 8002368:	183f      	adds	r7, r7, r0
 800236a:	4287      	cmp	r7, r0
 800236c:	4180      	sbcs	r0, r0
 800236e:	4240      	negs	r0, r0
 8002370:	1824      	adds	r4, r4, r0
 8002372:	0223      	lsls	r3, r4, #8
 8002374:	d400      	bmi.n	8002378 <__aeabi_dsub+0x1b4>
 8002376:	e0c6      	b.n	8002506 <__aeabi_dsub+0x342>
 8002378:	4b6b      	ldr	r3, [pc, #428]	@ (8002528 <__aeabi_dsub+0x364>)
 800237a:	3501      	adds	r5, #1
 800237c:	429d      	cmp	r5, r3
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x1be>
 8002380:	e0b2      	b.n	80024e8 <__aeabi_dsub+0x324>
 8002382:	2101      	movs	r1, #1
 8002384:	4b69      	ldr	r3, [pc, #420]	@ (800252c <__aeabi_dsub+0x368>)
 8002386:	087a      	lsrs	r2, r7, #1
 8002388:	401c      	ands	r4, r3
 800238a:	4039      	ands	r1, r7
 800238c:	430a      	orrs	r2, r1
 800238e:	07e7      	lsls	r7, r4, #31
 8002390:	4317      	orrs	r7, r2
 8002392:	0864      	lsrs	r4, r4, #1
 8002394:	e79e      	b.n	80022d4 <__aeabi_dsub+0x110>
 8002396:	4b66      	ldr	r3, [pc, #408]	@ (8002530 <__aeabi_dsub+0x36c>)
 8002398:	4311      	orrs	r1, r2
 800239a:	468a      	mov	sl, r1
 800239c:	18eb      	adds	r3, r5, r3
 800239e:	2900      	cmp	r1, #0
 80023a0:	d028      	beq.n	80023f4 <__aeabi_dsub+0x230>
 80023a2:	4566      	cmp	r6, ip
 80023a4:	d02c      	beq.n	8002400 <__aeabi_dsub+0x23c>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d05b      	beq.n	8002462 <__aeabi_dsub+0x29e>
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	d100      	bne.n	80023b0 <__aeabi_dsub+0x1ec>
 80023ae:	e12c      	b.n	800260a <__aeabi_dsub+0x446>
 80023b0:	465b      	mov	r3, fp
 80023b2:	4666      	mov	r6, ip
 80023b4:	075f      	lsls	r7, r3, #29
 80023b6:	08d2      	lsrs	r2, r2, #3
 80023b8:	4317      	orrs	r7, r2
 80023ba:	08dd      	lsrs	r5, r3, #3
 80023bc:	003b      	movs	r3, r7
 80023be:	432b      	orrs	r3, r5
 80023c0:	d100      	bne.n	80023c4 <__aeabi_dsub+0x200>
 80023c2:	e0e2      	b.n	800258a <__aeabi_dsub+0x3c6>
 80023c4:	2480      	movs	r4, #128	@ 0x80
 80023c6:	0324      	lsls	r4, r4, #12
 80023c8:	432c      	orrs	r4, r5
 80023ca:	0324      	lsls	r4, r4, #12
 80023cc:	4d56      	ldr	r5, [pc, #344]	@ (8002528 <__aeabi_dsub+0x364>)
 80023ce:	0b24      	lsrs	r4, r4, #12
 80023d0:	e08c      	b.n	80024ec <__aeabi_dsub+0x328>
 80023d2:	4659      	mov	r1, fp
 80023d4:	4311      	orrs	r1, r2
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x216>
 80023d8:	e0d5      	b.n	8002586 <__aeabi_dsub+0x3c2>
 80023da:	1e59      	subs	r1, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x21e>
 80023e0:	e1b9      	b.n	8002756 <__aeabi_dsub+0x592>
 80023e2:	42bb      	cmp	r3, r7
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x224>
 80023e6:	e1b1      	b.n	800274c <__aeabi_dsub+0x588>
 80023e8:	2701      	movs	r7, #1
 80023ea:	000b      	movs	r3, r1
 80023ec:	2938      	cmp	r1, #56	@ 0x38
 80023ee:	dd00      	ble.n	80023f2 <__aeabi_dsub+0x22e>
 80023f0:	e740      	b.n	8002274 <__aeabi_dsub+0xb0>
 80023f2:	e72a      	b.n	800224a <__aeabi_dsub+0x86>
 80023f4:	4661      	mov	r1, ip
 80023f6:	2701      	movs	r7, #1
 80023f8:	4079      	eors	r1, r7
 80023fa:	468c      	mov	ip, r1
 80023fc:	4566      	cmp	r6, ip
 80023fe:	d1d2      	bne.n	80023a6 <__aeabi_dsub+0x1e2>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x242>
 8002404:	e0c5      	b.n	8002592 <__aeabi_dsub+0x3ce>
 8002406:	2d00      	cmp	r5, #0
 8002408:	d000      	beq.n	800240c <__aeabi_dsub+0x248>
 800240a:	e155      	b.n	80026b8 <__aeabi_dsub+0x4f4>
 800240c:	464b      	mov	r3, r9
 800240e:	0025      	movs	r5, r4
 8002410:	4305      	orrs	r5, r0
 8002412:	d100      	bne.n	8002416 <__aeabi_dsub+0x252>
 8002414:	e212      	b.n	800283c <__aeabi_dsub+0x678>
 8002416:	1e59      	subs	r1, r3, #1
 8002418:	468c      	mov	ip, r1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x25c>
 800241e:	e249      	b.n	80028b4 <__aeabi_dsub+0x6f0>
 8002420:	4d41      	ldr	r5, [pc, #260]	@ (8002528 <__aeabi_dsub+0x364>)
 8002422:	42ab      	cmp	r3, r5
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x264>
 8002426:	e28f      	b.n	8002948 <__aeabi_dsub+0x784>
 8002428:	2701      	movs	r7, #1
 800242a:	2938      	cmp	r1, #56	@ 0x38
 800242c:	dc11      	bgt.n	8002452 <__aeabi_dsub+0x28e>
 800242e:	4663      	mov	r3, ip
 8002430:	2b1f      	cmp	r3, #31
 8002432:	dd00      	ble.n	8002436 <__aeabi_dsub+0x272>
 8002434:	e25b      	b.n	80028ee <__aeabi_dsub+0x72a>
 8002436:	4661      	mov	r1, ip
 8002438:	2320      	movs	r3, #32
 800243a:	0027      	movs	r7, r4
 800243c:	1a5b      	subs	r3, r3, r1
 800243e:	0005      	movs	r5, r0
 8002440:	4098      	lsls	r0, r3
 8002442:	409f      	lsls	r7, r3
 8002444:	40cd      	lsrs	r5, r1
 8002446:	1e43      	subs	r3, r0, #1
 8002448:	4198      	sbcs	r0, r3
 800244a:	40cc      	lsrs	r4, r1
 800244c:	432f      	orrs	r7, r5
 800244e:	4307      	orrs	r7, r0
 8002450:	44a3      	add	fp, r4
 8002452:	18bf      	adds	r7, r7, r2
 8002454:	4297      	cmp	r7, r2
 8002456:	4192      	sbcs	r2, r2
 8002458:	4252      	negs	r2, r2
 800245a:	445a      	add	r2, fp
 800245c:	0014      	movs	r4, r2
 800245e:	464d      	mov	r5, r9
 8002460:	e787      	b.n	8002372 <__aeabi_dsub+0x1ae>
 8002462:	4f34      	ldr	r7, [pc, #208]	@ (8002534 <__aeabi_dsub+0x370>)
 8002464:	1c6b      	adds	r3, r5, #1
 8002466:	423b      	tst	r3, r7
 8002468:	d000      	beq.n	800246c <__aeabi_dsub+0x2a8>
 800246a:	e0b6      	b.n	80025da <__aeabi_dsub+0x416>
 800246c:	4659      	mov	r1, fp
 800246e:	0023      	movs	r3, r4
 8002470:	4311      	orrs	r1, r2
 8002472:	000f      	movs	r7, r1
 8002474:	4303      	orrs	r3, r0
 8002476:	2d00      	cmp	r5, #0
 8002478:	d000      	beq.n	800247c <__aeabi_dsub+0x2b8>
 800247a:	e126      	b.n	80026ca <__aeabi_dsub+0x506>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d100      	bne.n	8002482 <__aeabi_dsub+0x2be>
 8002480:	e1c0      	b.n	8002804 <__aeabi_dsub+0x640>
 8002482:	2900      	cmp	r1, #0
 8002484:	d100      	bne.n	8002488 <__aeabi_dsub+0x2c4>
 8002486:	e0a1      	b.n	80025cc <__aeabi_dsub+0x408>
 8002488:	1a83      	subs	r3, r0, r2
 800248a:	4698      	mov	r8, r3
 800248c:	465b      	mov	r3, fp
 800248e:	4540      	cmp	r0, r8
 8002490:	41ad      	sbcs	r5, r5
 8002492:	1ae3      	subs	r3, r4, r3
 8002494:	426d      	negs	r5, r5
 8002496:	1b5b      	subs	r3, r3, r5
 8002498:	2580      	movs	r5, #128	@ 0x80
 800249a:	042d      	lsls	r5, r5, #16
 800249c:	422b      	tst	r3, r5
 800249e:	d100      	bne.n	80024a2 <__aeabi_dsub+0x2de>
 80024a0:	e14b      	b.n	800273a <__aeabi_dsub+0x576>
 80024a2:	465b      	mov	r3, fp
 80024a4:	1a10      	subs	r0, r2, r0
 80024a6:	4282      	cmp	r2, r0
 80024a8:	4192      	sbcs	r2, r2
 80024aa:	1b1c      	subs	r4, r3, r4
 80024ac:	0007      	movs	r7, r0
 80024ae:	2601      	movs	r6, #1
 80024b0:	4663      	mov	r3, ip
 80024b2:	4252      	negs	r2, r2
 80024b4:	1aa4      	subs	r4, r4, r2
 80024b6:	4327      	orrs	r7, r4
 80024b8:	401e      	ands	r6, r3
 80024ba:	2f00      	cmp	r7, #0
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x2fc>
 80024be:	e142      	b.n	8002746 <__aeabi_dsub+0x582>
 80024c0:	422c      	tst	r4, r5
 80024c2:	d100      	bne.n	80024c6 <__aeabi_dsub+0x302>
 80024c4:	e26d      	b.n	80029a2 <__aeabi_dsub+0x7de>
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <__aeabi_dsub+0x368>)
 80024c8:	2501      	movs	r5, #1
 80024ca:	401c      	ands	r4, r3
 80024cc:	e71b      	b.n	8002306 <__aeabi_dsub+0x142>
 80024ce:	42bd      	cmp	r5, r7
 80024d0:	d100      	bne.n	80024d4 <__aeabi_dsub+0x310>
 80024d2:	e13b      	b.n	800274c <__aeabi_dsub+0x588>
 80024d4:	2701      	movs	r7, #1
 80024d6:	2b38      	cmp	r3, #56	@ 0x38
 80024d8:	dd00      	ble.n	80024dc <__aeabi_dsub+0x318>
 80024da:	e745      	b.n	8002368 <__aeabi_dsub+0x1a4>
 80024dc:	2780      	movs	r7, #128	@ 0x80
 80024de:	4659      	mov	r1, fp
 80024e0:	043f      	lsls	r7, r7, #16
 80024e2:	4339      	orrs	r1, r7
 80024e4:	468b      	mov	fp, r1
 80024e6:	e72a      	b.n	800233e <__aeabi_dsub+0x17a>
 80024e8:	2400      	movs	r4, #0
 80024ea:	2700      	movs	r7, #0
 80024ec:	052d      	lsls	r5, r5, #20
 80024ee:	4325      	orrs	r5, r4
 80024f0:	07f6      	lsls	r6, r6, #31
 80024f2:	4335      	orrs	r5, r6
 80024f4:	0038      	movs	r0, r7
 80024f6:	0029      	movs	r1, r5
 80024f8:	b003      	add	sp, #12
 80024fa:	bcf0      	pop	{r4, r5, r6, r7}
 80024fc:	46bb      	mov	fp, r7
 80024fe:	46b2      	mov	sl, r6
 8002500:	46a9      	mov	r9, r5
 8002502:	46a0      	mov	r8, r4
 8002504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002506:	077b      	lsls	r3, r7, #29
 8002508:	d004      	beq.n	8002514 <__aeabi_dsub+0x350>
 800250a:	230f      	movs	r3, #15
 800250c:	403b      	ands	r3, r7
 800250e:	2b04      	cmp	r3, #4
 8002510:	d000      	beq.n	8002514 <__aeabi_dsub+0x350>
 8002512:	e6e7      	b.n	80022e4 <__aeabi_dsub+0x120>
 8002514:	002b      	movs	r3, r5
 8002516:	08f8      	lsrs	r0, r7, #3
 8002518:	4a03      	ldr	r2, [pc, #12]	@ (8002528 <__aeabi_dsub+0x364>)
 800251a:	0767      	lsls	r7, r4, #29
 800251c:	4307      	orrs	r7, r0
 800251e:	08e5      	lsrs	r5, r4, #3
 8002520:	4293      	cmp	r3, r2
 8002522:	d100      	bne.n	8002526 <__aeabi_dsub+0x362>
 8002524:	e74a      	b.n	80023bc <__aeabi_dsub+0x1f8>
 8002526:	e0a5      	b.n	8002674 <__aeabi_dsub+0x4b0>
 8002528:	000007ff 	.word	0x000007ff
 800252c:	ff7fffff 	.word	0xff7fffff
 8002530:	fffff801 	.word	0xfffff801
 8002534:	000007fe 	.word	0x000007fe
 8002538:	0038      	movs	r0, r7
 800253a:	f000 fb45 	bl	8002bc8 <__clzsi2>
 800253e:	0003      	movs	r3, r0
 8002540:	3318      	adds	r3, #24
 8002542:	2b1f      	cmp	r3, #31
 8002544:	dc00      	bgt.n	8002548 <__aeabi_dsub+0x384>
 8002546:	e6a7      	b.n	8002298 <__aeabi_dsub+0xd4>
 8002548:	003a      	movs	r2, r7
 800254a:	3808      	subs	r0, #8
 800254c:	4082      	lsls	r2, r0
 800254e:	429d      	cmp	r5, r3
 8002550:	dd00      	ble.n	8002554 <__aeabi_dsub+0x390>
 8002552:	e08a      	b.n	800266a <__aeabi_dsub+0x4a6>
 8002554:	1b5b      	subs	r3, r3, r5
 8002556:	1c58      	adds	r0, r3, #1
 8002558:	281f      	cmp	r0, #31
 800255a:	dc00      	bgt.n	800255e <__aeabi_dsub+0x39a>
 800255c:	e1d8      	b.n	8002910 <__aeabi_dsub+0x74c>
 800255e:	0017      	movs	r7, r2
 8002560:	3b1f      	subs	r3, #31
 8002562:	40df      	lsrs	r7, r3
 8002564:	2820      	cmp	r0, #32
 8002566:	d005      	beq.n	8002574 <__aeabi_dsub+0x3b0>
 8002568:	2340      	movs	r3, #64	@ 0x40
 800256a:	1a1b      	subs	r3, r3, r0
 800256c:	409a      	lsls	r2, r3
 800256e:	1e53      	subs	r3, r2, #1
 8002570:	419a      	sbcs	r2, r3
 8002572:	4317      	orrs	r7, r2
 8002574:	2500      	movs	r5, #0
 8002576:	2f00      	cmp	r7, #0
 8002578:	d100      	bne.n	800257c <__aeabi_dsub+0x3b8>
 800257a:	e0e5      	b.n	8002748 <__aeabi_dsub+0x584>
 800257c:	077b      	lsls	r3, r7, #29
 800257e:	d000      	beq.n	8002582 <__aeabi_dsub+0x3be>
 8002580:	e6ab      	b.n	80022da <__aeabi_dsub+0x116>
 8002582:	002c      	movs	r4, r5
 8002584:	e7c6      	b.n	8002514 <__aeabi_dsub+0x350>
 8002586:	08c0      	lsrs	r0, r0, #3
 8002588:	e7c6      	b.n	8002518 <__aeabi_dsub+0x354>
 800258a:	2700      	movs	r7, #0
 800258c:	2400      	movs	r4, #0
 800258e:	4dd1      	ldr	r5, [pc, #836]	@ (80028d4 <__aeabi_dsub+0x710>)
 8002590:	e7ac      	b.n	80024ec <__aeabi_dsub+0x328>
 8002592:	4fd1      	ldr	r7, [pc, #836]	@ (80028d8 <__aeabi_dsub+0x714>)
 8002594:	1c6b      	adds	r3, r5, #1
 8002596:	423b      	tst	r3, r7
 8002598:	d171      	bne.n	800267e <__aeabi_dsub+0x4ba>
 800259a:	0023      	movs	r3, r4
 800259c:	4303      	orrs	r3, r0
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d000      	beq.n	80025a4 <__aeabi_dsub+0x3e0>
 80025a2:	e14e      	b.n	8002842 <__aeabi_dsub+0x67e>
 80025a4:	4657      	mov	r7, sl
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x3e8>
 80025aa:	e1b5      	b.n	8002918 <__aeabi_dsub+0x754>
 80025ac:	2f00      	cmp	r7, #0
 80025ae:	d00d      	beq.n	80025cc <__aeabi_dsub+0x408>
 80025b0:	1883      	adds	r3, r0, r2
 80025b2:	4283      	cmp	r3, r0
 80025b4:	4180      	sbcs	r0, r0
 80025b6:	445c      	add	r4, fp
 80025b8:	4240      	negs	r0, r0
 80025ba:	1824      	adds	r4, r4, r0
 80025bc:	0222      	lsls	r2, r4, #8
 80025be:	d500      	bpl.n	80025c2 <__aeabi_dsub+0x3fe>
 80025c0:	e1c8      	b.n	8002954 <__aeabi_dsub+0x790>
 80025c2:	001f      	movs	r7, r3
 80025c4:	4698      	mov	r8, r3
 80025c6:	4327      	orrs	r7, r4
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x408>
 80025ca:	e0bc      	b.n	8002746 <__aeabi_dsub+0x582>
 80025cc:	4643      	mov	r3, r8
 80025ce:	0767      	lsls	r7, r4, #29
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	431f      	orrs	r7, r3
 80025d4:	08e5      	lsrs	r5, r4, #3
 80025d6:	2300      	movs	r3, #0
 80025d8:	e04c      	b.n	8002674 <__aeabi_dsub+0x4b0>
 80025da:	1a83      	subs	r3, r0, r2
 80025dc:	4698      	mov	r8, r3
 80025de:	465b      	mov	r3, fp
 80025e0:	4540      	cmp	r0, r8
 80025e2:	41bf      	sbcs	r7, r7
 80025e4:	1ae3      	subs	r3, r4, r3
 80025e6:	427f      	negs	r7, r7
 80025e8:	1bdb      	subs	r3, r3, r7
 80025ea:	021f      	lsls	r7, r3, #8
 80025ec:	d47c      	bmi.n	80026e8 <__aeabi_dsub+0x524>
 80025ee:	4647      	mov	r7, r8
 80025f0:	431f      	orrs	r7, r3
 80025f2:	d100      	bne.n	80025f6 <__aeabi_dsub+0x432>
 80025f4:	e0a6      	b.n	8002744 <__aeabi_dsub+0x580>
 80025f6:	001c      	movs	r4, r3
 80025f8:	4647      	mov	r7, r8
 80025fa:	e645      	b.n	8002288 <__aeabi_dsub+0xc4>
 80025fc:	4cb7      	ldr	r4, [pc, #732]	@ (80028dc <__aeabi_dsub+0x718>)
 80025fe:	1aed      	subs	r5, r5, r3
 8002600:	4014      	ands	r4, r2
 8002602:	077b      	lsls	r3, r7, #29
 8002604:	d000      	beq.n	8002608 <__aeabi_dsub+0x444>
 8002606:	e780      	b.n	800250a <__aeabi_dsub+0x346>
 8002608:	e784      	b.n	8002514 <__aeabi_dsub+0x350>
 800260a:	464b      	mov	r3, r9
 800260c:	0025      	movs	r5, r4
 800260e:	4305      	orrs	r5, r0
 8002610:	d066      	beq.n	80026e0 <__aeabi_dsub+0x51c>
 8002612:	1e5f      	subs	r7, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d100      	bne.n	800261a <__aeabi_dsub+0x456>
 8002618:	e0fc      	b.n	8002814 <__aeabi_dsub+0x650>
 800261a:	4dae      	ldr	r5, [pc, #696]	@ (80028d4 <__aeabi_dsub+0x710>)
 800261c:	42ab      	cmp	r3, r5
 800261e:	d100      	bne.n	8002622 <__aeabi_dsub+0x45e>
 8002620:	e15e      	b.n	80028e0 <__aeabi_dsub+0x71c>
 8002622:	4666      	mov	r6, ip
 8002624:	2f38      	cmp	r7, #56	@ 0x38
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x466>
 8002628:	e0b4      	b.n	8002794 <__aeabi_dsub+0x5d0>
 800262a:	2001      	movs	r0, #1
 800262c:	1a17      	subs	r7, r2, r0
 800262e:	42ba      	cmp	r2, r7
 8002630:	4192      	sbcs	r2, r2
 8002632:	465b      	mov	r3, fp
 8002634:	4252      	negs	r2, r2
 8002636:	464d      	mov	r5, r9
 8002638:	1a9c      	subs	r4, r3, r2
 800263a:	e620      	b.n	800227e <__aeabi_dsub+0xba>
 800263c:	0767      	lsls	r7, r4, #29
 800263e:	08c0      	lsrs	r0, r0, #3
 8002640:	4307      	orrs	r7, r0
 8002642:	08e5      	lsrs	r5, r4, #3
 8002644:	e6ba      	b.n	80023bc <__aeabi_dsub+0x1f8>
 8002646:	001f      	movs	r7, r3
 8002648:	4659      	mov	r1, fp
 800264a:	3f20      	subs	r7, #32
 800264c:	40f9      	lsrs	r1, r7
 800264e:	000f      	movs	r7, r1
 8002650:	2b20      	cmp	r3, #32
 8002652:	d005      	beq.n	8002660 <__aeabi_dsub+0x49c>
 8002654:	2140      	movs	r1, #64	@ 0x40
 8002656:	1acb      	subs	r3, r1, r3
 8002658:	4659      	mov	r1, fp
 800265a:	4099      	lsls	r1, r3
 800265c:	430a      	orrs	r2, r1
 800265e:	4692      	mov	sl, r2
 8002660:	4653      	mov	r3, sl
 8002662:	1e5a      	subs	r2, r3, #1
 8002664:	4193      	sbcs	r3, r2
 8002666:	431f      	orrs	r7, r3
 8002668:	e604      	b.n	8002274 <__aeabi_dsub+0xb0>
 800266a:	1aeb      	subs	r3, r5, r3
 800266c:	4d9b      	ldr	r5, [pc, #620]	@ (80028dc <__aeabi_dsub+0x718>)
 800266e:	4015      	ands	r5, r2
 8002670:	076f      	lsls	r7, r5, #29
 8002672:	08ed      	lsrs	r5, r5, #3
 8002674:	032c      	lsls	r4, r5, #12
 8002676:	055d      	lsls	r5, r3, #21
 8002678:	0b24      	lsrs	r4, r4, #12
 800267a:	0d6d      	lsrs	r5, r5, #21
 800267c:	e736      	b.n	80024ec <__aeabi_dsub+0x328>
 800267e:	4d95      	ldr	r5, [pc, #596]	@ (80028d4 <__aeabi_dsub+0x710>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x4c2>
 8002684:	e0d6      	b.n	8002834 <__aeabi_dsub+0x670>
 8002686:	1882      	adds	r2, r0, r2
 8002688:	0021      	movs	r1, r4
 800268a:	4282      	cmp	r2, r0
 800268c:	4180      	sbcs	r0, r0
 800268e:	4459      	add	r1, fp
 8002690:	4240      	negs	r0, r0
 8002692:	1808      	adds	r0, r1, r0
 8002694:	07c7      	lsls	r7, r0, #31
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	4317      	orrs	r7, r2
 800269a:	0844      	lsrs	r4, r0, #1
 800269c:	0752      	lsls	r2, r2, #29
 800269e:	d400      	bmi.n	80026a2 <__aeabi_dsub+0x4de>
 80026a0:	e185      	b.n	80029ae <__aeabi_dsub+0x7ea>
 80026a2:	220f      	movs	r2, #15
 80026a4:	001d      	movs	r5, r3
 80026a6:	403a      	ands	r2, r7
 80026a8:	2a04      	cmp	r2, #4
 80026aa:	d000      	beq.n	80026ae <__aeabi_dsub+0x4ea>
 80026ac:	e61a      	b.n	80022e4 <__aeabi_dsub+0x120>
 80026ae:	08ff      	lsrs	r7, r7, #3
 80026b0:	0764      	lsls	r4, r4, #29
 80026b2:	4327      	orrs	r7, r4
 80026b4:	0905      	lsrs	r5, r0, #4
 80026b6:	e7dd      	b.n	8002674 <__aeabi_dsub+0x4b0>
 80026b8:	465b      	mov	r3, fp
 80026ba:	08d2      	lsrs	r2, r2, #3
 80026bc:	075f      	lsls	r7, r3, #29
 80026be:	4317      	orrs	r7, r2
 80026c0:	08dd      	lsrs	r5, r3, #3
 80026c2:	e67b      	b.n	80023bc <__aeabi_dsub+0x1f8>
 80026c4:	2700      	movs	r7, #0
 80026c6:	2400      	movs	r4, #0
 80026c8:	e710      	b.n	80024ec <__aeabi_dsub+0x328>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d000      	beq.n	80026d0 <__aeabi_dsub+0x50c>
 80026ce:	e0d6      	b.n	800287e <__aeabi_dsub+0x6ba>
 80026d0:	2900      	cmp	r1, #0
 80026d2:	d000      	beq.n	80026d6 <__aeabi_dsub+0x512>
 80026d4:	e12f      	b.n	8002936 <__aeabi_dsub+0x772>
 80026d6:	2480      	movs	r4, #128	@ 0x80
 80026d8:	2600      	movs	r6, #0
 80026da:	4d7e      	ldr	r5, [pc, #504]	@ (80028d4 <__aeabi_dsub+0x710>)
 80026dc:	0324      	lsls	r4, r4, #12
 80026de:	e705      	b.n	80024ec <__aeabi_dsub+0x328>
 80026e0:	4666      	mov	r6, ip
 80026e2:	465c      	mov	r4, fp
 80026e4:	08d0      	lsrs	r0, r2, #3
 80026e6:	e717      	b.n	8002518 <__aeabi_dsub+0x354>
 80026e8:	465b      	mov	r3, fp
 80026ea:	1a17      	subs	r7, r2, r0
 80026ec:	42ba      	cmp	r2, r7
 80026ee:	4192      	sbcs	r2, r2
 80026f0:	1b1c      	subs	r4, r3, r4
 80026f2:	2601      	movs	r6, #1
 80026f4:	4663      	mov	r3, ip
 80026f6:	4252      	negs	r2, r2
 80026f8:	1aa4      	subs	r4, r4, r2
 80026fa:	401e      	ands	r6, r3
 80026fc:	e5c4      	b.n	8002288 <__aeabi_dsub+0xc4>
 80026fe:	1883      	adds	r3, r0, r2
 8002700:	4283      	cmp	r3, r0
 8002702:	4180      	sbcs	r0, r0
 8002704:	445c      	add	r4, fp
 8002706:	4240      	negs	r0, r0
 8002708:	1825      	adds	r5, r4, r0
 800270a:	022a      	lsls	r2, r5, #8
 800270c:	d400      	bmi.n	8002710 <__aeabi_dsub+0x54c>
 800270e:	e0da      	b.n	80028c6 <__aeabi_dsub+0x702>
 8002710:	4a72      	ldr	r2, [pc, #456]	@ (80028dc <__aeabi_dsub+0x718>)
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	4015      	ands	r5, r2
 8002716:	07ea      	lsls	r2, r5, #31
 8002718:	431a      	orrs	r2, r3
 800271a:	0869      	lsrs	r1, r5, #1
 800271c:	075b      	lsls	r3, r3, #29
 800271e:	d400      	bmi.n	8002722 <__aeabi_dsub+0x55e>
 8002720:	e14a      	b.n	80029b8 <__aeabi_dsub+0x7f4>
 8002722:	230f      	movs	r3, #15
 8002724:	4013      	ands	r3, r2
 8002726:	2b04      	cmp	r3, #4
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x568>
 800272a:	e0fc      	b.n	8002926 <__aeabi_dsub+0x762>
 800272c:	1d17      	adds	r7, r2, #4
 800272e:	4297      	cmp	r7, r2
 8002730:	41a4      	sbcs	r4, r4
 8002732:	4264      	negs	r4, r4
 8002734:	2502      	movs	r5, #2
 8002736:	1864      	adds	r4, r4, r1
 8002738:	e6ec      	b.n	8002514 <__aeabi_dsub+0x350>
 800273a:	4647      	mov	r7, r8
 800273c:	001c      	movs	r4, r3
 800273e:	431f      	orrs	r7, r3
 8002740:	d000      	beq.n	8002744 <__aeabi_dsub+0x580>
 8002742:	e743      	b.n	80025cc <__aeabi_dsub+0x408>
 8002744:	2600      	movs	r6, #0
 8002746:	2500      	movs	r5, #0
 8002748:	2400      	movs	r4, #0
 800274a:	e6cf      	b.n	80024ec <__aeabi_dsub+0x328>
 800274c:	08c0      	lsrs	r0, r0, #3
 800274e:	0767      	lsls	r7, r4, #29
 8002750:	4307      	orrs	r7, r0
 8002752:	08e5      	lsrs	r5, r4, #3
 8002754:	e632      	b.n	80023bc <__aeabi_dsub+0x1f8>
 8002756:	1a87      	subs	r7, r0, r2
 8002758:	465b      	mov	r3, fp
 800275a:	42b8      	cmp	r0, r7
 800275c:	4180      	sbcs	r0, r0
 800275e:	1ae4      	subs	r4, r4, r3
 8002760:	4240      	negs	r0, r0
 8002762:	1a24      	subs	r4, r4, r0
 8002764:	0223      	lsls	r3, r4, #8
 8002766:	d428      	bmi.n	80027ba <__aeabi_dsub+0x5f6>
 8002768:	0763      	lsls	r3, r4, #29
 800276a:	08ff      	lsrs	r7, r7, #3
 800276c:	431f      	orrs	r7, r3
 800276e:	08e5      	lsrs	r5, r4, #3
 8002770:	2301      	movs	r3, #1
 8002772:	e77f      	b.n	8002674 <__aeabi_dsub+0x4b0>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <__aeabi_dsub+0x5b6>
 8002778:	e673      	b.n	8002462 <__aeabi_dsub+0x29e>
 800277a:	464b      	mov	r3, r9
 800277c:	1b5f      	subs	r7, r3, r5
 800277e:	003b      	movs	r3, r7
 8002780:	2d00      	cmp	r5, #0
 8002782:	d100      	bne.n	8002786 <__aeabi_dsub+0x5c2>
 8002784:	e742      	b.n	800260c <__aeabi_dsub+0x448>
 8002786:	2f38      	cmp	r7, #56	@ 0x38
 8002788:	dd00      	ble.n	800278c <__aeabi_dsub+0x5c8>
 800278a:	e0ec      	b.n	8002966 <__aeabi_dsub+0x7a2>
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	000e      	movs	r6, r1
 8002790:	041b      	lsls	r3, r3, #16
 8002792:	431c      	orrs	r4, r3
 8002794:	2f1f      	cmp	r7, #31
 8002796:	dc25      	bgt.n	80027e4 <__aeabi_dsub+0x620>
 8002798:	2520      	movs	r5, #32
 800279a:	0023      	movs	r3, r4
 800279c:	1bed      	subs	r5, r5, r7
 800279e:	0001      	movs	r1, r0
 80027a0:	40a8      	lsls	r0, r5
 80027a2:	40ab      	lsls	r3, r5
 80027a4:	40f9      	lsrs	r1, r7
 80027a6:	1e45      	subs	r5, r0, #1
 80027a8:	41a8      	sbcs	r0, r5
 80027aa:	430b      	orrs	r3, r1
 80027ac:	40fc      	lsrs	r4, r7
 80027ae:	4318      	orrs	r0, r3
 80027b0:	465b      	mov	r3, fp
 80027b2:	1b1b      	subs	r3, r3, r4
 80027b4:	469b      	mov	fp, r3
 80027b6:	e739      	b.n	800262c <__aeabi_dsub+0x468>
 80027b8:	4666      	mov	r6, ip
 80027ba:	2501      	movs	r5, #1
 80027bc:	e562      	b.n	8002284 <__aeabi_dsub+0xc0>
 80027be:	001f      	movs	r7, r3
 80027c0:	4659      	mov	r1, fp
 80027c2:	3f20      	subs	r7, #32
 80027c4:	40f9      	lsrs	r1, r7
 80027c6:	468c      	mov	ip, r1
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d005      	beq.n	80027d8 <__aeabi_dsub+0x614>
 80027cc:	2740      	movs	r7, #64	@ 0x40
 80027ce:	4659      	mov	r1, fp
 80027d0:	1afb      	subs	r3, r7, r3
 80027d2:	4099      	lsls	r1, r3
 80027d4:	430a      	orrs	r2, r1
 80027d6:	4692      	mov	sl, r2
 80027d8:	4657      	mov	r7, sl
 80027da:	1e7b      	subs	r3, r7, #1
 80027dc:	419f      	sbcs	r7, r3
 80027de:	4663      	mov	r3, ip
 80027e0:	431f      	orrs	r7, r3
 80027e2:	e5c1      	b.n	8002368 <__aeabi_dsub+0x1a4>
 80027e4:	003b      	movs	r3, r7
 80027e6:	0025      	movs	r5, r4
 80027e8:	3b20      	subs	r3, #32
 80027ea:	40dd      	lsrs	r5, r3
 80027ec:	2f20      	cmp	r7, #32
 80027ee:	d004      	beq.n	80027fa <__aeabi_dsub+0x636>
 80027f0:	2340      	movs	r3, #64	@ 0x40
 80027f2:	1bdb      	subs	r3, r3, r7
 80027f4:	409c      	lsls	r4, r3
 80027f6:	4320      	orrs	r0, r4
 80027f8:	4680      	mov	r8, r0
 80027fa:	4640      	mov	r0, r8
 80027fc:	1e43      	subs	r3, r0, #1
 80027fe:	4198      	sbcs	r0, r3
 8002800:	4328      	orrs	r0, r5
 8002802:	e713      	b.n	800262c <__aeabi_dsub+0x468>
 8002804:	2900      	cmp	r1, #0
 8002806:	d09d      	beq.n	8002744 <__aeabi_dsub+0x580>
 8002808:	2601      	movs	r6, #1
 800280a:	4663      	mov	r3, ip
 800280c:	465c      	mov	r4, fp
 800280e:	4690      	mov	r8, r2
 8002810:	401e      	ands	r6, r3
 8002812:	e6db      	b.n	80025cc <__aeabi_dsub+0x408>
 8002814:	1a17      	subs	r7, r2, r0
 8002816:	465b      	mov	r3, fp
 8002818:	42ba      	cmp	r2, r7
 800281a:	4192      	sbcs	r2, r2
 800281c:	1b1c      	subs	r4, r3, r4
 800281e:	4252      	negs	r2, r2
 8002820:	1aa4      	subs	r4, r4, r2
 8002822:	0223      	lsls	r3, r4, #8
 8002824:	d4c8      	bmi.n	80027b8 <__aeabi_dsub+0x5f4>
 8002826:	0763      	lsls	r3, r4, #29
 8002828:	08ff      	lsrs	r7, r7, #3
 800282a:	431f      	orrs	r7, r3
 800282c:	4666      	mov	r6, ip
 800282e:	2301      	movs	r3, #1
 8002830:	08e5      	lsrs	r5, r4, #3
 8002832:	e71f      	b.n	8002674 <__aeabi_dsub+0x4b0>
 8002834:	001d      	movs	r5, r3
 8002836:	2400      	movs	r4, #0
 8002838:	2700      	movs	r7, #0
 800283a:	e657      	b.n	80024ec <__aeabi_dsub+0x328>
 800283c:	465c      	mov	r4, fp
 800283e:	08d0      	lsrs	r0, r2, #3
 8002840:	e66a      	b.n	8002518 <__aeabi_dsub+0x354>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d100      	bne.n	8002848 <__aeabi_dsub+0x684>
 8002846:	e737      	b.n	80026b8 <__aeabi_dsub+0x4f4>
 8002848:	4653      	mov	r3, sl
 800284a:	08c0      	lsrs	r0, r0, #3
 800284c:	0767      	lsls	r7, r4, #29
 800284e:	4307      	orrs	r7, r0
 8002850:	08e5      	lsrs	r5, r4, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x694>
 8002856:	e5b1      	b.n	80023bc <__aeabi_dsub+0x1f8>
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	031b      	lsls	r3, r3, #12
 800285c:	421d      	tst	r5, r3
 800285e:	d008      	beq.n	8002872 <__aeabi_dsub+0x6ae>
 8002860:	4659      	mov	r1, fp
 8002862:	08c8      	lsrs	r0, r1, #3
 8002864:	4218      	tst	r0, r3
 8002866:	d104      	bne.n	8002872 <__aeabi_dsub+0x6ae>
 8002868:	08d2      	lsrs	r2, r2, #3
 800286a:	0749      	lsls	r1, r1, #29
 800286c:	430a      	orrs	r2, r1
 800286e:	0017      	movs	r7, r2
 8002870:	0005      	movs	r5, r0
 8002872:	0f7b      	lsrs	r3, r7, #29
 8002874:	00ff      	lsls	r7, r7, #3
 8002876:	08ff      	lsrs	r7, r7, #3
 8002878:	075b      	lsls	r3, r3, #29
 800287a:	431f      	orrs	r7, r3
 800287c:	e59e      	b.n	80023bc <__aeabi_dsub+0x1f8>
 800287e:	08c0      	lsrs	r0, r0, #3
 8002880:	0763      	lsls	r3, r4, #29
 8002882:	4318      	orrs	r0, r3
 8002884:	08e5      	lsrs	r5, r4, #3
 8002886:	2900      	cmp	r1, #0
 8002888:	d053      	beq.n	8002932 <__aeabi_dsub+0x76e>
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	421d      	tst	r5, r3
 8002890:	d00a      	beq.n	80028a8 <__aeabi_dsub+0x6e4>
 8002892:	4659      	mov	r1, fp
 8002894:	08cc      	lsrs	r4, r1, #3
 8002896:	421c      	tst	r4, r3
 8002898:	d106      	bne.n	80028a8 <__aeabi_dsub+0x6e4>
 800289a:	2601      	movs	r6, #1
 800289c:	4663      	mov	r3, ip
 800289e:	0025      	movs	r5, r4
 80028a0:	08d0      	lsrs	r0, r2, #3
 80028a2:	0749      	lsls	r1, r1, #29
 80028a4:	4308      	orrs	r0, r1
 80028a6:	401e      	ands	r6, r3
 80028a8:	0f47      	lsrs	r7, r0, #29
 80028aa:	00c0      	lsls	r0, r0, #3
 80028ac:	08c0      	lsrs	r0, r0, #3
 80028ae:	077f      	lsls	r7, r7, #29
 80028b0:	4307      	orrs	r7, r0
 80028b2:	e583      	b.n	80023bc <__aeabi_dsub+0x1f8>
 80028b4:	1883      	adds	r3, r0, r2
 80028b6:	4293      	cmp	r3, r2
 80028b8:	4192      	sbcs	r2, r2
 80028ba:	445c      	add	r4, fp
 80028bc:	4252      	negs	r2, r2
 80028be:	18a5      	adds	r5, r4, r2
 80028c0:	022a      	lsls	r2, r5, #8
 80028c2:	d500      	bpl.n	80028c6 <__aeabi_dsub+0x702>
 80028c4:	e724      	b.n	8002710 <__aeabi_dsub+0x54c>
 80028c6:	076f      	lsls	r7, r5, #29
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	431f      	orrs	r7, r3
 80028cc:	08ed      	lsrs	r5, r5, #3
 80028ce:	2301      	movs	r3, #1
 80028d0:	e6d0      	b.n	8002674 <__aeabi_dsub+0x4b0>
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	000007ff 	.word	0x000007ff
 80028d8:	000007fe 	.word	0x000007fe
 80028dc:	ff7fffff 	.word	0xff7fffff
 80028e0:	465b      	mov	r3, fp
 80028e2:	08d2      	lsrs	r2, r2, #3
 80028e4:	075f      	lsls	r7, r3, #29
 80028e6:	4666      	mov	r6, ip
 80028e8:	4317      	orrs	r7, r2
 80028ea:	08dd      	lsrs	r5, r3, #3
 80028ec:	e566      	b.n	80023bc <__aeabi_dsub+0x1f8>
 80028ee:	0025      	movs	r5, r4
 80028f0:	3b20      	subs	r3, #32
 80028f2:	40dd      	lsrs	r5, r3
 80028f4:	4663      	mov	r3, ip
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d005      	beq.n	8002906 <__aeabi_dsub+0x742>
 80028fa:	2340      	movs	r3, #64	@ 0x40
 80028fc:	4661      	mov	r1, ip
 80028fe:	1a5b      	subs	r3, r3, r1
 8002900:	409c      	lsls	r4, r3
 8002902:	4320      	orrs	r0, r4
 8002904:	4680      	mov	r8, r0
 8002906:	4647      	mov	r7, r8
 8002908:	1e7b      	subs	r3, r7, #1
 800290a:	419f      	sbcs	r7, r3
 800290c:	432f      	orrs	r7, r5
 800290e:	e5a0      	b.n	8002452 <__aeabi_dsub+0x28e>
 8002910:	2120      	movs	r1, #32
 8002912:	2700      	movs	r7, #0
 8002914:	1a09      	subs	r1, r1, r0
 8002916:	e4d2      	b.n	80022be <__aeabi_dsub+0xfa>
 8002918:	2f00      	cmp	r7, #0
 800291a:	d100      	bne.n	800291e <__aeabi_dsub+0x75a>
 800291c:	e713      	b.n	8002746 <__aeabi_dsub+0x582>
 800291e:	465c      	mov	r4, fp
 8002920:	0017      	movs	r7, r2
 8002922:	2500      	movs	r5, #0
 8002924:	e5f6      	b.n	8002514 <__aeabi_dsub+0x350>
 8002926:	08d7      	lsrs	r7, r2, #3
 8002928:	0749      	lsls	r1, r1, #29
 800292a:	2302      	movs	r3, #2
 800292c:	430f      	orrs	r7, r1
 800292e:	092d      	lsrs	r5, r5, #4
 8002930:	e6a0      	b.n	8002674 <__aeabi_dsub+0x4b0>
 8002932:	0007      	movs	r7, r0
 8002934:	e542      	b.n	80023bc <__aeabi_dsub+0x1f8>
 8002936:	465b      	mov	r3, fp
 8002938:	2601      	movs	r6, #1
 800293a:	075f      	lsls	r7, r3, #29
 800293c:	08dd      	lsrs	r5, r3, #3
 800293e:	4663      	mov	r3, ip
 8002940:	08d2      	lsrs	r2, r2, #3
 8002942:	4317      	orrs	r7, r2
 8002944:	401e      	ands	r6, r3
 8002946:	e539      	b.n	80023bc <__aeabi_dsub+0x1f8>
 8002948:	465b      	mov	r3, fp
 800294a:	08d2      	lsrs	r2, r2, #3
 800294c:	075f      	lsls	r7, r3, #29
 800294e:	4317      	orrs	r7, r2
 8002950:	08dd      	lsrs	r5, r3, #3
 8002952:	e533      	b.n	80023bc <__aeabi_dsub+0x1f8>
 8002954:	4a1e      	ldr	r2, [pc, #120]	@ (80029d0 <__aeabi_dsub+0x80c>)
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	4022      	ands	r2, r4
 800295a:	0757      	lsls	r7, r2, #29
 800295c:	0252      	lsls	r2, r2, #9
 800295e:	2501      	movs	r5, #1
 8002960:	431f      	orrs	r7, r3
 8002962:	0b14      	lsrs	r4, r2, #12
 8002964:	e5c2      	b.n	80024ec <__aeabi_dsub+0x328>
 8002966:	000e      	movs	r6, r1
 8002968:	2001      	movs	r0, #1
 800296a:	e65f      	b.n	800262c <__aeabi_dsub+0x468>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00d      	beq.n	800298c <__aeabi_dsub+0x7c8>
 8002970:	464b      	mov	r3, r9
 8002972:	1b5b      	subs	r3, r3, r5
 8002974:	469c      	mov	ip, r3
 8002976:	2d00      	cmp	r5, #0
 8002978:	d100      	bne.n	800297c <__aeabi_dsub+0x7b8>
 800297a:	e548      	b.n	800240e <__aeabi_dsub+0x24a>
 800297c:	2701      	movs	r7, #1
 800297e:	2b38      	cmp	r3, #56	@ 0x38
 8002980:	dd00      	ble.n	8002984 <__aeabi_dsub+0x7c0>
 8002982:	e566      	b.n	8002452 <__aeabi_dsub+0x28e>
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	041b      	lsls	r3, r3, #16
 8002988:	431c      	orrs	r4, r3
 800298a:	e550      	b.n	800242e <__aeabi_dsub+0x26a>
 800298c:	1c6b      	adds	r3, r5, #1
 800298e:	4d11      	ldr	r5, [pc, #68]	@ (80029d4 <__aeabi_dsub+0x810>)
 8002990:	422b      	tst	r3, r5
 8002992:	d000      	beq.n	8002996 <__aeabi_dsub+0x7d2>
 8002994:	e673      	b.n	800267e <__aeabi_dsub+0x4ba>
 8002996:	4659      	mov	r1, fp
 8002998:	0023      	movs	r3, r4
 800299a:	4311      	orrs	r1, r2
 800299c:	468a      	mov	sl, r1
 800299e:	4303      	orrs	r3, r0
 80029a0:	e600      	b.n	80025a4 <__aeabi_dsub+0x3e0>
 80029a2:	0767      	lsls	r7, r4, #29
 80029a4:	08c0      	lsrs	r0, r0, #3
 80029a6:	2300      	movs	r3, #0
 80029a8:	4307      	orrs	r7, r0
 80029aa:	08e5      	lsrs	r5, r4, #3
 80029ac:	e662      	b.n	8002674 <__aeabi_dsub+0x4b0>
 80029ae:	0764      	lsls	r4, r4, #29
 80029b0:	08ff      	lsrs	r7, r7, #3
 80029b2:	4327      	orrs	r7, r4
 80029b4:	0905      	lsrs	r5, r0, #4
 80029b6:	e65d      	b.n	8002674 <__aeabi_dsub+0x4b0>
 80029b8:	08d2      	lsrs	r2, r2, #3
 80029ba:	0749      	lsls	r1, r1, #29
 80029bc:	4311      	orrs	r1, r2
 80029be:	000f      	movs	r7, r1
 80029c0:	2302      	movs	r3, #2
 80029c2:	092d      	lsrs	r5, r5, #4
 80029c4:	e656      	b.n	8002674 <__aeabi_dsub+0x4b0>
 80029c6:	0007      	movs	r7, r0
 80029c8:	e5a4      	b.n	8002514 <__aeabi_dsub+0x350>
 80029ca:	0038      	movs	r0, r7
 80029cc:	e48f      	b.n	80022ee <__aeabi_dsub+0x12a>
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	ff7fffff 	.word	0xff7fffff
 80029d4:	000007fe 	.word	0x000007fe

080029d8 <__aeabi_dcmpun>:
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029da:	46c6      	mov	lr, r8
 80029dc:	031e      	lsls	r6, r3, #12
 80029de:	0b36      	lsrs	r6, r6, #12
 80029e0:	46b0      	mov	r8, r6
 80029e2:	4e0d      	ldr	r6, [pc, #52]	@ (8002a18 <__aeabi_dcmpun+0x40>)
 80029e4:	030c      	lsls	r4, r1, #12
 80029e6:	004d      	lsls	r5, r1, #1
 80029e8:	005f      	lsls	r7, r3, #1
 80029ea:	b500      	push	{lr}
 80029ec:	0b24      	lsrs	r4, r4, #12
 80029ee:	0d6d      	lsrs	r5, r5, #21
 80029f0:	0d7f      	lsrs	r7, r7, #21
 80029f2:	42b5      	cmp	r5, r6
 80029f4:	d00b      	beq.n	8002a0e <__aeabi_dcmpun+0x36>
 80029f6:	4908      	ldr	r1, [pc, #32]	@ (8002a18 <__aeabi_dcmpun+0x40>)
 80029f8:	2000      	movs	r0, #0
 80029fa:	428f      	cmp	r7, r1
 80029fc:	d104      	bne.n	8002a08 <__aeabi_dcmpun+0x30>
 80029fe:	4646      	mov	r6, r8
 8002a00:	4316      	orrs	r6, r2
 8002a02:	0030      	movs	r0, r6
 8002a04:	1e43      	subs	r3, r0, #1
 8002a06:	4198      	sbcs	r0, r3
 8002a08:	bc80      	pop	{r7}
 8002a0a:	46b8      	mov	r8, r7
 8002a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0e:	4304      	orrs	r4, r0
 8002a10:	2001      	movs	r0, #1
 8002a12:	2c00      	cmp	r4, #0
 8002a14:	d1f8      	bne.n	8002a08 <__aeabi_dcmpun+0x30>
 8002a16:	e7ee      	b.n	80029f6 <__aeabi_dcmpun+0x1e>
 8002a18:	000007ff 	.word	0x000007ff

08002a1c <__aeabi_d2iz>:
 8002a1c:	000b      	movs	r3, r1
 8002a1e:	0002      	movs	r2, r0
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4d16      	ldr	r5, [pc, #88]	@ (8002a7c <__aeabi_d2iz+0x60>)
 8002a24:	030c      	lsls	r4, r1, #12
 8002a26:	b082      	sub	sp, #8
 8002a28:	0049      	lsls	r1, r1, #1
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	9200      	str	r2, [sp, #0]
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	0b24      	lsrs	r4, r4, #12
 8002a32:	0d49      	lsrs	r1, r1, #21
 8002a34:	0fde      	lsrs	r6, r3, #31
 8002a36:	42a9      	cmp	r1, r5
 8002a38:	dd04      	ble.n	8002a44 <__aeabi_d2iz+0x28>
 8002a3a:	4811      	ldr	r0, [pc, #68]	@ (8002a80 <__aeabi_d2iz+0x64>)
 8002a3c:	4281      	cmp	r1, r0
 8002a3e:	dd03      	ble.n	8002a48 <__aeabi_d2iz+0x2c>
 8002a40:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <__aeabi_d2iz+0x68>)
 8002a42:	18f0      	adds	r0, r6, r3
 8002a44:	b002      	add	sp, #8
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
 8002a48:	2080      	movs	r0, #128	@ 0x80
 8002a4a:	0340      	lsls	r0, r0, #13
 8002a4c:	4320      	orrs	r0, r4
 8002a4e:	4c0e      	ldr	r4, [pc, #56]	@ (8002a88 <__aeabi_d2iz+0x6c>)
 8002a50:	1a64      	subs	r4, r4, r1
 8002a52:	2c1f      	cmp	r4, #31
 8002a54:	dd08      	ble.n	8002a68 <__aeabi_d2iz+0x4c>
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <__aeabi_d2iz+0x70>)
 8002a58:	1a5b      	subs	r3, r3, r1
 8002a5a:	40d8      	lsrs	r0, r3
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	4258      	negs	r0, r3
 8002a60:	2e00      	cmp	r6, #0
 8002a62:	d1ef      	bne.n	8002a44 <__aeabi_d2iz+0x28>
 8002a64:	0018      	movs	r0, r3
 8002a66:	e7ed      	b.n	8002a44 <__aeabi_d2iz+0x28>
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <__aeabi_d2iz+0x74>)
 8002a6a:	9a00      	ldr	r2, [sp, #0]
 8002a6c:	469c      	mov	ip, r3
 8002a6e:	0003      	movs	r3, r0
 8002a70:	4461      	add	r1, ip
 8002a72:	408b      	lsls	r3, r1
 8002a74:	40e2      	lsrs	r2, r4
 8002a76:	4313      	orrs	r3, r2
 8002a78:	e7f1      	b.n	8002a5e <__aeabi_d2iz+0x42>
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	000003fe 	.word	0x000003fe
 8002a80:	0000041d 	.word	0x0000041d
 8002a84:	7fffffff 	.word	0x7fffffff
 8002a88:	00000433 	.word	0x00000433
 8002a8c:	00000413 	.word	0x00000413
 8002a90:	fffffbed 	.word	0xfffffbed

08002a94 <__aeabi_i2d>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d016      	beq.n	8002ac8 <__aeabi_i2d+0x34>
 8002a9a:	17c3      	asrs	r3, r0, #31
 8002a9c:	18c5      	adds	r5, r0, r3
 8002a9e:	405d      	eors	r5, r3
 8002aa0:	0fc4      	lsrs	r4, r0, #31
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	f000 f890 	bl	8002bc8 <__clzsi2>
 8002aa8:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <__aeabi_i2d+0x58>)
 8002aaa:	1a1b      	subs	r3, r3, r0
 8002aac:	055b      	lsls	r3, r3, #21
 8002aae:	0d5b      	lsrs	r3, r3, #21
 8002ab0:	280a      	cmp	r0, #10
 8002ab2:	dc14      	bgt.n	8002ade <__aeabi_i2d+0x4a>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	002e      	movs	r6, r5
 8002ab8:	3215      	adds	r2, #21
 8002aba:	4096      	lsls	r6, r2
 8002abc:	220b      	movs	r2, #11
 8002abe:	1a12      	subs	r2, r2, r0
 8002ac0:	40d5      	lsrs	r5, r2
 8002ac2:	032d      	lsls	r5, r5, #12
 8002ac4:	0b2d      	lsrs	r5, r5, #12
 8002ac6:	e003      	b.n	8002ad0 <__aeabi_i2d+0x3c>
 8002ac8:	2400      	movs	r4, #0
 8002aca:	2300      	movs	r3, #0
 8002acc:	2500      	movs	r5, #0
 8002ace:	2600      	movs	r6, #0
 8002ad0:	051b      	lsls	r3, r3, #20
 8002ad2:	432b      	orrs	r3, r5
 8002ad4:	07e4      	lsls	r4, r4, #31
 8002ad6:	4323      	orrs	r3, r4
 8002ad8:	0030      	movs	r0, r6
 8002ada:	0019      	movs	r1, r3
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	380b      	subs	r0, #11
 8002ae0:	4085      	lsls	r5, r0
 8002ae2:	032d      	lsls	r5, r5, #12
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	0b2d      	lsrs	r5, r5, #12
 8002ae8:	e7f2      	b.n	8002ad0 <__aeabi_i2d+0x3c>
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	0000041e 	.word	0x0000041e

08002af0 <__aeabi_ui2d>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	1e04      	subs	r4, r0, #0
 8002af4:	d010      	beq.n	8002b18 <__aeabi_ui2d+0x28>
 8002af6:	f000 f867 	bl	8002bc8 <__clzsi2>
 8002afa:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <__aeabi_ui2d+0x44>)
 8002afc:	1a1b      	subs	r3, r3, r0
 8002afe:	055b      	lsls	r3, r3, #21
 8002b00:	0d5b      	lsrs	r3, r3, #21
 8002b02:	280a      	cmp	r0, #10
 8002b04:	dc0f      	bgt.n	8002b26 <__aeabi_ui2d+0x36>
 8002b06:	220b      	movs	r2, #11
 8002b08:	0021      	movs	r1, r4
 8002b0a:	1a12      	subs	r2, r2, r0
 8002b0c:	40d1      	lsrs	r1, r2
 8002b0e:	3015      	adds	r0, #21
 8002b10:	030a      	lsls	r2, r1, #12
 8002b12:	4084      	lsls	r4, r0
 8002b14:	0b12      	lsrs	r2, r2, #12
 8002b16:	e001      	b.n	8002b1c <__aeabi_ui2d+0x2c>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	051b      	lsls	r3, r3, #20
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	0020      	movs	r0, r4
 8002b22:	0019      	movs	r1, r3
 8002b24:	bd10      	pop	{r4, pc}
 8002b26:	0022      	movs	r2, r4
 8002b28:	380b      	subs	r0, #11
 8002b2a:	4082      	lsls	r2, r0
 8002b2c:	0312      	lsls	r2, r2, #12
 8002b2e:	2400      	movs	r4, #0
 8002b30:	0b12      	lsrs	r2, r2, #12
 8002b32:	e7f3      	b.n	8002b1c <__aeabi_ui2d+0x2c>
 8002b34:	0000041e 	.word	0x0000041e

08002b38 <__aeabi_f2d>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	0242      	lsls	r2, r0, #9
 8002b3c:	0043      	lsls	r3, r0, #1
 8002b3e:	0fc4      	lsrs	r4, r0, #31
 8002b40:	20fe      	movs	r0, #254	@ 0xfe
 8002b42:	0e1b      	lsrs	r3, r3, #24
 8002b44:	1c59      	adds	r1, r3, #1
 8002b46:	0a55      	lsrs	r5, r2, #9
 8002b48:	4208      	tst	r0, r1
 8002b4a:	d00c      	beq.n	8002b66 <__aeabi_f2d+0x2e>
 8002b4c:	21e0      	movs	r1, #224	@ 0xe0
 8002b4e:	0089      	lsls	r1, r1, #2
 8002b50:	468c      	mov	ip, r1
 8002b52:	076d      	lsls	r5, r5, #29
 8002b54:	0b12      	lsrs	r2, r2, #12
 8002b56:	4463      	add	r3, ip
 8002b58:	051b      	lsls	r3, r3, #20
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	07e4      	lsls	r4, r4, #31
 8002b5e:	4323      	orrs	r3, r4
 8002b60:	0028      	movs	r0, r5
 8002b62:	0019      	movs	r1, r3
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d114      	bne.n	8002b94 <__aeabi_f2d+0x5c>
 8002b6a:	2d00      	cmp	r5, #0
 8002b6c:	d01b      	beq.n	8002ba6 <__aeabi_f2d+0x6e>
 8002b6e:	0028      	movs	r0, r5
 8002b70:	f000 f82a 	bl	8002bc8 <__clzsi2>
 8002b74:	280a      	cmp	r0, #10
 8002b76:	dc1c      	bgt.n	8002bb2 <__aeabi_f2d+0x7a>
 8002b78:	230b      	movs	r3, #11
 8002b7a:	002a      	movs	r2, r5
 8002b7c:	1a1b      	subs	r3, r3, r0
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	0003      	movs	r3, r0
 8002b82:	3315      	adds	r3, #21
 8002b84:	409d      	lsls	r5, r3
 8002b86:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <__aeabi_f2d+0x88>)
 8002b88:	0312      	lsls	r2, r2, #12
 8002b8a:	1a1b      	subs	r3, r3, r0
 8002b8c:	055b      	lsls	r3, r3, #21
 8002b8e:	0b12      	lsrs	r2, r2, #12
 8002b90:	0d5b      	lsrs	r3, r3, #21
 8002b92:	e7e1      	b.n	8002b58 <__aeabi_f2d+0x20>
 8002b94:	2d00      	cmp	r5, #0
 8002b96:	d009      	beq.n	8002bac <__aeabi_f2d+0x74>
 8002b98:	0b13      	lsrs	r3, r2, #12
 8002b9a:	2280      	movs	r2, #128	@ 0x80
 8002b9c:	0312      	lsls	r2, r2, #12
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	076d      	lsls	r5, r5, #29
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <__aeabi_f2d+0x8c>)
 8002ba4:	e7d8      	b.n	8002b58 <__aeabi_f2d+0x20>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2200      	movs	r2, #0
 8002baa:	e7d5      	b.n	8002b58 <__aeabi_f2d+0x20>
 8002bac:	2200      	movs	r2, #0
 8002bae:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <__aeabi_f2d+0x8c>)
 8002bb0:	e7d2      	b.n	8002b58 <__aeabi_f2d+0x20>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	002a      	movs	r2, r5
 8002bb6:	3b0b      	subs	r3, #11
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	2500      	movs	r5, #0
 8002bbc:	e7e3      	b.n	8002b86 <__aeabi_f2d+0x4e>
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__clzsi2>:
 8002bc8:	211c      	movs	r1, #28
 8002bca:	2301      	movs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	4298      	cmp	r0, r3
 8002bd0:	d301      	bcc.n	8002bd6 <__clzsi2+0xe>
 8002bd2:	0c00      	lsrs	r0, r0, #16
 8002bd4:	3910      	subs	r1, #16
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	4298      	cmp	r0, r3
 8002bda:	d301      	bcc.n	8002be0 <__clzsi2+0x18>
 8002bdc:	0a00      	lsrs	r0, r0, #8
 8002bde:	3908      	subs	r1, #8
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	4298      	cmp	r0, r3
 8002be4:	d301      	bcc.n	8002bea <__clzsi2+0x22>
 8002be6:	0900      	lsrs	r0, r0, #4
 8002be8:	3904      	subs	r1, #4
 8002bea:	a202      	add	r2, pc, #8	@ (adr r2, 8002bf4 <__clzsi2+0x2c>)
 8002bec:	5c10      	ldrb	r0, [r2, r0]
 8002bee:	1840      	adds	r0, r0, r1
 8002bf0:	4770      	bx	lr
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	02020304 	.word	0x02020304
 8002bf8:	01010101 	.word	0x01010101
	...

08002c04 <__clzdi2>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	2900      	cmp	r1, #0
 8002c08:	d103      	bne.n	8002c12 <__clzdi2+0xe>
 8002c0a:	f7ff ffdd 	bl	8002bc8 <__clzsi2>
 8002c0e:	3020      	adds	r0, #32
 8002c10:	e002      	b.n	8002c18 <__clzdi2+0x14>
 8002c12:	0008      	movs	r0, r1
 8002c14:	f7ff ffd8 	bl	8002bc8 <__clzsi2>
 8002c18:	bd10      	pop	{r4, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)

08002c1c <Termistor>:
#include "string.h"
#include "ssd1306_tests.h"
#include "DigitalInputOutputs.h"

double Termistor(uint32_t analogValue)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
double temperature;
uint32_t adcval = 4096 - analogValue;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	0152      	lsls	r2, r2, #5
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]

temperature = log((adcval * 10000) / (4095 - adcval));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce0 <Termistor+0xc4>)
 8002c32:	435a      	muls	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	492b      	ldr	r1, [pc, #172]	@ (8002ce4 <Termistor+0xc8>)
 8002c38:	1acb      	subs	r3, r1, r3
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	0010      	movs	r0, r2
 8002c3e:	f7fd fa7b 	bl	8000138 <__udivsi3>
 8002c42:	0003      	movs	r3, r0
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7ff ff53 	bl	8002af0 <__aeabi_ui2d>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	000b      	movs	r3, r1
 8002c4e:	0010      	movs	r0, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	f007 fa75 	bl	800a140 <log>
 8002c56:	0002      	movs	r2, r0
 8002c58:	000b      	movs	r3, r1
 8002c5a:	60ba      	str	r2, [r7, #8]
 8002c5c:	60fb      	str	r3, [r7, #12]
temperature = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * temperature * temperature)) * temperature);
 8002c5e:	4a22      	ldr	r2, [pc, #136]	@ (8002ce8 <Termistor+0xcc>)
 8002c60:	4b22      	ldr	r3, [pc, #136]	@ (8002cec <Termistor+0xd0>)
 8002c62:	68b8      	ldr	r0, [r7, #8]
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	f7fe ffc7 	bl	8001bf8 <__aeabi_dmul>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	000b      	movs	r3, r1
 8002c6e:	0010      	movs	r0, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f7fe ffbf 	bl	8001bf8 <__aeabi_dmul>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	000b      	movs	r3, r1
 8002c7e:	0010      	movs	r0, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf0 <Termistor+0xd4>)
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <Termistor+0xd8>)
 8002c86:	f7fd ffb7 	bl	8000bf8 <__aeabi_dadd>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	000b      	movs	r3, r1
 8002c8e:	0010      	movs	r0, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f7fe ffaf 	bl	8001bf8 <__aeabi_dmul>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	0010      	movs	r0, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <Termistor+0xdc>)
 8002ca4:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <Termistor+0xe0>)
 8002ca6:	f7fd ffa7 	bl	8000bf8 <__aeabi_dadd>
 8002caa:	0002      	movs	r2, r0
 8002cac:	000b      	movs	r3, r1
 8002cae:	2000      	movs	r0, #0
 8002cb0:	4913      	ldr	r1, [pc, #76]	@ (8002d00 <Termistor+0xe4>)
 8002cb2:	f7fe fb67 	bl	8001384 <__aeabi_ddiv>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	000b      	movs	r3, r1
 8002cba:	60ba      	str	r2, [r7, #8]
 8002cbc:	60fb      	str	r3, [r7, #12]
temperature = temperature - 273.15;
 8002cbe:	4a11      	ldr	r2, [pc, #68]	@ (8002d04 <Termistor+0xe8>)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <Termistor+0xec>)
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	f7ff fa7d 	bl	80021c4 <__aeabi_dsub>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	000b      	movs	r3, r1
 8002cce:	60ba      	str	r2, [r7, #8]
 8002cd0:	60fb      	str	r3, [r7, #12]
return temperature;
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
}
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b006      	add	sp, #24
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00002710 	.word	0x00002710
 8002ce4:	00000fff 	.word	0x00000fff
 8002ce8:	14170d19 	.word	0x14170d19
 8002cec:	3e7788eb 	.word	0x3e7788eb
 8002cf0:	6fb4c3c2 	.word	0x6fb4c3c2
 8002cf4:	3f2eafee 	.word	0x3f2eafee
 8002cf8:	6edeb890 	.word	0x6edeb890
 8002cfc:	3f527ffd 	.word	0x3f527ffd
 8002d00:	3ff00000 	.word	0x3ff00000
 8002d04:	66666666 	.word	0x66666666
 8002d08:	40711266 	.word	0x40711266

08002d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d12:	f000 feb7 	bl	8003a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d16:	f000 fa05 	bl	8003124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d1a:	f000 fb29 	bl	8003370 <MX_GPIO_Init>
  MX_RTC_Init();
 8002d1e:	f000 faf9 	bl	8003314 <MX_RTC_Init>
  MX_ADC1_Init();
 8002d22:	f000 fa4b 	bl	80031bc <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d26:	f000 fab5 	bl	8003294 <MX_I2C1_Init>
//  Buzzer_Control(1);
//  HAL_Delay(200);
//  Buzzer_Control(0);
//  HAL_Delay(200);

  dev_ctx.write_reg = platform_write;
 8002d2a:	4be6      	ldr	r3, [pc, #920]	@ (80030c4 <main+0x3b8>)
 8002d2c:	4ae6      	ldr	r2, [pc, #920]	@ (80030c8 <main+0x3bc>)
 8002d2e:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8002d30:	4be4      	ldr	r3, [pc, #912]	@ (80030c4 <main+0x3b8>)
 8002d32:	4ae6      	ldr	r2, [pc, #920]	@ (80030cc <main+0x3c0>)
 8002d34:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 8002d36:	4be3      	ldr	r3, [pc, #908]	@ (80030c4 <main+0x3b8>)
 8002d38:	4ae5      	ldr	r2, [pc, #916]	@ (80030d0 <main+0x3c4>)
 8002d3a:	60da      	str	r2, [r3, #12]

  lis2dw12_device_id_get(&dev_ctx, &whoamI);
 8002d3c:	4ae5      	ldr	r2, [pc, #916]	@ (80030d4 <main+0x3c8>)
 8002d3e:	4be1      	ldr	r3, [pc, #900]	@ (80030c4 <main+0x3b8>)
 8002d40:	0011      	movs	r1, r2
 8002d42:	0018      	movs	r0, r3
 8002d44:	f004 f889 	bl	8006e5a <lis2dw12_device_id_get>
  lis2dw12_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8002d48:	4bde      	ldr	r3, [pc, #888]	@ (80030c4 <main+0x3b8>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f004 f896 	bl	8006e7e <lis2dw12_reset_set>

  do
  {
  lis2dw12_reset_get(&dev_ctx, &rst);
 8002d52:	4ae1      	ldr	r2, [pc, #900]	@ (80030d8 <main+0x3cc>)
 8002d54:	4bdb      	ldr	r3, [pc, #876]	@ (80030c4 <main+0x3b8>)
 8002d56:	0011      	movs	r1, r2
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f004 f8c0 	bl	8006ede <lis2dw12_reset_get>
  } while (rst);
 8002d5e:	4bde      	ldr	r3, [pc, #888]	@ (80030d8 <main+0x3cc>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f5      	bne.n	8002d52 <main+0x46>

  /* Enable Block Data Update */
  lis2dw12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002d66:	4bd7      	ldr	r3, [pc, #860]	@ (80030c4 <main+0x3b8>)
 8002d68:	2101      	movs	r1, #1
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f003 ffaa 	bl	8006cc4 <lis2dw12_block_data_update_set>
  /* Set full scale */
  lis2dw12_full_scale_set(&dev_ctx, LIS2DW12_2g);
 8002d70:	4bd4      	ldr	r3, [pc, #848]	@ (80030c4 <main+0x3b8>)
 8002d72:	2100      	movs	r1, #0
 8002d74:	0018      	movs	r0, r3
 8002d76:	f003 ffd5 	bl	8006d24 <lis2dw12_full_scale_set>
  /* Configure filtering chain
   * Accelerometer - filter path / bandwidth
   */
  lis2dw12_filter_path_set(&dev_ctx, LIS2DW12_LPF_ON_OUT);
 8002d7a:	4bd2      	ldr	r3, [pc, #840]	@ (80030c4 <main+0x3b8>)
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f004 f8c8 	bl	8006f14 <lis2dw12_filter_path_set>
  lis2dw12_filter_bandwidth_set(&dev_ctx, LIS2DW12_ODR_DIV_4);
 8002d84:	4bcf      	ldr	r3, [pc, #828]	@ (80030c4 <main+0x3b8>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f004 f91d 	bl	8006fc8 <lis2dw12_filter_bandwidth_set>
  /* Configure power mode */
  lis2dw12_power_mode_set(&dev_ctx, LIS2DW12_HIGH_PERFORMANCE);
 8002d8e:	4bcd      	ldr	r3, [pc, #820]	@ (80030c4 <main+0x3b8>)
 8002d90:	2104      	movs	r1, #4
 8002d92:	0018      	movs	r0, r3
 8002d94:	f003 fed2 	bl	8006b3c <lis2dw12_power_mode_set>
  /* Set Output Data Rate */
  lis2dw12_data_rate_set(&dev_ctx, LIS2DW12_XL_ODR_25Hz);
 8002d98:	4bca      	ldr	r3, [pc, #808]	@ (80030c4 <main+0x3b8>)
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f003 ff39 	bl	8006c14 <lis2dw12_data_rate_set>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t reg;
	   	 		/* Read output only if new value is available */
	   	 		lis2dw12_flag_data_ready_get(&dev_ctx, &reg);
 8002da2:	2417      	movs	r4, #23
 8002da4:	193a      	adds	r2, r7, r4
 8002da6:	4bc7      	ldr	r3, [pc, #796]	@ (80030c4 <main+0x3b8>)
 8002da8:	0011      	movs	r1, r2
 8002daa:	0018      	movs	r0, r3
 8002dac:	f003 ffea 	bl	8006d84 <lis2dw12_flag_data_ready_get>

	   	 		if (reg)
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d026      	beq.n	8002e06 <main+0xfa>
	   	 		{
	   	 			/* Read acceleration data */
	   	 			memset(data_raw_acceleration, 0, sizeof(data_raw_acceleration));
 8002db8:	4bc8      	ldr	r3, [pc, #800]	@ (80030dc <main+0x3d0>)
 8002dba:	2206      	movs	r2, #6
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f005 f874 	bl	8007eac <memset>
	   	 			lis2dw12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);				//reading values from the accelerometer
 8002dc4:	4ac5      	ldr	r2, [pc, #788]	@ (80030dc <main+0x3d0>)
 8002dc6:	4bbf      	ldr	r3, [pc, #764]	@ (80030c4 <main+0x3b8>)
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f003 fff5 	bl	8006dba <lis2dw12_acceleration_raw_get>
	   	 			acceleration_mg[0] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[0]);
 8002dd0:	4bc2      	ldr	r3, [pc, #776]	@ (80030dc <main+0x3d0>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	5e9b      	ldrsh	r3, [r3, r2]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f003 fe98 	bl	8006b0c <lis2dw12_from_fs2_to_mg>
 8002ddc:	1c02      	adds	r2, r0, #0
 8002dde:	4bc0      	ldr	r3, [pc, #768]	@ (80030e0 <main+0x3d4>)
 8002de0:	601a      	str	r2, [r3, #0]
	   	 			acceleration_mg[1] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[1]);
 8002de2:	4bbe      	ldr	r3, [pc, #760]	@ (80030dc <main+0x3d0>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	5e9b      	ldrsh	r3, [r3, r2]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f003 fe8f 	bl	8006b0c <lis2dw12_from_fs2_to_mg>
 8002dee:	1c02      	adds	r2, r0, #0
 8002df0:	4bbb      	ldr	r3, [pc, #748]	@ (80030e0 <main+0x3d4>)
 8002df2:	605a      	str	r2, [r3, #4]
	   	 			acceleration_mg[2] = lis2dw12_from_fs2_to_mg(data_raw_acceleration[2]);
 8002df4:	4bb9      	ldr	r3, [pc, #740]	@ (80030dc <main+0x3d0>)
 8002df6:	2204      	movs	r2, #4
 8002df8:	5e9b      	ldrsh	r3, [r3, r2]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f003 fe86 	bl	8006b0c <lis2dw12_from_fs2_to_mg>
 8002e00:	1c02      	adds	r2, r0, #0
 8002e02:	4bb7      	ldr	r3, [pc, #732]	@ (80030e0 <main+0x3d4>)
 8002e04:	609a      	str	r2, [r3, #8]
	   	 		}
	   	 		if (SysClkTim._1sn == 1)
 8002e06:	4bb7      	ldr	r3, [pc, #732]	@ (80030e4 <main+0x3d8>)
 8002e08:	799b      	ldrb	r3, [r3, #6]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d12c      	bne.n	8002e68 <main+0x15c>
	   	 		{
	   	 			HAL_ADC_Start(&hadc1);
 8002e0e:	4bb6      	ldr	r3, [pc, #728]	@ (80030e8 <main+0x3dc>)
 8002e10:	0018      	movs	r0, r3
 8002e12:	f001 f9cf 	bl	80041b4 <HAL_ADC_Start>
	   	 			HAL_ADC_PollForConversion(&hadc1, 50); 							//reading values from the Temperature sensor with ADC
 8002e16:	4bb4      	ldr	r3, [pc, #720]	@ (80030e8 <main+0x3dc>)
 8002e18:	2132      	movs	r1, #50	@ 0x32
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f001 fa54 	bl	80042c8 <HAL_ADC_PollForConversion>
	   	 			adcValues[2] = HAL_ADC_GetValue(&hadc1);
 8002e20:	4bb1      	ldr	r3, [pc, #708]	@ (80030e8 <main+0x3dc>)
 8002e22:	0018      	movs	r0, r3
 8002e24:	f001 fae4 	bl	80043f0 <HAL_ADC_GetValue>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	4bb0      	ldr	r3, [pc, #704]	@ (80030ec <main+0x3e0>)
 8002e2c:	609a      	str	r2, [r3, #8]
	   	 			HAL_ADC_Stop(&hadc1);
 8002e2e:	4bae      	ldr	r3, [pc, #696]	@ (80030e8 <main+0x3dc>)
 8002e30:	0018      	movs	r0, r3
 8002e32:	f001 fa0d 	bl	8004250 <HAL_ADC_Stop>
	   	 			Temp1 = Termistor(adcValues[2]) - 10;
 8002e36:	4bad      	ldr	r3, [pc, #692]	@ (80030ec <main+0x3e0>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff feee 	bl	8002c1c <Termistor>
 8002e40:	2200      	movs	r2, #0
 8002e42:	4bab      	ldr	r3, [pc, #684]	@ (80030f0 <main+0x3e4>)
 8002e44:	f7ff f9be 	bl	80021c4 <__aeabi_dsub>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	000b      	movs	r3, r1
 8002e4c:	49a9      	ldr	r1, [pc, #676]	@ (80030f4 <main+0x3e8>)
 8002e4e:	600a      	str	r2, [r1, #0]
 8002e50:	604b      	str	r3, [r1, #4]

	   	 			HAL_GPIO_TogglePin(LED1_RED_GPIO_Port, LED1_RED_Pin);
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	021a      	lsls	r2, r3, #8
 8002e56:	23a0      	movs	r3, #160	@ 0xa0
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f002 f80e 	bl	8004e7e <HAL_GPIO_TogglePin>
	   	 			SysClkTim._1sn = 0;
 8002e62:	4ba0      	ldr	r3, [pc, #640]	@ (80030e4 <main+0x3d8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	719a      	strb	r2, [r3, #6]
	   	 		}
	   	 		if (SysClkTim._50msn == 1)
 8002e68:	4b9e      	ldr	r3, [pc, #632]	@ (80030e4 <main+0x3d8>)
 8002e6a:	789b      	ldrb	r3, [r3, #2]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <main+0x174>
	   	 		{
	   	 			HAL_GPIO_TogglePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin);
 8002e70:	4ba1      	ldr	r3, [pc, #644]	@ (80030f8 <main+0x3ec>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	0018      	movs	r0, r3
 8002e76:	f002 f802 	bl	8004e7e <HAL_GPIO_TogglePin>
	   	 			SysClkTim._50msn = 0;
 8002e7a:	4b9a      	ldr	r3, [pc, #616]	@ (80030e4 <main+0x3d8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	709a      	strb	r2, [r3, #2]
	   	 		}
	   	 		if (SysClkTim._100msn == 1)
 8002e80:	4b98      	ldr	r3, [pc, #608]	@ (80030e4 <main+0x3d8>)
 8002e82:	78db      	ldrb	r3, [r3, #3]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d15b      	bne.n	8002f40 <main+0x234>
	   	 		{

	   	 			char str[10] =
 8002e88:	240c      	movs	r4, #12
 8002e8a:	193b      	adds	r3, r7, r4
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	230a      	movs	r3, #10
 8002e90:	001a      	movs	r2, r3
 8002e92:	2100      	movs	r1, #0
 8002e94:	f005 f80a 	bl	8007eac <memset>
	   	 			{ 0 };
	   	 			char Tmp[10] =
 8002e98:	003b      	movs	r3, r7
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	230a      	movs	r3, #10
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f005 f803 	bl	8007eac <memset>
	   	 			{ 0 };
	   	 			sprintf(str, "%.2f m/s2", acceleration_mg[2] / 100);
 8002ea6:	4b8e      	ldr	r3, [pc, #568]	@ (80030e0 <main+0x3d4>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4994      	ldr	r1, [pc, #592]	@ (80030fc <main+0x3f0>)
 8002eac:	1c18      	adds	r0, r3, #0
 8002eae:	f7fd fbe3 	bl	8000678 <__aeabi_fdiv>
 8002eb2:	1c03      	adds	r3, r0, #0
 8002eb4:	1c18      	adds	r0, r3, #0
 8002eb6:	f7ff fe3f 	bl	8002b38 <__aeabi_f2d>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	000b      	movs	r3, r1
 8002ebe:	4990      	ldr	r1, [pc, #576]	@ (8003100 <main+0x3f4>)
 8002ec0:	1938      	adds	r0, r7, r4
 8002ec2:	f004 ff73 	bl	8007dac <siprintf>
	   	 			HAL_GPIO_TogglePin(LED3_BLUE_GPIO_Port, LED3_BLUE_Pin);
 8002ec6:	4b8c      	ldr	r3, [pc, #560]	@ (80030f8 <main+0x3ec>)
 8002ec8:	2102      	movs	r1, #2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f001 ffd7 	bl	8004e7e <HAL_GPIO_TogglePin>

	   	 			ssd1306_SetCursor(2, 0);
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2002      	movs	r0, #2
 8002ed4:	f004 fa2c 	bl	8007330 <ssd1306_SetCursor>
	   	 			ssd1306_WriteString("G:", Font_11x18, White);
 8002ed8:	4a8a      	ldr	r2, [pc, #552]	@ (8003104 <main+0x3f8>)
 8002eda:	488b      	ldr	r0, [pc, #556]	@ (8003108 <main+0x3fc>)
 8002edc:	2301      	movs	r3, #1
 8002ede:	6811      	ldr	r1, [r2, #0]
 8002ee0:	6852      	ldr	r2, [r2, #4]
 8002ee2:	f004 f9fb 	bl	80072dc <ssd1306_WriteString>
	   	 			ssd1306_SetCursor(25, 0);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	2019      	movs	r0, #25
 8002eea:	f004 fa21 	bl	8007330 <ssd1306_SetCursor>
	   	 			ssd1306_WriteString(str, Font_11x18, White);								// printing the values from the accelerometer
 8002eee:	4a85      	ldr	r2, [pc, #532]	@ (8003104 <main+0x3f8>)
 8002ef0:	1938      	adds	r0, r7, r4
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	6811      	ldr	r1, [r2, #0]
 8002ef6:	6852      	ldr	r2, [r2, #4]
 8002ef8:	f004 f9f0 	bl	80072dc <ssd1306_WriteString>
	   	 			ssd1306_UpdateScreen();
 8002efc:	f004 f8c6 	bl	800708c <ssd1306_UpdateScreen>
	   	 			sprintf(Tmp, "%.2fC", Temp1);
 8002f00:	4b7c      	ldr	r3, [pc, #496]	@ (80030f4 <main+0x3e8>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4981      	ldr	r1, [pc, #516]	@ (800310c <main+0x400>)
 8002f08:	0038      	movs	r0, r7
 8002f0a:	f004 ff4f 	bl	8007dac <siprintf>
	   	 			ssd1306_SetCursor(2, 25);
 8002f0e:	2119      	movs	r1, #25
 8002f10:	2002      	movs	r0, #2
 8002f12:	f004 fa0d 	bl	8007330 <ssd1306_SetCursor>
	   	 			ssd1306_WriteString("Temp:", Font_11x18, White);
 8002f16:	4a7b      	ldr	r2, [pc, #492]	@ (8003104 <main+0x3f8>)
 8002f18:	487d      	ldr	r0, [pc, #500]	@ (8003110 <main+0x404>)
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	6811      	ldr	r1, [r2, #0]
 8002f1e:	6852      	ldr	r2, [r2, #4]
 8002f20:	f004 f9dc 	bl	80072dc <ssd1306_WriteString>
	   	 			ssd1306_SetCursor(55, 25);
 8002f24:	2119      	movs	r1, #25
 8002f26:	2037      	movs	r0, #55	@ 0x37
 8002f28:	f004 fa02 	bl	8007330 <ssd1306_SetCursor>
	   	 			ssd1306_WriteString(Tmp, Font_11x18, White);								// printing the values from the Temperature Sensor (NTC)
 8002f2c:	4a75      	ldr	r2, [pc, #468]	@ (8003104 <main+0x3f8>)
 8002f2e:	0038      	movs	r0, r7
 8002f30:	2301      	movs	r3, #1
 8002f32:	6811      	ldr	r1, [r2, #0]
 8002f34:	6852      	ldr	r2, [r2, #4]
 8002f36:	f004 f9d1 	bl	80072dc <ssd1306_WriteString>

	   	 			SysClkTim._100msn = 0;
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <main+0x3d8>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	70da      	strb	r2, [r3, #3]
	   	 		}
	   	 		if (SysClkTim._250msn == 1)
 8002f40:	4b68      	ldr	r3, [pc, #416]	@ (80030e4 <main+0x3d8>)
 8002f42:	791b      	ldrb	r3, [r3, #4]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <main+0x24c>
	   	 		{
	   	 			HAL_GPIO_TogglePin(LED4_WHITE_GPIO_Port, LED4_WHITE_Pin);
 8002f48:	4b6b      	ldr	r3, [pc, #428]	@ (80030f8 <main+0x3ec>)
 8002f4a:	2104      	movs	r1, #4
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f001 ff96 	bl	8004e7e <HAL_GPIO_TogglePin>
	   	 			SysClkTim._250msn = 0;
 8002f52:	4b64      	ldr	r3, [pc, #400]	@ (80030e4 <main+0x3d8>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	711a      	strb	r2, [r3, #4]
	   	 		}

	   	 		if (SysClkTim._500msn == 1)
 8002f58:	4b62      	ldr	r3, [pc, #392]	@ (80030e4 <main+0x3d8>)
 8002f5a:	795b      	ldrb	r3, [r3, #5]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d123      	bne.n	8002fa8 <main+0x29c>
	   	 		{
	   	 			counter++;
 8002f60:	4b6c      	ldr	r3, [pc, #432]	@ (8003114 <main+0x408>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b6a      	ldr	r3, [pc, #424]	@ (8003114 <main+0x408>)
 8002f6a:	701a      	strb	r2, [r3, #0]
	   	 			if (counter % 2 == 1)
 8002f6c:	4b69      	ldr	r3, [pc, #420]	@ (8003114 <main+0x408>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <main+0x27c>
	   	 				HAL_GPIO_WritePin(LED5_YELLOW_GPIO_Port, LED5_YELLOW_Pin, 1);
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80030f8 <main+0x3ec>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2108      	movs	r1, #8
 8002f80:	0018      	movs	r0, r3
 8002f82:	f001 ff5f 	bl	8004e44 <HAL_GPIO_WritePin>
 8002f86:	e005      	b.n	8002f94 <main+0x288>
	   	 			else
	   	 				HAL_GPIO_WritePin(LED5_YELLOW_GPIO_Port, LED5_YELLOW_Pin, 0);
 8002f88:	4b5b      	ldr	r3, [pc, #364]	@ (80030f8 <main+0x3ec>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2108      	movs	r1, #8
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f001 ff58 	bl	8004e44 <HAL_GPIO_WritePin>

	   	 			if (counter > 2)
 8002f94:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <main+0x408>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d902      	bls.n	8002fa2 <main+0x296>
	   	 			{
	   	 				counter = 0;
 8002f9c:	4b5d      	ldr	r3, [pc, #372]	@ (8003114 <main+0x408>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
	   	 			}

	   	 			SysClkTim._500msn = 0;
 8002fa2:	4b50      	ldr	r3, [pc, #320]	@ (80030e4 <main+0x3d8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	715a      	strb	r2, [r3, #5]
	   	 		}

	   	 		if (SysClkTim._2sn == 1)
 8002fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80030e4 <main+0x3d8>)
 8002faa:	79db      	ldrb	r3, [r3, #7]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d000      	beq.n	8002fb2 <main+0x2a6>
 8002fb0:	e6f7      	b.n	8002da2 <main+0x96>
	   	 		{
	   	 			rgbcounter++;
 8002fb2:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <main+0x40c>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b57      	ldr	r3, [pc, #348]	@ (8003118 <main+0x40c>)
 8002fbc:	701a      	strb	r2, [r3, #0]
	   	 			switch (rgbcounter)
 8002fbe:	4b56      	ldr	r3, [pc, #344]	@ (8003118 <main+0x40c>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d872      	bhi.n	80030ac <main+0x3a0>
 8002fc6:	009a      	lsls	r2, r3, #2
 8002fc8:	4b54      	ldr	r3, [pc, #336]	@ (800311c <main+0x410>)
 8002fca:	18d3      	adds	r3, r2, r3
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	469f      	mov	pc, r3
	   	 			{
	   	 			case 0:
	   	 				HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 1);
 8002fd0:	23a0      	movs	r3, #160	@ 0xa0
 8002fd2:	05db      	lsls	r3, r3, #23
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	2140      	movs	r1, #64	@ 0x40
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f001 ff33 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	0059      	lsls	r1, r3, #1
 8002fe2:	23a0      	movs	r3, #160	@ 0xa0
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f001 ff2b 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
 8002fee:	4b4c      	ldr	r3, [pc, #304]	@ (8003120 <main+0x414>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2108      	movs	r1, #8
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f001 ff25 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				break;
 8002ffa:	e057      	b.n	80030ac <main+0x3a0>
	   	 			case 1:
	   	 				HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 0);
 8002ffc:	23a0      	movs	r3, #160	@ 0xa0
 8002ffe:	05db      	lsls	r3, r3, #23
 8003000:	2200      	movs	r2, #0
 8003002:	2140      	movs	r1, #64	@ 0x40
 8003004:	0018      	movs	r0, r3
 8003006:	f001 ff1d 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 1);
 800300a:	2380      	movs	r3, #128	@ 0x80
 800300c:	0059      	lsls	r1, r3, #1
 800300e:	23a0      	movs	r3, #160	@ 0xa0
 8003010:	05db      	lsls	r3, r3, #23
 8003012:	2201      	movs	r2, #1
 8003014:	0018      	movs	r0, r3
 8003016:	f001 ff15 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <main+0x414>)
 800301c:	2200      	movs	r2, #0
 800301e:	2108      	movs	r1, #8
 8003020:	0018      	movs	r0, r3
 8003022:	f001 ff0f 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				break;
 8003026:	e041      	b.n	80030ac <main+0x3a0>
	   	 			case 2:
	   	 				HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 0);
 8003028:	23a0      	movs	r3, #160	@ 0xa0
 800302a:	05db      	lsls	r3, r3, #23
 800302c:	2200      	movs	r2, #0
 800302e:	2140      	movs	r1, #64	@ 0x40
 8003030:	0018      	movs	r0, r3
 8003032:	f001 ff07 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	0059      	lsls	r1, r3, #1
 800303a:	23a0      	movs	r3, #160	@ 0xa0
 800303c:	05db      	lsls	r3, r3, #23
 800303e:	2200      	movs	r2, #0
 8003040:	0018      	movs	r0, r3
 8003042:	f001 feff 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 1);
 8003046:	4b36      	ldr	r3, [pc, #216]	@ (8003120 <main+0x414>)
 8003048:	2201      	movs	r2, #1
 800304a:	2108      	movs	r1, #8
 800304c:	0018      	movs	r0, r3
 800304e:	f001 fef9 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				break;
 8003052:	e02b      	b.n	80030ac <main+0x3a0>
	   	 			case 3:
	   	 				HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 1);
 8003054:	23a0      	movs	r3, #160	@ 0xa0
 8003056:	05db      	lsls	r3, r3, #23
 8003058:	2201      	movs	r2, #1
 800305a:	2140      	movs	r1, #64	@ 0x40
 800305c:	0018      	movs	r0, r3
 800305e:	f001 fef1 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 1);
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	0059      	lsls	r1, r3, #1
 8003066:	23a0      	movs	r3, #160	@ 0xa0
 8003068:	05db      	lsls	r3, r3, #23
 800306a:	2201      	movs	r2, #1
 800306c:	0018      	movs	r0, r3
 800306e:	f001 fee9 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 1);
 8003072:	4b2b      	ldr	r3, [pc, #172]	@ (8003120 <main+0x414>)
 8003074:	2201      	movs	r2, #1
 8003076:	2108      	movs	r1, #8
 8003078:	0018      	movs	r0, r3
 800307a:	f001 fee3 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				break;
 800307e:	e015      	b.n	80030ac <main+0x3a0>
	   	 			case 4:
	   	 				HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, 0);
 8003080:	23a0      	movs	r3, #160	@ 0xa0
 8003082:	05db      	lsls	r3, r3, #23
 8003084:	2200      	movs	r2, #0
 8003086:	2140      	movs	r1, #64	@ 0x40
 8003088:	0018      	movs	r0, r3
 800308a:	f001 fedb 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
 800308e:	2380      	movs	r3, #128	@ 0x80
 8003090:	0059      	lsls	r1, r3, #1
 8003092:	23a0      	movs	r3, #160	@ 0xa0
 8003094:	05db      	lsls	r3, r3, #23
 8003096:	2200      	movs	r2, #0
 8003098:	0018      	movs	r0, r3
 800309a:	f001 fed3 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				HAL_GPIO_WritePin(RGB_B_GPIO_Port, RGB_B_Pin, 0);
 800309e:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <main+0x414>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	2108      	movs	r1, #8
 80030a4:	0018      	movs	r0, r3
 80030a6:	f001 fecd 	bl	8004e44 <HAL_GPIO_WritePin>
	   	 				break;
 80030aa:	46c0      	nop			@ (mov r8, r8)
	   	 			}
	   	 			if (rgbcounter > 4)
 80030ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <main+0x40c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d902      	bls.n	80030ba <main+0x3ae>
	   	 			{
	   	 				rgbcounter = 0;
 80030b4:	4b18      	ldr	r3, [pc, #96]	@ (8003118 <main+0x40c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
	   	 			}

	   	 			SysClkTim._2sn = 0;
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <main+0x3d8>)
 80030bc:	2200      	movs	r2, #0
 80030be:	71da      	strb	r2, [r3, #7]
  {
 80030c0:	e66f      	b.n	8002da2 <main+0x96>
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	200002f8 	.word	0x200002f8
 80030c8:	080035c5 	.word	0x080035c5
 80030cc:	0800360d 	.word	0x0800360d
 80030d0:	2000026c 	.word	0x2000026c
 80030d4:	2000031c 	.word	0x2000031c
 80030d8:	2000031d 	.word	0x2000031d
 80030dc:	20000308 	.word	0x20000308
 80030e0:	20000310 	.word	0x20000310
 80030e4:	20000320 	.word	0x20000320
 80030e8:	20000208 	.word	0x20000208
 80030ec:	2000032c 	.word	0x2000032c
 80030f0:	40240000 	.word	0x40240000
 80030f4:	20000200 	.word	0x20000200
 80030f8:	50000c00 	.word	0x50000c00
 80030fc:	42c80000 	.word	0x42c80000
 8003100:	0800a538 	.word	0x0800a538
 8003104:	2000000c 	.word	0x2000000c
 8003108:	0800a544 	.word	0x0800a544
 800310c:	0800a548 	.word	0x0800a548
 8003110:	0800a550 	.word	0x0800a550
 8003114:	200001fc 	.word	0x200001fc
 8003118:	200001fd 	.word	0x200001fd
 800311c:	0800a614 	.word	0x0800a614
 8003120:	50000400 	.word	0x50000400

08003124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b093      	sub	sp, #76	@ 0x4c
 8003128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800312a:	2414      	movs	r4, #20
 800312c:	193b      	adds	r3, r7, r4
 800312e:	0018      	movs	r0, r3
 8003130:	2334      	movs	r3, #52	@ 0x34
 8003132:	001a      	movs	r2, r3
 8003134:	2100      	movs	r1, #0
 8003136:	f004 feb9 	bl	8007eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	0018      	movs	r0, r3
 800313e:	2310      	movs	r3, #16
 8003140:	001a      	movs	r2, r3
 8003142:	2100      	movs	r1, #0
 8003144:	f004 feb2 	bl	8007eac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	0018      	movs	r0, r3
 800314e:	f002 fd4d 	bl	8005bec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	220a      	movs	r2, #10
 8003156:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003158:	193b      	adds	r3, r7, r4
 800315a:	2280      	movs	r2, #128	@ 0x80
 800315c:	0052      	lsls	r2, r2, #1
 800315e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003160:	0021      	movs	r1, r4
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2240      	movs	r2, #64	@ 0x40
 800316c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2201      	movs	r2, #1
 8003172:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800317a:	187b      	adds	r3, r7, r1
 800317c:	0018      	movs	r0, r3
 800317e:	f002 fd75 	bl	8005c6c <HAL_RCC_OscConfig>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d001      	beq.n	800318a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003186:	f000 fa65 	bl	8003654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	2207      	movs	r2, #7
 800318e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	2200      	movs	r2, #0
 80031a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	2100      	movs	r1, #0
 80031a6:	0018      	movs	r0, r3
 80031a8:	f003 f870 	bl	800628c <HAL_RCC_ClockConfig>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d001      	beq.n	80031b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80031b0:	f000 fa50 	bl	8003654 <Error_Handler>
  }
}
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b013      	add	sp, #76	@ 0x4c
 80031ba:	bd90      	pop	{r4, r7, pc}

080031bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	0018      	movs	r0, r3
 80031c6:	230c      	movs	r3, #12
 80031c8:	001a      	movs	r2, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	f004 fe6e 	bl	8007eac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031d2:	4a2e      	ldr	r2, [pc, #184]	@ (800328c <MX_ADC1_Init+0xd0>)
 80031d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80031d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031d8:	2280      	movs	r2, #128	@ 0x80
 80031da:	05d2      	lsls	r2, r2, #23
 80031dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031de:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031e4:	4b28      	ldr	r3, [pc, #160]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031ea:	4b27      	ldr	r3, [pc, #156]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031f0:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031f2:	2204      	movs	r2, #4
 80031f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80031fc:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <MX_ADC1_Init+0xcc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003202:	4b21      	ldr	r3, [pc, #132]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003204:	2200      	movs	r2, #0
 8003206:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <MX_ADC1_Init+0xcc>)
 800320a:	2201      	movs	r2, #1
 800320c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800320e:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003210:	2220      	movs	r2, #32
 8003212:	2100      	movs	r1, #0
 8003214:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003216:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003218:	2200      	movs	r2, #0
 800321a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800321c:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <MX_ADC1_Init+0xcc>)
 800321e:	2200      	movs	r2, #0
 8003220:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003224:	222c      	movs	r2, #44	@ 0x2c
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800322a:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <MX_ADC1_Init+0xcc>)
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003230:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003232:	2200      	movs	r2, #0
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003236:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003238:	2200      	movs	r2, #0
 800323a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800323c:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <MX_ADC1_Init+0xcc>)
 800323e:	223c      	movs	r2, #60	@ 0x3c
 8003240:	2100      	movs	r1, #0
 8003242:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003244:	4b10      	ldr	r3, [pc, #64]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003246:	2200      	movs	r2, #0
 8003248:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800324a:	4b0f      	ldr	r3, [pc, #60]	@ (8003288 <MX_ADC1_Init+0xcc>)
 800324c:	0018      	movs	r0, r3
 800324e:	f000 fe09 	bl	8003e64 <HAL_ADC_Init>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d001      	beq.n	800325a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003256:	f000 f9fd 	bl	8003654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	4a0c      	ldr	r2, [pc, #48]	@ (8003290 <MX_ADC1_Init+0xd4>)
 800325e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800326c:	1d3a      	adds	r2, r7, #4
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <MX_ADC1_Init+0xcc>)
 8003270:	0011      	movs	r1, r2
 8003272:	0018      	movs	r0, r3
 8003274:	f001 f8c8 	bl	8004408 <HAL_ADC_ConfigChannel>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d001      	beq.n	8003280 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800327c:	f000 f9ea 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b004      	add	sp, #16
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000208 	.word	0x20000208
 800328c:	40012400 	.word	0x40012400
 8003290:	10000010 	.word	0x10000010

08003294 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <MX_I2C1_Init+0x74>)
 800329a:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <MX_I2C1_Init+0x78>)
 800329c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <MX_I2C1_Init+0x7c>)
 80032a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032a4:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032aa:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032b0:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032b6:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032bc:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032c2:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032d0:	0018      	movs	r0, r3
 80032d2:	f001 fdef 	bl	8004eb4 <HAL_I2C_Init>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d001      	beq.n	80032de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032da:	f000 f9bb 	bl	8003654 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032de:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032e0:	2100      	movs	r1, #0
 80032e2:	0018      	movs	r0, r3
 80032e4:	f002 fbea 	bl	8005abc <HAL_I2CEx_ConfigAnalogFilter>
 80032e8:	1e03      	subs	r3, r0, #0
 80032ea:	d001      	beq.n	80032f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032ec:	f000 f9b2 	bl	8003654 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <MX_I2C1_Init+0x74>)
 80032f2:	2100      	movs	r1, #0
 80032f4:	0018      	movs	r0, r3
 80032f6:	f002 fc2d 	bl	8005b54 <HAL_I2CEx_ConfigDigitalFilter>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d001      	beq.n	8003302 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032fe:	f000 f9a9 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	2000026c 	.word	0x2000026c
 800330c:	40005400 	.word	0x40005400
 8003310:	00503d58 	.word	0x00503d58

08003314 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003318:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <MX_RTC_Init+0x54>)
 800331a:	4a14      	ldr	r2, [pc, #80]	@ (800336c <MX_RTC_Init+0x58>)
 800331c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800331e:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <MX_RTC_Init+0x54>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <MX_RTC_Init+0x54>)
 8003326:	227f      	movs	r2, #127	@ 0x7f
 8003328:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800332a:	4b0f      	ldr	r3, [pc, #60]	@ (8003368 <MX_RTC_Init+0x54>)
 800332c:	22ff      	movs	r2, #255	@ 0xff
 800332e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003330:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <MX_RTC_Init+0x54>)
 8003332:	2200      	movs	r2, #0
 8003334:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003336:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <MX_RTC_Init+0x54>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800333c:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <MX_RTC_Init+0x54>)
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003342:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <MX_RTC_Init+0x54>)
 8003344:	2280      	movs	r2, #128	@ 0x80
 8003346:	05d2      	lsls	r2, r2, #23
 8003348:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800334a:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <MX_RTC_Init+0x54>)
 800334c:	2200      	movs	r2, #0
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <MX_RTC_Init+0x54>)
 8003352:	0018      	movs	r0, r3
 8003354:	f003 fa4a 	bl	80067ec <HAL_RTC_Init>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800335c:	f000 f97a 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	200002c0 	.word	0x200002c0
 800336c:	40002800 	.word	0x40002800

08003370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b08b      	sub	sp, #44	@ 0x2c
 8003374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003376:	2414      	movs	r4, #20
 8003378:	193b      	adds	r3, r7, r4
 800337a:	0018      	movs	r0, r3
 800337c:	2314      	movs	r3, #20
 800337e:	001a      	movs	r2, r3
 8003380:	2100      	movs	r1, #0
 8003382:	f004 fd93 	bl	8007eac <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003386:	4b3f      	ldr	r3, [pc, #252]	@ (8003484 <MX_GPIO_Init+0x114>)
 8003388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338a:	4b3e      	ldr	r3, [pc, #248]	@ (8003484 <MX_GPIO_Init+0x114>)
 800338c:	2120      	movs	r1, #32
 800338e:	430a      	orrs	r2, r1
 8003390:	635a      	str	r2, [r3, #52]	@ 0x34
 8003392:	4b3c      	ldr	r3, [pc, #240]	@ (8003484 <MX_GPIO_Init+0x114>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	2220      	movs	r2, #32
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	4b39      	ldr	r3, [pc, #228]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a2:	4b38      	ldr	r3, [pc, #224]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033a4:	2101      	movs	r1, #1
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033aa:	4b36      	ldr	r3, [pc, #216]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ae:	2201      	movs	r2, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b6:	4b33      	ldr	r3, [pc, #204]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ba:	4b32      	ldr	r3, [pc, #200]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033bc:	2102      	movs	r1, #2
 80033be:	430a      	orrs	r2, r1
 80033c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c2:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033d4:	2108      	movs	r1, #8
 80033d6:	430a      	orrs	r2, r1
 80033d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033da:	4b2a      	ldr	r3, [pc, #168]	@ (8003484 <MX_GPIO_Init+0x114>)
 80033dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033de:	2208      	movs	r2, #8
 80033e0:	4013      	ands	r3, r2
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin, GPIO_PIN_RESET);
 80033e6:	4928      	ldr	r1, [pc, #160]	@ (8003488 <MX_GPIO_Init+0x118>)
 80033e8:	23a0      	movs	r3, #160	@ 0xa0
 80033ea:	05db      	lsls	r3, r3, #23
 80033ec:	2200      	movs	r2, #0
 80033ee:	0018      	movs	r0, r3
 80033f0:	f001 fd28 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 80033f4:	4925      	ldr	r1, [pc, #148]	@ (800348c <MX_GPIO_Init+0x11c>)
 80033f6:	4b26      	ldr	r3, [pc, #152]	@ (8003490 <MX_GPIO_Init+0x120>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	0018      	movs	r0, r3
 80033fc:	f001 fd22 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin, GPIO_PIN_RESET);
 8003400:	4b24      	ldr	r3, [pc, #144]	@ (8003494 <MX_GPIO_Init+0x124>)
 8003402:	2200      	movs	r2, #0
 8003404:	210f      	movs	r1, #15
 8003406:	0018      	movs	r0, r3
 8003408:	f001 fd1c 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_R_Pin RGB_G_Pin LED1_RED_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin;
 800340c:	193b      	adds	r3, r7, r4
 800340e:	4a1e      	ldr	r2, [pc, #120]	@ (8003488 <MX_GPIO_Init+0x118>)
 8003410:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003412:	193b      	adds	r3, r7, r4
 8003414:	2201      	movs	r2, #1
 8003416:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	193b      	adds	r3, r7, r4
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	193b      	adds	r3, r7, r4
 8003420:	2200      	movs	r2, #0
 8003422:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	193a      	adds	r2, r7, r4
 8003426:	23a0      	movs	r3, #160	@ 0xa0
 8003428:	05db      	lsls	r3, r3, #23
 800342a:	0011      	movs	r1, r2
 800342c:	0018      	movs	r0, r3
 800342e:	f001 fba5 	bl	8004b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RGB_B_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RGB_B_Pin;
 8003432:	193b      	adds	r3, r7, r4
 8003434:	4a15      	ldr	r2, [pc, #84]	@ (800348c <MX_GPIO_Init+0x11c>)
 8003436:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003438:	193b      	adds	r3, r7, r4
 800343a:	2201      	movs	r2, #1
 800343c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	193b      	adds	r3, r7, r4
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	193b      	adds	r3, r7, r4
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344a:	193b      	adds	r3, r7, r4
 800344c:	4a10      	ldr	r2, [pc, #64]	@ (8003490 <MX_GPIO_Init+0x120>)
 800344e:	0019      	movs	r1, r3
 8003450:	0010      	movs	r0, r2
 8003452:	f001 fb93 	bl	8004b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_GREEN_Pin LED3_BLUE_Pin LED4_WHITE_Pin LED5_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin;
 8003456:	0021      	movs	r1, r4
 8003458:	187b      	adds	r3, r7, r1
 800345a:	220f      	movs	r2, #15
 800345c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2201      	movs	r2, #1
 8003462:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	187b      	adds	r3, r7, r1
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2200      	movs	r2, #0
 800346e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003470:	187b      	adds	r3, r7, r1
 8003472:	4a08      	ldr	r2, [pc, #32]	@ (8003494 <MX_GPIO_Init+0x124>)
 8003474:	0019      	movs	r1, r3
 8003476:	0010      	movs	r0, r2
 8003478:	f001 fb80 	bl	8004b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800347c:	46c0      	nop			@ (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b00b      	add	sp, #44	@ 0x2c
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	00008140 	.word	0x00008140
 800348c:	00001008 	.word	0x00001008
 8003490:	50000400 	.word	0x50000400
 8003494:	50000c00 	.word	0x50000c00

08003498 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
// SysTick Zamanlayıcı Geri Çağırma Fonksiyonu
void HAL_SYSTICK_Callback(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
SYSTickTimer++;
 800349c:	4b46      	ldr	r3, [pc, #280]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2001      	movs	r0, #1
 80034a4:	2100      	movs	r1, #0
 80034a6:	1812      	adds	r2, r2, r0
 80034a8:	414b      	adcs	r3, r1
 80034aa:	4943      	ldr	r1, [pc, #268]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 80034ac:	600a      	str	r2, [r1, #0]
 80034ae:	604b      	str	r3, [r1, #4]

if (SYSTickTimer % 1 == 0)
 80034b0:	4b41      	ldr	r3, [pc, #260]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
{
SysClkTim._1msn = 1;
 80034b6:	4b41      	ldr	r3, [pc, #260]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
}
if (SYSTickTimer % 10 == 0)
 80034bc:	4b3e      	ldr	r3, [pc, #248]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	220a      	movs	r2, #10
 80034c4:	2300      	movs	r3, #0
 80034c6:	f7fc ffeb 	bl	80004a0 <__aeabi_uldivmod>
 80034ca:	0010      	movs	r0, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	0003      	movs	r3, r0
 80034d0:	430b      	orrs	r3, r1
 80034d2:	d102      	bne.n	80034da <HAL_SYSTICK_Callback+0x42>
{
SysClkTim._10msn = 1;
 80034d4:	4b39      	ldr	r3, [pc, #228]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	705a      	strb	r2, [r3, #1]
}
if (SYSTickTimer % 50 == 0)
 80034da:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	2232      	movs	r2, #50	@ 0x32
 80034e2:	2300      	movs	r3, #0
 80034e4:	f7fc ffdc 	bl	80004a0 <__aeabi_uldivmod>
 80034e8:	0010      	movs	r0, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	0003      	movs	r3, r0
 80034ee:	430b      	orrs	r3, r1
 80034f0:	d102      	bne.n	80034f8 <HAL_SYSTICK_Callback+0x60>
{
SysClkTim._50msn = 1;
 80034f2:	4b32      	ldr	r3, [pc, #200]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	709a      	strb	r2, [r3, #2]
}
if (SYSTickTimer % 100 == 0)
 80034f8:	4b2f      	ldr	r3, [pc, #188]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	2264      	movs	r2, #100	@ 0x64
 8003500:	2300      	movs	r3, #0
 8003502:	f7fc ffcd 	bl	80004a0 <__aeabi_uldivmod>
 8003506:	0010      	movs	r0, r2
 8003508:	0019      	movs	r1, r3
 800350a:	0003      	movs	r3, r0
 800350c:	430b      	orrs	r3, r1
 800350e:	d102      	bne.n	8003516 <HAL_SYSTICK_Callback+0x7e>
{
SysClkTim._100msn = 1;
 8003510:	4b2a      	ldr	r3, [pc, #168]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 8003512:	2201      	movs	r2, #1
 8003514:	70da      	strb	r2, [r3, #3]
}
if (SYSTickTimer % 250 == 0)
 8003516:	4b28      	ldr	r3, [pc, #160]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	22fa      	movs	r2, #250	@ 0xfa
 800351e:	2300      	movs	r3, #0
 8003520:	f7fc ffbe 	bl	80004a0 <__aeabi_uldivmod>
 8003524:	0010      	movs	r0, r2
 8003526:	0019      	movs	r1, r3
 8003528:	0003      	movs	r3, r0
 800352a:	430b      	orrs	r3, r1
 800352c:	d102      	bne.n	8003534 <HAL_SYSTICK_Callback+0x9c>
{
SysClkTim._250msn = 1;
 800352e:	4b23      	ldr	r3, [pc, #140]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 8003530:	2201      	movs	r2, #1
 8003532:	711a      	strb	r2, [r3, #4]
}
if (SYSTickTimer % 500 == 0)
 8003534:	4b20      	ldr	r3, [pc, #128]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	22fa      	movs	r2, #250	@ 0xfa
 800353c:	0052      	lsls	r2, r2, #1
 800353e:	2300      	movs	r3, #0
 8003540:	f7fc ffae 	bl	80004a0 <__aeabi_uldivmod>
 8003544:	0010      	movs	r0, r2
 8003546:	0019      	movs	r1, r3
 8003548:	0003      	movs	r3, r0
 800354a:	430b      	orrs	r3, r1
 800354c:	d102      	bne.n	8003554 <HAL_SYSTICK_Callback+0xbc>
{
SysClkTim._500msn = 1;
 800354e:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 8003550:	2201      	movs	r2, #1
 8003552:	715a      	strb	r2, [r3, #5]
}
if (SYSTickTimer % 1000 == 0)
 8003554:	4b18      	ldr	r3, [pc, #96]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	22fa      	movs	r2, #250	@ 0xfa
 800355c:	0092      	lsls	r2, r2, #2
 800355e:	2300      	movs	r3, #0
 8003560:	f7fc ff9e 	bl	80004a0 <__aeabi_uldivmod>
 8003564:	0010      	movs	r0, r2
 8003566:	0019      	movs	r1, r3
 8003568:	0003      	movs	r3, r0
 800356a:	430b      	orrs	r3, r1
 800356c:	d102      	bne.n	8003574 <HAL_SYSTICK_Callback+0xdc>
{
SysClkTim._1sn = 1;
 800356e:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 8003570:	2201      	movs	r2, #1
 8003572:	719a      	strb	r2, [r3, #6]
}
if (SYSTickTimer % 2000 == 0)
 8003574:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	22fa      	movs	r2, #250	@ 0xfa
 800357c:	00d2      	lsls	r2, r2, #3
 800357e:	2300      	movs	r3, #0
 8003580:	f7fc ff8e 	bl	80004a0 <__aeabi_uldivmod>
 8003584:	0010      	movs	r0, r2
 8003586:	0019      	movs	r1, r3
 8003588:	0003      	movs	r3, r0
 800358a:	430b      	orrs	r3, r1
 800358c:	d102      	bne.n	8003594 <HAL_SYSTICK_Callback+0xfc>
{
SysClkTim._2sn = 1;
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 8003590:	2201      	movs	r2, #1
 8003592:	71da      	strb	r2, [r3, #7]
}
if (SYSTickTimer % 5000 == 0)
 8003594:	4b08      	ldr	r3, [pc, #32]	@ (80035b8 <HAL_SYSTICK_Callback+0x120>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
 800359a:	4a09      	ldr	r2, [pc, #36]	@ (80035c0 <HAL_SYSTICK_Callback+0x128>)
 800359c:	2300      	movs	r3, #0
 800359e:	f7fc ff7f 	bl	80004a0 <__aeabi_uldivmod>
 80035a2:	0010      	movs	r0, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	0003      	movs	r3, r0
 80035a8:	430b      	orrs	r3, r1
 80035aa:	d102      	bne.n	80035b2 <HAL_SYSTICK_Callback+0x11a>
{
SysClkTim._5sn = 1;
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <HAL_SYSTICK_Callback+0x124>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	721a      	strb	r2, [r3, #8]
}

}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200002f0 	.word	0x200002f0
 80035bc:	20000320 	.word	0x20000320
 80035c0:	00001388 	.word	0x00001388

080035c4 <platform_write>:
//platform_write ve platform_read Fonksiyonları
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80035c4:	b5b0      	push	{r4, r5, r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af04      	add	r7, sp, #16
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	0008      	movs	r0, r1
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	0019      	movs	r1, r3
 80035d2:	240b      	movs	r4, #11
 80035d4:	193b      	adds	r3, r7, r4
 80035d6:	1c02      	adds	r2, r0, #0
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	2508      	movs	r5, #8
 80035dc:	197b      	adds	r3, r7, r5
 80035de:	1c0a      	adds	r2, r1, #0
 80035e0:	801a      	strh	r2, [r3, #0]
HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg,
 80035e2:	193b      	adds	r3, r7, r4
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	23fa      	movs	r3, #250	@ 0xfa
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	197b      	adds	r3, r7, r5
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2301      	movs	r3, #1
 80035fc:	2133      	movs	r1, #51	@ 0x33
 80035fe:	f001 fcff 	bl	8005000 <HAL_I2C_Mem_Write>
I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);

return 0;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b004      	add	sp, #16
 800360a:	bdb0      	pop	{r4, r5, r7, pc}

0800360c <platform_read>:
* @param reg register to read
* @param bufp pointer to buffer that store the data read
* @param len number of consecutive register to read
*
*/static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af04      	add	r7, sp, #16
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	0008      	movs	r0, r1
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	0019      	movs	r1, r3
 800361a:	240b      	movs	r4, #11
 800361c:	193b      	adds	r3, r7, r4
 800361e:	1c02      	adds	r2, r0, #0
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	2508      	movs	r5, #8
 8003624:	197b      	adds	r3, r7, r5
 8003626:	1c0a      	adds	r2, r1, #0
 8003628:	801a      	strh	r2, [r3, #0]
HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg,
 800362a:	193b      	adds	r3, r7, r4
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b29a      	uxth	r2, r3
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	23fa      	movs	r3, #250	@ 0xfa
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	9302      	str	r3, [sp, #8]
 8003638:	197b      	adds	r3, r7, r5
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2301      	movs	r3, #1
 8003644:	2133      	movs	r1, #51	@ 0x33
 8003646:	f001 fe09 	bl	800525c <HAL_I2C_Mem_Read>
I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
return 0;
 800364a:	2300      	movs	r3, #0
}
 800364c:	0018      	movs	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	b004      	add	sp, #16
 8003652:	bdb0      	pop	{r4, r5, r7, pc}

08003654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003658:	b672      	cpsid	i
}
 800365a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	e7fd      	b.n	800365c <Error_Handler+0x8>

08003660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003666:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <HAL_MspInit+0x44>)
 8003668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_MspInit+0x44>)
 800366c:	2101      	movs	r1, #1
 800366e:	430a      	orrs	r2, r1
 8003670:	641a      	str	r2, [r3, #64]	@ 0x40
 8003672:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <HAL_MspInit+0x44>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	2201      	movs	r2, #1
 8003678:	4013      	ands	r3, r2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_MspInit+0x44>)
 8003680:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003682:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <HAL_MspInit+0x44>)
 8003684:	2180      	movs	r1, #128	@ 0x80
 8003686:	0549      	lsls	r1, r1, #21
 8003688:	430a      	orrs	r2, r1
 800368a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <HAL_MspInit+0x44>)
 800368e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003690:	2380      	movs	r3, #128	@ 0x80
 8003692:	055b      	lsls	r3, r3, #21
 8003694:	4013      	ands	r3, r2
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b08b      	sub	sp, #44	@ 0x2c
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	2414      	movs	r4, #20
 80036b2:	193b      	adds	r3, r7, r4
 80036b4:	0018      	movs	r0, r3
 80036b6:	2314      	movs	r3, #20
 80036b8:	001a      	movs	r2, r3
 80036ba:	2100      	movs	r1, #0
 80036bc:	f004 fbf6 	bl	8007eac <memset>
  if(hadc->Instance==ADC1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <HAL_ADC_MspInit+0x80>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d129      	bne.n	800371e <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80036ca:	4b18      	ldr	r3, [pc, #96]	@ (800372c <HAL_ADC_MspInit+0x84>)
 80036cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ce:	4b17      	ldr	r3, [pc, #92]	@ (800372c <HAL_ADC_MspInit+0x84>)
 80036d0:	2180      	movs	r1, #128	@ 0x80
 80036d2:	0349      	lsls	r1, r1, #13
 80036d4:	430a      	orrs	r2, r1
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80036d8:	4b14      	ldr	r3, [pc, #80]	@ (800372c <HAL_ADC_MspInit+0x84>)
 80036da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	035b      	lsls	r3, r3, #13
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e6:	4b11      	ldr	r3, [pc, #68]	@ (800372c <HAL_ADC_MspInit+0x84>)
 80036e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <HAL_ADC_MspInit+0x84>)
 80036ec:	2101      	movs	r1, #1
 80036ee:	430a      	orrs	r2, r1
 80036f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80036f2:	4b0e      	ldr	r3, [pc, #56]	@ (800372c <HAL_ADC_MspInit+0x84>)
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	2201      	movs	r2, #1
 80036f8:	4013      	ands	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = A1_IN4_NTC_Pin;
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	2210      	movs	r2, #16
 8003702:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003704:	193b      	adds	r3, r7, r4
 8003706:	2203      	movs	r2, #3
 8003708:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	193b      	adds	r3, r7, r4
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(A1_IN4_NTC_GPIO_Port, &GPIO_InitStruct);
 8003710:	193a      	adds	r2, r7, r4
 8003712:	23a0      	movs	r3, #160	@ 0xa0
 8003714:	05db      	lsls	r3, r3, #23
 8003716:	0011      	movs	r1, r2
 8003718:	0018      	movs	r0, r3
 800371a:	f001 fa2f 	bl	8004b7c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b00b      	add	sp, #44	@ 0x2c
 8003724:	bd90      	pop	{r4, r7, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	40012400 	.word	0x40012400
 800372c:	40021000 	.word	0x40021000

08003730 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b091      	sub	sp, #68	@ 0x44
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	232c      	movs	r3, #44	@ 0x2c
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	0018      	movs	r0, r3
 800373e:	2314      	movs	r3, #20
 8003740:	001a      	movs	r2, r3
 8003742:	2100      	movs	r1, #0
 8003744:	f004 fbb2 	bl	8007eac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003748:	2414      	movs	r4, #20
 800374a:	193b      	adds	r3, r7, r4
 800374c:	0018      	movs	r0, r3
 800374e:	2318      	movs	r3, #24
 8003750:	001a      	movs	r2, r3
 8003752:	2100      	movs	r1, #0
 8003754:	f004 fbaa 	bl	8007eac <memset>
  if(hi2c->Instance==I2C1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a22      	ldr	r2, [pc, #136]	@ (80037e8 <HAL_I2C_MspInit+0xb8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d13d      	bne.n	80037de <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003762:	193b      	adds	r3, r7, r4
 8003764:	2220      	movs	r2, #32
 8003766:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003768:	193b      	adds	r3, r7, r4
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800376e:	193b      	adds	r3, r7, r4
 8003770:	0018      	movs	r0, r3
 8003772:	f002 ff15 	bl	80065a0 <HAL_RCCEx_PeriphCLKConfig>
 8003776:	1e03      	subs	r3, r0, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800377a:	f7ff ff6b 	bl	8003654 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <HAL_I2C_MspInit+0xbc>)
 8003780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003782:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <HAL_I2C_MspInit+0xbc>)
 8003784:	2102      	movs	r1, #2
 8003786:	430a      	orrs	r2, r1
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34
 800378a:	4b18      	ldr	r3, [pc, #96]	@ (80037ec <HAL_I2C_MspInit+0xbc>)
 800378c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003796:	212c      	movs	r1, #44	@ 0x2c
 8003798:	187b      	adds	r3, r7, r1
 800379a:	22c0      	movs	r2, #192	@ 0xc0
 800379c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2212      	movs	r2, #18
 80037a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2200      	movs	r2, #0
 80037ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	2206      	movs	r2, #6
 80037b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	4a0d      	ldr	r2, [pc, #52]	@ (80037f0 <HAL_I2C_MspInit+0xc0>)
 80037ba:	0019      	movs	r1, r3
 80037bc:	0010      	movs	r0, r2
 80037be:	f001 f9dd 	bl	8004b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_I2C_MspInit+0xbc>)
 80037c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <HAL_I2C_MspInit+0xbc>)
 80037c8:	2180      	movs	r1, #128	@ 0x80
 80037ca:	0389      	lsls	r1, r1, #14
 80037cc:	430a      	orrs	r2, r1
 80037ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_I2C_MspInit+0xbc>)
 80037d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	039b      	lsls	r3, r3, #14
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b011      	add	sp, #68	@ 0x44
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	40005400 	.word	0x40005400
 80037ec:	40021000 	.word	0x40021000
 80037f0:	50000400 	.word	0x50000400

080037f4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b08b      	sub	sp, #44	@ 0x2c
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037fc:	2410      	movs	r4, #16
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	0018      	movs	r0, r3
 8003802:	2318      	movs	r3, #24
 8003804:	001a      	movs	r2, r3
 8003806:	2100      	movs	r1, #0
 8003808:	f004 fb50 	bl	8007eac <memset>
  if(hrtc->Instance==RTC)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <HAL_RTC_MspInit+0x74>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d124      	bne.n	8003860 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003816:	193b      	adds	r3, r7, r4
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	0292      	lsls	r2, r2, #10
 800381c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800381e:	193b      	adds	r3, r7, r4
 8003820:	2280      	movs	r2, #128	@ 0x80
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003826:	193b      	adds	r3, r7, r4
 8003828:	0018      	movs	r0, r3
 800382a:	f002 feb9 	bl	80065a0 <HAL_RCCEx_PeriphCLKConfig>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d001      	beq.n	8003836 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003832:	f7ff ff0f 	bl	8003654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <HAL_RTC_MspInit+0x78>)
 8003838:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800383a:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <HAL_RTC_MspInit+0x78>)
 800383c:	2180      	movs	r1, #128	@ 0x80
 800383e:	0209      	lsls	r1, r1, #8
 8003840:	430a      	orrs	r2, r1
 8003842:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003844:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RTC_MspInit+0x78>)
 8003846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003848:	4b08      	ldr	r3, [pc, #32]	@ (800386c <HAL_RTC_MspInit+0x78>)
 800384a:	2180      	movs	r1, #128	@ 0x80
 800384c:	00c9      	lsls	r1, r1, #3
 800384e:	430a      	orrs	r2, r1
 8003850:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003852:	4b06      	ldr	r3, [pc, #24]	@ (800386c <HAL_RTC_MspInit+0x78>)
 8003854:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003860:	46c0      	nop			@ (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b00b      	add	sp, #44	@ 0x2c
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	40002800 	.word	0x40002800
 800386c:	40021000 	.word	0x40021000

08003870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003874:	46c0      	nop			@ (mov r8, r8)
 8003876:	e7fd      	b.n	8003874 <NMI_Handler+0x4>

08003878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	e7fd      	b.n	800387c <HardFault_Handler+0x4>

08003880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003898:	f000 f95e 	bl	8003b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800389c:	f001 f966 	bl	8004b6c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	af00      	add	r7, sp, #0
  return 1;
 80038aa:	2301      	movs	r3, #1
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <_kill>:

int _kill(int pid, int sig)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038bc:	f004 fb50 	bl	8007f60 <__errno>
 80038c0:	0003      	movs	r3, r0
 80038c2:	2216      	movs	r2, #22
 80038c4:	601a      	str	r2, [r3, #0]
  return -1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	425b      	negs	r3, r3
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <_exit>:

void _exit (int status)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038da:	2301      	movs	r3, #1
 80038dc:	425a      	negs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0011      	movs	r1, r2
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7ff ffe5 	bl	80038b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	e7fd      	b.n	80038e8 <_exit+0x16>

080038ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e00a      	b.n	8003914 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038fe:	e000      	b.n	8003902 <_read+0x16>
 8003900:	bf00      	nop
 8003902:	0001      	movs	r1, r0
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	60ba      	str	r2, [r7, #8]
 800390a:	b2ca      	uxtb	r2, r1
 800390c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3301      	adds	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	dbf0      	blt.n	80038fe <_read+0x12>
  }

  return len;
 800391c:	687b      	ldr	r3, [r7, #4]
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b006      	add	sp, #24
 8003924:	bd80      	pop	{r7, pc}

08003926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e009      	b.n	800394c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	60ba      	str	r2, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	0018      	movs	r0, r3
 8003942:	e000      	b.n	8003946 <_write+0x20>
 8003944:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3301      	adds	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	dbf1      	blt.n	8003938 <_write+0x12>
  }
  return len;
 8003954:	687b      	ldr	r3, [r7, #4]
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b006      	add	sp, #24
 800395c:	bd80      	pop	{r7, pc}

0800395e <_close>:

int _close(int file)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003966:	2301      	movs	r3, #1
 8003968:	425b      	negs	r3, r3
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b002      	add	sp, #8
 8003970:	bd80      	pop	{r7, pc}

08003972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2280      	movs	r2, #128	@ 0x80
 8003980:	0192      	lsls	r2, r2, #6
 8003982:	605a      	str	r2, [r3, #4]
  return 0;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b002      	add	sp, #8
 800398c:	bd80      	pop	{r7, pc}

0800398e <_isatty>:

int _isatty(int file)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003996:	2301      	movs	r3, #1
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b004      	add	sp, #16
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c0:	4a14      	ldr	r2, [pc, #80]	@ (8003a14 <_sbrk+0x5c>)
 80039c2:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <_sbrk+0x60>)
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039cc:	4b13      	ldr	r3, [pc, #76]	@ (8003a1c <_sbrk+0x64>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d4:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <_sbrk+0x64>)
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <_sbrk+0x68>)
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039da:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <_sbrk+0x64>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d207      	bcs.n	80039f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e8:	f004 faba 	bl	8007f60 <__errno>
 80039ec:	0003      	movs	r3, r0
 80039ee:	220c      	movs	r2, #12
 80039f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	425b      	negs	r3, r3
 80039f6:	e009      	b.n	8003a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <_sbrk+0x64>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039fe:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <_sbrk+0x64>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	18d2      	adds	r2, r2, r3
 8003a06:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <_sbrk+0x64>)
 8003a08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b006      	add	sp, #24
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20002000 	.word	0x20002000
 8003a18:	00000400 	.word	0x00000400
 8003a1c:	20000354 	.word	0x20000354
 8003a20:	200008b0 	.word	0x200008b0

08003a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a30:	480d      	ldr	r0, [pc, #52]	@ (8003a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a34:	f7ff fff6 	bl	8003a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a38:	480c      	ldr	r0, [pc, #48]	@ (8003a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003a3a:	490d      	ldr	r1, [pc, #52]	@ (8003a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a74 <LoopForever+0xe>)
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a40:	e002      	b.n	8003a48 <LoopCopyDataInit>

08003a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a46:	3304      	adds	r3, #4

08003a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a4c:	d3f9      	bcc.n	8003a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a50:	4c0a      	ldr	r4, [pc, #40]	@ (8003a7c <LoopForever+0x16>)
  movs r3, #0
 8003a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a54:	e001      	b.n	8003a5a <LoopFillZerobss>

08003a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a58:	3204      	adds	r2, #4

08003a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a5c:	d3fb      	bcc.n	8003a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a5e:	f004 fa85 	bl	8007f6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a62:	f7ff f953 	bl	8002d0c <main>

08003a66 <LoopForever>:

LoopForever:
  b LoopForever
 8003a66:	e7fe      	b.n	8003a66 <LoopForever>
  ldr   r0, =_estack
 8003a68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a70:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003a74:	0800b74c 	.word	0x0800b74c
  ldr r2, =_sbss
 8003a78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003a7c:	200008b0 	.word	0x200008b0

08003a80 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a80:	e7fe      	b.n	8003a80 <ADC1_IRQHandler>
	...

08003a84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_Init+0x3c>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <HAL_Init+0x3c>)
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	0049      	lsls	r1, r1, #1
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a9e:	2003      	movs	r0, #3
 8003aa0:	f000 f810 	bl	8003ac4 <HAL_InitTick>
 8003aa4:	1e03      	subs	r3, r0, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e001      	b.n	8003ab4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003ab0:	f7ff fdd6 	bl	8003660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ab4:	1dfb      	adds	r3, r7, #7
 8003ab6:	781b      	ldrb	r3, [r3, #0]
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b002      	add	sp, #8
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40022000 	.word	0x40022000

08003ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003acc:	230f      	movs	r3, #15
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <HAL_InitTick+0x88>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02b      	beq.n	8003b34 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003adc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b50 <HAL_InitTick+0x8c>)
 8003ade:	681c      	ldr	r4, [r3, #0]
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <HAL_InitTick+0x88>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	23fa      	movs	r3, #250	@ 0xfa
 8003ae8:	0098      	lsls	r0, r3, #2
 8003aea:	f7fc fb25 	bl	8000138 <__udivsi3>
 8003aee:	0003      	movs	r3, r0
 8003af0:	0019      	movs	r1, r3
 8003af2:	0020      	movs	r0, r4
 8003af4:	f7fc fb20 	bl	8000138 <__udivsi3>
 8003af8:	0003      	movs	r3, r0
 8003afa:	0018      	movs	r0, r3
 8003afc:	f001 f829 	bl	8004b52 <HAL_SYSTICK_Config>
 8003b00:	1e03      	subs	r3, r0, #0
 8003b02:	d112      	bne.n	8003b2a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d80a      	bhi.n	8003b20 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	425b      	negs	r3, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	0018      	movs	r0, r3
 8003b14:	f001 f808 	bl	8004b28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b18:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <HAL_InitTick+0x90>)
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e00d      	b.n	8003b3c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003b20:	230f      	movs	r3, #15
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e008      	b.n	8003b3c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b2a:	230f      	movs	r3, #15
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e003      	b.n	8003b3c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b34:	230f      	movs	r3, #15
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b005      	add	sp, #20
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	20000008 	.word	0x20000008
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <HAL_IncTick+0x1c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	001a      	movs	r2, r3
 8003b62:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_IncTick+0x20>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	18d2      	adds	r2, r2, r3
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_IncTick+0x20>)
 8003b6a:	601a      	str	r2, [r3, #0]
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	20000008 	.word	0x20000008
 8003b78:	20000358 	.word	0x20000358

08003b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b80:	4b02      	ldr	r3, [pc, #8]	@ (8003b8c <HAL_GetTick+0x10>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	20000358 	.word	0x20000358

08003b90 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a05      	ldr	r2, [pc, #20]	@ (8003bb4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003ba0:	401a      	ands	r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	fe3fffff 	.word	0xfe3fffff

08003bb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	23e0      	movs	r3, #224	@ 0xe0
 8003bc6:	045b      	lsls	r3, r3, #17
 8003bc8:	4013      	ands	r3, r2
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	2104      	movs	r1, #4
 8003be6:	400a      	ands	r2, r1
 8003be8:	2107      	movs	r1, #7
 8003bea:	4091      	lsls	r1, r2
 8003bec:	000a      	movs	r2, r1
 8003bee:	43d2      	mvns	r2, r2
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	400b      	ands	r3, r1
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4099      	lsls	r1, r3
 8003bfc:	000b      	movs	r3, r1
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b004      	add	sp, #16
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	2104      	movs	r1, #4
 8003c1e:	400a      	ands	r2, r1
 8003c20:	2107      	movs	r1, #7
 8003c22:	4091      	lsls	r1, r2
 8003c24:	000a      	movs	r2, r1
 8003c26:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2104      	movs	r1, #4
 8003c2c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c2e:	40da      	lsrs	r2, r3
 8003c30:	0013      	movs	r3, r2
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b002      	add	sp, #8
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	23c0      	movs	r3, #192	@ 0xc0
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	211f      	movs	r1, #31
 8003c70:	400a      	ands	r2, r1
 8003c72:	210f      	movs	r1, #15
 8003c74:	4091      	lsls	r1, r2
 8003c76:	000a      	movs	r2, r1
 8003c78:	43d2      	mvns	r2, r2
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0e9b      	lsrs	r3, r3, #26
 8003c80:	210f      	movs	r1, #15
 8003c82:	4019      	ands	r1, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	201f      	movs	r0, #31
 8003c88:	4003      	ands	r3, r0
 8003c8a:	4099      	lsls	r1, r3
 8003c8c:	000b      	movs	r3, r1
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b004      	add	sp, #16
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	035b      	lsls	r3, r3, #13
 8003cae:	0b5b      	lsrs	r3, r3, #13
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	0352      	lsls	r2, r2, #13
 8003cd0:	0b52      	lsrs	r2, r2, #13
 8003cd2:	43d2      	mvns	r2, r2
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	0212      	lsls	r2, r2, #8
 8003cf8:	43d2      	mvns	r2, r2
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	400b      	ands	r3, r1
 8003d04:	4904      	ldr	r1, [pc, #16]	@ (8003d18 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003d06:	400b      	ands	r3, r1
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b004      	add	sp, #16
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	07ffff00 	.word	0x07ffff00

08003d1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2280      	movs	r2, #128	@ 0x80
 8003d2e:	0552      	lsls	r2, r2, #21
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	6fffffe8 	.word	0x6fffffe8

08003d44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	2380      	movs	r3, #128	@ 0x80
 8003d52:	055b      	lsls	r3, r3, #21
 8003d54:	401a      	ands	r2, r3
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	055b      	lsls	r3, r3, #21
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d101      	bne.n	8003d62 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	0018      	movs	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a04      	ldr	r2, [pc, #16]	@ (8003d8c <LL_ADC_Enable+0x20>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	7fffffe8 	.word	0x7fffffe8

08003d90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	@ (8003db0 <LL_ADC_Disable+0x20>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2202      	movs	r2, #2
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003da8:	46c0      	nop			@ (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	7fffffe8 	.word	0x7fffffe8

08003db4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <LL_ADC_IsEnabled+0x18>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <LL_ADC_IsEnabled+0x1a>
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2202      	movs	r2, #2
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d101      	bne.n	8003dee <LL_ADC_IsDisableOngoing+0x18>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <LL_ADC_IsDisableOngoing+0x1a>
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b002      	add	sp, #8
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a04      	ldr	r2, [pc, #16]	@ (8003e18 <LL_ADC_REG_StartConversion+0x20>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	2204      	movs	r2, #4
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e10:	46c0      	nop			@ (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	7fffffe8 	.word	0x7fffffe8

08003e1c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a04      	ldr	r2, [pc, #16]	@ (8003e3c <LL_ADC_REG_StopConversion+0x20>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	7fffffe8 	.word	0x7fffffe8

08003e40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d101      	bne.n	8003e58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b002      	add	sp, #8
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6c:	231f      	movs	r3, #31
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e17f      	b.n	800418a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fc07 	bl	80036a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2254      	movs	r2, #84	@ 0x54
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff ff49 	bl	8003d44 <LL_ADC_IsInternalRegulatorEnabled>
 8003eb2:	1e03      	subs	r3, r0, #0
 8003eb4:	d115      	bne.n	8003ee2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7ff ff2e 	bl	8003d1c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ec0:	4bb4      	ldr	r3, [pc, #720]	@ (8004194 <HAL_ADC_Init+0x330>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	49b4      	ldr	r1, [pc, #720]	@ (8004198 <HAL_ADC_Init+0x334>)
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7fc f936 	bl	8000138 <__udivsi3>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ed4:	e002      	b.n	8003edc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f9      	bne.n	8003ed6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff ff2c 	bl	8003d44 <LL_ADC_IsInternalRegulatorEnabled>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d10f      	bne.n	8003f10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	2201      	movs	r2, #1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f08:	231f      	movs	r3, #31
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff ff93 	bl	8003e40 <LL_ADC_REG_IsConversionOngoing>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	2210      	movs	r2, #16
 8003f24:	4013      	ands	r3, r2
 8003f26:	d000      	beq.n	8003f2a <HAL_ADC_Init+0xc6>
 8003f28:	e122      	b.n	8004170 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d000      	beq.n	8003f32 <HAL_ADC_Init+0xce>
 8003f30:	e11e      	b.n	8004170 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f36:	4a99      	ldr	r2, [pc, #612]	@ (800419c <HAL_ADC_Init+0x338>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff ff34 	bl	8003db4 <LL_ADC_IsEnabled>
 8003f4c:	1e03      	subs	r3, r0, #0
 8003f4e:	d000      	beq.n	8003f52 <HAL_ADC_Init+0xee>
 8003f50:	e0ad      	b.n	80040ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	7e1b      	ldrb	r3, [r3, #24]
 8003f5a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003f5c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7e5b      	ldrb	r3, [r3, #25]
 8003f62:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f64:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7e9b      	ldrb	r3, [r3, #26]
 8003f6a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f6c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_ADC_Init+0x118>
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	015b      	lsls	r3, r3, #5
 8003f7a:	e000      	b.n	8003f7e <HAL_ADC_Init+0x11a>
 8003f7c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f7e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f84:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da04      	bge.n	8003f98 <HAL_ADC_Init+0x134>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	e001      	b.n	8003f9c <HAL_ADC_Init+0x138>
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003f9c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	212c      	movs	r1, #44	@ 0x2c
 8003fa2:	5c5b      	ldrb	r3, [r3, r1]
 8003fa4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003fa6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d115      	bne.n	8003fe4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	7e9b      	ldrb	r3, [r3, #26]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d105      	bne.n	8003fcc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2280      	movs	r2, #128	@ 0x80
 8003fc4:	0252      	lsls	r2, r2, #9
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e00b      	b.n	8003fe4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fdc:	2201      	movs	r2, #1
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff0:	23e0      	movs	r3, #224	@ 0xe0
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a65      	ldr	r2, [pc, #404]	@ (80041a0 <HAL_ADC_Init+0x33c>)
 800400a:	4013      	ands	r3, r2
 800400c:	0019      	movs	r1, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0f9b      	lsrs	r3, r3, #30
 800401e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004024:	4313      	orrs	r3, r2
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	223c      	movs	r2, #60	@ 0x3c
 8004030:	5c9b      	ldrb	r3, [r3, r2]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d111      	bne.n	800405a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	0f9b      	lsrs	r3, r3, #30
 800403c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004042:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004048:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800404e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	2201      	movs	r2, #1
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4a50      	ldr	r2, [pc, #320]	@ (80041a4 <HAL_ADC_Init+0x340>)
 8004062:	4013      	ands	r3, r2
 8004064:	0019      	movs	r1, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	430a      	orrs	r2, r1
 800406e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	23c0      	movs	r3, #192	@ 0xc0
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	429a      	cmp	r2, r3
 800407a:	d018      	beq.n	80040ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004080:	2380      	movs	r3, #128	@ 0x80
 8004082:	05db      	lsls	r3, r3, #23
 8004084:	429a      	cmp	r2, r3
 8004086:	d012      	beq.n	80040ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800408c:	2380      	movs	r3, #128	@ 0x80
 800408e:	061b      	lsls	r3, r3, #24
 8004090:	429a      	cmp	r2, r3
 8004092:	d00c      	beq.n	80040ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004094:	4b44      	ldr	r3, [pc, #272]	@ (80041a8 <HAL_ADC_Init+0x344>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a44      	ldr	r2, [pc, #272]	@ (80041ac <HAL_ADC_Init+0x348>)
 800409a:	4013      	ands	r3, r2
 800409c:	0019      	movs	r1, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	23f0      	movs	r3, #240	@ 0xf0
 80040a4:	039b      	lsls	r3, r3, #14
 80040a6:	401a      	ands	r2, r3
 80040a8:	4b3f      	ldr	r3, [pc, #252]	@ (80041a8 <HAL_ADC_Init+0x344>)
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b6:	001a      	movs	r2, r3
 80040b8:	2100      	movs	r1, #0
 80040ba:	f7ff fd8a 	bl	8003bd2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	493a      	ldr	r1, [pc, #232]	@ (80041b0 <HAL_ADC_Init+0x34c>)
 80040c8:	001a      	movs	r2, r3
 80040ca:	f7ff fd82 	bl	8003bd2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2110      	movs	r1, #16
 80040e2:	4249      	negs	r1, r1
 80040e4:	430a      	orrs	r2, r1
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80040e8:	e018      	b.n	800411c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	039b      	lsls	r3, r3, #14
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d112      	bne.n	800411c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	3b01      	subs	r3, #1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	221c      	movs	r2, #28
 8004106:	4013      	ands	r3, r2
 8004108:	2210      	movs	r2, #16
 800410a:	4252      	negs	r2, r2
 800410c:	409a      	lsls	r2, r3
 800410e:	0011      	movs	r1, r2
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2100      	movs	r1, #0
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff fd72 	bl	8003c0c <LL_ADC_GetSamplingTimeCommonChannels>
 8004128:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800412e:	429a      	cmp	r2, r3
 8004130:	d10b      	bne.n	800414a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	2203      	movs	r2, #3
 800413e:	4393      	bics	r3, r2
 8004140:	2201      	movs	r2, #1
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004148:	e01c      	b.n	8004184 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	2212      	movs	r2, #18
 8004150:	4393      	bics	r3, r2
 8004152:	2210      	movs	r2, #16
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415e:	2201      	movs	r2, #1
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004166:	231f      	movs	r3, #31
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800416e:	e009      	b.n	8004184 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004174:	2210      	movs	r2, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800417c:	231f      	movs	r3, #31
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004184:	231f      	movs	r3, #31
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	781b      	ldrb	r3, [r3, #0]
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b008      	add	sp, #32
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	20000000 	.word	0x20000000
 8004198:	00030d40 	.word	0x00030d40
 800419c:	fffffefd 	.word	0xfffffefd
 80041a0:	ffde0201 	.word	0xffde0201
 80041a4:	1ffffc02 	.word	0x1ffffc02
 80041a8:	40012708 	.word	0x40012708
 80041ac:	ffc3ffff 	.word	0xffc3ffff
 80041b0:	07ffff04 	.word	0x07ffff04

080041b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7ff fe3d 	bl	8003e40 <LL_ADC_REG_IsConversionOngoing>
 80041c6:	1e03      	subs	r3, r0, #0
 80041c8:	d135      	bne.n	8004236 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2254      	movs	r2, #84	@ 0x54
 80041ce:	5c9b      	ldrb	r3, [r3, r2]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_Start+0x24>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e035      	b.n	8004244 <HAL_ADC_Start+0x90>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2254      	movs	r2, #84	@ 0x54
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041e0:	250f      	movs	r5, #15
 80041e2:	197c      	adds	r4, r7, r5
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fb28 	bl	800483c <ADC_Enable>
 80041ec:	0003      	movs	r3, r0
 80041ee:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041f0:	197b      	adds	r3, r7, r5
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d119      	bne.n	800422c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	4a13      	ldr	r2, [pc, #76]	@ (800424c <HAL_ADC_Start+0x98>)
 80041fe:	4013      	ands	r3, r2
 8004200:	2280      	movs	r2, #128	@ 0x80
 8004202:	0052      	lsls	r2, r2, #1
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	221c      	movs	r2, #28
 8004216:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2254      	movs	r2, #84	@ 0x54
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0018      	movs	r0, r3
 8004226:	f7ff fde7 	bl	8003df8 <LL_ADC_REG_StartConversion>
 800422a:	e008      	b.n	800423e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2254      	movs	r2, #84	@ 0x54
 8004230:	2100      	movs	r1, #0
 8004232:	5499      	strb	r1, [r3, r2]
 8004234:	e003      	b.n	800423e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004236:	230f      	movs	r3, #15
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2202      	movs	r2, #2
 800423c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800423e:	230f      	movs	r3, #15
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	781b      	ldrb	r3, [r3, #0]
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b004      	add	sp, #16
 800424a:	bdb0      	pop	{r4, r5, r7, pc}
 800424c:	fffff0fe 	.word	0xfffff0fe

08004250 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004250:	b5b0      	push	{r4, r5, r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2254      	movs	r2, #84	@ 0x54
 800425c:	5c9b      	ldrb	r3, [r3, r2]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_ADC_Stop+0x16>
 8004262:	2302      	movs	r3, #2
 8004264:	e029      	b.n	80042ba <HAL_ADC_Stop+0x6a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2254      	movs	r2, #84	@ 0x54
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800426e:	250f      	movs	r5, #15
 8004270:	197c      	adds	r4, r7, r5
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0018      	movs	r0, r3
 8004276:	f000 fa9f 	bl	80047b8 <ADC_ConversionStop>
 800427a:	0003      	movs	r3, r0
 800427c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800427e:	197b      	adds	r3, r7, r5
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d112      	bne.n	80042ac <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004286:	197c      	adds	r4, r7, r5
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0018      	movs	r0, r3
 800428c:	f000 fb5c 	bl	8004948 <ADC_Disable>
 8004290:	0003      	movs	r3, r0
 8004292:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004294:	197b      	adds	r3, r7, r5
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a0:	4a08      	ldr	r2, [pc, #32]	@ (80042c4 <HAL_ADC_Stop+0x74>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	2201      	movs	r2, #1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2254      	movs	r2, #84	@ 0x54
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80042b4:	230f      	movs	r3, #15
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bdb0      	pop	{r4, r5, r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	fffffefe 	.word	0xfffffefe

080042c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d102      	bne.n	80042e0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80042da:	2308      	movs	r3, #8
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e00f      	b.n	8004300 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4013      	ands	r3, r2
 80042ea:	d007      	beq.n	80042fc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f0:	2220      	movs	r2, #32
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e072      	b.n	80043e2 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80042fc:	2304      	movs	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004300:	f7ff fc3c 	bl	8003b7c <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004308:	e01f      	b.n	800434a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	d01c      	beq.n	800434a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004310:	f7ff fc34 	bl	8003b7c <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <HAL_ADC_PollForConversion+0x5e>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d111      	bne.n	800434a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4013      	ands	r3, r2
 8004330:	d10b      	bne.n	800434a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	2204      	movs	r2, #4
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2254      	movs	r2, #84	@ 0x54
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e04b      	b.n	80043e2 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	d0d9      	beq.n	800430a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	2280      	movs	r2, #128	@ 0x80
 800435c:	0092      	lsls	r2, r2, #2
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff fc66 	bl	8003c3a <LL_ADC_REG_IsTriggerSourceSWStart>
 800436e:	1e03      	subs	r3, r0, #0
 8004370:	d02e      	beq.n	80043d0 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	7e9b      	ldrb	r3, [r3, #26]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d12a      	bne.n	80043d0 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2208      	movs	r2, #8
 8004382:	4013      	ands	r3, r2
 8004384:	2b08      	cmp	r3, #8
 8004386:	d123      	bne.n	80043d0 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0018      	movs	r0, r3
 800438e:	f7ff fd57 	bl	8003e40 <LL_ADC_REG_IsConversionOngoing>
 8004392:	1e03      	subs	r3, r0, #0
 8004394:	d110      	bne.n	80043b8 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	210c      	movs	r1, #12
 80043a2:	438a      	bics	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	4a10      	ldr	r2, [pc, #64]	@ (80043ec <HAL_ADC_PollForConversion+0x124>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	2201      	movs	r2, #1
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80043b6:	e00b      	b.n	80043d0 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	2220      	movs	r2, #32
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c8:	2201      	movs	r2, #1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7e1b      	ldrb	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	220c      	movs	r2, #12
 80043de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	fffffefe 	.word	0xfffffefe

080043f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004412:	2317      	movs	r3, #23
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2254      	movs	r2, #84	@ 0x54
 8004422:	5c9b      	ldrb	r3, [r3, r2]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_ADC_ConfigChannel+0x24>
 8004428:	2302      	movs	r3, #2
 800442a:	e1c0      	b.n	80047ae <HAL_ADC_ConfigChannel+0x3a6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2254      	movs	r2, #84	@ 0x54
 8004430:	2101      	movs	r1, #1
 8004432:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fd01 	bl	8003e40 <LL_ADC_REG_IsConversionOngoing>
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	d000      	beq.n	8004444 <HAL_ADC_ConfigChannel+0x3c>
 8004442:	e1a3      	b.n	800478c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d100      	bne.n	800444e <HAL_ADC_ConfigChannel+0x46>
 800444c:	e143      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	429a      	cmp	r2, r3
 8004458:	d004      	beq.n	8004464 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800445e:	4ac1      	ldr	r2, [pc, #772]	@ (8004764 <HAL_ADC_ConfigChannel+0x35c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0019      	movs	r1, r3
 800446e:	0010      	movs	r0, r2
 8004470:	f7ff fc14 	bl	8003c9c <LL_ADC_REG_SetSequencerChAdd>
 8004474:	e0c9      	b.n	800460a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	211f      	movs	r1, #31
 8004480:	400b      	ands	r3, r1
 8004482:	210f      	movs	r1, #15
 8004484:	4099      	lsls	r1, r3
 8004486:	000b      	movs	r3, r1
 8004488:	43db      	mvns	r3, r3
 800448a:	4013      	ands	r3, r2
 800448c:	0019      	movs	r1, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	035b      	lsls	r3, r3, #13
 8004494:	0b5b      	lsrs	r3, r3, #13
 8004496:	d105      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x9c>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0e9b      	lsrs	r3, r3, #26
 800449e:	221f      	movs	r2, #31
 80044a0:	4013      	ands	r3, r2
 80044a2:	e098      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	d000      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0xa8>
 80044ae:	e091      	b.n	80045d4 <HAL_ADC_ConfigChannel+0x1cc>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2202      	movs	r2, #2
 80044b6:	4013      	ands	r3, r2
 80044b8:	d000      	beq.n	80044bc <HAL_ADC_ConfigChannel+0xb4>
 80044ba:	e089      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x1c8>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2204      	movs	r2, #4
 80044c2:	4013      	ands	r3, r2
 80044c4:	d000      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0xc0>
 80044c6:	e081      	b.n	80045cc <HAL_ADC_ConfigChannel+0x1c4>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2208      	movs	r2, #8
 80044ce:	4013      	ands	r3, r2
 80044d0:	d000      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0xcc>
 80044d2:	e079      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x1c0>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2210      	movs	r2, #16
 80044da:	4013      	ands	r3, r2
 80044dc:	d000      	beq.n	80044e0 <HAL_ADC_ConfigChannel+0xd8>
 80044de:	e071      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x1bc>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2220      	movs	r2, #32
 80044e6:	4013      	ands	r3, r2
 80044e8:	d000      	beq.n	80044ec <HAL_ADC_ConfigChannel+0xe4>
 80044ea:	e069      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x1b8>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2240      	movs	r2, #64	@ 0x40
 80044f2:	4013      	ands	r3, r2
 80044f4:	d000      	beq.n	80044f8 <HAL_ADC_ConfigChannel+0xf0>
 80044f6:	e061      	b.n	80045bc <HAL_ADC_ConfigChannel+0x1b4>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2280      	movs	r2, #128	@ 0x80
 80044fe:	4013      	ands	r3, r2
 8004500:	d000      	beq.n	8004504 <HAL_ADC_ConfigChannel+0xfc>
 8004502:	e059      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x1b0>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4013      	ands	r3, r2
 800450e:	d151      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x1ac>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4013      	ands	r3, r2
 800451a:	d149      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x1a8>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	@ 0x80
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4013      	ands	r3, r2
 8004526:	d141      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x1a4>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	4013      	ands	r3, r2
 8004532:	d139      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x1a0>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	4013      	ands	r3, r2
 800453e:	d131      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x19c>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	2380      	movs	r3, #128	@ 0x80
 8004546:	019b      	lsls	r3, r3, #6
 8004548:	4013      	ands	r3, r2
 800454a:	d129      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x198>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2380      	movs	r3, #128	@ 0x80
 8004552:	01db      	lsls	r3, r3, #7
 8004554:	4013      	ands	r3, r2
 8004556:	d121      	bne.n	800459c <HAL_ADC_ConfigChannel+0x194>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2380      	movs	r3, #128	@ 0x80
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	4013      	ands	r3, r2
 8004562:	d119      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x190>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	025b      	lsls	r3, r3, #9
 800456c:	4013      	ands	r3, r2
 800456e:	d111      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x18c>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2380      	movs	r3, #128	@ 0x80
 8004576:	029b      	lsls	r3, r3, #10
 8004578:	4013      	ands	r3, r2
 800457a:	d109      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x188>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	@ 0x80
 8004582:	02db      	lsls	r3, r3, #11
 8004584:	4013      	ands	r3, r2
 8004586:	d001      	beq.n	800458c <HAL_ADC_ConfigChannel+0x184>
 8004588:	2312      	movs	r3, #18
 800458a:	e024      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 800458c:	2300      	movs	r3, #0
 800458e:	e022      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 8004590:	2311      	movs	r3, #17
 8004592:	e020      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 8004594:	2310      	movs	r3, #16
 8004596:	e01e      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 8004598:	230f      	movs	r3, #15
 800459a:	e01c      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 800459c:	230e      	movs	r3, #14
 800459e:	e01a      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045a0:	230d      	movs	r3, #13
 80045a2:	e018      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045a4:	230c      	movs	r3, #12
 80045a6:	e016      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045a8:	230b      	movs	r3, #11
 80045aa:	e014      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045ac:	230a      	movs	r3, #10
 80045ae:	e012      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045b0:	2309      	movs	r3, #9
 80045b2:	e010      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045b4:	2308      	movs	r3, #8
 80045b6:	e00e      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045b8:	2307      	movs	r3, #7
 80045ba:	e00c      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045bc:	2306      	movs	r3, #6
 80045be:	e00a      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045c0:	2305      	movs	r3, #5
 80045c2:	e008      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e006      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045c8:	2303      	movs	r3, #3
 80045ca:	e004      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e002      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x1ce>
 80045d4:	2300      	movs	r3, #0
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	6852      	ldr	r2, [r2, #4]
 80045da:	201f      	movs	r0, #31
 80045dc:	4002      	ands	r2, r0
 80045de:	4093      	lsls	r3, r2
 80045e0:	000a      	movs	r2, r1
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	089b      	lsrs	r3, r3, #2
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d808      	bhi.n	800460a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	001a      	movs	r2, r3
 8004606:	f7ff fb29 	bl	8003c5c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	001a      	movs	r2, r3
 8004618:	f7ff fb64 	bl	8003ce4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db00      	blt.n	8004626 <HAL_ADC_ConfigChannel+0x21e>
 8004624:	e0bc      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004626:	4b50      	ldr	r3, [pc, #320]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 8004628:	0018      	movs	r0, r3
 800462a:	f7ff fac5 	bl	8003bb8 <LL_ADC_GetCommonPathInternalCh>
 800462e:	0003      	movs	r3, r0
 8004630:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a4d      	ldr	r2, [pc, #308]	@ (800476c <HAL_ADC_ConfigChannel+0x364>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d122      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	2380      	movs	r3, #128	@ 0x80
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004644:	d11d      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2280      	movs	r2, #128	@ 0x80
 800464a:	0412      	lsls	r2, r2, #16
 800464c:	4313      	orrs	r3, r2
 800464e:	4a46      	ldr	r2, [pc, #280]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 8004650:	0019      	movs	r1, r3
 8004652:	0010      	movs	r0, r2
 8004654:	f7ff fa9c 	bl	8003b90 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004658:	4b45      	ldr	r3, [pc, #276]	@ (8004770 <HAL_ADC_ConfigChannel+0x368>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4945      	ldr	r1, [pc, #276]	@ (8004774 <HAL_ADC_ConfigChannel+0x36c>)
 800465e:	0018      	movs	r0, r3
 8004660:	f7fb fd6a 	bl	8000138 <__udivsi3>
 8004664:	0003      	movs	r3, r0
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	0013      	movs	r3, r2
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	189b      	adds	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004672:	e002      	b.n	800467a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f9      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004680:	e08e      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a3c      	ldr	r2, [pc, #240]	@ (8004778 <HAL_ADC_ConfigChannel+0x370>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10e      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	2380      	movs	r3, #128	@ 0x80
 8004690:	045b      	lsls	r3, r3, #17
 8004692:	4013      	ands	r3, r2
 8004694:	d109      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2280      	movs	r2, #128	@ 0x80
 800469a:	0452      	lsls	r2, r2, #17
 800469c:	4313      	orrs	r3, r2
 800469e:	4a32      	ldr	r2, [pc, #200]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 80046a0:	0019      	movs	r1, r3
 80046a2:	0010      	movs	r0, r2
 80046a4:	f7ff fa74 	bl	8003b90 <LL_ADC_SetCommonPathInternalCh>
 80046a8:	e07a      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a33      	ldr	r2, [pc, #204]	@ (800477c <HAL_ADC_ConfigChannel+0x374>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d000      	beq.n	80046b6 <HAL_ADC_ConfigChannel+0x2ae>
 80046b4:	e074      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	03db      	lsls	r3, r3, #15
 80046bc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80046be:	d000      	beq.n	80046c2 <HAL_ADC_ConfigChannel+0x2ba>
 80046c0:	e06e      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2280      	movs	r2, #128	@ 0x80
 80046c6:	03d2      	lsls	r2, r2, #15
 80046c8:	4313      	orrs	r3, r2
 80046ca:	4a27      	ldr	r2, [pc, #156]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 80046cc:	0019      	movs	r1, r3
 80046ce:	0010      	movs	r0, r2
 80046d0:	f7ff fa5e 	bl	8003b90 <LL_ADC_SetCommonPathInternalCh>
 80046d4:	e064      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	429a      	cmp	r2, r3
 80046e0:	d004      	beq.n	80046ec <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046e6:	4a1f      	ldr	r2, [pc, #124]	@ (8004764 <HAL_ADC_ConfigChannel+0x35c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d107      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	0019      	movs	r1, r3
 80046f6:	0010      	movs	r0, r2
 80046f8:	f7ff fae1 	bl	8003cbe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	da4d      	bge.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004704:	4b18      	ldr	r3, [pc, #96]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 8004706:	0018      	movs	r0, r3
 8004708:	f7ff fa56 	bl	8003bb8 <LL_ADC_GetCommonPathInternalCh>
 800470c:	0003      	movs	r3, r0
 800470e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a15      	ldr	r2, [pc, #84]	@ (800476c <HAL_ADC_ConfigChannel+0x364>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_ADC_ConfigChannel+0x378>)
 800471e:	4013      	ands	r3, r2
 8004720:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 8004722:	0019      	movs	r1, r3
 8004724:	0010      	movs	r0, r2
 8004726:	f7ff fa33 	bl	8003b90 <LL_ADC_SetCommonPathInternalCh>
 800472a:	e039      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a11      	ldr	r2, [pc, #68]	@ (8004778 <HAL_ADC_ConfigChannel+0x370>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4a12      	ldr	r2, [pc, #72]	@ (8004784 <HAL_ADC_ConfigChannel+0x37c>)
 800473a:	4013      	ands	r3, r2
 800473c:	4a0a      	ldr	r2, [pc, #40]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 800473e:	0019      	movs	r1, r3
 8004740:	0010      	movs	r0, r2
 8004742:	f7ff fa25 	bl	8003b90 <LL_ADC_SetCommonPathInternalCh>
 8004746:	e02b      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0b      	ldr	r2, [pc, #44]	@ (800477c <HAL_ADC_ConfigChannel+0x374>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d126      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4a0c      	ldr	r2, [pc, #48]	@ (8004788 <HAL_ADC_ConfigChannel+0x380>)
 8004756:	4013      	ands	r3, r2
 8004758:	4a03      	ldr	r2, [pc, #12]	@ (8004768 <HAL_ADC_ConfigChannel+0x360>)
 800475a:	0019      	movs	r1, r3
 800475c:	0010      	movs	r0, r2
 800475e:	f7ff fa17 	bl	8003b90 <LL_ADC_SetCommonPathInternalCh>
 8004762:	e01d      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x398>
 8004764:	80000004 	.word	0x80000004
 8004768:	40012708 	.word	0x40012708
 800476c:	b0001000 	.word	0xb0001000
 8004770:	20000000 	.word	0x20000000
 8004774:	00030d40 	.word	0x00030d40
 8004778:	b8004000 	.word	0xb8004000
 800477c:	b4002000 	.word	0xb4002000
 8004780:	ff7fffff 	.word	0xff7fffff
 8004784:	feffffff 	.word	0xfeffffff
 8004788:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004790:	2220      	movs	r2, #32
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004798:	2317      	movs	r3, #23
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2254      	movs	r2, #84	@ 0x54
 80047a4:	2100      	movs	r1, #0
 80047a6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80047a8:	2317      	movs	r3, #23
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	781b      	ldrb	r3, [r3, #0]
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b006      	add	sp, #24
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)

080047b8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7ff fb3b 	bl	8003e40 <LL_ADC_REG_IsConversionOngoing>
 80047ca:	1e03      	subs	r3, r0, #0
 80047cc:	d031      	beq.n	8004832 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff faff 	bl	8003dd6 <LL_ADC_IsDisableOngoing>
 80047d8:	1e03      	subs	r3, r0, #0
 80047da:	d104      	bne.n	80047e6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7ff fb1b 	bl	8003e1c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047e6:	f7ff f9c9 	bl	8003b7c <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047ee:	e01a      	b.n	8004826 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047f0:	f7ff f9c4 	bl	8003b7c <HAL_GetTick>
 80047f4:	0002      	movs	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d913      	bls.n	8004826 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2204      	movs	r2, #4
 8004806:	4013      	ands	r3, r2
 8004808:	d00d      	beq.n	8004826 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480e:	2210      	movs	r2, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	2201      	movs	r2, #1
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e006      	b.n	8004834 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2204      	movs	r2, #4
 800482e:	4013      	ands	r3, r2
 8004830:	d1de      	bne.n	80047f0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	0018      	movs	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	b004      	add	sp, #16
 800483a:	bd80      	pop	{r7, pc}

0800483c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004844:	2300      	movs	r3, #0
 8004846:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	0018      	movs	r0, r3
 800484e:	f7ff fab1 	bl	8003db4 <LL_ADC_IsEnabled>
 8004852:	1e03      	subs	r3, r0, #0
 8004854:	d000      	beq.n	8004858 <ADC_Enable+0x1c>
 8004856:	e069      	b.n	800492c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4a36      	ldr	r2, [pc, #216]	@ (8004938 <ADC_Enable+0xfc>)
 8004860:	4013      	ands	r3, r2
 8004862:	d00d      	beq.n	8004880 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	2210      	movs	r2, #16
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	2201      	movs	r2, #1
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e056      	b.n	800492e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0018      	movs	r0, r3
 8004886:	f7ff fa71 	bl	8003d6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800488a:	4b2c      	ldr	r3, [pc, #176]	@ (800493c <ADC_Enable+0x100>)
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff f993 	bl	8003bb8 <LL_ADC_GetCommonPathInternalCh>
 8004892:	0002      	movs	r2, r0
 8004894:	2380      	movs	r3, #128	@ 0x80
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	4013      	ands	r3, r2
 800489a:	d00f      	beq.n	80048bc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800489c:	4b28      	ldr	r3, [pc, #160]	@ (8004940 <ADC_Enable+0x104>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4928      	ldr	r1, [pc, #160]	@ (8004944 <ADC_Enable+0x108>)
 80048a2:	0018      	movs	r0, r3
 80048a4:	f7fb fc48 	bl	8000138 <__udivsi3>
 80048a8:	0003      	movs	r3, r0
 80048aa:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80048ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048ae:	e002      	b.n	80048b6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f9      	bne.n	80048b0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7e5b      	ldrb	r3, [r3, #25]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d033      	beq.n	800492c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80048c4:	f7ff f95a 	bl	8003b7c <HAL_GetTick>
 80048c8:	0003      	movs	r3, r0
 80048ca:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048cc:	e027      	b.n	800491e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7ff fa6e 	bl	8003db4 <LL_ADC_IsEnabled>
 80048d8:	1e03      	subs	r3, r0, #0
 80048da:	d104      	bne.n	80048e6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7ff fa43 	bl	8003d6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048e6:	f7ff f949 	bl	8003b7c <HAL_GetTick>
 80048ea:	0002      	movs	r2, r0
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d914      	bls.n	800491e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d00d      	beq.n	800491e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004906:	2210      	movs	r2, #16
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	2201      	movs	r2, #1
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e007      	b.n	800492e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2201      	movs	r2, #1
 8004926:	4013      	ands	r3, r2
 8004928:	2b01      	cmp	r3, #1
 800492a:	d1d0      	bne.n	80048ce <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b004      	add	sp, #16
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	80000017 	.word	0x80000017
 800493c:	40012708 	.word	0x40012708
 8004940:	20000000 	.word	0x20000000
 8004944:	00030d40 	.word	0x00030d40

08004948 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0018      	movs	r0, r3
 8004956:	f7ff fa3e 	bl	8003dd6 <LL_ADC_IsDisableOngoing>
 800495a:	0003      	movs	r3, r0
 800495c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff fa26 	bl	8003db4 <LL_ADC_IsEnabled>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d046      	beq.n	80049fa <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d143      	bne.n	80049fa <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2205      	movs	r2, #5
 800497a:	4013      	ands	r3, r2
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10d      	bne.n	800499c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0018      	movs	r0, r3
 8004986:	f7ff fa03 	bl	8003d90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2203      	movs	r2, #3
 8004990:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004992:	f7ff f8f3 	bl	8003b7c <HAL_GetTick>
 8004996:	0003      	movs	r3, r0
 8004998:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800499a:	e028      	b.n	80049ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a0:	2210      	movs	r2, #16
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ac:	2201      	movs	r2, #1
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e021      	b.n	80049fc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049b8:	f7ff f8e0 	bl	8003b7c <HAL_GetTick>
 80049bc:	0002      	movs	r2, r0
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d913      	bls.n	80049ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2201      	movs	r2, #1
 80049ce:	4013      	ands	r3, r2
 80049d0:	d00d      	beq.n	80049ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	2210      	movs	r2, #16
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e2:	2201      	movs	r2, #1
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e006      	b.n	80049fc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2201      	movs	r2, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	d1de      	bne.n	80049b8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	1dfb      	adds	r3, r7, #7
 8004a10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a12:	1dfb      	adds	r3, r7, #7
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a18:	d828      	bhi.n	8004a6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad8 <__NVIC_SetPriority+0xd4>)
 8004a1c:	1dfb      	adds	r3, r7, #7
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	33c0      	adds	r3, #192	@ 0xc0
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	589b      	ldr	r3, [r3, r2]
 8004a2a:	1dfa      	adds	r2, r7, #7
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	2203      	movs	r2, #3
 8004a32:	400a      	ands	r2, r1
 8004a34:	00d2      	lsls	r2, r2, #3
 8004a36:	21ff      	movs	r1, #255	@ 0xff
 8004a38:	4091      	lsls	r1, r2
 8004a3a:	000a      	movs	r2, r1
 8004a3c:	43d2      	mvns	r2, r2
 8004a3e:	401a      	ands	r2, r3
 8004a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	22ff      	movs	r2, #255	@ 0xff
 8004a48:	401a      	ands	r2, r3
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	0018      	movs	r0, r3
 8004a50:	2303      	movs	r3, #3
 8004a52:	4003      	ands	r3, r0
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a58:	481f      	ldr	r0, [pc, #124]	@ (8004ad8 <__NVIC_SetPriority+0xd4>)
 8004a5a:	1dfb      	adds	r3, r7, #7
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	430a      	orrs	r2, r1
 8004a64:	33c0      	adds	r3, #192	@ 0xc0
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a6a:	e031      	b.n	8004ad0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <__NVIC_SetPriority+0xd8>)
 8004a6e:	1dfb      	adds	r3, r7, #7
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	0019      	movs	r1, r3
 8004a74:	230f      	movs	r3, #15
 8004a76:	400b      	ands	r3, r1
 8004a78:	3b08      	subs	r3, #8
 8004a7a:	089b      	lsrs	r3, r3, #2
 8004a7c:	3306      	adds	r3, #6
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	18d3      	adds	r3, r2, r3
 8004a82:	3304      	adds	r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1dfa      	adds	r2, r7, #7
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	0011      	movs	r1, r2
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	400a      	ands	r2, r1
 8004a90:	00d2      	lsls	r2, r2, #3
 8004a92:	21ff      	movs	r1, #255	@ 0xff
 8004a94:	4091      	lsls	r1, r2
 8004a96:	000a      	movs	r2, r1
 8004a98:	43d2      	mvns	r2, r2
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	019b      	lsls	r3, r3, #6
 8004aa2:	22ff      	movs	r2, #255	@ 0xff
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	1dfb      	adds	r3, r7, #7
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	2303      	movs	r3, #3
 8004aae:	4003      	ands	r3, r0
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ab4:	4809      	ldr	r0, [pc, #36]	@ (8004adc <__NVIC_SetPriority+0xd8>)
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	001c      	movs	r4, r3
 8004abc:	230f      	movs	r3, #15
 8004abe:	4023      	ands	r3, r4
 8004ac0:	3b08      	subs	r3, #8
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	3306      	adds	r3, #6
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	18c3      	adds	r3, r0, r3
 8004acc:	3304      	adds	r3, #4
 8004ace:	601a      	str	r2, [r3, #0]
}
 8004ad0:	46c0      	nop			@ (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b003      	add	sp, #12
 8004ad6:	bd90      	pop	{r4, r7, pc}
 8004ad8:	e000e100 	.word	0xe000e100
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	1e5a      	subs	r2, r3, #1
 8004aec:	2380      	movs	r3, #128	@ 0x80
 8004aee:	045b      	lsls	r3, r3, #17
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d301      	bcc.n	8004af8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004af4:	2301      	movs	r3, #1
 8004af6:	e010      	b.n	8004b1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004af8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <SysTick_Config+0x44>)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	3a01      	subs	r2, #1
 8004afe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b00:	2301      	movs	r3, #1
 8004b02:	425b      	negs	r3, r3
 8004b04:	2103      	movs	r1, #3
 8004b06:	0018      	movs	r0, r3
 8004b08:	f7ff ff7c 	bl	8004a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <SysTick_Config+0x44>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b12:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <SysTick_Config+0x44>)
 8004b14:	2207      	movs	r2, #7
 8004b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b002      	add	sp, #8
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	e000e010 	.word	0xe000e010

08004b28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	210f      	movs	r1, #15
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	1c02      	adds	r2, r0, #0
 8004b38:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	0011      	movs	r1, r2
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7ff ff5d 	bl	8004a04 <__NVIC_SetPriority>
}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b004      	add	sp, #16
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7ff ffbf 	bl	8004ae0 <SysTick_Config>
 8004b62:	0003      	movs	r3, r0
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b002      	add	sp, #8
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004b70:	f7fe fc92 	bl	8003498 <HAL_SYSTICK_Callback>
}
 8004b74:	46c0      	nop			@ (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b8a:	e147      	b.n	8004e1c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2101      	movs	r1, #1
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4091      	lsls	r1, r2
 8004b96:	000a      	movs	r2, r1
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d100      	bne.n	8004ba4 <HAL_GPIO_Init+0x28>
 8004ba2:	e138      	b.n	8004e16 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d005      	beq.n	8004bbc <HAL_GPIO_Init+0x40>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d130      	bne.n	8004c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	0013      	movs	r3, r2
 8004bcc:	43da      	mvns	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	0013      	movs	r3, r2
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	0013      	movs	r3, r2
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	2201      	movs	r2, #1
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	0013      	movs	r3, r2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2203      	movs	r2, #3
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d017      	beq.n	8004c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	2203      	movs	r2, #3
 8004c36:	409a      	lsls	r2, r3
 8004c38:	0013      	movs	r3, r2
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	0013      	movs	r3, r2
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d123      	bne.n	8004cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	08da      	lsrs	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3208      	adds	r2, #8
 8004c6e:	0092      	lsls	r2, r2, #2
 8004c70:	58d3      	ldr	r3, [r2, r3]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2207      	movs	r2, #7
 8004c78:	4013      	ands	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	220f      	movs	r2, #15
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	0013      	movs	r3, r2
 8004c82:	43da      	mvns	r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	4013      	ands	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2107      	movs	r1, #7
 8004c92:	400b      	ands	r3, r1
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	409a      	lsls	r2, r3
 8004c98:	0013      	movs	r3, r2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	0092      	lsls	r2, r2, #2
 8004caa:	6939      	ldr	r1, [r7, #16]
 8004cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	2203      	movs	r2, #3
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	0013      	movs	r3, r2
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2203      	movs	r2, #3
 8004ccc:	401a      	ands	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	0013      	movs	r3, r2
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	23c0      	movs	r3, #192	@ 0xc0
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	4013      	ands	r3, r2
 8004cec:	d100      	bne.n	8004cf0 <HAL_GPIO_Init+0x174>
 8004cee:	e092      	b.n	8004e16 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004cf0:	4a50      	ldr	r2, [pc, #320]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	089b      	lsrs	r3, r3, #2
 8004cf6:	3318      	adds	r3, #24
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	589b      	ldr	r3, [r3, r2]
 8004cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2203      	movs	r2, #3
 8004d02:	4013      	ands	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	220f      	movs	r2, #15
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	0013      	movs	r3, r2
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	23a0      	movs	r3, #160	@ 0xa0
 8004d18:	05db      	lsls	r3, r3, #23
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d013      	beq.n	8004d46 <HAL_GPIO_Init+0x1ca>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a45      	ldr	r2, [pc, #276]	@ (8004e38 <HAL_GPIO_Init+0x2bc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00d      	beq.n	8004d42 <HAL_GPIO_Init+0x1c6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a44      	ldr	r2, [pc, #272]	@ (8004e3c <HAL_GPIO_Init+0x2c0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <HAL_GPIO_Init+0x1c2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a43      	ldr	r2, [pc, #268]	@ (8004e40 <HAL_GPIO_Init+0x2c4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_GPIO_Init+0x1be>
 8004d36:	2303      	movs	r3, #3
 8004d38:	e006      	b.n	8004d48 <HAL_GPIO_Init+0x1cc>
 8004d3a:	2305      	movs	r3, #5
 8004d3c:	e004      	b.n	8004d48 <HAL_GPIO_Init+0x1cc>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e002      	b.n	8004d48 <HAL_GPIO_Init+0x1cc>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_GPIO_Init+0x1cc>
 8004d46:	2300      	movs	r3, #0
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	2103      	movs	r1, #3
 8004d4c:	400a      	ands	r2, r1
 8004d4e:	00d2      	lsls	r2, r2, #3
 8004d50:	4093      	lsls	r3, r2
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004d58:	4936      	ldr	r1, [pc, #216]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	3318      	adds	r3, #24
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d66:	4b33      	ldr	r3, [pc, #204]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43da      	mvns	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	035b      	lsls	r3, r3, #13
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004d90:	4b28      	ldr	r3, [pc, #160]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	2380      	movs	r3, #128	@ 0x80
 8004da6:	039b      	lsls	r3, r3, #14
 8004da8:	4013      	ands	r3, r2
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004db4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004dba:	4a1e      	ldr	r2, [pc, #120]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004dbc:	2384      	movs	r3, #132	@ 0x84
 8004dbe:	58d3      	ldr	r3, [r2, r3]
 8004dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	2380      	movs	r3, #128	@ 0x80
 8004dd2:	029b      	lsls	r3, r3, #10
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004de0:	4914      	ldr	r1, [pc, #80]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004de2:	2284      	movs	r2, #132	@ 0x84
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004de8:	4a12      	ldr	r2, [pc, #72]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	58d3      	ldr	r3, [r2, r3]
 8004dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	43da      	mvns	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	2380      	movs	r3, #128	@ 0x80
 8004e00:	025b      	lsls	r3, r3, #9
 8004e02:	4013      	ands	r3, r2
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e0e:	4909      	ldr	r1, [pc, #36]	@ (8004e34 <HAL_GPIO_Init+0x2b8>)
 8004e10:	2280      	movs	r2, #128	@ 0x80
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	40da      	lsrs	r2, r3
 8004e24:	1e13      	subs	r3, r2, #0
 8004e26:	d000      	beq.n	8004e2a <HAL_GPIO_Init+0x2ae>
 8004e28:	e6b0      	b.n	8004b8c <HAL_GPIO_Init+0x10>
  }
}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b006      	add	sp, #24
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021800 	.word	0x40021800
 8004e38:	50000400 	.word	0x50000400
 8004e3c:	50000800 	.word	0x50000800
 8004e40:	50000c00 	.word	0x50000c00

08004e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	0008      	movs	r0, r1
 8004e4e:	0011      	movs	r1, r2
 8004e50:	1cbb      	adds	r3, r7, #2
 8004e52:	1c02      	adds	r2, r0, #0
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	1c7b      	adds	r3, r7, #1
 8004e58:	1c0a      	adds	r2, r1, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e5c:	1c7b      	adds	r3, r7, #1
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e64:	1cbb      	adds	r3, r7, #2
 8004e66:	881a      	ldrh	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e6c:	e003      	b.n	8004e76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e6e:	1cbb      	adds	r3, r7, #2
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b002      	add	sp, #8
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	000a      	movs	r2, r1
 8004e88:	1cbb      	adds	r3, r7, #2
 8004e8a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e92:	1cbb      	adds	r3, r7, #2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	041a      	lsls	r2, r3, #16
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	1cb9      	adds	r1, r7, #2
 8004ea2:	8809      	ldrh	r1, [r1, #0]
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b004      	add	sp, #16
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e08f      	b.n	8004fe6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2241      	movs	r2, #65	@ 0x41
 8004eca:	5c9b      	ldrb	r3, [r3, r2]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2240      	movs	r2, #64	@ 0x40
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f7fe fc27 	bl	8003730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2241      	movs	r2, #65	@ 0x41
 8004ee6:	2124      	movs	r1, #36	@ 0x24
 8004ee8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	493b      	ldr	r1, [pc, #236]	@ (8004ff0 <HAL_I2C_Init+0x13c>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4938      	ldr	r1, [pc, #224]	@ (8004ff4 <HAL_I2C_Init+0x140>)
 8004f14:	400a      	ands	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d108      	bne.n	8004f32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2180      	movs	r1, #128	@ 0x80
 8004f2a:	0209      	lsls	r1, r1, #8
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	e007      	b.n	8004f42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2184      	movs	r1, #132	@ 0x84
 8004f3c:	0209      	lsls	r1, r1, #8
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d109      	bne.n	8004f5e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2180      	movs	r1, #128	@ 0x80
 8004f56:	0109      	lsls	r1, r1, #4
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	e007      	b.n	8004f6e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4923      	ldr	r1, [pc, #140]	@ (8004ff8 <HAL_I2C_Init+0x144>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4920      	ldr	r1, [pc, #128]	@ (8004ffc <HAL_I2C_Init+0x148>)
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	491a      	ldr	r1, [pc, #104]	@ (8004ff4 <HAL_I2C_Init+0x140>)
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2241      	movs	r2, #65	@ 0x41
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2242      	movs	r2, #66	@ 0x42
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b002      	add	sp, #8
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	f0ffffff 	.word	0xf0ffffff
 8004ff4:	ffff7fff 	.word	0xffff7fff
 8004ff8:	fffff7ff 	.word	0xfffff7ff
 8004ffc:	02008000 	.word	0x02008000

08005000 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b089      	sub	sp, #36	@ 0x24
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	000c      	movs	r4, r1
 800500a:	0010      	movs	r0, r2
 800500c:	0019      	movs	r1, r3
 800500e:	230a      	movs	r3, #10
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	1c22      	adds	r2, r4, #0
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	2308      	movs	r3, #8
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	1c02      	adds	r2, r0, #0
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	1dbb      	adds	r3, r7, #6
 8005020:	1c0a      	adds	r2, r1, #0
 8005022:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2241      	movs	r2, #65	@ 0x41
 8005028:	5c9b      	ldrb	r3, [r3, r2]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b20      	cmp	r3, #32
 800502e:	d000      	beq.n	8005032 <HAL_I2C_Mem_Write+0x32>
 8005030:	e10c      	b.n	800524c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <HAL_I2C_Mem_Write+0x42>
 8005038:	232c      	movs	r3, #44	@ 0x2c
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2280      	movs	r2, #128	@ 0x80
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0ff      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2240      	movs	r2, #64	@ 0x40
 8005052:	5c9b      	ldrb	r3, [r3, r2]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_I2C_Mem_Write+0x5c>
 8005058:	2302      	movs	r3, #2
 800505a:	e0f8      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2240      	movs	r2, #64	@ 0x40
 8005060:	2101      	movs	r1, #1
 8005062:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005064:	f7fe fd8a 	bl	8003b7c <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	0219      	lsls	r1, r3, #8
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2319      	movs	r3, #25
 8005078:	2201      	movs	r2, #1
 800507a:	f000 fb0b 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 800507e:	1e03      	subs	r3, r0, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e0e3      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2241      	movs	r2, #65	@ 0x41
 800508a:	2121      	movs	r1, #33	@ 0x21
 800508c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2242      	movs	r2, #66	@ 0x42
 8005092:	2140      	movs	r1, #64	@ 0x40
 8005094:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	222c      	movs	r2, #44	@ 0x2c
 80050a6:	18ba      	adds	r2, r7, r2
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050b2:	1dbb      	adds	r3, r7, #6
 80050b4:	881c      	ldrh	r4, [r3, #0]
 80050b6:	2308      	movs	r3, #8
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	881a      	ldrh	r2, [r3, #0]
 80050bc:	230a      	movs	r3, #10
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	8819      	ldrh	r1, [r3, #0]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	0023      	movs	r3, r4
 80050ce:	f000 f9f9 	bl	80054c4 <I2C_RequestMemoryWrite>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2240      	movs	r2, #64	@ 0x40
 80050da:	2100      	movs	r1, #0
 80050dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0b5      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2bff      	cmp	r3, #255	@ 0xff
 80050ea:	d911      	bls.n	8005110 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	22ff      	movs	r2, #255	@ 0xff
 80050f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	045c      	lsls	r4, r3, #17
 80050fc:	230a      	movs	r3, #10
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	8819      	ldrh	r1, [r3, #0]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	2300      	movs	r3, #0
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	0023      	movs	r3, r4
 800510a:	f000 fc9d 	bl	8005a48 <I2C_TransferConfig>
 800510e:	e012      	b.n	8005136 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511e:	b2da      	uxtb	r2, r3
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	049c      	lsls	r4, r3, #18
 8005124:	230a      	movs	r3, #10
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	8819      	ldrh	r1, [r3, #0]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	2300      	movs	r3, #0
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	0023      	movs	r3, r4
 8005132:	f000 fc89 	bl	8005a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 fb01 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e081      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d03a      	beq.n	80051fa <HAL_I2C_Mem_Write+0x1fa>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d136      	bne.n	80051fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800518c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	0013      	movs	r3, r2
 8005196:	2200      	movs	r2, #0
 8005198:	2180      	movs	r1, #128	@ 0x80
 800519a:	f000 fa7b 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 800519e:	1e03      	subs	r3, r0, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e053      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2bff      	cmp	r3, #255	@ 0xff
 80051ae:	d911      	bls.n	80051d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	22ff      	movs	r2, #255	@ 0xff
 80051b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	2380      	movs	r3, #128	@ 0x80
 80051be:	045c      	lsls	r4, r3, #17
 80051c0:	230a      	movs	r3, #10
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	8819      	ldrh	r1, [r3, #0]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	2300      	movs	r3, #0
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	0023      	movs	r3, r4
 80051ce:	f000 fc3b 	bl	8005a48 <I2C_TransferConfig>
 80051d2:	e012      	b.n	80051fa <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	2380      	movs	r3, #128	@ 0x80
 80051e6:	049c      	lsls	r4, r3, #18
 80051e8:	230a      	movs	r3, #10
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	8819      	ldrh	r1, [r3, #0]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	0023      	movs	r3, r4
 80051f6:	f000 fc27 	bl	8005a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d198      	bne.n	8005136 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	0018      	movs	r0, r3
 800520c:	f000 fae0 	bl	80057d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005210:	1e03      	subs	r3, r0, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e01a      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2220      	movs	r2, #32
 800521e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	490b      	ldr	r1, [pc, #44]	@ (8005258 <HAL_I2C_Mem_Write+0x258>)
 800522c:	400a      	ands	r2, r1
 800522e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2241      	movs	r2, #65	@ 0x41
 8005234:	2120      	movs	r1, #32
 8005236:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2242      	movs	r2, #66	@ 0x42
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2240      	movs	r2, #64	@ 0x40
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b007      	add	sp, #28
 8005254:	bd90      	pop	{r4, r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b089      	sub	sp, #36	@ 0x24
 8005260:	af02      	add	r7, sp, #8
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	000c      	movs	r4, r1
 8005266:	0010      	movs	r0, r2
 8005268:	0019      	movs	r1, r3
 800526a:	230a      	movs	r3, #10
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	1c22      	adds	r2, r4, #0
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	2308      	movs	r3, #8
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	1c02      	adds	r2, r0, #0
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	1dbb      	adds	r3, r7, #6
 800527c:	1c0a      	adds	r2, r1, #0
 800527e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2241      	movs	r2, #65	@ 0x41
 8005284:	5c9b      	ldrb	r3, [r3, r2]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b20      	cmp	r3, #32
 800528a:	d000      	beq.n	800528e <HAL_I2C_Mem_Read+0x32>
 800528c:	e110      	b.n	80054b0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	2b00      	cmp	r3, #0
 8005292:	d004      	beq.n	800529e <HAL_I2C_Mem_Read+0x42>
 8005294:	232c      	movs	r3, #44	@ 0x2c
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2280      	movs	r2, #128	@ 0x80
 80052a2:	0092      	lsls	r2, r2, #2
 80052a4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e103      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2240      	movs	r2, #64	@ 0x40
 80052ae:	5c9b      	ldrb	r3, [r3, r2]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_I2C_Mem_Read+0x5c>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0fc      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2240      	movs	r2, #64	@ 0x40
 80052bc:	2101      	movs	r1, #1
 80052be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052c0:	f7fe fc5c 	bl	8003b7c <HAL_GetTick>
 80052c4:	0003      	movs	r3, r0
 80052c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	0219      	lsls	r1, r3, #8
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2319      	movs	r3, #25
 80052d4:	2201      	movs	r2, #1
 80052d6:	f000 f9dd 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0e7      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2241      	movs	r2, #65	@ 0x41
 80052e6:	2122      	movs	r1, #34	@ 0x22
 80052e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2242      	movs	r2, #66	@ 0x42
 80052ee:	2140      	movs	r1, #64	@ 0x40
 80052f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	222c      	movs	r2, #44	@ 0x2c
 8005302:	18ba      	adds	r2, r7, r2
 8005304:	8812      	ldrh	r2, [r2, #0]
 8005306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800530e:	1dbb      	adds	r3, r7, #6
 8005310:	881c      	ldrh	r4, [r3, #0]
 8005312:	2308      	movs	r3, #8
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	881a      	ldrh	r2, [r3, #0]
 8005318:	230a      	movs	r3, #10
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	8819      	ldrh	r1, [r3, #0]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	0023      	movs	r3, r4
 800532a:	f000 f92f 	bl	800558c <I2C_RequestMemoryRead>
 800532e:	1e03      	subs	r3, r0, #0
 8005330:	d005      	beq.n	800533e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2240      	movs	r2, #64	@ 0x40
 8005336:	2100      	movs	r1, #0
 8005338:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e0b9      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005342:	b29b      	uxth	r3, r3
 8005344:	2bff      	cmp	r3, #255	@ 0xff
 8005346:	d911      	bls.n	800536c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	22ff      	movs	r2, #255	@ 0xff
 800534c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005352:	b2da      	uxtb	r2, r3
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	045c      	lsls	r4, r3, #17
 8005358:	230a      	movs	r3, #10
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	8819      	ldrh	r1, [r3, #0]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	4b56      	ldr	r3, [pc, #344]	@ (80054bc <HAL_I2C_Mem_Read+0x260>)
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	0023      	movs	r3, r4
 8005366:	f000 fb6f 	bl	8005a48 <I2C_TransferConfig>
 800536a:	e012      	b.n	8005392 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537a:	b2da      	uxtb	r2, r3
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	049c      	lsls	r4, r3, #18
 8005380:	230a      	movs	r3, #10
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	8819      	ldrh	r1, [r3, #0]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	4b4c      	ldr	r3, [pc, #304]	@ (80054bc <HAL_I2C_Mem_Read+0x260>)
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	0023      	movs	r3, r4
 800538e:	f000 fb5b 	bl	8005a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	0013      	movs	r3, r2
 800539c:	2200      	movs	r2, #0
 800539e:	2104      	movs	r1, #4
 80053a0:	f000 f978 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80053a4:	1e03      	subs	r3, r0, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e082      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03a      	beq.n	800545e <HAL_I2C_Mem_Read+0x202>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d136      	bne.n	800545e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	0013      	movs	r3, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	@ 0x80
 80053fe:	f000 f949 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d001      	beq.n	800540a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e053      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	2bff      	cmp	r3, #255	@ 0xff
 8005412:	d911      	bls.n	8005438 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	22ff      	movs	r2, #255	@ 0xff
 8005418:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541e:	b2da      	uxtb	r2, r3
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	045c      	lsls	r4, r3, #17
 8005424:	230a      	movs	r3, #10
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	8819      	ldrh	r1, [r3, #0]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	2300      	movs	r3, #0
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	0023      	movs	r3, r4
 8005432:	f000 fb09 	bl	8005a48 <I2C_TransferConfig>
 8005436:	e012      	b.n	800545e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005446:	b2da      	uxtb	r2, r3
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	049c      	lsls	r4, r3, #18
 800544c:	230a      	movs	r3, #10
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	8819      	ldrh	r1, [r3, #0]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	2300      	movs	r3, #0
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	0023      	movs	r3, r4
 800545a:	f000 faf5 	bl	8005a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d194      	bne.n	8005392 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 f9ae 	bl	80057d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d001      	beq.n	800547c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e01a      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2220      	movs	r2, #32
 8005482:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	490c      	ldr	r1, [pc, #48]	@ (80054c0 <HAL_I2C_Mem_Read+0x264>)
 8005490:	400a      	ands	r2, r1
 8005492:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2241      	movs	r2, #65	@ 0x41
 8005498:	2120      	movs	r1, #32
 800549a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2242      	movs	r2, #66	@ 0x42
 80054a0:	2100      	movs	r1, #0
 80054a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2240      	movs	r2, #64	@ 0x40
 80054a8:	2100      	movs	r1, #0
 80054aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e000      	b.n	80054b2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
  }
}
 80054b2:	0018      	movs	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b007      	add	sp, #28
 80054b8:	bd90      	pop	{r4, r7, pc}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	80002400 	.word	0x80002400
 80054c0:	fe00e800 	.word	0xfe00e800

080054c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	000c      	movs	r4, r1
 80054ce:	0010      	movs	r0, r2
 80054d0:	0019      	movs	r1, r3
 80054d2:	250a      	movs	r5, #10
 80054d4:	197b      	adds	r3, r7, r5
 80054d6:	1c22      	adds	r2, r4, #0
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	2308      	movs	r3, #8
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	1c02      	adds	r2, r0, #0
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	1dbb      	adds	r3, r7, #6
 80054e4:	1c0a      	adds	r2, r1, #0
 80054e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054e8:	1dbb      	adds	r3, r7, #6
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	2380      	movs	r3, #128	@ 0x80
 80054f0:	045c      	lsls	r4, r3, #17
 80054f2:	197b      	adds	r3, r7, r5
 80054f4:	8819      	ldrh	r1, [r3, #0]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	4b23      	ldr	r3, [pc, #140]	@ (8005588 <I2C_RequestMemoryWrite+0xc4>)
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	0023      	movs	r3, r4
 80054fe:	f000 faa3 	bl	8005a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	6a39      	ldr	r1, [r7, #32]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	0018      	movs	r0, r3
 800550a:	f000 f91b 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 800550e:	1e03      	subs	r3, r0, #0
 8005510:	d001      	beq.n	8005516 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e033      	b.n	800557e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005516:	1dbb      	adds	r3, r7, #6
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d107      	bne.n	800552e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800551e:	2308      	movs	r3, #8
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28
 800552c:	e019      	b.n	8005562 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800552e:	2308      	movs	r3, #8
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	0a1b      	lsrs	r3, r3, #8
 8005536:	b29b      	uxth	r3, r3
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005542:	6a39      	ldr	r1, [r7, #32]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 f8fc 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 800554c:	1e03      	subs	r3, r0, #0
 800554e:	d001      	beq.n	8005554 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e014      	b.n	800557e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005554:	2308      	movs	r3, #8
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	6a3a      	ldr	r2, [r7, #32]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	0013      	movs	r3, r2
 800556c:	2200      	movs	r2, #0
 800556e:	2180      	movs	r1, #128	@ 0x80
 8005570:	f000 f890 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005574:	1e03      	subs	r3, r0, #0
 8005576:	d001      	beq.n	800557c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	0018      	movs	r0, r3
 8005580:	46bd      	mov	sp, r7
 8005582:	b004      	add	sp, #16
 8005584:	bdb0      	pop	{r4, r5, r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	80002000 	.word	0x80002000

0800558c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800558c:	b5b0      	push	{r4, r5, r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	000c      	movs	r4, r1
 8005596:	0010      	movs	r0, r2
 8005598:	0019      	movs	r1, r3
 800559a:	250a      	movs	r5, #10
 800559c:	197b      	adds	r3, r7, r5
 800559e:	1c22      	adds	r2, r4, #0
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	2308      	movs	r3, #8
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	1c02      	adds	r2, r0, #0
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	1dbb      	adds	r3, r7, #6
 80055ac:	1c0a      	adds	r2, r1, #0
 80055ae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80055b0:	1dbb      	adds	r3, r7, #6
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	197b      	adds	r3, r7, r5
 80055b8:	8819      	ldrh	r1, [r3, #0]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	4b23      	ldr	r3, [pc, #140]	@ (800564c <I2C_RequestMemoryRead+0xc0>)
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	2300      	movs	r3, #0
 80055c2:	f000 fa41 	bl	8005a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c8:	6a39      	ldr	r1, [r7, #32]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 f8b9 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 80055d2:	1e03      	subs	r3, r0, #0
 80055d4:	d001      	beq.n	80055da <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e033      	b.n	8005642 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055da:	1dbb      	adds	r3, r7, #6
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d107      	bne.n	80055f2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055e2:	2308      	movs	r3, #8
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80055f0:	e019      	b.n	8005626 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055f2:	2308      	movs	r3, #8
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005606:	6a39      	ldr	r1, [r7, #32]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	0018      	movs	r0, r3
 800560c:	f000 f89a 	bl	8005744 <I2C_WaitOnTXISFlagUntilTimeout>
 8005610:	1e03      	subs	r3, r0, #0
 8005612:	d001      	beq.n	8005618 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e014      	b.n	8005642 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005618:	2308      	movs	r3, #8
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	0013      	movs	r3, r2
 8005630:	2200      	movs	r2, #0
 8005632:	2140      	movs	r1, #64	@ 0x40
 8005634:	f000 f82e 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 8005638:	1e03      	subs	r3, r0, #0
 800563a:	d001      	beq.n	8005640 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b004      	add	sp, #16
 8005648:	bdb0      	pop	{r4, r5, r7, pc}
 800564a:	46c0      	nop			@ (mov r8, r8)
 800564c:	80002000 	.word	0x80002000

08005650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2202      	movs	r2, #2
 8005660:	4013      	ands	r3, r2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d103      	bne.n	800566e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2201      	movs	r2, #1
 8005676:	4013      	ands	r3, r2
 8005678:	2b01      	cmp	r3, #1
 800567a:	d007      	beq.n	800568c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2101      	movs	r1, #1
 8005688:	430a      	orrs	r2, r1
 800568a:	619a      	str	r2, [r3, #24]
  }
}
 800568c:	46c0      	nop			@ (mov r8, r8)
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}

08005694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	1dfb      	adds	r3, r7, #7
 80056a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a4:	e03a      	b.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 f8d3 	bl	8005858 <I2C_IsErrorOccurred>
 80056b2:	1e03      	subs	r3, r0, #0
 80056b4:	d001      	beq.n	80056ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e040      	b.n	800573c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	d02d      	beq.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c0:	f7fe fa5c 	bl	8003b7c <HAL_GetTick>
 80056c4:	0002      	movs	r2, r0
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d122      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4013      	ands	r3, r2
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	425a      	negs	r2, r3
 80056e6:	4153      	adcs	r3, r2
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	001a      	movs	r2, r3
 80056ec:	1dfb      	adds	r3, r7, #7
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d113      	bne.n	800571c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	2220      	movs	r2, #32
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2241      	movs	r2, #65	@ 0x41
 8005704:	2120      	movs	r1, #32
 8005706:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2242      	movs	r2, #66	@ 0x42
 800570c:	2100      	movs	r1, #0
 800570e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2240      	movs	r2, #64	@ 0x40
 8005714:	2100      	movs	r1, #0
 8005716:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e00f      	b.n	800573c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4013      	ands	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	425a      	negs	r2, r3
 800572c:	4153      	adcs	r3, r2
 800572e:	b2db      	uxtb	r3, r3
 8005730:	001a      	movs	r2, r3
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d0b5      	beq.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b004      	add	sp, #16
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005750:	e032      	b.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	0018      	movs	r0, r3
 800575a:	f000 f87d 	bl	8005858 <I2C_IsErrorOccurred>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d001      	beq.n	8005766 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e030      	b.n	80057c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	3301      	adds	r3, #1
 800576a:	d025      	beq.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fe fa06 	bl	8003b7c <HAL_GetTick>
 8005770:	0002      	movs	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11a      	bne.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d013      	beq.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005794:	2220      	movs	r2, #32
 8005796:	431a      	orrs	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2241      	movs	r2, #65	@ 0x41
 80057a0:	2120      	movs	r1, #32
 80057a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2242      	movs	r2, #66	@ 0x42
 80057a8:	2100      	movs	r1, #0
 80057aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2240      	movs	r2, #64	@ 0x40
 80057b0:	2100      	movs	r1, #0
 80057b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e007      	b.n	80057c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2202      	movs	r2, #2
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d1c5      	bne.n	8005752 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b004      	add	sp, #16
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057dc:	e02f      	b.n	800583e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f000 f837 	bl	8005858 <I2C_IsErrorOccurred>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d001      	beq.n	80057f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e02d      	b.n	800584e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7fe f9c3 	bl	8003b7c <HAL_GetTick>
 80057f6:	0002      	movs	r2, r0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11a      	bne.n	800583e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2220      	movs	r2, #32
 8005810:	4013      	ands	r3, r2
 8005812:	2b20      	cmp	r3, #32
 8005814:	d013      	beq.n	800583e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	2220      	movs	r2, #32
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2241      	movs	r2, #65	@ 0x41
 8005826:	2120      	movs	r1, #32
 8005828:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2242      	movs	r2, #66	@ 0x42
 800582e:	2100      	movs	r1, #0
 8005830:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2240      	movs	r2, #64	@ 0x40
 8005836:	2100      	movs	r1, #0
 8005838:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e007      	b.n	800584e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2220      	movs	r2, #32
 8005846:	4013      	ands	r3, r2
 8005848:	2b20      	cmp	r3, #32
 800584a:	d1c8      	bne.n	80057de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b004      	add	sp, #16
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	@ 0x28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2327      	movs	r3, #39	@ 0x27
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2210      	movs	r2, #16
 8005880:	4013      	ands	r3, r2
 8005882:	d100      	bne.n	8005886 <I2C_IsErrorOccurred+0x2e>
 8005884:	e079      	b.n	800597a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2210      	movs	r2, #16
 800588c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800588e:	e057      	b.n	8005940 <I2C_IsErrorOccurred+0xe8>
 8005890:	2227      	movs	r2, #39	@ 0x27
 8005892:	18bb      	adds	r3, r7, r2
 8005894:	18ba      	adds	r2, r7, r2
 8005896:	7812      	ldrb	r2, [r2, #0]
 8005898:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	d04f      	beq.n	8005940 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058a0:	f7fe f96c 	bl	8003b7c <HAL_GetTick>
 80058a4:	0002      	movs	r2, r0
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d302      	bcc.n	80058b6 <I2C_IsErrorOccurred+0x5e>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d144      	bne.n	8005940 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	2380      	movs	r3, #128	@ 0x80
 80058be:	01db      	lsls	r3, r3, #7
 80058c0:	4013      	ands	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80058c4:	2013      	movs	r0, #19
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	2142      	movs	r1, #66	@ 0x42
 80058cc:	5c52      	ldrb	r2, [r2, r1]
 80058ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	2380      	movs	r3, #128	@ 0x80
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	401a      	ands	r2, r3
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d126      	bne.n	8005932 <I2C_IsErrorOccurred+0xda>
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	2380      	movs	r3, #128	@ 0x80
 80058e8:	01db      	lsls	r3, r3, #7
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d021      	beq.n	8005932 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80058ee:	183b      	adds	r3, r7, r0
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d01d      	beq.n	8005932 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2180      	movs	r1, #128	@ 0x80
 8005902:	01c9      	lsls	r1, r1, #7
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005908:	f7fe f938 	bl	8003b7c <HAL_GetTick>
 800590c:	0003      	movs	r3, r0
 800590e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005910:	e00f      	b.n	8005932 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005912:	f7fe f933 	bl	8003b7c <HAL_GetTick>
 8005916:	0002      	movs	r2, r0
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b19      	cmp	r3, #25
 800591e:	d908      	bls.n	8005932 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2220      	movs	r2, #32
 8005924:	4313      	orrs	r3, r2
 8005926:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005928:	2327      	movs	r3, #39	@ 0x27
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]

              break;
 8005930:	e006      	b.n	8005940 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2220      	movs	r2, #32
 800593a:	4013      	ands	r3, r2
 800593c:	2b20      	cmp	r3, #32
 800593e:	d1e8      	bne.n	8005912 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2220      	movs	r2, #32
 8005948:	4013      	ands	r3, r2
 800594a:	2b20      	cmp	r3, #32
 800594c:	d004      	beq.n	8005958 <I2C_IsErrorOccurred+0x100>
 800594e:	2327      	movs	r3, #39	@ 0x27
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d09b      	beq.n	8005890 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005958:	2327      	movs	r3, #39	@ 0x27
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2220      	movs	r2, #32
 8005968:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	2204      	movs	r2, #4
 800596e:	4313      	orrs	r3, r2
 8005970:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005972:	2327      	movs	r3, #39	@ 0x27
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	4013      	ands	r3, r2
 800598a:	d00c      	beq.n	80059a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	2201      	movs	r2, #1
 8005990:	4313      	orrs	r3, r2
 8005992:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2280      	movs	r2, #128	@ 0x80
 800599a:	0052      	lsls	r2, r2, #1
 800599c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800599e:	2327      	movs	r3, #39	@ 0x27
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	2380      	movs	r3, #128	@ 0x80
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4013      	ands	r3, r2
 80059ae:	d00c      	beq.n	80059ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2208      	movs	r2, #8
 80059b4:	4313      	orrs	r3, r2
 80059b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2280      	movs	r2, #128	@ 0x80
 80059be:	00d2      	lsls	r2, r2, #3
 80059c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059c2:	2327      	movs	r3, #39	@ 0x27
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	2380      	movs	r3, #128	@ 0x80
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00c      	beq.n	80059ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	2202      	movs	r2, #2
 80059d8:	4313      	orrs	r3, r2
 80059da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2280      	movs	r2, #128	@ 0x80
 80059e2:	0092      	lsls	r2, r2, #2
 80059e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059e6:	2327      	movs	r3, #39	@ 0x27
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	2201      	movs	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80059ee:	2327      	movs	r3, #39	@ 0x27
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01d      	beq.n	8005a34 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7ff fe28 	bl	8005650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	490e      	ldr	r1, [pc, #56]	@ (8005a44 <I2C_IsErrorOccurred+0x1ec>)
 8005a0c:	400a      	ands	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2241      	movs	r2, #65	@ 0x41
 8005a20:	2120      	movs	r1, #32
 8005a22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2242      	movs	r2, #66	@ 0x42
 8005a28:	2100      	movs	r1, #0
 8005a2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2240      	movs	r2, #64	@ 0x40
 8005a30:	2100      	movs	r1, #0
 8005a32:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005a34:	2327      	movs	r3, #39	@ 0x27
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	781b      	ldrb	r3, [r3, #0]
}
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	b00a      	add	sp, #40	@ 0x28
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	fe00e800 	.word	0xfe00e800

08005a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	0008      	movs	r0, r1
 8005a52:	0011      	movs	r1, r2
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	240a      	movs	r4, #10
 8005a58:	193b      	adds	r3, r7, r4
 8005a5a:	1c02      	adds	r2, r0, #0
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	2009      	movs	r0, #9
 8005a60:	183b      	adds	r3, r7, r0
 8005a62:	1c0a      	adds	r2, r1, #0
 8005a64:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a66:	193b      	adds	r3, r7, r4
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	059b      	lsls	r3, r3, #22
 8005a6c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a6e:	183b      	adds	r3, r7, r0
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	0419      	lsls	r1, r3, #16
 8005a74:	23ff      	movs	r3, #255	@ 0xff
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a7a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	4313      	orrs	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a92:	0d51      	lsrs	r1, r2, #21
 8005a94:	2280      	movs	r2, #128	@ 0x80
 8005a96:	00d2      	lsls	r2, r2, #3
 8005a98:	400a      	ands	r2, r1
 8005a9a:	4907      	ldr	r1, [pc, #28]	@ (8005ab8 <I2C_TransferConfig+0x70>)
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	43d2      	mvns	r2, r2
 8005aa0:	401a      	ands	r2, r3
 8005aa2:	0011      	movs	r1, r2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b007      	add	sp, #28
 8005ab4:	bd90      	pop	{r4, r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	03ff63ff 	.word	0x03ff63ff

08005abc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2241      	movs	r2, #65	@ 0x41
 8005aca:	5c9b      	ldrb	r3, [r3, r2]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d138      	bne.n	8005b44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2240      	movs	r2, #64	@ 0x40
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e032      	b.n	8005b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2240      	movs	r2, #64	@ 0x40
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2241      	movs	r2, #65	@ 0x41
 8005aec:	2124      	movs	r1, #36	@ 0x24
 8005aee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2101      	movs	r1, #1
 8005afc:	438a      	bics	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4911      	ldr	r1, [pc, #68]	@ (8005b50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6819      	ldr	r1, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2241      	movs	r2, #65	@ 0x41
 8005b34:	2120      	movs	r1, #32
 8005b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2240      	movs	r2, #64	@ 0x40
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b002      	add	sp, #8
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	ffffefff 	.word	0xffffefff

08005b54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2241      	movs	r2, #65	@ 0x41
 8005b62:	5c9b      	ldrb	r3, [r3, r2]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d139      	bne.n	8005bde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2240      	movs	r2, #64	@ 0x40
 8005b6e:	5c9b      	ldrb	r3, [r3, r2]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e033      	b.n	8005be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2240      	movs	r2, #64	@ 0x40
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2241      	movs	r2, #65	@ 0x41
 8005b84:	2124      	movs	r1, #36	@ 0x24
 8005b86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2101      	movs	r1, #1
 8005b94:	438a      	bics	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a11      	ldr	r2, [pc, #68]	@ (8005be8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2241      	movs	r2, #65	@ 0x41
 8005bce:	2120      	movs	r1, #32
 8005bd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2240      	movs	r2, #64	@ 0x40
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e000      	b.n	8005be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b004      	add	sp, #16
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	fffff0ff 	.word	0xfffff0ff

08005bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005bf4:	4b19      	ldr	r3, [pc, #100]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	0019      	movs	r1, r3
 8005bfe:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	2380      	movs	r3, #128	@ 0x80
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d11f      	bne.n	8005c50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005c10:	4b14      	ldr	r3, [pc, #80]	@ (8005c64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	0013      	movs	r3, r2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	189b      	adds	r3, r3, r2
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	4912      	ldr	r1, [pc, #72]	@ (8005c68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7fa fa8a 	bl	8000138 <__udivsi3>
 8005c24:	0003      	movs	r3, r0
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c2a:	e008      	b.n	8005c3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e001      	b.n	8005c3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e009      	b.n	8005c52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c3e:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	2380      	movs	r3, #128	@ 0x80
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	401a      	ands	r2, r3
 8005c48:	2380      	movs	r3, #128	@ 0x80
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d0ed      	beq.n	8005c2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	0018      	movs	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	b004      	add	sp, #16
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	40007000 	.word	0x40007000
 8005c60:	fffff9ff 	.word	0xfffff9ff
 8005c64:	20000000 	.word	0x20000000
 8005c68:	000f4240 	.word	0x000f4240

08005c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e2f3      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2201      	movs	r2, #1
 8005c84:	4013      	ands	r3, r2
 8005c86:	d100      	bne.n	8005c8a <HAL_RCC_OscConfig+0x1e>
 8005c88:	e07c      	b.n	8005d84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c8a:	4bc3      	ldr	r3, [pc, #780]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2238      	movs	r2, #56	@ 0x38
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c94:	4bc0      	ldr	r3, [pc, #768]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d102      	bne.n	8005caa <HAL_RCC_OscConfig+0x3e>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d002      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d10b      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	2380      	movs	r3, #128	@ 0x80
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d062      	beq.n	8005d82 <HAL_RCC_OscConfig+0x116>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d15e      	bne.n	8005d82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e2ce      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	025b      	lsls	r3, r3, #9
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x78>
 8005cd4:	4bb0      	ldr	r3, [pc, #704]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4baf      	ldr	r3, [pc, #700]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005cda:	2180      	movs	r1, #128	@ 0x80
 8005cdc:	0249      	lsls	r1, r1, #9
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e020      	b.n	8005d26 <HAL_RCC_OscConfig+0xba>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	23a0      	movs	r3, #160	@ 0xa0
 8005cea:	02db      	lsls	r3, r3, #11
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d10e      	bne.n	8005d0e <HAL_RCC_OscConfig+0xa2>
 8005cf0:	4ba9      	ldr	r3, [pc, #676]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4ba8      	ldr	r3, [pc, #672]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005cf6:	2180      	movs	r1, #128	@ 0x80
 8005cf8:	02c9      	lsls	r1, r1, #11
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	4ba6      	ldr	r3, [pc, #664]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4ba5      	ldr	r3, [pc, #660]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d04:	2180      	movs	r1, #128	@ 0x80
 8005d06:	0249      	lsls	r1, r1, #9
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e00b      	b.n	8005d26 <HAL_RCC_OscConfig+0xba>
 8005d0e:	4ba2      	ldr	r3, [pc, #648]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4ba1      	ldr	r3, [pc, #644]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d14:	49a1      	ldr	r1, [pc, #644]	@ (8005f9c <HAL_RCC_OscConfig+0x330>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	4b9f      	ldr	r3, [pc, #636]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d20:	499f      	ldr	r1, [pc, #636]	@ (8005fa0 <HAL_RCC_OscConfig+0x334>)
 8005d22:	400a      	ands	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2e:	f7fd ff25 	bl	8003b7c <HAL_GetTick>
 8005d32:	0003      	movs	r3, r0
 8005d34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fd ff20 	bl	8003b7c <HAL_GetTick>
 8005d3c:	0002      	movs	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	@ 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e28d      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d4a:	4b93      	ldr	r3, [pc, #588]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	2380      	movs	r3, #128	@ 0x80
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	4013      	ands	r3, r2
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0xcc>
 8005d56:	e015      	b.n	8005d84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fd ff10 	bl	8003b7c <HAL_GetTick>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d62:	f7fd ff0b 	bl	8003b7c <HAL_GetTick>
 8005d66:	0002      	movs	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b64      	cmp	r3, #100	@ 0x64
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e278      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d74:	4b88      	ldr	r3, [pc, #544]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	2380      	movs	r3, #128	@ 0x80
 8005d7a:	029b      	lsls	r3, r3, #10
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCC_OscConfig+0xf6>
 8005d80:	e000      	b.n	8005d84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d100      	bne.n	8005d90 <HAL_RCC_OscConfig+0x124>
 8005d8e:	e099      	b.n	8005ec4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d90:	4b81      	ldr	r3, [pc, #516]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2238      	movs	r2, #56	@ 0x38
 8005d96:	4013      	ands	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	4013      	ands	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d102      	bne.n	8005db0 <HAL_RCC_OscConfig+0x144>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d002      	beq.n	8005db6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d135      	bne.n	8005e22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db6:	4b78      	ldr	r3, [pc, #480]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	2380      	movs	r3, #128	@ 0x80
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d005      	beq.n	8005dce <HAL_RCC_OscConfig+0x162>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e24b      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dce:	4b72      	ldr	r3, [pc, #456]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	4a74      	ldr	r2, [pc, #464]	@ (8005fa4 <HAL_RCC_OscConfig+0x338>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	0019      	movs	r1, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	021a      	lsls	r2, r3, #8
 8005dde:	4b6e      	ldr	r3, [pc, #440]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005de0:	430a      	orrs	r2, r1
 8005de2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d112      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005dea:	4b6b      	ldr	r3, [pc, #428]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6e      	ldr	r2, [pc, #440]	@ (8005fa8 <HAL_RCC_OscConfig+0x33c>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	0019      	movs	r1, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	4b67      	ldr	r3, [pc, #412]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005dfe:	4b66      	ldr	r3, [pc, #408]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	0adb      	lsrs	r3, r3, #11
 8005e04:	2207      	movs	r2, #7
 8005e06:	4013      	ands	r3, r2
 8005e08:	4a68      	ldr	r2, [pc, #416]	@ (8005fac <HAL_RCC_OscConfig+0x340>)
 8005e0a:	40da      	lsrs	r2, r3
 8005e0c:	4b68      	ldr	r3, [pc, #416]	@ (8005fb0 <HAL_RCC_OscConfig+0x344>)
 8005e0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e10:	4b68      	ldr	r3, [pc, #416]	@ (8005fb4 <HAL_RCC_OscConfig+0x348>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7fd fe55 	bl	8003ac4 <HAL_InitTick>
 8005e1a:	1e03      	subs	r3, r0, #0
 8005e1c:	d051      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e221      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d030      	beq.n	8005e8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa8 <HAL_RCC_OscConfig+0x33c>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	0019      	movs	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	4b57      	ldr	r3, [pc, #348]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005e3e:	4b56      	ldr	r3, [pc, #344]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b55      	ldr	r3, [pc, #340]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e44:	2180      	movs	r1, #128	@ 0x80
 8005e46:	0049      	lsls	r1, r1, #1
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fd fe96 	bl	8003b7c <HAL_GetTick>
 8005e50:	0003      	movs	r3, r0
 8005e52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e56:	f7fd fe91 	bl	8003b7c <HAL_GetTick>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e1fe      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e68:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	2380      	movs	r3, #128	@ 0x80
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4013      	ands	r3, r2
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e74:	4b48      	ldr	r3, [pc, #288]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa4 <HAL_RCC_OscConfig+0x338>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	021a      	lsls	r2, r3, #8
 8005e84:	4b44      	ldr	r3, [pc, #272]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	e01b      	b.n	8005ec4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005e8c:	4b42      	ldr	r3, [pc, #264]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	4b41      	ldr	r3, [pc, #260]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005e92:	4949      	ldr	r1, [pc, #292]	@ (8005fb8 <HAL_RCC_OscConfig+0x34c>)
 8005e94:	400a      	ands	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fd fe70 	bl	8003b7c <HAL_GetTick>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea2:	f7fd fe6b 	bl	8003b7c <HAL_GetTick>
 8005ea6:	0002      	movs	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e1d8      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb4:	4b38      	ldr	r3, [pc, #224]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	2380      	movs	r3, #128	@ 0x80
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d1f0      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x236>
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2208      	movs	r2, #8
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d047      	beq.n	8005f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005ece:	4b32      	ldr	r3, [pc, #200]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2238      	movs	r2, #56	@ 0x38
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b18      	cmp	r3, #24
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005eda:	4b2f      	ldr	r3, [pc, #188]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ede:	2202      	movs	r2, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d03c      	beq.n	8005f5e <HAL_RCC_OscConfig+0x2f2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d138      	bne.n	8005f5e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e1ba      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d019      	beq.n	8005f2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005ef8:	4b27      	ldr	r3, [pc, #156]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005efa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005efc:	4b26      	ldr	r3, [pc, #152]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005efe:	2101      	movs	r1, #1
 8005f00:	430a      	orrs	r2, r1
 8005f02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fd fe3a 	bl	8003b7c <HAL_GetTick>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f0e:	f7fd fe35 	bl	8003b7c <HAL_GetTick>
 8005f12:	0002      	movs	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e1a2      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f20:	4b1d      	ldr	r3, [pc, #116]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f24:	2202      	movs	r2, #2
 8005f26:	4013      	ands	r3, r2
 8005f28:	d0f1      	beq.n	8005f0e <HAL_RCC_OscConfig+0x2a2>
 8005f2a:	e018      	b.n	8005f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005f2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f30:	4b19      	ldr	r3, [pc, #100]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005f32:	2101      	movs	r1, #1
 8005f34:	438a      	bics	r2, r1
 8005f36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fd fe20 	bl	8003b7c <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f42:	f7fd fe1b 	bl	8003b7c <HAL_GetTick>
 8005f46:	0002      	movs	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e188      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f54:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f58:	2202      	movs	r2, #2
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d1f1      	bne.n	8005f42 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2204      	movs	r2, #4
 8005f64:	4013      	ands	r3, r2
 8005f66:	d100      	bne.n	8005f6a <HAL_RCC_OscConfig+0x2fe>
 8005f68:	e0c6      	b.n	80060f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6a:	231f      	movs	r3, #31
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005f72:	4b09      	ldr	r3, [pc, #36]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2238      	movs	r2, #56	@ 0x38
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d11e      	bne.n	8005fbc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <HAL_RCC_OscConfig+0x32c>)
 8005f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f82:	2202      	movs	r2, #2
 8005f84:	4013      	ands	r3, r2
 8005f86:	d100      	bne.n	8005f8a <HAL_RCC_OscConfig+0x31e>
 8005f88:	e0b6      	b.n	80060f8 <HAL_RCC_OscConfig+0x48c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d000      	beq.n	8005f94 <HAL_RCC_OscConfig+0x328>
 8005f92:	e0b1      	b.n	80060f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e166      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	fffeffff 	.word	0xfffeffff
 8005fa0:	fffbffff 	.word	0xfffbffff
 8005fa4:	ffff80ff 	.word	0xffff80ff
 8005fa8:	ffffc7ff 	.word	0xffffc7ff
 8005fac:	00f42400 	.word	0x00f42400
 8005fb0:	20000000 	.word	0x20000000
 8005fb4:	20000004 	.word	0x20000004
 8005fb8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fbc:	4bac      	ldr	r3, [pc, #688]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8005fbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	055b      	lsls	r3, r3, #21
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <HAL_RCC_OscConfig+0x360>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <HAL_RCC_OscConfig+0x362>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005fd2:	4ba7      	ldr	r3, [pc, #668]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8005fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fd6:	4ba6      	ldr	r3, [pc, #664]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8005fd8:	2180      	movs	r1, #128	@ 0x80
 8005fda:	0549      	lsls	r1, r1, #21
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005fe0:	4ba3      	ldr	r3, [pc, #652]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8005fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	055b      	lsls	r3, r3, #21
 8005fe8:	4013      	ands	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005fee:	231f      	movs	r3, #31
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8006274 <HAL_RCC_OscConfig+0x608>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	2380      	movs	r3, #128	@ 0x80
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4013      	ands	r3, r2
 8006000:	d11a      	bne.n	8006038 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006002:	4b9c      	ldr	r3, [pc, #624]	@ (8006274 <HAL_RCC_OscConfig+0x608>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b9b      	ldr	r3, [pc, #620]	@ (8006274 <HAL_RCC_OscConfig+0x608>)
 8006008:	2180      	movs	r1, #128	@ 0x80
 800600a:	0049      	lsls	r1, r1, #1
 800600c:	430a      	orrs	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006010:	f7fd fdb4 	bl	8003b7c <HAL_GetTick>
 8006014:	0003      	movs	r3, r0
 8006016:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601a:	f7fd fdaf 	bl	8003b7c <HAL_GetTick>
 800601e:	0002      	movs	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e11c      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800602c:	4b91      	ldr	r3, [pc, #580]	@ (8006274 <HAL_RCC_OscConfig+0x608>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2380      	movs	r3, #128	@ 0x80
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	4013      	ands	r3, r2
 8006036:	d0f0      	beq.n	800601a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d106      	bne.n	800604e <HAL_RCC_OscConfig+0x3e2>
 8006040:	4b8b      	ldr	r3, [pc, #556]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006044:	4b8a      	ldr	r3, [pc, #552]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006046:	2101      	movs	r1, #1
 8006048:	430a      	orrs	r2, r1
 800604a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800604c:	e01c      	b.n	8006088 <HAL_RCC_OscConfig+0x41c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b05      	cmp	r3, #5
 8006054:	d10c      	bne.n	8006070 <HAL_RCC_OscConfig+0x404>
 8006056:	4b86      	ldr	r3, [pc, #536]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800605a:	4b85      	ldr	r3, [pc, #532]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800605c:	2104      	movs	r1, #4
 800605e:	430a      	orrs	r2, r1
 8006060:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006062:	4b83      	ldr	r3, [pc, #524]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006064:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006066:	4b82      	ldr	r3, [pc, #520]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006068:	2101      	movs	r1, #1
 800606a:	430a      	orrs	r2, r1
 800606c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800606e:	e00b      	b.n	8006088 <HAL_RCC_OscConfig+0x41c>
 8006070:	4b7f      	ldr	r3, [pc, #508]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006072:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006074:	4b7e      	ldr	r3, [pc, #504]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006076:	2101      	movs	r1, #1
 8006078:	438a      	bics	r2, r1
 800607a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800607c:	4b7c      	ldr	r3, [pc, #496]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800607e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006080:	4b7b      	ldr	r3, [pc, #492]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006082:	2104      	movs	r1, #4
 8006084:	438a      	bics	r2, r1
 8006086:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d014      	beq.n	80060ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006090:	f7fd fd74 	bl	8003b7c <HAL_GetTick>
 8006094:	0003      	movs	r3, r0
 8006096:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006098:	e009      	b.n	80060ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609a:	f7fd fd6f 	bl	8003b7c <HAL_GetTick>
 800609e:	0002      	movs	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	4a74      	ldr	r2, [pc, #464]	@ (8006278 <HAL_RCC_OscConfig+0x60c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e0db      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ae:	4b70      	ldr	r3, [pc, #448]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80060b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b2:	2202      	movs	r2, #2
 80060b4:	4013      	ands	r3, r2
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_OscConfig+0x42e>
 80060b8:	e013      	b.n	80060e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ba:	f7fd fd5f 	bl	8003b7c <HAL_GetTick>
 80060be:	0003      	movs	r3, r0
 80060c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060c2:	e009      	b.n	80060d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f7fd fd5a 	bl	8003b7c <HAL_GetTick>
 80060c8:	0002      	movs	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	4a6a      	ldr	r2, [pc, #424]	@ (8006278 <HAL_RCC_OscConfig+0x60c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e0c6      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d8:	4b65      	ldr	r3, [pc, #404]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80060da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060dc:	2202      	movs	r2, #2
 80060de:	4013      	ands	r3, r2
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80060e2:	231f      	movs	r3, #31
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d105      	bne.n	80060f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80060ec:	4b60      	ldr	r3, [pc, #384]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80060ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060f0:	4b5f      	ldr	r3, [pc, #380]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80060f2:	4962      	ldr	r1, [pc, #392]	@ (800627c <HAL_RCC_OscConfig+0x610>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d100      	bne.n	8006102 <HAL_RCC_OscConfig+0x496>
 8006100:	e0b0      	b.n	8006264 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006102:	4b5b      	ldr	r3, [pc, #364]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2238      	movs	r2, #56	@ 0x38
 8006108:	4013      	ands	r3, r2
 800610a:	2b10      	cmp	r3, #16
 800610c:	d100      	bne.n	8006110 <HAL_RCC_OscConfig+0x4a4>
 800610e:	e078      	b.n	8006202 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d153      	bne.n	80061c0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006118:	4b55      	ldr	r3, [pc, #340]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4b54      	ldr	r3, [pc, #336]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800611e:	4958      	ldr	r1, [pc, #352]	@ (8006280 <HAL_RCC_OscConfig+0x614>)
 8006120:	400a      	ands	r2, r1
 8006122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fd fd2a 	bl	8003b7c <HAL_GetTick>
 8006128:	0003      	movs	r3, r0
 800612a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612e:	f7fd fd25 	bl	8003b7c <HAL_GetTick>
 8006132:	0002      	movs	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e092      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006140:	4b4b      	ldr	r3, [pc, #300]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	2380      	movs	r3, #128	@ 0x80
 8006146:	049b      	lsls	r3, r3, #18
 8006148:	4013      	ands	r3, r2
 800614a:	d1f0      	bne.n	800612e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800614c:	4b48      	ldr	r3, [pc, #288]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4a4c      	ldr	r2, [pc, #304]	@ (8006284 <HAL_RCC_OscConfig+0x618>)
 8006152:	4013      	ands	r3, r2
 8006154:	0019      	movs	r1, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1a      	ldr	r2, [r3, #32]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006172:	431a      	orrs	r2, r3
 8006174:	4b3e      	ldr	r3, [pc, #248]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006176:	430a      	orrs	r2, r1
 8006178:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800617a:	4b3d      	ldr	r3, [pc, #244]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b3c      	ldr	r3, [pc, #240]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006180:	2180      	movs	r1, #128	@ 0x80
 8006182:	0449      	lsls	r1, r1, #17
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006188:	4b39      	ldr	r3, [pc, #228]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	4b38      	ldr	r3, [pc, #224]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 800618e:	2180      	movs	r1, #128	@ 0x80
 8006190:	0549      	lsls	r1, r1, #21
 8006192:	430a      	orrs	r2, r1
 8006194:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fd fcf1 	bl	8003b7c <HAL_GetTick>
 800619a:	0003      	movs	r3, r0
 800619c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a0:	f7fd fcec 	bl	8003b7c <HAL_GetTick>
 80061a4:	0002      	movs	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e059      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	049b      	lsls	r3, r3, #18
 80061ba:	4013      	ands	r3, r2
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x534>
 80061be:	e051      	b.n	8006264 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80061c6:	492e      	ldr	r1, [pc, #184]	@ (8006280 <HAL_RCC_OscConfig+0x614>)
 80061c8:	400a      	ands	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fd fcd6 	bl	8003b7c <HAL_GetTick>
 80061d0:	0003      	movs	r3, r0
 80061d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d6:	f7fd fcd1 	bl	8003b7c <HAL_GetTick>
 80061da:	0002      	movs	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e03e      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061e8:	4b21      	ldr	r3, [pc, #132]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	2380      	movs	r3, #128	@ 0x80
 80061ee:	049b      	lsls	r3, r3, #18
 80061f0:	4013      	ands	r3, r2
 80061f2:	d1f0      	bne.n	80061d6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80061f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 80061fa:	4923      	ldr	r1, [pc, #140]	@ (8006288 <HAL_RCC_OscConfig+0x61c>)
 80061fc:	400a      	ands	r2, r1
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	e030      	b.n	8006264 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e02b      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800620e:	4b18      	ldr	r3, [pc, #96]	@ (8006270 <HAL_RCC_OscConfig+0x604>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2203      	movs	r2, #3
 8006218:	401a      	ands	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	429a      	cmp	r2, r3
 8006220:	d11e      	bne.n	8006260 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2270      	movs	r2, #112	@ 0x70
 8006226:	401a      	ands	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d117      	bne.n	8006260 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	23fe      	movs	r3, #254	@ 0xfe
 8006234:	01db      	lsls	r3, r3, #7
 8006236:	401a      	ands	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d10e      	bne.n	8006260 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	23f8      	movs	r3, #248	@ 0xf8
 8006246:	039b      	lsls	r3, r3, #14
 8006248:	401a      	ands	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800624e:	429a      	cmp	r2, r3
 8006250:	d106      	bne.n	8006260 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	0f5b      	lsrs	r3, r3, #29
 8006256:	075a      	lsls	r2, r3, #29
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	0018      	movs	r0, r3
 8006268:	46bd      	mov	sp, r7
 800626a:	b008      	add	sp, #32
 800626c:	bd80      	pop	{r7, pc}
 800626e:	46c0      	nop			@ (mov r8, r8)
 8006270:	40021000 	.word	0x40021000
 8006274:	40007000 	.word	0x40007000
 8006278:	00001388 	.word	0x00001388
 800627c:	efffffff 	.word	0xefffffff
 8006280:	feffffff 	.word	0xfeffffff
 8006284:	1fc1808c 	.word	0x1fc1808c
 8006288:	effefffc 	.word	0xeffefffc

0800628c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e0e9      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062a0:	4b76      	ldr	r3, [pc, #472]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2207      	movs	r2, #7
 80062a6:	4013      	ands	r3, r2
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d91e      	bls.n	80062ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ae:	4b73      	ldr	r3, [pc, #460]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2207      	movs	r2, #7
 80062b4:	4393      	bics	r3, r2
 80062b6:	0019      	movs	r1, r3
 80062b8:	4b70      	ldr	r3, [pc, #448]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062c0:	f7fd fc5c 	bl	8003b7c <HAL_GetTick>
 80062c4:	0003      	movs	r3, r0
 80062c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062c8:	e009      	b.n	80062de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ca:	f7fd fc57 	bl	8003b7c <HAL_GetTick>
 80062ce:	0002      	movs	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	4a6a      	ldr	r2, [pc, #424]	@ (8006480 <HAL_RCC_ClockConfig+0x1f4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0ca      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80062de:	4b67      	ldr	r3, [pc, #412]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2207      	movs	r2, #7
 80062e4:	4013      	ands	r3, r2
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d1ee      	bne.n	80062ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2202      	movs	r2, #2
 80062f2:	4013      	ands	r3, r2
 80062f4:	d015      	beq.n	8006322 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2204      	movs	r2, #4
 80062fc:	4013      	ands	r3, r2
 80062fe:	d006      	beq.n	800630e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006300:	4b60      	ldr	r3, [pc, #384]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	4b5f      	ldr	r3, [pc, #380]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 8006306:	21e0      	movs	r1, #224	@ 0xe0
 8006308:	01c9      	lsls	r1, r1, #7
 800630a:	430a      	orrs	r2, r1
 800630c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800630e:	4b5d      	ldr	r3, [pc, #372]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	4a5d      	ldr	r2, [pc, #372]	@ (8006488 <HAL_RCC_ClockConfig+0x1fc>)
 8006314:	4013      	ands	r3, r2
 8006316:	0019      	movs	r1, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	4b59      	ldr	r3, [pc, #356]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 800631e:	430a      	orrs	r2, r1
 8006320:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2201      	movs	r2, #1
 8006328:	4013      	ands	r3, r2
 800632a:	d057      	beq.n	80063dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006334:	4b53      	ldr	r3, [pc, #332]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	2380      	movs	r3, #128	@ 0x80
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	4013      	ands	r3, r2
 800633e:	d12b      	bne.n	8006398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e097      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d107      	bne.n	800635c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800634c:	4b4d      	ldr	r3, [pc, #308]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	049b      	lsls	r3, r3, #18
 8006354:	4013      	ands	r3, r2
 8006356:	d11f      	bne.n	8006398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e08b      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d107      	bne.n	8006374 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006364:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	2380      	movs	r3, #128	@ 0x80
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4013      	ands	r3, r2
 800636e:	d113      	bne.n	8006398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e07f      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b03      	cmp	r3, #3
 800637a:	d106      	bne.n	800638a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800637c:	4b41      	ldr	r3, [pc, #260]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 800637e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006380:	2202      	movs	r2, #2
 8006382:	4013      	ands	r3, r2
 8006384:	d108      	bne.n	8006398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e074      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800638a:	4b3e      	ldr	r3, [pc, #248]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 800638c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638e:	2202      	movs	r2, #2
 8006390:	4013      	ands	r3, r2
 8006392:	d101      	bne.n	8006398 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e06d      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006398:	4b3a      	ldr	r3, [pc, #232]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2207      	movs	r2, #7
 800639e:	4393      	bics	r3, r2
 80063a0:	0019      	movs	r1, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	4b37      	ldr	r3, [pc, #220]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 80063a8:	430a      	orrs	r2, r1
 80063aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ac:	f7fd fbe6 	bl	8003b7c <HAL_GetTick>
 80063b0:	0003      	movs	r3, r0
 80063b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b4:	e009      	b.n	80063ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b6:	f7fd fbe1 	bl	8003b7c <HAL_GetTick>
 80063ba:	0002      	movs	r2, r0
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006480 <HAL_RCC_ClockConfig+0x1f4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e054      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2238      	movs	r2, #56	@ 0x38
 80063d0:	401a      	ands	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	429a      	cmp	r2, r3
 80063da:	d1ec      	bne.n	80063b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063dc:	4b27      	ldr	r3, [pc, #156]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2207      	movs	r2, #7
 80063e2:	4013      	ands	r3, r2
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d21e      	bcs.n	8006428 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b24      	ldr	r3, [pc, #144]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2207      	movs	r2, #7
 80063f0:	4393      	bics	r3, r2
 80063f2:	0019      	movs	r1, r3
 80063f4:	4b21      	ldr	r3, [pc, #132]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80063fc:	f7fd fbbe 	bl	8003b7c <HAL_GetTick>
 8006400:	0003      	movs	r3, r0
 8006402:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006404:	e009      	b.n	800641a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006406:	f7fd fbb9 	bl	8003b7c <HAL_GetTick>
 800640a:	0002      	movs	r2, r0
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	4a1b      	ldr	r2, [pc, #108]	@ (8006480 <HAL_RCC_ClockConfig+0x1f4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e02c      	b.n	8006474 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800641a:	4b18      	ldr	r3, [pc, #96]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2207      	movs	r2, #7
 8006420:	4013      	ands	r3, r2
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d1ee      	bne.n	8006406 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2204      	movs	r2, #4
 800642e:	4013      	ands	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006432:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	4a15      	ldr	r2, [pc, #84]	@ (800648c <HAL_RCC_ClockConfig+0x200>)
 8006438:	4013      	ands	r3, r2
 800643a:	0019      	movs	r1, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006446:	f000 f829 	bl	800649c <HAL_RCC_GetSysClockFreq>
 800644a:	0001      	movs	r1, r0
 800644c:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	220f      	movs	r2, #15
 8006454:	401a      	ands	r2, r3
 8006456:	4b0e      	ldr	r3, [pc, #56]	@ (8006490 <HAL_RCC_ClockConfig+0x204>)
 8006458:	0092      	lsls	r2, r2, #2
 800645a:	58d3      	ldr	r3, [r2, r3]
 800645c:	221f      	movs	r2, #31
 800645e:	4013      	ands	r3, r2
 8006460:	000a      	movs	r2, r1
 8006462:	40da      	lsrs	r2, r3
 8006464:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <HAL_RCC_ClockConfig+0x208>)
 8006466:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006468:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <HAL_RCC_ClockConfig+0x20c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	0018      	movs	r0, r3
 800646e:	f7fd fb29 	bl	8003ac4 <HAL_InitTick>
 8006472:	0003      	movs	r3, r0
}
 8006474:	0018      	movs	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	b004      	add	sp, #16
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40022000 	.word	0x40022000
 8006480:	00001388 	.word	0x00001388
 8006484:	40021000 	.word	0x40021000
 8006488:	fffff0ff 	.word	0xfffff0ff
 800648c:	ffff8fff 	.word	0xffff8fff
 8006490:	0800a628 	.word	0x0800a628
 8006494:	20000000 	.word	0x20000000
 8006498:	20000004 	.word	0x20000004

0800649c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064a2:	4b3c      	ldr	r3, [pc, #240]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2238      	movs	r2, #56	@ 0x38
 80064a8:	4013      	ands	r3, r2
 80064aa:	d10f      	bne.n	80064cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80064ac:	4b39      	ldr	r3, [pc, #228]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	0adb      	lsrs	r3, r3, #11
 80064b2:	2207      	movs	r2, #7
 80064b4:	4013      	ands	r3, r2
 80064b6:	2201      	movs	r2, #1
 80064b8:	409a      	lsls	r2, r3
 80064ba:	0013      	movs	r3, r2
 80064bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	4835      	ldr	r0, [pc, #212]	@ (8006598 <HAL_RCC_GetSysClockFreq+0xfc>)
 80064c2:	f7f9 fe39 	bl	8000138 <__udivsi3>
 80064c6:	0003      	movs	r3, r0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e05d      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064cc:	4b31      	ldr	r3, [pc, #196]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2238      	movs	r2, #56	@ 0x38
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d102      	bne.n	80064de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064d8:	4b30      	ldr	r3, [pc, #192]	@ (800659c <HAL_RCC_GetSysClockFreq+0x100>)
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	e054      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064de:	4b2d      	ldr	r3, [pc, #180]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2238      	movs	r2, #56	@ 0x38
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b10      	cmp	r3, #16
 80064e8:	d138      	bne.n	800655c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80064ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2203      	movs	r2, #3
 80064f0:	4013      	ands	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064f4:	4b27      	ldr	r3, [pc, #156]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	2207      	movs	r2, #7
 80064fc:	4013      	ands	r3, r2
 80064fe:	3301      	adds	r3, #1
 8006500:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b03      	cmp	r3, #3
 8006506:	d10d      	bne.n	8006524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	4824      	ldr	r0, [pc, #144]	@ (800659c <HAL_RCC_GetSysClockFreq+0x100>)
 800650c:	f7f9 fe14 	bl	8000138 <__udivsi3>
 8006510:	0003      	movs	r3, r0
 8006512:	0019      	movs	r1, r3
 8006514:	4b1f      	ldr	r3, [pc, #124]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	0a1b      	lsrs	r3, r3, #8
 800651a:	227f      	movs	r2, #127	@ 0x7f
 800651c:	4013      	ands	r3, r2
 800651e:	434b      	muls	r3, r1
 8006520:	617b      	str	r3, [r7, #20]
        break;
 8006522:	e00d      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	481c      	ldr	r0, [pc, #112]	@ (8006598 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006528:	f7f9 fe06 	bl	8000138 <__udivsi3>
 800652c:	0003      	movs	r3, r0
 800652e:	0019      	movs	r1, r3
 8006530:	4b18      	ldr	r3, [pc, #96]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	227f      	movs	r2, #127	@ 0x7f
 8006538:	4013      	ands	r3, r2
 800653a:	434b      	muls	r3, r1
 800653c:	617b      	str	r3, [r7, #20]
        break;
 800653e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006540:	4b14      	ldr	r3, [pc, #80]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	0f5b      	lsrs	r3, r3, #29
 8006546:	2207      	movs	r2, #7
 8006548:	4013      	ands	r3, r2
 800654a:	3301      	adds	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	6978      	ldr	r0, [r7, #20]
 8006552:	f7f9 fdf1 	bl	8000138 <__udivsi3>
 8006556:	0003      	movs	r3, r0
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e015      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800655c:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2238      	movs	r2, #56	@ 0x38
 8006562:	4013      	ands	r3, r2
 8006564:	2b20      	cmp	r3, #32
 8006566:	d103      	bne.n	8006570 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	e00b      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006570:	4b08      	ldr	r3, [pc, #32]	@ (8006594 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	2238      	movs	r2, #56	@ 0x38
 8006576:	4013      	ands	r3, r2
 8006578:	2b18      	cmp	r3, #24
 800657a:	d103      	bne.n	8006584 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800657c:	23fa      	movs	r3, #250	@ 0xfa
 800657e:	01db      	lsls	r3, r3, #7
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e001      	b.n	8006588 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006588:	693b      	ldr	r3, [r7, #16]
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b006      	add	sp, #24
 8006590:	bd80      	pop	{r7, pc}
 8006592:	46c0      	nop			@ (mov r8, r8)
 8006594:	40021000 	.word	0x40021000
 8006598:	00f42400 	.word	0x00f42400
 800659c:	007a1200 	.word	0x007a1200

080065a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80065a8:	2313      	movs	r3, #19
 80065aa:	18fb      	adds	r3, r7, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065b0:	2312      	movs	r3, #18
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	2380      	movs	r3, #128	@ 0x80
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	4013      	ands	r3, r2
 80065c2:	d100      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80065c4:	e0a3      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c6:	2011      	movs	r0, #17
 80065c8:	183b      	adds	r3, r7, r0
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ce:	4b7f      	ldr	r3, [pc, #508]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065d2:	2380      	movs	r3, #128	@ 0x80
 80065d4:	055b      	lsls	r3, r3, #21
 80065d6:	4013      	ands	r3, r2
 80065d8:	d110      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	4b7c      	ldr	r3, [pc, #496]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065de:	4b7b      	ldr	r3, [pc, #492]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065e0:	2180      	movs	r1, #128	@ 0x80
 80065e2:	0549      	lsls	r1, r1, #21
 80065e4:	430a      	orrs	r2, r1
 80065e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80065e8:	4b78      	ldr	r3, [pc, #480]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80065ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065ec:	2380      	movs	r3, #128	@ 0x80
 80065ee:	055b      	lsls	r3, r3, #21
 80065f0:	4013      	ands	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f6:	183b      	adds	r3, r7, r0
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065fc:	4b74      	ldr	r3, [pc, #464]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4b73      	ldr	r3, [pc, #460]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006602:	2180      	movs	r1, #128	@ 0x80
 8006604:	0049      	lsls	r1, r1, #1
 8006606:	430a      	orrs	r2, r1
 8006608:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800660a:	f7fd fab7 	bl	8003b7c <HAL_GetTick>
 800660e:	0003      	movs	r3, r0
 8006610:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006612:	e00b      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006614:	f7fd fab2 	bl	8003b7c <HAL_GetTick>
 8006618:	0002      	movs	r2, r0
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d904      	bls.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006622:	2313      	movs	r3, #19
 8006624:	18fb      	adds	r3, r7, r3
 8006626:	2203      	movs	r2, #3
 8006628:	701a      	strb	r2, [r3, #0]
        break;
 800662a:	e005      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800662c:	4b68      	ldr	r3, [pc, #416]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	2380      	movs	r3, #128	@ 0x80
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4013      	ands	r3, r2
 8006636:	d0ed      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006638:	2313      	movs	r3, #19
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d154      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006642:	4b62      	ldr	r3, [pc, #392]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006644:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006646:	23c0      	movs	r3, #192	@ 0xc0
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4013      	ands	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d019      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	429a      	cmp	r2, r3
 800665c:	d014      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800665e:	4b5b      	ldr	r3, [pc, #364]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006662:	4a5c      	ldr	r2, [pc, #368]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8006664:	4013      	ands	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006668:	4b58      	ldr	r3, [pc, #352]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800666a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800666c:	4b57      	ldr	r3, [pc, #348]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800666e:	2180      	movs	r1, #128	@ 0x80
 8006670:	0249      	lsls	r1, r1, #9
 8006672:	430a      	orrs	r2, r1
 8006674:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006676:	4b55      	ldr	r3, [pc, #340]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006678:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800667a:	4b54      	ldr	r3, [pc, #336]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800667c:	4956      	ldr	r1, [pc, #344]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800667e:	400a      	ands	r2, r1
 8006680:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006682:	4b52      	ldr	r3, [pc, #328]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2201      	movs	r2, #1
 800668c:	4013      	ands	r3, r2
 800668e:	d016      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fd fa74 	bl	8003b7c <HAL_GetTick>
 8006694:	0003      	movs	r3, r0
 8006696:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006698:	e00c      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669a:	f7fd fa6f 	bl	8003b7c <HAL_GetTick>
 800669e:	0002      	movs	r2, r0
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	4a4d      	ldr	r2, [pc, #308]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d904      	bls.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80066aa:	2313      	movs	r3, #19
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	2203      	movs	r2, #3
 80066b0:	701a      	strb	r2, [r3, #0]
            break;
 80066b2:	e004      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066b4:	4b45      	ldr	r3, [pc, #276]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b8:	2202      	movs	r2, #2
 80066ba:	4013      	ands	r3, r2
 80066bc:	d0ed      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80066be:	2313      	movs	r3, #19
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c8:	4b40      	ldr	r3, [pc, #256]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066cc:	4a41      	ldr	r2, [pc, #260]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	0019      	movs	r1, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	4b3d      	ldr	r3, [pc, #244]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80066d8:	430a      	orrs	r2, r1
 80066da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80066dc:	e00c      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066de:	2312      	movs	r3, #18
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	2213      	movs	r2, #19
 80066e4:	18ba      	adds	r2, r7, r2
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e005      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ec:	2312      	movs	r3, #18
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	2213      	movs	r2, #19
 80066f2:	18ba      	adds	r2, r7, r2
 80066f4:	7812      	ldrb	r2, [r2, #0]
 80066f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066f8:	2311      	movs	r3, #17
 80066fa:	18fb      	adds	r3, r7, r3
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d105      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006702:	4b32      	ldr	r3, [pc, #200]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006706:	4b31      	ldr	r3, [pc, #196]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006708:	4935      	ldr	r1, [pc, #212]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800670a:	400a      	ands	r2, r1
 800670c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2201      	movs	r2, #1
 8006714:	4013      	ands	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006718:	4b2c      	ldr	r3, [pc, #176]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	2203      	movs	r2, #3
 800671e:	4393      	bics	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	4b29      	ldr	r3, [pc, #164]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006728:	430a      	orrs	r2, r1
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2220      	movs	r2, #32
 8006732:	4013      	ands	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006736:	4b25      	ldr	r3, [pc, #148]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673a:	4a2a      	ldr	r2, [pc, #168]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	4b21      	ldr	r3, [pc, #132]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006746:	430a      	orrs	r2, r1
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	2380      	movs	r3, #128	@ 0x80
 8006750:	01db      	lsls	r3, r3, #7
 8006752:	4013      	ands	r3, r2
 8006754:	d015      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006756:	4b1d      	ldr	r3, [pc, #116]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	0899      	lsrs	r1, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006764:	430a      	orrs	r2, r1
 8006766:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	2380      	movs	r3, #128	@ 0x80
 800676e:	05db      	lsls	r3, r3, #23
 8006770:	429a      	cmp	r2, r3
 8006772:	d106      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006774:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	4b14      	ldr	r3, [pc, #80]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800677a:	2180      	movs	r1, #128	@ 0x80
 800677c:	0249      	lsls	r1, r1, #9
 800677e:	430a      	orrs	r2, r1
 8006780:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	4013      	ands	r3, r2
 800678c:	d016      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800678e:	4b0f      	ldr	r3, [pc, #60]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006792:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006794:	4013      	ands	r3, r2
 8006796:	0019      	movs	r1, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	4b0b      	ldr	r3, [pc, #44]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800679e:	430a      	orrs	r2, r1
 80067a0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	01db      	lsls	r3, r3, #7
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d106      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80067ae:	4b07      	ldr	r3, [pc, #28]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	4b06      	ldr	r3, [pc, #24]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80067b4:	2180      	movs	r1, #128	@ 0x80
 80067b6:	0249      	lsls	r1, r1, #9
 80067b8:	430a      	orrs	r2, r1
 80067ba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80067bc:	2312      	movs	r3, #18
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	781b      	ldrb	r3, [r3, #0]
}
 80067c2:	0018      	movs	r0, r3
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b006      	add	sp, #24
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	46c0      	nop			@ (mov r8, r8)
 80067cc:	40021000 	.word	0x40021000
 80067d0:	40007000 	.word	0x40007000
 80067d4:	fffffcff 	.word	0xfffffcff
 80067d8:	fffeffff 	.word	0xfffeffff
 80067dc:	00001388 	.word	0x00001388
 80067e0:	efffffff 	.word	0xefffffff
 80067e4:	ffffcfff 	.word	0xffffcfff
 80067e8:	ffff3fff 	.word	0xffff3fff

080067ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067ec:	b5b0      	push	{r4, r5, r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067f4:	230f      	movs	r3, #15
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	2201      	movs	r2, #1
 80067fa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d100      	bne.n	8006804 <HAL_RTC_Init+0x18>
 8006802:	e08c      	b.n	800691e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2229      	movs	r2, #41	@ 0x29
 8006808:	5c9b      	ldrb	r3, [r3, r2]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2228      	movs	r2, #40	@ 0x28
 8006814:	2100      	movs	r1, #0
 8006816:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2288      	movs	r2, #136	@ 0x88
 800681c:	0212      	lsls	r2, r2, #8
 800681e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	0018      	movs	r0, r3
 8006824:	f7fc ffe6 	bl	80037f4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2229      	movs	r2, #41	@ 0x29
 800682c:	2102      	movs	r1, #2
 800682e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	2210      	movs	r2, #16
 8006838:	4013      	ands	r3, r2
 800683a:	2b10      	cmp	r3, #16
 800683c:	d062      	beq.n	8006904 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	22ca      	movs	r2, #202	@ 0xca
 8006844:	625a      	str	r2, [r3, #36]	@ 0x24
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2253      	movs	r2, #83	@ 0x53
 800684c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800684e:	250f      	movs	r5, #15
 8006850:	197c      	adds	r4, r7, r5
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f000 f891 	bl	800697c <RTC_EnterInitMode>
 800685a:	0003      	movs	r3, r0
 800685c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800685e:	0028      	movs	r0, r5
 8006860:	183b      	adds	r3, r7, r0
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d12c      	bne.n	80068c2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	492e      	ldr	r1, [pc, #184]	@ (800692c <HAL_RTC_Init+0x140>)
 8006874:	400a      	ands	r2, r1
 8006876:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6999      	ldr	r1, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6912      	ldr	r2, [r2, #16]
 800689e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6919      	ldr	r1, [r3, #16]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	041a      	lsls	r2, r3, #16
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80068b4:	183c      	adds	r4, r7, r0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f000 f8a1 	bl	8006a00 <RTC_ExitInitMode>
 80068be:	0003      	movs	r3, r0
 80068c0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80068c2:	230f      	movs	r3, #15
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d116      	bne.n	80068fa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	00d2      	lsls	r2, r2, #3
 80068d8:	08d2      	lsrs	r2, r2, #3
 80068da:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6999      	ldr	r1, [r3, #24]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	22ff      	movs	r2, #255	@ 0xff
 8006900:	625a      	str	r2, [r3, #36]	@ 0x24
 8006902:	e003      	b.n	800690c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006904:	230f      	movs	r3, #15
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800690c:	230f      	movs	r3, #15
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2229      	movs	r2, #41	@ 0x29
 800691a:	2101      	movs	r1, #1
 800691c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800691e:	230f      	movs	r3, #15
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	781b      	ldrb	r3, [r3, #0]
}
 8006924:	0018      	movs	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	b004      	add	sp, #16
 800692a:	bdb0      	pop	{r4, r5, r7, pc}
 800692c:	fb8fffbf 	.word	0xfb8fffbf

08006930 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0e      	ldr	r2, [pc, #56]	@ (8006978 <HAL_RTC_WaitForSynchro+0x48>)
 800693e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006940:	f7fd f91c 	bl	8003b7c <HAL_GetTick>
 8006944:	0003      	movs	r3, r0
 8006946:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006948:	e00a      	b.n	8006960 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800694a:	f7fd f917 	bl	8003b7c <HAL_GetTick>
 800694e:	0002      	movs	r2, r0
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1ad2      	subs	r2, r2, r3
 8006954:	23fa      	movs	r3, #250	@ 0xfa
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	429a      	cmp	r2, r3
 800695a:	d901      	bls.n	8006960 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e006      	b.n	800696e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	4013      	ands	r3, r2
 800696a:	d0ee      	beq.n	800694a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	0018      	movs	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	b004      	add	sp, #16
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			@ (mov r8, r8)
 8006978:	0001005f 	.word	0x0001005f

0800697c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006984:	230f      	movs	r3, #15
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	2240      	movs	r2, #64	@ 0x40
 8006994:	4013      	ands	r3, r2
 8006996:	d12c      	bne.n	80069f2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2180      	movs	r1, #128	@ 0x80
 80069a4:	430a      	orrs	r2, r1
 80069a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80069a8:	f7fd f8e8 	bl	8003b7c <HAL_GetTick>
 80069ac:	0003      	movs	r3, r0
 80069ae:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069b0:	e014      	b.n	80069dc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80069b2:	f7fd f8e3 	bl	8003b7c <HAL_GetTick>
 80069b6:	0002      	movs	r2, r0
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	200f      	movs	r0, #15
 80069be:	183b      	adds	r3, r7, r0
 80069c0:	1839      	adds	r1, r7, r0
 80069c2:	7809      	ldrb	r1, [r1, #0]
 80069c4:	7019      	strb	r1, [r3, #0]
 80069c6:	23fa      	movs	r3, #250	@ 0xfa
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d906      	bls.n	80069dc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80069ce:	183b      	adds	r3, r7, r0
 80069d0:	2203      	movs	r2, #3
 80069d2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2229      	movs	r2, #41	@ 0x29
 80069d8:	2103      	movs	r1, #3
 80069da:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2240      	movs	r2, #64	@ 0x40
 80069e4:	4013      	ands	r3, r2
 80069e6:	d104      	bne.n	80069f2 <RTC_EnterInitMode+0x76>
 80069e8:	230f      	movs	r3, #15
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d1df      	bne.n	80069b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80069f2:	230f      	movs	r3, #15
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	781b      	ldrb	r3, [r3, #0]
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b004      	add	sp, #16
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a08:	240f      	movs	r4, #15
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a10:	4b1c      	ldr	r3, [pc, #112]	@ (8006a84 <RTC_ExitInitMode+0x84>)
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	4b1b      	ldr	r3, [pc, #108]	@ (8006a84 <RTC_ExitInitMode+0x84>)
 8006a16:	2180      	movs	r1, #128	@ 0x80
 8006a18:	438a      	bics	r2, r1
 8006a1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a1c:	4b19      	ldr	r3, [pc, #100]	@ (8006a84 <RTC_ExitInitMode+0x84>)
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2220      	movs	r2, #32
 8006a22:	4013      	ands	r3, r2
 8006a24:	d10d      	bne.n	8006a42 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7ff ff81 	bl	8006930 <HAL_RTC_WaitForSynchro>
 8006a2e:	1e03      	subs	r3, r0, #0
 8006a30:	d021      	beq.n	8006a76 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2229      	movs	r2, #41	@ 0x29
 8006a36:	2103      	movs	r1, #3
 8006a38:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006a3a:	193b      	adds	r3, r7, r4
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	e019      	b.n	8006a76 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a42:	4b10      	ldr	r3, [pc, #64]	@ (8006a84 <RTC_ExitInitMode+0x84>)
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <RTC_ExitInitMode+0x84>)
 8006a48:	2120      	movs	r1, #32
 8006a4a:	438a      	bics	r2, r1
 8006a4c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7ff ff6d 	bl	8006930 <HAL_RTC_WaitForSynchro>
 8006a56:	1e03      	subs	r3, r0, #0
 8006a58:	d007      	beq.n	8006a6a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2229      	movs	r2, #41	@ 0x29
 8006a5e:	2103      	movs	r1, #3
 8006a60:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006a62:	230f      	movs	r3, #15
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	2203      	movs	r2, #3
 8006a68:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a6a:	4b06      	ldr	r3, [pc, #24]	@ (8006a84 <RTC_ExitInitMode+0x84>)
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <RTC_ExitInitMode+0x84>)
 8006a70:	2120      	movs	r1, #32
 8006a72:	430a      	orrs	r2, r1
 8006a74:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006a76:	230f      	movs	r3, #15
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	781b      	ldrb	r3, [r3, #0]
}
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b005      	add	sp, #20
 8006a82:	bd90      	pop	{r4, r7, pc}
 8006a84:	40002800 	.word	0x40002800

08006a88 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8006a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	0008      	movs	r0, r1
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	0019      	movs	r1, r3
 8006a96:	260b      	movs	r6, #11
 8006a98:	19bb      	adds	r3, r7, r6
 8006a9a:	1c02      	adds	r2, r0, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	2508      	movs	r5, #8
 8006aa0:	197b      	adds	r3, r7, r5
 8006aa2:	1c0a      	adds	r2, r1, #0
 8006aa4:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685c      	ldr	r4, [r3, #4]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	68d8      	ldr	r0, [r3, #12]
 8006aae:	197b      	adds	r3, r7, r5
 8006ab0:	881d      	ldrh	r5, [r3, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	19bb      	adds	r3, r7, r6
 8006ab6:	7819      	ldrb	r1, [r3, #0]
 8006ab8:	002b      	movs	r3, r5
 8006aba:	47a0      	blx	r4
 8006abc:	0003      	movs	r3, r0
 8006abe:	617b      	str	r3, [r7, #20]

  return ret;
 8006ac0:	697b      	ldr	r3, [r7, #20]
}
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	b007      	add	sp, #28
 8006ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006aca <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8006aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006acc:	b087      	sub	sp, #28
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	0008      	movs	r0, r1
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	0019      	movs	r1, r3
 8006ad8:	260b      	movs	r6, #11
 8006ada:	19bb      	adds	r3, r7, r6
 8006adc:	1c02      	adds	r2, r0, #0
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	2508      	movs	r5, #8
 8006ae2:	197b      	adds	r3, r7, r5
 8006ae4:	1c0a      	adds	r2, r1, #0
 8006ae6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681c      	ldr	r4, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68d8      	ldr	r0, [r3, #12]
 8006af0:	197b      	adds	r3, r7, r5
 8006af2:	881d      	ldrh	r5, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	19bb      	adds	r3, r7, r6
 8006af8:	7819      	ldrb	r1, [r3, #0]
 8006afa:	002b      	movs	r3, r5
 8006afc:	47a0      	blx	r4
 8006afe:	0003      	movs	r3, r0
 8006b00:	617b      	str	r3, [r7, #20]

  return ret;
 8006b02:	697b      	ldr	r3, [r7, #20]
}
 8006b04:	0018      	movs	r0, r3
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b007      	add	sp, #28
 8006b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b0c <lis2dw12_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis2dw12_from_fs2_to_mg(int16_t lsb)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	0002      	movs	r2, r0
 8006b14:	1dbb      	adds	r3, r7, #6
 8006b16:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
 8006b18:	1dbb      	adds	r3, r7, #6
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	5e9b      	ldrsh	r3, [r3, r2]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fa f81a 	bl	8000b58 <__aeabi_i2f>
 8006b24:	1c03      	adds	r3, r0, #0
 8006b26:	4904      	ldr	r1, [pc, #16]	@ (8006b38 <lis2dw12_from_fs2_to_mg+0x2c>)
 8006b28:	1c18      	adds	r0, r3, #0
 8006b2a:	f7f9 febb 	bl	80008a4 <__aeabi_fmul>
 8006b2e:	1c03      	adds	r3, r0, #0
}
 8006b30:	1c18      	adds	r0, r3, #0
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b002      	add	sp, #8
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	3d79db23 	.word	0x3d79db23

08006b3c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8006b3c:	b590      	push	{r4, r7, lr}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	000a      	movs	r2, r1
 8006b46:	1cfb      	adds	r3, r7, #3
 8006b48:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006b4a:	2410      	movs	r4, #16
 8006b4c:	193a      	adds	r2, r7, r4
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	2301      	movs	r3, #1
 8006b52:	2120      	movs	r1, #32
 8006b54:	f7ff ff98 	bl	8006a88 <lis2dw12_read_reg>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d129      	bne.n	8006bb6 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8006b62:	1cfb      	adds	r3, r7, #3
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	1c1a      	adds	r2, r3, #0
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	193b      	adds	r3, r7, r4
 8006b72:	2103      	movs	r1, #3
 8006b74:	400a      	ands	r2, r1
 8006b76:	0090      	lsls	r0, r2, #2
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	210c      	movs	r1, #12
 8006b7c:	438a      	bics	r2, r1
 8006b7e:	1c11      	adds	r1, r2, #0
 8006b80:	1c02      	adds	r2, r0, #0
 8006b82:	430a      	orrs	r2, r1
 8006b84:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8006b86:	1cfb      	adds	r3, r7, #3
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	193b      	adds	r3, r7, r4
 8006b92:	2103      	movs	r1, #3
 8006b94:	400a      	ands	r2, r1
 8006b96:	0010      	movs	r0, r2
 8006b98:	781a      	ldrb	r2, [r3, #0]
 8006b9a:	2103      	movs	r1, #3
 8006b9c:	438a      	bics	r2, r1
 8006b9e:	1c11      	adds	r1, r2, #0
 8006ba0:	1c02      	adds	r2, r0, #0
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006ba6:	193a      	adds	r2, r7, r4
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	2301      	movs	r3, #1
 8006bac:	2120      	movs	r1, #32
 8006bae:	f7ff ff8c 	bl	8006aca <lis2dw12_write_reg>
 8006bb2:	0003      	movs	r3, r0
 8006bb4:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	18fa      	adds	r2, r7, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	2125      	movs	r1, #37	@ 0x25
 8006bc6:	f7ff ff5f 	bl	8006a88 <lis2dw12_read_reg>
 8006bca:	0003      	movs	r3, r0
 8006bcc:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11a      	bne.n	8006c0a <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8006bd4:	1cfb      	adds	r3, r7, #3
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	1c1a      	adds	r2, r3, #0
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4013      	ands	r3, r2
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	240c      	movs	r4, #12
 8006be4:	193b      	adds	r3, r7, r4
 8006be6:	2101      	movs	r1, #1
 8006be8:	400a      	ands	r2, r1
 8006bea:	0090      	lsls	r0, r2, #2
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	2104      	movs	r1, #4
 8006bf0:	438a      	bics	r2, r1
 8006bf2:	1c11      	adds	r1, r2, #0
 8006bf4:	1c02      	adds	r2, r0, #0
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8006bfa:	193a      	adds	r2, r7, r4
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	2125      	movs	r1, #37	@ 0x25
 8006c02:	f7ff ff62 	bl	8006aca <lis2dw12_write_reg>
 8006c06:	0003      	movs	r3, r0
 8006c08:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006c0a:	697b      	ldr	r3, [r7, #20]
}
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b007      	add	sp, #28
 8006c12:	bd90      	pop	{r4, r7, pc}

08006c14 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	000a      	movs	r2, r1
 8006c1e:	1cfb      	adds	r3, r7, #3
 8006c20:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006c22:	2410      	movs	r4, #16
 8006c24:	193a      	adds	r2, r7, r4
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	2301      	movs	r3, #1
 8006c2a:	2120      	movs	r1, #32
 8006c2c:	f7ff ff2c 	bl	8006a88 <lis2dw12_read_reg>
 8006c30:	0003      	movs	r3, r0
 8006c32:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d115      	bne.n	8006c66 <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8006c3a:	1cfb      	adds	r3, r7, #3
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	220f      	movs	r2, #15
 8006c40:	4013      	ands	r3, r2
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	193b      	adds	r3, r7, r4
 8006c46:	0110      	lsls	r0, r2, #4
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	210f      	movs	r1, #15
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	1c11      	adds	r1, r2, #0
 8006c50:	1c02      	adds	r2, r0, #0
 8006c52:	430a      	orrs	r2, r1
 8006c54:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8006c56:	193a      	adds	r2, r7, r4
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	2120      	movs	r1, #32
 8006c5e:	f7ff ff34 	bl	8006aca <lis2dw12_write_reg>
 8006c62:	0003      	movs	r3, r0
 8006c64:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d108      	bne.n	8006c7e <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	18fa      	adds	r2, r7, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	2301      	movs	r3, #1
 8006c74:	2122      	movs	r1, #34	@ 0x22
 8006c76:	f7ff ff07 	bl	8006a88 <lis2dw12_read_reg>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d11a      	bne.n	8006cba <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8006c84:	1cfb      	adds	r3, r7, #3
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	1c1a      	adds	r2, r3, #0
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	4013      	ands	r3, r2
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	240c      	movs	r4, #12
 8006c94:	193b      	adds	r3, r7, r4
 8006c96:	2103      	movs	r1, #3
 8006c98:	400a      	ands	r2, r1
 8006c9a:	0010      	movs	r0, r2
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	2103      	movs	r1, #3
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	1c11      	adds	r1, r2, #0
 8006ca4:	1c02      	adds	r2, r0, #0
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8006caa:	193a      	adds	r2, r7, r4
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	2301      	movs	r3, #1
 8006cb0:	2122      	movs	r1, #34	@ 0x22
 8006cb2:	f7ff ff0a 	bl	8006aca <lis2dw12_write_reg>
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006cba:	697b      	ldr	r3, [r7, #20]
}
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b007      	add	sp, #28
 8006cc2:	bd90      	pop	{r4, r7, pc}

08006cc4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006cc4:	b590      	push	{r4, r7, lr}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	000a      	movs	r2, r1
 8006cce:	1cfb      	adds	r3, r7, #3
 8006cd0:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006cd2:	2408      	movs	r4, #8
 8006cd4:	193a      	adds	r2, r7, r4
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	2121      	movs	r1, #33	@ 0x21
 8006cdc:	f7ff fed4 	bl	8006a88 <lis2dw12_read_reg>
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d117      	bne.n	8006d1a <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8006cea:	1cfb      	adds	r3, r7, #3
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	193b      	adds	r3, r7, r4
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	400a      	ands	r2, r1
 8006cfa:	00d0      	lsls	r0, r2, #3
 8006cfc:	781a      	ldrb	r2, [r3, #0]
 8006cfe:	2108      	movs	r1, #8
 8006d00:	438a      	bics	r2, r1
 8006d02:	1c11      	adds	r1, r2, #0
 8006d04:	1c02      	adds	r2, r0, #0
 8006d06:	430a      	orrs	r2, r1
 8006d08:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006d0a:	193a      	adds	r2, r7, r4
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	2301      	movs	r3, #1
 8006d10:	2121      	movs	r1, #33	@ 0x21
 8006d12:	f7ff feda 	bl	8006aca <lis2dw12_write_reg>
 8006d16:	0003      	movs	r3, r0
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
}
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	b005      	add	sp, #20
 8006d22:	bd90      	pop	{r4, r7, pc}

08006d24 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8006d24:	b590      	push	{r4, r7, lr}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	000a      	movs	r2, r1
 8006d2e:	1cfb      	adds	r3, r7, #3
 8006d30:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8006d32:	2408      	movs	r4, #8
 8006d34:	193a      	adds	r2, r7, r4
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	2301      	movs	r3, #1
 8006d3a:	2125      	movs	r1, #37	@ 0x25
 8006d3c:	f7ff fea4 	bl	8006a88 <lis2dw12_read_reg>
 8006d40:	0003      	movs	r3, r0
 8006d42:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d117      	bne.n	8006d7a <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8006d4a:	1cfb      	adds	r3, r7, #3
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2203      	movs	r2, #3
 8006d50:	4013      	ands	r3, r2
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	193b      	adds	r3, r7, r4
 8006d56:	2103      	movs	r1, #3
 8006d58:	400a      	ands	r2, r1
 8006d5a:	0110      	lsls	r0, r2, #4
 8006d5c:	781a      	ldrb	r2, [r3, #0]
 8006d5e:	2130      	movs	r1, #48	@ 0x30
 8006d60:	438a      	bics	r2, r1
 8006d62:	1c11      	adds	r1, r2, #0
 8006d64:	1c02      	adds	r2, r0, #0
 8006d66:	430a      	orrs	r2, r1
 8006d68:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8006d6a:	193a      	adds	r2, r7, r4
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	2301      	movs	r3, #1
 8006d70:	2125      	movs	r1, #37	@ 0x25
 8006d72:	f7ff feaa 	bl	8006aca <lis2dw12_write_reg>
 8006d76:	0003      	movs	r3, r0
 8006d78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
}
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	b005      	add	sp, #20
 8006d82:	bd90      	pop	{r4, r7, pc}

08006d84 <lis2dw12_flag_data_ready_get>:
  * @param  val      change the values of drdy in reg STATUS
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006d84:	b590      	push	{r4, r7, lr}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  lis2dw12_status_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) &reg, 1);
 8006d8e:	2408      	movs	r4, #8
 8006d90:	193a      	adds	r2, r7, r4
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	2301      	movs	r3, #1
 8006d96:	2127      	movs	r1, #39	@ 0x27
 8006d98:	f7ff fe76 	bl	8006a88 <lis2dw12_read_reg>
 8006d9c:	0003      	movs	r3, r0
 8006d9e:	60fb      	str	r3, [r7, #12]
  *val = reg.drdy;
 8006da0:	193b      	adds	r3, r7, r4
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	07db      	lsls	r3, r3, #31
 8006da6:	0fdb      	lsrs	r3, r3, #31
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	001a      	movs	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	701a      	strb	r2, [r3, #0]

  return ret;
 8006db0:	68fb      	ldr	r3, [r7, #12]
}
 8006db2:	0018      	movs	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b005      	add	sp, #20
 8006db8:	bd90      	pop	{r4, r7, pc}

08006dba <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006dba:	b590      	push	{r4, r7, lr}
 8006dbc:	b087      	sub	sp, #28
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8006dc4:	240c      	movs	r4, #12
 8006dc6:	193a      	adds	r2, r7, r4
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	2306      	movs	r3, #6
 8006dcc:	2128      	movs	r1, #40	@ 0x28
 8006dce:	f7ff fe5b 	bl	8006a88 <lis2dw12_read_reg>
 8006dd2:	0003      	movs	r3, r0
 8006dd4:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006dd6:	0021      	movs	r1, r4
 8006dd8:	187b      	adds	r3, r7, r1
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	b21a      	sxth	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2200      	movs	r2, #0
 8006de6:	5e9b      	ldrsh	r3, [r3, r2]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	187a      	adds	r2, r7, r1
 8006df0:	7812      	ldrb	r2, [r2, #0]
 8006df2:	189b      	adds	r3, r3, r2
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	b21a      	sxth	r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006dfc:	187b      	adds	r3, r7, r1
 8006dfe:	78da      	ldrb	r2, [r3, #3]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	3302      	adds	r3, #2
 8006e04:	b212      	sxth	r2, r2
 8006e06:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	5e9b      	ldrsh	r3, [r3, r2]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	187a      	adds	r2, r7, r1
 8006e18:	7892      	ldrb	r2, [r2, #2]
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	3302      	adds	r3, #2
 8006e22:	b212      	sxth	r2, r2
 8006e24:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006e26:	187b      	adds	r3, r7, r1
 8006e28:	795a      	ldrb	r2, [r3, #5]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	b212      	sxth	r2, r2
 8006e30:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	3304      	adds	r3, #4
 8006e36:	2200      	movs	r2, #0
 8006e38:	5e9b      	ldrsh	r3, [r3, r2]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	187a      	adds	r2, r7, r1
 8006e42:	7912      	ldrb	r2, [r2, #4]
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	b212      	sxth	r2, r2
 8006e4e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006e50:	697b      	ldr	r3, [r7, #20]
}
 8006e52:	0018      	movs	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b007      	add	sp, #28
 8006e58:	bd90      	pop	{r4, r7, pc}

08006e5a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	210f      	movs	r1, #15
 8006e6c:	f7ff fe0c 	bl	8006a88 <lis2dw12_read_reg>
 8006e70:	0003      	movs	r3, r0
 8006e72:	60fb      	str	r3, [r7, #12]

  return ret;
 8006e74:	68fb      	ldr	r3, [r7, #12]
}
 8006e76:	0018      	movs	r0, r3
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	b004      	add	sp, #16
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006e7e:	b590      	push	{r4, r7, lr}
 8006e80:	b085      	sub	sp, #20
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	000a      	movs	r2, r1
 8006e88:	1cfb      	adds	r3, r7, #3
 8006e8a:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006e8c:	2408      	movs	r4, #8
 8006e8e:	193a      	adds	r2, r7, r4
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	2301      	movs	r3, #1
 8006e94:	2121      	movs	r1, #33	@ 0x21
 8006e96:	f7ff fdf7 	bl	8006a88 <lis2dw12_read_reg>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d117      	bne.n	8006ed4 <lis2dw12_reset_set+0x56>
  {
    reg.soft_reset = val;
 8006ea4:	1cfb      	adds	r3, r7, #3
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	4013      	ands	r3, r2
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	193b      	adds	r3, r7, r4
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	400a      	ands	r2, r1
 8006eb4:	0190      	lsls	r0, r2, #6
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	2140      	movs	r1, #64	@ 0x40
 8006eba:	438a      	bics	r2, r1
 8006ebc:	1c11      	adds	r1, r2, #0
 8006ebe:	1c02      	adds	r2, r0, #0
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006ec4:	193a      	adds	r2, r7, r4
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	2301      	movs	r3, #1
 8006eca:	2121      	movs	r1, #33	@ 0x21
 8006ecc:	f7ff fdfd 	bl	8006aca <lis2dw12_write_reg>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
}
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b005      	add	sp, #20
 8006edc:	bd90      	pop	{r4, r7, pc}

08006ede <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006ede:	b590      	push	{r4, r7, lr}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8006ee8:	2408      	movs	r4, #8
 8006eea:	193a      	adds	r2, r7, r4
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	2301      	movs	r3, #1
 8006ef0:	2121      	movs	r1, #33	@ 0x21
 8006ef2:	f7ff fdc9 	bl	8006a88 <lis2dw12_read_reg>
 8006ef6:	0003      	movs	r3, r0
 8006ef8:	60fb      	str	r3, [r7, #12]
  *val = reg.soft_reset;
 8006efa:	193b      	adds	r3, r7, r4
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	065b      	lsls	r3, r3, #25
 8006f00:	0fdb      	lsrs	r3, r3, #31
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	001a      	movs	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	701a      	strb	r2, [r3, #0]

  return ret;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b005      	add	sp, #20
 8006f12:	bd90      	pop	{r4, r7, pc}

08006f14 <lis2dw12_filter_path_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_path_set(stmdev_ctx_t *ctx,
                                 lis2dw12_fds_t val)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	000a      	movs	r2, r1
 8006f1e:	1cfb      	adds	r3, r7, #3
 8006f20:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t ctrl6;
  lis2dw12_ctrl_reg7_t ctrl_reg7;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8006f22:	2410      	movs	r4, #16
 8006f24:	193a      	adds	r2, r7, r4
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	2301      	movs	r3, #1
 8006f2a:	2125      	movs	r1, #37	@ 0x25
 8006f2c:	f7ff fdac 	bl	8006a88 <lis2dw12_read_reg>
 8006f30:	0003      	movs	r3, r0
 8006f32:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d119      	bne.n	8006f6e <lis2dw12_filter_path_set+0x5a>
  {
    ctrl6.fds = ((uint8_t) val & 0x10U) >> 4;
 8006f3a:	1cfb      	adds	r3, r7, #3
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	091b      	lsrs	r3, r3, #4
 8006f40:	1c1a      	adds	r2, r3, #0
 8006f42:	2301      	movs	r3, #1
 8006f44:	4013      	ands	r3, r2
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	193b      	adds	r3, r7, r4
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	400a      	ands	r2, r1
 8006f4e:	00d0      	lsls	r0, r2, #3
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	2108      	movs	r1, #8
 8006f54:	438a      	bics	r2, r1
 8006f56:	1c11      	adds	r1, r2, #0
 8006f58:	1c02      	adds	r2, r0, #0
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8006f5e:	193a      	adds	r2, r7, r4
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	2301      	movs	r3, #1
 8006f64:	2125      	movs	r1, #37	@ 0x25
 8006f66:	f7ff fdb0 	bl	8006aca <lis2dw12_write_reg>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d108      	bne.n	8006f86 <lis2dw12_filter_path_set+0x72>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL_REG7,
 8006f74:	230c      	movs	r3, #12
 8006f76:	18fa      	adds	r2, r7, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	213f      	movs	r1, #63	@ 0x3f
 8006f7e:	f7ff fd83 	bl	8006a88 <lis2dw12_read_reg>
 8006f82:	0003      	movs	r3, r0
 8006f84:	617b      	str	r3, [r7, #20]
                            (uint8_t *) &ctrl_reg7, 1);
  }

  if (ret == 0)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d118      	bne.n	8006fbe <lis2dw12_filter_path_set+0xaa>
  {
    ctrl_reg7.usr_off_on_out = (uint8_t) val & 0x01U;
 8006f8c:	1cfb      	adds	r3, r7, #3
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2201      	movs	r2, #1
 8006f92:	4013      	ands	r3, r2
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	240c      	movs	r4, #12
 8006f98:	193b      	adds	r3, r7, r4
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	400a      	ands	r2, r1
 8006f9e:	0110      	lsls	r0, r2, #4
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	2110      	movs	r1, #16
 8006fa4:	438a      	bics	r2, r1
 8006fa6:	1c11      	adds	r1, r2, #0
 8006fa8:	1c02      	adds	r2, r0, #0
 8006faa:	430a      	orrs	r2, r1
 8006fac:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL_REG7,
 8006fae:	193a      	adds	r2, r7, r4
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	213f      	movs	r1, #63	@ 0x3f
 8006fb6:	f7ff fd88 	bl	8006aca <lis2dw12_write_reg>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	617b      	str	r3, [r7, #20]
                             (uint8_t *) &ctrl_reg7, 1);
  }

  return ret;
 8006fbe:	697b      	ldr	r3, [r7, #20]
}
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b007      	add	sp, #28
 8006fc6:	bd90      	pop	{r4, r7, pc}

08006fc8 <lis2dw12_filter_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_filter_bandwidth_set(stmdev_ctx_t *ctx,
                                      lis2dw12_bw_filt_t val)
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	000a      	movs	r2, r1
 8006fd2:	1cfb      	adds	r3, r7, #3
 8006fd4:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8006fd6:	2408      	movs	r4, #8
 8006fd8:	193a      	adds	r2, r7, r4
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	2301      	movs	r3, #1
 8006fde:	2125      	movs	r1, #37	@ 0x25
 8006fe0:	f7ff fd52 	bl	8006a88 <lis2dw12_read_reg>
 8006fe4:	0003      	movs	r3, r0
 8006fe6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d115      	bne.n	800701a <lis2dw12_filter_bandwidth_set+0x52>
  {
    reg.bw_filt = (uint8_t) val;
 8006fee:	1cfb      	adds	r3, r7, #3
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	193b      	adds	r3, r7, r4
 8006ffa:	0190      	lsls	r0, r2, #6
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	213f      	movs	r1, #63	@ 0x3f
 8007000:	400a      	ands	r2, r1
 8007002:	1c11      	adds	r1, r2, #0
 8007004:	1c02      	adds	r2, r0, #0
 8007006:	430a      	orrs	r2, r1
 8007008:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800700a:	193a      	adds	r2, r7, r4
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	2301      	movs	r3, #1
 8007010:	2125      	movs	r1, #37	@ 0x25
 8007012:	f7ff fd5a 	bl	8006aca <lis2dw12_write_reg>
 8007016:	0003      	movs	r3, r0
 8007018:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	0018      	movs	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	b005      	add	sp, #20
 8007022:	bd90      	pop	{r4, r7, pc}

08007024 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af04      	add	r7, sp, #16
 800702a:	0002      	movs	r2, r0
 800702c:	1dfb      	adds	r3, r7, #7
 800702e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8007030:	4808      	ldr	r0, [pc, #32]	@ (8007054 <ssd1306_WriteCommand+0x30>)
 8007032:	2301      	movs	r3, #1
 8007034:	425b      	negs	r3, r3
 8007036:	9302      	str	r3, [sp, #8]
 8007038:	2301      	movs	r3, #1
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	1dfb      	adds	r3, r7, #7
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	2301      	movs	r3, #1
 8007042:	2200      	movs	r2, #0
 8007044:	2178      	movs	r1, #120	@ 0x78
 8007046:	f7fd ffdb 	bl	8005000 <HAL_I2C_Mem_Write>
}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	46bd      	mov	sp, r7
 800704e:	b002      	add	sp, #8
 8007050:	bd80      	pop	{r7, pc}
 8007052:	46c0      	nop			@ (mov r8, r8)
 8007054:	2000026c 	.word	0x2000026c

08007058 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af04      	add	r7, sp, #16
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	b29b      	uxth	r3, r3
 8007066:	4808      	ldr	r0, [pc, #32]	@ (8007088 <ssd1306_WriteData+0x30>)
 8007068:	2201      	movs	r2, #1
 800706a:	4252      	negs	r2, r2
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	2301      	movs	r3, #1
 8007076:	2240      	movs	r2, #64	@ 0x40
 8007078:	2178      	movs	r1, #120	@ 0x78
 800707a:	f7fd ffc1 	bl	8005000 <HAL_I2C_Mem_Write>
}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	46bd      	mov	sp, r7
 8007082:	b002      	add	sp, #8
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	2000026c 	.word	0x2000026c

0800708c <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007092:	1dfb      	adds	r3, r7, #7
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e01a      	b.n	80070d0 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800709a:	1dfb      	adds	r3, r7, #7
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	3b50      	subs	r3, #80	@ 0x50
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	0018      	movs	r0, r3
 80070a4:	f7ff ffbe 	bl	8007024 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80070a8:	2000      	movs	r0, #0
 80070aa:	f7ff ffbb 	bl	8007024 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80070ae:	2010      	movs	r0, #16
 80070b0:	f7ff ffb8 	bl	8007024 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80070b4:	1dfb      	adds	r3, r7, #7
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	01da      	lsls	r2, r3, #7
 80070ba:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <ssd1306_UpdateScreen+0x58>)
 80070bc:	18d3      	adds	r3, r2, r3
 80070be:	2180      	movs	r1, #128	@ 0x80
 80070c0:	0018      	movs	r0, r3
 80070c2:	f7ff ffc9 	bl	8007058 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80070c6:	1dfb      	adds	r3, r7, #7
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	1dfb      	adds	r3, r7, #7
 80070cc:	3201      	adds	r2, #1
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	1dfb      	adds	r3, r7, #7
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b07      	cmp	r3, #7
 80070d6:	d9e0      	bls.n	800709a <ssd1306_UpdateScreen+0xe>
    }
}
 80070d8:	46c0      	nop			@ (mov r8, r8)
 80070da:	46c0      	nop			@ (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b002      	add	sp, #8
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	46c0      	nop			@ (mov r8, r8)
 80070e4:	2000035c 	.word	0x2000035c

080070e8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	0004      	movs	r4, r0
 80070f0:	0008      	movs	r0, r1
 80070f2:	0011      	movs	r1, r2
 80070f4:	1dfb      	adds	r3, r7, #7
 80070f6:	1c22      	adds	r2, r4, #0
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	1dbb      	adds	r3, r7, #6
 80070fc:	1c02      	adds	r2, r0, #0
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	1d7b      	adds	r3, r7, #5
 8007102:	1c0a      	adds	r2, r1, #0
 8007104:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8007106:	1dfb      	adds	r3, r7, #7
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	b25b      	sxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	db47      	blt.n	80071a0 <ssd1306_DrawPixel+0xb8>
 8007110:	1dbb      	adds	r3, r7, #6
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b3f      	cmp	r3, #63	@ 0x3f
 8007116:	d843      	bhi.n	80071a0 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8007118:	1d7b      	adds	r3, r7, #5
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d11e      	bne.n	800715e <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007120:	1dfb      	adds	r3, r7, #7
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	1dbb      	adds	r3, r7, #6
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	08db      	lsrs	r3, r3, #3
 800712a:	b2d8      	uxtb	r0, r3
 800712c:	0003      	movs	r3, r0
 800712e:	01db      	lsls	r3, r3, #7
 8007130:	18d3      	adds	r3, r2, r3
 8007132:	4a1d      	ldr	r2, [pc, #116]	@ (80071a8 <ssd1306_DrawPixel+0xc0>)
 8007134:	5cd3      	ldrb	r3, [r2, r3]
 8007136:	b25a      	sxtb	r2, r3
 8007138:	1dbb      	adds	r3, r7, #6
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2107      	movs	r1, #7
 800713e:	400b      	ands	r3, r1
 8007140:	2101      	movs	r1, #1
 8007142:	4099      	lsls	r1, r3
 8007144:	000b      	movs	r3, r1
 8007146:	b25b      	sxtb	r3, r3
 8007148:	4313      	orrs	r3, r2
 800714a:	b259      	sxtb	r1, r3
 800714c:	1dfb      	adds	r3, r7, #7
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	0003      	movs	r3, r0
 8007152:	01db      	lsls	r3, r3, #7
 8007154:	18d3      	adds	r3, r2, r3
 8007156:	b2c9      	uxtb	r1, r1
 8007158:	4a13      	ldr	r2, [pc, #76]	@ (80071a8 <ssd1306_DrawPixel+0xc0>)
 800715a:	54d1      	strb	r1, [r2, r3]
 800715c:	e021      	b.n	80071a2 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	1dbb      	adds	r3, r7, #6
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	b2d8      	uxtb	r0, r3
 800716a:	0003      	movs	r3, r0
 800716c:	01db      	lsls	r3, r3, #7
 800716e:	18d3      	adds	r3, r2, r3
 8007170:	4a0d      	ldr	r2, [pc, #52]	@ (80071a8 <ssd1306_DrawPixel+0xc0>)
 8007172:	5cd3      	ldrb	r3, [r2, r3]
 8007174:	b25b      	sxtb	r3, r3
 8007176:	1dba      	adds	r2, r7, #6
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	2107      	movs	r1, #7
 800717c:	400a      	ands	r2, r1
 800717e:	2101      	movs	r1, #1
 8007180:	4091      	lsls	r1, r2
 8007182:	000a      	movs	r2, r1
 8007184:	b252      	sxtb	r2, r2
 8007186:	43d2      	mvns	r2, r2
 8007188:	b252      	sxtb	r2, r2
 800718a:	4013      	ands	r3, r2
 800718c:	b259      	sxtb	r1, r3
 800718e:	1dfb      	adds	r3, r7, #7
 8007190:	781a      	ldrb	r2, [r3, #0]
 8007192:	0003      	movs	r3, r0
 8007194:	01db      	lsls	r3, r3, #7
 8007196:	18d3      	adds	r3, r2, r3
 8007198:	b2c9      	uxtb	r1, r1
 800719a:	4a03      	ldr	r2, [pc, #12]	@ (80071a8 <ssd1306_DrawPixel+0xc0>)
 800719c:	54d1      	strb	r1, [r2, r3]
 800719e:	e000      	b.n	80071a2 <ssd1306_DrawPixel+0xba>
        return;
 80071a0:	46c0      	nop			@ (mov r8, r8)
    }
}
 80071a2:	46bd      	mov	sp, r7
 80071a4:	b003      	add	sp, #12
 80071a6:	bd90      	pop	{r4, r7, pc}
 80071a8:	2000035c 	.word	0x2000035c

080071ac <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b089      	sub	sp, #36	@ 0x24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	0004      	movs	r4, r0
 80071b4:	1d38      	adds	r0, r7, #4
 80071b6:	6001      	str	r1, [r0, #0]
 80071b8:	6042      	str	r2, [r0, #4]
 80071ba:	0019      	movs	r1, r3
 80071bc:	200f      	movs	r0, #15
 80071be:	183b      	adds	r3, r7, r0
 80071c0:	1c22      	adds	r2, r4, #0
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	230e      	movs	r3, #14
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	1c0a      	adds	r2, r1, #0
 80071ca:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80071cc:	183b      	adds	r3, r7, r0
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b1f      	cmp	r3, #31
 80071d2:	d903      	bls.n	80071dc <ssd1306_WriteChar+0x30>
 80071d4:	183b      	adds	r3, r7, r0
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b7e      	cmp	r3, #126	@ 0x7e
 80071da:	d901      	bls.n	80071e0 <ssd1306_WriteChar+0x34>
        return 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	e077      	b.n	80072d0 <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80071e0:	4b3d      	ldr	r3, [pc, #244]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	001a      	movs	r2, r3
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	18d3      	adds	r3, r2, r3
 80071ec:	2b80      	cmp	r3, #128	@ 0x80
 80071ee:	dc07      	bgt.n	8007200 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80071f0:	4b39      	ldr	r3, [pc, #228]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 80071f2:	885b      	ldrh	r3, [r3, #2]
 80071f4:	001a      	movs	r2, r3
 80071f6:	1d3b      	adds	r3, r7, #4
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80071fc:	2b40      	cmp	r3, #64	@ 0x40
 80071fe:	dd01      	ble.n	8007204 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8007200:	2300      	movs	r3, #0
 8007202:	e065      	b.n	80072d0 <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8007204:	2300      	movs	r3, #0
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e051      	b.n	80072ae <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	230f      	movs	r3, #15
 8007210:	18fb      	adds	r3, r7, r3
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	3b20      	subs	r3, #32
 8007216:	1d39      	adds	r1, r7, #4
 8007218:	7849      	ldrb	r1, [r1, #1]
 800721a:	434b      	muls	r3, r1
 800721c:	0019      	movs	r1, r3
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	18cb      	adds	r3, r1, r3
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	18d3      	adds	r3, r2, r3
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800722a:	2300      	movs	r3, #0
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	e035      	b.n	800729c <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	409a      	lsls	r2, r3
 8007236:	2380      	movs	r3, #128	@ 0x80
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	4013      	ands	r3, r2
 800723c:	d014      	beq.n	8007268 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800723e:	4b26      	ldr	r3, [pc, #152]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b2da      	uxtb	r2, r3
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	18d3      	adds	r3, r2, r3
 800724a:	b2d8      	uxtb	r0, r3
 800724c:	4b22      	ldr	r3, [pc, #136]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 800724e:	885b      	ldrh	r3, [r3, #2]
 8007250:	b2da      	uxtb	r2, r3
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	18d3      	adds	r3, r2, r3
 8007258:	b2d9      	uxtb	r1, r3
 800725a:	230e      	movs	r3, #14
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	001a      	movs	r2, r3
 8007262:	f7ff ff41 	bl	80070e8 <ssd1306_DrawPixel>
 8007266:	e016      	b.n	8007296 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007268:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	18d3      	adds	r3, r2, r3
 8007274:	b2d8      	uxtb	r0, r3
 8007276:	4b18      	ldr	r3, [pc, #96]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 8007278:	885b      	ldrh	r3, [r3, #2]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	18d3      	adds	r3, r2, r3
 8007282:	b2d9      	uxtb	r1, r3
 8007284:	230e      	movs	r3, #14
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	425a      	negs	r2, r3
 800728c:	4153      	adcs	r3, r2
 800728e:	b2db      	uxtb	r3, r3
 8007290:	001a      	movs	r2, r3
 8007292:	f7ff ff29 	bl	80070e8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	3301      	adds	r3, #1
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	1d3b      	adds	r3, r7, #4
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	001a      	movs	r2, r3
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d3c3      	bcc.n	8007230 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
 80072ae:	1d3b      	adds	r3, r7, #4
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	001a      	movs	r2, r3
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d3a7      	bcc.n	800720a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80072ba:	4b07      	ldr	r3, [pc, #28]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	1d3a      	adds	r2, r7, #4
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	189b      	adds	r3, r3, r2
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	4b04      	ldr	r3, [pc, #16]	@ (80072d8 <ssd1306_WriteChar+0x12c>)
 80072c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80072ca:	230f      	movs	r3, #15
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	781b      	ldrb	r3, [r3, #0]
}
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b009      	add	sp, #36	@ 0x24
 80072d6:	bd90      	pop	{r4, r7, pc}
 80072d8:	2000075c 	.word	0x2000075c

080072dc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	1d38      	adds	r0, r7, #4
 80072e6:	6001      	str	r1, [r0, #0]
 80072e8:	6042      	str	r2, [r0, #4]
 80072ea:	001a      	movs	r2, r3
 80072ec:	1cfb      	adds	r3, r7, #3
 80072ee:	701a      	strb	r2, [r3, #0]
    while (*str) {
 80072f0:	e014      	b.n	800731c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	7818      	ldrb	r0, [r3, #0]
 80072f6:	1cfb      	adds	r3, r7, #3
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	1d3a      	adds	r2, r7, #4
 80072fc:	6811      	ldr	r1, [r2, #0]
 80072fe:	6852      	ldr	r2, [r2, #4]
 8007300:	f7ff ff54 	bl	80071ac <ssd1306_WriteChar>
 8007304:	0003      	movs	r3, r0
 8007306:	001a      	movs	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d002      	beq.n	8007316 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	e008      	b.n	8007328 <ssd1306_WriteString+0x4c>
        }
        str++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e6      	bne.n	80072f2 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	781b      	ldrb	r3, [r3, #0]
}
 8007328:	0018      	movs	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	b004      	add	sp, #16
 800732e:	bd80      	pop	{r7, pc}

08007330 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	0002      	movs	r2, r0
 8007338:	1dfb      	adds	r3, r7, #7
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	1dbb      	adds	r3, r7, #6
 800733e:	1c0a      	adds	r2, r1, #0
 8007340:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8007342:	1dfb      	adds	r3, r7, #7
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	b29a      	uxth	r2, r3
 8007348:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <ssd1306_SetCursor+0x30>)
 800734a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800734c:	1dbb      	adds	r3, r7, #6
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b29a      	uxth	r2, r3
 8007352:	4b03      	ldr	r3, [pc, #12]	@ (8007360 <ssd1306_SetCursor+0x30>)
 8007354:	805a      	strh	r2, [r3, #2]
}
 8007356:	46c0      	nop			@ (mov r8, r8)
 8007358:	46bd      	mov	sp, r7
 800735a:	b002      	add	sp, #8
 800735c:	bd80      	pop	{r7, pc}
 800735e:	46c0      	nop			@ (mov r8, r8)
 8007360:	2000075c 	.word	0x2000075c

08007364 <__cvt>:
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007366:	001f      	movs	r7, r3
 8007368:	2300      	movs	r3, #0
 800736a:	0016      	movs	r6, r2
 800736c:	b08b      	sub	sp, #44	@ 0x2c
 800736e:	429f      	cmp	r7, r3
 8007370:	da04      	bge.n	800737c <__cvt+0x18>
 8007372:	2180      	movs	r1, #128	@ 0x80
 8007374:	0609      	lsls	r1, r1, #24
 8007376:	187b      	adds	r3, r7, r1
 8007378:	001f      	movs	r7, r3
 800737a:	232d      	movs	r3, #45	@ 0x2d
 800737c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800737e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007380:	7013      	strb	r3, [r2, #0]
 8007382:	2320      	movs	r3, #32
 8007384:	2203      	movs	r2, #3
 8007386:	439d      	bics	r5, r3
 8007388:	2d46      	cmp	r5, #70	@ 0x46
 800738a:	d007      	beq.n	800739c <__cvt+0x38>
 800738c:	002b      	movs	r3, r5
 800738e:	3b45      	subs	r3, #69	@ 0x45
 8007390:	4259      	negs	r1, r3
 8007392:	414b      	adcs	r3, r1
 8007394:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007396:	3a01      	subs	r2, #1
 8007398:	18cb      	adds	r3, r1, r3
 800739a:	9310      	str	r3, [sp, #64]	@ 0x40
 800739c:	ab09      	add	r3, sp, #36	@ 0x24
 800739e:	9304      	str	r3, [sp, #16]
 80073a0:	ab08      	add	r3, sp, #32
 80073a2:	9303      	str	r3, [sp, #12]
 80073a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073a6:	9200      	str	r2, [sp, #0]
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073ac:	0032      	movs	r2, r6
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	003b      	movs	r3, r7
 80073b2:	f000 fe9b 	bl	80080ec <_dtoa_r>
 80073b6:	0004      	movs	r4, r0
 80073b8:	2d47      	cmp	r5, #71	@ 0x47
 80073ba:	d11b      	bne.n	80073f4 <__cvt+0x90>
 80073bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073be:	07db      	lsls	r3, r3, #31
 80073c0:	d511      	bpl.n	80073e6 <__cvt+0x82>
 80073c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073c4:	18c3      	adds	r3, r0, r3
 80073c6:	9307      	str	r3, [sp, #28]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2300      	movs	r3, #0
 80073cc:	0030      	movs	r0, r6
 80073ce:	0039      	movs	r1, r7
 80073d0:	f7f9 f838 	bl	8000444 <__aeabi_dcmpeq>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d001      	beq.n	80073dc <__cvt+0x78>
 80073d8:	9b07      	ldr	r3, [sp, #28]
 80073da:	9309      	str	r3, [sp, #36]	@ 0x24
 80073dc:	2230      	movs	r2, #48	@ 0x30
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	9907      	ldr	r1, [sp, #28]
 80073e2:	428b      	cmp	r3, r1
 80073e4:	d320      	bcc.n	8007428 <__cvt+0xc4>
 80073e6:	0020      	movs	r0, r4
 80073e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80073ec:	1b1b      	subs	r3, r3, r4
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	b00b      	add	sp, #44	@ 0x2c
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073f6:	18c3      	adds	r3, r0, r3
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	2d46      	cmp	r5, #70	@ 0x46
 80073fc:	d1e4      	bne.n	80073c8 <__cvt+0x64>
 80073fe:	7803      	ldrb	r3, [r0, #0]
 8007400:	2b30      	cmp	r3, #48	@ 0x30
 8007402:	d10c      	bne.n	800741e <__cvt+0xba>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	0030      	movs	r0, r6
 800740a:	0039      	movs	r1, r7
 800740c:	f7f9 f81a 	bl	8000444 <__aeabi_dcmpeq>
 8007410:	2800      	cmp	r0, #0
 8007412:	d104      	bne.n	800741e <__cvt+0xba>
 8007414:	2301      	movs	r3, #1
 8007416:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007418:	1a9b      	subs	r3, r3, r2
 800741a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007420:	9a07      	ldr	r2, [sp, #28]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	18d3      	adds	r3, r2, r3
 8007426:	e7ce      	b.n	80073c6 <__cvt+0x62>
 8007428:	1c59      	adds	r1, r3, #1
 800742a:	9109      	str	r1, [sp, #36]	@ 0x24
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e7d6      	b.n	80073de <__cvt+0x7a>

08007430 <__exponent>:
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	232b      	movs	r3, #43	@ 0x2b
 8007434:	b085      	sub	sp, #20
 8007436:	0005      	movs	r5, r0
 8007438:	1e0c      	subs	r4, r1, #0
 800743a:	7002      	strb	r2, [r0, #0]
 800743c:	da01      	bge.n	8007442 <__exponent+0x12>
 800743e:	424c      	negs	r4, r1
 8007440:	3302      	adds	r3, #2
 8007442:	706b      	strb	r3, [r5, #1]
 8007444:	2c09      	cmp	r4, #9
 8007446:	dd2c      	ble.n	80074a2 <__exponent+0x72>
 8007448:	ab02      	add	r3, sp, #8
 800744a:	1dde      	adds	r6, r3, #7
 800744c:	0020      	movs	r0, r4
 800744e:	210a      	movs	r1, #10
 8007450:	f7f8 ffe2 	bl	8000418 <__aeabi_idivmod>
 8007454:	0037      	movs	r7, r6
 8007456:	3130      	adds	r1, #48	@ 0x30
 8007458:	3e01      	subs	r6, #1
 800745a:	0020      	movs	r0, r4
 800745c:	7031      	strb	r1, [r6, #0]
 800745e:	210a      	movs	r1, #10
 8007460:	9401      	str	r4, [sp, #4]
 8007462:	f7f8 fef3 	bl	800024c <__divsi3>
 8007466:	9b01      	ldr	r3, [sp, #4]
 8007468:	0004      	movs	r4, r0
 800746a:	2b63      	cmp	r3, #99	@ 0x63
 800746c:	dcee      	bgt.n	800744c <__exponent+0x1c>
 800746e:	1eba      	subs	r2, r7, #2
 8007470:	1ca8      	adds	r0, r5, #2
 8007472:	0001      	movs	r1, r0
 8007474:	0013      	movs	r3, r2
 8007476:	3430      	adds	r4, #48	@ 0x30
 8007478:	7014      	strb	r4, [r2, #0]
 800747a:	ac02      	add	r4, sp, #8
 800747c:	3407      	adds	r4, #7
 800747e:	429c      	cmp	r4, r3
 8007480:	d80a      	bhi.n	8007498 <__exponent+0x68>
 8007482:	2300      	movs	r3, #0
 8007484:	4294      	cmp	r4, r2
 8007486:	d303      	bcc.n	8007490 <__exponent+0x60>
 8007488:	3309      	adds	r3, #9
 800748a:	aa02      	add	r2, sp, #8
 800748c:	189b      	adds	r3, r3, r2
 800748e:	1bdb      	subs	r3, r3, r7
 8007490:	18c0      	adds	r0, r0, r3
 8007492:	1b40      	subs	r0, r0, r5
 8007494:	b005      	add	sp, #20
 8007496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007498:	781c      	ldrb	r4, [r3, #0]
 800749a:	3301      	adds	r3, #1
 800749c:	700c      	strb	r4, [r1, #0]
 800749e:	3101      	adds	r1, #1
 80074a0:	e7eb      	b.n	800747a <__exponent+0x4a>
 80074a2:	2330      	movs	r3, #48	@ 0x30
 80074a4:	18e4      	adds	r4, r4, r3
 80074a6:	70ab      	strb	r3, [r5, #2]
 80074a8:	1d28      	adds	r0, r5, #4
 80074aa:	70ec      	strb	r4, [r5, #3]
 80074ac:	e7f1      	b.n	8007492 <__exponent+0x62>
	...

080074b0 <_printf_float>:
 80074b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b2:	b097      	sub	sp, #92	@ 0x5c
 80074b4:	000d      	movs	r5, r1
 80074b6:	920a      	str	r2, [sp, #40]	@ 0x28
 80074b8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80074ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80074be:	f000 fcfd 	bl	8007ebc <_localeconv_r>
 80074c2:	6803      	ldr	r3, [r0, #0]
 80074c4:	0018      	movs	r0, r3
 80074c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80074c8:	f7f8 fe1a 	bl	8000100 <strlen>
 80074cc:	2300      	movs	r3, #0
 80074ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80074d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80074d2:	7e2b      	ldrb	r3, [r5, #24]
 80074d4:	2207      	movs	r2, #7
 80074d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	930e      	str	r3, [sp, #56]	@ 0x38
 80074dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	05c9      	lsls	r1, r1, #23
 80074e2:	d545      	bpl.n	8007570 <_printf_float+0xc0>
 80074e4:	189b      	adds	r3, r3, r2
 80074e6:	4393      	bics	r3, r2
 80074e8:	001a      	movs	r2, r3
 80074ea:	3208      	adds	r2, #8
 80074ec:	6022      	str	r2, [r4, #0]
 80074ee:	2201      	movs	r2, #1
 80074f0:	681e      	ldr	r6, [r3, #0]
 80074f2:	685f      	ldr	r7, [r3, #4]
 80074f4:	007b      	lsls	r3, r7, #1
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80074fa:	9610      	str	r6, [sp, #64]	@ 0x40
 80074fc:	64ae      	str	r6, [r5, #72]	@ 0x48
 80074fe:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8007500:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007502:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007504:	4ba7      	ldr	r3, [pc, #668]	@ (80077a4 <_printf_float+0x2f4>)
 8007506:	4252      	negs	r2, r2
 8007508:	f7fb fa66 	bl	80029d8 <__aeabi_dcmpun>
 800750c:	2800      	cmp	r0, #0
 800750e:	d131      	bne.n	8007574 <_printf_float+0xc4>
 8007510:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007512:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007514:	2201      	movs	r2, #1
 8007516:	4ba3      	ldr	r3, [pc, #652]	@ (80077a4 <_printf_float+0x2f4>)
 8007518:	4252      	negs	r2, r2
 800751a:	f7f8 ffa3 	bl	8000464 <__aeabi_dcmple>
 800751e:	2800      	cmp	r0, #0
 8007520:	d128      	bne.n	8007574 <_printf_float+0xc4>
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	0030      	movs	r0, r6
 8007528:	0039      	movs	r1, r7
 800752a:	f7f8 ff91 	bl	8000450 <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	d003      	beq.n	800753a <_printf_float+0x8a>
 8007532:	002b      	movs	r3, r5
 8007534:	222d      	movs	r2, #45	@ 0x2d
 8007536:	3343      	adds	r3, #67	@ 0x43
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800753c:	4f9a      	ldr	r7, [pc, #616]	@ (80077a8 <_printf_float+0x2f8>)
 800753e:	2b47      	cmp	r3, #71	@ 0x47
 8007540:	d800      	bhi.n	8007544 <_printf_float+0x94>
 8007542:	4f9a      	ldr	r7, [pc, #616]	@ (80077ac <_printf_float+0x2fc>)
 8007544:	2303      	movs	r3, #3
 8007546:	2400      	movs	r4, #0
 8007548:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800754a:	612b      	str	r3, [r5, #16]
 800754c:	3301      	adds	r3, #1
 800754e:	439a      	bics	r2, r3
 8007550:	602a      	str	r2, [r5, #0]
 8007552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007554:	0029      	movs	r1, r5
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800755a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755c:	aa15      	add	r2, sp, #84	@ 0x54
 800755e:	f000 f9e5 	bl	800792c <_printf_common>
 8007562:	3001      	adds	r0, #1
 8007564:	d000      	beq.n	8007568 <_printf_float+0xb8>
 8007566:	e09e      	b.n	80076a6 <_printf_float+0x1f6>
 8007568:	2001      	movs	r0, #1
 800756a:	4240      	negs	r0, r0
 800756c:	b017      	add	sp, #92	@ 0x5c
 800756e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007570:	3307      	adds	r3, #7
 8007572:	e7b8      	b.n	80074e6 <_printf_float+0x36>
 8007574:	0032      	movs	r2, r6
 8007576:	003b      	movs	r3, r7
 8007578:	0030      	movs	r0, r6
 800757a:	0039      	movs	r1, r7
 800757c:	f7fb fa2c 	bl	80029d8 <__aeabi_dcmpun>
 8007580:	2800      	cmp	r0, #0
 8007582:	d00b      	beq.n	800759c <_printf_float+0xec>
 8007584:	2f00      	cmp	r7, #0
 8007586:	da03      	bge.n	8007590 <_printf_float+0xe0>
 8007588:	002b      	movs	r3, r5
 800758a:	222d      	movs	r2, #45	@ 0x2d
 800758c:	3343      	adds	r3, #67	@ 0x43
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007592:	4f87      	ldr	r7, [pc, #540]	@ (80077b0 <_printf_float+0x300>)
 8007594:	2b47      	cmp	r3, #71	@ 0x47
 8007596:	d8d5      	bhi.n	8007544 <_printf_float+0x94>
 8007598:	4f86      	ldr	r7, [pc, #536]	@ (80077b4 <_printf_float+0x304>)
 800759a:	e7d3      	b.n	8007544 <_printf_float+0x94>
 800759c:	2220      	movs	r2, #32
 800759e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80075a0:	686b      	ldr	r3, [r5, #4]
 80075a2:	4394      	bics	r4, r2
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	d146      	bne.n	8007636 <_printf_float+0x186>
 80075a8:	3307      	adds	r3, #7
 80075aa:	606b      	str	r3, [r5, #4]
 80075ac:	2380      	movs	r3, #128	@ 0x80
 80075ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	2200      	movs	r2, #0
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	9206      	str	r2, [sp, #24]
 80075ba:	aa14      	add	r2, sp, #80	@ 0x50
 80075bc:	9205      	str	r2, [sp, #20]
 80075be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075c0:	a90a      	add	r1, sp, #40	@ 0x28
 80075c2:	9204      	str	r2, [sp, #16]
 80075c4:	aa13      	add	r2, sp, #76	@ 0x4c
 80075c6:	9203      	str	r2, [sp, #12]
 80075c8:	2223      	movs	r2, #35	@ 0x23
 80075ca:	1852      	adds	r2, r2, r1
 80075cc:	9202      	str	r2, [sp, #8]
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	686b      	ldr	r3, [r5, #4]
 80075d2:	0032      	movs	r2, r6
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075d8:	003b      	movs	r3, r7
 80075da:	f7ff fec3 	bl	8007364 <__cvt>
 80075de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075e0:	0007      	movs	r7, r0
 80075e2:	2c47      	cmp	r4, #71	@ 0x47
 80075e4:	d12d      	bne.n	8007642 <_printf_float+0x192>
 80075e6:	1cd3      	adds	r3, r2, #3
 80075e8:	db02      	blt.n	80075f0 <_printf_float+0x140>
 80075ea:	686b      	ldr	r3, [r5, #4]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	dd47      	ble.n	8007680 <_printf_float+0x1d0>
 80075f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075f2:	3b02      	subs	r3, #2
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80075f8:	0028      	movs	r0, r5
 80075fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80075fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075fe:	3901      	subs	r1, #1
 8007600:	3050      	adds	r0, #80	@ 0x50
 8007602:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007604:	f7ff ff14 	bl	8007430 <__exponent>
 8007608:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800760a:	0004      	movs	r4, r0
 800760c:	1813      	adds	r3, r2, r0
 800760e:	612b      	str	r3, [r5, #16]
 8007610:	2a01      	cmp	r2, #1
 8007612:	dc02      	bgt.n	800761a <_printf_float+0x16a>
 8007614:	682a      	ldr	r2, [r5, #0]
 8007616:	07d2      	lsls	r2, r2, #31
 8007618:	d501      	bpl.n	800761e <_printf_float+0x16e>
 800761a:	3301      	adds	r3, #1
 800761c:	612b      	str	r3, [r5, #16]
 800761e:	2323      	movs	r3, #35	@ 0x23
 8007620:	aa0a      	add	r2, sp, #40	@ 0x28
 8007622:	189b      	adds	r3, r3, r2
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d100      	bne.n	800762c <_printf_float+0x17c>
 800762a:	e792      	b.n	8007552 <_printf_float+0xa2>
 800762c:	002b      	movs	r3, r5
 800762e:	222d      	movs	r2, #45	@ 0x2d
 8007630:	3343      	adds	r3, #67	@ 0x43
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e78d      	b.n	8007552 <_printf_float+0xa2>
 8007636:	2c47      	cmp	r4, #71	@ 0x47
 8007638:	d1b8      	bne.n	80075ac <_printf_float+0xfc>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1b6      	bne.n	80075ac <_printf_float+0xfc>
 800763e:	3301      	adds	r3, #1
 8007640:	e7b3      	b.n	80075aa <_printf_float+0xfa>
 8007642:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007644:	2b65      	cmp	r3, #101	@ 0x65
 8007646:	d9d7      	bls.n	80075f8 <_printf_float+0x148>
 8007648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800764a:	2b66      	cmp	r3, #102	@ 0x66
 800764c:	d11a      	bne.n	8007684 <_printf_float+0x1d4>
 800764e:	686b      	ldr	r3, [r5, #4]
 8007650:	2a00      	cmp	r2, #0
 8007652:	dd09      	ble.n	8007668 <_printf_float+0x1b8>
 8007654:	612a      	str	r2, [r5, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <_printf_float+0x1b0>
 800765a:	6829      	ldr	r1, [r5, #0]
 800765c:	07c9      	lsls	r1, r1, #31
 800765e:	d50b      	bpl.n	8007678 <_printf_float+0x1c8>
 8007660:	3301      	adds	r3, #1
 8007662:	189b      	adds	r3, r3, r2
 8007664:	612b      	str	r3, [r5, #16]
 8007666:	e007      	b.n	8007678 <_printf_float+0x1c8>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d103      	bne.n	8007674 <_printf_float+0x1c4>
 800766c:	2201      	movs	r2, #1
 800766e:	6829      	ldr	r1, [r5, #0]
 8007670:	4211      	tst	r1, r2
 8007672:	d000      	beq.n	8007676 <_printf_float+0x1c6>
 8007674:	1c9a      	adds	r2, r3, #2
 8007676:	612a      	str	r2, [r5, #16]
 8007678:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800767a:	2400      	movs	r4, #0
 800767c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800767e:	e7ce      	b.n	800761e <_printf_float+0x16e>
 8007680:	2367      	movs	r3, #103	@ 0x67
 8007682:	930c      	str	r3, [sp, #48]	@ 0x30
 8007684:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007686:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007688:	4299      	cmp	r1, r3
 800768a:	db06      	blt.n	800769a <_printf_float+0x1ea>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	6129      	str	r1, [r5, #16]
 8007690:	07db      	lsls	r3, r3, #31
 8007692:	d5f1      	bpl.n	8007678 <_printf_float+0x1c8>
 8007694:	3101      	adds	r1, #1
 8007696:	6129      	str	r1, [r5, #16]
 8007698:	e7ee      	b.n	8007678 <_printf_float+0x1c8>
 800769a:	2201      	movs	r2, #1
 800769c:	2900      	cmp	r1, #0
 800769e:	dce0      	bgt.n	8007662 <_printf_float+0x1b2>
 80076a0:	1892      	adds	r2, r2, r2
 80076a2:	1a52      	subs	r2, r2, r1
 80076a4:	e7dd      	b.n	8007662 <_printf_float+0x1b2>
 80076a6:	682a      	ldr	r2, [r5, #0]
 80076a8:	0553      	lsls	r3, r2, #21
 80076aa:	d408      	bmi.n	80076be <_printf_float+0x20e>
 80076ac:	692b      	ldr	r3, [r5, #16]
 80076ae:	003a      	movs	r2, r7
 80076b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076b6:	47a0      	blx	r4
 80076b8:	3001      	adds	r0, #1
 80076ba:	d129      	bne.n	8007710 <_printf_float+0x260>
 80076bc:	e754      	b.n	8007568 <_printf_float+0xb8>
 80076be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076c0:	2b65      	cmp	r3, #101	@ 0x65
 80076c2:	d800      	bhi.n	80076c6 <_printf_float+0x216>
 80076c4:	e0db      	b.n	800787e <_printf_float+0x3ce>
 80076c6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80076c8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	f7f8 feb9 	bl	8000444 <__aeabi_dcmpeq>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d033      	beq.n	800773e <_printf_float+0x28e>
 80076d6:	2301      	movs	r3, #1
 80076d8:	4a37      	ldr	r2, [pc, #220]	@ (80077b8 <_printf_float+0x308>)
 80076da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076e0:	47a0      	blx	r4
 80076e2:	3001      	adds	r0, #1
 80076e4:	d100      	bne.n	80076e8 <_printf_float+0x238>
 80076e6:	e73f      	b.n	8007568 <_printf_float+0xb8>
 80076e8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80076ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076ec:	42b3      	cmp	r3, r6
 80076ee:	db02      	blt.n	80076f6 <_printf_float+0x246>
 80076f0:	682b      	ldr	r3, [r5, #0]
 80076f2:	07db      	lsls	r3, r3, #31
 80076f4:	d50c      	bpl.n	8007710 <_printf_float+0x260>
 80076f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007700:	47a0      	blx	r4
 8007702:	2400      	movs	r4, #0
 8007704:	3001      	adds	r0, #1
 8007706:	d100      	bne.n	800770a <_printf_float+0x25a>
 8007708:	e72e      	b.n	8007568 <_printf_float+0xb8>
 800770a:	1e73      	subs	r3, r6, #1
 800770c:	42a3      	cmp	r3, r4
 800770e:	dc0a      	bgt.n	8007726 <_printf_float+0x276>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	079b      	lsls	r3, r3, #30
 8007714:	d500      	bpl.n	8007718 <_printf_float+0x268>
 8007716:	e106      	b.n	8007926 <_printf_float+0x476>
 8007718:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800771a:	68e8      	ldr	r0, [r5, #12]
 800771c:	4298      	cmp	r0, r3
 800771e:	db00      	blt.n	8007722 <_printf_float+0x272>
 8007720:	e724      	b.n	800756c <_printf_float+0xbc>
 8007722:	0018      	movs	r0, r3
 8007724:	e722      	b.n	800756c <_printf_float+0xbc>
 8007726:	002a      	movs	r2, r5
 8007728:	2301      	movs	r3, #1
 800772a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800772c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800772e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007730:	321a      	adds	r2, #26
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	d100      	bne.n	800773a <_printf_float+0x28a>
 8007738:	e716      	b.n	8007568 <_printf_float+0xb8>
 800773a:	3401      	adds	r4, #1
 800773c:	e7e5      	b.n	800770a <_printf_float+0x25a>
 800773e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007740:	2b00      	cmp	r3, #0
 8007742:	dc3b      	bgt.n	80077bc <_printf_float+0x30c>
 8007744:	2301      	movs	r3, #1
 8007746:	4a1c      	ldr	r2, [pc, #112]	@ (80077b8 <_printf_float+0x308>)
 8007748:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800774a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800774c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800774e:	47a0      	blx	r4
 8007750:	3001      	adds	r0, #1
 8007752:	d100      	bne.n	8007756 <_printf_float+0x2a6>
 8007754:	e708      	b.n	8007568 <_printf_float+0xb8>
 8007756:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007758:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800775a:	4333      	orrs	r3, r6
 800775c:	d102      	bne.n	8007764 <_printf_float+0x2b4>
 800775e:	682b      	ldr	r3, [r5, #0]
 8007760:	07db      	lsls	r3, r3, #31
 8007762:	d5d5      	bpl.n	8007710 <_printf_float+0x260>
 8007764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007766:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800776a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800776c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800776e:	47a0      	blx	r4
 8007770:	2300      	movs	r3, #0
 8007772:	3001      	adds	r0, #1
 8007774:	d100      	bne.n	8007778 <_printf_float+0x2c8>
 8007776:	e6f7      	b.n	8007568 <_printf_float+0xb8>
 8007778:	930c      	str	r3, [sp, #48]	@ 0x30
 800777a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800777c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800777e:	425b      	negs	r3, r3
 8007780:	4293      	cmp	r3, r2
 8007782:	dc01      	bgt.n	8007788 <_printf_float+0x2d8>
 8007784:	0033      	movs	r3, r6
 8007786:	e792      	b.n	80076ae <_printf_float+0x1fe>
 8007788:	002a      	movs	r2, r5
 800778a:	2301      	movs	r3, #1
 800778c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800778e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007790:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007792:	321a      	adds	r2, #26
 8007794:	47a0      	blx	r4
 8007796:	3001      	adds	r0, #1
 8007798:	d100      	bne.n	800779c <_printf_float+0x2ec>
 800779a:	e6e5      	b.n	8007568 <_printf_float+0xb8>
 800779c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800779e:	3301      	adds	r3, #1
 80077a0:	e7ea      	b.n	8007778 <_printf_float+0x2c8>
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	7fefffff 	.word	0x7fefffff
 80077a8:	0800b3c8 	.word	0x0800b3c8
 80077ac:	0800b3c4 	.word	0x0800b3c4
 80077b0:	0800b3d0 	.word	0x0800b3d0
 80077b4:	0800b3cc 	.word	0x0800b3cc
 80077b8:	0800b3d4 	.word	0x0800b3d4
 80077bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077be:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80077c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80077c2:	429e      	cmp	r6, r3
 80077c4:	dd00      	ble.n	80077c8 <_printf_float+0x318>
 80077c6:	001e      	movs	r6, r3
 80077c8:	2e00      	cmp	r6, #0
 80077ca:	dc31      	bgt.n	8007830 <_printf_float+0x380>
 80077cc:	43f3      	mvns	r3, r6
 80077ce:	2400      	movs	r4, #0
 80077d0:	17db      	asrs	r3, r3, #31
 80077d2:	4033      	ands	r3, r6
 80077d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80077d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80077d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077da:	1af3      	subs	r3, r6, r3
 80077dc:	42a3      	cmp	r3, r4
 80077de:	dc30      	bgt.n	8007842 <_printf_float+0x392>
 80077e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077e4:	429a      	cmp	r2, r3
 80077e6:	dc38      	bgt.n	800785a <_printf_float+0x3aa>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	07db      	lsls	r3, r3, #31
 80077ec:	d435      	bmi.n	800785a <_printf_float+0x3aa>
 80077ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80077f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077f4:	1b9b      	subs	r3, r3, r6
 80077f6:	1b14      	subs	r4, r2, r4
 80077f8:	429c      	cmp	r4, r3
 80077fa:	dd00      	ble.n	80077fe <_printf_float+0x34e>
 80077fc:	001c      	movs	r4, r3
 80077fe:	2c00      	cmp	r4, #0
 8007800:	dc34      	bgt.n	800786c <_printf_float+0x3bc>
 8007802:	43e3      	mvns	r3, r4
 8007804:	2600      	movs	r6, #0
 8007806:	17db      	asrs	r3, r3, #31
 8007808:	401c      	ands	r4, r3
 800780a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800780c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	1b1b      	subs	r3, r3, r4
 8007812:	42b3      	cmp	r3, r6
 8007814:	dc00      	bgt.n	8007818 <_printf_float+0x368>
 8007816:	e77b      	b.n	8007710 <_printf_float+0x260>
 8007818:	002a      	movs	r2, r5
 800781a:	2301      	movs	r3, #1
 800781c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800781e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007820:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007822:	321a      	adds	r2, #26
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	d100      	bne.n	800782c <_printf_float+0x37c>
 800782a:	e69d      	b.n	8007568 <_printf_float+0xb8>
 800782c:	3601      	adds	r6, #1
 800782e:	e7ec      	b.n	800780a <_printf_float+0x35a>
 8007830:	0033      	movs	r3, r6
 8007832:	003a      	movs	r2, r7
 8007834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007838:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800783a:	47a0      	blx	r4
 800783c:	3001      	adds	r0, #1
 800783e:	d1c5      	bne.n	80077cc <_printf_float+0x31c>
 8007840:	e692      	b.n	8007568 <_printf_float+0xb8>
 8007842:	002a      	movs	r2, r5
 8007844:	2301      	movs	r3, #1
 8007846:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007848:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800784a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800784c:	321a      	adds	r2, #26
 800784e:	47b0      	blx	r6
 8007850:	3001      	adds	r0, #1
 8007852:	d100      	bne.n	8007856 <_printf_float+0x3a6>
 8007854:	e688      	b.n	8007568 <_printf_float+0xb8>
 8007856:	3401      	adds	r4, #1
 8007858:	e7bd      	b.n	80077d6 <_printf_float+0x326>
 800785a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800785c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800785e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007860:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007862:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007864:	47a0      	blx	r4
 8007866:	3001      	adds	r0, #1
 8007868:	d1c1      	bne.n	80077ee <_printf_float+0x33e>
 800786a:	e67d      	b.n	8007568 <_printf_float+0xb8>
 800786c:	19ba      	adds	r2, r7, r6
 800786e:	0023      	movs	r3, r4
 8007870:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007874:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007876:	47b0      	blx	r6
 8007878:	3001      	adds	r0, #1
 800787a:	d1c2      	bne.n	8007802 <_printf_float+0x352>
 800787c:	e674      	b.n	8007568 <_printf_float+0xb8>
 800787e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007880:	930c      	str	r3, [sp, #48]	@ 0x30
 8007882:	2b01      	cmp	r3, #1
 8007884:	dc02      	bgt.n	800788c <_printf_float+0x3dc>
 8007886:	2301      	movs	r3, #1
 8007888:	421a      	tst	r2, r3
 800788a:	d039      	beq.n	8007900 <_printf_float+0x450>
 800788c:	2301      	movs	r3, #1
 800788e:	003a      	movs	r2, r7
 8007890:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007894:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007896:	47b0      	blx	r6
 8007898:	3001      	adds	r0, #1
 800789a:	d100      	bne.n	800789e <_printf_float+0x3ee>
 800789c:	e664      	b.n	8007568 <_printf_float+0xb8>
 800789e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078a6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80078a8:	47b0      	blx	r6
 80078aa:	3001      	adds	r0, #1
 80078ac:	d100      	bne.n	80078b0 <_printf_float+0x400>
 80078ae:	e65b      	b.n	8007568 <_printf_float+0xb8>
 80078b0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80078b2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80078b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078b6:	2200      	movs	r2, #0
 80078b8:	3b01      	subs	r3, #1
 80078ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80078bc:	2300      	movs	r3, #0
 80078be:	f7f8 fdc1 	bl	8000444 <__aeabi_dcmpeq>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d11a      	bne.n	80078fc <_printf_float+0x44c>
 80078c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078c8:	1c7a      	adds	r2, r7, #1
 80078ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078ce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80078d0:	47b0      	blx	r6
 80078d2:	3001      	adds	r0, #1
 80078d4:	d10e      	bne.n	80078f4 <_printf_float+0x444>
 80078d6:	e647      	b.n	8007568 <_printf_float+0xb8>
 80078d8:	002a      	movs	r2, r5
 80078da:	2301      	movs	r3, #1
 80078dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80078e2:	321a      	adds	r2, #26
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	d100      	bne.n	80078ec <_printf_float+0x43c>
 80078ea:	e63d      	b.n	8007568 <_printf_float+0xb8>
 80078ec:	3601      	adds	r6, #1
 80078ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078f0:	429e      	cmp	r6, r3
 80078f2:	dbf1      	blt.n	80078d8 <_printf_float+0x428>
 80078f4:	002a      	movs	r2, r5
 80078f6:	0023      	movs	r3, r4
 80078f8:	3250      	adds	r2, #80	@ 0x50
 80078fa:	e6d9      	b.n	80076b0 <_printf_float+0x200>
 80078fc:	2600      	movs	r6, #0
 80078fe:	e7f6      	b.n	80078ee <_printf_float+0x43e>
 8007900:	003a      	movs	r2, r7
 8007902:	e7e2      	b.n	80078ca <_printf_float+0x41a>
 8007904:	002a      	movs	r2, r5
 8007906:	2301      	movs	r3, #1
 8007908:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800790a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800790c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800790e:	3219      	adds	r2, #25
 8007910:	47b0      	blx	r6
 8007912:	3001      	adds	r0, #1
 8007914:	d100      	bne.n	8007918 <_printf_float+0x468>
 8007916:	e627      	b.n	8007568 <_printf_float+0xb8>
 8007918:	3401      	adds	r4, #1
 800791a:	68eb      	ldr	r3, [r5, #12]
 800791c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	42a3      	cmp	r3, r4
 8007922:	dcef      	bgt.n	8007904 <_printf_float+0x454>
 8007924:	e6f8      	b.n	8007718 <_printf_float+0x268>
 8007926:	2400      	movs	r4, #0
 8007928:	e7f7      	b.n	800791a <_printf_float+0x46a>
 800792a:	46c0      	nop			@ (mov r8, r8)

0800792c <_printf_common>:
 800792c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800792e:	0016      	movs	r6, r2
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	688a      	ldr	r2, [r1, #8]
 8007934:	690b      	ldr	r3, [r1, #16]
 8007936:	000c      	movs	r4, r1
 8007938:	9000      	str	r0, [sp, #0]
 800793a:	4293      	cmp	r3, r2
 800793c:	da00      	bge.n	8007940 <_printf_common+0x14>
 800793e:	0013      	movs	r3, r2
 8007940:	0022      	movs	r2, r4
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	3243      	adds	r2, #67	@ 0x43
 8007946:	7812      	ldrb	r2, [r2, #0]
 8007948:	2a00      	cmp	r2, #0
 800794a:	d001      	beq.n	8007950 <_printf_common+0x24>
 800794c:	3301      	adds	r3, #1
 800794e:	6033      	str	r3, [r6, #0]
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	069b      	lsls	r3, r3, #26
 8007954:	d502      	bpl.n	800795c <_printf_common+0x30>
 8007956:	6833      	ldr	r3, [r6, #0]
 8007958:	3302      	adds	r3, #2
 800795a:	6033      	str	r3, [r6, #0]
 800795c:	6822      	ldr	r2, [r4, #0]
 800795e:	2306      	movs	r3, #6
 8007960:	0015      	movs	r5, r2
 8007962:	401d      	ands	r5, r3
 8007964:	421a      	tst	r2, r3
 8007966:	d027      	beq.n	80079b8 <_printf_common+0x8c>
 8007968:	0023      	movs	r3, r4
 800796a:	3343      	adds	r3, #67	@ 0x43
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	1e5a      	subs	r2, r3, #1
 8007970:	4193      	sbcs	r3, r2
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	0692      	lsls	r2, r2, #26
 8007976:	d430      	bmi.n	80079da <_printf_common+0xae>
 8007978:	0022      	movs	r2, r4
 800797a:	9901      	ldr	r1, [sp, #4]
 800797c:	9800      	ldr	r0, [sp, #0]
 800797e:	9d08      	ldr	r5, [sp, #32]
 8007980:	3243      	adds	r2, #67	@ 0x43
 8007982:	47a8      	blx	r5
 8007984:	3001      	adds	r0, #1
 8007986:	d025      	beq.n	80079d4 <_printf_common+0xa8>
 8007988:	2206      	movs	r2, #6
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	2500      	movs	r5, #0
 800798e:	4013      	ands	r3, r2
 8007990:	2b04      	cmp	r3, #4
 8007992:	d105      	bne.n	80079a0 <_printf_common+0x74>
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	68e5      	ldr	r5, [r4, #12]
 8007998:	1aed      	subs	r5, r5, r3
 800799a:	43eb      	mvns	r3, r5
 800799c:	17db      	asrs	r3, r3, #31
 800799e:	401d      	ands	r5, r3
 80079a0:	68a3      	ldr	r3, [r4, #8]
 80079a2:	6922      	ldr	r2, [r4, #16]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	dd01      	ble.n	80079ac <_printf_common+0x80>
 80079a8:	1a9b      	subs	r3, r3, r2
 80079aa:	18ed      	adds	r5, r5, r3
 80079ac:	2600      	movs	r6, #0
 80079ae:	42b5      	cmp	r5, r6
 80079b0:	d120      	bne.n	80079f4 <_printf_common+0xc8>
 80079b2:	2000      	movs	r0, #0
 80079b4:	e010      	b.n	80079d8 <_printf_common+0xac>
 80079b6:	3501      	adds	r5, #1
 80079b8:	68e3      	ldr	r3, [r4, #12]
 80079ba:	6832      	ldr	r2, [r6, #0]
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	42ab      	cmp	r3, r5
 80079c0:	ddd2      	ble.n	8007968 <_printf_common+0x3c>
 80079c2:	0022      	movs	r2, r4
 80079c4:	2301      	movs	r3, #1
 80079c6:	9901      	ldr	r1, [sp, #4]
 80079c8:	9800      	ldr	r0, [sp, #0]
 80079ca:	9f08      	ldr	r7, [sp, #32]
 80079cc:	3219      	adds	r2, #25
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	d1f0      	bne.n	80079b6 <_printf_common+0x8a>
 80079d4:	2001      	movs	r0, #1
 80079d6:	4240      	negs	r0, r0
 80079d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079da:	2030      	movs	r0, #48	@ 0x30
 80079dc:	18e1      	adds	r1, r4, r3
 80079de:	3143      	adds	r1, #67	@ 0x43
 80079e0:	7008      	strb	r0, [r1, #0]
 80079e2:	0021      	movs	r1, r4
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	3145      	adds	r1, #69	@ 0x45
 80079e8:	7809      	ldrb	r1, [r1, #0]
 80079ea:	18a2      	adds	r2, r4, r2
 80079ec:	3243      	adds	r2, #67	@ 0x43
 80079ee:	3302      	adds	r3, #2
 80079f0:	7011      	strb	r1, [r2, #0]
 80079f2:	e7c1      	b.n	8007978 <_printf_common+0x4c>
 80079f4:	0022      	movs	r2, r4
 80079f6:	2301      	movs	r3, #1
 80079f8:	9901      	ldr	r1, [sp, #4]
 80079fa:	9800      	ldr	r0, [sp, #0]
 80079fc:	9f08      	ldr	r7, [sp, #32]
 80079fe:	321a      	adds	r2, #26
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	d0e6      	beq.n	80079d4 <_printf_common+0xa8>
 8007a06:	3601      	adds	r6, #1
 8007a08:	e7d1      	b.n	80079ae <_printf_common+0x82>
	...

08007a0c <_printf_i>:
 8007a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a0e:	b08b      	sub	sp, #44	@ 0x2c
 8007a10:	9206      	str	r2, [sp, #24]
 8007a12:	000a      	movs	r2, r1
 8007a14:	3243      	adds	r2, #67	@ 0x43
 8007a16:	9307      	str	r3, [sp, #28]
 8007a18:	9005      	str	r0, [sp, #20]
 8007a1a:	9203      	str	r2, [sp, #12]
 8007a1c:	7e0a      	ldrb	r2, [r1, #24]
 8007a1e:	000c      	movs	r4, r1
 8007a20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a22:	2a78      	cmp	r2, #120	@ 0x78
 8007a24:	d809      	bhi.n	8007a3a <_printf_i+0x2e>
 8007a26:	2a62      	cmp	r2, #98	@ 0x62
 8007a28:	d80b      	bhi.n	8007a42 <_printf_i+0x36>
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d100      	bne.n	8007a30 <_printf_i+0x24>
 8007a2e:	e0ba      	b.n	8007ba6 <_printf_i+0x19a>
 8007a30:	497a      	ldr	r1, [pc, #488]	@ (8007c1c <_printf_i+0x210>)
 8007a32:	9104      	str	r1, [sp, #16]
 8007a34:	2a58      	cmp	r2, #88	@ 0x58
 8007a36:	d100      	bne.n	8007a3a <_printf_i+0x2e>
 8007a38:	e08e      	b.n	8007b58 <_printf_i+0x14c>
 8007a3a:	0025      	movs	r5, r4
 8007a3c:	3542      	adds	r5, #66	@ 0x42
 8007a3e:	702a      	strb	r2, [r5, #0]
 8007a40:	e022      	b.n	8007a88 <_printf_i+0x7c>
 8007a42:	0010      	movs	r0, r2
 8007a44:	3863      	subs	r0, #99	@ 0x63
 8007a46:	2815      	cmp	r0, #21
 8007a48:	d8f7      	bhi.n	8007a3a <_printf_i+0x2e>
 8007a4a:	f7f8 fb6b 	bl	8000124 <__gnu_thumb1_case_shi>
 8007a4e:	0016      	.short	0x0016
 8007a50:	fff6001f 	.word	0xfff6001f
 8007a54:	fff6fff6 	.word	0xfff6fff6
 8007a58:	001ffff6 	.word	0x001ffff6
 8007a5c:	fff6fff6 	.word	0xfff6fff6
 8007a60:	fff6fff6 	.word	0xfff6fff6
 8007a64:	0036009f 	.word	0x0036009f
 8007a68:	fff6007e 	.word	0xfff6007e
 8007a6c:	00b0fff6 	.word	0x00b0fff6
 8007a70:	0036fff6 	.word	0x0036fff6
 8007a74:	fff6fff6 	.word	0xfff6fff6
 8007a78:	0082      	.short	0x0082
 8007a7a:	0025      	movs	r5, r4
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	3542      	adds	r5, #66	@ 0x42
 8007a80:	1d11      	adds	r1, r2, #4
 8007a82:	6019      	str	r1, [r3, #0]
 8007a84:	6813      	ldr	r3, [r2, #0]
 8007a86:	702b      	strb	r3, [r5, #0]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e09e      	b.n	8007bca <_printf_i+0x1be>
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	6809      	ldr	r1, [r1, #0]
 8007a90:	1d02      	adds	r2, r0, #4
 8007a92:	060d      	lsls	r5, r1, #24
 8007a94:	d50b      	bpl.n	8007aae <_printf_i+0xa2>
 8007a96:	6806      	ldr	r6, [r0, #0]
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	2e00      	cmp	r6, #0
 8007a9c:	da03      	bge.n	8007aa6 <_printf_i+0x9a>
 8007a9e:	232d      	movs	r3, #45	@ 0x2d
 8007aa0:	9a03      	ldr	r2, [sp, #12]
 8007aa2:	4276      	negs	r6, r6
 8007aa4:	7013      	strb	r3, [r2, #0]
 8007aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8007c1c <_printf_i+0x210>)
 8007aa8:	270a      	movs	r7, #10
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	e018      	b.n	8007ae0 <_printf_i+0xd4>
 8007aae:	6806      	ldr	r6, [r0, #0]
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	0649      	lsls	r1, r1, #25
 8007ab4:	d5f1      	bpl.n	8007a9a <_printf_i+0x8e>
 8007ab6:	b236      	sxth	r6, r6
 8007ab8:	e7ef      	b.n	8007a9a <_printf_i+0x8e>
 8007aba:	6808      	ldr	r0, [r1, #0]
 8007abc:	6819      	ldr	r1, [r3, #0]
 8007abe:	c940      	ldmia	r1!, {r6}
 8007ac0:	0605      	lsls	r5, r0, #24
 8007ac2:	d402      	bmi.n	8007aca <_printf_i+0xbe>
 8007ac4:	0640      	lsls	r0, r0, #25
 8007ac6:	d500      	bpl.n	8007aca <_printf_i+0xbe>
 8007ac8:	b2b6      	uxth	r6, r6
 8007aca:	6019      	str	r1, [r3, #0]
 8007acc:	4b53      	ldr	r3, [pc, #332]	@ (8007c1c <_printf_i+0x210>)
 8007ace:	270a      	movs	r7, #10
 8007ad0:	9304      	str	r3, [sp, #16]
 8007ad2:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ad4:	d100      	bne.n	8007ad8 <_printf_i+0xcc>
 8007ad6:	3f02      	subs	r7, #2
 8007ad8:	0023      	movs	r3, r4
 8007ada:	2200      	movs	r2, #0
 8007adc:	3343      	adds	r3, #67	@ 0x43
 8007ade:	701a      	strb	r2, [r3, #0]
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	60a3      	str	r3, [r4, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	db06      	blt.n	8007af6 <_printf_i+0xea>
 8007ae8:	2104      	movs	r1, #4
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	9d03      	ldr	r5, [sp, #12]
 8007aee:	438a      	bics	r2, r1
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	4333      	orrs	r3, r6
 8007af4:	d00c      	beq.n	8007b10 <_printf_i+0x104>
 8007af6:	9d03      	ldr	r5, [sp, #12]
 8007af8:	0030      	movs	r0, r6
 8007afa:	0039      	movs	r1, r7
 8007afc:	f7f8 fba2 	bl	8000244 <__aeabi_uidivmod>
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	3d01      	subs	r5, #1
 8007b04:	5c5b      	ldrb	r3, [r3, r1]
 8007b06:	702b      	strb	r3, [r5, #0]
 8007b08:	0033      	movs	r3, r6
 8007b0a:	0006      	movs	r6, r0
 8007b0c:	429f      	cmp	r7, r3
 8007b0e:	d9f3      	bls.n	8007af8 <_printf_i+0xec>
 8007b10:	2f08      	cmp	r7, #8
 8007b12:	d109      	bne.n	8007b28 <_printf_i+0x11c>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07db      	lsls	r3, r3, #31
 8007b18:	d506      	bpl.n	8007b28 <_printf_i+0x11c>
 8007b1a:	6862      	ldr	r2, [r4, #4]
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	dc02      	bgt.n	8007b28 <_printf_i+0x11c>
 8007b22:	2330      	movs	r3, #48	@ 0x30
 8007b24:	3d01      	subs	r5, #1
 8007b26:	702b      	strb	r3, [r5, #0]
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	1b5b      	subs	r3, r3, r5
 8007b2c:	6123      	str	r3, [r4, #16]
 8007b2e:	9b07      	ldr	r3, [sp, #28]
 8007b30:	0021      	movs	r1, r4
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	9805      	ldr	r0, [sp, #20]
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	aa09      	add	r2, sp, #36	@ 0x24
 8007b3a:	f7ff fef7 	bl	800792c <_printf_common>
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d148      	bne.n	8007bd4 <_printf_i+0x1c8>
 8007b42:	2001      	movs	r0, #1
 8007b44:	4240      	negs	r0, r0
 8007b46:	b00b      	add	sp, #44	@ 0x2c
 8007b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	6809      	ldr	r1, [r1, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	6022      	str	r2, [r4, #0]
 8007b52:	2278      	movs	r2, #120	@ 0x78
 8007b54:	4932      	ldr	r1, [pc, #200]	@ (8007c20 <_printf_i+0x214>)
 8007b56:	9104      	str	r1, [sp, #16]
 8007b58:	0021      	movs	r1, r4
 8007b5a:	3145      	adds	r1, #69	@ 0x45
 8007b5c:	700a      	strb	r2, [r1, #0]
 8007b5e:	6819      	ldr	r1, [r3, #0]
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	c940      	ldmia	r1!, {r6}
 8007b64:	0610      	lsls	r0, r2, #24
 8007b66:	d402      	bmi.n	8007b6e <_printf_i+0x162>
 8007b68:	0650      	lsls	r0, r2, #25
 8007b6a:	d500      	bpl.n	8007b6e <_printf_i+0x162>
 8007b6c:	b2b6      	uxth	r6, r6
 8007b6e:	6019      	str	r1, [r3, #0]
 8007b70:	07d3      	lsls	r3, r2, #31
 8007b72:	d502      	bpl.n	8007b7a <_printf_i+0x16e>
 8007b74:	2320      	movs	r3, #32
 8007b76:	4313      	orrs	r3, r2
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	d001      	beq.n	8007b82 <_printf_i+0x176>
 8007b7e:	2710      	movs	r7, #16
 8007b80:	e7aa      	b.n	8007ad8 <_printf_i+0xcc>
 8007b82:	2220      	movs	r2, #32
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	4393      	bics	r3, r2
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	e7f8      	b.n	8007b7e <_printf_i+0x172>
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	680d      	ldr	r5, [r1, #0]
 8007b90:	1d10      	adds	r0, r2, #4
 8007b92:	6949      	ldr	r1, [r1, #20]
 8007b94:	6018      	str	r0, [r3, #0]
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	062e      	lsls	r6, r5, #24
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0x194>
 8007b9c:	6019      	str	r1, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <_printf_i+0x19a>
 8007ba0:	066d      	lsls	r5, r5, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0x190>
 8007ba4:	8019      	strh	r1, [r3, #0]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9d03      	ldr	r5, [sp, #12]
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	e7bf      	b.n	8007b2e <_printf_i+0x122>
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	1d11      	adds	r1, r2, #4
 8007bb2:	6019      	str	r1, [r3, #0]
 8007bb4:	6815      	ldr	r5, [r2, #0]
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	0028      	movs	r0, r5
 8007bba:	6862      	ldr	r2, [r4, #4]
 8007bbc:	f000 f9fd 	bl	8007fba <memchr>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d001      	beq.n	8007bc8 <_printf_i+0x1bc>
 8007bc4:	1b40      	subs	r0, r0, r5
 8007bc6:	6060      	str	r0, [r4, #4]
 8007bc8:	6863      	ldr	r3, [r4, #4]
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9a03      	ldr	r2, [sp, #12]
 8007bd0:	7013      	strb	r3, [r2, #0]
 8007bd2:	e7ac      	b.n	8007b2e <_printf_i+0x122>
 8007bd4:	002a      	movs	r2, r5
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	9906      	ldr	r1, [sp, #24]
 8007bda:	9805      	ldr	r0, [sp, #20]
 8007bdc:	9d07      	ldr	r5, [sp, #28]
 8007bde:	47a8      	blx	r5
 8007be0:	3001      	adds	r0, #1
 8007be2:	d0ae      	beq.n	8007b42 <_printf_i+0x136>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	079b      	lsls	r3, r3, #30
 8007be8:	d415      	bmi.n	8007c16 <_printf_i+0x20a>
 8007bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bec:	68e0      	ldr	r0, [r4, #12]
 8007bee:	4298      	cmp	r0, r3
 8007bf0:	daa9      	bge.n	8007b46 <_printf_i+0x13a>
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	e7a7      	b.n	8007b46 <_printf_i+0x13a>
 8007bf6:	0022      	movs	r2, r4
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	9906      	ldr	r1, [sp, #24]
 8007bfc:	9805      	ldr	r0, [sp, #20]
 8007bfe:	9e07      	ldr	r6, [sp, #28]
 8007c00:	3219      	adds	r2, #25
 8007c02:	47b0      	blx	r6
 8007c04:	3001      	adds	r0, #1
 8007c06:	d09c      	beq.n	8007b42 <_printf_i+0x136>
 8007c08:	3501      	adds	r5, #1
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	dcf0      	bgt.n	8007bf6 <_printf_i+0x1ea>
 8007c14:	e7e9      	b.n	8007bea <_printf_i+0x1de>
 8007c16:	2500      	movs	r5, #0
 8007c18:	e7f7      	b.n	8007c0a <_printf_i+0x1fe>
 8007c1a:	46c0      	nop			@ (mov r8, r8)
 8007c1c:	0800b3d6 	.word	0x0800b3d6
 8007c20:	0800b3e7 	.word	0x0800b3e7

08007c24 <std>:
 8007c24:	2300      	movs	r3, #0
 8007c26:	b510      	push	{r4, lr}
 8007c28:	0004      	movs	r4, r0
 8007c2a:	6003      	str	r3, [r0, #0]
 8007c2c:	6043      	str	r3, [r0, #4]
 8007c2e:	6083      	str	r3, [r0, #8]
 8007c30:	8181      	strh	r1, [r0, #12]
 8007c32:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c34:	81c2      	strh	r2, [r0, #14]
 8007c36:	6103      	str	r3, [r0, #16]
 8007c38:	6143      	str	r3, [r0, #20]
 8007c3a:	6183      	str	r3, [r0, #24]
 8007c3c:	0019      	movs	r1, r3
 8007c3e:	2208      	movs	r2, #8
 8007c40:	305c      	adds	r0, #92	@ 0x5c
 8007c42:	f000 f933 	bl	8007eac <memset>
 8007c46:	4b0b      	ldr	r3, [pc, #44]	@ (8007c74 <std+0x50>)
 8007c48:	6224      	str	r4, [r4, #32]
 8007c4a:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c78 <std+0x54>)
 8007c4e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c50:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <std+0x58>)
 8007c52:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c54:	4b0a      	ldr	r3, [pc, #40]	@ (8007c80 <std+0x5c>)
 8007c56:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c58:	4b0a      	ldr	r3, [pc, #40]	@ (8007c84 <std+0x60>)
 8007c5a:	429c      	cmp	r4, r3
 8007c5c:	d005      	beq.n	8007c6a <std+0x46>
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <std+0x64>)
 8007c60:	429c      	cmp	r4, r3
 8007c62:	d002      	beq.n	8007c6a <std+0x46>
 8007c64:	4b09      	ldr	r3, [pc, #36]	@ (8007c8c <std+0x68>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	d103      	bne.n	8007c72 <std+0x4e>
 8007c6a:	0020      	movs	r0, r4
 8007c6c:	3058      	adds	r0, #88	@ 0x58
 8007c6e:	f000 f9a1 	bl	8007fb4 <__retarget_lock_init_recursive>
 8007c72:	bd10      	pop	{r4, pc}
 8007c74:	08007df1 	.word	0x08007df1
 8007c78:	08007e19 	.word	0x08007e19
 8007c7c:	08007e51 	.word	0x08007e51
 8007c80:	08007e7d 	.word	0x08007e7d
 8007c84:	20000764 	.word	0x20000764
 8007c88:	200007cc 	.word	0x200007cc
 8007c8c:	20000834 	.word	0x20000834

08007c90 <stdio_exit_handler>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	4a03      	ldr	r2, [pc, #12]	@ (8007ca0 <stdio_exit_handler+0x10>)
 8007c94:	4903      	ldr	r1, [pc, #12]	@ (8007ca4 <stdio_exit_handler+0x14>)
 8007c96:	4804      	ldr	r0, [pc, #16]	@ (8007ca8 <stdio_exit_handler+0x18>)
 8007c98:	f000 f86c 	bl	8007d74 <_fwalk_sglue>
 8007c9c:	bd10      	pop	{r4, pc}
 8007c9e:	46c0      	nop			@ (mov r8, r8)
 8007ca0:	20000014 	.word	0x20000014
 8007ca4:	080099d9 	.word	0x080099d9
 8007ca8:	20000024 	.word	0x20000024

08007cac <cleanup_stdio>:
 8007cac:	6841      	ldr	r1, [r0, #4]
 8007cae:	4b0b      	ldr	r3, [pc, #44]	@ (8007cdc <cleanup_stdio+0x30>)
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	0004      	movs	r4, r0
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d001      	beq.n	8007cbc <cleanup_stdio+0x10>
 8007cb8:	f001 fe8e 	bl	80099d8 <_fflush_r>
 8007cbc:	68a1      	ldr	r1, [r4, #8]
 8007cbe:	4b08      	ldr	r3, [pc, #32]	@ (8007ce0 <cleanup_stdio+0x34>)
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	d002      	beq.n	8007cca <cleanup_stdio+0x1e>
 8007cc4:	0020      	movs	r0, r4
 8007cc6:	f001 fe87 	bl	80099d8 <_fflush_r>
 8007cca:	68e1      	ldr	r1, [r4, #12]
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <cleanup_stdio+0x38>)
 8007cce:	4299      	cmp	r1, r3
 8007cd0:	d002      	beq.n	8007cd8 <cleanup_stdio+0x2c>
 8007cd2:	0020      	movs	r0, r4
 8007cd4:	f001 fe80 	bl	80099d8 <_fflush_r>
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	20000764 	.word	0x20000764
 8007ce0:	200007cc 	.word	0x200007cc
 8007ce4:	20000834 	.word	0x20000834

08007ce8 <global_stdio_init.part.0>:
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	4b09      	ldr	r3, [pc, #36]	@ (8007d10 <global_stdio_init.part.0+0x28>)
 8007cec:	4a09      	ldr	r2, [pc, #36]	@ (8007d14 <global_stdio_init.part.0+0x2c>)
 8007cee:	2104      	movs	r1, #4
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	4809      	ldr	r0, [pc, #36]	@ (8007d18 <global_stdio_init.part.0+0x30>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f7ff ff95 	bl	8007c24 <std>
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	2109      	movs	r1, #9
 8007cfe:	4807      	ldr	r0, [pc, #28]	@ (8007d1c <global_stdio_init.part.0+0x34>)
 8007d00:	f7ff ff90 	bl	8007c24 <std>
 8007d04:	2202      	movs	r2, #2
 8007d06:	2112      	movs	r1, #18
 8007d08:	4805      	ldr	r0, [pc, #20]	@ (8007d20 <global_stdio_init.part.0+0x38>)
 8007d0a:	f7ff ff8b 	bl	8007c24 <std>
 8007d0e:	bd10      	pop	{r4, pc}
 8007d10:	2000089c 	.word	0x2000089c
 8007d14:	08007c91 	.word	0x08007c91
 8007d18:	20000764 	.word	0x20000764
 8007d1c:	200007cc 	.word	0x200007cc
 8007d20:	20000834 	.word	0x20000834

08007d24 <__sfp_lock_acquire>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4802      	ldr	r0, [pc, #8]	@ (8007d30 <__sfp_lock_acquire+0xc>)
 8007d28:	f000 f945 	bl	8007fb6 <__retarget_lock_acquire_recursive>
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	46c0      	nop			@ (mov r8, r8)
 8007d30:	200008a5 	.word	0x200008a5

08007d34 <__sfp_lock_release>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4802      	ldr	r0, [pc, #8]	@ (8007d40 <__sfp_lock_release+0xc>)
 8007d38:	f000 f93e 	bl	8007fb8 <__retarget_lock_release_recursive>
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	46c0      	nop			@ (mov r8, r8)
 8007d40:	200008a5 	.word	0x200008a5

08007d44 <__sinit>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	0004      	movs	r4, r0
 8007d48:	f7ff ffec 	bl	8007d24 <__sfp_lock_acquire>
 8007d4c:	6a23      	ldr	r3, [r4, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <__sinit+0x14>
 8007d52:	f7ff ffef 	bl	8007d34 <__sfp_lock_release>
 8007d56:	bd10      	pop	{r4, pc}
 8007d58:	4b04      	ldr	r3, [pc, #16]	@ (8007d6c <__sinit+0x28>)
 8007d5a:	6223      	str	r3, [r4, #32]
 8007d5c:	4b04      	ldr	r3, [pc, #16]	@ (8007d70 <__sinit+0x2c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f6      	bne.n	8007d52 <__sinit+0xe>
 8007d64:	f7ff ffc0 	bl	8007ce8 <global_stdio_init.part.0>
 8007d68:	e7f3      	b.n	8007d52 <__sinit+0xe>
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	08007cad 	.word	0x08007cad
 8007d70:	2000089c 	.word	0x2000089c

08007d74 <_fwalk_sglue>:
 8007d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d76:	0014      	movs	r4, r2
 8007d78:	2600      	movs	r6, #0
 8007d7a:	9000      	str	r0, [sp, #0]
 8007d7c:	9101      	str	r1, [sp, #4]
 8007d7e:	68a5      	ldr	r5, [r4, #8]
 8007d80:	6867      	ldr	r7, [r4, #4]
 8007d82:	3f01      	subs	r7, #1
 8007d84:	d504      	bpl.n	8007d90 <_fwalk_sglue+0x1c>
 8007d86:	6824      	ldr	r4, [r4, #0]
 8007d88:	2c00      	cmp	r4, #0
 8007d8a:	d1f8      	bne.n	8007d7e <_fwalk_sglue+0xa>
 8007d8c:	0030      	movs	r0, r6
 8007d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d90:	89ab      	ldrh	r3, [r5, #12]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d908      	bls.n	8007da8 <_fwalk_sglue+0x34>
 8007d96:	220e      	movs	r2, #14
 8007d98:	5eab      	ldrsh	r3, [r5, r2]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	d004      	beq.n	8007da8 <_fwalk_sglue+0x34>
 8007d9e:	0029      	movs	r1, r5
 8007da0:	9800      	ldr	r0, [sp, #0]
 8007da2:	9b01      	ldr	r3, [sp, #4]
 8007da4:	4798      	blx	r3
 8007da6:	4306      	orrs	r6, r0
 8007da8:	3568      	adds	r5, #104	@ 0x68
 8007daa:	e7ea      	b.n	8007d82 <_fwalk_sglue+0xe>

08007dac <siprintf>:
 8007dac:	b40e      	push	{r1, r2, r3}
 8007dae:	b510      	push	{r4, lr}
 8007db0:	2400      	movs	r4, #0
 8007db2:	490c      	ldr	r1, [pc, #48]	@ (8007de4 <siprintf+0x38>)
 8007db4:	b09d      	sub	sp, #116	@ 0x74
 8007db6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007db8:	9002      	str	r0, [sp, #8]
 8007dba:	9006      	str	r0, [sp, #24]
 8007dbc:	9107      	str	r1, [sp, #28]
 8007dbe:	9104      	str	r1, [sp, #16]
 8007dc0:	4809      	ldr	r0, [pc, #36]	@ (8007de8 <siprintf+0x3c>)
 8007dc2:	490a      	ldr	r1, [pc, #40]	@ (8007dec <siprintf+0x40>)
 8007dc4:	cb04      	ldmia	r3!, {r2}
 8007dc6:	9105      	str	r1, [sp, #20]
 8007dc8:	6800      	ldr	r0, [r0, #0]
 8007dca:	a902      	add	r1, sp, #8
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007dd0:	f001 fc7e 	bl	80096d0 <_svfiprintf_r>
 8007dd4:	9b02      	ldr	r3, [sp, #8]
 8007dd6:	701c      	strb	r4, [r3, #0]
 8007dd8:	b01d      	add	sp, #116	@ 0x74
 8007dda:	bc10      	pop	{r4}
 8007ddc:	bc08      	pop	{r3}
 8007dde:	b003      	add	sp, #12
 8007de0:	4718      	bx	r3
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	7fffffff 	.word	0x7fffffff
 8007de8:	20000020 	.word	0x20000020
 8007dec:	ffff0208 	.word	0xffff0208

08007df0 <__sread>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	000c      	movs	r4, r1
 8007df4:	250e      	movs	r5, #14
 8007df6:	5f49      	ldrsh	r1, [r1, r5]
 8007df8:	f000 f88a 	bl	8007f10 <_read_r>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	db03      	blt.n	8007e08 <__sread+0x18>
 8007e00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007e02:	181b      	adds	r3, r3, r0
 8007e04:	6563      	str	r3, [r4, #84]	@ 0x54
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	4a02      	ldr	r2, [pc, #8]	@ (8007e14 <__sread+0x24>)
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	e7f9      	b.n	8007e06 <__sread+0x16>
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	ffffefff 	.word	0xffffefff

08007e18 <__swrite>:
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1a:	001f      	movs	r7, r3
 8007e1c:	898b      	ldrh	r3, [r1, #12]
 8007e1e:	0005      	movs	r5, r0
 8007e20:	000c      	movs	r4, r1
 8007e22:	0016      	movs	r6, r2
 8007e24:	05db      	lsls	r3, r3, #23
 8007e26:	d505      	bpl.n	8007e34 <__swrite+0x1c>
 8007e28:	230e      	movs	r3, #14
 8007e2a:	5ec9      	ldrsh	r1, [r1, r3]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2302      	movs	r3, #2
 8007e30:	f000 f85a 	bl	8007ee8 <_lseek_r>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	4a05      	ldr	r2, [pc, #20]	@ (8007e4c <__swrite+0x34>)
 8007e38:	0028      	movs	r0, r5
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	0032      	movs	r2, r6
 8007e40:	230e      	movs	r3, #14
 8007e42:	5ee1      	ldrsh	r1, [r4, r3]
 8007e44:	003b      	movs	r3, r7
 8007e46:	f000 f877 	bl	8007f38 <_write_r>
 8007e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e4c:	ffffefff 	.word	0xffffefff

08007e50 <__sseek>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	000c      	movs	r4, r1
 8007e54:	250e      	movs	r5, #14
 8007e56:	5f49      	ldrsh	r1, [r1, r5]
 8007e58:	f000 f846 	bl	8007ee8 <_lseek_r>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	1c42      	adds	r2, r0, #1
 8007e60:	d103      	bne.n	8007e6a <__sseek+0x1a>
 8007e62:	4a05      	ldr	r2, [pc, #20]	@ (8007e78 <__sseek+0x28>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	2280      	movs	r2, #128	@ 0x80
 8007e6c:	0152      	lsls	r2, r2, #5
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	81a3      	strh	r3, [r4, #12]
 8007e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e74:	e7f8      	b.n	8007e68 <__sseek+0x18>
 8007e76:	46c0      	nop			@ (mov r8, r8)
 8007e78:	ffffefff 	.word	0xffffefff

08007e7c <__sclose>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	230e      	movs	r3, #14
 8007e80:	5ec9      	ldrsh	r1, [r1, r3]
 8007e82:	f000 f81f 	bl	8007ec4 <_close_r>
 8007e86:	bd10      	pop	{r4, pc}

08007e88 <memmove>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	4288      	cmp	r0, r1
 8007e8c:	d902      	bls.n	8007e94 <memmove+0xc>
 8007e8e:	188b      	adds	r3, r1, r2
 8007e90:	4298      	cmp	r0, r3
 8007e92:	d308      	bcc.n	8007ea6 <memmove+0x1e>
 8007e94:	2300      	movs	r3, #0
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d007      	beq.n	8007eaa <memmove+0x22>
 8007e9a:	5ccc      	ldrb	r4, [r1, r3]
 8007e9c:	54c4      	strb	r4, [r0, r3]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	e7f9      	b.n	8007e96 <memmove+0xe>
 8007ea2:	5c8b      	ldrb	r3, [r1, r2]
 8007ea4:	5483      	strb	r3, [r0, r2]
 8007ea6:	3a01      	subs	r2, #1
 8007ea8:	d2fb      	bcs.n	8007ea2 <memmove+0x1a>
 8007eaa:	bd10      	pop	{r4, pc}

08007eac <memset>:
 8007eac:	0003      	movs	r3, r0
 8007eae:	1882      	adds	r2, r0, r2
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d100      	bne.n	8007eb6 <memset+0xa>
 8007eb4:	4770      	bx	lr
 8007eb6:	7019      	strb	r1, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	e7f9      	b.n	8007eb0 <memset+0x4>

08007ebc <_localeconv_r>:
 8007ebc:	4800      	ldr	r0, [pc, #0]	@ (8007ec0 <_localeconv_r+0x4>)
 8007ebe:	4770      	bx	lr
 8007ec0:	20000160 	.word	0x20000160

08007ec4 <_close_r>:
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	4d06      	ldr	r5, [pc, #24]	@ (8007ee4 <_close_r+0x20>)
 8007eca:	0004      	movs	r4, r0
 8007ecc:	0008      	movs	r0, r1
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	f7fb fd45 	bl	800395e <_close>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d103      	bne.n	8007ee0 <_close_r+0x1c>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d000      	beq.n	8007ee0 <_close_r+0x1c>
 8007ede:	6023      	str	r3, [r4, #0]
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	46c0      	nop			@ (mov r8, r8)
 8007ee4:	200008a0 	.word	0x200008a0

08007ee8 <_lseek_r>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	0004      	movs	r4, r0
 8007eec:	0008      	movs	r0, r1
 8007eee:	0011      	movs	r1, r2
 8007ef0:	001a      	movs	r2, r3
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4d05      	ldr	r5, [pc, #20]	@ (8007f0c <_lseek_r+0x24>)
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	f7fb fd52 	bl	80039a0 <_lseek>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d103      	bne.n	8007f08 <_lseek_r+0x20>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d000      	beq.n	8007f08 <_lseek_r+0x20>
 8007f06:	6023      	str	r3, [r4, #0]
 8007f08:	bd70      	pop	{r4, r5, r6, pc}
 8007f0a:	46c0      	nop			@ (mov r8, r8)
 8007f0c:	200008a0 	.word	0x200008a0

08007f10 <_read_r>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	0004      	movs	r4, r0
 8007f14:	0008      	movs	r0, r1
 8007f16:	0011      	movs	r1, r2
 8007f18:	001a      	movs	r2, r3
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4d05      	ldr	r5, [pc, #20]	@ (8007f34 <_read_r+0x24>)
 8007f1e:	602b      	str	r3, [r5, #0]
 8007f20:	f7fb fce4 	bl	80038ec <_read>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	d103      	bne.n	8007f30 <_read_r+0x20>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d000      	beq.n	8007f30 <_read_r+0x20>
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	bd70      	pop	{r4, r5, r6, pc}
 8007f32:	46c0      	nop			@ (mov r8, r8)
 8007f34:	200008a0 	.word	0x200008a0

08007f38 <_write_r>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	0004      	movs	r4, r0
 8007f3c:	0008      	movs	r0, r1
 8007f3e:	0011      	movs	r1, r2
 8007f40:	001a      	movs	r2, r3
 8007f42:	2300      	movs	r3, #0
 8007f44:	4d05      	ldr	r5, [pc, #20]	@ (8007f5c <_write_r+0x24>)
 8007f46:	602b      	str	r3, [r5, #0]
 8007f48:	f7fb fced 	bl	8003926 <_write>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d103      	bne.n	8007f58 <_write_r+0x20>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d000      	beq.n	8007f58 <_write_r+0x20>
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	46c0      	nop			@ (mov r8, r8)
 8007f5c:	200008a0 	.word	0x200008a0

08007f60 <__errno>:
 8007f60:	4b01      	ldr	r3, [pc, #4]	@ (8007f68 <__errno+0x8>)
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	4770      	bx	lr
 8007f66:	46c0      	nop			@ (mov r8, r8)
 8007f68:	20000020 	.word	0x20000020

08007f6c <__libc_init_array>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	2600      	movs	r6, #0
 8007f70:	4c0c      	ldr	r4, [pc, #48]	@ (8007fa4 <__libc_init_array+0x38>)
 8007f72:	4d0d      	ldr	r5, [pc, #52]	@ (8007fa8 <__libc_init_array+0x3c>)
 8007f74:	1b64      	subs	r4, r4, r5
 8007f76:	10a4      	asrs	r4, r4, #2
 8007f78:	42a6      	cmp	r6, r4
 8007f7a:	d109      	bne.n	8007f90 <__libc_init_array+0x24>
 8007f7c:	2600      	movs	r6, #0
 8007f7e:	f002 facd 	bl	800a51c <_init>
 8007f82:	4c0a      	ldr	r4, [pc, #40]	@ (8007fac <__libc_init_array+0x40>)
 8007f84:	4d0a      	ldr	r5, [pc, #40]	@ (8007fb0 <__libc_init_array+0x44>)
 8007f86:	1b64      	subs	r4, r4, r5
 8007f88:	10a4      	asrs	r4, r4, #2
 8007f8a:	42a6      	cmp	r6, r4
 8007f8c:	d105      	bne.n	8007f9a <__libc_init_array+0x2e>
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	00b3      	lsls	r3, r6, #2
 8007f92:	58eb      	ldr	r3, [r5, r3]
 8007f94:	4798      	blx	r3
 8007f96:	3601      	adds	r6, #1
 8007f98:	e7ee      	b.n	8007f78 <__libc_init_array+0xc>
 8007f9a:	00b3      	lsls	r3, r6, #2
 8007f9c:	58eb      	ldr	r3, [r5, r3]
 8007f9e:	4798      	blx	r3
 8007fa0:	3601      	adds	r6, #1
 8007fa2:	e7f2      	b.n	8007f8a <__libc_init_array+0x1e>
 8007fa4:	0800b744 	.word	0x0800b744
 8007fa8:	0800b744 	.word	0x0800b744
 8007fac:	0800b748 	.word	0x0800b748
 8007fb0:	0800b744 	.word	0x0800b744

08007fb4 <__retarget_lock_init_recursive>:
 8007fb4:	4770      	bx	lr

08007fb6 <__retarget_lock_acquire_recursive>:
 8007fb6:	4770      	bx	lr

08007fb8 <__retarget_lock_release_recursive>:
 8007fb8:	4770      	bx	lr

08007fba <memchr>:
 8007fba:	b2c9      	uxtb	r1, r1
 8007fbc:	1882      	adds	r2, r0, r2
 8007fbe:	4290      	cmp	r0, r2
 8007fc0:	d101      	bne.n	8007fc6 <memchr+0xc>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	4770      	bx	lr
 8007fc6:	7803      	ldrb	r3, [r0, #0]
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	d0fb      	beq.n	8007fc4 <memchr+0xa>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	e7f6      	b.n	8007fbe <memchr+0x4>

08007fd0 <memcpy>:
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d100      	bne.n	8007fda <memcpy+0xa>
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	5ccc      	ldrb	r4, [r1, r3]
 8007fdc:	54c4      	strb	r4, [r0, r3]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	e7f8      	b.n	8007fd4 <memcpy+0x4>

08007fe2 <quorem>:
 8007fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fe4:	6903      	ldr	r3, [r0, #16]
 8007fe6:	690c      	ldr	r4, [r1, #16]
 8007fe8:	b089      	sub	sp, #36	@ 0x24
 8007fea:	9003      	str	r0, [sp, #12]
 8007fec:	9106      	str	r1, [sp, #24]
 8007fee:	2000      	movs	r0, #0
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	db63      	blt.n	80080bc <quorem+0xda>
 8007ff4:	000b      	movs	r3, r1
 8007ff6:	3c01      	subs	r4, #1
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	00a5      	lsls	r5, r4, #2
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	195b      	adds	r3, r3, r5
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	3314      	adds	r3, #20
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	195d      	adds	r5, r3, r5
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	682f      	ldr	r7, [r5, #0]
 800800e:	681e      	ldr	r6, [r3, #0]
 8008010:	0038      	movs	r0, r7
 8008012:	3601      	adds	r6, #1
 8008014:	0031      	movs	r1, r6
 8008016:	f7f8 f88f 	bl	8000138 <__udivsi3>
 800801a:	9002      	str	r0, [sp, #8]
 800801c:	42b7      	cmp	r7, r6
 800801e:	d327      	bcc.n	8008070 <quorem+0x8e>
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	2700      	movs	r7, #0
 8008024:	469c      	mov	ip, r3
 8008026:	9e01      	ldr	r6, [sp, #4]
 8008028:	9707      	str	r7, [sp, #28]
 800802a:	4662      	mov	r2, ip
 800802c:	ca08      	ldmia	r2!, {r3}
 800802e:	6830      	ldr	r0, [r6, #0]
 8008030:	4694      	mov	ip, r2
 8008032:	9a02      	ldr	r2, [sp, #8]
 8008034:	b299      	uxth	r1, r3
 8008036:	4351      	muls	r1, r2
 8008038:	0c1b      	lsrs	r3, r3, #16
 800803a:	4353      	muls	r3, r2
 800803c:	19c9      	adds	r1, r1, r7
 800803e:	0c0a      	lsrs	r2, r1, #16
 8008040:	189b      	adds	r3, r3, r2
 8008042:	b289      	uxth	r1, r1
 8008044:	b282      	uxth	r2, r0
 8008046:	1a52      	subs	r2, r2, r1
 8008048:	9907      	ldr	r1, [sp, #28]
 800804a:	0c1f      	lsrs	r7, r3, #16
 800804c:	1852      	adds	r2, r2, r1
 800804e:	0c00      	lsrs	r0, r0, #16
 8008050:	b29b      	uxth	r3, r3
 8008052:	1411      	asrs	r1, r2, #16
 8008054:	1ac3      	subs	r3, r0, r3
 8008056:	185b      	adds	r3, r3, r1
 8008058:	1419      	asrs	r1, r3, #16
 800805a:	b292      	uxth	r2, r2
 800805c:	041b      	lsls	r3, r3, #16
 800805e:	431a      	orrs	r2, r3
 8008060:	9b05      	ldr	r3, [sp, #20]
 8008062:	9107      	str	r1, [sp, #28]
 8008064:	c604      	stmia	r6!, {r2}
 8008066:	4563      	cmp	r3, ip
 8008068:	d2df      	bcs.n	800802a <quorem+0x48>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02b      	beq.n	80080c8 <quorem+0xe6>
 8008070:	9906      	ldr	r1, [sp, #24]
 8008072:	9803      	ldr	r0, [sp, #12]
 8008074:	f001 f9b6 	bl	80093e4 <__mcmp>
 8008078:	2800      	cmp	r0, #0
 800807a:	db1e      	blt.n	80080ba <quorem+0xd8>
 800807c:	2600      	movs	r6, #0
 800807e:	9d01      	ldr	r5, [sp, #4]
 8008080:	9904      	ldr	r1, [sp, #16]
 8008082:	c901      	ldmia	r1!, {r0}
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b287      	uxth	r7, r0
 8008088:	b29a      	uxth	r2, r3
 800808a:	1bd2      	subs	r2, r2, r7
 800808c:	1992      	adds	r2, r2, r6
 800808e:	0c00      	lsrs	r0, r0, #16
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	1a1b      	subs	r3, r3, r0
 8008094:	1410      	asrs	r0, r2, #16
 8008096:	181b      	adds	r3, r3, r0
 8008098:	141e      	asrs	r6, r3, #16
 800809a:	b292      	uxth	r2, r2
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	431a      	orrs	r2, r3
 80080a0:	9b05      	ldr	r3, [sp, #20]
 80080a2:	c504      	stmia	r5!, {r2}
 80080a4:	428b      	cmp	r3, r1
 80080a6:	d2ec      	bcs.n	8008082 <quorem+0xa0>
 80080a8:	9a01      	ldr	r2, [sp, #4]
 80080aa:	00a3      	lsls	r3, r4, #2
 80080ac:	18d3      	adds	r3, r2, r3
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	2a00      	cmp	r2, #0
 80080b2:	d014      	beq.n	80080de <quorem+0xfc>
 80080b4:	9b02      	ldr	r3, [sp, #8]
 80080b6:	3301      	adds	r3, #1
 80080b8:	9302      	str	r3, [sp, #8]
 80080ba:	9802      	ldr	r0, [sp, #8]
 80080bc:	b009      	add	sp, #36	@ 0x24
 80080be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d104      	bne.n	80080d0 <quorem+0xee>
 80080c6:	3c01      	subs	r4, #1
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	3d04      	subs	r5, #4
 80080cc:	42ab      	cmp	r3, r5
 80080ce:	d3f7      	bcc.n	80080c0 <quorem+0xde>
 80080d0:	9b03      	ldr	r3, [sp, #12]
 80080d2:	611c      	str	r4, [r3, #16]
 80080d4:	e7cc      	b.n	8008070 <quorem+0x8e>
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d104      	bne.n	80080e6 <quorem+0x104>
 80080dc:	3c01      	subs	r4, #1
 80080de:	9a01      	ldr	r2, [sp, #4]
 80080e0:	3b04      	subs	r3, #4
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d3f7      	bcc.n	80080d6 <quorem+0xf4>
 80080e6:	9b03      	ldr	r3, [sp, #12]
 80080e8:	611c      	str	r4, [r3, #16]
 80080ea:	e7e3      	b.n	80080b4 <quorem+0xd2>

080080ec <_dtoa_r>:
 80080ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ee:	0014      	movs	r4, r2
 80080f0:	001d      	movs	r5, r3
 80080f2:	69c6      	ldr	r6, [r0, #28]
 80080f4:	b09d      	sub	sp, #116	@ 0x74
 80080f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80080f8:	950b      	str	r5, [sp, #44]	@ 0x2c
 80080fa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80080fc:	9003      	str	r0, [sp, #12]
 80080fe:	2e00      	cmp	r6, #0
 8008100:	d10f      	bne.n	8008122 <_dtoa_r+0x36>
 8008102:	2010      	movs	r0, #16
 8008104:	f000 fe2c 	bl	8008d60 <malloc>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1e02      	subs	r2, r0, #0
 800810c:	61d8      	str	r0, [r3, #28]
 800810e:	d104      	bne.n	800811a <_dtoa_r+0x2e>
 8008110:	21ef      	movs	r1, #239	@ 0xef
 8008112:	4bc7      	ldr	r3, [pc, #796]	@ (8008430 <_dtoa_r+0x344>)
 8008114:	48c7      	ldr	r0, [pc, #796]	@ (8008434 <_dtoa_r+0x348>)
 8008116:	f001 fc9d 	bl	8009a54 <__assert_func>
 800811a:	6046      	str	r6, [r0, #4]
 800811c:	6086      	str	r6, [r0, #8]
 800811e:	6006      	str	r6, [r0, #0]
 8008120:	60c6      	str	r6, [r0, #12]
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	6819      	ldr	r1, [r3, #0]
 8008128:	2900      	cmp	r1, #0
 800812a:	d00b      	beq.n	8008144 <_dtoa_r+0x58>
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	2301      	movs	r3, #1
 8008130:	4093      	lsls	r3, r2
 8008132:	604a      	str	r2, [r1, #4]
 8008134:	608b      	str	r3, [r1, #8]
 8008136:	9803      	ldr	r0, [sp, #12]
 8008138:	f000 ff12 	bl	8008f60 <_Bfree>
 800813c:	2200      	movs	r2, #0
 800813e:	9b03      	ldr	r3, [sp, #12]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	2d00      	cmp	r5, #0
 8008146:	da1e      	bge.n	8008186 <_dtoa_r+0x9a>
 8008148:	2301      	movs	r3, #1
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	006b      	lsls	r3, r5, #1
 800814e:	085b      	lsrs	r3, r3, #1
 8008150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008152:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008154:	4bb8      	ldr	r3, [pc, #736]	@ (8008438 <_dtoa_r+0x34c>)
 8008156:	4ab8      	ldr	r2, [pc, #736]	@ (8008438 <_dtoa_r+0x34c>)
 8008158:	403b      	ands	r3, r7
 800815a:	4293      	cmp	r3, r2
 800815c:	d116      	bne.n	800818c <_dtoa_r+0xa0>
 800815e:	4bb7      	ldr	r3, [pc, #732]	@ (800843c <_dtoa_r+0x350>)
 8008160:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	033b      	lsls	r3, r7, #12
 8008166:	0b1b      	lsrs	r3, r3, #12
 8008168:	4323      	orrs	r3, r4
 800816a:	d101      	bne.n	8008170 <_dtoa_r+0x84>
 800816c:	f000 fd80 	bl	8008c70 <_dtoa_r+0xb84>
 8008170:	4bb3      	ldr	r3, [pc, #716]	@ (8008440 <_dtoa_r+0x354>)
 8008172:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	2a00      	cmp	r2, #0
 8008178:	d002      	beq.n	8008180 <_dtoa_r+0x94>
 800817a:	4bb2      	ldr	r3, [pc, #712]	@ (8008444 <_dtoa_r+0x358>)
 800817c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	9808      	ldr	r0, [sp, #32]
 8008182:	b01d      	add	sp, #116	@ 0x74
 8008184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008186:	2300      	movs	r3, #0
 8008188:	603b      	str	r3, [r7, #0]
 800818a:	e7e2      	b.n	8008152 <_dtoa_r+0x66>
 800818c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800818e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008190:	9212      	str	r2, [sp, #72]	@ 0x48
 8008192:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008194:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008196:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008198:	2200      	movs	r2, #0
 800819a:	2300      	movs	r3, #0
 800819c:	f7f8 f952 	bl	8000444 <__aeabi_dcmpeq>
 80081a0:	1e06      	subs	r6, r0, #0
 80081a2:	d00b      	beq.n	80081bc <_dtoa_r+0xd0>
 80081a4:	2301      	movs	r3, #1
 80081a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <_dtoa_r+0xca>
 80081b0:	4ba5      	ldr	r3, [pc, #660]	@ (8008448 <_dtoa_r+0x35c>)
 80081b2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	4ba5      	ldr	r3, [pc, #660]	@ (800844c <_dtoa_r+0x360>)
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	e7e1      	b.n	8008180 <_dtoa_r+0x94>
 80081bc:	ab1a      	add	r3, sp, #104	@ 0x68
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	9803      	ldr	r0, [sp, #12]
 80081c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081ca:	f001 f9c1 	bl	8009550 <__d2b>
 80081ce:	007a      	lsls	r2, r7, #1
 80081d0:	9005      	str	r0, [sp, #20]
 80081d2:	0d52      	lsrs	r2, r2, #21
 80081d4:	d100      	bne.n	80081d8 <_dtoa_r+0xec>
 80081d6:	e07b      	b.n	80082d0 <_dtoa_r+0x1e4>
 80081d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081da:	9618      	str	r6, [sp, #96]	@ 0x60
 80081dc:	0319      	lsls	r1, r3, #12
 80081de:	4b9c      	ldr	r3, [pc, #624]	@ (8008450 <_dtoa_r+0x364>)
 80081e0:	0b09      	lsrs	r1, r1, #12
 80081e2:	430b      	orrs	r3, r1
 80081e4:	499b      	ldr	r1, [pc, #620]	@ (8008454 <_dtoa_r+0x368>)
 80081e6:	1857      	adds	r7, r2, r1
 80081e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80081ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80081ec:	0019      	movs	r1, r3
 80081ee:	2200      	movs	r2, #0
 80081f0:	4b99      	ldr	r3, [pc, #612]	@ (8008458 <_dtoa_r+0x36c>)
 80081f2:	f7f9 ffe7 	bl	80021c4 <__aeabi_dsub>
 80081f6:	4a99      	ldr	r2, [pc, #612]	@ (800845c <_dtoa_r+0x370>)
 80081f8:	4b99      	ldr	r3, [pc, #612]	@ (8008460 <_dtoa_r+0x374>)
 80081fa:	f7f9 fcfd 	bl	8001bf8 <__aeabi_dmul>
 80081fe:	4a99      	ldr	r2, [pc, #612]	@ (8008464 <_dtoa_r+0x378>)
 8008200:	4b99      	ldr	r3, [pc, #612]	@ (8008468 <_dtoa_r+0x37c>)
 8008202:	f7f8 fcf9 	bl	8000bf8 <__aeabi_dadd>
 8008206:	0004      	movs	r4, r0
 8008208:	0038      	movs	r0, r7
 800820a:	000d      	movs	r5, r1
 800820c:	f7fa fc42 	bl	8002a94 <__aeabi_i2d>
 8008210:	4a96      	ldr	r2, [pc, #600]	@ (800846c <_dtoa_r+0x380>)
 8008212:	4b97      	ldr	r3, [pc, #604]	@ (8008470 <_dtoa_r+0x384>)
 8008214:	f7f9 fcf0 	bl	8001bf8 <__aeabi_dmul>
 8008218:	0002      	movs	r2, r0
 800821a:	000b      	movs	r3, r1
 800821c:	0020      	movs	r0, r4
 800821e:	0029      	movs	r1, r5
 8008220:	f7f8 fcea 	bl	8000bf8 <__aeabi_dadd>
 8008224:	0004      	movs	r4, r0
 8008226:	000d      	movs	r5, r1
 8008228:	f7fa fbf8 	bl	8002a1c <__aeabi_d2iz>
 800822c:	2200      	movs	r2, #0
 800822e:	9004      	str	r0, [sp, #16]
 8008230:	2300      	movs	r3, #0
 8008232:	0020      	movs	r0, r4
 8008234:	0029      	movs	r1, r5
 8008236:	f7f8 f90b 	bl	8000450 <__aeabi_dcmplt>
 800823a:	2800      	cmp	r0, #0
 800823c:	d00b      	beq.n	8008256 <_dtoa_r+0x16a>
 800823e:	9804      	ldr	r0, [sp, #16]
 8008240:	f7fa fc28 	bl	8002a94 <__aeabi_i2d>
 8008244:	002b      	movs	r3, r5
 8008246:	0022      	movs	r2, r4
 8008248:	f7f8 f8fc 	bl	8000444 <__aeabi_dcmpeq>
 800824c:	4243      	negs	r3, r0
 800824e:	4158      	adcs	r0, r3
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	1a1b      	subs	r3, r3, r0
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	2301      	movs	r3, #1
 8008258:	9315      	str	r3, [sp, #84]	@ 0x54
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	2b16      	cmp	r3, #22
 800825e:	d810      	bhi.n	8008282 <_dtoa_r+0x196>
 8008260:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008262:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008264:	9a04      	ldr	r2, [sp, #16]
 8008266:	4b83      	ldr	r3, [pc, #524]	@ (8008474 <_dtoa_r+0x388>)
 8008268:	00d2      	lsls	r2, r2, #3
 800826a:	189b      	adds	r3, r3, r2
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f7f8 f8ee 	bl	8000450 <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	d047      	beq.n	8008308 <_dtoa_r+0x21c>
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	3b01      	subs	r3, #1
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	2300      	movs	r3, #0
 8008280:	9315      	str	r3, [sp, #84]	@ 0x54
 8008282:	2200      	movs	r2, #0
 8008284:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008286:	9206      	str	r2, [sp, #24]
 8008288:	1bdb      	subs	r3, r3, r7
 800828a:	1e5a      	subs	r2, r3, #1
 800828c:	d53e      	bpl.n	800830c <_dtoa_r+0x220>
 800828e:	2201      	movs	r2, #1
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	9306      	str	r3, [sp, #24]
 8008294:	2300      	movs	r3, #0
 8008296:	930d      	str	r3, [sp, #52]	@ 0x34
 8008298:	9b04      	ldr	r3, [sp, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	db38      	blt.n	8008310 <_dtoa_r+0x224>
 800829e:	9a04      	ldr	r2, [sp, #16]
 80082a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082a2:	4694      	mov	ip, r2
 80082a4:	4463      	add	r3, ip
 80082a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80082a8:	2300      	movs	r3, #0
 80082aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80082ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80082b0:	2401      	movs	r4, #1
 80082b2:	2b09      	cmp	r3, #9
 80082b4:	d862      	bhi.n	800837c <_dtoa_r+0x290>
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	dd02      	ble.n	80082c0 <_dtoa_r+0x1d4>
 80082ba:	2400      	movs	r4, #0
 80082bc:	3b04      	subs	r3, #4
 80082be:	9322      	str	r3, [sp, #136]	@ 0x88
 80082c0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80082c2:	1e98      	subs	r0, r3, #2
 80082c4:	2803      	cmp	r0, #3
 80082c6:	d863      	bhi.n	8008390 <_dtoa_r+0x2a4>
 80082c8:	f7f7 ff22 	bl	8000110 <__gnu_thumb1_case_uqi>
 80082cc:	2b385654 	.word	0x2b385654
 80082d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80082d2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80082d4:	18f6      	adds	r6, r6, r3
 80082d6:	4b68      	ldr	r3, [pc, #416]	@ (8008478 <_dtoa_r+0x38c>)
 80082d8:	18f2      	adds	r2, r6, r3
 80082da:	2a20      	cmp	r2, #32
 80082dc:	dd0f      	ble.n	80082fe <_dtoa_r+0x212>
 80082de:	2340      	movs	r3, #64	@ 0x40
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	409f      	lsls	r7, r3
 80082e4:	4b65      	ldr	r3, [pc, #404]	@ (800847c <_dtoa_r+0x390>)
 80082e6:	0038      	movs	r0, r7
 80082e8:	18f3      	adds	r3, r6, r3
 80082ea:	40dc      	lsrs	r4, r3
 80082ec:	4320      	orrs	r0, r4
 80082ee:	f7fa fbff 	bl	8002af0 <__aeabi_ui2d>
 80082f2:	2201      	movs	r2, #1
 80082f4:	4b62      	ldr	r3, [pc, #392]	@ (8008480 <_dtoa_r+0x394>)
 80082f6:	1e77      	subs	r7, r6, #1
 80082f8:	18cb      	adds	r3, r1, r3
 80082fa:	9218      	str	r2, [sp, #96]	@ 0x60
 80082fc:	e776      	b.n	80081ec <_dtoa_r+0x100>
 80082fe:	2320      	movs	r3, #32
 8008300:	0020      	movs	r0, r4
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	4098      	lsls	r0, r3
 8008306:	e7f2      	b.n	80082ee <_dtoa_r+0x202>
 8008308:	9015      	str	r0, [sp, #84]	@ 0x54
 800830a:	e7ba      	b.n	8008282 <_dtoa_r+0x196>
 800830c:	920d      	str	r2, [sp, #52]	@ 0x34
 800830e:	e7c3      	b.n	8008298 <_dtoa_r+0x1ac>
 8008310:	9b06      	ldr	r3, [sp, #24]
 8008312:	9a04      	ldr	r2, [sp, #16]
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	9306      	str	r3, [sp, #24]
 8008318:	4253      	negs	r3, r2
 800831a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800831c:	2300      	movs	r3, #0
 800831e:	9314      	str	r3, [sp, #80]	@ 0x50
 8008320:	e7c5      	b.n	80082ae <_dtoa_r+0x1c2>
 8008322:	2301      	movs	r3, #1
 8008324:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008326:	9310      	str	r3, [sp, #64]	@ 0x40
 8008328:	4694      	mov	ip, r2
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	4463      	add	r3, ip
 800832e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008330:	3301      	adds	r3, #1
 8008332:	9309      	str	r3, [sp, #36]	@ 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	dc08      	bgt.n	800834a <_dtoa_r+0x25e>
 8008338:	2301      	movs	r3, #1
 800833a:	e006      	b.n	800834a <_dtoa_r+0x25e>
 800833c:	2301      	movs	r3, #1
 800833e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008340:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008342:	2b00      	cmp	r3, #0
 8008344:	dd28      	ble.n	8008398 <_dtoa_r+0x2ac>
 8008346:	930e      	str	r3, [sp, #56]	@ 0x38
 8008348:	9309      	str	r3, [sp, #36]	@ 0x24
 800834a:	9a03      	ldr	r2, [sp, #12]
 800834c:	2100      	movs	r1, #0
 800834e:	69d0      	ldr	r0, [r2, #28]
 8008350:	2204      	movs	r2, #4
 8008352:	0015      	movs	r5, r2
 8008354:	3514      	adds	r5, #20
 8008356:	429d      	cmp	r5, r3
 8008358:	d923      	bls.n	80083a2 <_dtoa_r+0x2b6>
 800835a:	6041      	str	r1, [r0, #4]
 800835c:	9803      	ldr	r0, [sp, #12]
 800835e:	f000 fdbb 	bl	8008ed8 <_Balloc>
 8008362:	9008      	str	r0, [sp, #32]
 8008364:	2800      	cmp	r0, #0
 8008366:	d11f      	bne.n	80083a8 <_dtoa_r+0x2bc>
 8008368:	21b0      	movs	r1, #176	@ 0xb0
 800836a:	4b46      	ldr	r3, [pc, #280]	@ (8008484 <_dtoa_r+0x398>)
 800836c:	4831      	ldr	r0, [pc, #196]	@ (8008434 <_dtoa_r+0x348>)
 800836e:	9a08      	ldr	r2, [sp, #32]
 8008370:	31ff      	adds	r1, #255	@ 0xff
 8008372:	e6d0      	b.n	8008116 <_dtoa_r+0x2a>
 8008374:	2300      	movs	r3, #0
 8008376:	e7e2      	b.n	800833e <_dtoa_r+0x252>
 8008378:	2300      	movs	r3, #0
 800837a:	e7d3      	b.n	8008324 <_dtoa_r+0x238>
 800837c:	2300      	movs	r3, #0
 800837e:	9410      	str	r4, [sp, #64]	@ 0x40
 8008380:	9322      	str	r3, [sp, #136]	@ 0x88
 8008382:	3b01      	subs	r3, #1
 8008384:	2200      	movs	r2, #0
 8008386:	930e      	str	r3, [sp, #56]	@ 0x38
 8008388:	9309      	str	r3, [sp, #36]	@ 0x24
 800838a:	3313      	adds	r3, #19
 800838c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800838e:	e7dc      	b.n	800834a <_dtoa_r+0x25e>
 8008390:	2301      	movs	r3, #1
 8008392:	9310      	str	r3, [sp, #64]	@ 0x40
 8008394:	3b02      	subs	r3, #2
 8008396:	e7f5      	b.n	8008384 <_dtoa_r+0x298>
 8008398:	2301      	movs	r3, #1
 800839a:	001a      	movs	r2, r3
 800839c:	930e      	str	r3, [sp, #56]	@ 0x38
 800839e:	9309      	str	r3, [sp, #36]	@ 0x24
 80083a0:	e7f4      	b.n	800838c <_dtoa_r+0x2a0>
 80083a2:	3101      	adds	r1, #1
 80083a4:	0052      	lsls	r2, r2, #1
 80083a6:	e7d4      	b.n	8008352 <_dtoa_r+0x266>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	9a08      	ldr	r2, [sp, #32]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b2:	2b0e      	cmp	r3, #14
 80083b4:	d900      	bls.n	80083b8 <_dtoa_r+0x2cc>
 80083b6:	e0d6      	b.n	8008566 <_dtoa_r+0x47a>
 80083b8:	2c00      	cmp	r4, #0
 80083ba:	d100      	bne.n	80083be <_dtoa_r+0x2d2>
 80083bc:	e0d3      	b.n	8008566 <_dtoa_r+0x47a>
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	dd63      	ble.n	800848c <_dtoa_r+0x3a0>
 80083c4:	210f      	movs	r1, #15
 80083c6:	9a04      	ldr	r2, [sp, #16]
 80083c8:	4b2a      	ldr	r3, [pc, #168]	@ (8008474 <_dtoa_r+0x388>)
 80083ca:	400a      	ands	r2, r1
 80083cc:	00d2      	lsls	r2, r2, #3
 80083ce:	189b      	adds	r3, r3, r2
 80083d0:	681e      	ldr	r6, [r3, #0]
 80083d2:	685f      	ldr	r7, [r3, #4]
 80083d4:	9b04      	ldr	r3, [sp, #16]
 80083d6:	2402      	movs	r4, #2
 80083d8:	111d      	asrs	r5, r3, #4
 80083da:	05db      	lsls	r3, r3, #23
 80083dc:	d50a      	bpl.n	80083f4 <_dtoa_r+0x308>
 80083de:	4b2a      	ldr	r3, [pc, #168]	@ (8008488 <_dtoa_r+0x39c>)
 80083e0:	400d      	ands	r5, r1
 80083e2:	6a1a      	ldr	r2, [r3, #32]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80083e8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80083ea:	f7f8 ffcb 	bl	8001384 <__aeabi_ddiv>
 80083ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80083f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80083f2:	3401      	adds	r4, #1
 80083f4:	4b24      	ldr	r3, [pc, #144]	@ (8008488 <_dtoa_r+0x39c>)
 80083f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	d108      	bne.n	800840e <_dtoa_r+0x322>
 80083fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80083fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008400:	0032      	movs	r2, r6
 8008402:	003b      	movs	r3, r7
 8008404:	f7f8 ffbe 	bl	8001384 <__aeabi_ddiv>
 8008408:	900a      	str	r0, [sp, #40]	@ 0x28
 800840a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800840c:	e059      	b.n	80084c2 <_dtoa_r+0x3d6>
 800840e:	2301      	movs	r3, #1
 8008410:	421d      	tst	r5, r3
 8008412:	d009      	beq.n	8008428 <_dtoa_r+0x33c>
 8008414:	18e4      	adds	r4, r4, r3
 8008416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008418:	0030      	movs	r0, r6
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	0039      	movs	r1, r7
 8008420:	f7f9 fbea 	bl	8001bf8 <__aeabi_dmul>
 8008424:	0006      	movs	r6, r0
 8008426:	000f      	movs	r7, r1
 8008428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800842a:	106d      	asrs	r5, r5, #1
 800842c:	3308      	adds	r3, #8
 800842e:	e7e2      	b.n	80083f6 <_dtoa_r+0x30a>
 8008430:	0800b405 	.word	0x0800b405
 8008434:	0800b41c 	.word	0x0800b41c
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	0000270f 	.word	0x0000270f
 8008440:	0800b401 	.word	0x0800b401
 8008444:	0800b404 	.word	0x0800b404
 8008448:	0800b3d5 	.word	0x0800b3d5
 800844c:	0800b3d4 	.word	0x0800b3d4
 8008450:	3ff00000 	.word	0x3ff00000
 8008454:	fffffc01 	.word	0xfffffc01
 8008458:	3ff80000 	.word	0x3ff80000
 800845c:	636f4361 	.word	0x636f4361
 8008460:	3fd287a7 	.word	0x3fd287a7
 8008464:	8b60c8b3 	.word	0x8b60c8b3
 8008468:	3fc68a28 	.word	0x3fc68a28
 800846c:	509f79fb 	.word	0x509f79fb
 8008470:	3fd34413 	.word	0x3fd34413
 8008474:	0800b570 	.word	0x0800b570
 8008478:	00000432 	.word	0x00000432
 800847c:	00000412 	.word	0x00000412
 8008480:	fe100000 	.word	0xfe100000
 8008484:	0800b474 	.word	0x0800b474
 8008488:	0800b548 	.word	0x0800b548
 800848c:	9b04      	ldr	r3, [sp, #16]
 800848e:	2402      	movs	r4, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d016      	beq.n	80084c2 <_dtoa_r+0x3d6>
 8008494:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008496:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008498:	220f      	movs	r2, #15
 800849a:	425d      	negs	r5, r3
 800849c:	402a      	ands	r2, r5
 800849e:	4bd5      	ldr	r3, [pc, #852]	@ (80087f4 <_dtoa_r+0x708>)
 80084a0:	00d2      	lsls	r2, r2, #3
 80084a2:	189b      	adds	r3, r3, r2
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f7f9 fba6 	bl	8001bf8 <__aeabi_dmul>
 80084ac:	2701      	movs	r7, #1
 80084ae:	2300      	movs	r3, #0
 80084b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80084b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80084b4:	4ed0      	ldr	r6, [pc, #832]	@ (80087f8 <_dtoa_r+0x70c>)
 80084b6:	112d      	asrs	r5, r5, #4
 80084b8:	2d00      	cmp	r5, #0
 80084ba:	d000      	beq.n	80084be <_dtoa_r+0x3d2>
 80084bc:	e095      	b.n	80085ea <_dtoa_r+0x4fe>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1a2      	bne.n	8008408 <_dtoa_r+0x31c>
 80084c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80084c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80084c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d100      	bne.n	80084ce <_dtoa_r+0x3e2>
 80084cc:	e098      	b.n	8008600 <_dtoa_r+0x514>
 80084ce:	2200      	movs	r2, #0
 80084d0:	0030      	movs	r0, r6
 80084d2:	0039      	movs	r1, r7
 80084d4:	4bc9      	ldr	r3, [pc, #804]	@ (80087fc <_dtoa_r+0x710>)
 80084d6:	f7f7 ffbb 	bl	8000450 <__aeabi_dcmplt>
 80084da:	2800      	cmp	r0, #0
 80084dc:	d100      	bne.n	80084e0 <_dtoa_r+0x3f4>
 80084de:	e08f      	b.n	8008600 <_dtoa_r+0x514>
 80084e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d100      	bne.n	80084e8 <_dtoa_r+0x3fc>
 80084e6:	e08b      	b.n	8008600 <_dtoa_r+0x514>
 80084e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd37      	ble.n	800855e <_dtoa_r+0x472>
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	2200      	movs	r2, #0
 80084f2:	3b01      	subs	r3, #1
 80084f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80084f6:	0030      	movs	r0, r6
 80084f8:	4bc1      	ldr	r3, [pc, #772]	@ (8008800 <_dtoa_r+0x714>)
 80084fa:	0039      	movs	r1, r7
 80084fc:	f7f9 fb7c 	bl	8001bf8 <__aeabi_dmul>
 8008500:	900a      	str	r0, [sp, #40]	@ 0x28
 8008502:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008506:	3401      	adds	r4, #1
 8008508:	0020      	movs	r0, r4
 800850a:	9311      	str	r3, [sp, #68]	@ 0x44
 800850c:	f7fa fac2 	bl	8002a94 <__aeabi_i2d>
 8008510:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008514:	f7f9 fb70 	bl	8001bf8 <__aeabi_dmul>
 8008518:	4bba      	ldr	r3, [pc, #744]	@ (8008804 <_dtoa_r+0x718>)
 800851a:	2200      	movs	r2, #0
 800851c:	f7f8 fb6c 	bl	8000bf8 <__aeabi_dadd>
 8008520:	4bb9      	ldr	r3, [pc, #740]	@ (8008808 <_dtoa_r+0x71c>)
 8008522:	0006      	movs	r6, r0
 8008524:	18cf      	adds	r7, r1, r3
 8008526:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008528:	2b00      	cmp	r3, #0
 800852a:	d16d      	bne.n	8008608 <_dtoa_r+0x51c>
 800852c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800852e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008530:	2200      	movs	r2, #0
 8008532:	4bb6      	ldr	r3, [pc, #728]	@ (800880c <_dtoa_r+0x720>)
 8008534:	f7f9 fe46 	bl	80021c4 <__aeabi_dsub>
 8008538:	0032      	movs	r2, r6
 800853a:	003b      	movs	r3, r7
 800853c:	0004      	movs	r4, r0
 800853e:	000d      	movs	r5, r1
 8008540:	f7f7 ff9a 	bl	8000478 <__aeabi_dcmpgt>
 8008544:	2800      	cmp	r0, #0
 8008546:	d000      	beq.n	800854a <_dtoa_r+0x45e>
 8008548:	e2b6      	b.n	8008ab8 <_dtoa_r+0x9cc>
 800854a:	2180      	movs	r1, #128	@ 0x80
 800854c:	0609      	lsls	r1, r1, #24
 800854e:	187b      	adds	r3, r7, r1
 8008550:	0032      	movs	r2, r6
 8008552:	0020      	movs	r0, r4
 8008554:	0029      	movs	r1, r5
 8008556:	f7f7 ff7b 	bl	8000450 <__aeabi_dcmplt>
 800855a:	2800      	cmp	r0, #0
 800855c:	d128      	bne.n	80085b0 <_dtoa_r+0x4c4>
 800855e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008560:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008562:	930a      	str	r3, [sp, #40]	@ 0x28
 8008564:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008566:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008568:	2b00      	cmp	r3, #0
 800856a:	da00      	bge.n	800856e <_dtoa_r+0x482>
 800856c:	e174      	b.n	8008858 <_dtoa_r+0x76c>
 800856e:	9a04      	ldr	r2, [sp, #16]
 8008570:	2a0e      	cmp	r2, #14
 8008572:	dd00      	ble.n	8008576 <_dtoa_r+0x48a>
 8008574:	e170      	b.n	8008858 <_dtoa_r+0x76c>
 8008576:	4b9f      	ldr	r3, [pc, #636]	@ (80087f4 <_dtoa_r+0x708>)
 8008578:	00d2      	lsls	r2, r2, #3
 800857a:	189b      	adds	r3, r3, r2
 800857c:	685c      	ldr	r4, [r3, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	9306      	str	r3, [sp, #24]
 8008582:	9407      	str	r4, [sp, #28]
 8008584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008586:	2b00      	cmp	r3, #0
 8008588:	db00      	blt.n	800858c <_dtoa_r+0x4a0>
 800858a:	e0e7      	b.n	800875c <_dtoa_r+0x670>
 800858c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	dd00      	ble.n	8008594 <_dtoa_r+0x4a8>
 8008592:	e0e3      	b.n	800875c <_dtoa_r+0x670>
 8008594:	d10c      	bne.n	80085b0 <_dtoa_r+0x4c4>
 8008596:	9806      	ldr	r0, [sp, #24]
 8008598:	9907      	ldr	r1, [sp, #28]
 800859a:	2200      	movs	r2, #0
 800859c:	4b9b      	ldr	r3, [pc, #620]	@ (800880c <_dtoa_r+0x720>)
 800859e:	f7f9 fb2b 	bl	8001bf8 <__aeabi_dmul>
 80085a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085a6:	f7f7 ff71 	bl	800048c <__aeabi_dcmpge>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d100      	bne.n	80085b0 <_dtoa_r+0x4c4>
 80085ae:	e286      	b.n	8008abe <_dtoa_r+0x9d2>
 80085b0:	2600      	movs	r6, #0
 80085b2:	0037      	movs	r7, r6
 80085b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085b6:	9c08      	ldr	r4, [sp, #32]
 80085b8:	43db      	mvns	r3, r3
 80085ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80085bc:	9704      	str	r7, [sp, #16]
 80085be:	2700      	movs	r7, #0
 80085c0:	0031      	movs	r1, r6
 80085c2:	9803      	ldr	r0, [sp, #12]
 80085c4:	f000 fccc 	bl	8008f60 <_Bfree>
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d100      	bne.n	80085d0 <_dtoa_r+0x4e4>
 80085ce:	e0bb      	b.n	8008748 <_dtoa_r+0x65c>
 80085d0:	2f00      	cmp	r7, #0
 80085d2:	d005      	beq.n	80085e0 <_dtoa_r+0x4f4>
 80085d4:	429f      	cmp	r7, r3
 80085d6:	d003      	beq.n	80085e0 <_dtoa_r+0x4f4>
 80085d8:	0039      	movs	r1, r7
 80085da:	9803      	ldr	r0, [sp, #12]
 80085dc:	f000 fcc0 	bl	8008f60 <_Bfree>
 80085e0:	9904      	ldr	r1, [sp, #16]
 80085e2:	9803      	ldr	r0, [sp, #12]
 80085e4:	f000 fcbc 	bl	8008f60 <_Bfree>
 80085e8:	e0ae      	b.n	8008748 <_dtoa_r+0x65c>
 80085ea:	423d      	tst	r5, r7
 80085ec:	d005      	beq.n	80085fa <_dtoa_r+0x50e>
 80085ee:	6832      	ldr	r2, [r6, #0]
 80085f0:	6873      	ldr	r3, [r6, #4]
 80085f2:	f7f9 fb01 	bl	8001bf8 <__aeabi_dmul>
 80085f6:	003b      	movs	r3, r7
 80085f8:	3401      	adds	r4, #1
 80085fa:	106d      	asrs	r5, r5, #1
 80085fc:	3608      	adds	r6, #8
 80085fe:	e75b      	b.n	80084b8 <_dtoa_r+0x3cc>
 8008600:	9b04      	ldr	r3, [sp, #16]
 8008602:	930c      	str	r3, [sp, #48]	@ 0x30
 8008604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008606:	e77f      	b.n	8008508 <_dtoa_r+0x41c>
 8008608:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800860a:	4b7a      	ldr	r3, [pc, #488]	@ (80087f4 <_dtoa_r+0x708>)
 800860c:	3a01      	subs	r2, #1
 800860e:	00d2      	lsls	r2, r2, #3
 8008610:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008612:	189b      	adds	r3, r3, r2
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2900      	cmp	r1, #0
 800861a:	d04c      	beq.n	80086b6 <_dtoa_r+0x5ca>
 800861c:	2000      	movs	r0, #0
 800861e:	497c      	ldr	r1, [pc, #496]	@ (8008810 <_dtoa_r+0x724>)
 8008620:	f7f8 feb0 	bl	8001384 <__aeabi_ddiv>
 8008624:	0032      	movs	r2, r6
 8008626:	003b      	movs	r3, r7
 8008628:	f7f9 fdcc 	bl	80021c4 <__aeabi_dsub>
 800862c:	9a08      	ldr	r2, [sp, #32]
 800862e:	0006      	movs	r6, r0
 8008630:	4694      	mov	ip, r2
 8008632:	000f      	movs	r7, r1
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	9316      	str	r3, [sp, #88]	@ 0x58
 8008638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800863a:	4463      	add	r3, ip
 800863c:	9311      	str	r3, [sp, #68]	@ 0x44
 800863e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008642:	f7fa f9eb 	bl	8002a1c <__aeabi_d2iz>
 8008646:	0005      	movs	r5, r0
 8008648:	f7fa fa24 	bl	8002a94 <__aeabi_i2d>
 800864c:	0002      	movs	r2, r0
 800864e:	000b      	movs	r3, r1
 8008650:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008652:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008654:	f7f9 fdb6 	bl	80021c4 <__aeabi_dsub>
 8008658:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800865a:	3530      	adds	r5, #48	@ 0x30
 800865c:	1c5c      	adds	r4, r3, #1
 800865e:	701d      	strb	r5, [r3, #0]
 8008660:	0032      	movs	r2, r6
 8008662:	003b      	movs	r3, r7
 8008664:	900a      	str	r0, [sp, #40]	@ 0x28
 8008666:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008668:	f7f7 fef2 	bl	8000450 <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	d16b      	bne.n	8008748 <_dtoa_r+0x65c>
 8008670:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008674:	2000      	movs	r0, #0
 8008676:	4961      	ldr	r1, [pc, #388]	@ (80087fc <_dtoa_r+0x710>)
 8008678:	f7f9 fda4 	bl	80021c4 <__aeabi_dsub>
 800867c:	0032      	movs	r2, r6
 800867e:	003b      	movs	r3, r7
 8008680:	f7f7 fee6 	bl	8000450 <__aeabi_dcmplt>
 8008684:	2800      	cmp	r0, #0
 8008686:	d000      	beq.n	800868a <_dtoa_r+0x59e>
 8008688:	e0c6      	b.n	8008818 <_dtoa_r+0x72c>
 800868a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800868c:	42a3      	cmp	r3, r4
 800868e:	d100      	bne.n	8008692 <_dtoa_r+0x5a6>
 8008690:	e765      	b.n	800855e <_dtoa_r+0x472>
 8008692:	2200      	movs	r2, #0
 8008694:	0030      	movs	r0, r6
 8008696:	0039      	movs	r1, r7
 8008698:	4b59      	ldr	r3, [pc, #356]	@ (8008800 <_dtoa_r+0x714>)
 800869a:	f7f9 faad 	bl	8001bf8 <__aeabi_dmul>
 800869e:	2200      	movs	r2, #0
 80086a0:	0006      	movs	r6, r0
 80086a2:	000f      	movs	r7, r1
 80086a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086a8:	4b55      	ldr	r3, [pc, #340]	@ (8008800 <_dtoa_r+0x714>)
 80086aa:	f7f9 faa5 	bl	8001bf8 <__aeabi_dmul>
 80086ae:	9416      	str	r4, [sp, #88]	@ 0x58
 80086b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80086b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086b4:	e7c3      	b.n	800863e <_dtoa_r+0x552>
 80086b6:	0030      	movs	r0, r6
 80086b8:	0039      	movs	r1, r7
 80086ba:	f7f9 fa9d 	bl	8001bf8 <__aeabi_dmul>
 80086be:	9d08      	ldr	r5, [sp, #32]
 80086c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80086c2:	002b      	movs	r3, r5
 80086c4:	4694      	mov	ip, r2
 80086c6:	9016      	str	r0, [sp, #88]	@ 0x58
 80086c8:	9117      	str	r1, [sp, #92]	@ 0x5c
 80086ca:	4463      	add	r3, ip
 80086cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80086ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086d2:	f7fa f9a3 	bl	8002a1c <__aeabi_d2iz>
 80086d6:	0004      	movs	r4, r0
 80086d8:	f7fa f9dc 	bl	8002a94 <__aeabi_i2d>
 80086dc:	000b      	movs	r3, r1
 80086de:	0002      	movs	r2, r0
 80086e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086e4:	f7f9 fd6e 	bl	80021c4 <__aeabi_dsub>
 80086e8:	3430      	adds	r4, #48	@ 0x30
 80086ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ec:	702c      	strb	r4, [r5, #0]
 80086ee:	3501      	adds	r5, #1
 80086f0:	0006      	movs	r6, r0
 80086f2:	000f      	movs	r7, r1
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	d12a      	bne.n	800874e <_dtoa_r+0x662>
 80086f8:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80086fa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008700:	469c      	mov	ip, r3
 8008702:	2200      	movs	r2, #0
 8008704:	4b42      	ldr	r3, [pc, #264]	@ (8008810 <_dtoa_r+0x724>)
 8008706:	4464      	add	r4, ip
 8008708:	f7f8 fa76 	bl	8000bf8 <__aeabi_dadd>
 800870c:	0002      	movs	r2, r0
 800870e:	000b      	movs	r3, r1
 8008710:	0030      	movs	r0, r6
 8008712:	0039      	movs	r1, r7
 8008714:	f7f7 feb0 	bl	8000478 <__aeabi_dcmpgt>
 8008718:	2800      	cmp	r0, #0
 800871a:	d000      	beq.n	800871e <_dtoa_r+0x632>
 800871c:	e07c      	b.n	8008818 <_dtoa_r+0x72c>
 800871e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008720:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008722:	2000      	movs	r0, #0
 8008724:	493a      	ldr	r1, [pc, #232]	@ (8008810 <_dtoa_r+0x724>)
 8008726:	f7f9 fd4d 	bl	80021c4 <__aeabi_dsub>
 800872a:	0002      	movs	r2, r0
 800872c:	000b      	movs	r3, r1
 800872e:	0030      	movs	r0, r6
 8008730:	0039      	movs	r1, r7
 8008732:	f7f7 fe8d 	bl	8000450 <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	d100      	bne.n	800873c <_dtoa_r+0x650>
 800873a:	e710      	b.n	800855e <_dtoa_r+0x472>
 800873c:	0023      	movs	r3, r4
 800873e:	3c01      	subs	r4, #1
 8008740:	7822      	ldrb	r2, [r4, #0]
 8008742:	2a30      	cmp	r2, #48	@ 0x30
 8008744:	d0fa      	beq.n	800873c <_dtoa_r+0x650>
 8008746:	001c      	movs	r4, r3
 8008748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	e042      	b.n	80087d4 <_dtoa_r+0x6e8>
 800874e:	2200      	movs	r2, #0
 8008750:	4b2b      	ldr	r3, [pc, #172]	@ (8008800 <_dtoa_r+0x714>)
 8008752:	f7f9 fa51 	bl	8001bf8 <__aeabi_dmul>
 8008756:	900a      	str	r0, [sp, #40]	@ 0x28
 8008758:	910b      	str	r1, [sp, #44]	@ 0x2c
 800875a:	e7b8      	b.n	80086ce <_dtoa_r+0x5e2>
 800875c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875e:	9d08      	ldr	r5, [sp, #32]
 8008760:	3b01      	subs	r3, #1
 8008762:	195b      	adds	r3, r3, r5
 8008764:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008766:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008768:	930a      	str	r3, [sp, #40]	@ 0x28
 800876a:	9a06      	ldr	r2, [sp, #24]
 800876c:	9b07      	ldr	r3, [sp, #28]
 800876e:	0030      	movs	r0, r6
 8008770:	0039      	movs	r1, r7
 8008772:	f7f8 fe07 	bl	8001384 <__aeabi_ddiv>
 8008776:	f7fa f951 	bl	8002a1c <__aeabi_d2iz>
 800877a:	9009      	str	r0, [sp, #36]	@ 0x24
 800877c:	f7fa f98a 	bl	8002a94 <__aeabi_i2d>
 8008780:	9a06      	ldr	r2, [sp, #24]
 8008782:	9b07      	ldr	r3, [sp, #28]
 8008784:	f7f9 fa38 	bl	8001bf8 <__aeabi_dmul>
 8008788:	0002      	movs	r2, r0
 800878a:	000b      	movs	r3, r1
 800878c:	0030      	movs	r0, r6
 800878e:	0039      	movs	r1, r7
 8008790:	f7f9 fd18 	bl	80021c4 <__aeabi_dsub>
 8008794:	002b      	movs	r3, r5
 8008796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008798:	3501      	adds	r5, #1
 800879a:	3230      	adds	r2, #48	@ 0x30
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087a0:	002c      	movs	r4, r5
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d14b      	bne.n	800883e <_dtoa_r+0x752>
 80087a6:	0002      	movs	r2, r0
 80087a8:	000b      	movs	r3, r1
 80087aa:	f7f8 fa25 	bl	8000bf8 <__aeabi_dadd>
 80087ae:	9a06      	ldr	r2, [sp, #24]
 80087b0:	9b07      	ldr	r3, [sp, #28]
 80087b2:	0006      	movs	r6, r0
 80087b4:	000f      	movs	r7, r1
 80087b6:	f7f7 fe5f 	bl	8000478 <__aeabi_dcmpgt>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d12a      	bne.n	8008814 <_dtoa_r+0x728>
 80087be:	9a06      	ldr	r2, [sp, #24]
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	0030      	movs	r0, r6
 80087c4:	0039      	movs	r1, r7
 80087c6:	f7f7 fe3d 	bl	8000444 <__aeabi_dcmpeq>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d002      	beq.n	80087d4 <_dtoa_r+0x6e8>
 80087ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d0:	07dd      	lsls	r5, r3, #31
 80087d2:	d41f      	bmi.n	8008814 <_dtoa_r+0x728>
 80087d4:	9905      	ldr	r1, [sp, #20]
 80087d6:	9803      	ldr	r0, [sp, #12]
 80087d8:	f000 fbc2 	bl	8008f60 <_Bfree>
 80087dc:	2300      	movs	r3, #0
 80087de:	7023      	strb	r3, [r4, #0]
 80087e0:	9b04      	ldr	r3, [sp, #16]
 80087e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80087e4:	3301      	adds	r3, #1
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d100      	bne.n	80087f0 <_dtoa_r+0x704>
 80087ee:	e4c7      	b.n	8008180 <_dtoa_r+0x94>
 80087f0:	601c      	str	r4, [r3, #0]
 80087f2:	e4c5      	b.n	8008180 <_dtoa_r+0x94>
 80087f4:	0800b570 	.word	0x0800b570
 80087f8:	0800b548 	.word	0x0800b548
 80087fc:	3ff00000 	.word	0x3ff00000
 8008800:	40240000 	.word	0x40240000
 8008804:	401c0000 	.word	0x401c0000
 8008808:	fcc00000 	.word	0xfcc00000
 800880c:	40140000 	.word	0x40140000
 8008810:	3fe00000 	.word	0x3fe00000
 8008814:	9b04      	ldr	r3, [sp, #16]
 8008816:	930c      	str	r3, [sp, #48]	@ 0x30
 8008818:	0023      	movs	r3, r4
 800881a:	001c      	movs	r4, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	781a      	ldrb	r2, [r3, #0]
 8008820:	2a39      	cmp	r2, #57	@ 0x39
 8008822:	d108      	bne.n	8008836 <_dtoa_r+0x74a>
 8008824:	9a08      	ldr	r2, [sp, #32]
 8008826:	429a      	cmp	r2, r3
 8008828:	d1f7      	bne.n	800881a <_dtoa_r+0x72e>
 800882a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800882c:	9908      	ldr	r1, [sp, #32]
 800882e:	3201      	adds	r2, #1
 8008830:	920c      	str	r2, [sp, #48]	@ 0x30
 8008832:	2230      	movs	r2, #48	@ 0x30
 8008834:	700a      	strb	r2, [r1, #0]
 8008836:	781a      	ldrb	r2, [r3, #0]
 8008838:	3201      	adds	r2, #1
 800883a:	701a      	strb	r2, [r3, #0]
 800883c:	e784      	b.n	8008748 <_dtoa_r+0x65c>
 800883e:	2200      	movs	r2, #0
 8008840:	4bc6      	ldr	r3, [pc, #792]	@ (8008b5c <_dtoa_r+0xa70>)
 8008842:	f7f9 f9d9 	bl	8001bf8 <__aeabi_dmul>
 8008846:	2200      	movs	r2, #0
 8008848:	2300      	movs	r3, #0
 800884a:	0006      	movs	r6, r0
 800884c:	000f      	movs	r7, r1
 800884e:	f7f7 fdf9 	bl	8000444 <__aeabi_dcmpeq>
 8008852:	2800      	cmp	r0, #0
 8008854:	d089      	beq.n	800876a <_dtoa_r+0x67e>
 8008856:	e7bd      	b.n	80087d4 <_dtoa_r+0x6e8>
 8008858:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800885a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800885c:	9c06      	ldr	r4, [sp, #24]
 800885e:	2f00      	cmp	r7, #0
 8008860:	d014      	beq.n	800888c <_dtoa_r+0x7a0>
 8008862:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008864:	2a01      	cmp	r2, #1
 8008866:	dd00      	ble.n	800886a <_dtoa_r+0x77e>
 8008868:	e0e4      	b.n	8008a34 <_dtoa_r+0x948>
 800886a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800886c:	2a00      	cmp	r2, #0
 800886e:	d100      	bne.n	8008872 <_dtoa_r+0x786>
 8008870:	e0da      	b.n	8008a28 <_dtoa_r+0x93c>
 8008872:	4abb      	ldr	r2, [pc, #748]	@ (8008b60 <_dtoa_r+0xa74>)
 8008874:	189b      	adds	r3, r3, r2
 8008876:	9a06      	ldr	r2, [sp, #24]
 8008878:	2101      	movs	r1, #1
 800887a:	18d2      	adds	r2, r2, r3
 800887c:	9206      	str	r2, [sp, #24]
 800887e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008880:	9803      	ldr	r0, [sp, #12]
 8008882:	18d3      	adds	r3, r2, r3
 8008884:	930d      	str	r3, [sp, #52]	@ 0x34
 8008886:	f000 fc23 	bl	80090d0 <__i2b>
 800888a:	0007      	movs	r7, r0
 800888c:	2c00      	cmp	r4, #0
 800888e:	d00e      	beq.n	80088ae <_dtoa_r+0x7c2>
 8008890:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd0b      	ble.n	80088ae <_dtoa_r+0x7c2>
 8008896:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008898:	0023      	movs	r3, r4
 800889a:	4294      	cmp	r4, r2
 800889c:	dd00      	ble.n	80088a0 <_dtoa_r+0x7b4>
 800889e:	0013      	movs	r3, r2
 80088a0:	9a06      	ldr	r2, [sp, #24]
 80088a2:	1ae4      	subs	r4, r4, r3
 80088a4:	1ad2      	subs	r2, r2, r3
 80088a6:	9206      	str	r2, [sp, #24]
 80088a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80088ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d021      	beq.n	80088f8 <_dtoa_r+0x80c>
 80088b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d100      	bne.n	80088bc <_dtoa_r+0x7d0>
 80088ba:	e0d3      	b.n	8008a64 <_dtoa_r+0x978>
 80088bc:	9e05      	ldr	r6, [sp, #20]
 80088be:	2d00      	cmp	r5, #0
 80088c0:	d014      	beq.n	80088ec <_dtoa_r+0x800>
 80088c2:	0039      	movs	r1, r7
 80088c4:	002a      	movs	r2, r5
 80088c6:	9803      	ldr	r0, [sp, #12]
 80088c8:	f000 fcc4 	bl	8009254 <__pow5mult>
 80088cc:	9a05      	ldr	r2, [sp, #20]
 80088ce:	0001      	movs	r1, r0
 80088d0:	0007      	movs	r7, r0
 80088d2:	9803      	ldr	r0, [sp, #12]
 80088d4:	f000 fc14 	bl	8009100 <__multiply>
 80088d8:	0006      	movs	r6, r0
 80088da:	9905      	ldr	r1, [sp, #20]
 80088dc:	9803      	ldr	r0, [sp, #12]
 80088de:	f000 fb3f 	bl	8008f60 <_Bfree>
 80088e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088e4:	9605      	str	r6, [sp, #20]
 80088e6:	1b5b      	subs	r3, r3, r5
 80088e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088ea:	d005      	beq.n	80088f8 <_dtoa_r+0x80c>
 80088ec:	0031      	movs	r1, r6
 80088ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80088f0:	9803      	ldr	r0, [sp, #12]
 80088f2:	f000 fcaf 	bl	8009254 <__pow5mult>
 80088f6:	9005      	str	r0, [sp, #20]
 80088f8:	2101      	movs	r1, #1
 80088fa:	9803      	ldr	r0, [sp, #12]
 80088fc:	f000 fbe8 	bl	80090d0 <__i2b>
 8008900:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008902:	0006      	movs	r6, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d100      	bne.n	800890a <_dtoa_r+0x81e>
 8008908:	e1bc      	b.n	8008c84 <_dtoa_r+0xb98>
 800890a:	001a      	movs	r2, r3
 800890c:	0001      	movs	r1, r0
 800890e:	9803      	ldr	r0, [sp, #12]
 8008910:	f000 fca0 	bl	8009254 <__pow5mult>
 8008914:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008916:	0006      	movs	r6, r0
 8008918:	2500      	movs	r5, #0
 800891a:	2b01      	cmp	r3, #1
 800891c:	dc16      	bgt.n	800894c <_dtoa_r+0x860>
 800891e:	2500      	movs	r5, #0
 8008920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008922:	42ab      	cmp	r3, r5
 8008924:	d10e      	bne.n	8008944 <_dtoa_r+0x858>
 8008926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008928:	031b      	lsls	r3, r3, #12
 800892a:	42ab      	cmp	r3, r5
 800892c:	d10a      	bne.n	8008944 <_dtoa_r+0x858>
 800892e:	4b8d      	ldr	r3, [pc, #564]	@ (8008b64 <_dtoa_r+0xa78>)
 8008930:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008932:	4213      	tst	r3, r2
 8008934:	d006      	beq.n	8008944 <_dtoa_r+0x858>
 8008936:	9b06      	ldr	r3, [sp, #24]
 8008938:	3501      	adds	r5, #1
 800893a:	3301      	adds	r3, #1
 800893c:	9306      	str	r3, [sp, #24]
 800893e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008940:	3301      	adds	r3, #1
 8008942:	930d      	str	r3, [sp, #52]	@ 0x34
 8008944:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008946:	2001      	movs	r0, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <_dtoa_r+0x872>
 800894c:	6933      	ldr	r3, [r6, #16]
 800894e:	3303      	adds	r3, #3
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	18f3      	adds	r3, r6, r3
 8008954:	6858      	ldr	r0, [r3, #4]
 8008956:	f000 fb6b 	bl	8009030 <__hi0bits>
 800895a:	2320      	movs	r3, #32
 800895c:	1a18      	subs	r0, r3, r0
 800895e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008960:	1818      	adds	r0, r3, r0
 8008962:	0002      	movs	r2, r0
 8008964:	231f      	movs	r3, #31
 8008966:	401a      	ands	r2, r3
 8008968:	4218      	tst	r0, r3
 800896a:	d100      	bne.n	800896e <_dtoa_r+0x882>
 800896c:	e081      	b.n	8008a72 <_dtoa_r+0x986>
 800896e:	3301      	adds	r3, #1
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	2b04      	cmp	r3, #4
 8008974:	dd79      	ble.n	8008a6a <_dtoa_r+0x97e>
 8008976:	231c      	movs	r3, #28
 8008978:	1a9b      	subs	r3, r3, r2
 800897a:	9a06      	ldr	r2, [sp, #24]
 800897c:	18e4      	adds	r4, r4, r3
 800897e:	18d2      	adds	r2, r2, r3
 8008980:	9206      	str	r2, [sp, #24]
 8008982:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008984:	18d3      	adds	r3, r2, r3
 8008986:	930d      	str	r3, [sp, #52]	@ 0x34
 8008988:	9b06      	ldr	r3, [sp, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	dd05      	ble.n	800899a <_dtoa_r+0x8ae>
 800898e:	001a      	movs	r2, r3
 8008990:	9905      	ldr	r1, [sp, #20]
 8008992:	9803      	ldr	r0, [sp, #12]
 8008994:	f000 fcba 	bl	800930c <__lshift>
 8008998:	9005      	str	r0, [sp, #20]
 800899a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800899c:	2b00      	cmp	r3, #0
 800899e:	dd05      	ble.n	80089ac <_dtoa_r+0x8c0>
 80089a0:	0031      	movs	r1, r6
 80089a2:	001a      	movs	r2, r3
 80089a4:	9803      	ldr	r0, [sp, #12]
 80089a6:	f000 fcb1 	bl	800930c <__lshift>
 80089aa:	0006      	movs	r6, r0
 80089ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d061      	beq.n	8008a76 <_dtoa_r+0x98a>
 80089b2:	0031      	movs	r1, r6
 80089b4:	9805      	ldr	r0, [sp, #20]
 80089b6:	f000 fd15 	bl	80093e4 <__mcmp>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	da5b      	bge.n	8008a76 <_dtoa_r+0x98a>
 80089be:	9b04      	ldr	r3, [sp, #16]
 80089c0:	220a      	movs	r2, #10
 80089c2:	3b01      	subs	r3, #1
 80089c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80089c6:	9905      	ldr	r1, [sp, #20]
 80089c8:	2300      	movs	r3, #0
 80089ca:	9803      	ldr	r0, [sp, #12]
 80089cc:	f000 faec 	bl	8008fa8 <__multadd>
 80089d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089d2:	9005      	str	r0, [sp, #20]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d100      	bne.n	80089da <_dtoa_r+0x8ee>
 80089d8:	e15b      	b.n	8008c92 <_dtoa_r+0xba6>
 80089da:	2300      	movs	r3, #0
 80089dc:	0039      	movs	r1, r7
 80089de:	220a      	movs	r2, #10
 80089e0:	9803      	ldr	r0, [sp, #12]
 80089e2:	f000 fae1 	bl	8008fa8 <__multadd>
 80089e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089e8:	0007      	movs	r7, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dc4d      	bgt.n	8008a8a <_dtoa_r+0x99e>
 80089ee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	dd46      	ble.n	8008a82 <_dtoa_r+0x996>
 80089f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d000      	beq.n	80089fc <_dtoa_r+0x910>
 80089fa:	e5db      	b.n	80085b4 <_dtoa_r+0x4c8>
 80089fc:	0031      	movs	r1, r6
 80089fe:	2205      	movs	r2, #5
 8008a00:	9803      	ldr	r0, [sp, #12]
 8008a02:	f000 fad1 	bl	8008fa8 <__multadd>
 8008a06:	0006      	movs	r6, r0
 8008a08:	0001      	movs	r1, r0
 8008a0a:	9805      	ldr	r0, [sp, #20]
 8008a0c:	f000 fcea 	bl	80093e4 <__mcmp>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	dc00      	bgt.n	8008a16 <_dtoa_r+0x92a>
 8008a14:	e5ce      	b.n	80085b4 <_dtoa_r+0x4c8>
 8008a16:	9b08      	ldr	r3, [sp, #32]
 8008a18:	9a08      	ldr	r2, [sp, #32]
 8008a1a:	1c5c      	adds	r4, r3, #1
 8008a1c:	2331      	movs	r3, #49	@ 0x31
 8008a1e:	7013      	strb	r3, [r2, #0]
 8008a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a22:	3301      	adds	r3, #1
 8008a24:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a26:	e5c9      	b.n	80085bc <_dtoa_r+0x4d0>
 8008a28:	2336      	movs	r3, #54	@ 0x36
 8008a2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a2c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	9c06      	ldr	r4, [sp, #24]
 8008a32:	e720      	b.n	8008876 <_dtoa_r+0x78a>
 8008a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a36:	1e5d      	subs	r5, r3, #1
 8008a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a3a:	42ab      	cmp	r3, r5
 8008a3c:	db08      	blt.n	8008a50 <_dtoa_r+0x964>
 8008a3e:	1b5d      	subs	r5, r3, r5
 8008a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	daf4      	bge.n	8008a30 <_dtoa_r+0x944>
 8008a46:	9b06      	ldr	r3, [sp, #24]
 8008a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a4a:	1a9c      	subs	r4, r3, r2
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e712      	b.n	8008876 <_dtoa_r+0x78a>
 8008a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a52:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a54:	1aeb      	subs	r3, r5, r3
 8008a56:	18d3      	adds	r3, r2, r3
 8008a58:	9314      	str	r3, [sp, #80]	@ 0x50
 8008a5a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008a5c:	9c06      	ldr	r4, [sp, #24]
 8008a5e:	2500      	movs	r5, #0
 8008a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a62:	e708      	b.n	8008876 <_dtoa_r+0x78a>
 8008a64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a66:	9905      	ldr	r1, [sp, #20]
 8008a68:	e742      	b.n	80088f0 <_dtoa_r+0x804>
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d08c      	beq.n	8008988 <_dtoa_r+0x89c>
 8008a6e:	331c      	adds	r3, #28
 8008a70:	e783      	b.n	800897a <_dtoa_r+0x88e>
 8008a72:	0013      	movs	r3, r2
 8008a74:	e7fb      	b.n	8008a6e <_dtoa_r+0x982>
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	ddb5      	ble.n	80089ee <_dtoa_r+0x902>
 8008a82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d100      	bne.n	8008a8a <_dtoa_r+0x99e>
 8008a88:	e107      	b.n	8008c9a <_dtoa_r+0xbae>
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	dd05      	ble.n	8008a9a <_dtoa_r+0x9ae>
 8008a8e:	0039      	movs	r1, r7
 8008a90:	0022      	movs	r2, r4
 8008a92:	9803      	ldr	r0, [sp, #12]
 8008a94:	f000 fc3a 	bl	800930c <__lshift>
 8008a98:	0007      	movs	r7, r0
 8008a9a:	9704      	str	r7, [sp, #16]
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	d020      	beq.n	8008ae2 <_dtoa_r+0x9f6>
 8008aa0:	6879      	ldr	r1, [r7, #4]
 8008aa2:	9803      	ldr	r0, [sp, #12]
 8008aa4:	f000 fa18 	bl	8008ed8 <_Balloc>
 8008aa8:	1e04      	subs	r4, r0, #0
 8008aaa:	d10c      	bne.n	8008ac6 <_dtoa_r+0x9da>
 8008aac:	0022      	movs	r2, r4
 8008aae:	4b2e      	ldr	r3, [pc, #184]	@ (8008b68 <_dtoa_r+0xa7c>)
 8008ab0:	482e      	ldr	r0, [pc, #184]	@ (8008b6c <_dtoa_r+0xa80>)
 8008ab2:	492f      	ldr	r1, [pc, #188]	@ (8008b70 <_dtoa_r+0xa84>)
 8008ab4:	f7ff fb2f 	bl	8008116 <_dtoa_r+0x2a>
 8008ab8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008aba:	0037      	movs	r7, r6
 8008abc:	e7ab      	b.n	8008a16 <_dtoa_r+0x92a>
 8008abe:	9b04      	ldr	r3, [sp, #16]
 8008ac0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008ac2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ac4:	e7f9      	b.n	8008aba <_dtoa_r+0x9ce>
 8008ac6:	0039      	movs	r1, r7
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	310c      	adds	r1, #12
 8008acc:	3202      	adds	r2, #2
 8008ace:	0092      	lsls	r2, r2, #2
 8008ad0:	300c      	adds	r0, #12
 8008ad2:	f7ff fa7d 	bl	8007fd0 <memcpy>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	0021      	movs	r1, r4
 8008ada:	9803      	ldr	r0, [sp, #12]
 8008adc:	f000 fc16 	bl	800930c <__lshift>
 8008ae0:	9004      	str	r0, [sp, #16]
 8008ae2:	9b08      	ldr	r3, [sp, #32]
 8008ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ae6:	9306      	str	r3, [sp, #24]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	189b      	adds	r3, r3, r2
 8008aec:	2201      	movs	r2, #1
 8008aee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008af2:	4013      	ands	r3, r2
 8008af4:	930e      	str	r3, [sp, #56]	@ 0x38
 8008af6:	0031      	movs	r1, r6
 8008af8:	9805      	ldr	r0, [sp, #20]
 8008afa:	f7ff fa72 	bl	8007fe2 <quorem>
 8008afe:	0039      	movs	r1, r7
 8008b00:	0005      	movs	r5, r0
 8008b02:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b04:	9805      	ldr	r0, [sp, #20]
 8008b06:	f000 fc6d 	bl	80093e4 <__mcmp>
 8008b0a:	9a04      	ldr	r2, [sp, #16]
 8008b0c:	900d      	str	r0, [sp, #52]	@ 0x34
 8008b0e:	0031      	movs	r1, r6
 8008b10:	9803      	ldr	r0, [sp, #12]
 8008b12:	f000 fc83 	bl	800941c <__mdiff>
 8008b16:	2201      	movs	r2, #1
 8008b18:	68c3      	ldr	r3, [r0, #12]
 8008b1a:	0004      	movs	r4, r0
 8008b1c:	3530      	adds	r5, #48	@ 0x30
 8008b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d104      	bne.n	8008b2e <_dtoa_r+0xa42>
 8008b24:	0001      	movs	r1, r0
 8008b26:	9805      	ldr	r0, [sp, #20]
 8008b28:	f000 fc5c 	bl	80093e4 <__mcmp>
 8008b2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008b2e:	0021      	movs	r1, r4
 8008b30:	9803      	ldr	r0, [sp, #12]
 8008b32:	f000 fa15 	bl	8008f60 <_Bfree>
 8008b36:	9b06      	ldr	r3, [sp, #24]
 8008b38:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b3a:	1c5c      	adds	r4, r3, #1
 8008b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d116      	bne.n	8008b74 <_dtoa_r+0xa88>
 8008b46:	2d39      	cmp	r5, #57	@ 0x39
 8008b48:	d02f      	beq.n	8008baa <_dtoa_r+0xabe>
 8008b4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dd01      	ble.n	8008b54 <_dtoa_r+0xa68>
 8008b50:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008b52:	3531      	adds	r5, #49	@ 0x31
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	701d      	strb	r5, [r3, #0]
 8008b58:	e532      	b.n	80085c0 <_dtoa_r+0x4d4>
 8008b5a:	46c0      	nop			@ (mov r8, r8)
 8008b5c:	40240000 	.word	0x40240000
 8008b60:	00000433 	.word	0x00000433
 8008b64:	7ff00000 	.word	0x7ff00000
 8008b68:	0800b474 	.word	0x0800b474
 8008b6c:	0800b41c 	.word	0x0800b41c
 8008b70:	000002ef 	.word	0x000002ef
 8008b74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	db04      	blt.n	8008b84 <_dtoa_r+0xa98>
 8008b7a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b80:	4313      	orrs	r3, r2
 8008b82:	d11e      	bne.n	8008bc2 <_dtoa_r+0xad6>
 8008b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dde4      	ble.n	8008b54 <_dtoa_r+0xa68>
 8008b8a:	9905      	ldr	r1, [sp, #20]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	9803      	ldr	r0, [sp, #12]
 8008b90:	f000 fbbc 	bl	800930c <__lshift>
 8008b94:	0031      	movs	r1, r6
 8008b96:	9005      	str	r0, [sp, #20]
 8008b98:	f000 fc24 	bl	80093e4 <__mcmp>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	dc02      	bgt.n	8008ba6 <_dtoa_r+0xaba>
 8008ba0:	d1d8      	bne.n	8008b54 <_dtoa_r+0xa68>
 8008ba2:	07eb      	lsls	r3, r5, #31
 8008ba4:	d5d6      	bpl.n	8008b54 <_dtoa_r+0xa68>
 8008ba6:	2d39      	cmp	r5, #57	@ 0x39
 8008ba8:	d1d2      	bne.n	8008b50 <_dtoa_r+0xa64>
 8008baa:	2339      	movs	r3, #57	@ 0x39
 8008bac:	9a06      	ldr	r2, [sp, #24]
 8008bae:	7013      	strb	r3, [r2, #0]
 8008bb0:	0023      	movs	r3, r4
 8008bb2:	001c      	movs	r4, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	781a      	ldrb	r2, [r3, #0]
 8008bb8:	2a39      	cmp	r2, #57	@ 0x39
 8008bba:	d050      	beq.n	8008c5e <_dtoa_r+0xb72>
 8008bbc:	3201      	adds	r2, #1
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	e4fe      	b.n	80085c0 <_dtoa_r+0x4d4>
 8008bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	dd03      	ble.n	8008bd0 <_dtoa_r+0xae4>
 8008bc8:	2d39      	cmp	r5, #57	@ 0x39
 8008bca:	d0ee      	beq.n	8008baa <_dtoa_r+0xabe>
 8008bcc:	3501      	adds	r5, #1
 8008bce:	e7c1      	b.n	8008b54 <_dtoa_r+0xa68>
 8008bd0:	9b06      	ldr	r3, [sp, #24]
 8008bd2:	9a06      	ldr	r2, [sp, #24]
 8008bd4:	701d      	strb	r5, [r3, #0]
 8008bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d02b      	beq.n	8008c34 <_dtoa_r+0xb48>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	9905      	ldr	r1, [sp, #20]
 8008be2:	9803      	ldr	r0, [sp, #12]
 8008be4:	f000 f9e0 	bl	8008fa8 <__multadd>
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	9005      	str	r0, [sp, #20]
 8008bec:	429f      	cmp	r7, r3
 8008bee:	d109      	bne.n	8008c04 <_dtoa_r+0xb18>
 8008bf0:	0039      	movs	r1, r7
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	9803      	ldr	r0, [sp, #12]
 8008bf8:	f000 f9d6 	bl	8008fa8 <__multadd>
 8008bfc:	0007      	movs	r7, r0
 8008bfe:	9004      	str	r0, [sp, #16]
 8008c00:	9406      	str	r4, [sp, #24]
 8008c02:	e778      	b.n	8008af6 <_dtoa_r+0xa0a>
 8008c04:	0039      	movs	r1, r7
 8008c06:	2300      	movs	r3, #0
 8008c08:	220a      	movs	r2, #10
 8008c0a:	9803      	ldr	r0, [sp, #12]
 8008c0c:	f000 f9cc 	bl	8008fa8 <__multadd>
 8008c10:	2300      	movs	r3, #0
 8008c12:	0007      	movs	r7, r0
 8008c14:	220a      	movs	r2, #10
 8008c16:	9904      	ldr	r1, [sp, #16]
 8008c18:	9803      	ldr	r0, [sp, #12]
 8008c1a:	f000 f9c5 	bl	8008fa8 <__multadd>
 8008c1e:	9004      	str	r0, [sp, #16]
 8008c20:	e7ee      	b.n	8008c00 <_dtoa_r+0xb14>
 8008c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c24:	2401      	movs	r4, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	dd00      	ble.n	8008c2c <_dtoa_r+0xb40>
 8008c2a:	001c      	movs	r4, r3
 8008c2c:	9704      	str	r7, [sp, #16]
 8008c2e:	2700      	movs	r7, #0
 8008c30:	9b08      	ldr	r3, [sp, #32]
 8008c32:	191c      	adds	r4, r3, r4
 8008c34:	9905      	ldr	r1, [sp, #20]
 8008c36:	2201      	movs	r2, #1
 8008c38:	9803      	ldr	r0, [sp, #12]
 8008c3a:	f000 fb67 	bl	800930c <__lshift>
 8008c3e:	0031      	movs	r1, r6
 8008c40:	9005      	str	r0, [sp, #20]
 8008c42:	f000 fbcf 	bl	80093e4 <__mcmp>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	dcb2      	bgt.n	8008bb0 <_dtoa_r+0xac4>
 8008c4a:	d101      	bne.n	8008c50 <_dtoa_r+0xb64>
 8008c4c:	07ed      	lsls	r5, r5, #31
 8008c4e:	d4af      	bmi.n	8008bb0 <_dtoa_r+0xac4>
 8008c50:	0023      	movs	r3, r4
 8008c52:	001c      	movs	r4, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	2a30      	cmp	r2, #48	@ 0x30
 8008c5a:	d0fa      	beq.n	8008c52 <_dtoa_r+0xb66>
 8008c5c:	e4b0      	b.n	80085c0 <_dtoa_r+0x4d4>
 8008c5e:	9a08      	ldr	r2, [sp, #32]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d1a6      	bne.n	8008bb2 <_dtoa_r+0xac6>
 8008c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c66:	3301      	adds	r3, #1
 8008c68:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c6a:	2331      	movs	r3, #49	@ 0x31
 8008c6c:	7013      	strb	r3, [r2, #0]
 8008c6e:	e4a7      	b.n	80085c0 <_dtoa_r+0x4d4>
 8008c70:	4b14      	ldr	r3, [pc, #80]	@ (8008cc4 <_dtoa_r+0xbd8>)
 8008c72:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008c74:	9308      	str	r3, [sp, #32]
 8008c76:	4b14      	ldr	r3, [pc, #80]	@ (8008cc8 <_dtoa_r+0xbdc>)
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	d001      	beq.n	8008c80 <_dtoa_r+0xb94>
 8008c7c:	f7ff fa7e 	bl	800817c <_dtoa_r+0x90>
 8008c80:	f7ff fa7e 	bl	8008180 <_dtoa_r+0x94>
 8008c84:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	dc00      	bgt.n	8008c8c <_dtoa_r+0xba0>
 8008c8a:	e648      	b.n	800891e <_dtoa_r+0x832>
 8008c8c:	2001      	movs	r0, #1
 8008c8e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008c90:	e665      	b.n	800895e <_dtoa_r+0x872>
 8008c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dc00      	bgt.n	8008c9a <_dtoa_r+0xbae>
 8008c98:	e6a9      	b.n	80089ee <_dtoa_r+0x902>
 8008c9a:	2400      	movs	r4, #0
 8008c9c:	0031      	movs	r1, r6
 8008c9e:	9805      	ldr	r0, [sp, #20]
 8008ca0:	f7ff f99f 	bl	8007fe2 <quorem>
 8008ca4:	9b08      	ldr	r3, [sp, #32]
 8008ca6:	3030      	adds	r0, #48	@ 0x30
 8008ca8:	5518      	strb	r0, [r3, r4]
 8008caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cac:	3401      	adds	r4, #1
 8008cae:	0005      	movs	r5, r0
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	ddb6      	ble.n	8008c22 <_dtoa_r+0xb36>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	220a      	movs	r2, #10
 8008cb8:	9905      	ldr	r1, [sp, #20]
 8008cba:	9803      	ldr	r0, [sp, #12]
 8008cbc:	f000 f974 	bl	8008fa8 <__multadd>
 8008cc0:	9005      	str	r0, [sp, #20]
 8008cc2:	e7eb      	b.n	8008c9c <_dtoa_r+0xbb0>
 8008cc4:	0800b3f8 	.word	0x0800b3f8
 8008cc8:	0800b400 	.word	0x0800b400

08008ccc <_free_r>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	0005      	movs	r5, r0
 8008cd0:	1e0c      	subs	r4, r1, #0
 8008cd2:	d010      	beq.n	8008cf6 <_free_r+0x2a>
 8008cd4:	3c04      	subs	r4, #4
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	da00      	bge.n	8008cde <_free_r+0x12>
 8008cdc:	18e4      	adds	r4, r4, r3
 8008cde:	0028      	movs	r0, r5
 8008ce0:	f000 f8ea 	bl	8008eb8 <__malloc_lock>
 8008ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d5c <_free_r+0x90>)
 8008ce6:	6813      	ldr	r3, [r2, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d105      	bne.n	8008cf8 <_free_r+0x2c>
 8008cec:	6063      	str	r3, [r4, #4]
 8008cee:	6014      	str	r4, [r2, #0]
 8008cf0:	0028      	movs	r0, r5
 8008cf2:	f000 f8e9 	bl	8008ec8 <__malloc_unlock>
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d908      	bls.n	8008d0e <_free_r+0x42>
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	1821      	adds	r1, r4, r0
 8008d00:	428b      	cmp	r3, r1
 8008d02:	d1f3      	bne.n	8008cec <_free_r+0x20>
 8008d04:	6819      	ldr	r1, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	1809      	adds	r1, r1, r0
 8008d0a:	6021      	str	r1, [r4, #0]
 8008d0c:	e7ee      	b.n	8008cec <_free_r+0x20>
 8008d0e:	001a      	movs	r2, r3
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <_free_r+0x4e>
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	d9f9      	bls.n	8008d0e <_free_r+0x42>
 8008d1a:	6811      	ldr	r1, [r2, #0]
 8008d1c:	1850      	adds	r0, r2, r1
 8008d1e:	42a0      	cmp	r0, r4
 8008d20:	d10b      	bne.n	8008d3a <_free_r+0x6e>
 8008d22:	6820      	ldr	r0, [r4, #0]
 8008d24:	1809      	adds	r1, r1, r0
 8008d26:	1850      	adds	r0, r2, r1
 8008d28:	6011      	str	r1, [r2, #0]
 8008d2a:	4283      	cmp	r3, r0
 8008d2c:	d1e0      	bne.n	8008cf0 <_free_r+0x24>
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	1841      	adds	r1, r0, r1
 8008d34:	6011      	str	r1, [r2, #0]
 8008d36:	6053      	str	r3, [r2, #4]
 8008d38:	e7da      	b.n	8008cf0 <_free_r+0x24>
 8008d3a:	42a0      	cmp	r0, r4
 8008d3c:	d902      	bls.n	8008d44 <_free_r+0x78>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	e7d5      	b.n	8008cf0 <_free_r+0x24>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	1821      	adds	r1, r4, r0
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	d103      	bne.n	8008d54 <_free_r+0x88>
 8008d4c:	6819      	ldr	r1, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	1809      	adds	r1, r1, r0
 8008d52:	6021      	str	r1, [r4, #0]
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	6054      	str	r4, [r2, #4]
 8008d58:	e7ca      	b.n	8008cf0 <_free_r+0x24>
 8008d5a:	46c0      	nop			@ (mov r8, r8)
 8008d5c:	200008ac 	.word	0x200008ac

08008d60 <malloc>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4b03      	ldr	r3, [pc, #12]	@ (8008d70 <malloc+0x10>)
 8008d64:	0001      	movs	r1, r0
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	f000 f826 	bl	8008db8 <_malloc_r>
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	46c0      	nop			@ (mov r8, r8)
 8008d70:	20000020 	.word	0x20000020

08008d74 <sbrk_aligned>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	4e0f      	ldr	r6, [pc, #60]	@ (8008db4 <sbrk_aligned+0x40>)
 8008d78:	000d      	movs	r5, r1
 8008d7a:	6831      	ldr	r1, [r6, #0]
 8008d7c:	0004      	movs	r4, r0
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	d102      	bne.n	8008d88 <sbrk_aligned+0x14>
 8008d82:	f000 fe55 	bl	8009a30 <_sbrk_r>
 8008d86:	6030      	str	r0, [r6, #0]
 8008d88:	0029      	movs	r1, r5
 8008d8a:	0020      	movs	r0, r4
 8008d8c:	f000 fe50 	bl	8009a30 <_sbrk_r>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d103      	bne.n	8008d9c <sbrk_aligned+0x28>
 8008d94:	2501      	movs	r5, #1
 8008d96:	426d      	negs	r5, r5
 8008d98:	0028      	movs	r0, r5
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	1cc5      	adds	r5, r0, #3
 8008da0:	439d      	bics	r5, r3
 8008da2:	42a8      	cmp	r0, r5
 8008da4:	d0f8      	beq.n	8008d98 <sbrk_aligned+0x24>
 8008da6:	1a29      	subs	r1, r5, r0
 8008da8:	0020      	movs	r0, r4
 8008daa:	f000 fe41 	bl	8009a30 <_sbrk_r>
 8008dae:	3001      	adds	r0, #1
 8008db0:	d1f2      	bne.n	8008d98 <sbrk_aligned+0x24>
 8008db2:	e7ef      	b.n	8008d94 <sbrk_aligned+0x20>
 8008db4:	200008a8 	.word	0x200008a8

08008db8 <_malloc_r>:
 8008db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dba:	2203      	movs	r2, #3
 8008dbc:	1ccb      	adds	r3, r1, #3
 8008dbe:	4393      	bics	r3, r2
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	0005      	movs	r5, r0
 8008dc4:	001f      	movs	r7, r3
 8008dc6:	2b0c      	cmp	r3, #12
 8008dc8:	d234      	bcs.n	8008e34 <_malloc_r+0x7c>
 8008dca:	270c      	movs	r7, #12
 8008dcc:	42b9      	cmp	r1, r7
 8008dce:	d833      	bhi.n	8008e38 <_malloc_r+0x80>
 8008dd0:	0028      	movs	r0, r5
 8008dd2:	f000 f871 	bl	8008eb8 <__malloc_lock>
 8008dd6:	4e37      	ldr	r6, [pc, #220]	@ (8008eb4 <_malloc_r+0xfc>)
 8008dd8:	6833      	ldr	r3, [r6, #0]
 8008dda:	001c      	movs	r4, r3
 8008ddc:	2c00      	cmp	r4, #0
 8008dde:	d12f      	bne.n	8008e40 <_malloc_r+0x88>
 8008de0:	0039      	movs	r1, r7
 8008de2:	0028      	movs	r0, r5
 8008de4:	f7ff ffc6 	bl	8008d74 <sbrk_aligned>
 8008de8:	0004      	movs	r4, r0
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d15f      	bne.n	8008eae <_malloc_r+0xf6>
 8008dee:	6834      	ldr	r4, [r6, #0]
 8008df0:	9400      	str	r4, [sp, #0]
 8008df2:	9b00      	ldr	r3, [sp, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d14a      	bne.n	8008e8e <_malloc_r+0xd6>
 8008df8:	2c00      	cmp	r4, #0
 8008dfa:	d052      	beq.n	8008ea2 <_malloc_r+0xea>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	0028      	movs	r0, r5
 8008e00:	18e3      	adds	r3, r4, r3
 8008e02:	9900      	ldr	r1, [sp, #0]
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	f000 fe13 	bl	8009a30 <_sbrk_r>
 8008e0a:	9b01      	ldr	r3, [sp, #4]
 8008e0c:	4283      	cmp	r3, r0
 8008e0e:	d148      	bne.n	8008ea2 <_malloc_r+0xea>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	0028      	movs	r0, r5
 8008e14:	1aff      	subs	r7, r7, r3
 8008e16:	0039      	movs	r1, r7
 8008e18:	f7ff ffac 	bl	8008d74 <sbrk_aligned>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d040      	beq.n	8008ea2 <_malloc_r+0xea>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	19db      	adds	r3, r3, r7
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	6833      	ldr	r3, [r6, #0]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d133      	bne.n	8008e96 <_malloc_r+0xde>
 8008e2e:	9b00      	ldr	r3, [sp, #0]
 8008e30:	6033      	str	r3, [r6, #0]
 8008e32:	e019      	b.n	8008e68 <_malloc_r+0xb0>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dac9      	bge.n	8008dcc <_malloc_r+0x14>
 8008e38:	230c      	movs	r3, #12
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e40:	6821      	ldr	r1, [r4, #0]
 8008e42:	1bc9      	subs	r1, r1, r7
 8008e44:	d420      	bmi.n	8008e88 <_malloc_r+0xd0>
 8008e46:	290b      	cmp	r1, #11
 8008e48:	d90a      	bls.n	8008e60 <_malloc_r+0xa8>
 8008e4a:	19e2      	adds	r2, r4, r7
 8008e4c:	6027      	str	r7, [r4, #0]
 8008e4e:	42a3      	cmp	r3, r4
 8008e50:	d104      	bne.n	8008e5c <_malloc_r+0xa4>
 8008e52:	6032      	str	r2, [r6, #0]
 8008e54:	6863      	ldr	r3, [r4, #4]
 8008e56:	6011      	str	r1, [r2, #0]
 8008e58:	6053      	str	r3, [r2, #4]
 8008e5a:	e005      	b.n	8008e68 <_malloc_r+0xb0>
 8008e5c:	605a      	str	r2, [r3, #4]
 8008e5e:	e7f9      	b.n	8008e54 <_malloc_r+0x9c>
 8008e60:	6862      	ldr	r2, [r4, #4]
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	d10e      	bne.n	8008e84 <_malloc_r+0xcc>
 8008e66:	6032      	str	r2, [r6, #0]
 8008e68:	0028      	movs	r0, r5
 8008e6a:	f000 f82d 	bl	8008ec8 <__malloc_unlock>
 8008e6e:	0020      	movs	r0, r4
 8008e70:	2207      	movs	r2, #7
 8008e72:	300b      	adds	r0, #11
 8008e74:	1d23      	adds	r3, r4, #4
 8008e76:	4390      	bics	r0, r2
 8008e78:	1ac2      	subs	r2, r0, r3
 8008e7a:	4298      	cmp	r0, r3
 8008e7c:	d0df      	beq.n	8008e3e <_malloc_r+0x86>
 8008e7e:	1a1b      	subs	r3, r3, r0
 8008e80:	50a3      	str	r3, [r4, r2]
 8008e82:	e7dc      	b.n	8008e3e <_malloc_r+0x86>
 8008e84:	605a      	str	r2, [r3, #4]
 8008e86:	e7ef      	b.n	8008e68 <_malloc_r+0xb0>
 8008e88:	0023      	movs	r3, r4
 8008e8a:	6864      	ldr	r4, [r4, #4]
 8008e8c:	e7a6      	b.n	8008ddc <_malloc_r+0x24>
 8008e8e:	9c00      	ldr	r4, [sp, #0]
 8008e90:	6863      	ldr	r3, [r4, #4]
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	e7ad      	b.n	8008df2 <_malloc_r+0x3a>
 8008e96:	001a      	movs	r2, r3
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	d1fb      	bne.n	8008e96 <_malloc_r+0xde>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e7da      	b.n	8008e58 <_malloc_r+0xa0>
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	0028      	movs	r0, r5
 8008ea6:	602b      	str	r3, [r5, #0]
 8008ea8:	f000 f80e 	bl	8008ec8 <__malloc_unlock>
 8008eac:	e7c6      	b.n	8008e3c <_malloc_r+0x84>
 8008eae:	6007      	str	r7, [r0, #0]
 8008eb0:	e7da      	b.n	8008e68 <_malloc_r+0xb0>
 8008eb2:	46c0      	nop			@ (mov r8, r8)
 8008eb4:	200008ac 	.word	0x200008ac

08008eb8 <__malloc_lock>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	4802      	ldr	r0, [pc, #8]	@ (8008ec4 <__malloc_lock+0xc>)
 8008ebc:	f7ff f87b 	bl	8007fb6 <__retarget_lock_acquire_recursive>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	46c0      	nop			@ (mov r8, r8)
 8008ec4:	200008a4 	.word	0x200008a4

08008ec8 <__malloc_unlock>:
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	4802      	ldr	r0, [pc, #8]	@ (8008ed4 <__malloc_unlock+0xc>)
 8008ecc:	f7ff f874 	bl	8007fb8 <__retarget_lock_release_recursive>
 8008ed0:	bd10      	pop	{r4, pc}
 8008ed2:	46c0      	nop			@ (mov r8, r8)
 8008ed4:	200008a4 	.word	0x200008a4

08008ed8 <_Balloc>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	69c5      	ldr	r5, [r0, #28]
 8008edc:	0006      	movs	r6, r0
 8008ede:	000c      	movs	r4, r1
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	d10e      	bne.n	8008f02 <_Balloc+0x2a>
 8008ee4:	2010      	movs	r0, #16
 8008ee6:	f7ff ff3b 	bl	8008d60 <malloc>
 8008eea:	1e02      	subs	r2, r0, #0
 8008eec:	61f0      	str	r0, [r6, #28]
 8008eee:	d104      	bne.n	8008efa <_Balloc+0x22>
 8008ef0:	216b      	movs	r1, #107	@ 0x6b
 8008ef2:	4b19      	ldr	r3, [pc, #100]	@ (8008f58 <_Balloc+0x80>)
 8008ef4:	4819      	ldr	r0, [pc, #100]	@ (8008f5c <_Balloc+0x84>)
 8008ef6:	f000 fdad 	bl	8009a54 <__assert_func>
 8008efa:	6045      	str	r5, [r0, #4]
 8008efc:	6085      	str	r5, [r0, #8]
 8008efe:	6005      	str	r5, [r0, #0]
 8008f00:	60c5      	str	r5, [r0, #12]
 8008f02:	69f5      	ldr	r5, [r6, #28]
 8008f04:	68eb      	ldr	r3, [r5, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d013      	beq.n	8008f32 <_Balloc+0x5a>
 8008f0a:	69f3      	ldr	r3, [r6, #28]
 8008f0c:	00a2      	lsls	r2, r4, #2
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	189b      	adds	r3, r3, r2
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d118      	bne.n	8008f4a <_Balloc+0x72>
 8008f18:	2101      	movs	r1, #1
 8008f1a:	000d      	movs	r5, r1
 8008f1c:	40a5      	lsls	r5, r4
 8008f1e:	1d6a      	adds	r2, r5, #5
 8008f20:	0030      	movs	r0, r6
 8008f22:	0092      	lsls	r2, r2, #2
 8008f24:	f000 fdb4 	bl	8009a90 <_calloc_r>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d00c      	beq.n	8008f46 <_Balloc+0x6e>
 8008f2c:	6044      	str	r4, [r0, #4]
 8008f2e:	6085      	str	r5, [r0, #8]
 8008f30:	e00d      	b.n	8008f4e <_Balloc+0x76>
 8008f32:	2221      	movs	r2, #33	@ 0x21
 8008f34:	2104      	movs	r1, #4
 8008f36:	0030      	movs	r0, r6
 8008f38:	f000 fdaa 	bl	8009a90 <_calloc_r>
 8008f3c:	69f3      	ldr	r3, [r6, #28]
 8008f3e:	60e8      	str	r0, [r5, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e1      	bne.n	8008f0a <_Balloc+0x32>
 8008f46:	2000      	movs	r0, #0
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
 8008f4a:	6802      	ldr	r2, [r0, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6103      	str	r3, [r0, #16]
 8008f52:	60c3      	str	r3, [r0, #12]
 8008f54:	e7f8      	b.n	8008f48 <_Balloc+0x70>
 8008f56:	46c0      	nop			@ (mov r8, r8)
 8008f58:	0800b405 	.word	0x0800b405
 8008f5c:	0800b485 	.word	0x0800b485

08008f60 <_Bfree>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	69c6      	ldr	r6, [r0, #28]
 8008f64:	0005      	movs	r5, r0
 8008f66:	000c      	movs	r4, r1
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	d10e      	bne.n	8008f8a <_Bfree+0x2a>
 8008f6c:	2010      	movs	r0, #16
 8008f6e:	f7ff fef7 	bl	8008d60 <malloc>
 8008f72:	1e02      	subs	r2, r0, #0
 8008f74:	61e8      	str	r0, [r5, #28]
 8008f76:	d104      	bne.n	8008f82 <_Bfree+0x22>
 8008f78:	218f      	movs	r1, #143	@ 0x8f
 8008f7a:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <_Bfree+0x40>)
 8008f7c:	4809      	ldr	r0, [pc, #36]	@ (8008fa4 <_Bfree+0x44>)
 8008f7e:	f000 fd69 	bl	8009a54 <__assert_func>
 8008f82:	6046      	str	r6, [r0, #4]
 8008f84:	6086      	str	r6, [r0, #8]
 8008f86:	6006      	str	r6, [r0, #0]
 8008f88:	60c6      	str	r6, [r0, #12]
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	d007      	beq.n	8008f9e <_Bfree+0x3e>
 8008f8e:	69eb      	ldr	r3, [r5, #28]
 8008f90:	6862      	ldr	r2, [r4, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	0092      	lsls	r2, r2, #2
 8008f96:	189b      	adds	r3, r3, r2
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	6022      	str	r2, [r4, #0]
 8008f9c:	601c      	str	r4, [r3, #0]
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	0800b405 	.word	0x0800b405
 8008fa4:	0800b485 	.word	0x0800b485

08008fa8 <__multadd>:
 8008fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008faa:	000f      	movs	r7, r1
 8008fac:	9001      	str	r0, [sp, #4]
 8008fae:	000c      	movs	r4, r1
 8008fb0:	001e      	movs	r6, r3
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	690d      	ldr	r5, [r1, #16]
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	3001      	adds	r0, #1
 8008fbc:	b299      	uxth	r1, r3
 8008fbe:	4351      	muls	r1, r2
 8008fc0:	0c1b      	lsrs	r3, r3, #16
 8008fc2:	4353      	muls	r3, r2
 8008fc4:	1989      	adds	r1, r1, r6
 8008fc6:	0c0e      	lsrs	r6, r1, #16
 8008fc8:	199b      	adds	r3, r3, r6
 8008fca:	0c1e      	lsrs	r6, r3, #16
 8008fcc:	b289      	uxth	r1, r1
 8008fce:	041b      	lsls	r3, r3, #16
 8008fd0:	185b      	adds	r3, r3, r1
 8008fd2:	c708      	stmia	r7!, {r3}
 8008fd4:	4285      	cmp	r5, r0
 8008fd6:	dcef      	bgt.n	8008fb8 <__multadd+0x10>
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	d022      	beq.n	8009022 <__multadd+0x7a>
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	42ab      	cmp	r3, r5
 8008fe0:	dc19      	bgt.n	8009016 <__multadd+0x6e>
 8008fe2:	6861      	ldr	r1, [r4, #4]
 8008fe4:	9801      	ldr	r0, [sp, #4]
 8008fe6:	3101      	adds	r1, #1
 8008fe8:	f7ff ff76 	bl	8008ed8 <_Balloc>
 8008fec:	1e07      	subs	r7, r0, #0
 8008fee:	d105      	bne.n	8008ffc <__multadd+0x54>
 8008ff0:	003a      	movs	r2, r7
 8008ff2:	21ba      	movs	r1, #186	@ 0xba
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8009028 <__multadd+0x80>)
 8008ff6:	480d      	ldr	r0, [pc, #52]	@ (800902c <__multadd+0x84>)
 8008ff8:	f000 fd2c 	bl	8009a54 <__assert_func>
 8008ffc:	0021      	movs	r1, r4
 8008ffe:	6922      	ldr	r2, [r4, #16]
 8009000:	310c      	adds	r1, #12
 8009002:	3202      	adds	r2, #2
 8009004:	0092      	lsls	r2, r2, #2
 8009006:	300c      	adds	r0, #12
 8009008:	f7fe ffe2 	bl	8007fd0 <memcpy>
 800900c:	0021      	movs	r1, r4
 800900e:	9801      	ldr	r0, [sp, #4]
 8009010:	f7ff ffa6 	bl	8008f60 <_Bfree>
 8009014:	003c      	movs	r4, r7
 8009016:	1d2b      	adds	r3, r5, #4
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	18e3      	adds	r3, r4, r3
 800901c:	3501      	adds	r5, #1
 800901e:	605e      	str	r6, [r3, #4]
 8009020:	6125      	str	r5, [r4, #16]
 8009022:	0020      	movs	r0, r4
 8009024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009026:	46c0      	nop			@ (mov r8, r8)
 8009028:	0800b474 	.word	0x0800b474
 800902c:	0800b485 	.word	0x0800b485

08009030 <__hi0bits>:
 8009030:	2280      	movs	r2, #128	@ 0x80
 8009032:	0003      	movs	r3, r0
 8009034:	0252      	lsls	r2, r2, #9
 8009036:	2000      	movs	r0, #0
 8009038:	4293      	cmp	r3, r2
 800903a:	d201      	bcs.n	8009040 <__hi0bits+0x10>
 800903c:	041b      	lsls	r3, r3, #16
 800903e:	3010      	adds	r0, #16
 8009040:	2280      	movs	r2, #128	@ 0x80
 8009042:	0452      	lsls	r2, r2, #17
 8009044:	4293      	cmp	r3, r2
 8009046:	d201      	bcs.n	800904c <__hi0bits+0x1c>
 8009048:	3008      	adds	r0, #8
 800904a:	021b      	lsls	r3, r3, #8
 800904c:	2280      	movs	r2, #128	@ 0x80
 800904e:	0552      	lsls	r2, r2, #21
 8009050:	4293      	cmp	r3, r2
 8009052:	d201      	bcs.n	8009058 <__hi0bits+0x28>
 8009054:	3004      	adds	r0, #4
 8009056:	011b      	lsls	r3, r3, #4
 8009058:	2280      	movs	r2, #128	@ 0x80
 800905a:	05d2      	lsls	r2, r2, #23
 800905c:	4293      	cmp	r3, r2
 800905e:	d201      	bcs.n	8009064 <__hi0bits+0x34>
 8009060:	3002      	adds	r0, #2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	db03      	blt.n	8009070 <__hi0bits+0x40>
 8009068:	3001      	adds	r0, #1
 800906a:	4213      	tst	r3, r2
 800906c:	d100      	bne.n	8009070 <__hi0bits+0x40>
 800906e:	2020      	movs	r0, #32
 8009070:	4770      	bx	lr

08009072 <__lo0bits>:
 8009072:	6803      	ldr	r3, [r0, #0]
 8009074:	0001      	movs	r1, r0
 8009076:	2207      	movs	r2, #7
 8009078:	0018      	movs	r0, r3
 800907a:	4010      	ands	r0, r2
 800907c:	4213      	tst	r3, r2
 800907e:	d00d      	beq.n	800909c <__lo0bits+0x2a>
 8009080:	3a06      	subs	r2, #6
 8009082:	2000      	movs	r0, #0
 8009084:	4213      	tst	r3, r2
 8009086:	d105      	bne.n	8009094 <__lo0bits+0x22>
 8009088:	3002      	adds	r0, #2
 800908a:	4203      	tst	r3, r0
 800908c:	d003      	beq.n	8009096 <__lo0bits+0x24>
 800908e:	40d3      	lsrs	r3, r2
 8009090:	0010      	movs	r0, r2
 8009092:	600b      	str	r3, [r1, #0]
 8009094:	4770      	bx	lr
 8009096:	089b      	lsrs	r3, r3, #2
 8009098:	600b      	str	r3, [r1, #0]
 800909a:	e7fb      	b.n	8009094 <__lo0bits+0x22>
 800909c:	b29a      	uxth	r2, r3
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d101      	bne.n	80090a6 <__lo0bits+0x34>
 80090a2:	2010      	movs	r0, #16
 80090a4:	0c1b      	lsrs	r3, r3, #16
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d101      	bne.n	80090b0 <__lo0bits+0x3e>
 80090ac:	3008      	adds	r0, #8
 80090ae:	0a1b      	lsrs	r3, r3, #8
 80090b0:	071a      	lsls	r2, r3, #28
 80090b2:	d101      	bne.n	80090b8 <__lo0bits+0x46>
 80090b4:	3004      	adds	r0, #4
 80090b6:	091b      	lsrs	r3, r3, #4
 80090b8:	079a      	lsls	r2, r3, #30
 80090ba:	d101      	bne.n	80090c0 <__lo0bits+0x4e>
 80090bc:	3002      	adds	r0, #2
 80090be:	089b      	lsrs	r3, r3, #2
 80090c0:	07da      	lsls	r2, r3, #31
 80090c2:	d4e9      	bmi.n	8009098 <__lo0bits+0x26>
 80090c4:	3001      	adds	r0, #1
 80090c6:	085b      	lsrs	r3, r3, #1
 80090c8:	d1e6      	bne.n	8009098 <__lo0bits+0x26>
 80090ca:	2020      	movs	r0, #32
 80090cc:	e7e2      	b.n	8009094 <__lo0bits+0x22>
	...

080090d0 <__i2b>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	000c      	movs	r4, r1
 80090d4:	2101      	movs	r1, #1
 80090d6:	f7ff feff 	bl	8008ed8 <_Balloc>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d107      	bne.n	80090ee <__i2b+0x1e>
 80090de:	2146      	movs	r1, #70	@ 0x46
 80090e0:	4c05      	ldr	r4, [pc, #20]	@ (80090f8 <__i2b+0x28>)
 80090e2:	0002      	movs	r2, r0
 80090e4:	4b05      	ldr	r3, [pc, #20]	@ (80090fc <__i2b+0x2c>)
 80090e6:	0020      	movs	r0, r4
 80090e8:	31ff      	adds	r1, #255	@ 0xff
 80090ea:	f000 fcb3 	bl	8009a54 <__assert_func>
 80090ee:	2301      	movs	r3, #1
 80090f0:	6144      	str	r4, [r0, #20]
 80090f2:	6103      	str	r3, [r0, #16]
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	46c0      	nop			@ (mov r8, r8)
 80090f8:	0800b485 	.word	0x0800b485
 80090fc:	0800b474 	.word	0x0800b474

08009100 <__multiply>:
 8009100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009102:	0014      	movs	r4, r2
 8009104:	690a      	ldr	r2, [r1, #16]
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	000d      	movs	r5, r1
 800910a:	b089      	sub	sp, #36	@ 0x24
 800910c:	429a      	cmp	r2, r3
 800910e:	db02      	blt.n	8009116 <__multiply+0x16>
 8009110:	0023      	movs	r3, r4
 8009112:	000c      	movs	r4, r1
 8009114:	001d      	movs	r5, r3
 8009116:	6927      	ldr	r7, [r4, #16]
 8009118:	692e      	ldr	r6, [r5, #16]
 800911a:	6861      	ldr	r1, [r4, #4]
 800911c:	19bb      	adds	r3, r7, r6
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	19ba      	adds	r2, r7, r6
 8009124:	4293      	cmp	r3, r2
 8009126:	da00      	bge.n	800912a <__multiply+0x2a>
 8009128:	3101      	adds	r1, #1
 800912a:	f7ff fed5 	bl	8008ed8 <_Balloc>
 800912e:	4684      	mov	ip, r0
 8009130:	2800      	cmp	r0, #0
 8009132:	d106      	bne.n	8009142 <__multiply+0x42>
 8009134:	21b1      	movs	r1, #177	@ 0xb1
 8009136:	4662      	mov	r2, ip
 8009138:	4b44      	ldr	r3, [pc, #272]	@ (800924c <__multiply+0x14c>)
 800913a:	4845      	ldr	r0, [pc, #276]	@ (8009250 <__multiply+0x150>)
 800913c:	0049      	lsls	r1, r1, #1
 800913e:	f000 fc89 	bl	8009a54 <__assert_func>
 8009142:	0002      	movs	r2, r0
 8009144:	19bb      	adds	r3, r7, r6
 8009146:	3214      	adds	r2, #20
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	18d3      	adds	r3, r2, r3
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	2100      	movs	r1, #0
 8009150:	0013      	movs	r3, r2
 8009152:	9801      	ldr	r0, [sp, #4]
 8009154:	4283      	cmp	r3, r0
 8009156:	d328      	bcc.n	80091aa <__multiply+0xaa>
 8009158:	0023      	movs	r3, r4
 800915a:	00bf      	lsls	r7, r7, #2
 800915c:	3314      	adds	r3, #20
 800915e:	9304      	str	r3, [sp, #16]
 8009160:	3514      	adds	r5, #20
 8009162:	19db      	adds	r3, r3, r7
 8009164:	00b6      	lsls	r6, r6, #2
 8009166:	9302      	str	r3, [sp, #8]
 8009168:	19ab      	adds	r3, r5, r6
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	2304      	movs	r3, #4
 800916e:	9305      	str	r3, [sp, #20]
 8009170:	0023      	movs	r3, r4
 8009172:	9902      	ldr	r1, [sp, #8]
 8009174:	3315      	adds	r3, #21
 8009176:	4299      	cmp	r1, r3
 8009178:	d305      	bcc.n	8009186 <__multiply+0x86>
 800917a:	1b0c      	subs	r4, r1, r4
 800917c:	3c15      	subs	r4, #21
 800917e:	08a4      	lsrs	r4, r4, #2
 8009180:	3401      	adds	r4, #1
 8009182:	00a3      	lsls	r3, r4, #2
 8009184:	9305      	str	r3, [sp, #20]
 8009186:	9b07      	ldr	r3, [sp, #28]
 8009188:	429d      	cmp	r5, r3
 800918a:	d310      	bcc.n	80091ae <__multiply+0xae>
 800918c:	9b00      	ldr	r3, [sp, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	dd05      	ble.n	800919e <__multiply+0x9e>
 8009192:	9b01      	ldr	r3, [sp, #4]
 8009194:	3b04      	subs	r3, #4
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d052      	beq.n	8009244 <__multiply+0x144>
 800919e:	4663      	mov	r3, ip
 80091a0:	4660      	mov	r0, ip
 80091a2:	9a00      	ldr	r2, [sp, #0]
 80091a4:	611a      	str	r2, [r3, #16]
 80091a6:	b009      	add	sp, #36	@ 0x24
 80091a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091aa:	c302      	stmia	r3!, {r1}
 80091ac:	e7d1      	b.n	8009152 <__multiply+0x52>
 80091ae:	682c      	ldr	r4, [r5, #0]
 80091b0:	b2a4      	uxth	r4, r4
 80091b2:	2c00      	cmp	r4, #0
 80091b4:	d01f      	beq.n	80091f6 <__multiply+0xf6>
 80091b6:	2300      	movs	r3, #0
 80091b8:	0017      	movs	r7, r2
 80091ba:	9e04      	ldr	r6, [sp, #16]
 80091bc:	9303      	str	r3, [sp, #12]
 80091be:	ce08      	ldmia	r6!, {r3}
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	9306      	str	r3, [sp, #24]
 80091c4:	466b      	mov	r3, sp
 80091c6:	8b1b      	ldrh	r3, [r3, #24]
 80091c8:	b288      	uxth	r0, r1
 80091ca:	4363      	muls	r3, r4
 80091cc:	181b      	adds	r3, r3, r0
 80091ce:	9803      	ldr	r0, [sp, #12]
 80091d0:	0c09      	lsrs	r1, r1, #16
 80091d2:	181b      	adds	r3, r3, r0
 80091d4:	9806      	ldr	r0, [sp, #24]
 80091d6:	0c00      	lsrs	r0, r0, #16
 80091d8:	4360      	muls	r0, r4
 80091da:	1840      	adds	r0, r0, r1
 80091dc:	0c19      	lsrs	r1, r3, #16
 80091de:	1841      	adds	r1, r0, r1
 80091e0:	0c08      	lsrs	r0, r1, #16
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	0409      	lsls	r1, r1, #16
 80091e6:	4319      	orrs	r1, r3
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	9003      	str	r0, [sp, #12]
 80091ec:	c702      	stmia	r7!, {r1}
 80091ee:	42b3      	cmp	r3, r6
 80091f0:	d8e5      	bhi.n	80091be <__multiply+0xbe>
 80091f2:	9b05      	ldr	r3, [sp, #20]
 80091f4:	50d0      	str	r0, [r2, r3]
 80091f6:	682c      	ldr	r4, [r5, #0]
 80091f8:	0c24      	lsrs	r4, r4, #16
 80091fa:	d020      	beq.n	800923e <__multiply+0x13e>
 80091fc:	2100      	movs	r1, #0
 80091fe:	0010      	movs	r0, r2
 8009200:	6813      	ldr	r3, [r2, #0]
 8009202:	9e04      	ldr	r6, [sp, #16]
 8009204:	9103      	str	r1, [sp, #12]
 8009206:	6831      	ldr	r1, [r6, #0]
 8009208:	6807      	ldr	r7, [r0, #0]
 800920a:	b289      	uxth	r1, r1
 800920c:	4361      	muls	r1, r4
 800920e:	0c3f      	lsrs	r7, r7, #16
 8009210:	19c9      	adds	r1, r1, r7
 8009212:	9f03      	ldr	r7, [sp, #12]
 8009214:	b29b      	uxth	r3, r3
 8009216:	19c9      	adds	r1, r1, r7
 8009218:	040f      	lsls	r7, r1, #16
 800921a:	431f      	orrs	r7, r3
 800921c:	6007      	str	r7, [r0, #0]
 800921e:	ce80      	ldmia	r6!, {r7}
 8009220:	6843      	ldr	r3, [r0, #4]
 8009222:	0c3f      	lsrs	r7, r7, #16
 8009224:	4367      	muls	r7, r4
 8009226:	b29b      	uxth	r3, r3
 8009228:	0c09      	lsrs	r1, r1, #16
 800922a:	18fb      	adds	r3, r7, r3
 800922c:	185b      	adds	r3, r3, r1
 800922e:	0c19      	lsrs	r1, r3, #16
 8009230:	9103      	str	r1, [sp, #12]
 8009232:	9902      	ldr	r1, [sp, #8]
 8009234:	3004      	adds	r0, #4
 8009236:	42b1      	cmp	r1, r6
 8009238:	d8e5      	bhi.n	8009206 <__multiply+0x106>
 800923a:	9905      	ldr	r1, [sp, #20]
 800923c:	5053      	str	r3, [r2, r1]
 800923e:	3504      	adds	r5, #4
 8009240:	3204      	adds	r2, #4
 8009242:	e7a0      	b.n	8009186 <__multiply+0x86>
 8009244:	9b00      	ldr	r3, [sp, #0]
 8009246:	3b01      	subs	r3, #1
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	e79f      	b.n	800918c <__multiply+0x8c>
 800924c:	0800b474 	.word	0x0800b474
 8009250:	0800b485 	.word	0x0800b485

08009254 <__pow5mult>:
 8009254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009256:	2303      	movs	r3, #3
 8009258:	0015      	movs	r5, r2
 800925a:	0007      	movs	r7, r0
 800925c:	000e      	movs	r6, r1
 800925e:	401a      	ands	r2, r3
 8009260:	421d      	tst	r5, r3
 8009262:	d008      	beq.n	8009276 <__pow5mult+0x22>
 8009264:	4925      	ldr	r1, [pc, #148]	@ (80092fc <__pow5mult+0xa8>)
 8009266:	3a01      	subs	r2, #1
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	5852      	ldr	r2, [r2, r1]
 800926c:	2300      	movs	r3, #0
 800926e:	0031      	movs	r1, r6
 8009270:	f7ff fe9a 	bl	8008fa8 <__multadd>
 8009274:	0006      	movs	r6, r0
 8009276:	10ad      	asrs	r5, r5, #2
 8009278:	d03d      	beq.n	80092f6 <__pow5mult+0xa2>
 800927a:	69fc      	ldr	r4, [r7, #28]
 800927c:	2c00      	cmp	r4, #0
 800927e:	d10f      	bne.n	80092a0 <__pow5mult+0x4c>
 8009280:	2010      	movs	r0, #16
 8009282:	f7ff fd6d 	bl	8008d60 <malloc>
 8009286:	1e02      	subs	r2, r0, #0
 8009288:	61f8      	str	r0, [r7, #28]
 800928a:	d105      	bne.n	8009298 <__pow5mult+0x44>
 800928c:	21b4      	movs	r1, #180	@ 0xb4
 800928e:	4b1c      	ldr	r3, [pc, #112]	@ (8009300 <__pow5mult+0xac>)
 8009290:	481c      	ldr	r0, [pc, #112]	@ (8009304 <__pow5mult+0xb0>)
 8009292:	31ff      	adds	r1, #255	@ 0xff
 8009294:	f000 fbde 	bl	8009a54 <__assert_func>
 8009298:	6044      	str	r4, [r0, #4]
 800929a:	6084      	str	r4, [r0, #8]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	60c4      	str	r4, [r0, #12]
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	689c      	ldr	r4, [r3, #8]
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	d108      	bne.n	80092bc <__pow5mult+0x68>
 80092aa:	0038      	movs	r0, r7
 80092ac:	4916      	ldr	r1, [pc, #88]	@ (8009308 <__pow5mult+0xb4>)
 80092ae:	f7ff ff0f 	bl	80090d0 <__i2b>
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	0004      	movs	r4, r0
 80092b6:	6098      	str	r0, [r3, #8]
 80092b8:	2300      	movs	r3, #0
 80092ba:	6003      	str	r3, [r0, #0]
 80092bc:	2301      	movs	r3, #1
 80092be:	421d      	tst	r5, r3
 80092c0:	d00a      	beq.n	80092d8 <__pow5mult+0x84>
 80092c2:	0031      	movs	r1, r6
 80092c4:	0022      	movs	r2, r4
 80092c6:	0038      	movs	r0, r7
 80092c8:	f7ff ff1a 	bl	8009100 <__multiply>
 80092cc:	0031      	movs	r1, r6
 80092ce:	9001      	str	r0, [sp, #4]
 80092d0:	0038      	movs	r0, r7
 80092d2:	f7ff fe45 	bl	8008f60 <_Bfree>
 80092d6:	9e01      	ldr	r6, [sp, #4]
 80092d8:	106d      	asrs	r5, r5, #1
 80092da:	d00c      	beq.n	80092f6 <__pow5mult+0xa2>
 80092dc:	6820      	ldr	r0, [r4, #0]
 80092de:	2800      	cmp	r0, #0
 80092e0:	d107      	bne.n	80092f2 <__pow5mult+0x9e>
 80092e2:	0022      	movs	r2, r4
 80092e4:	0021      	movs	r1, r4
 80092e6:	0038      	movs	r0, r7
 80092e8:	f7ff ff0a 	bl	8009100 <__multiply>
 80092ec:	2300      	movs	r3, #0
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	6003      	str	r3, [r0, #0]
 80092f2:	0004      	movs	r4, r0
 80092f4:	e7e2      	b.n	80092bc <__pow5mult+0x68>
 80092f6:	0030      	movs	r0, r6
 80092f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092fa:	46c0      	nop			@ (mov r8, r8)
 80092fc:	0800b538 	.word	0x0800b538
 8009300:	0800b405 	.word	0x0800b405
 8009304:	0800b485 	.word	0x0800b485
 8009308:	00000271 	.word	0x00000271

0800930c <__lshift>:
 800930c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800930e:	000c      	movs	r4, r1
 8009310:	0016      	movs	r6, r2
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	1157      	asrs	r7, r2, #5
 8009316:	b085      	sub	sp, #20
 8009318:	18fb      	adds	r3, r7, r3
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	3301      	adds	r3, #1
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	6849      	ldr	r1, [r1, #4]
 8009322:	68a3      	ldr	r3, [r4, #8]
 8009324:	9002      	str	r0, [sp, #8]
 8009326:	9a00      	ldr	r2, [sp, #0]
 8009328:	4293      	cmp	r3, r2
 800932a:	db10      	blt.n	800934e <__lshift+0x42>
 800932c:	9802      	ldr	r0, [sp, #8]
 800932e:	f7ff fdd3 	bl	8008ed8 <_Balloc>
 8009332:	2300      	movs	r3, #0
 8009334:	0001      	movs	r1, r0
 8009336:	0005      	movs	r5, r0
 8009338:	001a      	movs	r2, r3
 800933a:	3114      	adds	r1, #20
 800933c:	4298      	cmp	r0, r3
 800933e:	d10c      	bne.n	800935a <__lshift+0x4e>
 8009340:	21ef      	movs	r1, #239	@ 0xef
 8009342:	002a      	movs	r2, r5
 8009344:	4b25      	ldr	r3, [pc, #148]	@ (80093dc <__lshift+0xd0>)
 8009346:	4826      	ldr	r0, [pc, #152]	@ (80093e0 <__lshift+0xd4>)
 8009348:	0049      	lsls	r1, r1, #1
 800934a:	f000 fb83 	bl	8009a54 <__assert_func>
 800934e:	3101      	adds	r1, #1
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	e7e8      	b.n	8009326 <__lshift+0x1a>
 8009354:	0098      	lsls	r0, r3, #2
 8009356:	500a      	str	r2, [r1, r0]
 8009358:	3301      	adds	r3, #1
 800935a:	42bb      	cmp	r3, r7
 800935c:	dbfa      	blt.n	8009354 <__lshift+0x48>
 800935e:	43fb      	mvns	r3, r7
 8009360:	17db      	asrs	r3, r3, #31
 8009362:	401f      	ands	r7, r3
 8009364:	00bf      	lsls	r7, r7, #2
 8009366:	0023      	movs	r3, r4
 8009368:	201f      	movs	r0, #31
 800936a:	19c9      	adds	r1, r1, r7
 800936c:	0037      	movs	r7, r6
 800936e:	6922      	ldr	r2, [r4, #16]
 8009370:	3314      	adds	r3, #20
 8009372:	0092      	lsls	r2, r2, #2
 8009374:	189a      	adds	r2, r3, r2
 8009376:	4007      	ands	r7, r0
 8009378:	4206      	tst	r6, r0
 800937a:	d029      	beq.n	80093d0 <__lshift+0xc4>
 800937c:	3001      	adds	r0, #1
 800937e:	1bc0      	subs	r0, r0, r7
 8009380:	9003      	str	r0, [sp, #12]
 8009382:	468c      	mov	ip, r1
 8009384:	2000      	movs	r0, #0
 8009386:	681e      	ldr	r6, [r3, #0]
 8009388:	40be      	lsls	r6, r7
 800938a:	4306      	orrs	r6, r0
 800938c:	4660      	mov	r0, ip
 800938e:	c040      	stmia	r0!, {r6}
 8009390:	4684      	mov	ip, r0
 8009392:	9e03      	ldr	r6, [sp, #12]
 8009394:	cb01      	ldmia	r3!, {r0}
 8009396:	40f0      	lsrs	r0, r6
 8009398:	429a      	cmp	r2, r3
 800939a:	d8f4      	bhi.n	8009386 <__lshift+0x7a>
 800939c:	0026      	movs	r6, r4
 800939e:	3615      	adds	r6, #21
 80093a0:	2304      	movs	r3, #4
 80093a2:	42b2      	cmp	r2, r6
 80093a4:	d304      	bcc.n	80093b0 <__lshift+0xa4>
 80093a6:	1b13      	subs	r3, r2, r4
 80093a8:	3b15      	subs	r3, #21
 80093aa:	089b      	lsrs	r3, r3, #2
 80093ac:	3301      	adds	r3, #1
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	50c8      	str	r0, [r1, r3]
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d002      	beq.n	80093bc <__lshift+0xb0>
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	3302      	adds	r3, #2
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	9b00      	ldr	r3, [sp, #0]
 80093be:	9802      	ldr	r0, [sp, #8]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	0021      	movs	r1, r4
 80093c4:	612b      	str	r3, [r5, #16]
 80093c6:	f7ff fdcb 	bl	8008f60 <_Bfree>
 80093ca:	0028      	movs	r0, r5
 80093cc:	b005      	add	sp, #20
 80093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d0:	cb01      	ldmia	r3!, {r0}
 80093d2:	c101      	stmia	r1!, {r0}
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d8fb      	bhi.n	80093d0 <__lshift+0xc4>
 80093d8:	e7f0      	b.n	80093bc <__lshift+0xb0>
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	0800b474 	.word	0x0800b474
 80093e0:	0800b485 	.word	0x0800b485

080093e4 <__mcmp>:
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	690b      	ldr	r3, [r1, #16]
 80093e8:	6904      	ldr	r4, [r0, #16]
 80093ea:	0002      	movs	r2, r0
 80093ec:	1ae0      	subs	r0, r4, r3
 80093ee:	429c      	cmp	r4, r3
 80093f0:	d10f      	bne.n	8009412 <__mcmp+0x2e>
 80093f2:	3214      	adds	r2, #20
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	3114      	adds	r1, #20
 80093f8:	0014      	movs	r4, r2
 80093fa:	18c9      	adds	r1, r1, r3
 80093fc:	18d2      	adds	r2, r2, r3
 80093fe:	3a04      	subs	r2, #4
 8009400:	3904      	subs	r1, #4
 8009402:	6815      	ldr	r5, [r2, #0]
 8009404:	680b      	ldr	r3, [r1, #0]
 8009406:	429d      	cmp	r5, r3
 8009408:	d004      	beq.n	8009414 <__mcmp+0x30>
 800940a:	2001      	movs	r0, #1
 800940c:	429d      	cmp	r5, r3
 800940e:	d200      	bcs.n	8009412 <__mcmp+0x2e>
 8009410:	3802      	subs	r0, #2
 8009412:	bd30      	pop	{r4, r5, pc}
 8009414:	4294      	cmp	r4, r2
 8009416:	d3f2      	bcc.n	80093fe <__mcmp+0x1a>
 8009418:	e7fb      	b.n	8009412 <__mcmp+0x2e>
	...

0800941c <__mdiff>:
 800941c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800941e:	000c      	movs	r4, r1
 8009420:	b087      	sub	sp, #28
 8009422:	9000      	str	r0, [sp, #0]
 8009424:	0011      	movs	r1, r2
 8009426:	0020      	movs	r0, r4
 8009428:	0017      	movs	r7, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d110      	bne.n	8009454 <__mdiff+0x38>
 8009432:	0001      	movs	r1, r0
 8009434:	9800      	ldr	r0, [sp, #0]
 8009436:	f7ff fd4f 	bl	8008ed8 <_Balloc>
 800943a:	1e02      	subs	r2, r0, #0
 800943c:	d104      	bne.n	8009448 <__mdiff+0x2c>
 800943e:	4b40      	ldr	r3, [pc, #256]	@ (8009540 <__mdiff+0x124>)
 8009440:	4840      	ldr	r0, [pc, #256]	@ (8009544 <__mdiff+0x128>)
 8009442:	4941      	ldr	r1, [pc, #260]	@ (8009548 <__mdiff+0x12c>)
 8009444:	f000 fb06 	bl	8009a54 <__assert_func>
 8009448:	2301      	movs	r3, #1
 800944a:	6145      	str	r5, [r0, #20]
 800944c:	6103      	str	r3, [r0, #16]
 800944e:	0010      	movs	r0, r2
 8009450:	b007      	add	sp, #28
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009454:	2600      	movs	r6, #0
 8009456:	42b0      	cmp	r0, r6
 8009458:	da03      	bge.n	8009462 <__mdiff+0x46>
 800945a:	0023      	movs	r3, r4
 800945c:	003c      	movs	r4, r7
 800945e:	001f      	movs	r7, r3
 8009460:	3601      	adds	r6, #1
 8009462:	6861      	ldr	r1, [r4, #4]
 8009464:	9800      	ldr	r0, [sp, #0]
 8009466:	f7ff fd37 	bl	8008ed8 <_Balloc>
 800946a:	1e02      	subs	r2, r0, #0
 800946c:	d103      	bne.n	8009476 <__mdiff+0x5a>
 800946e:	4b34      	ldr	r3, [pc, #208]	@ (8009540 <__mdiff+0x124>)
 8009470:	4834      	ldr	r0, [pc, #208]	@ (8009544 <__mdiff+0x128>)
 8009472:	4936      	ldr	r1, [pc, #216]	@ (800954c <__mdiff+0x130>)
 8009474:	e7e6      	b.n	8009444 <__mdiff+0x28>
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	3414      	adds	r4, #20
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	18e3      	adds	r3, r4, r3
 8009480:	0021      	movs	r1, r4
 8009482:	9401      	str	r4, [sp, #4]
 8009484:	003c      	movs	r4, r7
 8009486:	9302      	str	r3, [sp, #8]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3414      	adds	r4, #20
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	18e3      	adds	r3, r4, r3
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	0003      	movs	r3, r0
 8009494:	60c6      	str	r6, [r0, #12]
 8009496:	468c      	mov	ip, r1
 8009498:	2000      	movs	r0, #0
 800949a:	3314      	adds	r3, #20
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	9305      	str	r3, [sp, #20]
 80094a0:	4663      	mov	r3, ip
 80094a2:	cb20      	ldmia	r3!, {r5}
 80094a4:	b2a9      	uxth	r1, r5
 80094a6:	000e      	movs	r6, r1
 80094a8:	469c      	mov	ip, r3
 80094aa:	cc08      	ldmia	r4!, {r3}
 80094ac:	0c2d      	lsrs	r5, r5, #16
 80094ae:	b299      	uxth	r1, r3
 80094b0:	1a71      	subs	r1, r6, r1
 80094b2:	1809      	adds	r1, r1, r0
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	1408      	asrs	r0, r1, #16
 80094b8:	1aeb      	subs	r3, r5, r3
 80094ba:	181b      	adds	r3, r3, r0
 80094bc:	1418      	asrs	r0, r3, #16
 80094be:	b289      	uxth	r1, r1
 80094c0:	041b      	lsls	r3, r3, #16
 80094c2:	4319      	orrs	r1, r3
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	c302      	stmia	r3!, {r1}
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	42a3      	cmp	r3, r4
 80094ce:	d8e7      	bhi.n	80094a0 <__mdiff+0x84>
 80094d0:	0039      	movs	r1, r7
 80094d2:	9c03      	ldr	r4, [sp, #12]
 80094d4:	3115      	adds	r1, #21
 80094d6:	2304      	movs	r3, #4
 80094d8:	428c      	cmp	r4, r1
 80094da:	d304      	bcc.n	80094e6 <__mdiff+0xca>
 80094dc:	1be3      	subs	r3, r4, r7
 80094de:	3b15      	subs	r3, #21
 80094e0:	089b      	lsrs	r3, r3, #2
 80094e2:	3301      	adds	r3, #1
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	9901      	ldr	r1, [sp, #4]
 80094e8:	18cd      	adds	r5, r1, r3
 80094ea:	9904      	ldr	r1, [sp, #16]
 80094ec:	002e      	movs	r6, r5
 80094ee:	18cb      	adds	r3, r1, r3
 80094f0:	001f      	movs	r7, r3
 80094f2:	9902      	ldr	r1, [sp, #8]
 80094f4:	428e      	cmp	r6, r1
 80094f6:	d311      	bcc.n	800951c <__mdiff+0x100>
 80094f8:	9c02      	ldr	r4, [sp, #8]
 80094fa:	1ee9      	subs	r1, r5, #3
 80094fc:	2000      	movs	r0, #0
 80094fe:	428c      	cmp	r4, r1
 8009500:	d304      	bcc.n	800950c <__mdiff+0xf0>
 8009502:	0021      	movs	r1, r4
 8009504:	3103      	adds	r1, #3
 8009506:	1b49      	subs	r1, r1, r5
 8009508:	0889      	lsrs	r1, r1, #2
 800950a:	0088      	lsls	r0, r1, #2
 800950c:	181b      	adds	r3, r3, r0
 800950e:	3b04      	subs	r3, #4
 8009510:	6819      	ldr	r1, [r3, #0]
 8009512:	2900      	cmp	r1, #0
 8009514:	d010      	beq.n	8009538 <__mdiff+0x11c>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	6113      	str	r3, [r2, #16]
 800951a:	e798      	b.n	800944e <__mdiff+0x32>
 800951c:	4684      	mov	ip, r0
 800951e:	ce02      	ldmia	r6!, {r1}
 8009520:	b288      	uxth	r0, r1
 8009522:	4460      	add	r0, ip
 8009524:	1400      	asrs	r0, r0, #16
 8009526:	0c0c      	lsrs	r4, r1, #16
 8009528:	1904      	adds	r4, r0, r4
 800952a:	4461      	add	r1, ip
 800952c:	1420      	asrs	r0, r4, #16
 800952e:	b289      	uxth	r1, r1
 8009530:	0424      	lsls	r4, r4, #16
 8009532:	4321      	orrs	r1, r4
 8009534:	c702      	stmia	r7!, {r1}
 8009536:	e7dc      	b.n	80094f2 <__mdiff+0xd6>
 8009538:	9900      	ldr	r1, [sp, #0]
 800953a:	3901      	subs	r1, #1
 800953c:	9100      	str	r1, [sp, #0]
 800953e:	e7e6      	b.n	800950e <__mdiff+0xf2>
 8009540:	0800b474 	.word	0x0800b474
 8009544:	0800b485 	.word	0x0800b485
 8009548:	00000237 	.word	0x00000237
 800954c:	00000245 	.word	0x00000245

08009550 <__d2b>:
 8009550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009552:	2101      	movs	r1, #1
 8009554:	0016      	movs	r6, r2
 8009556:	001f      	movs	r7, r3
 8009558:	f7ff fcbe 	bl	8008ed8 <_Balloc>
 800955c:	1e04      	subs	r4, r0, #0
 800955e:	d105      	bne.n	800956c <__d2b+0x1c>
 8009560:	0022      	movs	r2, r4
 8009562:	4b25      	ldr	r3, [pc, #148]	@ (80095f8 <__d2b+0xa8>)
 8009564:	4825      	ldr	r0, [pc, #148]	@ (80095fc <__d2b+0xac>)
 8009566:	4926      	ldr	r1, [pc, #152]	@ (8009600 <__d2b+0xb0>)
 8009568:	f000 fa74 	bl	8009a54 <__assert_func>
 800956c:	033b      	lsls	r3, r7, #12
 800956e:	007d      	lsls	r5, r7, #1
 8009570:	0b1b      	lsrs	r3, r3, #12
 8009572:	0d6d      	lsrs	r5, r5, #21
 8009574:	d002      	beq.n	800957c <__d2b+0x2c>
 8009576:	2280      	movs	r2, #128	@ 0x80
 8009578:	0352      	lsls	r2, r2, #13
 800957a:	4313      	orrs	r3, r2
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	2e00      	cmp	r6, #0
 8009580:	d025      	beq.n	80095ce <__d2b+0x7e>
 8009582:	4668      	mov	r0, sp
 8009584:	9600      	str	r6, [sp, #0]
 8009586:	f7ff fd74 	bl	8009072 <__lo0bits>
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	9900      	ldr	r1, [sp, #0]
 800958e:	2800      	cmp	r0, #0
 8009590:	d01b      	beq.n	80095ca <__d2b+0x7a>
 8009592:	2220      	movs	r2, #32
 8009594:	001e      	movs	r6, r3
 8009596:	1a12      	subs	r2, r2, r0
 8009598:	4096      	lsls	r6, r2
 800959a:	0032      	movs	r2, r6
 800959c:	40c3      	lsrs	r3, r0
 800959e:	430a      	orrs	r2, r1
 80095a0:	6162      	str	r2, [r4, #20]
 80095a2:	9301      	str	r3, [sp, #4]
 80095a4:	9e01      	ldr	r6, [sp, #4]
 80095a6:	61a6      	str	r6, [r4, #24]
 80095a8:	1e73      	subs	r3, r6, #1
 80095aa:	419e      	sbcs	r6, r3
 80095ac:	3601      	adds	r6, #1
 80095ae:	6126      	str	r6, [r4, #16]
 80095b0:	2d00      	cmp	r5, #0
 80095b2:	d014      	beq.n	80095de <__d2b+0x8e>
 80095b4:	2635      	movs	r6, #53	@ 0x35
 80095b6:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <__d2b+0xb4>)
 80095b8:	18ed      	adds	r5, r5, r3
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	182d      	adds	r5, r5, r0
 80095be:	601d      	str	r5, [r3, #0]
 80095c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c2:	1a36      	subs	r6, r6, r0
 80095c4:	601e      	str	r6, [r3, #0]
 80095c6:	0020      	movs	r0, r4
 80095c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095ca:	6161      	str	r1, [r4, #20]
 80095cc:	e7ea      	b.n	80095a4 <__d2b+0x54>
 80095ce:	a801      	add	r0, sp, #4
 80095d0:	f7ff fd4f 	bl	8009072 <__lo0bits>
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	2601      	movs	r6, #1
 80095d8:	6163      	str	r3, [r4, #20]
 80095da:	3020      	adds	r0, #32
 80095dc:	e7e7      	b.n	80095ae <__d2b+0x5e>
 80095de:	4b0a      	ldr	r3, [pc, #40]	@ (8009608 <__d2b+0xb8>)
 80095e0:	18c0      	adds	r0, r0, r3
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	6018      	str	r0, [r3, #0]
 80095e6:	4b09      	ldr	r3, [pc, #36]	@ (800960c <__d2b+0xbc>)
 80095e8:	18f3      	adds	r3, r6, r3
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	18e3      	adds	r3, r4, r3
 80095ee:	6958      	ldr	r0, [r3, #20]
 80095f0:	f7ff fd1e 	bl	8009030 <__hi0bits>
 80095f4:	0176      	lsls	r6, r6, #5
 80095f6:	e7e3      	b.n	80095c0 <__d2b+0x70>
 80095f8:	0800b474 	.word	0x0800b474
 80095fc:	0800b485 	.word	0x0800b485
 8009600:	0000030f 	.word	0x0000030f
 8009604:	fffffbcd 	.word	0xfffffbcd
 8009608:	fffffbce 	.word	0xfffffbce
 800960c:	3fffffff 	.word	0x3fffffff

08009610 <__ssputs_r>:
 8009610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009612:	688e      	ldr	r6, [r1, #8]
 8009614:	b085      	sub	sp, #20
 8009616:	001f      	movs	r7, r3
 8009618:	000c      	movs	r4, r1
 800961a:	680b      	ldr	r3, [r1, #0]
 800961c:	9002      	str	r0, [sp, #8]
 800961e:	9203      	str	r2, [sp, #12]
 8009620:	42be      	cmp	r6, r7
 8009622:	d830      	bhi.n	8009686 <__ssputs_r+0x76>
 8009624:	210c      	movs	r1, #12
 8009626:	5e62      	ldrsh	r2, [r4, r1]
 8009628:	2190      	movs	r1, #144	@ 0x90
 800962a:	00c9      	lsls	r1, r1, #3
 800962c:	420a      	tst	r2, r1
 800962e:	d028      	beq.n	8009682 <__ssputs_r+0x72>
 8009630:	2003      	movs	r0, #3
 8009632:	6921      	ldr	r1, [r4, #16]
 8009634:	1a5b      	subs	r3, r3, r1
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	6963      	ldr	r3, [r4, #20]
 800963a:	4343      	muls	r3, r0
 800963c:	9801      	ldr	r0, [sp, #4]
 800963e:	0fdd      	lsrs	r5, r3, #31
 8009640:	18ed      	adds	r5, r5, r3
 8009642:	1c7b      	adds	r3, r7, #1
 8009644:	181b      	adds	r3, r3, r0
 8009646:	106d      	asrs	r5, r5, #1
 8009648:	42ab      	cmp	r3, r5
 800964a:	d900      	bls.n	800964e <__ssputs_r+0x3e>
 800964c:	001d      	movs	r5, r3
 800964e:	0552      	lsls	r2, r2, #21
 8009650:	d528      	bpl.n	80096a4 <__ssputs_r+0x94>
 8009652:	0029      	movs	r1, r5
 8009654:	9802      	ldr	r0, [sp, #8]
 8009656:	f7ff fbaf 	bl	8008db8 <_malloc_r>
 800965a:	1e06      	subs	r6, r0, #0
 800965c:	d02c      	beq.n	80096b8 <__ssputs_r+0xa8>
 800965e:	9a01      	ldr	r2, [sp, #4]
 8009660:	6921      	ldr	r1, [r4, #16]
 8009662:	f7fe fcb5 	bl	8007fd0 <memcpy>
 8009666:	89a2      	ldrh	r2, [r4, #12]
 8009668:	4b18      	ldr	r3, [pc, #96]	@ (80096cc <__ssputs_r+0xbc>)
 800966a:	401a      	ands	r2, r3
 800966c:	2380      	movs	r3, #128	@ 0x80
 800966e:	4313      	orrs	r3, r2
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	6126      	str	r6, [r4, #16]
 8009676:	18f6      	adds	r6, r6, r3
 8009678:	6026      	str	r6, [r4, #0]
 800967a:	003e      	movs	r6, r7
 800967c:	6165      	str	r5, [r4, #20]
 800967e:	1aed      	subs	r5, r5, r3
 8009680:	60a5      	str	r5, [r4, #8]
 8009682:	42be      	cmp	r6, r7
 8009684:	d900      	bls.n	8009688 <__ssputs_r+0x78>
 8009686:	003e      	movs	r6, r7
 8009688:	0032      	movs	r2, r6
 800968a:	9903      	ldr	r1, [sp, #12]
 800968c:	6820      	ldr	r0, [r4, #0]
 800968e:	f7fe fbfb 	bl	8007e88 <memmove>
 8009692:	2000      	movs	r0, #0
 8009694:	68a3      	ldr	r3, [r4, #8]
 8009696:	1b9b      	subs	r3, r3, r6
 8009698:	60a3      	str	r3, [r4, #8]
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	199b      	adds	r3, r3, r6
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	b005      	add	sp, #20
 80096a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a4:	002a      	movs	r2, r5
 80096a6:	9802      	ldr	r0, [sp, #8]
 80096a8:	f000 fa31 	bl	8009b0e <_realloc_r>
 80096ac:	1e06      	subs	r6, r0, #0
 80096ae:	d1e0      	bne.n	8009672 <__ssputs_r+0x62>
 80096b0:	6921      	ldr	r1, [r4, #16]
 80096b2:	9802      	ldr	r0, [sp, #8]
 80096b4:	f7ff fb0a 	bl	8008ccc <_free_r>
 80096b8:	230c      	movs	r3, #12
 80096ba:	2001      	movs	r0, #1
 80096bc:	9a02      	ldr	r2, [sp, #8]
 80096be:	4240      	negs	r0, r0
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	89a2      	ldrh	r2, [r4, #12]
 80096c4:	3334      	adds	r3, #52	@ 0x34
 80096c6:	4313      	orrs	r3, r2
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	e7e9      	b.n	80096a0 <__ssputs_r+0x90>
 80096cc:	fffffb7f 	.word	0xfffffb7f

080096d0 <_svfiprintf_r>:
 80096d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096d2:	b0a1      	sub	sp, #132	@ 0x84
 80096d4:	9003      	str	r0, [sp, #12]
 80096d6:	001d      	movs	r5, r3
 80096d8:	898b      	ldrh	r3, [r1, #12]
 80096da:	000f      	movs	r7, r1
 80096dc:	0016      	movs	r6, r2
 80096de:	061b      	lsls	r3, r3, #24
 80096e0:	d511      	bpl.n	8009706 <_svfiprintf_r+0x36>
 80096e2:	690b      	ldr	r3, [r1, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10e      	bne.n	8009706 <_svfiprintf_r+0x36>
 80096e8:	2140      	movs	r1, #64	@ 0x40
 80096ea:	f7ff fb65 	bl	8008db8 <_malloc_r>
 80096ee:	6038      	str	r0, [r7, #0]
 80096f0:	6138      	str	r0, [r7, #16]
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d105      	bne.n	8009702 <_svfiprintf_r+0x32>
 80096f6:	230c      	movs	r3, #12
 80096f8:	9a03      	ldr	r2, [sp, #12]
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	2001      	movs	r0, #1
 80096fe:	4240      	negs	r0, r0
 8009700:	e0cf      	b.n	80098a2 <_svfiprintf_r+0x1d2>
 8009702:	2340      	movs	r3, #64	@ 0x40
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	2300      	movs	r3, #0
 8009708:	ac08      	add	r4, sp, #32
 800970a:	6163      	str	r3, [r4, #20]
 800970c:	3320      	adds	r3, #32
 800970e:	7663      	strb	r3, [r4, #25]
 8009710:	3310      	adds	r3, #16
 8009712:	76a3      	strb	r3, [r4, #26]
 8009714:	9507      	str	r5, [sp, #28]
 8009716:	0035      	movs	r5, r6
 8009718:	782b      	ldrb	r3, [r5, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <_svfiprintf_r+0x52>
 800971e:	2b25      	cmp	r3, #37	@ 0x25
 8009720:	d148      	bne.n	80097b4 <_svfiprintf_r+0xe4>
 8009722:	1bab      	subs	r3, r5, r6
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	42b5      	cmp	r5, r6
 8009728:	d00b      	beq.n	8009742 <_svfiprintf_r+0x72>
 800972a:	0032      	movs	r2, r6
 800972c:	0039      	movs	r1, r7
 800972e:	9803      	ldr	r0, [sp, #12]
 8009730:	f7ff ff6e 	bl	8009610 <__ssputs_r>
 8009734:	3001      	adds	r0, #1
 8009736:	d100      	bne.n	800973a <_svfiprintf_r+0x6a>
 8009738:	e0ae      	b.n	8009898 <_svfiprintf_r+0x1c8>
 800973a:	6963      	ldr	r3, [r4, #20]
 800973c:	9a05      	ldr	r2, [sp, #20]
 800973e:	189b      	adds	r3, r3, r2
 8009740:	6163      	str	r3, [r4, #20]
 8009742:	782b      	ldrb	r3, [r5, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d100      	bne.n	800974a <_svfiprintf_r+0x7a>
 8009748:	e0a6      	b.n	8009898 <_svfiprintf_r+0x1c8>
 800974a:	2201      	movs	r2, #1
 800974c:	2300      	movs	r3, #0
 800974e:	4252      	negs	r2, r2
 8009750:	6062      	str	r2, [r4, #4]
 8009752:	a904      	add	r1, sp, #16
 8009754:	3254      	adds	r2, #84	@ 0x54
 8009756:	1852      	adds	r2, r2, r1
 8009758:	1c6e      	adds	r6, r5, #1
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	60e3      	str	r3, [r4, #12]
 800975e:	60a3      	str	r3, [r4, #8]
 8009760:	7013      	strb	r3, [r2, #0]
 8009762:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009764:	4b54      	ldr	r3, [pc, #336]	@ (80098b8 <_svfiprintf_r+0x1e8>)
 8009766:	2205      	movs	r2, #5
 8009768:	0018      	movs	r0, r3
 800976a:	7831      	ldrb	r1, [r6, #0]
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	f7fe fc24 	bl	8007fba <memchr>
 8009772:	1c75      	adds	r5, r6, #1
 8009774:	2800      	cmp	r0, #0
 8009776:	d11f      	bne.n	80097b8 <_svfiprintf_r+0xe8>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	06d3      	lsls	r3, r2, #27
 800977c:	d504      	bpl.n	8009788 <_svfiprintf_r+0xb8>
 800977e:	2353      	movs	r3, #83	@ 0x53
 8009780:	a904      	add	r1, sp, #16
 8009782:	185b      	adds	r3, r3, r1
 8009784:	2120      	movs	r1, #32
 8009786:	7019      	strb	r1, [r3, #0]
 8009788:	0713      	lsls	r3, r2, #28
 800978a:	d504      	bpl.n	8009796 <_svfiprintf_r+0xc6>
 800978c:	2353      	movs	r3, #83	@ 0x53
 800978e:	a904      	add	r1, sp, #16
 8009790:	185b      	adds	r3, r3, r1
 8009792:	212b      	movs	r1, #43	@ 0x2b
 8009794:	7019      	strb	r1, [r3, #0]
 8009796:	7833      	ldrb	r3, [r6, #0]
 8009798:	2b2a      	cmp	r3, #42	@ 0x2a
 800979a:	d016      	beq.n	80097ca <_svfiprintf_r+0xfa>
 800979c:	0035      	movs	r5, r6
 800979e:	2100      	movs	r1, #0
 80097a0:	200a      	movs	r0, #10
 80097a2:	68e3      	ldr	r3, [r4, #12]
 80097a4:	782a      	ldrb	r2, [r5, #0]
 80097a6:	1c6e      	adds	r6, r5, #1
 80097a8:	3a30      	subs	r2, #48	@ 0x30
 80097aa:	2a09      	cmp	r2, #9
 80097ac:	d950      	bls.n	8009850 <_svfiprintf_r+0x180>
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d111      	bne.n	80097d6 <_svfiprintf_r+0x106>
 80097b2:	e017      	b.n	80097e4 <_svfiprintf_r+0x114>
 80097b4:	3501      	adds	r5, #1
 80097b6:	e7af      	b.n	8009718 <_svfiprintf_r+0x48>
 80097b8:	9b05      	ldr	r3, [sp, #20]
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	1ac0      	subs	r0, r0, r3
 80097be:	2301      	movs	r3, #1
 80097c0:	4083      	lsls	r3, r0
 80097c2:	4313      	orrs	r3, r2
 80097c4:	002e      	movs	r6, r5
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	e7cc      	b.n	8009764 <_svfiprintf_r+0x94>
 80097ca:	9b07      	ldr	r3, [sp, #28]
 80097cc:	1d19      	adds	r1, r3, #4
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	9107      	str	r1, [sp, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	db01      	blt.n	80097da <_svfiprintf_r+0x10a>
 80097d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097d8:	e004      	b.n	80097e4 <_svfiprintf_r+0x114>
 80097da:	425b      	negs	r3, r3
 80097dc:	60e3      	str	r3, [r4, #12]
 80097de:	2302      	movs	r3, #2
 80097e0:	4313      	orrs	r3, r2
 80097e2:	6023      	str	r3, [r4, #0]
 80097e4:	782b      	ldrb	r3, [r5, #0]
 80097e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80097e8:	d10c      	bne.n	8009804 <_svfiprintf_r+0x134>
 80097ea:	786b      	ldrb	r3, [r5, #1]
 80097ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ee:	d134      	bne.n	800985a <_svfiprintf_r+0x18a>
 80097f0:	9b07      	ldr	r3, [sp, #28]
 80097f2:	3502      	adds	r5, #2
 80097f4:	1d1a      	adds	r2, r3, #4
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	9207      	str	r2, [sp, #28]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da01      	bge.n	8009802 <_svfiprintf_r+0x132>
 80097fe:	2301      	movs	r3, #1
 8009800:	425b      	negs	r3, r3
 8009802:	9309      	str	r3, [sp, #36]	@ 0x24
 8009804:	4e2d      	ldr	r6, [pc, #180]	@ (80098bc <_svfiprintf_r+0x1ec>)
 8009806:	2203      	movs	r2, #3
 8009808:	0030      	movs	r0, r6
 800980a:	7829      	ldrb	r1, [r5, #0]
 800980c:	f7fe fbd5 	bl	8007fba <memchr>
 8009810:	2800      	cmp	r0, #0
 8009812:	d006      	beq.n	8009822 <_svfiprintf_r+0x152>
 8009814:	2340      	movs	r3, #64	@ 0x40
 8009816:	1b80      	subs	r0, r0, r6
 8009818:	4083      	lsls	r3, r0
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	3501      	adds	r5, #1
 800981e:	4313      	orrs	r3, r2
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	7829      	ldrb	r1, [r5, #0]
 8009824:	2206      	movs	r2, #6
 8009826:	4826      	ldr	r0, [pc, #152]	@ (80098c0 <_svfiprintf_r+0x1f0>)
 8009828:	1c6e      	adds	r6, r5, #1
 800982a:	7621      	strb	r1, [r4, #24]
 800982c:	f7fe fbc5 	bl	8007fba <memchr>
 8009830:	2800      	cmp	r0, #0
 8009832:	d038      	beq.n	80098a6 <_svfiprintf_r+0x1d6>
 8009834:	4b23      	ldr	r3, [pc, #140]	@ (80098c4 <_svfiprintf_r+0x1f4>)
 8009836:	2b00      	cmp	r3, #0
 8009838:	d122      	bne.n	8009880 <_svfiprintf_r+0x1b0>
 800983a:	2207      	movs	r2, #7
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	3307      	adds	r3, #7
 8009840:	4393      	bics	r3, r2
 8009842:	3308      	adds	r3, #8
 8009844:	9307      	str	r3, [sp, #28]
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	9a04      	ldr	r2, [sp, #16]
 800984a:	189b      	adds	r3, r3, r2
 800984c:	6163      	str	r3, [r4, #20]
 800984e:	e762      	b.n	8009716 <_svfiprintf_r+0x46>
 8009850:	4343      	muls	r3, r0
 8009852:	0035      	movs	r5, r6
 8009854:	2101      	movs	r1, #1
 8009856:	189b      	adds	r3, r3, r2
 8009858:	e7a4      	b.n	80097a4 <_svfiprintf_r+0xd4>
 800985a:	2300      	movs	r3, #0
 800985c:	200a      	movs	r0, #10
 800985e:	0019      	movs	r1, r3
 8009860:	3501      	adds	r5, #1
 8009862:	6063      	str	r3, [r4, #4]
 8009864:	782a      	ldrb	r2, [r5, #0]
 8009866:	1c6e      	adds	r6, r5, #1
 8009868:	3a30      	subs	r2, #48	@ 0x30
 800986a:	2a09      	cmp	r2, #9
 800986c:	d903      	bls.n	8009876 <_svfiprintf_r+0x1a6>
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0c8      	beq.n	8009804 <_svfiprintf_r+0x134>
 8009872:	9109      	str	r1, [sp, #36]	@ 0x24
 8009874:	e7c6      	b.n	8009804 <_svfiprintf_r+0x134>
 8009876:	4341      	muls	r1, r0
 8009878:	0035      	movs	r5, r6
 800987a:	2301      	movs	r3, #1
 800987c:	1889      	adds	r1, r1, r2
 800987e:	e7f1      	b.n	8009864 <_svfiprintf_r+0x194>
 8009880:	aa07      	add	r2, sp, #28
 8009882:	9200      	str	r2, [sp, #0]
 8009884:	0021      	movs	r1, r4
 8009886:	003a      	movs	r2, r7
 8009888:	4b0f      	ldr	r3, [pc, #60]	@ (80098c8 <_svfiprintf_r+0x1f8>)
 800988a:	9803      	ldr	r0, [sp, #12]
 800988c:	f7fd fe10 	bl	80074b0 <_printf_float>
 8009890:	9004      	str	r0, [sp, #16]
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	3301      	adds	r3, #1
 8009896:	d1d6      	bne.n	8009846 <_svfiprintf_r+0x176>
 8009898:	89bb      	ldrh	r3, [r7, #12]
 800989a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800989c:	065b      	lsls	r3, r3, #25
 800989e:	d500      	bpl.n	80098a2 <_svfiprintf_r+0x1d2>
 80098a0:	e72c      	b.n	80096fc <_svfiprintf_r+0x2c>
 80098a2:	b021      	add	sp, #132	@ 0x84
 80098a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a6:	aa07      	add	r2, sp, #28
 80098a8:	9200      	str	r2, [sp, #0]
 80098aa:	0021      	movs	r1, r4
 80098ac:	003a      	movs	r2, r7
 80098ae:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <_svfiprintf_r+0x1f8>)
 80098b0:	9803      	ldr	r0, [sp, #12]
 80098b2:	f7fe f8ab 	bl	8007a0c <_printf_i>
 80098b6:	e7eb      	b.n	8009890 <_svfiprintf_r+0x1c0>
 80098b8:	0800b4de 	.word	0x0800b4de
 80098bc:	0800b4e4 	.word	0x0800b4e4
 80098c0:	0800b4e8 	.word	0x0800b4e8
 80098c4:	080074b1 	.word	0x080074b1
 80098c8:	08009611 	.word	0x08009611

080098cc <__sflush_r>:
 80098cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ce:	220c      	movs	r2, #12
 80098d0:	5e8b      	ldrsh	r3, [r1, r2]
 80098d2:	0005      	movs	r5, r0
 80098d4:	000c      	movs	r4, r1
 80098d6:	071a      	lsls	r2, r3, #28
 80098d8:	d456      	bmi.n	8009988 <__sflush_r+0xbc>
 80098da:	684a      	ldr	r2, [r1, #4]
 80098dc:	2a00      	cmp	r2, #0
 80098de:	dc02      	bgt.n	80098e6 <__sflush_r+0x1a>
 80098e0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	dd4e      	ble.n	8009984 <__sflush_r+0xb8>
 80098e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80098e8:	2f00      	cmp	r7, #0
 80098ea:	d04b      	beq.n	8009984 <__sflush_r+0xb8>
 80098ec:	2200      	movs	r2, #0
 80098ee:	2080      	movs	r0, #128	@ 0x80
 80098f0:	682e      	ldr	r6, [r5, #0]
 80098f2:	602a      	str	r2, [r5, #0]
 80098f4:	001a      	movs	r2, r3
 80098f6:	0140      	lsls	r0, r0, #5
 80098f8:	6a21      	ldr	r1, [r4, #32]
 80098fa:	4002      	ands	r2, r0
 80098fc:	4203      	tst	r3, r0
 80098fe:	d033      	beq.n	8009968 <__sflush_r+0x9c>
 8009900:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	075b      	lsls	r3, r3, #29
 8009906:	d506      	bpl.n	8009916 <__sflush_r+0x4a>
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <__sflush_r+0x4a>
 8009912:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009914:	1ad2      	subs	r2, r2, r3
 8009916:	2300      	movs	r3, #0
 8009918:	0028      	movs	r0, r5
 800991a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800991c:	6a21      	ldr	r1, [r4, #32]
 800991e:	47b8      	blx	r7
 8009920:	89a2      	ldrh	r2, [r4, #12]
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d106      	bne.n	8009934 <__sflush_r+0x68>
 8009926:	6829      	ldr	r1, [r5, #0]
 8009928:	291d      	cmp	r1, #29
 800992a:	d846      	bhi.n	80099ba <__sflush_r+0xee>
 800992c:	4b29      	ldr	r3, [pc, #164]	@ (80099d4 <__sflush_r+0x108>)
 800992e:	40cb      	lsrs	r3, r1
 8009930:	07db      	lsls	r3, r3, #31
 8009932:	d542      	bpl.n	80099ba <__sflush_r+0xee>
 8009934:	2300      	movs	r3, #0
 8009936:	6063      	str	r3, [r4, #4]
 8009938:	6923      	ldr	r3, [r4, #16]
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	04d2      	lsls	r2, r2, #19
 800993e:	d505      	bpl.n	800994c <__sflush_r+0x80>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <__sflush_r+0x7e>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d100      	bne.n	800994c <__sflush_r+0x80>
 800994a:	6560      	str	r0, [r4, #84]	@ 0x54
 800994c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800994e:	602e      	str	r6, [r5, #0]
 8009950:	2900      	cmp	r1, #0
 8009952:	d017      	beq.n	8009984 <__sflush_r+0xb8>
 8009954:	0023      	movs	r3, r4
 8009956:	3344      	adds	r3, #68	@ 0x44
 8009958:	4299      	cmp	r1, r3
 800995a:	d002      	beq.n	8009962 <__sflush_r+0x96>
 800995c:	0028      	movs	r0, r5
 800995e:	f7ff f9b5 	bl	8008ccc <_free_r>
 8009962:	2300      	movs	r3, #0
 8009964:	6363      	str	r3, [r4, #52]	@ 0x34
 8009966:	e00d      	b.n	8009984 <__sflush_r+0xb8>
 8009968:	2301      	movs	r3, #1
 800996a:	0028      	movs	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	0002      	movs	r2, r0
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d1c6      	bne.n	8009902 <__sflush_r+0x36>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0c3      	beq.n	8009902 <__sflush_r+0x36>
 800997a:	2b1d      	cmp	r3, #29
 800997c:	d001      	beq.n	8009982 <__sflush_r+0xb6>
 800997e:	2b16      	cmp	r3, #22
 8009980:	d11a      	bne.n	80099b8 <__sflush_r+0xec>
 8009982:	602e      	str	r6, [r5, #0]
 8009984:	2000      	movs	r0, #0
 8009986:	e01e      	b.n	80099c6 <__sflush_r+0xfa>
 8009988:	690e      	ldr	r6, [r1, #16]
 800998a:	2e00      	cmp	r6, #0
 800998c:	d0fa      	beq.n	8009984 <__sflush_r+0xb8>
 800998e:	680f      	ldr	r7, [r1, #0]
 8009990:	600e      	str	r6, [r1, #0]
 8009992:	1bba      	subs	r2, r7, r6
 8009994:	9201      	str	r2, [sp, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	079b      	lsls	r3, r3, #30
 800999a:	d100      	bne.n	800999e <__sflush_r+0xd2>
 800999c:	694a      	ldr	r2, [r1, #20]
 800999e:	60a2      	str	r2, [r4, #8]
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	ddee      	ble.n	8009984 <__sflush_r+0xb8>
 80099a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80099a8:	0032      	movs	r2, r6
 80099aa:	001f      	movs	r7, r3
 80099ac:	0028      	movs	r0, r5
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	6a21      	ldr	r1, [r4, #32]
 80099b2:	47b8      	blx	r7
 80099b4:	2800      	cmp	r0, #0
 80099b6:	dc07      	bgt.n	80099c8 <__sflush_r+0xfc>
 80099b8:	89a2      	ldrh	r2, [r4, #12]
 80099ba:	2340      	movs	r3, #64	@ 0x40
 80099bc:	2001      	movs	r0, #1
 80099be:	4313      	orrs	r3, r2
 80099c0:	b21b      	sxth	r3, r3
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	4240      	negs	r0, r0
 80099c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099c8:	9b01      	ldr	r3, [sp, #4]
 80099ca:	1836      	adds	r6, r6, r0
 80099cc:	1a1b      	subs	r3, r3, r0
 80099ce:	9301      	str	r3, [sp, #4]
 80099d0:	e7e6      	b.n	80099a0 <__sflush_r+0xd4>
 80099d2:	46c0      	nop			@ (mov r8, r8)
 80099d4:	20400001 	.word	0x20400001

080099d8 <_fflush_r>:
 80099d8:	690b      	ldr	r3, [r1, #16]
 80099da:	b570      	push	{r4, r5, r6, lr}
 80099dc:	0005      	movs	r5, r0
 80099de:	000c      	movs	r4, r1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d102      	bne.n	80099ea <_fflush_r+0x12>
 80099e4:	2500      	movs	r5, #0
 80099e6:	0028      	movs	r0, r5
 80099e8:	bd70      	pop	{r4, r5, r6, pc}
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d004      	beq.n	80099f8 <_fflush_r+0x20>
 80099ee:	6a03      	ldr	r3, [r0, #32]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <_fflush_r+0x20>
 80099f4:	f7fe f9a6 	bl	8007d44 <__sinit>
 80099f8:	220c      	movs	r2, #12
 80099fa:	5ea3      	ldrsh	r3, [r4, r2]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d0f1      	beq.n	80099e4 <_fflush_r+0xc>
 8009a00:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a02:	07d2      	lsls	r2, r2, #31
 8009a04:	d404      	bmi.n	8009a10 <_fflush_r+0x38>
 8009a06:	059b      	lsls	r3, r3, #22
 8009a08:	d402      	bmi.n	8009a10 <_fflush_r+0x38>
 8009a0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a0c:	f7fe fad3 	bl	8007fb6 <__retarget_lock_acquire_recursive>
 8009a10:	0028      	movs	r0, r5
 8009a12:	0021      	movs	r1, r4
 8009a14:	f7ff ff5a 	bl	80098cc <__sflush_r>
 8009a18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a1a:	0005      	movs	r5, r0
 8009a1c:	07db      	lsls	r3, r3, #31
 8009a1e:	d4e2      	bmi.n	80099e6 <_fflush_r+0xe>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	059b      	lsls	r3, r3, #22
 8009a24:	d4df      	bmi.n	80099e6 <_fflush_r+0xe>
 8009a26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a28:	f7fe fac6 	bl	8007fb8 <__retarget_lock_release_recursive>
 8009a2c:	e7db      	b.n	80099e6 <_fflush_r+0xe>
	...

08009a30 <_sbrk_r>:
 8009a30:	2300      	movs	r3, #0
 8009a32:	b570      	push	{r4, r5, r6, lr}
 8009a34:	4d06      	ldr	r5, [pc, #24]	@ (8009a50 <_sbrk_r+0x20>)
 8009a36:	0004      	movs	r4, r0
 8009a38:	0008      	movs	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f9 ffbc 	bl	80039b8 <_sbrk>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d103      	bne.n	8009a4c <_sbrk_r+0x1c>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d000      	beq.n	8009a4c <_sbrk_r+0x1c>
 8009a4a:	6023      	str	r3, [r4, #0]
 8009a4c:	bd70      	pop	{r4, r5, r6, pc}
 8009a4e:	46c0      	nop			@ (mov r8, r8)
 8009a50:	200008a0 	.word	0x200008a0

08009a54 <__assert_func>:
 8009a54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009a56:	0014      	movs	r4, r2
 8009a58:	001a      	movs	r2, r3
 8009a5a:	4b09      	ldr	r3, [pc, #36]	@ (8009a80 <__assert_func+0x2c>)
 8009a5c:	0005      	movs	r5, r0
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	000e      	movs	r6, r1
 8009a62:	68d8      	ldr	r0, [r3, #12]
 8009a64:	4b07      	ldr	r3, [pc, #28]	@ (8009a84 <__assert_func+0x30>)
 8009a66:	2c00      	cmp	r4, #0
 8009a68:	d101      	bne.n	8009a6e <__assert_func+0x1a>
 8009a6a:	4b07      	ldr	r3, [pc, #28]	@ (8009a88 <__assert_func+0x34>)
 8009a6c:	001c      	movs	r4, r3
 8009a6e:	4907      	ldr	r1, [pc, #28]	@ (8009a8c <__assert_func+0x38>)
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	9402      	str	r4, [sp, #8]
 8009a74:	002b      	movs	r3, r5
 8009a76:	9600      	str	r6, [sp, #0]
 8009a78:	f000 f886 	bl	8009b88 <fiprintf>
 8009a7c:	f000 f894 	bl	8009ba8 <abort>
 8009a80:	20000020 	.word	0x20000020
 8009a84:	0800b4f9 	.word	0x0800b4f9
 8009a88:	0800b534 	.word	0x0800b534
 8009a8c:	0800b506 	.word	0x0800b506

08009a90 <_calloc_r>:
 8009a90:	b570      	push	{r4, r5, r6, lr}
 8009a92:	0c0b      	lsrs	r3, r1, #16
 8009a94:	0c15      	lsrs	r5, r2, #16
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d11e      	bne.n	8009ad8 <_calloc_r+0x48>
 8009a9a:	2d00      	cmp	r5, #0
 8009a9c:	d10c      	bne.n	8009ab8 <_calloc_r+0x28>
 8009a9e:	b289      	uxth	r1, r1
 8009aa0:	b294      	uxth	r4, r2
 8009aa2:	434c      	muls	r4, r1
 8009aa4:	0021      	movs	r1, r4
 8009aa6:	f7ff f987 	bl	8008db8 <_malloc_r>
 8009aaa:	1e05      	subs	r5, r0, #0
 8009aac:	d01b      	beq.n	8009ae6 <_calloc_r+0x56>
 8009aae:	0022      	movs	r2, r4
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	f7fe f9fb 	bl	8007eac <memset>
 8009ab6:	e016      	b.n	8009ae6 <_calloc_r+0x56>
 8009ab8:	1c2b      	adds	r3, r5, #0
 8009aba:	1c0c      	adds	r4, r1, #0
 8009abc:	b289      	uxth	r1, r1
 8009abe:	b292      	uxth	r2, r2
 8009ac0:	434a      	muls	r2, r1
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	b2a1      	uxth	r1, r4
 8009ac6:	4359      	muls	r1, r3
 8009ac8:	0c14      	lsrs	r4, r2, #16
 8009aca:	190c      	adds	r4, r1, r4
 8009acc:	0c23      	lsrs	r3, r4, #16
 8009ace:	d107      	bne.n	8009ae0 <_calloc_r+0x50>
 8009ad0:	0424      	lsls	r4, r4, #16
 8009ad2:	b292      	uxth	r2, r2
 8009ad4:	4314      	orrs	r4, r2
 8009ad6:	e7e5      	b.n	8009aa4 <_calloc_r+0x14>
 8009ad8:	2d00      	cmp	r5, #0
 8009ada:	d101      	bne.n	8009ae0 <_calloc_r+0x50>
 8009adc:	1c14      	adds	r4, r2, #0
 8009ade:	e7ed      	b.n	8009abc <_calloc_r+0x2c>
 8009ae0:	230c      	movs	r3, #12
 8009ae2:	2500      	movs	r5, #0
 8009ae4:	6003      	str	r3, [r0, #0]
 8009ae6:	0028      	movs	r0, r5
 8009ae8:	bd70      	pop	{r4, r5, r6, pc}

08009aea <__ascii_mbtowc>:
 8009aea:	b082      	sub	sp, #8
 8009aec:	2900      	cmp	r1, #0
 8009aee:	d100      	bne.n	8009af2 <__ascii_mbtowc+0x8>
 8009af0:	a901      	add	r1, sp, #4
 8009af2:	1e10      	subs	r0, r2, #0
 8009af4:	d006      	beq.n	8009b04 <__ascii_mbtowc+0x1a>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d006      	beq.n	8009b08 <__ascii_mbtowc+0x1e>
 8009afa:	7813      	ldrb	r3, [r2, #0]
 8009afc:	600b      	str	r3, [r1, #0]
 8009afe:	7810      	ldrb	r0, [r2, #0]
 8009b00:	1e43      	subs	r3, r0, #1
 8009b02:	4198      	sbcs	r0, r3
 8009b04:	b002      	add	sp, #8
 8009b06:	4770      	bx	lr
 8009b08:	2002      	movs	r0, #2
 8009b0a:	4240      	negs	r0, r0
 8009b0c:	e7fa      	b.n	8009b04 <__ascii_mbtowc+0x1a>

08009b0e <_realloc_r>:
 8009b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b10:	0006      	movs	r6, r0
 8009b12:	000c      	movs	r4, r1
 8009b14:	0015      	movs	r5, r2
 8009b16:	2900      	cmp	r1, #0
 8009b18:	d105      	bne.n	8009b26 <_realloc_r+0x18>
 8009b1a:	0011      	movs	r1, r2
 8009b1c:	f7ff f94c 	bl	8008db8 <_malloc_r>
 8009b20:	0004      	movs	r4, r0
 8009b22:	0020      	movs	r0, r4
 8009b24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	d103      	bne.n	8009b32 <_realloc_r+0x24>
 8009b2a:	f7ff f8cf 	bl	8008ccc <_free_r>
 8009b2e:	002c      	movs	r4, r5
 8009b30:	e7f7      	b.n	8009b22 <_realloc_r+0x14>
 8009b32:	f000 f840 	bl	8009bb6 <_malloc_usable_size_r>
 8009b36:	0007      	movs	r7, r0
 8009b38:	4285      	cmp	r5, r0
 8009b3a:	d802      	bhi.n	8009b42 <_realloc_r+0x34>
 8009b3c:	0843      	lsrs	r3, r0, #1
 8009b3e:	42ab      	cmp	r3, r5
 8009b40:	d3ef      	bcc.n	8009b22 <_realloc_r+0x14>
 8009b42:	0029      	movs	r1, r5
 8009b44:	0030      	movs	r0, r6
 8009b46:	f7ff f937 	bl	8008db8 <_malloc_r>
 8009b4a:	9001      	str	r0, [sp, #4]
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d101      	bne.n	8009b54 <_realloc_r+0x46>
 8009b50:	9c01      	ldr	r4, [sp, #4]
 8009b52:	e7e6      	b.n	8009b22 <_realloc_r+0x14>
 8009b54:	002a      	movs	r2, r5
 8009b56:	42bd      	cmp	r5, r7
 8009b58:	d900      	bls.n	8009b5c <_realloc_r+0x4e>
 8009b5a:	003a      	movs	r2, r7
 8009b5c:	0021      	movs	r1, r4
 8009b5e:	9801      	ldr	r0, [sp, #4]
 8009b60:	f7fe fa36 	bl	8007fd0 <memcpy>
 8009b64:	0021      	movs	r1, r4
 8009b66:	0030      	movs	r0, r6
 8009b68:	f7ff f8b0 	bl	8008ccc <_free_r>
 8009b6c:	e7f0      	b.n	8009b50 <_realloc_r+0x42>

08009b6e <__ascii_wctomb>:
 8009b6e:	0003      	movs	r3, r0
 8009b70:	1e08      	subs	r0, r1, #0
 8009b72:	d005      	beq.n	8009b80 <__ascii_wctomb+0x12>
 8009b74:	2aff      	cmp	r2, #255	@ 0xff
 8009b76:	d904      	bls.n	8009b82 <__ascii_wctomb+0x14>
 8009b78:	228a      	movs	r2, #138	@ 0x8a
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	4240      	negs	r0, r0
 8009b80:	4770      	bx	lr
 8009b82:	2001      	movs	r0, #1
 8009b84:	700a      	strb	r2, [r1, #0]
 8009b86:	e7fb      	b.n	8009b80 <__ascii_wctomb+0x12>

08009b88 <fiprintf>:
 8009b88:	b40e      	push	{r1, r2, r3}
 8009b8a:	b517      	push	{r0, r1, r2, r4, lr}
 8009b8c:	4c05      	ldr	r4, [pc, #20]	@ (8009ba4 <fiprintf+0x1c>)
 8009b8e:	ab05      	add	r3, sp, #20
 8009b90:	cb04      	ldmia	r3!, {r2}
 8009b92:	0001      	movs	r1, r0
 8009b94:	6820      	ldr	r0, [r4, #0]
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	f000 f83c 	bl	8009c14 <_vfiprintf_r>
 8009b9c:	bc1e      	pop	{r1, r2, r3, r4}
 8009b9e:	bc08      	pop	{r3}
 8009ba0:	b003      	add	sp, #12
 8009ba2:	4718      	bx	r3
 8009ba4:	20000020 	.word	0x20000020

08009ba8 <abort>:
 8009ba8:	2006      	movs	r0, #6
 8009baa:	b510      	push	{r4, lr}
 8009bac:	f000 fa18 	bl	8009fe0 <raise>
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f7f9 fe8e 	bl	80038d2 <_exit>

08009bb6 <_malloc_usable_size_r>:
 8009bb6:	1f0b      	subs	r3, r1, #4
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	1f18      	subs	r0, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	da01      	bge.n	8009bc4 <_malloc_usable_size_r+0xe>
 8009bc0:	580b      	ldr	r3, [r1, r0]
 8009bc2:	18c0      	adds	r0, r0, r3
 8009bc4:	4770      	bx	lr

08009bc6 <__sfputc_r>:
 8009bc6:	6893      	ldr	r3, [r2, #8]
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	6093      	str	r3, [r2, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da04      	bge.n	8009bdc <__sfputc_r+0x16>
 8009bd2:	6994      	ldr	r4, [r2, #24]
 8009bd4:	42a3      	cmp	r3, r4
 8009bd6:	db07      	blt.n	8009be8 <__sfputc_r+0x22>
 8009bd8:	290a      	cmp	r1, #10
 8009bda:	d005      	beq.n	8009be8 <__sfputc_r+0x22>
 8009bdc:	6813      	ldr	r3, [r2, #0]
 8009bde:	1c58      	adds	r0, r3, #1
 8009be0:	6010      	str	r0, [r2, #0]
 8009be2:	7019      	strb	r1, [r3, #0]
 8009be4:	0008      	movs	r0, r1
 8009be6:	bd10      	pop	{r4, pc}
 8009be8:	f000 f930 	bl	8009e4c <__swbuf_r>
 8009bec:	0001      	movs	r1, r0
 8009bee:	e7f9      	b.n	8009be4 <__sfputc_r+0x1e>

08009bf0 <__sfputs_r>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	0006      	movs	r6, r0
 8009bf4:	000f      	movs	r7, r1
 8009bf6:	0014      	movs	r4, r2
 8009bf8:	18d5      	adds	r5, r2, r3
 8009bfa:	42ac      	cmp	r4, r5
 8009bfc:	d101      	bne.n	8009c02 <__sfputs_r+0x12>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e007      	b.n	8009c12 <__sfputs_r+0x22>
 8009c02:	7821      	ldrb	r1, [r4, #0]
 8009c04:	003a      	movs	r2, r7
 8009c06:	0030      	movs	r0, r6
 8009c08:	f7ff ffdd 	bl	8009bc6 <__sfputc_r>
 8009c0c:	3401      	adds	r4, #1
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	d1f3      	bne.n	8009bfa <__sfputs_r+0xa>
 8009c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c14 <_vfiprintf_r>:
 8009c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c16:	b0a1      	sub	sp, #132	@ 0x84
 8009c18:	000f      	movs	r7, r1
 8009c1a:	0015      	movs	r5, r2
 8009c1c:	001e      	movs	r6, r3
 8009c1e:	9003      	str	r0, [sp, #12]
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d004      	beq.n	8009c2e <_vfiprintf_r+0x1a>
 8009c24:	6a03      	ldr	r3, [r0, #32]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <_vfiprintf_r+0x1a>
 8009c2a:	f7fe f88b 	bl	8007d44 <__sinit>
 8009c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c30:	07db      	lsls	r3, r3, #31
 8009c32:	d405      	bmi.n	8009c40 <_vfiprintf_r+0x2c>
 8009c34:	89bb      	ldrh	r3, [r7, #12]
 8009c36:	059b      	lsls	r3, r3, #22
 8009c38:	d402      	bmi.n	8009c40 <_vfiprintf_r+0x2c>
 8009c3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009c3c:	f7fe f9bb 	bl	8007fb6 <__retarget_lock_acquire_recursive>
 8009c40:	89bb      	ldrh	r3, [r7, #12]
 8009c42:	071b      	lsls	r3, r3, #28
 8009c44:	d502      	bpl.n	8009c4c <_vfiprintf_r+0x38>
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d113      	bne.n	8009c74 <_vfiprintf_r+0x60>
 8009c4c:	0039      	movs	r1, r7
 8009c4e:	9803      	ldr	r0, [sp, #12]
 8009c50:	f000 f93e 	bl	8009ed0 <__swsetup_r>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d00d      	beq.n	8009c74 <_vfiprintf_r+0x60>
 8009c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c5a:	07db      	lsls	r3, r3, #31
 8009c5c:	d503      	bpl.n	8009c66 <_vfiprintf_r+0x52>
 8009c5e:	2001      	movs	r0, #1
 8009c60:	4240      	negs	r0, r0
 8009c62:	b021      	add	sp, #132	@ 0x84
 8009c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c66:	89bb      	ldrh	r3, [r7, #12]
 8009c68:	059b      	lsls	r3, r3, #22
 8009c6a:	d4f8      	bmi.n	8009c5e <_vfiprintf_r+0x4a>
 8009c6c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009c6e:	f7fe f9a3 	bl	8007fb8 <__retarget_lock_release_recursive>
 8009c72:	e7f4      	b.n	8009c5e <_vfiprintf_r+0x4a>
 8009c74:	2300      	movs	r3, #0
 8009c76:	ac08      	add	r4, sp, #32
 8009c78:	6163      	str	r3, [r4, #20]
 8009c7a:	3320      	adds	r3, #32
 8009c7c:	7663      	strb	r3, [r4, #25]
 8009c7e:	3310      	adds	r3, #16
 8009c80:	76a3      	strb	r3, [r4, #26]
 8009c82:	9607      	str	r6, [sp, #28]
 8009c84:	002e      	movs	r6, r5
 8009c86:	7833      	ldrb	r3, [r6, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <_vfiprintf_r+0x7c>
 8009c8c:	2b25      	cmp	r3, #37	@ 0x25
 8009c8e:	d148      	bne.n	8009d22 <_vfiprintf_r+0x10e>
 8009c90:	1b73      	subs	r3, r6, r5
 8009c92:	9305      	str	r3, [sp, #20]
 8009c94:	42ae      	cmp	r6, r5
 8009c96:	d00b      	beq.n	8009cb0 <_vfiprintf_r+0x9c>
 8009c98:	002a      	movs	r2, r5
 8009c9a:	0039      	movs	r1, r7
 8009c9c:	9803      	ldr	r0, [sp, #12]
 8009c9e:	f7ff ffa7 	bl	8009bf0 <__sfputs_r>
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d100      	bne.n	8009ca8 <_vfiprintf_r+0x94>
 8009ca6:	e0ae      	b.n	8009e06 <_vfiprintf_r+0x1f2>
 8009ca8:	6963      	ldr	r3, [r4, #20]
 8009caa:	9a05      	ldr	r2, [sp, #20]
 8009cac:	189b      	adds	r3, r3, r2
 8009cae:	6163      	str	r3, [r4, #20]
 8009cb0:	7833      	ldrb	r3, [r6, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d100      	bne.n	8009cb8 <_vfiprintf_r+0xa4>
 8009cb6:	e0a6      	b.n	8009e06 <_vfiprintf_r+0x1f2>
 8009cb8:	2201      	movs	r2, #1
 8009cba:	2300      	movs	r3, #0
 8009cbc:	4252      	negs	r2, r2
 8009cbe:	6062      	str	r2, [r4, #4]
 8009cc0:	a904      	add	r1, sp, #16
 8009cc2:	3254      	adds	r2, #84	@ 0x54
 8009cc4:	1852      	adds	r2, r2, r1
 8009cc6:	1c75      	adds	r5, r6, #1
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	60e3      	str	r3, [r4, #12]
 8009ccc:	60a3      	str	r3, [r4, #8]
 8009cce:	7013      	strb	r3, [r2, #0]
 8009cd0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009cd2:	4b59      	ldr	r3, [pc, #356]	@ (8009e38 <_vfiprintf_r+0x224>)
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	7829      	ldrb	r1, [r5, #0]
 8009cda:	9305      	str	r3, [sp, #20]
 8009cdc:	f7fe f96d 	bl	8007fba <memchr>
 8009ce0:	1c6e      	adds	r6, r5, #1
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d11f      	bne.n	8009d26 <_vfiprintf_r+0x112>
 8009ce6:	6822      	ldr	r2, [r4, #0]
 8009ce8:	06d3      	lsls	r3, r2, #27
 8009cea:	d504      	bpl.n	8009cf6 <_vfiprintf_r+0xe2>
 8009cec:	2353      	movs	r3, #83	@ 0x53
 8009cee:	a904      	add	r1, sp, #16
 8009cf0:	185b      	adds	r3, r3, r1
 8009cf2:	2120      	movs	r1, #32
 8009cf4:	7019      	strb	r1, [r3, #0]
 8009cf6:	0713      	lsls	r3, r2, #28
 8009cf8:	d504      	bpl.n	8009d04 <_vfiprintf_r+0xf0>
 8009cfa:	2353      	movs	r3, #83	@ 0x53
 8009cfc:	a904      	add	r1, sp, #16
 8009cfe:	185b      	adds	r3, r3, r1
 8009d00:	212b      	movs	r1, #43	@ 0x2b
 8009d02:	7019      	strb	r1, [r3, #0]
 8009d04:	782b      	ldrb	r3, [r5, #0]
 8009d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d08:	d016      	beq.n	8009d38 <_vfiprintf_r+0x124>
 8009d0a:	002e      	movs	r6, r5
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	200a      	movs	r0, #10
 8009d10:	68e3      	ldr	r3, [r4, #12]
 8009d12:	7832      	ldrb	r2, [r6, #0]
 8009d14:	1c75      	adds	r5, r6, #1
 8009d16:	3a30      	subs	r2, #48	@ 0x30
 8009d18:	2a09      	cmp	r2, #9
 8009d1a:	d950      	bls.n	8009dbe <_vfiprintf_r+0x1aa>
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	d111      	bne.n	8009d44 <_vfiprintf_r+0x130>
 8009d20:	e017      	b.n	8009d52 <_vfiprintf_r+0x13e>
 8009d22:	3601      	adds	r6, #1
 8009d24:	e7af      	b.n	8009c86 <_vfiprintf_r+0x72>
 8009d26:	9b05      	ldr	r3, [sp, #20]
 8009d28:	6822      	ldr	r2, [r4, #0]
 8009d2a:	1ac0      	subs	r0, r0, r3
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4083      	lsls	r3, r0
 8009d30:	4313      	orrs	r3, r2
 8009d32:	0035      	movs	r5, r6
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	e7cc      	b.n	8009cd2 <_vfiprintf_r+0xbe>
 8009d38:	9b07      	ldr	r3, [sp, #28]
 8009d3a:	1d19      	adds	r1, r3, #4
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	9107      	str	r1, [sp, #28]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	db01      	blt.n	8009d48 <_vfiprintf_r+0x134>
 8009d44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d46:	e004      	b.n	8009d52 <_vfiprintf_r+0x13e>
 8009d48:	425b      	negs	r3, r3
 8009d4a:	60e3      	str	r3, [r4, #12]
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	7833      	ldrb	r3, [r6, #0]
 8009d54:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d56:	d10c      	bne.n	8009d72 <_vfiprintf_r+0x15e>
 8009d58:	7873      	ldrb	r3, [r6, #1]
 8009d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d5c:	d134      	bne.n	8009dc8 <_vfiprintf_r+0x1b4>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	3602      	adds	r6, #2
 8009d62:	1d1a      	adds	r2, r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	9207      	str	r2, [sp, #28]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	da01      	bge.n	8009d70 <_vfiprintf_r+0x15c>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	425b      	negs	r3, r3
 8009d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d72:	4d32      	ldr	r5, [pc, #200]	@ (8009e3c <_vfiprintf_r+0x228>)
 8009d74:	2203      	movs	r2, #3
 8009d76:	0028      	movs	r0, r5
 8009d78:	7831      	ldrb	r1, [r6, #0]
 8009d7a:	f7fe f91e 	bl	8007fba <memchr>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d006      	beq.n	8009d90 <_vfiprintf_r+0x17c>
 8009d82:	2340      	movs	r3, #64	@ 0x40
 8009d84:	1b40      	subs	r0, r0, r5
 8009d86:	4083      	lsls	r3, r0
 8009d88:	6822      	ldr	r2, [r4, #0]
 8009d8a:	3601      	adds	r6, #1
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	7831      	ldrb	r1, [r6, #0]
 8009d92:	2206      	movs	r2, #6
 8009d94:	482a      	ldr	r0, [pc, #168]	@ (8009e40 <_vfiprintf_r+0x22c>)
 8009d96:	1c75      	adds	r5, r6, #1
 8009d98:	7621      	strb	r1, [r4, #24]
 8009d9a:	f7fe f90e 	bl	8007fba <memchr>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d040      	beq.n	8009e24 <_vfiprintf_r+0x210>
 8009da2:	4b28      	ldr	r3, [pc, #160]	@ (8009e44 <_vfiprintf_r+0x230>)
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d122      	bne.n	8009dee <_vfiprintf_r+0x1da>
 8009da8:	2207      	movs	r2, #7
 8009daa:	9b07      	ldr	r3, [sp, #28]
 8009dac:	3307      	adds	r3, #7
 8009dae:	4393      	bics	r3, r2
 8009db0:	3308      	adds	r3, #8
 8009db2:	9307      	str	r3, [sp, #28]
 8009db4:	6963      	ldr	r3, [r4, #20]
 8009db6:	9a04      	ldr	r2, [sp, #16]
 8009db8:	189b      	adds	r3, r3, r2
 8009dba:	6163      	str	r3, [r4, #20]
 8009dbc:	e762      	b.n	8009c84 <_vfiprintf_r+0x70>
 8009dbe:	4343      	muls	r3, r0
 8009dc0:	002e      	movs	r6, r5
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	189b      	adds	r3, r3, r2
 8009dc6:	e7a4      	b.n	8009d12 <_vfiprintf_r+0xfe>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	200a      	movs	r0, #10
 8009dcc:	0019      	movs	r1, r3
 8009dce:	3601      	adds	r6, #1
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	7832      	ldrb	r2, [r6, #0]
 8009dd4:	1c75      	adds	r5, r6, #1
 8009dd6:	3a30      	subs	r2, #48	@ 0x30
 8009dd8:	2a09      	cmp	r2, #9
 8009dda:	d903      	bls.n	8009de4 <_vfiprintf_r+0x1d0>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0c8      	beq.n	8009d72 <_vfiprintf_r+0x15e>
 8009de0:	9109      	str	r1, [sp, #36]	@ 0x24
 8009de2:	e7c6      	b.n	8009d72 <_vfiprintf_r+0x15e>
 8009de4:	4341      	muls	r1, r0
 8009de6:	002e      	movs	r6, r5
 8009de8:	2301      	movs	r3, #1
 8009dea:	1889      	adds	r1, r1, r2
 8009dec:	e7f1      	b.n	8009dd2 <_vfiprintf_r+0x1be>
 8009dee:	aa07      	add	r2, sp, #28
 8009df0:	9200      	str	r2, [sp, #0]
 8009df2:	0021      	movs	r1, r4
 8009df4:	003a      	movs	r2, r7
 8009df6:	4b14      	ldr	r3, [pc, #80]	@ (8009e48 <_vfiprintf_r+0x234>)
 8009df8:	9803      	ldr	r0, [sp, #12]
 8009dfa:	f7fd fb59 	bl	80074b0 <_printf_float>
 8009dfe:	9004      	str	r0, [sp, #16]
 8009e00:	9b04      	ldr	r3, [sp, #16]
 8009e02:	3301      	adds	r3, #1
 8009e04:	d1d6      	bne.n	8009db4 <_vfiprintf_r+0x1a0>
 8009e06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e08:	07db      	lsls	r3, r3, #31
 8009e0a:	d405      	bmi.n	8009e18 <_vfiprintf_r+0x204>
 8009e0c:	89bb      	ldrh	r3, [r7, #12]
 8009e0e:	059b      	lsls	r3, r3, #22
 8009e10:	d402      	bmi.n	8009e18 <_vfiprintf_r+0x204>
 8009e12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009e14:	f7fe f8d0 	bl	8007fb8 <__retarget_lock_release_recursive>
 8009e18:	89bb      	ldrh	r3, [r7, #12]
 8009e1a:	065b      	lsls	r3, r3, #25
 8009e1c:	d500      	bpl.n	8009e20 <_vfiprintf_r+0x20c>
 8009e1e:	e71e      	b.n	8009c5e <_vfiprintf_r+0x4a>
 8009e20:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009e22:	e71e      	b.n	8009c62 <_vfiprintf_r+0x4e>
 8009e24:	aa07      	add	r2, sp, #28
 8009e26:	9200      	str	r2, [sp, #0]
 8009e28:	0021      	movs	r1, r4
 8009e2a:	003a      	movs	r2, r7
 8009e2c:	4b06      	ldr	r3, [pc, #24]	@ (8009e48 <_vfiprintf_r+0x234>)
 8009e2e:	9803      	ldr	r0, [sp, #12]
 8009e30:	f7fd fdec 	bl	8007a0c <_printf_i>
 8009e34:	e7e3      	b.n	8009dfe <_vfiprintf_r+0x1ea>
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	0800b4de 	.word	0x0800b4de
 8009e3c:	0800b4e4 	.word	0x0800b4e4
 8009e40:	0800b4e8 	.word	0x0800b4e8
 8009e44:	080074b1 	.word	0x080074b1
 8009e48:	08009bf1 	.word	0x08009bf1

08009e4c <__swbuf_r>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	0006      	movs	r6, r0
 8009e50:	000d      	movs	r5, r1
 8009e52:	0014      	movs	r4, r2
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d004      	beq.n	8009e62 <__swbuf_r+0x16>
 8009e58:	6a03      	ldr	r3, [r0, #32]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <__swbuf_r+0x16>
 8009e5e:	f7fd ff71 	bl	8007d44 <__sinit>
 8009e62:	69a3      	ldr	r3, [r4, #24]
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	071b      	lsls	r3, r3, #28
 8009e6a:	d502      	bpl.n	8009e72 <__swbuf_r+0x26>
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d109      	bne.n	8009e86 <__swbuf_r+0x3a>
 8009e72:	0021      	movs	r1, r4
 8009e74:	0030      	movs	r0, r6
 8009e76:	f000 f82b 	bl	8009ed0 <__swsetup_r>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d003      	beq.n	8009e86 <__swbuf_r+0x3a>
 8009e7e:	2501      	movs	r5, #1
 8009e80:	426d      	negs	r5, r5
 8009e82:	0028      	movs	r0, r5
 8009e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	b2ef      	uxtb	r7, r5
 8009e8c:	1ac0      	subs	r0, r0, r3
 8009e8e:	6963      	ldr	r3, [r4, #20]
 8009e90:	b2ed      	uxtb	r5, r5
 8009e92:	4283      	cmp	r3, r0
 8009e94:	dc05      	bgt.n	8009ea2 <__swbuf_r+0x56>
 8009e96:	0021      	movs	r1, r4
 8009e98:	0030      	movs	r0, r6
 8009e9a:	f7ff fd9d 	bl	80099d8 <_fflush_r>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1ed      	bne.n	8009e7e <__swbuf_r+0x32>
 8009ea2:	68a3      	ldr	r3, [r4, #8]
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	60a3      	str	r3, [r4, #8]
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	6022      	str	r2, [r4, #0]
 8009eb0:	701f      	strb	r7, [r3, #0]
 8009eb2:	6963      	ldr	r3, [r4, #20]
 8009eb4:	4283      	cmp	r3, r0
 8009eb6:	d004      	beq.n	8009ec2 <__swbuf_r+0x76>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	07db      	lsls	r3, r3, #31
 8009ebc:	d5e1      	bpl.n	8009e82 <__swbuf_r+0x36>
 8009ebe:	2d0a      	cmp	r5, #10
 8009ec0:	d1df      	bne.n	8009e82 <__swbuf_r+0x36>
 8009ec2:	0021      	movs	r1, r4
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	f7ff fd87 	bl	80099d8 <_fflush_r>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d0d9      	beq.n	8009e82 <__swbuf_r+0x36>
 8009ece:	e7d6      	b.n	8009e7e <__swbuf_r+0x32>

08009ed0 <__swsetup_r>:
 8009ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8009f88 <__swsetup_r+0xb8>)
 8009ed2:	b570      	push	{r4, r5, r6, lr}
 8009ed4:	0005      	movs	r5, r0
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	000c      	movs	r4, r1
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d004      	beq.n	8009ee8 <__swsetup_r+0x18>
 8009ede:	6a03      	ldr	r3, [r0, #32]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <__swsetup_r+0x18>
 8009ee4:	f7fd ff2e 	bl	8007d44 <__sinit>
 8009ee8:	220c      	movs	r2, #12
 8009eea:	5ea3      	ldrsh	r3, [r4, r2]
 8009eec:	071a      	lsls	r2, r3, #28
 8009eee:	d423      	bmi.n	8009f38 <__swsetup_r+0x68>
 8009ef0:	06da      	lsls	r2, r3, #27
 8009ef2:	d407      	bmi.n	8009f04 <__swsetup_r+0x34>
 8009ef4:	2209      	movs	r2, #9
 8009ef6:	602a      	str	r2, [r5, #0]
 8009ef8:	2240      	movs	r2, #64	@ 0x40
 8009efa:	2001      	movs	r0, #1
 8009efc:	4313      	orrs	r3, r2
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	4240      	negs	r0, r0
 8009f02:	e03a      	b.n	8009f7a <__swsetup_r+0xaa>
 8009f04:	075b      	lsls	r3, r3, #29
 8009f06:	d513      	bpl.n	8009f30 <__swsetup_r+0x60>
 8009f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	d008      	beq.n	8009f20 <__swsetup_r+0x50>
 8009f0e:	0023      	movs	r3, r4
 8009f10:	3344      	adds	r3, #68	@ 0x44
 8009f12:	4299      	cmp	r1, r3
 8009f14:	d002      	beq.n	8009f1c <__swsetup_r+0x4c>
 8009f16:	0028      	movs	r0, r5
 8009f18:	f7fe fed8 	bl	8008ccc <_free_r>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f20:	2224      	movs	r2, #36	@ 0x24
 8009f22:	89a3      	ldrh	r3, [r4, #12]
 8009f24:	4393      	bics	r3, r2
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6063      	str	r3, [r4, #4]
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	6023      	str	r3, [r4, #0]
 8009f30:	2308      	movs	r3, #8
 8009f32:	89a2      	ldrh	r2, [r4, #12]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10b      	bne.n	8009f56 <__swsetup_r+0x86>
 8009f3e:	21a0      	movs	r1, #160	@ 0xa0
 8009f40:	2280      	movs	r2, #128	@ 0x80
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	0089      	lsls	r1, r1, #2
 8009f46:	0092      	lsls	r2, r2, #2
 8009f48:	400b      	ands	r3, r1
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <__swsetup_r+0x86>
 8009f4e:	0021      	movs	r1, r4
 8009f50:	0028      	movs	r0, r5
 8009f52:	f000 f88f 	bl	800a074 <__smakebuf_r>
 8009f56:	220c      	movs	r2, #12
 8009f58:	5ea3      	ldrsh	r3, [r4, r2]
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	001a      	movs	r2, r3
 8009f5e:	400a      	ands	r2, r1
 8009f60:	420b      	tst	r3, r1
 8009f62:	d00b      	beq.n	8009f7c <__swsetup_r+0xac>
 8009f64:	2200      	movs	r2, #0
 8009f66:	60a2      	str	r2, [r4, #8]
 8009f68:	6962      	ldr	r2, [r4, #20]
 8009f6a:	4252      	negs	r2, r2
 8009f6c:	61a2      	str	r2, [r4, #24]
 8009f6e:	2000      	movs	r0, #0
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	4282      	cmp	r2, r0
 8009f74:	d101      	bne.n	8009f7a <__swsetup_r+0xaa>
 8009f76:	061a      	lsls	r2, r3, #24
 8009f78:	d4be      	bmi.n	8009ef8 <__swsetup_r+0x28>
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	0799      	lsls	r1, r3, #30
 8009f7e:	d400      	bmi.n	8009f82 <__swsetup_r+0xb2>
 8009f80:	6962      	ldr	r2, [r4, #20]
 8009f82:	60a2      	str	r2, [r4, #8]
 8009f84:	e7f3      	b.n	8009f6e <__swsetup_r+0x9e>
 8009f86:	46c0      	nop			@ (mov r8, r8)
 8009f88:	20000020 	.word	0x20000020

08009f8c <_raise_r>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	0004      	movs	r4, r0
 8009f90:	000d      	movs	r5, r1
 8009f92:	291f      	cmp	r1, #31
 8009f94:	d904      	bls.n	8009fa0 <_raise_r+0x14>
 8009f96:	2316      	movs	r3, #22
 8009f98:	6003      	str	r3, [r0, #0]
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	4240      	negs	r0, r0
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d004      	beq.n	8009fb0 <_raise_r+0x24>
 8009fa6:	008a      	lsls	r2, r1, #2
 8009fa8:	189b      	adds	r3, r3, r2
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	2a00      	cmp	r2, #0
 8009fae:	d108      	bne.n	8009fc2 <_raise_r+0x36>
 8009fb0:	0020      	movs	r0, r4
 8009fb2:	f000 f831 	bl	800a018 <_getpid_r>
 8009fb6:	002a      	movs	r2, r5
 8009fb8:	0001      	movs	r1, r0
 8009fba:	0020      	movs	r0, r4
 8009fbc:	f000 f81a 	bl	8009ff4 <_kill_r>
 8009fc0:	e7ed      	b.n	8009f9e <_raise_r+0x12>
 8009fc2:	2a01      	cmp	r2, #1
 8009fc4:	d009      	beq.n	8009fda <_raise_r+0x4e>
 8009fc6:	1c51      	adds	r1, r2, #1
 8009fc8:	d103      	bne.n	8009fd2 <_raise_r+0x46>
 8009fca:	2316      	movs	r3, #22
 8009fcc:	6003      	str	r3, [r0, #0]
 8009fce:	2001      	movs	r0, #1
 8009fd0:	e7e5      	b.n	8009f9e <_raise_r+0x12>
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	0028      	movs	r0, r5
 8009fd6:	6019      	str	r1, [r3, #0]
 8009fd8:	4790      	blx	r2
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e7df      	b.n	8009f9e <_raise_r+0x12>
	...

08009fe0 <raise>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	4b03      	ldr	r3, [pc, #12]	@ (8009ff0 <raise+0x10>)
 8009fe4:	0001      	movs	r1, r0
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	f7ff ffd0 	bl	8009f8c <_raise_r>
 8009fec:	bd10      	pop	{r4, pc}
 8009fee:	46c0      	nop			@ (mov r8, r8)
 8009ff0:	20000020 	.word	0x20000020

08009ff4 <_kill_r>:
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	b570      	push	{r4, r5, r6, lr}
 8009ff8:	4d06      	ldr	r5, [pc, #24]	@ (800a014 <_kill_r+0x20>)
 8009ffa:	0004      	movs	r4, r0
 8009ffc:	0008      	movs	r0, r1
 8009ffe:	0011      	movs	r1, r2
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	f7f9 fc56 	bl	80038b2 <_kill>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d103      	bne.n	800a012 <_kill_r+0x1e>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d000      	beq.n	800a012 <_kill_r+0x1e>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	200008a0 	.word	0x200008a0

0800a018 <_getpid_r>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	f7f9 fc44 	bl	80038a6 <_getpid>
 800a01e:	bd10      	pop	{r4, pc}

0800a020 <__swhatbuf_r>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	000e      	movs	r6, r1
 800a024:	001d      	movs	r5, r3
 800a026:	230e      	movs	r3, #14
 800a028:	5ec9      	ldrsh	r1, [r1, r3]
 800a02a:	0014      	movs	r4, r2
 800a02c:	b096      	sub	sp, #88	@ 0x58
 800a02e:	2900      	cmp	r1, #0
 800a030:	da0c      	bge.n	800a04c <__swhatbuf_r+0x2c>
 800a032:	89b2      	ldrh	r2, [r6, #12]
 800a034:	2380      	movs	r3, #128	@ 0x80
 800a036:	0011      	movs	r1, r2
 800a038:	4019      	ands	r1, r3
 800a03a:	421a      	tst	r2, r3
 800a03c:	d114      	bne.n	800a068 <__swhatbuf_r+0x48>
 800a03e:	2380      	movs	r3, #128	@ 0x80
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	2000      	movs	r0, #0
 800a044:	6029      	str	r1, [r5, #0]
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	b016      	add	sp, #88	@ 0x58
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	466a      	mov	r2, sp
 800a04e:	f000 f853 	bl	800a0f8 <_fstat_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	dbed      	blt.n	800a032 <__swhatbuf_r+0x12>
 800a056:	23f0      	movs	r3, #240	@ 0xf0
 800a058:	9901      	ldr	r1, [sp, #4]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	4019      	ands	r1, r3
 800a05e:	4b04      	ldr	r3, [pc, #16]	@ (800a070 <__swhatbuf_r+0x50>)
 800a060:	18c9      	adds	r1, r1, r3
 800a062:	424b      	negs	r3, r1
 800a064:	4159      	adcs	r1, r3
 800a066:	e7ea      	b.n	800a03e <__swhatbuf_r+0x1e>
 800a068:	2100      	movs	r1, #0
 800a06a:	2340      	movs	r3, #64	@ 0x40
 800a06c:	e7e9      	b.n	800a042 <__swhatbuf_r+0x22>
 800a06e:	46c0      	nop			@ (mov r8, r8)
 800a070:	ffffe000 	.word	0xffffe000

0800a074 <__smakebuf_r>:
 800a074:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a076:	2602      	movs	r6, #2
 800a078:	898b      	ldrh	r3, [r1, #12]
 800a07a:	0005      	movs	r5, r0
 800a07c:	000c      	movs	r4, r1
 800a07e:	b085      	sub	sp, #20
 800a080:	4233      	tst	r3, r6
 800a082:	d007      	beq.n	800a094 <__smakebuf_r+0x20>
 800a084:	0023      	movs	r3, r4
 800a086:	3347      	adds	r3, #71	@ 0x47
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	2301      	movs	r3, #1
 800a08e:	6163      	str	r3, [r4, #20]
 800a090:	b005      	add	sp, #20
 800a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a094:	ab03      	add	r3, sp, #12
 800a096:	aa02      	add	r2, sp, #8
 800a098:	f7ff ffc2 	bl	800a020 <__swhatbuf_r>
 800a09c:	9f02      	ldr	r7, [sp, #8]
 800a09e:	9001      	str	r0, [sp, #4]
 800a0a0:	0039      	movs	r1, r7
 800a0a2:	0028      	movs	r0, r5
 800a0a4:	f7fe fe88 	bl	8008db8 <_malloc_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d108      	bne.n	800a0be <__smakebuf_r+0x4a>
 800a0ac:	220c      	movs	r2, #12
 800a0ae:	5ea3      	ldrsh	r3, [r4, r2]
 800a0b0:	059a      	lsls	r2, r3, #22
 800a0b2:	d4ed      	bmi.n	800a090 <__smakebuf_r+0x1c>
 800a0b4:	2203      	movs	r2, #3
 800a0b6:	4393      	bics	r3, r2
 800a0b8:	431e      	orrs	r6, r3
 800a0ba:	81a6      	strh	r6, [r4, #12]
 800a0bc:	e7e2      	b.n	800a084 <__smakebuf_r+0x10>
 800a0be:	2380      	movs	r3, #128	@ 0x80
 800a0c0:	89a2      	ldrh	r2, [r4, #12]
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	9b03      	ldr	r3, [sp, #12]
 800a0ca:	6120      	str	r0, [r4, #16]
 800a0cc:	6167      	str	r7, [r4, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00c      	beq.n	800a0ec <__smakebuf_r+0x78>
 800a0d2:	0028      	movs	r0, r5
 800a0d4:	230e      	movs	r3, #14
 800a0d6:	5ee1      	ldrsh	r1, [r4, r3]
 800a0d8:	f000 f820 	bl	800a11c <_isatty_r>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d005      	beq.n	800a0ec <__smakebuf_r+0x78>
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	89a2      	ldrh	r2, [r4, #12]
 800a0e4:	439a      	bics	r2, r3
 800a0e6:	3b02      	subs	r3, #2
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	9a01      	ldr	r2, [sp, #4]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	e7cc      	b.n	800a090 <__smakebuf_r+0x1c>
	...

0800a0f8 <_fstat_r>:
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	b570      	push	{r4, r5, r6, lr}
 800a0fc:	4d06      	ldr	r5, [pc, #24]	@ (800a118 <_fstat_r+0x20>)
 800a0fe:	0004      	movs	r4, r0
 800a100:	0008      	movs	r0, r1
 800a102:	0011      	movs	r1, r2
 800a104:	602b      	str	r3, [r5, #0]
 800a106:	f7f9 fc34 	bl	8003972 <_fstat>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d103      	bne.n	800a116 <_fstat_r+0x1e>
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d000      	beq.n	800a116 <_fstat_r+0x1e>
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	200008a0 	.word	0x200008a0

0800a11c <_isatty_r>:
 800a11c:	2300      	movs	r3, #0
 800a11e:	b570      	push	{r4, r5, r6, lr}
 800a120:	4d06      	ldr	r5, [pc, #24]	@ (800a13c <_isatty_r+0x20>)
 800a122:	0004      	movs	r4, r0
 800a124:	0008      	movs	r0, r1
 800a126:	602b      	str	r3, [r5, #0]
 800a128:	f7f9 fc31 	bl	800398e <_isatty>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d103      	bne.n	800a138 <_isatty_r+0x1c>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d000      	beq.n	800a138 <_isatty_r+0x1c>
 800a136:	6023      	str	r3, [r4, #0]
 800a138:	bd70      	pop	{r4, r5, r6, pc}
 800a13a:	46c0      	nop			@ (mov r8, r8)
 800a13c:	200008a0 	.word	0x200008a0

0800a140 <log>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	0004      	movs	r4, r0
 800a144:	000d      	movs	r5, r1
 800a146:	f000 f837 	bl	800a1b8 <__ieee754_log>
 800a14a:	0022      	movs	r2, r4
 800a14c:	0006      	movs	r6, r0
 800a14e:	000f      	movs	r7, r1
 800a150:	002b      	movs	r3, r5
 800a152:	0020      	movs	r0, r4
 800a154:	0029      	movs	r1, r5
 800a156:	f7f8 fc3f 	bl	80029d8 <__aeabi_dcmpun>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d115      	bne.n	800a18a <log+0x4a>
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	0020      	movs	r0, r4
 800a164:	0029      	movs	r1, r5
 800a166:	f7f6 f987 	bl	8000478 <__aeabi_dcmpgt>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d10d      	bne.n	800a18a <log+0x4a>
 800a16e:	2200      	movs	r2, #0
 800a170:	2300      	movs	r3, #0
 800a172:	0020      	movs	r0, r4
 800a174:	0029      	movs	r1, r5
 800a176:	f7f6 f965 	bl	8000444 <__aeabi_dcmpeq>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d008      	beq.n	800a190 <log+0x50>
 800a17e:	f7fd feef 	bl	8007f60 <__errno>
 800a182:	2322      	movs	r3, #34	@ 0x22
 800a184:	2600      	movs	r6, #0
 800a186:	4f07      	ldr	r7, [pc, #28]	@ (800a1a4 <log+0x64>)
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	0030      	movs	r0, r6
 800a18c:	0039      	movs	r1, r7
 800a18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a190:	f7fd fee6 	bl	8007f60 <__errno>
 800a194:	2321      	movs	r3, #33	@ 0x21
 800a196:	6003      	str	r3, [r0, #0]
 800a198:	4803      	ldr	r0, [pc, #12]	@ (800a1a8 <log+0x68>)
 800a19a:	f000 f807 	bl	800a1ac <nan>
 800a19e:	0006      	movs	r6, r0
 800a1a0:	000f      	movs	r7, r1
 800a1a2:	e7f2      	b.n	800a18a <log+0x4a>
 800a1a4:	fff00000 	.word	0xfff00000
 800a1a8:	0800b534 	.word	0x0800b534

0800a1ac <nan>:
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	4901      	ldr	r1, [pc, #4]	@ (800a1b4 <nan+0x8>)
 800a1b0:	4770      	bx	lr
 800a1b2:	46c0      	nop			@ (mov r8, r8)
 800a1b4:	7ff80000 	.word	0x7ff80000

0800a1b8 <__ieee754_log>:
 800a1b8:	2380      	movs	r3, #128	@ 0x80
 800a1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1bc:	035b      	lsls	r3, r3, #13
 800a1be:	000e      	movs	r6, r1
 800a1c0:	b08d      	sub	sp, #52	@ 0x34
 800a1c2:	4299      	cmp	r1, r3
 800a1c4:	da23      	bge.n	800a20e <__ieee754_log+0x56>
 800a1c6:	004b      	lsls	r3, r1, #1
 800a1c8:	085b      	lsrs	r3, r3, #1
 800a1ca:	4303      	orrs	r3, r0
 800a1cc:	d107      	bne.n	800a1de <__ieee754_log+0x26>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	49b4      	ldr	r1, [pc, #720]	@ (800a4a8 <__ieee754_log+0x2f0>)
 800a1d6:	f7f7 f8d5 	bl	8001384 <__aeabi_ddiv>
 800a1da:	b00d      	add	sp, #52	@ 0x34
 800a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1de:	2900      	cmp	r1, #0
 800a1e0:	da06      	bge.n	800a1f0 <__ieee754_log+0x38>
 800a1e2:	0002      	movs	r2, r0
 800a1e4:	000b      	movs	r3, r1
 800a1e6:	f7f7 ffed 	bl	80021c4 <__aeabi_dsub>
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e7f2      	b.n	800a1d6 <__ieee754_log+0x1e>
 800a1f0:	4bae      	ldr	r3, [pc, #696]	@ (800a4ac <__ieee754_log+0x2f4>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f7f7 fd00 	bl	8001bf8 <__aeabi_dmul>
 800a1f8:	2336      	movs	r3, #54	@ 0x36
 800a1fa:	000e      	movs	r6, r1
 800a1fc:	425b      	negs	r3, r3
 800a1fe:	4aac      	ldr	r2, [pc, #688]	@ (800a4b0 <__ieee754_log+0x2f8>)
 800a200:	4296      	cmp	r6, r2
 800a202:	dd06      	ble.n	800a212 <__ieee754_log+0x5a>
 800a204:	0002      	movs	r2, r0
 800a206:	000b      	movs	r3, r1
 800a208:	f7f6 fcf6 	bl	8000bf8 <__aeabi_dadd>
 800a20c:	e7e5      	b.n	800a1da <__ieee754_log+0x22>
 800a20e:	2300      	movs	r3, #0
 800a210:	e7f5      	b.n	800a1fe <__ieee754_log+0x46>
 800a212:	4ca8      	ldr	r4, [pc, #672]	@ (800a4b4 <__ieee754_log+0x2fc>)
 800a214:	1532      	asrs	r2, r6, #20
 800a216:	1912      	adds	r2, r2, r4
 800a218:	0336      	lsls	r6, r6, #12
 800a21a:	4ca7      	ldr	r4, [pc, #668]	@ (800a4b8 <__ieee754_log+0x300>)
 800a21c:	18d2      	adds	r2, r2, r3
 800a21e:	0b33      	lsrs	r3, r6, #12
 800a220:	9302      	str	r3, [sp, #8]
 800a222:	191b      	adds	r3, r3, r4
 800a224:	2480      	movs	r4, #128	@ 0x80
 800a226:	0364      	lsls	r4, r4, #13
 800a228:	4023      	ands	r3, r4
 800a22a:	4ca4      	ldr	r4, [pc, #656]	@ (800a4bc <__ieee754_log+0x304>)
 800a22c:	9d02      	ldr	r5, [sp, #8]
 800a22e:	405c      	eors	r4, r3
 800a230:	151b      	asrs	r3, r3, #20
 800a232:	189b      	adds	r3, r3, r2
 800a234:	4325      	orrs	r5, r4
 800a236:	2200      	movs	r2, #0
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	0029      	movs	r1, r5
 800a23c:	4b9f      	ldr	r3, [pc, #636]	@ (800a4bc <__ieee754_log+0x304>)
 800a23e:	f7f7 ffc1 	bl	80021c4 <__aeabi_dsub>
 800a242:	9b02      	ldr	r3, [sp, #8]
 800a244:	0006      	movs	r6, r0
 800a246:	3302      	adds	r3, #2
 800a248:	031b      	lsls	r3, r3, #12
 800a24a:	000f      	movs	r7, r1
 800a24c:	2200      	movs	r2, #0
 800a24e:	0b1b      	lsrs	r3, r3, #12
 800a250:	2b02      	cmp	r3, #2
 800a252:	dc64      	bgt.n	800a31e <__ieee754_log+0x166>
 800a254:	2300      	movs	r3, #0
 800a256:	f7f6 f8f5 	bl	8000444 <__aeabi_dcmpeq>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d019      	beq.n	800a292 <__ieee754_log+0xda>
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d100      	bne.n	800a266 <__ieee754_log+0xae>
 800a264:	e11c      	b.n	800a4a0 <__ieee754_log+0x2e8>
 800a266:	0018      	movs	r0, r3
 800a268:	f7f8 fc14 	bl	8002a94 <__aeabi_i2d>
 800a26c:	4a94      	ldr	r2, [pc, #592]	@ (800a4c0 <__ieee754_log+0x308>)
 800a26e:	4b95      	ldr	r3, [pc, #596]	@ (800a4c4 <__ieee754_log+0x30c>)
 800a270:	0004      	movs	r4, r0
 800a272:	000d      	movs	r5, r1
 800a274:	f7f7 fcc0 	bl	8001bf8 <__aeabi_dmul>
 800a278:	4a93      	ldr	r2, [pc, #588]	@ (800a4c8 <__ieee754_log+0x310>)
 800a27a:	0006      	movs	r6, r0
 800a27c:	000f      	movs	r7, r1
 800a27e:	4b93      	ldr	r3, [pc, #588]	@ (800a4cc <__ieee754_log+0x314>)
 800a280:	0020      	movs	r0, r4
 800a282:	0029      	movs	r1, r5
 800a284:	f7f7 fcb8 	bl	8001bf8 <__aeabi_dmul>
 800a288:	0002      	movs	r2, r0
 800a28a:	000b      	movs	r3, r1
 800a28c:	0030      	movs	r0, r6
 800a28e:	0039      	movs	r1, r7
 800a290:	e7ba      	b.n	800a208 <__ieee754_log+0x50>
 800a292:	4a8f      	ldr	r2, [pc, #572]	@ (800a4d0 <__ieee754_log+0x318>)
 800a294:	4b8f      	ldr	r3, [pc, #572]	@ (800a4d4 <__ieee754_log+0x31c>)
 800a296:	0030      	movs	r0, r6
 800a298:	0039      	movs	r1, r7
 800a29a:	f7f7 fcad 	bl	8001bf8 <__aeabi_dmul>
 800a29e:	0002      	movs	r2, r0
 800a2a0:	000b      	movs	r3, r1
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	498c      	ldr	r1, [pc, #560]	@ (800a4d8 <__ieee754_log+0x320>)
 800a2a6:	f7f7 ff8d 	bl	80021c4 <__aeabi_dsub>
 800a2aa:	0032      	movs	r2, r6
 800a2ac:	0004      	movs	r4, r0
 800a2ae:	000d      	movs	r5, r1
 800a2b0:	003b      	movs	r3, r7
 800a2b2:	0030      	movs	r0, r6
 800a2b4:	0039      	movs	r1, r7
 800a2b6:	f7f7 fc9f 	bl	8001bf8 <__aeabi_dmul>
 800a2ba:	000b      	movs	r3, r1
 800a2bc:	0002      	movs	r2, r0
 800a2be:	0029      	movs	r1, r5
 800a2c0:	0020      	movs	r0, r4
 800a2c2:	f7f7 fc99 	bl	8001bf8 <__aeabi_dmul>
 800a2c6:	9b00      	ldr	r3, [sp, #0]
 800a2c8:	9002      	str	r0, [sp, #8]
 800a2ca:	9103      	str	r1, [sp, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <__ieee754_log+0x126>
 800a2d0:	0002      	movs	r2, r0
 800a2d2:	000b      	movs	r3, r1
 800a2d4:	0030      	movs	r0, r6
 800a2d6:	0039      	movs	r1, r7
 800a2d8:	f7f7 ff74 	bl	80021c4 <__aeabi_dsub>
 800a2dc:	e77d      	b.n	800a1da <__ieee754_log+0x22>
 800a2de:	9800      	ldr	r0, [sp, #0]
 800a2e0:	f7f8 fbd8 	bl	8002a94 <__aeabi_i2d>
 800a2e4:	4a76      	ldr	r2, [pc, #472]	@ (800a4c0 <__ieee754_log+0x308>)
 800a2e6:	4b77      	ldr	r3, [pc, #476]	@ (800a4c4 <__ieee754_log+0x30c>)
 800a2e8:	0004      	movs	r4, r0
 800a2ea:	000d      	movs	r5, r1
 800a2ec:	f7f7 fc84 	bl	8001bf8 <__aeabi_dmul>
 800a2f0:	4a75      	ldr	r2, [pc, #468]	@ (800a4c8 <__ieee754_log+0x310>)
 800a2f2:	9000      	str	r0, [sp, #0]
 800a2f4:	9101      	str	r1, [sp, #4]
 800a2f6:	4b75      	ldr	r3, [pc, #468]	@ (800a4cc <__ieee754_log+0x314>)
 800a2f8:	0020      	movs	r0, r4
 800a2fa:	0029      	movs	r1, r5
 800a2fc:	f7f7 fc7c 	bl	8001bf8 <__aeabi_dmul>
 800a300:	0002      	movs	r2, r0
 800a302:	000b      	movs	r3, r1
 800a304:	9802      	ldr	r0, [sp, #8]
 800a306:	9903      	ldr	r1, [sp, #12]
 800a308:	f7f7 ff5c 	bl	80021c4 <__aeabi_dsub>
 800a30c:	0032      	movs	r2, r6
 800a30e:	003b      	movs	r3, r7
 800a310:	f7f7 ff58 	bl	80021c4 <__aeabi_dsub>
 800a314:	0002      	movs	r2, r0
 800a316:	000b      	movs	r3, r1
 800a318:	9800      	ldr	r0, [sp, #0]
 800a31a:	9901      	ldr	r1, [sp, #4]
 800a31c:	e7dc      	b.n	800a2d8 <__ieee754_log+0x120>
 800a31e:	2380      	movs	r3, #128	@ 0x80
 800a320:	05db      	lsls	r3, r3, #23
 800a322:	f7f6 fc69 	bl	8000bf8 <__aeabi_dadd>
 800a326:	0002      	movs	r2, r0
 800a328:	000b      	movs	r3, r1
 800a32a:	0030      	movs	r0, r6
 800a32c:	0039      	movs	r1, r7
 800a32e:	f7f7 f829 	bl	8001384 <__aeabi_ddiv>
 800a332:	9004      	str	r0, [sp, #16]
 800a334:	9105      	str	r1, [sp, #20]
 800a336:	9800      	ldr	r0, [sp, #0]
 800a338:	f7f8 fbac 	bl	8002a94 <__aeabi_i2d>
 800a33c:	9a04      	ldr	r2, [sp, #16]
 800a33e:	9b05      	ldr	r3, [sp, #20]
 800a340:	9006      	str	r0, [sp, #24]
 800a342:	9107      	str	r1, [sp, #28]
 800a344:	0010      	movs	r0, r2
 800a346:	0019      	movs	r1, r3
 800a348:	f7f7 fc56 	bl	8001bf8 <__aeabi_dmul>
 800a34c:	4a63      	ldr	r2, [pc, #396]	@ (800a4dc <__ieee754_log+0x324>)
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	4694      	mov	ip, r2
 800a352:	4463      	add	r3, ip
 800a354:	0002      	movs	r2, r0
 800a356:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a358:	000b      	movs	r3, r1
 800a35a:	9008      	str	r0, [sp, #32]
 800a35c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a35e:	f7f7 fc4b 	bl	8001bf8 <__aeabi_dmul>
 800a362:	0004      	movs	r4, r0
 800a364:	000d      	movs	r5, r1
 800a366:	4a5e      	ldr	r2, [pc, #376]	@ (800a4e0 <__ieee754_log+0x328>)
 800a368:	4b5e      	ldr	r3, [pc, #376]	@ (800a4e4 <__ieee754_log+0x32c>)
 800a36a:	f7f7 fc45 	bl	8001bf8 <__aeabi_dmul>
 800a36e:	4a5e      	ldr	r2, [pc, #376]	@ (800a4e8 <__ieee754_log+0x330>)
 800a370:	4b5e      	ldr	r3, [pc, #376]	@ (800a4ec <__ieee754_log+0x334>)
 800a372:	f7f6 fc41 	bl	8000bf8 <__aeabi_dadd>
 800a376:	0022      	movs	r2, r4
 800a378:	002b      	movs	r3, r5
 800a37a:	f7f7 fc3d 	bl	8001bf8 <__aeabi_dmul>
 800a37e:	4a5c      	ldr	r2, [pc, #368]	@ (800a4f0 <__ieee754_log+0x338>)
 800a380:	4b5c      	ldr	r3, [pc, #368]	@ (800a4f4 <__ieee754_log+0x33c>)
 800a382:	f7f6 fc39 	bl	8000bf8 <__aeabi_dadd>
 800a386:	0022      	movs	r2, r4
 800a388:	002b      	movs	r3, r5
 800a38a:	f7f7 fc35 	bl	8001bf8 <__aeabi_dmul>
 800a38e:	4a5a      	ldr	r2, [pc, #360]	@ (800a4f8 <__ieee754_log+0x340>)
 800a390:	4b5a      	ldr	r3, [pc, #360]	@ (800a4fc <__ieee754_log+0x344>)
 800a392:	f7f6 fc31 	bl	8000bf8 <__aeabi_dadd>
 800a396:	9a08      	ldr	r2, [sp, #32]
 800a398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a39a:	f7f7 fc2d 	bl	8001bf8 <__aeabi_dmul>
 800a39e:	4a58      	ldr	r2, [pc, #352]	@ (800a500 <__ieee754_log+0x348>)
 800a3a0:	9008      	str	r0, [sp, #32]
 800a3a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3a4:	4b57      	ldr	r3, [pc, #348]	@ (800a504 <__ieee754_log+0x34c>)
 800a3a6:	0020      	movs	r0, r4
 800a3a8:	0029      	movs	r1, r5
 800a3aa:	f7f7 fc25 	bl	8001bf8 <__aeabi_dmul>
 800a3ae:	4a56      	ldr	r2, [pc, #344]	@ (800a508 <__ieee754_log+0x350>)
 800a3b0:	4b56      	ldr	r3, [pc, #344]	@ (800a50c <__ieee754_log+0x354>)
 800a3b2:	f7f6 fc21 	bl	8000bf8 <__aeabi_dadd>
 800a3b6:	0022      	movs	r2, r4
 800a3b8:	002b      	movs	r3, r5
 800a3ba:	f7f7 fc1d 	bl	8001bf8 <__aeabi_dmul>
 800a3be:	4a54      	ldr	r2, [pc, #336]	@ (800a510 <__ieee754_log+0x358>)
 800a3c0:	4b54      	ldr	r3, [pc, #336]	@ (800a514 <__ieee754_log+0x35c>)
 800a3c2:	f7f6 fc19 	bl	8000bf8 <__aeabi_dadd>
 800a3c6:	0022      	movs	r2, r4
 800a3c8:	002b      	movs	r3, r5
 800a3ca:	f7f7 fc15 	bl	8001bf8 <__aeabi_dmul>
 800a3ce:	0002      	movs	r2, r0
 800a3d0:	000b      	movs	r3, r1
 800a3d2:	9808      	ldr	r0, [sp, #32]
 800a3d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d6:	f7f6 fc0f 	bl	8000bf8 <__aeabi_dadd>
 800a3da:	9a02      	ldr	r2, [sp, #8]
 800a3dc:	4b4e      	ldr	r3, [pc, #312]	@ (800a518 <__ieee754_log+0x360>)
 800a3de:	0004      	movs	r4, r0
 800a3e0:	1a9b      	subs	r3, r3, r2
 800a3e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a3e4:	000d      	movs	r5, r1
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dd34      	ble.n	800a456 <__ieee754_log+0x29e>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4b3a      	ldr	r3, [pc, #232]	@ (800a4d8 <__ieee754_log+0x320>)
 800a3f0:	0030      	movs	r0, r6
 800a3f2:	0039      	movs	r1, r7
 800a3f4:	f7f7 fc00 	bl	8001bf8 <__aeabi_dmul>
 800a3f8:	0032      	movs	r2, r6
 800a3fa:	003b      	movs	r3, r7
 800a3fc:	f7f7 fbfc 	bl	8001bf8 <__aeabi_dmul>
 800a400:	0002      	movs	r2, r0
 800a402:	000b      	movs	r3, r1
 800a404:	9002      	str	r0, [sp, #8]
 800a406:	9103      	str	r1, [sp, #12]
 800a408:	0020      	movs	r0, r4
 800a40a:	0029      	movs	r1, r5
 800a40c:	f7f6 fbf4 	bl	8000bf8 <__aeabi_dadd>
 800a410:	9a04      	ldr	r2, [sp, #16]
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	f7f7 fbf0 	bl	8001bf8 <__aeabi_dmul>
 800a418:	9b00      	ldr	r3, [sp, #0]
 800a41a:	0004      	movs	r4, r0
 800a41c:	000d      	movs	r5, r1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <__ieee754_log+0x278>
 800a422:	0002      	movs	r2, r0
 800a424:	000b      	movs	r3, r1
 800a426:	9802      	ldr	r0, [sp, #8]
 800a428:	9903      	ldr	r1, [sp, #12]
 800a42a:	f7f7 fecb 	bl	80021c4 <__aeabi_dsub>
 800a42e:	e74f      	b.n	800a2d0 <__ieee754_log+0x118>
 800a430:	4a23      	ldr	r2, [pc, #140]	@ (800a4c0 <__ieee754_log+0x308>)
 800a432:	4b24      	ldr	r3, [pc, #144]	@ (800a4c4 <__ieee754_log+0x30c>)
 800a434:	9806      	ldr	r0, [sp, #24]
 800a436:	9907      	ldr	r1, [sp, #28]
 800a438:	f7f7 fbde 	bl	8001bf8 <__aeabi_dmul>
 800a43c:	4a22      	ldr	r2, [pc, #136]	@ (800a4c8 <__ieee754_log+0x310>)
 800a43e:	9000      	str	r0, [sp, #0]
 800a440:	9101      	str	r1, [sp, #4]
 800a442:	9806      	ldr	r0, [sp, #24]
 800a444:	9907      	ldr	r1, [sp, #28]
 800a446:	4b21      	ldr	r3, [pc, #132]	@ (800a4cc <__ieee754_log+0x314>)
 800a448:	f7f7 fbd6 	bl	8001bf8 <__aeabi_dmul>
 800a44c:	0022      	movs	r2, r4
 800a44e:	002b      	movs	r3, r5
 800a450:	f7f6 fbd2 	bl	8000bf8 <__aeabi_dadd>
 800a454:	e754      	b.n	800a300 <__ieee754_log+0x148>
 800a456:	0002      	movs	r2, r0
 800a458:	000b      	movs	r3, r1
 800a45a:	0030      	movs	r0, r6
 800a45c:	0039      	movs	r1, r7
 800a45e:	f7f7 feb1 	bl	80021c4 <__aeabi_dsub>
 800a462:	9a04      	ldr	r2, [sp, #16]
 800a464:	9b05      	ldr	r3, [sp, #20]
 800a466:	f7f7 fbc7 	bl	8001bf8 <__aeabi_dmul>
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	0004      	movs	r4, r0
 800a46e:	000d      	movs	r5, r1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <__ieee754_log+0x2c2>
 800a474:	0002      	movs	r2, r0
 800a476:	000b      	movs	r3, r1
 800a478:	e72c      	b.n	800a2d4 <__ieee754_log+0x11c>
 800a47a:	4a11      	ldr	r2, [pc, #68]	@ (800a4c0 <__ieee754_log+0x308>)
 800a47c:	4b11      	ldr	r3, [pc, #68]	@ (800a4c4 <__ieee754_log+0x30c>)
 800a47e:	9806      	ldr	r0, [sp, #24]
 800a480:	9907      	ldr	r1, [sp, #28]
 800a482:	f7f7 fbb9 	bl	8001bf8 <__aeabi_dmul>
 800a486:	4a10      	ldr	r2, [pc, #64]	@ (800a4c8 <__ieee754_log+0x310>)
 800a488:	9000      	str	r0, [sp, #0]
 800a48a:	9101      	str	r1, [sp, #4]
 800a48c:	9806      	ldr	r0, [sp, #24]
 800a48e:	9907      	ldr	r1, [sp, #28]
 800a490:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <__ieee754_log+0x314>)
 800a492:	f7f7 fbb1 	bl	8001bf8 <__aeabi_dmul>
 800a496:	0002      	movs	r2, r0
 800a498:	000b      	movs	r3, r1
 800a49a:	0020      	movs	r0, r4
 800a49c:	0029      	movs	r1, r5
 800a49e:	e733      	b.n	800a308 <__ieee754_log+0x150>
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	e699      	b.n	800a1da <__ieee754_log+0x22>
 800a4a6:	46c0      	nop			@ (mov r8, r8)
 800a4a8:	c3500000 	.word	0xc3500000
 800a4ac:	43500000 	.word	0x43500000
 800a4b0:	7fefffff 	.word	0x7fefffff
 800a4b4:	fffffc01 	.word	0xfffffc01
 800a4b8:	00095f64 	.word	0x00095f64
 800a4bc:	3ff00000 	.word	0x3ff00000
 800a4c0:	fee00000 	.word	0xfee00000
 800a4c4:	3fe62e42 	.word	0x3fe62e42
 800a4c8:	35793c76 	.word	0x35793c76
 800a4cc:	3dea39ef 	.word	0x3dea39ef
 800a4d0:	55555555 	.word	0x55555555
 800a4d4:	3fd55555 	.word	0x3fd55555
 800a4d8:	3fe00000 	.word	0x3fe00000
 800a4dc:	fff9eb86 	.word	0xfff9eb86
 800a4e0:	df3e5244 	.word	0xdf3e5244
 800a4e4:	3fc2f112 	.word	0x3fc2f112
 800a4e8:	96cb03de 	.word	0x96cb03de
 800a4ec:	3fc74664 	.word	0x3fc74664
 800a4f0:	94229359 	.word	0x94229359
 800a4f4:	3fd24924 	.word	0x3fd24924
 800a4f8:	55555593 	.word	0x55555593
 800a4fc:	3fe55555 	.word	0x3fe55555
 800a500:	d078c69f 	.word	0xd078c69f
 800a504:	3fc39a09 	.word	0x3fc39a09
 800a508:	1d8e78af 	.word	0x1d8e78af
 800a50c:	3fcc71c5 	.word	0x3fcc71c5
 800a510:	9997fa04 	.word	0x9997fa04
 800a514:	3fd99999 	.word	0x3fd99999
 800a518:	0006b851 	.word	0x0006b851

0800a51c <_init>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	46c0      	nop			@ (mov r8, r8)
 800a520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a522:	bc08      	pop	{r3}
 800a524:	469e      	mov	lr, r3
 800a526:	4770      	bx	lr

0800a528 <_fini>:
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	46c0      	nop			@ (mov r8, r8)
 800a52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52e:	bc08      	pop	{r3}
 800a530:	469e      	mov	lr, r3
 800a532:	4770      	bx	lr
