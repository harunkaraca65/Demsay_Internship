
DEM_MULTI_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009088  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08009140  08009140  0000a140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095cc  080095cc  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080095cc  080095cc  0000b1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080095cc  080095cc  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095cc  080095cc  0000a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095d0  080095d0  0000a5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080095d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200001d4  080097a8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  080097a8  0000b5a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ca  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002180  00000000  00000000  00018bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0001ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e9  00000000  00000000  0001b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017613  00000000  00000000  0001c1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed52  00000000  00000000  000337dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009215c  00000000  00000000  0004252e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d468a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a9c  00000000  00000000  000d46d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d816c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d4 	.word	0x200001d4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009128 	.word	0x08009128

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001d8 	.word	0x200001d8
 80000fc:	08009128 	.word	0x08009128

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f000 ffe3 	bl	8001400 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff27 	bl	8001298 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 ffd5 	bl	8001400 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 ffcb 	bl	8001400 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ff51 	bl	8001320 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff47 	bl	8001320 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f001 ff23 	bl	8002300 <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 faf0 	bl	8001aa8 <__aeabi_dsub>
 80004c8:	f001 ff1a 	bl	8002300 <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_dadd>:
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	464f      	mov	r7, r9
 80004e0:	4646      	mov	r6, r8
 80004e2:	46d6      	mov	lr, sl
 80004e4:	b5c0      	push	{r6, r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	9000      	str	r0, [sp, #0]
 80004ea:	9101      	str	r1, [sp, #4]
 80004ec:	030e      	lsls	r6, r1, #12
 80004ee:	004c      	lsls	r4, r1, #1
 80004f0:	0fcd      	lsrs	r5, r1, #31
 80004f2:	0a71      	lsrs	r1, r6, #9
 80004f4:	9e00      	ldr	r6, [sp, #0]
 80004f6:	005f      	lsls	r7, r3, #1
 80004f8:	0f76      	lsrs	r6, r6, #29
 80004fa:	430e      	orrs	r6, r1
 80004fc:	9900      	ldr	r1, [sp, #0]
 80004fe:	9200      	str	r2, [sp, #0]
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	00c9      	lsls	r1, r1, #3
 8000504:	4689      	mov	r9, r1
 8000506:	0319      	lsls	r1, r3, #12
 8000508:	0d7b      	lsrs	r3, r7, #21
 800050a:	4698      	mov	r8, r3
 800050c:	9b01      	ldr	r3, [sp, #4]
 800050e:	0a49      	lsrs	r1, r1, #9
 8000510:	0fdb      	lsrs	r3, r3, #31
 8000512:	469c      	mov	ip, r3
 8000514:	9b00      	ldr	r3, [sp, #0]
 8000516:	9a00      	ldr	r2, [sp, #0]
 8000518:	0f5b      	lsrs	r3, r3, #29
 800051a:	430b      	orrs	r3, r1
 800051c:	4641      	mov	r1, r8
 800051e:	0d64      	lsrs	r4, r4, #21
 8000520:	00d2      	lsls	r2, r2, #3
 8000522:	1a61      	subs	r1, r4, r1
 8000524:	4565      	cmp	r5, ip
 8000526:	d100      	bne.n	800052a <__aeabi_dadd+0x4e>
 8000528:	e0a6      	b.n	8000678 <__aeabi_dadd+0x19c>
 800052a:	2900      	cmp	r1, #0
 800052c:	dd72      	ble.n	8000614 <__aeabi_dadd+0x138>
 800052e:	4647      	mov	r7, r8
 8000530:	2f00      	cmp	r7, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_dadd+0x5a>
 8000534:	e0dd      	b.n	80006f2 <__aeabi_dadd+0x216>
 8000536:	4fcc      	ldr	r7, [pc, #816]	@ (8000868 <__aeabi_dadd+0x38c>)
 8000538:	42bc      	cmp	r4, r7
 800053a:	d100      	bne.n	800053e <__aeabi_dadd+0x62>
 800053c:	e19a      	b.n	8000874 <__aeabi_dadd+0x398>
 800053e:	2701      	movs	r7, #1
 8000540:	2938      	cmp	r1, #56	@ 0x38
 8000542:	dc17      	bgt.n	8000574 <__aeabi_dadd+0x98>
 8000544:	2780      	movs	r7, #128	@ 0x80
 8000546:	043f      	lsls	r7, r7, #16
 8000548:	433b      	orrs	r3, r7
 800054a:	291f      	cmp	r1, #31
 800054c:	dd00      	ble.n	8000550 <__aeabi_dadd+0x74>
 800054e:	e1dd      	b.n	800090c <__aeabi_dadd+0x430>
 8000550:	2720      	movs	r7, #32
 8000552:	1a78      	subs	r0, r7, r1
 8000554:	001f      	movs	r7, r3
 8000556:	4087      	lsls	r7, r0
 8000558:	46ba      	mov	sl, r7
 800055a:	0017      	movs	r7, r2
 800055c:	40cf      	lsrs	r7, r1
 800055e:	4684      	mov	ip, r0
 8000560:	0038      	movs	r0, r7
 8000562:	4657      	mov	r7, sl
 8000564:	4307      	orrs	r7, r0
 8000566:	4660      	mov	r0, ip
 8000568:	4082      	lsls	r2, r0
 800056a:	40cb      	lsrs	r3, r1
 800056c:	1e50      	subs	r0, r2, #1
 800056e:	4182      	sbcs	r2, r0
 8000570:	1af6      	subs	r6, r6, r3
 8000572:	4317      	orrs	r7, r2
 8000574:	464b      	mov	r3, r9
 8000576:	1bdf      	subs	r7, r3, r7
 8000578:	45b9      	cmp	r9, r7
 800057a:	4180      	sbcs	r0, r0
 800057c:	4240      	negs	r0, r0
 800057e:	1a36      	subs	r6, r6, r0
 8000580:	0233      	lsls	r3, r6, #8
 8000582:	d400      	bmi.n	8000586 <__aeabi_dadd+0xaa>
 8000584:	e0ff      	b.n	8000786 <__aeabi_dadd+0x2aa>
 8000586:	0276      	lsls	r6, r6, #9
 8000588:	0a76      	lsrs	r6, r6, #9
 800058a:	2e00      	cmp	r6, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_dadd+0xb4>
 800058e:	e13c      	b.n	800080a <__aeabi_dadd+0x32e>
 8000590:	0030      	movs	r0, r6
 8000592:	f001 ff43 	bl	800241c <__clzsi2>
 8000596:	0003      	movs	r3, r0
 8000598:	3b08      	subs	r3, #8
 800059a:	2120      	movs	r1, #32
 800059c:	0038      	movs	r0, r7
 800059e:	1aca      	subs	r2, r1, r3
 80005a0:	40d0      	lsrs	r0, r2
 80005a2:	409e      	lsls	r6, r3
 80005a4:	0002      	movs	r2, r0
 80005a6:	409f      	lsls	r7, r3
 80005a8:	4332      	orrs	r2, r6
 80005aa:	429c      	cmp	r4, r3
 80005ac:	dd00      	ble.n	80005b0 <__aeabi_dadd+0xd4>
 80005ae:	e1a6      	b.n	80008fe <__aeabi_dadd+0x422>
 80005b0:	1b18      	subs	r0, r3, r4
 80005b2:	3001      	adds	r0, #1
 80005b4:	1a09      	subs	r1, r1, r0
 80005b6:	003e      	movs	r6, r7
 80005b8:	408f      	lsls	r7, r1
 80005ba:	40c6      	lsrs	r6, r0
 80005bc:	1e7b      	subs	r3, r7, #1
 80005be:	419f      	sbcs	r7, r3
 80005c0:	0013      	movs	r3, r2
 80005c2:	408b      	lsls	r3, r1
 80005c4:	4337      	orrs	r7, r6
 80005c6:	431f      	orrs	r7, r3
 80005c8:	40c2      	lsrs	r2, r0
 80005ca:	003b      	movs	r3, r7
 80005cc:	0016      	movs	r6, r2
 80005ce:	2400      	movs	r4, #0
 80005d0:	4313      	orrs	r3, r2
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0xfa>
 80005d4:	e1df      	b.n	8000996 <__aeabi_dadd+0x4ba>
 80005d6:	077b      	lsls	r3, r7, #29
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x100>
 80005da:	e332      	b.n	8000c42 <__aeabi_dadd+0x766>
 80005dc:	230f      	movs	r3, #15
 80005de:	003a      	movs	r2, r7
 80005e0:	403b      	ands	r3, r7
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d004      	beq.n	80005f0 <__aeabi_dadd+0x114>
 80005e6:	1d3a      	adds	r2, r7, #4
 80005e8:	42ba      	cmp	r2, r7
 80005ea:	41bf      	sbcs	r7, r7
 80005ec:	427f      	negs	r7, r7
 80005ee:	19f6      	adds	r6, r6, r7
 80005f0:	0233      	lsls	r3, r6, #8
 80005f2:	d400      	bmi.n	80005f6 <__aeabi_dadd+0x11a>
 80005f4:	e323      	b.n	8000c3e <__aeabi_dadd+0x762>
 80005f6:	4b9c      	ldr	r3, [pc, #624]	@ (8000868 <__aeabi_dadd+0x38c>)
 80005f8:	3401      	adds	r4, #1
 80005fa:	429c      	cmp	r4, r3
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x124>
 80005fe:	e0b4      	b.n	800076a <__aeabi_dadd+0x28e>
 8000600:	4b9a      	ldr	r3, [pc, #616]	@ (800086c <__aeabi_dadd+0x390>)
 8000602:	0564      	lsls	r4, r4, #21
 8000604:	401e      	ands	r6, r3
 8000606:	0d64      	lsrs	r4, r4, #21
 8000608:	0777      	lsls	r7, r6, #29
 800060a:	08d2      	lsrs	r2, r2, #3
 800060c:	0276      	lsls	r6, r6, #9
 800060e:	4317      	orrs	r7, r2
 8000610:	0b36      	lsrs	r6, r6, #12
 8000612:	e0ac      	b.n	800076e <__aeabi_dadd+0x292>
 8000614:	2900      	cmp	r1, #0
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x13e>
 8000618:	e07e      	b.n	8000718 <__aeabi_dadd+0x23c>
 800061a:	4641      	mov	r1, r8
 800061c:	1b09      	subs	r1, r1, r4
 800061e:	2c00      	cmp	r4, #0
 8000620:	d000      	beq.n	8000624 <__aeabi_dadd+0x148>
 8000622:	e160      	b.n	80008e6 <__aeabi_dadd+0x40a>
 8000624:	0034      	movs	r4, r6
 8000626:	4648      	mov	r0, r9
 8000628:	4304      	orrs	r4, r0
 800062a:	d100      	bne.n	800062e <__aeabi_dadd+0x152>
 800062c:	e1c9      	b.n	80009c2 <__aeabi_dadd+0x4e6>
 800062e:	1e4c      	subs	r4, r1, #1
 8000630:	2901      	cmp	r1, #1
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0x15a>
 8000634:	e22e      	b.n	8000a94 <__aeabi_dadd+0x5b8>
 8000636:	4d8c      	ldr	r5, [pc, #560]	@ (8000868 <__aeabi_dadd+0x38c>)
 8000638:	42a9      	cmp	r1, r5
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x162>
 800063c:	e224      	b.n	8000a88 <__aeabi_dadd+0x5ac>
 800063e:	2701      	movs	r7, #1
 8000640:	2c38      	cmp	r4, #56	@ 0x38
 8000642:	dc11      	bgt.n	8000668 <__aeabi_dadd+0x18c>
 8000644:	0021      	movs	r1, r4
 8000646:	291f      	cmp	r1, #31
 8000648:	dd00      	ble.n	800064c <__aeabi_dadd+0x170>
 800064a:	e20b      	b.n	8000a64 <__aeabi_dadd+0x588>
 800064c:	2420      	movs	r4, #32
 800064e:	0037      	movs	r7, r6
 8000650:	4648      	mov	r0, r9
 8000652:	1a64      	subs	r4, r4, r1
 8000654:	40a7      	lsls	r7, r4
 8000656:	40c8      	lsrs	r0, r1
 8000658:	4307      	orrs	r7, r0
 800065a:	4648      	mov	r0, r9
 800065c:	40a0      	lsls	r0, r4
 800065e:	40ce      	lsrs	r6, r1
 8000660:	1e44      	subs	r4, r0, #1
 8000662:	41a0      	sbcs	r0, r4
 8000664:	1b9b      	subs	r3, r3, r6
 8000666:	4307      	orrs	r7, r0
 8000668:	1bd7      	subs	r7, r2, r7
 800066a:	42ba      	cmp	r2, r7
 800066c:	4192      	sbcs	r2, r2
 800066e:	4252      	negs	r2, r2
 8000670:	4665      	mov	r5, ip
 8000672:	4644      	mov	r4, r8
 8000674:	1a9e      	subs	r6, r3, r2
 8000676:	e783      	b.n	8000580 <__aeabi_dadd+0xa4>
 8000678:	2900      	cmp	r1, #0
 800067a:	dc00      	bgt.n	800067e <__aeabi_dadd+0x1a2>
 800067c:	e09c      	b.n	80007b8 <__aeabi_dadd+0x2dc>
 800067e:	4647      	mov	r7, r8
 8000680:	2f00      	cmp	r7, #0
 8000682:	d167      	bne.n	8000754 <__aeabi_dadd+0x278>
 8000684:	001f      	movs	r7, r3
 8000686:	4317      	orrs	r7, r2
 8000688:	d100      	bne.n	800068c <__aeabi_dadd+0x1b0>
 800068a:	e0e4      	b.n	8000856 <__aeabi_dadd+0x37a>
 800068c:	1e48      	subs	r0, r1, #1
 800068e:	2901      	cmp	r1, #1
 8000690:	d100      	bne.n	8000694 <__aeabi_dadd+0x1b8>
 8000692:	e19b      	b.n	80009cc <__aeabi_dadd+0x4f0>
 8000694:	4f74      	ldr	r7, [pc, #464]	@ (8000868 <__aeabi_dadd+0x38c>)
 8000696:	42b9      	cmp	r1, r7
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x1c0>
 800069a:	e0eb      	b.n	8000874 <__aeabi_dadd+0x398>
 800069c:	2701      	movs	r7, #1
 800069e:	0001      	movs	r1, r0
 80006a0:	2838      	cmp	r0, #56	@ 0x38
 80006a2:	dc11      	bgt.n	80006c8 <__aeabi_dadd+0x1ec>
 80006a4:	291f      	cmp	r1, #31
 80006a6:	dd00      	ble.n	80006aa <__aeabi_dadd+0x1ce>
 80006a8:	e1c7      	b.n	8000a3a <__aeabi_dadd+0x55e>
 80006aa:	2720      	movs	r7, #32
 80006ac:	1a78      	subs	r0, r7, r1
 80006ae:	001f      	movs	r7, r3
 80006b0:	4684      	mov	ip, r0
 80006b2:	4087      	lsls	r7, r0
 80006b4:	0010      	movs	r0, r2
 80006b6:	40c8      	lsrs	r0, r1
 80006b8:	4307      	orrs	r7, r0
 80006ba:	4660      	mov	r0, ip
 80006bc:	4082      	lsls	r2, r0
 80006be:	40cb      	lsrs	r3, r1
 80006c0:	1e50      	subs	r0, r2, #1
 80006c2:	4182      	sbcs	r2, r0
 80006c4:	18f6      	adds	r6, r6, r3
 80006c6:	4317      	orrs	r7, r2
 80006c8:	444f      	add	r7, r9
 80006ca:	454f      	cmp	r7, r9
 80006cc:	4180      	sbcs	r0, r0
 80006ce:	4240      	negs	r0, r0
 80006d0:	1836      	adds	r6, r6, r0
 80006d2:	0233      	lsls	r3, r6, #8
 80006d4:	d557      	bpl.n	8000786 <__aeabi_dadd+0x2aa>
 80006d6:	4b64      	ldr	r3, [pc, #400]	@ (8000868 <__aeabi_dadd+0x38c>)
 80006d8:	3401      	adds	r4, #1
 80006da:	429c      	cmp	r4, r3
 80006dc:	d045      	beq.n	800076a <__aeabi_dadd+0x28e>
 80006de:	2101      	movs	r1, #1
 80006e0:	4b62      	ldr	r3, [pc, #392]	@ (800086c <__aeabi_dadd+0x390>)
 80006e2:	087a      	lsrs	r2, r7, #1
 80006e4:	401e      	ands	r6, r3
 80006e6:	4039      	ands	r1, r7
 80006e8:	430a      	orrs	r2, r1
 80006ea:	07f7      	lsls	r7, r6, #31
 80006ec:	4317      	orrs	r7, r2
 80006ee:	0876      	lsrs	r6, r6, #1
 80006f0:	e771      	b.n	80005d6 <__aeabi_dadd+0xfa>
 80006f2:	001f      	movs	r7, r3
 80006f4:	4317      	orrs	r7, r2
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x21e>
 80006f8:	e0ad      	b.n	8000856 <__aeabi_dadd+0x37a>
 80006fa:	1e4f      	subs	r7, r1, #1
 80006fc:	46bc      	mov	ip, r7
 80006fe:	2901      	cmp	r1, #1
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x228>
 8000702:	e182      	b.n	8000a0a <__aeabi_dadd+0x52e>
 8000704:	4f58      	ldr	r7, [pc, #352]	@ (8000868 <__aeabi_dadd+0x38c>)
 8000706:	42b9      	cmp	r1, r7
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x230>
 800070a:	e190      	b.n	8000a2e <__aeabi_dadd+0x552>
 800070c:	4661      	mov	r1, ip
 800070e:	2701      	movs	r7, #1
 8000710:	2938      	cmp	r1, #56	@ 0x38
 8000712:	dd00      	ble.n	8000716 <__aeabi_dadd+0x23a>
 8000714:	e72e      	b.n	8000574 <__aeabi_dadd+0x98>
 8000716:	e718      	b.n	800054a <__aeabi_dadd+0x6e>
 8000718:	4f55      	ldr	r7, [pc, #340]	@ (8000870 <__aeabi_dadd+0x394>)
 800071a:	1c61      	adds	r1, r4, #1
 800071c:	4239      	tst	r1, r7
 800071e:	d000      	beq.n	8000722 <__aeabi_dadd+0x246>
 8000720:	e0d0      	b.n	80008c4 <__aeabi_dadd+0x3e8>
 8000722:	0031      	movs	r1, r6
 8000724:	4648      	mov	r0, r9
 8000726:	001f      	movs	r7, r3
 8000728:	4301      	orrs	r1, r0
 800072a:	4317      	orrs	r7, r2
 800072c:	2c00      	cmp	r4, #0
 800072e:	d000      	beq.n	8000732 <__aeabi_dadd+0x256>
 8000730:	e13d      	b.n	80009ae <__aeabi_dadd+0x4d2>
 8000732:	2900      	cmp	r1, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_dadd+0x25c>
 8000736:	e1bc      	b.n	8000ab2 <__aeabi_dadd+0x5d6>
 8000738:	2f00      	cmp	r7, #0
 800073a:	d000      	beq.n	800073e <__aeabi_dadd+0x262>
 800073c:	e1bf      	b.n	8000abe <__aeabi_dadd+0x5e2>
 800073e:	464b      	mov	r3, r9
 8000740:	2100      	movs	r1, #0
 8000742:	08d8      	lsrs	r0, r3, #3
 8000744:	0777      	lsls	r7, r6, #29
 8000746:	4307      	orrs	r7, r0
 8000748:	08f0      	lsrs	r0, r6, #3
 800074a:	0306      	lsls	r6, r0, #12
 800074c:	054c      	lsls	r4, r1, #21
 800074e:	0b36      	lsrs	r6, r6, #12
 8000750:	0d64      	lsrs	r4, r4, #21
 8000752:	e00c      	b.n	800076e <__aeabi_dadd+0x292>
 8000754:	4f44      	ldr	r7, [pc, #272]	@ (8000868 <__aeabi_dadd+0x38c>)
 8000756:	42bc      	cmp	r4, r7
 8000758:	d100      	bne.n	800075c <__aeabi_dadd+0x280>
 800075a:	e08b      	b.n	8000874 <__aeabi_dadd+0x398>
 800075c:	2701      	movs	r7, #1
 800075e:	2938      	cmp	r1, #56	@ 0x38
 8000760:	dcb2      	bgt.n	80006c8 <__aeabi_dadd+0x1ec>
 8000762:	2780      	movs	r7, #128	@ 0x80
 8000764:	043f      	lsls	r7, r7, #16
 8000766:	433b      	orrs	r3, r7
 8000768:	e79c      	b.n	80006a4 <__aeabi_dadd+0x1c8>
 800076a:	2600      	movs	r6, #0
 800076c:	2700      	movs	r7, #0
 800076e:	0524      	lsls	r4, r4, #20
 8000770:	4334      	orrs	r4, r6
 8000772:	07ed      	lsls	r5, r5, #31
 8000774:	432c      	orrs	r4, r5
 8000776:	0038      	movs	r0, r7
 8000778:	0021      	movs	r1, r4
 800077a:	b002      	add	sp, #8
 800077c:	bce0      	pop	{r5, r6, r7}
 800077e:	46ba      	mov	sl, r7
 8000780:	46b1      	mov	r9, r6
 8000782:	46a8      	mov	r8, r5
 8000784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000786:	077b      	lsls	r3, r7, #29
 8000788:	d004      	beq.n	8000794 <__aeabi_dadd+0x2b8>
 800078a:	230f      	movs	r3, #15
 800078c:	403b      	ands	r3, r7
 800078e:	2b04      	cmp	r3, #4
 8000790:	d000      	beq.n	8000794 <__aeabi_dadd+0x2b8>
 8000792:	e728      	b.n	80005e6 <__aeabi_dadd+0x10a>
 8000794:	08f8      	lsrs	r0, r7, #3
 8000796:	4b34      	ldr	r3, [pc, #208]	@ (8000868 <__aeabi_dadd+0x38c>)
 8000798:	0777      	lsls	r7, r6, #29
 800079a:	4307      	orrs	r7, r0
 800079c:	08f0      	lsrs	r0, r6, #3
 800079e:	429c      	cmp	r4, r3
 80007a0:	d000      	beq.n	80007a4 <__aeabi_dadd+0x2c8>
 80007a2:	e24a      	b.n	8000c3a <__aeabi_dadd+0x75e>
 80007a4:	003b      	movs	r3, r7
 80007a6:	4303      	orrs	r3, r0
 80007a8:	d059      	beq.n	800085e <__aeabi_dadd+0x382>
 80007aa:	2680      	movs	r6, #128	@ 0x80
 80007ac:	0336      	lsls	r6, r6, #12
 80007ae:	4306      	orrs	r6, r0
 80007b0:	0336      	lsls	r6, r6, #12
 80007b2:	4c2d      	ldr	r4, [pc, #180]	@ (8000868 <__aeabi_dadd+0x38c>)
 80007b4:	0b36      	lsrs	r6, r6, #12
 80007b6:	e7da      	b.n	800076e <__aeabi_dadd+0x292>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	d061      	beq.n	8000880 <__aeabi_dadd+0x3a4>
 80007bc:	4641      	mov	r1, r8
 80007be:	1b09      	subs	r1, r1, r4
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x2ea>
 80007c4:	e0b9      	b.n	800093a <__aeabi_dadd+0x45e>
 80007c6:	4c28      	ldr	r4, [pc, #160]	@ (8000868 <__aeabi_dadd+0x38c>)
 80007c8:	45a0      	cmp	r8, r4
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x2f2>
 80007cc:	e1a5      	b.n	8000b1a <__aeabi_dadd+0x63e>
 80007ce:	2701      	movs	r7, #1
 80007d0:	2938      	cmp	r1, #56	@ 0x38
 80007d2:	dc13      	bgt.n	80007fc <__aeabi_dadd+0x320>
 80007d4:	2480      	movs	r4, #128	@ 0x80
 80007d6:	0424      	lsls	r4, r4, #16
 80007d8:	4326      	orrs	r6, r4
 80007da:	291f      	cmp	r1, #31
 80007dc:	dd00      	ble.n	80007e0 <__aeabi_dadd+0x304>
 80007de:	e1c8      	b.n	8000b72 <__aeabi_dadd+0x696>
 80007e0:	2420      	movs	r4, #32
 80007e2:	0037      	movs	r7, r6
 80007e4:	4648      	mov	r0, r9
 80007e6:	1a64      	subs	r4, r4, r1
 80007e8:	40a7      	lsls	r7, r4
 80007ea:	40c8      	lsrs	r0, r1
 80007ec:	4307      	orrs	r7, r0
 80007ee:	4648      	mov	r0, r9
 80007f0:	40a0      	lsls	r0, r4
 80007f2:	40ce      	lsrs	r6, r1
 80007f4:	1e44      	subs	r4, r0, #1
 80007f6:	41a0      	sbcs	r0, r4
 80007f8:	199b      	adds	r3, r3, r6
 80007fa:	4307      	orrs	r7, r0
 80007fc:	18bf      	adds	r7, r7, r2
 80007fe:	4297      	cmp	r7, r2
 8000800:	4192      	sbcs	r2, r2
 8000802:	4252      	negs	r2, r2
 8000804:	4644      	mov	r4, r8
 8000806:	18d6      	adds	r6, r2, r3
 8000808:	e763      	b.n	80006d2 <__aeabi_dadd+0x1f6>
 800080a:	0038      	movs	r0, r7
 800080c:	f001 fe06 	bl	800241c <__clzsi2>
 8000810:	0003      	movs	r3, r0
 8000812:	3318      	adds	r3, #24
 8000814:	2b1f      	cmp	r3, #31
 8000816:	dc00      	bgt.n	800081a <__aeabi_dadd+0x33e>
 8000818:	e6bf      	b.n	800059a <__aeabi_dadd+0xbe>
 800081a:	003a      	movs	r2, r7
 800081c:	3808      	subs	r0, #8
 800081e:	4082      	lsls	r2, r0
 8000820:	429c      	cmp	r4, r3
 8000822:	dd00      	ble.n	8000826 <__aeabi_dadd+0x34a>
 8000824:	e083      	b.n	800092e <__aeabi_dadd+0x452>
 8000826:	1b1b      	subs	r3, r3, r4
 8000828:	1c58      	adds	r0, r3, #1
 800082a:	281f      	cmp	r0, #31
 800082c:	dc00      	bgt.n	8000830 <__aeabi_dadd+0x354>
 800082e:	e1b4      	b.n	8000b9a <__aeabi_dadd+0x6be>
 8000830:	0017      	movs	r7, r2
 8000832:	3b1f      	subs	r3, #31
 8000834:	40df      	lsrs	r7, r3
 8000836:	2820      	cmp	r0, #32
 8000838:	d005      	beq.n	8000846 <__aeabi_dadd+0x36a>
 800083a:	2340      	movs	r3, #64	@ 0x40
 800083c:	1a1b      	subs	r3, r3, r0
 800083e:	409a      	lsls	r2, r3
 8000840:	1e53      	subs	r3, r2, #1
 8000842:	419a      	sbcs	r2, r3
 8000844:	4317      	orrs	r7, r2
 8000846:	2400      	movs	r4, #0
 8000848:	2f00      	cmp	r7, #0
 800084a:	d00a      	beq.n	8000862 <__aeabi_dadd+0x386>
 800084c:	077b      	lsls	r3, r7, #29
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x376>
 8000850:	e6c4      	b.n	80005dc <__aeabi_dadd+0x100>
 8000852:	0026      	movs	r6, r4
 8000854:	e79e      	b.n	8000794 <__aeabi_dadd+0x2b8>
 8000856:	464b      	mov	r3, r9
 8000858:	000c      	movs	r4, r1
 800085a:	08d8      	lsrs	r0, r3, #3
 800085c:	e79b      	b.n	8000796 <__aeabi_dadd+0x2ba>
 800085e:	2700      	movs	r7, #0
 8000860:	4c01      	ldr	r4, [pc, #4]	@ (8000868 <__aeabi_dadd+0x38c>)
 8000862:	2600      	movs	r6, #0
 8000864:	e783      	b.n	800076e <__aeabi_dadd+0x292>
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	000007ff 	.word	0x000007ff
 800086c:	ff7fffff 	.word	0xff7fffff
 8000870:	000007fe 	.word	0x000007fe
 8000874:	464b      	mov	r3, r9
 8000876:	0777      	lsls	r7, r6, #29
 8000878:	08d8      	lsrs	r0, r3, #3
 800087a:	4307      	orrs	r7, r0
 800087c:	08f0      	lsrs	r0, r6, #3
 800087e:	e791      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000880:	4fcd      	ldr	r7, [pc, #820]	@ (8000bb8 <__aeabi_dadd+0x6dc>)
 8000882:	1c61      	adds	r1, r4, #1
 8000884:	4239      	tst	r1, r7
 8000886:	d16b      	bne.n	8000960 <__aeabi_dadd+0x484>
 8000888:	0031      	movs	r1, r6
 800088a:	4648      	mov	r0, r9
 800088c:	4301      	orrs	r1, r0
 800088e:	2c00      	cmp	r4, #0
 8000890:	d000      	beq.n	8000894 <__aeabi_dadd+0x3b8>
 8000892:	e14b      	b.n	8000b2c <__aeabi_dadd+0x650>
 8000894:	001f      	movs	r7, r3
 8000896:	4317      	orrs	r7, r2
 8000898:	2900      	cmp	r1, #0
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x3c2>
 800089c:	e181      	b.n	8000ba2 <__aeabi_dadd+0x6c6>
 800089e:	2f00      	cmp	r7, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x3c8>
 80008a2:	e74c      	b.n	800073e <__aeabi_dadd+0x262>
 80008a4:	444a      	add	r2, r9
 80008a6:	454a      	cmp	r2, r9
 80008a8:	4180      	sbcs	r0, r0
 80008aa:	18f6      	adds	r6, r6, r3
 80008ac:	4240      	negs	r0, r0
 80008ae:	1836      	adds	r6, r6, r0
 80008b0:	0233      	lsls	r3, r6, #8
 80008b2:	d500      	bpl.n	80008b6 <__aeabi_dadd+0x3da>
 80008b4:	e1b0      	b.n	8000c18 <__aeabi_dadd+0x73c>
 80008b6:	0017      	movs	r7, r2
 80008b8:	4691      	mov	r9, r2
 80008ba:	4337      	orrs	r7, r6
 80008bc:	d000      	beq.n	80008c0 <__aeabi_dadd+0x3e4>
 80008be:	e73e      	b.n	800073e <__aeabi_dadd+0x262>
 80008c0:	2600      	movs	r6, #0
 80008c2:	e754      	b.n	800076e <__aeabi_dadd+0x292>
 80008c4:	4649      	mov	r1, r9
 80008c6:	1a89      	subs	r1, r1, r2
 80008c8:	4688      	mov	r8, r1
 80008ca:	45c1      	cmp	r9, r8
 80008cc:	41bf      	sbcs	r7, r7
 80008ce:	1af1      	subs	r1, r6, r3
 80008d0:	427f      	negs	r7, r7
 80008d2:	1bc9      	subs	r1, r1, r7
 80008d4:	020f      	lsls	r7, r1, #8
 80008d6:	d461      	bmi.n	800099c <__aeabi_dadd+0x4c0>
 80008d8:	4647      	mov	r7, r8
 80008da:	430f      	orrs	r7, r1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x404>
 80008de:	e0bd      	b.n	8000a5c <__aeabi_dadd+0x580>
 80008e0:	000e      	movs	r6, r1
 80008e2:	4647      	mov	r7, r8
 80008e4:	e651      	b.n	800058a <__aeabi_dadd+0xae>
 80008e6:	4cb5      	ldr	r4, [pc, #724]	@ (8000bbc <__aeabi_dadd+0x6e0>)
 80008e8:	45a0      	cmp	r8, r4
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x412>
 80008ec:	e100      	b.n	8000af0 <__aeabi_dadd+0x614>
 80008ee:	2701      	movs	r7, #1
 80008f0:	2938      	cmp	r1, #56	@ 0x38
 80008f2:	dd00      	ble.n	80008f6 <__aeabi_dadd+0x41a>
 80008f4:	e6b8      	b.n	8000668 <__aeabi_dadd+0x18c>
 80008f6:	2480      	movs	r4, #128	@ 0x80
 80008f8:	0424      	lsls	r4, r4, #16
 80008fa:	4326      	orrs	r6, r4
 80008fc:	e6a3      	b.n	8000646 <__aeabi_dadd+0x16a>
 80008fe:	4eb0      	ldr	r6, [pc, #704]	@ (8000bc0 <__aeabi_dadd+0x6e4>)
 8000900:	1ae4      	subs	r4, r4, r3
 8000902:	4016      	ands	r6, r2
 8000904:	077b      	lsls	r3, r7, #29
 8000906:	d000      	beq.n	800090a <__aeabi_dadd+0x42e>
 8000908:	e73f      	b.n	800078a <__aeabi_dadd+0x2ae>
 800090a:	e743      	b.n	8000794 <__aeabi_dadd+0x2b8>
 800090c:	000f      	movs	r7, r1
 800090e:	0018      	movs	r0, r3
 8000910:	3f20      	subs	r7, #32
 8000912:	40f8      	lsrs	r0, r7
 8000914:	4684      	mov	ip, r0
 8000916:	2920      	cmp	r1, #32
 8000918:	d003      	beq.n	8000922 <__aeabi_dadd+0x446>
 800091a:	2740      	movs	r7, #64	@ 0x40
 800091c:	1a79      	subs	r1, r7, r1
 800091e:	408b      	lsls	r3, r1
 8000920:	431a      	orrs	r2, r3
 8000922:	1e53      	subs	r3, r2, #1
 8000924:	419a      	sbcs	r2, r3
 8000926:	4663      	mov	r3, ip
 8000928:	0017      	movs	r7, r2
 800092a:	431f      	orrs	r7, r3
 800092c:	e622      	b.n	8000574 <__aeabi_dadd+0x98>
 800092e:	48a4      	ldr	r0, [pc, #656]	@ (8000bc0 <__aeabi_dadd+0x6e4>)
 8000930:	1ae1      	subs	r1, r4, r3
 8000932:	4010      	ands	r0, r2
 8000934:	0747      	lsls	r7, r0, #29
 8000936:	08c0      	lsrs	r0, r0, #3
 8000938:	e707      	b.n	800074a <__aeabi_dadd+0x26e>
 800093a:	0034      	movs	r4, r6
 800093c:	4648      	mov	r0, r9
 800093e:	4304      	orrs	r4, r0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x468>
 8000942:	e0fa      	b.n	8000b3a <__aeabi_dadd+0x65e>
 8000944:	1e4c      	subs	r4, r1, #1
 8000946:	2901      	cmp	r1, #1
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x470>
 800094a:	e0d7      	b.n	8000afc <__aeabi_dadd+0x620>
 800094c:	4f9b      	ldr	r7, [pc, #620]	@ (8000bbc <__aeabi_dadd+0x6e0>)
 800094e:	42b9      	cmp	r1, r7
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x478>
 8000952:	e0e2      	b.n	8000b1a <__aeabi_dadd+0x63e>
 8000954:	2701      	movs	r7, #1
 8000956:	2c38      	cmp	r4, #56	@ 0x38
 8000958:	dd00      	ble.n	800095c <__aeabi_dadd+0x480>
 800095a:	e74f      	b.n	80007fc <__aeabi_dadd+0x320>
 800095c:	0021      	movs	r1, r4
 800095e:	e73c      	b.n	80007da <__aeabi_dadd+0x2fe>
 8000960:	4c96      	ldr	r4, [pc, #600]	@ (8000bbc <__aeabi_dadd+0x6e0>)
 8000962:	42a1      	cmp	r1, r4
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x48c>
 8000966:	e0dd      	b.n	8000b24 <__aeabi_dadd+0x648>
 8000968:	444a      	add	r2, r9
 800096a:	454a      	cmp	r2, r9
 800096c:	4180      	sbcs	r0, r0
 800096e:	18f3      	adds	r3, r6, r3
 8000970:	4240      	negs	r0, r0
 8000972:	1818      	adds	r0, r3, r0
 8000974:	07c7      	lsls	r7, r0, #31
 8000976:	0852      	lsrs	r2, r2, #1
 8000978:	4317      	orrs	r7, r2
 800097a:	0846      	lsrs	r6, r0, #1
 800097c:	0752      	lsls	r2, r2, #29
 800097e:	d005      	beq.n	800098c <__aeabi_dadd+0x4b0>
 8000980:	220f      	movs	r2, #15
 8000982:	000c      	movs	r4, r1
 8000984:	403a      	ands	r2, r7
 8000986:	2a04      	cmp	r2, #4
 8000988:	d000      	beq.n	800098c <__aeabi_dadd+0x4b0>
 800098a:	e62c      	b.n	80005e6 <__aeabi_dadd+0x10a>
 800098c:	0776      	lsls	r6, r6, #29
 800098e:	08ff      	lsrs	r7, r7, #3
 8000990:	4337      	orrs	r7, r6
 8000992:	0900      	lsrs	r0, r0, #4
 8000994:	e6d9      	b.n	800074a <__aeabi_dadd+0x26e>
 8000996:	2700      	movs	r7, #0
 8000998:	2600      	movs	r6, #0
 800099a:	e6e8      	b.n	800076e <__aeabi_dadd+0x292>
 800099c:	4649      	mov	r1, r9
 800099e:	1a57      	subs	r7, r2, r1
 80009a0:	42ba      	cmp	r2, r7
 80009a2:	4192      	sbcs	r2, r2
 80009a4:	1b9e      	subs	r6, r3, r6
 80009a6:	4252      	negs	r2, r2
 80009a8:	4665      	mov	r5, ip
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	e5ed      	b.n	800058a <__aeabi_dadd+0xae>
 80009ae:	2900      	cmp	r1, #0
 80009b0:	d000      	beq.n	80009b4 <__aeabi_dadd+0x4d8>
 80009b2:	e0c6      	b.n	8000b42 <__aeabi_dadd+0x666>
 80009b4:	2f00      	cmp	r7, #0
 80009b6:	d167      	bne.n	8000a88 <__aeabi_dadd+0x5ac>
 80009b8:	2680      	movs	r6, #128	@ 0x80
 80009ba:	2500      	movs	r5, #0
 80009bc:	4c7f      	ldr	r4, [pc, #508]	@ (8000bbc <__aeabi_dadd+0x6e0>)
 80009be:	0336      	lsls	r6, r6, #12
 80009c0:	e6d5      	b.n	800076e <__aeabi_dadd+0x292>
 80009c2:	4665      	mov	r5, ip
 80009c4:	000c      	movs	r4, r1
 80009c6:	001e      	movs	r6, r3
 80009c8:	08d0      	lsrs	r0, r2, #3
 80009ca:	e6e4      	b.n	8000796 <__aeabi_dadd+0x2ba>
 80009cc:	444a      	add	r2, r9
 80009ce:	454a      	cmp	r2, r9
 80009d0:	4180      	sbcs	r0, r0
 80009d2:	18f3      	adds	r3, r6, r3
 80009d4:	4240      	negs	r0, r0
 80009d6:	1818      	adds	r0, r3, r0
 80009d8:	0011      	movs	r1, r2
 80009da:	0203      	lsls	r3, r0, #8
 80009dc:	d400      	bmi.n	80009e0 <__aeabi_dadd+0x504>
 80009de:	e096      	b.n	8000b0e <__aeabi_dadd+0x632>
 80009e0:	4b77      	ldr	r3, [pc, #476]	@ (8000bc0 <__aeabi_dadd+0x6e4>)
 80009e2:	0849      	lsrs	r1, r1, #1
 80009e4:	4018      	ands	r0, r3
 80009e6:	07c3      	lsls	r3, r0, #31
 80009e8:	430b      	orrs	r3, r1
 80009ea:	0844      	lsrs	r4, r0, #1
 80009ec:	0749      	lsls	r1, r1, #29
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x516>
 80009f0:	e129      	b.n	8000c46 <__aeabi_dadd+0x76a>
 80009f2:	220f      	movs	r2, #15
 80009f4:	401a      	ands	r2, r3
 80009f6:	2a04      	cmp	r2, #4
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x520>
 80009fa:	e0ea      	b.n	8000bd2 <__aeabi_dadd+0x6f6>
 80009fc:	1d1f      	adds	r7, r3, #4
 80009fe:	429f      	cmp	r7, r3
 8000a00:	41b6      	sbcs	r6, r6
 8000a02:	4276      	negs	r6, r6
 8000a04:	1936      	adds	r6, r6, r4
 8000a06:	2402      	movs	r4, #2
 8000a08:	e6c4      	b.n	8000794 <__aeabi_dadd+0x2b8>
 8000a0a:	4649      	mov	r1, r9
 8000a0c:	1a8f      	subs	r7, r1, r2
 8000a0e:	45b9      	cmp	r9, r7
 8000a10:	4180      	sbcs	r0, r0
 8000a12:	1af6      	subs	r6, r6, r3
 8000a14:	4240      	negs	r0, r0
 8000a16:	1a36      	subs	r6, r6, r0
 8000a18:	0233      	lsls	r3, r6, #8
 8000a1a:	d406      	bmi.n	8000a2a <__aeabi_dadd+0x54e>
 8000a1c:	0773      	lsls	r3, r6, #29
 8000a1e:	08ff      	lsrs	r7, r7, #3
 8000a20:	2101      	movs	r1, #1
 8000a22:	431f      	orrs	r7, r3
 8000a24:	08f0      	lsrs	r0, r6, #3
 8000a26:	e690      	b.n	800074a <__aeabi_dadd+0x26e>
 8000a28:	4665      	mov	r5, ip
 8000a2a:	2401      	movs	r4, #1
 8000a2c:	e5ab      	b.n	8000586 <__aeabi_dadd+0xaa>
 8000a2e:	464b      	mov	r3, r9
 8000a30:	0777      	lsls	r7, r6, #29
 8000a32:	08d8      	lsrs	r0, r3, #3
 8000a34:	4307      	orrs	r7, r0
 8000a36:	08f0      	lsrs	r0, r6, #3
 8000a38:	e6b4      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000a3a:	000f      	movs	r7, r1
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	3f20      	subs	r7, #32
 8000a40:	40f8      	lsrs	r0, r7
 8000a42:	4684      	mov	ip, r0
 8000a44:	2920      	cmp	r1, #32
 8000a46:	d003      	beq.n	8000a50 <__aeabi_dadd+0x574>
 8000a48:	2740      	movs	r7, #64	@ 0x40
 8000a4a:	1a79      	subs	r1, r7, r1
 8000a4c:	408b      	lsls	r3, r1
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	1e53      	subs	r3, r2, #1
 8000a52:	419a      	sbcs	r2, r3
 8000a54:	4663      	mov	r3, ip
 8000a56:	0017      	movs	r7, r2
 8000a58:	431f      	orrs	r7, r3
 8000a5a:	e635      	b.n	80006c8 <__aeabi_dadd+0x1ec>
 8000a5c:	2500      	movs	r5, #0
 8000a5e:	2400      	movs	r4, #0
 8000a60:	2600      	movs	r6, #0
 8000a62:	e684      	b.n	800076e <__aeabi_dadd+0x292>
 8000a64:	000c      	movs	r4, r1
 8000a66:	0035      	movs	r5, r6
 8000a68:	3c20      	subs	r4, #32
 8000a6a:	40e5      	lsrs	r5, r4
 8000a6c:	2920      	cmp	r1, #32
 8000a6e:	d005      	beq.n	8000a7c <__aeabi_dadd+0x5a0>
 8000a70:	2440      	movs	r4, #64	@ 0x40
 8000a72:	1a61      	subs	r1, r4, r1
 8000a74:	408e      	lsls	r6, r1
 8000a76:	4649      	mov	r1, r9
 8000a78:	4331      	orrs	r1, r6
 8000a7a:	4689      	mov	r9, r1
 8000a7c:	4648      	mov	r0, r9
 8000a7e:	1e41      	subs	r1, r0, #1
 8000a80:	4188      	sbcs	r0, r1
 8000a82:	0007      	movs	r7, r0
 8000a84:	432f      	orrs	r7, r5
 8000a86:	e5ef      	b.n	8000668 <__aeabi_dadd+0x18c>
 8000a88:	08d2      	lsrs	r2, r2, #3
 8000a8a:	075f      	lsls	r7, r3, #29
 8000a8c:	4665      	mov	r5, ip
 8000a8e:	4317      	orrs	r7, r2
 8000a90:	08d8      	lsrs	r0, r3, #3
 8000a92:	e687      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000a94:	1a17      	subs	r7, r2, r0
 8000a96:	42ba      	cmp	r2, r7
 8000a98:	4192      	sbcs	r2, r2
 8000a9a:	1b9e      	subs	r6, r3, r6
 8000a9c:	4252      	negs	r2, r2
 8000a9e:	1ab6      	subs	r6, r6, r2
 8000aa0:	0233      	lsls	r3, r6, #8
 8000aa2:	d4c1      	bmi.n	8000a28 <__aeabi_dadd+0x54c>
 8000aa4:	0773      	lsls	r3, r6, #29
 8000aa6:	08ff      	lsrs	r7, r7, #3
 8000aa8:	4665      	mov	r5, ip
 8000aaa:	2101      	movs	r1, #1
 8000aac:	431f      	orrs	r7, r3
 8000aae:	08f0      	lsrs	r0, r6, #3
 8000ab0:	e64b      	b.n	800074a <__aeabi_dadd+0x26e>
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	d07b      	beq.n	8000bae <__aeabi_dadd+0x6d2>
 8000ab6:	4665      	mov	r5, ip
 8000ab8:	001e      	movs	r6, r3
 8000aba:	4691      	mov	r9, r2
 8000abc:	e63f      	b.n	800073e <__aeabi_dadd+0x262>
 8000abe:	1a81      	subs	r1, r0, r2
 8000ac0:	4688      	mov	r8, r1
 8000ac2:	45c1      	cmp	r9, r8
 8000ac4:	41a4      	sbcs	r4, r4
 8000ac6:	1af1      	subs	r1, r6, r3
 8000ac8:	4264      	negs	r4, r4
 8000aca:	1b09      	subs	r1, r1, r4
 8000acc:	2480      	movs	r4, #128	@ 0x80
 8000ace:	0424      	lsls	r4, r4, #16
 8000ad0:	4221      	tst	r1, r4
 8000ad2:	d077      	beq.n	8000bc4 <__aeabi_dadd+0x6e8>
 8000ad4:	1a10      	subs	r0, r2, r0
 8000ad6:	4282      	cmp	r2, r0
 8000ad8:	4192      	sbcs	r2, r2
 8000ada:	0007      	movs	r7, r0
 8000adc:	1b9e      	subs	r6, r3, r6
 8000ade:	4252      	negs	r2, r2
 8000ae0:	1ab6      	subs	r6, r6, r2
 8000ae2:	4337      	orrs	r7, r6
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_dadd+0x60c>
 8000ae6:	e0a0      	b.n	8000c2a <__aeabi_dadd+0x74e>
 8000ae8:	4665      	mov	r5, ip
 8000aea:	2400      	movs	r4, #0
 8000aec:	2600      	movs	r6, #0
 8000aee:	e63e      	b.n	800076e <__aeabi_dadd+0x292>
 8000af0:	075f      	lsls	r7, r3, #29
 8000af2:	08d2      	lsrs	r2, r2, #3
 8000af4:	4665      	mov	r5, ip
 8000af6:	4317      	orrs	r7, r2
 8000af8:	08d8      	lsrs	r0, r3, #3
 8000afa:	e653      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000afc:	1881      	adds	r1, r0, r2
 8000afe:	4291      	cmp	r1, r2
 8000b00:	4192      	sbcs	r2, r2
 8000b02:	18f0      	adds	r0, r6, r3
 8000b04:	4252      	negs	r2, r2
 8000b06:	1880      	adds	r0, r0, r2
 8000b08:	0203      	lsls	r3, r0, #8
 8000b0a:	d500      	bpl.n	8000b0e <__aeabi_dadd+0x632>
 8000b0c:	e768      	b.n	80009e0 <__aeabi_dadd+0x504>
 8000b0e:	0747      	lsls	r7, r0, #29
 8000b10:	08c9      	lsrs	r1, r1, #3
 8000b12:	430f      	orrs	r7, r1
 8000b14:	08c0      	lsrs	r0, r0, #3
 8000b16:	2101      	movs	r1, #1
 8000b18:	e617      	b.n	800074a <__aeabi_dadd+0x26e>
 8000b1a:	08d2      	lsrs	r2, r2, #3
 8000b1c:	075f      	lsls	r7, r3, #29
 8000b1e:	4317      	orrs	r7, r2
 8000b20:	08d8      	lsrs	r0, r3, #3
 8000b22:	e63f      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	2600      	movs	r6, #0
 8000b28:	2700      	movs	r7, #0
 8000b2a:	e620      	b.n	800076e <__aeabi_dadd+0x292>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	d156      	bne.n	8000bde <__aeabi_dadd+0x702>
 8000b30:	075f      	lsls	r7, r3, #29
 8000b32:	08d2      	lsrs	r2, r2, #3
 8000b34:	4317      	orrs	r7, r2
 8000b36:	08d8      	lsrs	r0, r3, #3
 8000b38:	e634      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000b3a:	000c      	movs	r4, r1
 8000b3c:	001e      	movs	r6, r3
 8000b3e:	08d0      	lsrs	r0, r2, #3
 8000b40:	e629      	b.n	8000796 <__aeabi_dadd+0x2ba>
 8000b42:	08c1      	lsrs	r1, r0, #3
 8000b44:	0770      	lsls	r0, r6, #29
 8000b46:	4301      	orrs	r1, r0
 8000b48:	08f0      	lsrs	r0, r6, #3
 8000b4a:	2f00      	cmp	r7, #0
 8000b4c:	d062      	beq.n	8000c14 <__aeabi_dadd+0x738>
 8000b4e:	2480      	movs	r4, #128	@ 0x80
 8000b50:	0324      	lsls	r4, r4, #12
 8000b52:	4220      	tst	r0, r4
 8000b54:	d007      	beq.n	8000b66 <__aeabi_dadd+0x68a>
 8000b56:	08de      	lsrs	r6, r3, #3
 8000b58:	4226      	tst	r6, r4
 8000b5a:	d104      	bne.n	8000b66 <__aeabi_dadd+0x68a>
 8000b5c:	4665      	mov	r5, ip
 8000b5e:	0030      	movs	r0, r6
 8000b60:	08d1      	lsrs	r1, r2, #3
 8000b62:	075b      	lsls	r3, r3, #29
 8000b64:	4319      	orrs	r1, r3
 8000b66:	0f4f      	lsrs	r7, r1, #29
 8000b68:	00c9      	lsls	r1, r1, #3
 8000b6a:	08c9      	lsrs	r1, r1, #3
 8000b6c:	077f      	lsls	r7, r7, #29
 8000b6e:	430f      	orrs	r7, r1
 8000b70:	e618      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000b72:	000c      	movs	r4, r1
 8000b74:	0030      	movs	r0, r6
 8000b76:	3c20      	subs	r4, #32
 8000b78:	40e0      	lsrs	r0, r4
 8000b7a:	4684      	mov	ip, r0
 8000b7c:	2920      	cmp	r1, #32
 8000b7e:	d005      	beq.n	8000b8c <__aeabi_dadd+0x6b0>
 8000b80:	2440      	movs	r4, #64	@ 0x40
 8000b82:	1a61      	subs	r1, r4, r1
 8000b84:	408e      	lsls	r6, r1
 8000b86:	4649      	mov	r1, r9
 8000b88:	4331      	orrs	r1, r6
 8000b8a:	4689      	mov	r9, r1
 8000b8c:	4648      	mov	r0, r9
 8000b8e:	1e41      	subs	r1, r0, #1
 8000b90:	4188      	sbcs	r0, r1
 8000b92:	4661      	mov	r1, ip
 8000b94:	0007      	movs	r7, r0
 8000b96:	430f      	orrs	r7, r1
 8000b98:	e630      	b.n	80007fc <__aeabi_dadd+0x320>
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	1a09      	subs	r1, r1, r0
 8000ba0:	e50e      	b.n	80005c0 <__aeabi_dadd+0xe4>
 8000ba2:	001e      	movs	r6, r3
 8000ba4:	2f00      	cmp	r7, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x6ce>
 8000ba8:	e522      	b.n	80005f0 <__aeabi_dadd+0x114>
 8000baa:	2400      	movs	r4, #0
 8000bac:	e758      	b.n	8000a60 <__aeabi_dadd+0x584>
 8000bae:	2500      	movs	r5, #0
 8000bb0:	2400      	movs	r4, #0
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	e5db      	b.n	800076e <__aeabi_dadd+0x292>
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	000007fe 	.word	0x000007fe
 8000bbc:	000007ff 	.word	0x000007ff
 8000bc0:	ff7fffff 	.word	0xff7fffff
 8000bc4:	4647      	mov	r7, r8
 8000bc6:	430f      	orrs	r7, r1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x6f0>
 8000bca:	e747      	b.n	8000a5c <__aeabi_dadd+0x580>
 8000bcc:	000e      	movs	r6, r1
 8000bce:	46c1      	mov	r9, r8
 8000bd0:	e5b5      	b.n	800073e <__aeabi_dadd+0x262>
 8000bd2:	08df      	lsrs	r7, r3, #3
 8000bd4:	0764      	lsls	r4, r4, #29
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	4327      	orrs	r7, r4
 8000bda:	0900      	lsrs	r0, r0, #4
 8000bdc:	e5b5      	b.n	800074a <__aeabi_dadd+0x26e>
 8000bde:	0019      	movs	r1, r3
 8000be0:	08c0      	lsrs	r0, r0, #3
 8000be2:	0777      	lsls	r7, r6, #29
 8000be4:	4307      	orrs	r7, r0
 8000be6:	4311      	orrs	r1, r2
 8000be8:	08f0      	lsrs	r0, r6, #3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x714>
 8000bee:	e5d9      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000bf0:	2180      	movs	r1, #128	@ 0x80
 8000bf2:	0309      	lsls	r1, r1, #12
 8000bf4:	4208      	tst	r0, r1
 8000bf6:	d007      	beq.n	8000c08 <__aeabi_dadd+0x72c>
 8000bf8:	08dc      	lsrs	r4, r3, #3
 8000bfa:	420c      	tst	r4, r1
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_dadd+0x72c>
 8000bfe:	08d2      	lsrs	r2, r2, #3
 8000c00:	075b      	lsls	r3, r3, #29
 8000c02:	431a      	orrs	r2, r3
 8000c04:	0017      	movs	r7, r2
 8000c06:	0020      	movs	r0, r4
 8000c08:	0f7b      	lsrs	r3, r7, #29
 8000c0a:	00ff      	lsls	r7, r7, #3
 8000c0c:	08ff      	lsrs	r7, r7, #3
 8000c0e:	075b      	lsls	r3, r3, #29
 8000c10:	431f      	orrs	r7, r3
 8000c12:	e5c7      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000c14:	000f      	movs	r7, r1
 8000c16:	e5c5      	b.n	80007a4 <__aeabi_dadd+0x2c8>
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <__aeabi_dadd+0x788>)
 8000c1a:	08d2      	lsrs	r2, r2, #3
 8000c1c:	4033      	ands	r3, r6
 8000c1e:	075f      	lsls	r7, r3, #29
 8000c20:	025b      	lsls	r3, r3, #9
 8000c22:	2401      	movs	r4, #1
 8000c24:	4317      	orrs	r7, r2
 8000c26:	0b1e      	lsrs	r6, r3, #12
 8000c28:	e5a1      	b.n	800076e <__aeabi_dadd+0x292>
 8000c2a:	4226      	tst	r6, r4
 8000c2c:	d012      	beq.n	8000c54 <__aeabi_dadd+0x778>
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <__aeabi_dadd+0x788>)
 8000c30:	4665      	mov	r5, ip
 8000c32:	0002      	movs	r2, r0
 8000c34:	2401      	movs	r4, #1
 8000c36:	401e      	ands	r6, r3
 8000c38:	e4e6      	b.n	8000608 <__aeabi_dadd+0x12c>
 8000c3a:	0021      	movs	r1, r4
 8000c3c:	e585      	b.n	800074a <__aeabi_dadd+0x26e>
 8000c3e:	0017      	movs	r7, r2
 8000c40:	e5a8      	b.n	8000794 <__aeabi_dadd+0x2b8>
 8000c42:	003a      	movs	r2, r7
 8000c44:	e4d4      	b.n	80005f0 <__aeabi_dadd+0x114>
 8000c46:	08db      	lsrs	r3, r3, #3
 8000c48:	0764      	lsls	r4, r4, #29
 8000c4a:	431c      	orrs	r4, r3
 8000c4c:	0027      	movs	r7, r4
 8000c4e:	2102      	movs	r1, #2
 8000c50:	0900      	lsrs	r0, r0, #4
 8000c52:	e57a      	b.n	800074a <__aeabi_dadd+0x26e>
 8000c54:	08c0      	lsrs	r0, r0, #3
 8000c56:	0777      	lsls	r7, r6, #29
 8000c58:	4307      	orrs	r7, r0
 8000c5a:	4665      	mov	r5, ip
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	08f0      	lsrs	r0, r6, #3
 8000c60:	e573      	b.n	800074a <__aeabi_dadd+0x26e>
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	ff7fffff 	.word	0xff7fffff

08000c68 <__aeabi_ddiv>:
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	46de      	mov	lr, fp
 8000c6c:	4645      	mov	r5, r8
 8000c6e:	4657      	mov	r7, sl
 8000c70:	464e      	mov	r6, r9
 8000c72:	b5e0      	push	{r5, r6, r7, lr}
 8000c74:	b087      	sub	sp, #28
 8000c76:	9200      	str	r2, [sp, #0]
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	030b      	lsls	r3, r1, #12
 8000c7c:	0b1b      	lsrs	r3, r3, #12
 8000c7e:	469b      	mov	fp, r3
 8000c80:	0fca      	lsrs	r2, r1, #31
 8000c82:	004b      	lsls	r3, r1, #1
 8000c84:	0004      	movs	r4, r0
 8000c86:	4680      	mov	r8, r0
 8000c88:	0d5b      	lsrs	r3, r3, #21
 8000c8a:	9202      	str	r2, [sp, #8]
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_ddiv+0x28>
 8000c8e:	e098      	b.n	8000dc2 <__aeabi_ddiv+0x15a>
 8000c90:	4a7c      	ldr	r2, [pc, #496]	@ (8000e84 <__aeabi_ddiv+0x21c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d037      	beq.n	8000d06 <__aeabi_ddiv+0x9e>
 8000c96:	4659      	mov	r1, fp
 8000c98:	0f42      	lsrs	r2, r0, #29
 8000c9a:	00c9      	lsls	r1, r1, #3
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	2180      	movs	r1, #128	@ 0x80
 8000ca0:	0409      	lsls	r1, r1, #16
 8000ca2:	4311      	orrs	r1, r2
 8000ca4:	00c2      	lsls	r2, r0, #3
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	4a77      	ldr	r2, [pc, #476]	@ (8000e88 <__aeabi_ddiv+0x220>)
 8000caa:	4689      	mov	r9, r1
 8000cac:	4692      	mov	sl, r2
 8000cae:	449a      	add	sl, r3
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	9303      	str	r3, [sp, #12]
 8000cb6:	9e00      	ldr	r6, [sp, #0]
 8000cb8:	9f01      	ldr	r7, [sp, #4]
 8000cba:	033b      	lsls	r3, r7, #12
 8000cbc:	0b1b      	lsrs	r3, r3, #12
 8000cbe:	469b      	mov	fp, r3
 8000cc0:	007b      	lsls	r3, r7, #1
 8000cc2:	0030      	movs	r0, r6
 8000cc4:	0d5b      	lsrs	r3, r3, #21
 8000cc6:	0ffd      	lsrs	r5, r7, #31
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d059      	beq.n	8000d80 <__aeabi_ddiv+0x118>
 8000ccc:	4a6d      	ldr	r2, [pc, #436]	@ (8000e84 <__aeabi_ddiv+0x21c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d048      	beq.n	8000d64 <__aeabi_ddiv+0xfc>
 8000cd2:	4659      	mov	r1, fp
 8000cd4:	0f72      	lsrs	r2, r6, #29
 8000cd6:	00c9      	lsls	r1, r1, #3
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	0409      	lsls	r1, r1, #16
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	468b      	mov	fp, r1
 8000ce2:	4969      	ldr	r1, [pc, #420]	@ (8000e88 <__aeabi_ddiv+0x220>)
 8000ce4:	00f2      	lsls	r2, r6, #3
 8000ce6:	468c      	mov	ip, r1
 8000ce8:	4651      	mov	r1, sl
 8000cea:	4463      	add	r3, ip
 8000cec:	1acb      	subs	r3, r1, r3
 8000cee:	469a      	mov	sl, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	9e02      	ldr	r6, [sp, #8]
 8000cf4:	406e      	eors	r6, r5
 8000cf6:	b2f6      	uxtb	r6, r6
 8000cf8:	2c0f      	cmp	r4, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_ddiv+0x96>
 8000cfc:	e0ce      	b.n	8000e9c <__aeabi_ddiv+0x234>
 8000cfe:	4b63      	ldr	r3, [pc, #396]	@ (8000e8c <__aeabi_ddiv+0x224>)
 8000d00:	00a4      	lsls	r4, r4, #2
 8000d02:	591b      	ldr	r3, [r3, r4]
 8000d04:	469f      	mov	pc, r3
 8000d06:	465a      	mov	r2, fp
 8000d08:	4302      	orrs	r2, r0
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_ddiv+0xa8>
 8000d0e:	e090      	b.n	8000e32 <__aeabi_ddiv+0x1ca>
 8000d10:	469a      	mov	sl, r3
 8000d12:	2302      	movs	r3, #2
 8000d14:	4690      	mov	r8, r2
 8000d16:	2408      	movs	r4, #8
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	e7cc      	b.n	8000cb6 <__aeabi_ddiv+0x4e>
 8000d1c:	46cb      	mov	fp, r9
 8000d1e:	4642      	mov	r2, r8
 8000d20:	9d02      	ldr	r5, [sp, #8]
 8000d22:	9903      	ldr	r1, [sp, #12]
 8000d24:	2902      	cmp	r1, #2
 8000d26:	d100      	bne.n	8000d2a <__aeabi_ddiv+0xc2>
 8000d28:	e1de      	b.n	80010e8 <__aeabi_ddiv+0x480>
 8000d2a:	2903      	cmp	r1, #3
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0xc8>
 8000d2e:	e08d      	b.n	8000e4c <__aeabi_ddiv+0x1e4>
 8000d30:	2901      	cmp	r1, #1
 8000d32:	d000      	beq.n	8000d36 <__aeabi_ddiv+0xce>
 8000d34:	e179      	b.n	800102a <__aeabi_ddiv+0x3c2>
 8000d36:	002e      	movs	r6, r5
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	4690      	mov	r8, r2
 8000d40:	051b      	lsls	r3, r3, #20
 8000d42:	4323      	orrs	r3, r4
 8000d44:	07f6      	lsls	r6, r6, #31
 8000d46:	4333      	orrs	r3, r6
 8000d48:	4640      	mov	r0, r8
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	b007      	add	sp, #28
 8000d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d50:	46bb      	mov	fp, r7
 8000d52:	46b2      	mov	sl, r6
 8000d54:	46a9      	mov	r9, r5
 8000d56:	46a0      	mov	r8, r4
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	4690      	mov	r8, r2
 8000d60:	4b48      	ldr	r3, [pc, #288]	@ (8000e84 <__aeabi_ddiv+0x21c>)
 8000d62:	e7ed      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 8000d64:	465a      	mov	r2, fp
 8000d66:	9b00      	ldr	r3, [sp, #0]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <__aeabi_ddiv+0x228>)
 8000d6c:	469c      	mov	ip, r3
 8000d6e:	44e2      	add	sl, ip
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d159      	bne.n	8000e28 <__aeabi_ddiv+0x1c0>
 8000d74:	2302      	movs	r3, #2
 8000d76:	431c      	orrs	r4, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	469b      	mov	fp, r3
 8000d7e:	e7b8      	b.n	8000cf2 <__aeabi_ddiv+0x8a>
 8000d80:	465a      	mov	r2, fp
 8000d82:	9b00      	ldr	r3, [sp, #0]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	d049      	beq.n	8000e1c <__aeabi_ddiv+0x1b4>
 8000d88:	465b      	mov	r3, fp
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x128>
 8000d8e:	e19c      	b.n	80010ca <__aeabi_ddiv+0x462>
 8000d90:	4658      	mov	r0, fp
 8000d92:	f001 fb43 	bl	800241c <__clzsi2>
 8000d96:	0002      	movs	r2, r0
 8000d98:	0003      	movs	r3, r0
 8000d9a:	3a0b      	subs	r2, #11
 8000d9c:	271d      	movs	r7, #29
 8000d9e:	9e00      	ldr	r6, [sp, #0]
 8000da0:	1aba      	subs	r2, r7, r2
 8000da2:	0019      	movs	r1, r3
 8000da4:	4658      	mov	r0, fp
 8000da6:	40d6      	lsrs	r6, r2
 8000da8:	3908      	subs	r1, #8
 8000daa:	4088      	lsls	r0, r1
 8000dac:	0032      	movs	r2, r6
 8000dae:	4302      	orrs	r2, r0
 8000db0:	4693      	mov	fp, r2
 8000db2:	9a00      	ldr	r2, [sp, #0]
 8000db4:	408a      	lsls	r2, r1
 8000db6:	4937      	ldr	r1, [pc, #220]	@ (8000e94 <__aeabi_ddiv+0x22c>)
 8000db8:	4453      	add	r3, sl
 8000dba:	468a      	mov	sl, r1
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	449a      	add	sl, r3
 8000dc0:	e797      	b.n	8000cf2 <__aeabi_ddiv+0x8a>
 8000dc2:	465b      	mov	r3, fp
 8000dc4:	4303      	orrs	r3, r0
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	d021      	beq.n	8000e0e <__aeabi_ddiv+0x1a6>
 8000dca:	465b      	mov	r3, fp
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_ddiv+0x16a>
 8000dd0:	e169      	b.n	80010a6 <__aeabi_ddiv+0x43e>
 8000dd2:	4658      	mov	r0, fp
 8000dd4:	f001 fb22 	bl	800241c <__clzsi2>
 8000dd8:	230b      	movs	r3, #11
 8000dda:	425b      	negs	r3, r3
 8000ddc:	469c      	mov	ip, r3
 8000dde:	0002      	movs	r2, r0
 8000de0:	4484      	add	ip, r0
 8000de2:	4666      	mov	r6, ip
 8000de4:	231d      	movs	r3, #29
 8000de6:	1b9b      	subs	r3, r3, r6
 8000de8:	0026      	movs	r6, r4
 8000dea:	0011      	movs	r1, r2
 8000dec:	4658      	mov	r0, fp
 8000dee:	40de      	lsrs	r6, r3
 8000df0:	3908      	subs	r1, #8
 8000df2:	4088      	lsls	r0, r1
 8000df4:	0033      	movs	r3, r6
 8000df6:	4303      	orrs	r3, r0
 8000df8:	4699      	mov	r9, r3
 8000dfa:	0023      	movs	r3, r4
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	4698      	mov	r8, r3
 8000e00:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <__aeabi_ddiv+0x230>)
 8000e02:	2400      	movs	r4, #0
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	469a      	mov	sl, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9303      	str	r3, [sp, #12]
 8000e0c:	e753      	b.n	8000cb6 <__aeabi_ddiv+0x4e>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	4698      	mov	r8, r3
 8000e12:	469a      	mov	sl, r3
 8000e14:	3301      	adds	r3, #1
 8000e16:	2404      	movs	r4, #4
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	e74c      	b.n	8000cb6 <__aeabi_ddiv+0x4e>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	2101      	movs	r1, #1
 8000e24:	469b      	mov	fp, r3
 8000e26:	e764      	b.n	8000cf2 <__aeabi_ddiv+0x8a>
 8000e28:	2303      	movs	r3, #3
 8000e2a:	0032      	movs	r2, r6
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	e75f      	b.n	8000cf2 <__aeabi_ddiv+0x8a>
 8000e32:	469a      	mov	sl, r3
 8000e34:	2303      	movs	r3, #3
 8000e36:	46d9      	mov	r9, fp
 8000e38:	240c      	movs	r4, #12
 8000e3a:	9303      	str	r3, [sp, #12]
 8000e3c:	e73b      	b.n	8000cb6 <__aeabi_ddiv+0x4e>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2480      	movs	r4, #128	@ 0x80
 8000e42:	4698      	mov	r8, r3
 8000e44:	2600      	movs	r6, #0
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <__aeabi_ddiv+0x21c>)
 8000e48:	0324      	lsls	r4, r4, #12
 8000e4a:	e779      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 8000e4c:	2480      	movs	r4, #128	@ 0x80
 8000e4e:	465b      	mov	r3, fp
 8000e50:	0324      	lsls	r4, r4, #12
 8000e52:	431c      	orrs	r4, r3
 8000e54:	0324      	lsls	r4, r4, #12
 8000e56:	002e      	movs	r6, r5
 8000e58:	4690      	mov	r8, r2
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <__aeabi_ddiv+0x21c>)
 8000e5c:	0b24      	lsrs	r4, r4, #12
 8000e5e:	e76f      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 8000e60:	2480      	movs	r4, #128	@ 0x80
 8000e62:	464b      	mov	r3, r9
 8000e64:	0324      	lsls	r4, r4, #12
 8000e66:	4223      	tst	r3, r4
 8000e68:	d002      	beq.n	8000e70 <__aeabi_ddiv+0x208>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	4223      	tst	r3, r4
 8000e6e:	d0f0      	beq.n	8000e52 <__aeabi_ddiv+0x1ea>
 8000e70:	2480      	movs	r4, #128	@ 0x80
 8000e72:	464b      	mov	r3, r9
 8000e74:	0324      	lsls	r4, r4, #12
 8000e76:	431c      	orrs	r4, r3
 8000e78:	0324      	lsls	r4, r4, #12
 8000e7a:	9e02      	ldr	r6, [sp, #8]
 8000e7c:	4b01      	ldr	r3, [pc, #4]	@ (8000e84 <__aeabi_ddiv+0x21c>)
 8000e7e:	0b24      	lsrs	r4, r4, #12
 8000e80:	e75e      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	000007ff 	.word	0x000007ff
 8000e88:	fffffc01 	.word	0xfffffc01
 8000e8c:	080091a0 	.word	0x080091a0
 8000e90:	fffff801 	.word	0xfffff801
 8000e94:	000003f3 	.word	0x000003f3
 8000e98:	fffffc0d 	.word	0xfffffc0d
 8000e9c:	45cb      	cmp	fp, r9
 8000e9e:	d200      	bcs.n	8000ea2 <__aeabi_ddiv+0x23a>
 8000ea0:	e0f8      	b.n	8001094 <__aeabi_ddiv+0x42c>
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x23e>
 8000ea4:	e0f3      	b.n	800108e <__aeabi_ddiv+0x426>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	469c      	mov	ip, r3
 8000eac:	4644      	mov	r4, r8
 8000eae:	4648      	mov	r0, r9
 8000eb0:	2500      	movs	r5, #0
 8000eb2:	44e2      	add	sl, ip
 8000eb4:	465b      	mov	r3, fp
 8000eb6:	0e17      	lsrs	r7, r2, #24
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	0c19      	lsrs	r1, r3, #16
 8000ebe:	043b      	lsls	r3, r7, #16
 8000ec0:	0212      	lsls	r2, r2, #8
 8000ec2:	9700      	str	r7, [sp, #0]
 8000ec4:	0c1f      	lsrs	r7, r3, #16
 8000ec6:	4691      	mov	r9, r2
 8000ec8:	9102      	str	r1, [sp, #8]
 8000eca:	9703      	str	r7, [sp, #12]
 8000ecc:	f7ff f9ba 	bl	8000244 <__aeabi_uidivmod>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	437a      	muls	r2, r7
 8000ed4:	040b      	lsls	r3, r1, #16
 8000ed6:	0c21      	lsrs	r1, r4, #16
 8000ed8:	4680      	mov	r8, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__aeabi_ddiv+0x28c>
 8000ee0:	9f00      	ldr	r7, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	46bc      	mov	ip, r7
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	4461      	add	r1, ip
 8000eea:	469c      	mov	ip, r3
 8000eec:	44e0      	add	r8, ip
 8000eee:	428f      	cmp	r7, r1
 8000ef0:	d800      	bhi.n	8000ef4 <__aeabi_ddiv+0x28c>
 8000ef2:	e15c      	b.n	80011ae <__aeabi_ddiv+0x546>
 8000ef4:	1a88      	subs	r0, r1, r2
 8000ef6:	9902      	ldr	r1, [sp, #8]
 8000ef8:	f7ff f9a4 	bl	8000244 <__aeabi_uidivmod>
 8000efc:	9a03      	ldr	r2, [sp, #12]
 8000efe:	0424      	lsls	r4, r4, #16
 8000f00:	4342      	muls	r2, r0
 8000f02:	0409      	lsls	r1, r1, #16
 8000f04:	0c24      	lsrs	r4, r4, #16
 8000f06:	0003      	movs	r3, r0
 8000f08:	430c      	orrs	r4, r1
 8000f0a:	42a2      	cmp	r2, r4
 8000f0c:	d906      	bls.n	8000f1c <__aeabi_ddiv+0x2b4>
 8000f0e:	9900      	ldr	r1, [sp, #0]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	468c      	mov	ip, r1
 8000f14:	4464      	add	r4, ip
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	d800      	bhi.n	8000f1c <__aeabi_ddiv+0x2b4>
 8000f1a:	e142      	b.n	80011a2 <__aeabi_ddiv+0x53a>
 8000f1c:	1aa0      	subs	r0, r4, r2
 8000f1e:	4642      	mov	r2, r8
 8000f20:	0412      	lsls	r2, r2, #16
 8000f22:	431a      	orrs	r2, r3
 8000f24:	4693      	mov	fp, r2
 8000f26:	464b      	mov	r3, r9
 8000f28:	4659      	mov	r1, fp
 8000f2a:	0c1b      	lsrs	r3, r3, #16
 8000f2c:	001f      	movs	r7, r3
 8000f2e:	9304      	str	r3, [sp, #16]
 8000f30:	040b      	lsls	r3, r1, #16
 8000f32:	4649      	mov	r1, r9
 8000f34:	0409      	lsls	r1, r1, #16
 8000f36:	0c09      	lsrs	r1, r1, #16
 8000f38:	000c      	movs	r4, r1
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	435c      	muls	r4, r3
 8000f3e:	0c12      	lsrs	r2, r2, #16
 8000f40:	437b      	muls	r3, r7
 8000f42:	4688      	mov	r8, r1
 8000f44:	4351      	muls	r1, r2
 8000f46:	437a      	muls	r2, r7
 8000f48:	0c27      	lsrs	r7, r4, #16
 8000f4a:	46bc      	mov	ip, r7
 8000f4c:	185b      	adds	r3, r3, r1
 8000f4e:	4463      	add	r3, ip
 8000f50:	4299      	cmp	r1, r3
 8000f52:	d903      	bls.n	8000f5c <__aeabi_ddiv+0x2f4>
 8000f54:	2180      	movs	r1, #128	@ 0x80
 8000f56:	0249      	lsls	r1, r1, #9
 8000f58:	468c      	mov	ip, r1
 8000f5a:	4462      	add	r2, ip
 8000f5c:	0c19      	lsrs	r1, r3, #16
 8000f5e:	0424      	lsls	r4, r4, #16
 8000f60:	041b      	lsls	r3, r3, #16
 8000f62:	0c24      	lsrs	r4, r4, #16
 8000f64:	188a      	adds	r2, r1, r2
 8000f66:	191c      	adds	r4, r3, r4
 8000f68:	4290      	cmp	r0, r2
 8000f6a:	d302      	bcc.n	8000f72 <__aeabi_ddiv+0x30a>
 8000f6c:	d116      	bne.n	8000f9c <__aeabi_ddiv+0x334>
 8000f6e:	42a5      	cmp	r5, r4
 8000f70:	d214      	bcs.n	8000f9c <__aeabi_ddiv+0x334>
 8000f72:	465b      	mov	r3, fp
 8000f74:	9f00      	ldr	r7, [sp, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	444d      	add	r5, r9
 8000f7a:	9305      	str	r3, [sp, #20]
 8000f7c:	454d      	cmp	r5, r9
 8000f7e:	419b      	sbcs	r3, r3
 8000f80:	46bc      	mov	ip, r7
 8000f82:	425b      	negs	r3, r3
 8000f84:	4463      	add	r3, ip
 8000f86:	18c0      	adds	r0, r0, r3
 8000f88:	4287      	cmp	r7, r0
 8000f8a:	d300      	bcc.n	8000f8e <__aeabi_ddiv+0x326>
 8000f8c:	e102      	b.n	8001194 <__aeabi_ddiv+0x52c>
 8000f8e:	4282      	cmp	r2, r0
 8000f90:	d900      	bls.n	8000f94 <__aeabi_ddiv+0x32c>
 8000f92:	e129      	b.n	80011e8 <__aeabi_ddiv+0x580>
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x330>
 8000f96:	e124      	b.n	80011e2 <__aeabi_ddiv+0x57a>
 8000f98:	9b05      	ldr	r3, [sp, #20]
 8000f9a:	469b      	mov	fp, r3
 8000f9c:	1b2c      	subs	r4, r5, r4
 8000f9e:	42a5      	cmp	r5, r4
 8000fa0:	41ad      	sbcs	r5, r5
 8000fa2:	9b00      	ldr	r3, [sp, #0]
 8000fa4:	1a80      	subs	r0, r0, r2
 8000fa6:	426d      	negs	r5, r5
 8000fa8:	1b40      	subs	r0, r0, r5
 8000faa:	4283      	cmp	r3, r0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_ddiv+0x348>
 8000fae:	e10f      	b.n	80011d0 <__aeabi_ddiv+0x568>
 8000fb0:	9902      	ldr	r1, [sp, #8]
 8000fb2:	f7ff f947 	bl	8000244 <__aeabi_uidivmod>
 8000fb6:	9a03      	ldr	r2, [sp, #12]
 8000fb8:	040b      	lsls	r3, r1, #16
 8000fba:	4342      	muls	r2, r0
 8000fbc:	0c21      	lsrs	r1, r4, #16
 8000fbe:	0005      	movs	r5, r0
 8000fc0:	4319      	orrs	r1, r3
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d900      	bls.n	8000fc8 <__aeabi_ddiv+0x360>
 8000fc6:	e0cb      	b.n	8001160 <__aeabi_ddiv+0x4f8>
 8000fc8:	1a88      	subs	r0, r1, r2
 8000fca:	9902      	ldr	r1, [sp, #8]
 8000fcc:	f7ff f93a 	bl	8000244 <__aeabi_uidivmod>
 8000fd0:	9a03      	ldr	r2, [sp, #12]
 8000fd2:	0424      	lsls	r4, r4, #16
 8000fd4:	4342      	muls	r2, r0
 8000fd6:	0409      	lsls	r1, r1, #16
 8000fd8:	0c24      	lsrs	r4, r4, #16
 8000fda:	0003      	movs	r3, r0
 8000fdc:	430c      	orrs	r4, r1
 8000fde:	42a2      	cmp	r2, r4
 8000fe0:	d900      	bls.n	8000fe4 <__aeabi_ddiv+0x37c>
 8000fe2:	e0ca      	b.n	800117a <__aeabi_ddiv+0x512>
 8000fe4:	4641      	mov	r1, r8
 8000fe6:	1aa4      	subs	r4, r4, r2
 8000fe8:	042a      	lsls	r2, r5, #16
 8000fea:	431a      	orrs	r2, r3
 8000fec:	9f04      	ldr	r7, [sp, #16]
 8000fee:	0413      	lsls	r3, r2, #16
 8000ff0:	0c1b      	lsrs	r3, r3, #16
 8000ff2:	4359      	muls	r1, r3
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	437b      	muls	r3, r7
 8000ff8:	469c      	mov	ip, r3
 8000ffa:	0c15      	lsrs	r5, r2, #16
 8000ffc:	4368      	muls	r0, r5
 8000ffe:	0c0b      	lsrs	r3, r1, #16
 8001000:	4484      	add	ip, r0
 8001002:	4463      	add	r3, ip
 8001004:	437d      	muls	r5, r7
 8001006:	4298      	cmp	r0, r3
 8001008:	d903      	bls.n	8001012 <__aeabi_ddiv+0x3aa>
 800100a:	2080      	movs	r0, #128	@ 0x80
 800100c:	0240      	lsls	r0, r0, #9
 800100e:	4684      	mov	ip, r0
 8001010:	4465      	add	r5, ip
 8001012:	0c18      	lsrs	r0, r3, #16
 8001014:	0409      	lsls	r1, r1, #16
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	0c09      	lsrs	r1, r1, #16
 800101a:	1940      	adds	r0, r0, r5
 800101c:	185b      	adds	r3, r3, r1
 800101e:	4284      	cmp	r4, r0
 8001020:	d327      	bcc.n	8001072 <__aeabi_ddiv+0x40a>
 8001022:	d023      	beq.n	800106c <__aeabi_ddiv+0x404>
 8001024:	2301      	movs	r3, #1
 8001026:	0035      	movs	r5, r6
 8001028:	431a      	orrs	r2, r3
 800102a:	4b94      	ldr	r3, [pc, #592]	@ (800127c <__aeabi_ddiv+0x614>)
 800102c:	4453      	add	r3, sl
 800102e:	2b00      	cmp	r3, #0
 8001030:	dd60      	ble.n	80010f4 <__aeabi_ddiv+0x48c>
 8001032:	0751      	lsls	r1, r2, #29
 8001034:	d000      	beq.n	8001038 <__aeabi_ddiv+0x3d0>
 8001036:	e086      	b.n	8001146 <__aeabi_ddiv+0x4de>
 8001038:	002e      	movs	r6, r5
 800103a:	08d1      	lsrs	r1, r2, #3
 800103c:	465a      	mov	r2, fp
 800103e:	01d2      	lsls	r2, r2, #7
 8001040:	d506      	bpl.n	8001050 <__aeabi_ddiv+0x3e8>
 8001042:	465a      	mov	r2, fp
 8001044:	4b8e      	ldr	r3, [pc, #568]	@ (8001280 <__aeabi_ddiv+0x618>)
 8001046:	401a      	ands	r2, r3
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	4693      	mov	fp, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4453      	add	r3, sl
 8001050:	4a8c      	ldr	r2, [pc, #560]	@ (8001284 <__aeabi_ddiv+0x61c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	dd00      	ble.n	8001058 <__aeabi_ddiv+0x3f0>
 8001056:	e680      	b.n	8000d5a <__aeabi_ddiv+0xf2>
 8001058:	465a      	mov	r2, fp
 800105a:	0752      	lsls	r2, r2, #29
 800105c:	430a      	orrs	r2, r1
 800105e:	4690      	mov	r8, r2
 8001060:	465a      	mov	r2, fp
 8001062:	055b      	lsls	r3, r3, #21
 8001064:	0254      	lsls	r4, r2, #9
 8001066:	0b24      	lsrs	r4, r4, #12
 8001068:	0d5b      	lsrs	r3, r3, #21
 800106a:	e669      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 800106c:	0035      	movs	r5, r6
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0db      	beq.n	800102a <__aeabi_ddiv+0x3c2>
 8001072:	9d00      	ldr	r5, [sp, #0]
 8001074:	1e51      	subs	r1, r2, #1
 8001076:	46ac      	mov	ip, r5
 8001078:	4464      	add	r4, ip
 800107a:	42ac      	cmp	r4, r5
 800107c:	d200      	bcs.n	8001080 <__aeabi_ddiv+0x418>
 800107e:	e09e      	b.n	80011be <__aeabi_ddiv+0x556>
 8001080:	4284      	cmp	r4, r0
 8001082:	d200      	bcs.n	8001086 <__aeabi_ddiv+0x41e>
 8001084:	e0e1      	b.n	800124a <__aeabi_ddiv+0x5e2>
 8001086:	d100      	bne.n	800108a <__aeabi_ddiv+0x422>
 8001088:	e0ee      	b.n	8001268 <__aeabi_ddiv+0x600>
 800108a:	000a      	movs	r2, r1
 800108c:	e7ca      	b.n	8001024 <__aeabi_ddiv+0x3bc>
 800108e:	4542      	cmp	r2, r8
 8001090:	d900      	bls.n	8001094 <__aeabi_ddiv+0x42c>
 8001092:	e708      	b.n	8000ea6 <__aeabi_ddiv+0x23e>
 8001094:	464b      	mov	r3, r9
 8001096:	07dc      	lsls	r4, r3, #31
 8001098:	0858      	lsrs	r0, r3, #1
 800109a:	4643      	mov	r3, r8
 800109c:	085b      	lsrs	r3, r3, #1
 800109e:	431c      	orrs	r4, r3
 80010a0:	4643      	mov	r3, r8
 80010a2:	07dd      	lsls	r5, r3, #31
 80010a4:	e706      	b.n	8000eb4 <__aeabi_ddiv+0x24c>
 80010a6:	f001 f9b9 	bl	800241c <__clzsi2>
 80010aa:	2315      	movs	r3, #21
 80010ac:	469c      	mov	ip, r3
 80010ae:	4484      	add	ip, r0
 80010b0:	0002      	movs	r2, r0
 80010b2:	4663      	mov	r3, ip
 80010b4:	3220      	adds	r2, #32
 80010b6:	2b1c      	cmp	r3, #28
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_ddiv+0x454>
 80010ba:	e692      	b.n	8000de2 <__aeabi_ddiv+0x17a>
 80010bc:	0023      	movs	r3, r4
 80010be:	3808      	subs	r0, #8
 80010c0:	4083      	lsls	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	2300      	movs	r3, #0
 80010c6:	4698      	mov	r8, r3
 80010c8:	e69a      	b.n	8000e00 <__aeabi_ddiv+0x198>
 80010ca:	f001 f9a7 	bl	800241c <__clzsi2>
 80010ce:	0002      	movs	r2, r0
 80010d0:	0003      	movs	r3, r0
 80010d2:	3215      	adds	r2, #21
 80010d4:	3320      	adds	r3, #32
 80010d6:	2a1c      	cmp	r2, #28
 80010d8:	dc00      	bgt.n	80010dc <__aeabi_ddiv+0x474>
 80010da:	e65f      	b.n	8000d9c <__aeabi_ddiv+0x134>
 80010dc:	9900      	ldr	r1, [sp, #0]
 80010de:	3808      	subs	r0, #8
 80010e0:	4081      	lsls	r1, r0
 80010e2:	2200      	movs	r2, #0
 80010e4:	468b      	mov	fp, r1
 80010e6:	e666      	b.n	8000db6 <__aeabi_ddiv+0x14e>
 80010e8:	2200      	movs	r2, #0
 80010ea:	002e      	movs	r6, r5
 80010ec:	2400      	movs	r4, #0
 80010ee:	4690      	mov	r8, r2
 80010f0:	4b65      	ldr	r3, [pc, #404]	@ (8001288 <__aeabi_ddiv+0x620>)
 80010f2:	e625      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 80010f4:	002e      	movs	r6, r5
 80010f6:	2101      	movs	r1, #1
 80010f8:	1ac9      	subs	r1, r1, r3
 80010fa:	2938      	cmp	r1, #56	@ 0x38
 80010fc:	dd00      	ble.n	8001100 <__aeabi_ddiv+0x498>
 80010fe:	e61b      	b.n	8000d38 <__aeabi_ddiv+0xd0>
 8001100:	291f      	cmp	r1, #31
 8001102:	dc7e      	bgt.n	8001202 <__aeabi_ddiv+0x59a>
 8001104:	4861      	ldr	r0, [pc, #388]	@ (800128c <__aeabi_ddiv+0x624>)
 8001106:	0014      	movs	r4, r2
 8001108:	4450      	add	r0, sl
 800110a:	465b      	mov	r3, fp
 800110c:	4082      	lsls	r2, r0
 800110e:	4083      	lsls	r3, r0
 8001110:	40cc      	lsrs	r4, r1
 8001112:	1e50      	subs	r0, r2, #1
 8001114:	4182      	sbcs	r2, r0
 8001116:	4323      	orrs	r3, r4
 8001118:	431a      	orrs	r2, r3
 800111a:	465b      	mov	r3, fp
 800111c:	40cb      	lsrs	r3, r1
 800111e:	0751      	lsls	r1, r2, #29
 8001120:	d009      	beq.n	8001136 <__aeabi_ddiv+0x4ce>
 8001122:	210f      	movs	r1, #15
 8001124:	4011      	ands	r1, r2
 8001126:	2904      	cmp	r1, #4
 8001128:	d005      	beq.n	8001136 <__aeabi_ddiv+0x4ce>
 800112a:	1d11      	adds	r1, r2, #4
 800112c:	4291      	cmp	r1, r2
 800112e:	4192      	sbcs	r2, r2
 8001130:	4252      	negs	r2, r2
 8001132:	189b      	adds	r3, r3, r2
 8001134:	000a      	movs	r2, r1
 8001136:	0219      	lsls	r1, r3, #8
 8001138:	d400      	bmi.n	800113c <__aeabi_ddiv+0x4d4>
 800113a:	e09b      	b.n	8001274 <__aeabi_ddiv+0x60c>
 800113c:	2200      	movs	r2, #0
 800113e:	2301      	movs	r3, #1
 8001140:	2400      	movs	r4, #0
 8001142:	4690      	mov	r8, r2
 8001144:	e5fc      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 8001146:	210f      	movs	r1, #15
 8001148:	4011      	ands	r1, r2
 800114a:	2904      	cmp	r1, #4
 800114c:	d100      	bne.n	8001150 <__aeabi_ddiv+0x4e8>
 800114e:	e773      	b.n	8001038 <__aeabi_ddiv+0x3d0>
 8001150:	1d11      	adds	r1, r2, #4
 8001152:	4291      	cmp	r1, r2
 8001154:	4192      	sbcs	r2, r2
 8001156:	4252      	negs	r2, r2
 8001158:	002e      	movs	r6, r5
 800115a:	08c9      	lsrs	r1, r1, #3
 800115c:	4493      	add	fp, r2
 800115e:	e76d      	b.n	800103c <__aeabi_ddiv+0x3d4>
 8001160:	9b00      	ldr	r3, [sp, #0]
 8001162:	3d01      	subs	r5, #1
 8001164:	469c      	mov	ip, r3
 8001166:	4461      	add	r1, ip
 8001168:	428b      	cmp	r3, r1
 800116a:	d900      	bls.n	800116e <__aeabi_ddiv+0x506>
 800116c:	e72c      	b.n	8000fc8 <__aeabi_ddiv+0x360>
 800116e:	428a      	cmp	r2, r1
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x50c>
 8001172:	e729      	b.n	8000fc8 <__aeabi_ddiv+0x360>
 8001174:	1e85      	subs	r5, r0, #2
 8001176:	4461      	add	r1, ip
 8001178:	e726      	b.n	8000fc8 <__aeabi_ddiv+0x360>
 800117a:	9900      	ldr	r1, [sp, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	468c      	mov	ip, r1
 8001180:	4464      	add	r4, ip
 8001182:	42a1      	cmp	r1, r4
 8001184:	d900      	bls.n	8001188 <__aeabi_ddiv+0x520>
 8001186:	e72d      	b.n	8000fe4 <__aeabi_ddiv+0x37c>
 8001188:	42a2      	cmp	r2, r4
 800118a:	d800      	bhi.n	800118e <__aeabi_ddiv+0x526>
 800118c:	e72a      	b.n	8000fe4 <__aeabi_ddiv+0x37c>
 800118e:	1e83      	subs	r3, r0, #2
 8001190:	4464      	add	r4, ip
 8001192:	e727      	b.n	8000fe4 <__aeabi_ddiv+0x37c>
 8001194:	4287      	cmp	r7, r0
 8001196:	d000      	beq.n	800119a <__aeabi_ddiv+0x532>
 8001198:	e6fe      	b.n	8000f98 <__aeabi_ddiv+0x330>
 800119a:	45a9      	cmp	r9, r5
 800119c:	d900      	bls.n	80011a0 <__aeabi_ddiv+0x538>
 800119e:	e6fb      	b.n	8000f98 <__aeabi_ddiv+0x330>
 80011a0:	e6f5      	b.n	8000f8e <__aeabi_ddiv+0x326>
 80011a2:	42a2      	cmp	r2, r4
 80011a4:	d800      	bhi.n	80011a8 <__aeabi_ddiv+0x540>
 80011a6:	e6b9      	b.n	8000f1c <__aeabi_ddiv+0x2b4>
 80011a8:	1e83      	subs	r3, r0, #2
 80011aa:	4464      	add	r4, ip
 80011ac:	e6b6      	b.n	8000f1c <__aeabi_ddiv+0x2b4>
 80011ae:	428a      	cmp	r2, r1
 80011b0:	d800      	bhi.n	80011b4 <__aeabi_ddiv+0x54c>
 80011b2:	e69f      	b.n	8000ef4 <__aeabi_ddiv+0x28c>
 80011b4:	46bc      	mov	ip, r7
 80011b6:	1e83      	subs	r3, r0, #2
 80011b8:	4698      	mov	r8, r3
 80011ba:	4461      	add	r1, ip
 80011bc:	e69a      	b.n	8000ef4 <__aeabi_ddiv+0x28c>
 80011be:	000a      	movs	r2, r1
 80011c0:	4284      	cmp	r4, r0
 80011c2:	d000      	beq.n	80011c6 <__aeabi_ddiv+0x55e>
 80011c4:	e72e      	b.n	8001024 <__aeabi_ddiv+0x3bc>
 80011c6:	454b      	cmp	r3, r9
 80011c8:	d000      	beq.n	80011cc <__aeabi_ddiv+0x564>
 80011ca:	e72b      	b.n	8001024 <__aeabi_ddiv+0x3bc>
 80011cc:	0035      	movs	r5, r6
 80011ce:	e72c      	b.n	800102a <__aeabi_ddiv+0x3c2>
 80011d0:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <__aeabi_ddiv+0x614>)
 80011d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <__aeabi_ddiv+0x628>)
 80011d4:	4453      	add	r3, sl
 80011d6:	4592      	cmp	sl, r2
 80011d8:	db43      	blt.n	8001262 <__aeabi_ddiv+0x5fa>
 80011da:	2201      	movs	r2, #1
 80011dc:	2100      	movs	r1, #0
 80011de:	4493      	add	fp, r2
 80011e0:	e72c      	b.n	800103c <__aeabi_ddiv+0x3d4>
 80011e2:	42ac      	cmp	r4, r5
 80011e4:	d800      	bhi.n	80011e8 <__aeabi_ddiv+0x580>
 80011e6:	e6d7      	b.n	8000f98 <__aeabi_ddiv+0x330>
 80011e8:	2302      	movs	r3, #2
 80011ea:	425b      	negs	r3, r3
 80011ec:	469c      	mov	ip, r3
 80011ee:	9900      	ldr	r1, [sp, #0]
 80011f0:	444d      	add	r5, r9
 80011f2:	454d      	cmp	r5, r9
 80011f4:	419b      	sbcs	r3, r3
 80011f6:	44e3      	add	fp, ip
 80011f8:	468c      	mov	ip, r1
 80011fa:	425b      	negs	r3, r3
 80011fc:	4463      	add	r3, ip
 80011fe:	18c0      	adds	r0, r0, r3
 8001200:	e6cc      	b.n	8000f9c <__aeabi_ddiv+0x334>
 8001202:	201f      	movs	r0, #31
 8001204:	4240      	negs	r0, r0
 8001206:	1ac3      	subs	r3, r0, r3
 8001208:	4658      	mov	r0, fp
 800120a:	40d8      	lsrs	r0, r3
 800120c:	2920      	cmp	r1, #32
 800120e:	d004      	beq.n	800121a <__aeabi_ddiv+0x5b2>
 8001210:	4659      	mov	r1, fp
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <__aeabi_ddiv+0x62c>)
 8001214:	4453      	add	r3, sl
 8001216:	4099      	lsls	r1, r3
 8001218:	430a      	orrs	r2, r1
 800121a:	1e53      	subs	r3, r2, #1
 800121c:	419a      	sbcs	r2, r3
 800121e:	2307      	movs	r3, #7
 8001220:	0019      	movs	r1, r3
 8001222:	4302      	orrs	r2, r0
 8001224:	2400      	movs	r4, #0
 8001226:	4011      	ands	r1, r2
 8001228:	4213      	tst	r3, r2
 800122a:	d009      	beq.n	8001240 <__aeabi_ddiv+0x5d8>
 800122c:	3308      	adds	r3, #8
 800122e:	4013      	ands	r3, r2
 8001230:	2b04      	cmp	r3, #4
 8001232:	d01d      	beq.n	8001270 <__aeabi_ddiv+0x608>
 8001234:	1d13      	adds	r3, r2, #4
 8001236:	4293      	cmp	r3, r2
 8001238:	4189      	sbcs	r1, r1
 800123a:	001a      	movs	r2, r3
 800123c:	4249      	negs	r1, r1
 800123e:	0749      	lsls	r1, r1, #29
 8001240:	08d2      	lsrs	r2, r2, #3
 8001242:	430a      	orrs	r2, r1
 8001244:	4690      	mov	r8, r2
 8001246:	2300      	movs	r3, #0
 8001248:	e57a      	b.n	8000d40 <__aeabi_ddiv+0xd8>
 800124a:	4649      	mov	r1, r9
 800124c:	9f00      	ldr	r7, [sp, #0]
 800124e:	004d      	lsls	r5, r1, #1
 8001250:	454d      	cmp	r5, r9
 8001252:	4189      	sbcs	r1, r1
 8001254:	46bc      	mov	ip, r7
 8001256:	4249      	negs	r1, r1
 8001258:	4461      	add	r1, ip
 800125a:	46a9      	mov	r9, r5
 800125c:	3a02      	subs	r2, #2
 800125e:	1864      	adds	r4, r4, r1
 8001260:	e7ae      	b.n	80011c0 <__aeabi_ddiv+0x558>
 8001262:	2201      	movs	r2, #1
 8001264:	4252      	negs	r2, r2
 8001266:	e746      	b.n	80010f6 <__aeabi_ddiv+0x48e>
 8001268:	4599      	cmp	r9, r3
 800126a:	d3ee      	bcc.n	800124a <__aeabi_ddiv+0x5e2>
 800126c:	000a      	movs	r2, r1
 800126e:	e7aa      	b.n	80011c6 <__aeabi_ddiv+0x55e>
 8001270:	2100      	movs	r1, #0
 8001272:	e7e5      	b.n	8001240 <__aeabi_ddiv+0x5d8>
 8001274:	0759      	lsls	r1, r3, #29
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	0b1c      	lsrs	r4, r3, #12
 800127a:	e7e1      	b.n	8001240 <__aeabi_ddiv+0x5d8>
 800127c:	000003ff 	.word	0x000003ff
 8001280:	feffffff 	.word	0xfeffffff
 8001284:	000007fe 	.word	0x000007fe
 8001288:	000007ff 	.word	0x000007ff
 800128c:	0000041e 	.word	0x0000041e
 8001290:	fffffc02 	.word	0xfffffc02
 8001294:	0000043e 	.word	0x0000043e

08001298 <__eqdf2>:
 8001298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129a:	4657      	mov	r7, sl
 800129c:	46de      	mov	lr, fp
 800129e:	464e      	mov	r6, r9
 80012a0:	4645      	mov	r5, r8
 80012a2:	b5e0      	push	{r5, r6, r7, lr}
 80012a4:	000d      	movs	r5, r1
 80012a6:	0004      	movs	r4, r0
 80012a8:	0fe8      	lsrs	r0, r5, #31
 80012aa:	4683      	mov	fp, r0
 80012ac:	0309      	lsls	r1, r1, #12
 80012ae:	0fd8      	lsrs	r0, r3, #31
 80012b0:	0b09      	lsrs	r1, r1, #12
 80012b2:	4682      	mov	sl, r0
 80012b4:	4819      	ldr	r0, [pc, #100]	@ (800131c <__eqdf2+0x84>)
 80012b6:	468c      	mov	ip, r1
 80012b8:	031f      	lsls	r7, r3, #12
 80012ba:	0069      	lsls	r1, r5, #1
 80012bc:	005e      	lsls	r6, r3, #1
 80012be:	0d49      	lsrs	r1, r1, #21
 80012c0:	0b3f      	lsrs	r7, r7, #12
 80012c2:	0d76      	lsrs	r6, r6, #21
 80012c4:	4281      	cmp	r1, r0
 80012c6:	d018      	beq.n	80012fa <__eqdf2+0x62>
 80012c8:	4286      	cmp	r6, r0
 80012ca:	d00f      	beq.n	80012ec <__eqdf2+0x54>
 80012cc:	2001      	movs	r0, #1
 80012ce:	42b1      	cmp	r1, r6
 80012d0:	d10d      	bne.n	80012ee <__eqdf2+0x56>
 80012d2:	45bc      	cmp	ip, r7
 80012d4:	d10b      	bne.n	80012ee <__eqdf2+0x56>
 80012d6:	4294      	cmp	r4, r2
 80012d8:	d109      	bne.n	80012ee <__eqdf2+0x56>
 80012da:	45d3      	cmp	fp, sl
 80012dc:	d01c      	beq.n	8001318 <__eqdf2+0x80>
 80012de:	2900      	cmp	r1, #0
 80012e0:	d105      	bne.n	80012ee <__eqdf2+0x56>
 80012e2:	4660      	mov	r0, ip
 80012e4:	4320      	orrs	r0, r4
 80012e6:	1e43      	subs	r3, r0, #1
 80012e8:	4198      	sbcs	r0, r3
 80012ea:	e000      	b.n	80012ee <__eqdf2+0x56>
 80012ec:	2001      	movs	r0, #1
 80012ee:	bcf0      	pop	{r4, r5, r6, r7}
 80012f0:	46bb      	mov	fp, r7
 80012f2:	46b2      	mov	sl, r6
 80012f4:	46a9      	mov	r9, r5
 80012f6:	46a0      	mov	r8, r4
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fa:	2001      	movs	r0, #1
 80012fc:	428e      	cmp	r6, r1
 80012fe:	d1f6      	bne.n	80012ee <__eqdf2+0x56>
 8001300:	4661      	mov	r1, ip
 8001302:	4339      	orrs	r1, r7
 8001304:	000f      	movs	r7, r1
 8001306:	4317      	orrs	r7, r2
 8001308:	4327      	orrs	r7, r4
 800130a:	d1f0      	bne.n	80012ee <__eqdf2+0x56>
 800130c:	465b      	mov	r3, fp
 800130e:	4652      	mov	r2, sl
 8001310:	1a98      	subs	r0, r3, r2
 8001312:	1e43      	subs	r3, r0, #1
 8001314:	4198      	sbcs	r0, r3
 8001316:	e7ea      	b.n	80012ee <__eqdf2+0x56>
 8001318:	2000      	movs	r0, #0
 800131a:	e7e8      	b.n	80012ee <__eqdf2+0x56>
 800131c:	000007ff 	.word	0x000007ff

08001320 <__gedf2>:
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	4657      	mov	r7, sl
 8001324:	464e      	mov	r6, r9
 8001326:	4645      	mov	r5, r8
 8001328:	46de      	mov	lr, fp
 800132a:	b5e0      	push	{r5, r6, r7, lr}
 800132c:	000d      	movs	r5, r1
 800132e:	030e      	lsls	r6, r1, #12
 8001330:	0049      	lsls	r1, r1, #1
 8001332:	0d49      	lsrs	r1, r1, #21
 8001334:	468a      	mov	sl, r1
 8001336:	0fdf      	lsrs	r7, r3, #31
 8001338:	0fe9      	lsrs	r1, r5, #31
 800133a:	46bc      	mov	ip, r7
 800133c:	b083      	sub	sp, #12
 800133e:	4f2f      	ldr	r7, [pc, #188]	@ (80013fc <__gedf2+0xdc>)
 8001340:	0004      	movs	r4, r0
 8001342:	4680      	mov	r8, r0
 8001344:	9101      	str	r1, [sp, #4]
 8001346:	0058      	lsls	r0, r3, #1
 8001348:	0319      	lsls	r1, r3, #12
 800134a:	4691      	mov	r9, r2
 800134c:	0b36      	lsrs	r6, r6, #12
 800134e:	0b09      	lsrs	r1, r1, #12
 8001350:	0d40      	lsrs	r0, r0, #21
 8001352:	45ba      	cmp	sl, r7
 8001354:	d01d      	beq.n	8001392 <__gedf2+0x72>
 8001356:	42b8      	cmp	r0, r7
 8001358:	d00d      	beq.n	8001376 <__gedf2+0x56>
 800135a:	4657      	mov	r7, sl
 800135c:	2f00      	cmp	r7, #0
 800135e:	d12a      	bne.n	80013b6 <__gedf2+0x96>
 8001360:	4334      	orrs	r4, r6
 8001362:	2800      	cmp	r0, #0
 8001364:	d124      	bne.n	80013b0 <__gedf2+0x90>
 8001366:	430a      	orrs	r2, r1
 8001368:	d036      	beq.n	80013d8 <__gedf2+0xb8>
 800136a:	2c00      	cmp	r4, #0
 800136c:	d141      	bne.n	80013f2 <__gedf2+0xd2>
 800136e:	4663      	mov	r3, ip
 8001370:	0058      	lsls	r0, r3, #1
 8001372:	3801      	subs	r0, #1
 8001374:	e015      	b.n	80013a2 <__gedf2+0x82>
 8001376:	4311      	orrs	r1, r2
 8001378:	d138      	bne.n	80013ec <__gedf2+0xcc>
 800137a:	4653      	mov	r3, sl
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <__gedf2+0x64>
 8001380:	4326      	orrs	r6, r4
 8001382:	d0f4      	beq.n	800136e <__gedf2+0x4e>
 8001384:	9b01      	ldr	r3, [sp, #4]
 8001386:	4563      	cmp	r3, ip
 8001388:	d107      	bne.n	800139a <__gedf2+0x7a>
 800138a:	9b01      	ldr	r3, [sp, #4]
 800138c:	0058      	lsls	r0, r3, #1
 800138e:	3801      	subs	r0, #1
 8001390:	e007      	b.n	80013a2 <__gedf2+0x82>
 8001392:	4326      	orrs	r6, r4
 8001394:	d12a      	bne.n	80013ec <__gedf2+0xcc>
 8001396:	4550      	cmp	r0, sl
 8001398:	d021      	beq.n	80013de <__gedf2+0xbe>
 800139a:	2001      	movs	r0, #1
 800139c:	9b01      	ldr	r3, [sp, #4]
 800139e:	425f      	negs	r7, r3
 80013a0:	4338      	orrs	r0, r7
 80013a2:	b003      	add	sp, #12
 80013a4:	bcf0      	pop	{r4, r5, r6, r7}
 80013a6:	46bb      	mov	fp, r7
 80013a8:	46b2      	mov	sl, r6
 80013aa:	46a9      	mov	r9, r5
 80013ac:	46a0      	mov	r8, r4
 80013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	d0dc      	beq.n	800136e <__gedf2+0x4e>
 80013b4:	e7e6      	b.n	8001384 <__gedf2+0x64>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d0ef      	beq.n	800139a <__gedf2+0x7a>
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	4563      	cmp	r3, ip
 80013be:	d1ec      	bne.n	800139a <__gedf2+0x7a>
 80013c0:	4582      	cmp	sl, r0
 80013c2:	dcea      	bgt.n	800139a <__gedf2+0x7a>
 80013c4:	dbe1      	blt.n	800138a <__gedf2+0x6a>
 80013c6:	428e      	cmp	r6, r1
 80013c8:	d8e7      	bhi.n	800139a <__gedf2+0x7a>
 80013ca:	d1de      	bne.n	800138a <__gedf2+0x6a>
 80013cc:	45c8      	cmp	r8, r9
 80013ce:	d8e4      	bhi.n	800139a <__gedf2+0x7a>
 80013d0:	2000      	movs	r0, #0
 80013d2:	45c8      	cmp	r8, r9
 80013d4:	d2e5      	bcs.n	80013a2 <__gedf2+0x82>
 80013d6:	e7d8      	b.n	800138a <__gedf2+0x6a>
 80013d8:	2c00      	cmp	r4, #0
 80013da:	d0e2      	beq.n	80013a2 <__gedf2+0x82>
 80013dc:	e7dd      	b.n	800139a <__gedf2+0x7a>
 80013de:	4311      	orrs	r1, r2
 80013e0:	d104      	bne.n	80013ec <__gedf2+0xcc>
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	4563      	cmp	r3, ip
 80013e6:	d1d8      	bne.n	800139a <__gedf2+0x7a>
 80013e8:	2000      	movs	r0, #0
 80013ea:	e7da      	b.n	80013a2 <__gedf2+0x82>
 80013ec:	2002      	movs	r0, #2
 80013ee:	4240      	negs	r0, r0
 80013f0:	e7d7      	b.n	80013a2 <__gedf2+0x82>
 80013f2:	9b01      	ldr	r3, [sp, #4]
 80013f4:	4563      	cmp	r3, ip
 80013f6:	d0e6      	beq.n	80013c6 <__gedf2+0xa6>
 80013f8:	e7cf      	b.n	800139a <__gedf2+0x7a>
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	000007ff 	.word	0x000007ff

08001400 <__ledf2>:
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	4657      	mov	r7, sl
 8001404:	464e      	mov	r6, r9
 8001406:	4645      	mov	r5, r8
 8001408:	46de      	mov	lr, fp
 800140a:	b5e0      	push	{r5, r6, r7, lr}
 800140c:	000d      	movs	r5, r1
 800140e:	030e      	lsls	r6, r1, #12
 8001410:	0049      	lsls	r1, r1, #1
 8001412:	0d49      	lsrs	r1, r1, #21
 8001414:	468a      	mov	sl, r1
 8001416:	0fdf      	lsrs	r7, r3, #31
 8001418:	0fe9      	lsrs	r1, r5, #31
 800141a:	46bc      	mov	ip, r7
 800141c:	b083      	sub	sp, #12
 800141e:	4f2e      	ldr	r7, [pc, #184]	@ (80014d8 <__ledf2+0xd8>)
 8001420:	0004      	movs	r4, r0
 8001422:	4680      	mov	r8, r0
 8001424:	9101      	str	r1, [sp, #4]
 8001426:	0058      	lsls	r0, r3, #1
 8001428:	0319      	lsls	r1, r3, #12
 800142a:	4691      	mov	r9, r2
 800142c:	0b36      	lsrs	r6, r6, #12
 800142e:	0b09      	lsrs	r1, r1, #12
 8001430:	0d40      	lsrs	r0, r0, #21
 8001432:	45ba      	cmp	sl, r7
 8001434:	d01e      	beq.n	8001474 <__ledf2+0x74>
 8001436:	42b8      	cmp	r0, r7
 8001438:	d00d      	beq.n	8001456 <__ledf2+0x56>
 800143a:	4657      	mov	r7, sl
 800143c:	2f00      	cmp	r7, #0
 800143e:	d127      	bne.n	8001490 <__ledf2+0x90>
 8001440:	4334      	orrs	r4, r6
 8001442:	2800      	cmp	r0, #0
 8001444:	d133      	bne.n	80014ae <__ledf2+0xae>
 8001446:	430a      	orrs	r2, r1
 8001448:	d034      	beq.n	80014b4 <__ledf2+0xb4>
 800144a:	2c00      	cmp	r4, #0
 800144c:	d140      	bne.n	80014d0 <__ledf2+0xd0>
 800144e:	4663      	mov	r3, ip
 8001450:	0058      	lsls	r0, r3, #1
 8001452:	3801      	subs	r0, #1
 8001454:	e015      	b.n	8001482 <__ledf2+0x82>
 8001456:	4311      	orrs	r1, r2
 8001458:	d112      	bne.n	8001480 <__ledf2+0x80>
 800145a:	4653      	mov	r3, sl
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <__ledf2+0x64>
 8001460:	4326      	orrs	r6, r4
 8001462:	d0f4      	beq.n	800144e <__ledf2+0x4e>
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	4563      	cmp	r3, ip
 8001468:	d01d      	beq.n	80014a6 <__ledf2+0xa6>
 800146a:	2001      	movs	r0, #1
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	425f      	negs	r7, r3
 8001470:	4338      	orrs	r0, r7
 8001472:	e006      	b.n	8001482 <__ledf2+0x82>
 8001474:	4326      	orrs	r6, r4
 8001476:	d103      	bne.n	8001480 <__ledf2+0x80>
 8001478:	4550      	cmp	r0, sl
 800147a:	d1f6      	bne.n	800146a <__ledf2+0x6a>
 800147c:	4311      	orrs	r1, r2
 800147e:	d01c      	beq.n	80014ba <__ledf2+0xba>
 8001480:	2002      	movs	r0, #2
 8001482:	b003      	add	sp, #12
 8001484:	bcf0      	pop	{r4, r5, r6, r7}
 8001486:	46bb      	mov	fp, r7
 8001488:	46b2      	mov	sl, r6
 800148a:	46a9      	mov	r9, r5
 800148c:	46a0      	mov	r8, r4
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	2800      	cmp	r0, #0
 8001492:	d0ea      	beq.n	800146a <__ledf2+0x6a>
 8001494:	9b01      	ldr	r3, [sp, #4]
 8001496:	4563      	cmp	r3, ip
 8001498:	d1e7      	bne.n	800146a <__ledf2+0x6a>
 800149a:	4582      	cmp	sl, r0
 800149c:	dce5      	bgt.n	800146a <__ledf2+0x6a>
 800149e:	db02      	blt.n	80014a6 <__ledf2+0xa6>
 80014a0:	428e      	cmp	r6, r1
 80014a2:	d8e2      	bhi.n	800146a <__ledf2+0x6a>
 80014a4:	d00e      	beq.n	80014c4 <__ledf2+0xc4>
 80014a6:	9b01      	ldr	r3, [sp, #4]
 80014a8:	0058      	lsls	r0, r3, #1
 80014aa:	3801      	subs	r0, #1
 80014ac:	e7e9      	b.n	8001482 <__ledf2+0x82>
 80014ae:	2c00      	cmp	r4, #0
 80014b0:	d0cd      	beq.n	800144e <__ledf2+0x4e>
 80014b2:	e7d7      	b.n	8001464 <__ledf2+0x64>
 80014b4:	2c00      	cmp	r4, #0
 80014b6:	d0e4      	beq.n	8001482 <__ledf2+0x82>
 80014b8:	e7d7      	b.n	800146a <__ledf2+0x6a>
 80014ba:	9b01      	ldr	r3, [sp, #4]
 80014bc:	2000      	movs	r0, #0
 80014be:	4563      	cmp	r3, ip
 80014c0:	d0df      	beq.n	8001482 <__ledf2+0x82>
 80014c2:	e7d2      	b.n	800146a <__ledf2+0x6a>
 80014c4:	45c8      	cmp	r8, r9
 80014c6:	d8d0      	bhi.n	800146a <__ledf2+0x6a>
 80014c8:	2000      	movs	r0, #0
 80014ca:	45c8      	cmp	r8, r9
 80014cc:	d2d9      	bcs.n	8001482 <__ledf2+0x82>
 80014ce:	e7ea      	b.n	80014a6 <__ledf2+0xa6>
 80014d0:	9b01      	ldr	r3, [sp, #4]
 80014d2:	4563      	cmp	r3, ip
 80014d4:	d0e4      	beq.n	80014a0 <__ledf2+0xa0>
 80014d6:	e7c8      	b.n	800146a <__ledf2+0x6a>
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__aeabi_dmul>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4657      	mov	r7, sl
 80014e0:	464e      	mov	r6, r9
 80014e2:	46de      	mov	lr, fp
 80014e4:	4645      	mov	r5, r8
 80014e6:	b5e0      	push	{r5, r6, r7, lr}
 80014e8:	001f      	movs	r7, r3
 80014ea:	030b      	lsls	r3, r1, #12
 80014ec:	0b1b      	lsrs	r3, r3, #12
 80014ee:	0016      	movs	r6, r2
 80014f0:	469a      	mov	sl, r3
 80014f2:	0fca      	lsrs	r2, r1, #31
 80014f4:	004b      	lsls	r3, r1, #1
 80014f6:	0004      	movs	r4, r0
 80014f8:	4691      	mov	r9, r2
 80014fa:	b085      	sub	sp, #20
 80014fc:	0d5b      	lsrs	r3, r3, #21
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x26>
 8001500:	e1cf      	b.n	80018a2 <__aeabi_dmul+0x3c6>
 8001502:	4acd      	ldr	r2, [pc, #820]	@ (8001838 <__aeabi_dmul+0x35c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d055      	beq.n	80015b4 <__aeabi_dmul+0xd8>
 8001508:	4651      	mov	r1, sl
 800150a:	0f42      	lsrs	r2, r0, #29
 800150c:	00c9      	lsls	r1, r1, #3
 800150e:	430a      	orrs	r2, r1
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0409      	lsls	r1, r1, #16
 8001514:	4311      	orrs	r1, r2
 8001516:	00c2      	lsls	r2, r0, #3
 8001518:	4690      	mov	r8, r2
 800151a:	4ac8      	ldr	r2, [pc, #800]	@ (800183c <__aeabi_dmul+0x360>)
 800151c:	468a      	mov	sl, r1
 800151e:	4693      	mov	fp, r2
 8001520:	449b      	add	fp, r3
 8001522:	2300      	movs	r3, #0
 8001524:	2500      	movs	r5, #0
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	033c      	lsls	r4, r7, #12
 800152a:	007b      	lsls	r3, r7, #1
 800152c:	0ffa      	lsrs	r2, r7, #31
 800152e:	9601      	str	r6, [sp, #4]
 8001530:	0b24      	lsrs	r4, r4, #12
 8001532:	0d5b      	lsrs	r3, r3, #21
 8001534:	9200      	str	r2, [sp, #0]
 8001536:	d100      	bne.n	800153a <__aeabi_dmul+0x5e>
 8001538:	e188      	b.n	800184c <__aeabi_dmul+0x370>
 800153a:	4abf      	ldr	r2, [pc, #764]	@ (8001838 <__aeabi_dmul+0x35c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d100      	bne.n	8001542 <__aeabi_dmul+0x66>
 8001540:	e092      	b.n	8001668 <__aeabi_dmul+0x18c>
 8001542:	4abe      	ldr	r2, [pc, #760]	@ (800183c <__aeabi_dmul+0x360>)
 8001544:	4694      	mov	ip, r2
 8001546:	4463      	add	r3, ip
 8001548:	449b      	add	fp, r3
 800154a:	2d0a      	cmp	r5, #10
 800154c:	dc42      	bgt.n	80015d4 <__aeabi_dmul+0xf8>
 800154e:	00e4      	lsls	r4, r4, #3
 8001550:	0f73      	lsrs	r3, r6, #29
 8001552:	4323      	orrs	r3, r4
 8001554:	2480      	movs	r4, #128	@ 0x80
 8001556:	4649      	mov	r1, r9
 8001558:	0424      	lsls	r4, r4, #16
 800155a:	431c      	orrs	r4, r3
 800155c:	00f3      	lsls	r3, r6, #3
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	9b00      	ldr	r3, [sp, #0]
 8001562:	2000      	movs	r0, #0
 8001564:	4059      	eors	r1, r3
 8001566:	b2cb      	uxtb	r3, r1
 8001568:	9303      	str	r3, [sp, #12]
 800156a:	2d02      	cmp	r5, #2
 800156c:	dc00      	bgt.n	8001570 <__aeabi_dmul+0x94>
 800156e:	e094      	b.n	800169a <__aeabi_dmul+0x1be>
 8001570:	2301      	movs	r3, #1
 8001572:	40ab      	lsls	r3, r5
 8001574:	001d      	movs	r5, r3
 8001576:	23a6      	movs	r3, #166	@ 0xa6
 8001578:	002a      	movs	r2, r5
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	401a      	ands	r2, r3
 800157e:	421d      	tst	r5, r3
 8001580:	d000      	beq.n	8001584 <__aeabi_dmul+0xa8>
 8001582:	e229      	b.n	80019d8 <__aeabi_dmul+0x4fc>
 8001584:	2390      	movs	r3, #144	@ 0x90
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	421d      	tst	r5, r3
 800158a:	d100      	bne.n	800158e <__aeabi_dmul+0xb2>
 800158c:	e24d      	b.n	8001a2a <__aeabi_dmul+0x54e>
 800158e:	2300      	movs	r3, #0
 8001590:	2480      	movs	r4, #128	@ 0x80
 8001592:	4699      	mov	r9, r3
 8001594:	0324      	lsls	r4, r4, #12
 8001596:	4ba8      	ldr	r3, [pc, #672]	@ (8001838 <__aeabi_dmul+0x35c>)
 8001598:	0010      	movs	r0, r2
 800159a:	464a      	mov	r2, r9
 800159c:	051b      	lsls	r3, r3, #20
 800159e:	4323      	orrs	r3, r4
 80015a0:	07d2      	lsls	r2, r2, #31
 80015a2:	4313      	orrs	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	b005      	add	sp, #20
 80015a8:	bcf0      	pop	{r4, r5, r6, r7}
 80015aa:	46bb      	mov	fp, r7
 80015ac:	46b2      	mov	sl, r6
 80015ae:	46a9      	mov	r9, r5
 80015b0:	46a0      	mov	r8, r4
 80015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b4:	4652      	mov	r2, sl
 80015b6:	4302      	orrs	r2, r0
 80015b8:	4690      	mov	r8, r2
 80015ba:	d000      	beq.n	80015be <__aeabi_dmul+0xe2>
 80015bc:	e1ac      	b.n	8001918 <__aeabi_dmul+0x43c>
 80015be:	469b      	mov	fp, r3
 80015c0:	2302      	movs	r3, #2
 80015c2:	4692      	mov	sl, r2
 80015c4:	2508      	movs	r5, #8
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	e7ae      	b.n	8001528 <__aeabi_dmul+0x4c>
 80015ca:	9b00      	ldr	r3, [sp, #0]
 80015cc:	46a2      	mov	sl, r4
 80015ce:	4699      	mov	r9, r3
 80015d0:	9b01      	ldr	r3, [sp, #4]
 80015d2:	4698      	mov	r8, r3
 80015d4:	9b02      	ldr	r3, [sp, #8]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d100      	bne.n	80015dc <__aeabi_dmul+0x100>
 80015da:	e1ca      	b.n	8001972 <__aeabi_dmul+0x496>
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x106>
 80015e0:	e192      	b.n	8001908 <__aeabi_dmul+0x42c>
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d110      	bne.n	8001608 <__aeabi_dmul+0x12c>
 80015e6:	2300      	movs	r3, #0
 80015e8:	2400      	movs	r4, #0
 80015ea:	2200      	movs	r2, #0
 80015ec:	e7d4      	b.n	8001598 <__aeabi_dmul+0xbc>
 80015ee:	2201      	movs	r2, #1
 80015f0:	087b      	lsrs	r3, r7, #1
 80015f2:	403a      	ands	r2, r7
 80015f4:	4313      	orrs	r3, r2
 80015f6:	4652      	mov	r2, sl
 80015f8:	07d2      	lsls	r2, r2, #31
 80015fa:	4313      	orrs	r3, r2
 80015fc:	4698      	mov	r8, r3
 80015fe:	4653      	mov	r3, sl
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	469a      	mov	sl, r3
 8001604:	9b03      	ldr	r3, [sp, #12]
 8001606:	4699      	mov	r9, r3
 8001608:	465b      	mov	r3, fp
 800160a:	1c58      	adds	r0, r3, #1
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	445b      	add	r3, fp
 8001612:	2b00      	cmp	r3, #0
 8001614:	dc00      	bgt.n	8001618 <__aeabi_dmul+0x13c>
 8001616:	e1b1      	b.n	800197c <__aeabi_dmul+0x4a0>
 8001618:	4642      	mov	r2, r8
 800161a:	0752      	lsls	r2, r2, #29
 800161c:	d00b      	beq.n	8001636 <__aeabi_dmul+0x15a>
 800161e:	220f      	movs	r2, #15
 8001620:	4641      	mov	r1, r8
 8001622:	400a      	ands	r2, r1
 8001624:	2a04      	cmp	r2, #4
 8001626:	d006      	beq.n	8001636 <__aeabi_dmul+0x15a>
 8001628:	4642      	mov	r2, r8
 800162a:	1d11      	adds	r1, r2, #4
 800162c:	4541      	cmp	r1, r8
 800162e:	4192      	sbcs	r2, r2
 8001630:	4688      	mov	r8, r1
 8001632:	4252      	negs	r2, r2
 8001634:	4492      	add	sl, r2
 8001636:	4652      	mov	r2, sl
 8001638:	01d2      	lsls	r2, r2, #7
 800163a:	d506      	bpl.n	800164a <__aeabi_dmul+0x16e>
 800163c:	4652      	mov	r2, sl
 800163e:	4b80      	ldr	r3, [pc, #512]	@ (8001840 <__aeabi_dmul+0x364>)
 8001640:	401a      	ands	r2, r3
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	4692      	mov	sl, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	18c3      	adds	r3, r0, r3
 800164a:	4a7e      	ldr	r2, [pc, #504]	@ (8001844 <__aeabi_dmul+0x368>)
 800164c:	4293      	cmp	r3, r2
 800164e:	dd00      	ble.n	8001652 <__aeabi_dmul+0x176>
 8001650:	e18f      	b.n	8001972 <__aeabi_dmul+0x496>
 8001652:	4642      	mov	r2, r8
 8001654:	08d1      	lsrs	r1, r2, #3
 8001656:	4652      	mov	r2, sl
 8001658:	0752      	lsls	r2, r2, #29
 800165a:	430a      	orrs	r2, r1
 800165c:	4651      	mov	r1, sl
 800165e:	055b      	lsls	r3, r3, #21
 8001660:	024c      	lsls	r4, r1, #9
 8001662:	0b24      	lsrs	r4, r4, #12
 8001664:	0d5b      	lsrs	r3, r3, #21
 8001666:	e797      	b.n	8001598 <__aeabi_dmul+0xbc>
 8001668:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <__aeabi_dmul+0x35c>)
 800166a:	4326      	orrs	r6, r4
 800166c:	469c      	mov	ip, r3
 800166e:	44e3      	add	fp, ip
 8001670:	2e00      	cmp	r6, #0
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x19a>
 8001674:	e16f      	b.n	8001956 <__aeabi_dmul+0x47a>
 8001676:	2303      	movs	r3, #3
 8001678:	4649      	mov	r1, r9
 800167a:	431d      	orrs	r5, r3
 800167c:	9b00      	ldr	r3, [sp, #0]
 800167e:	4059      	eors	r1, r3
 8001680:	b2cb      	uxtb	r3, r1
 8001682:	9303      	str	r3, [sp, #12]
 8001684:	2d0a      	cmp	r5, #10
 8001686:	dd00      	ble.n	800168a <__aeabi_dmul+0x1ae>
 8001688:	e133      	b.n	80018f2 <__aeabi_dmul+0x416>
 800168a:	2301      	movs	r3, #1
 800168c:	40ab      	lsls	r3, r5
 800168e:	001d      	movs	r5, r3
 8001690:	2303      	movs	r3, #3
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2288      	movs	r2, #136	@ 0x88
 8001696:	422a      	tst	r2, r5
 8001698:	d197      	bne.n	80015ca <__aeabi_dmul+0xee>
 800169a:	4642      	mov	r2, r8
 800169c:	4643      	mov	r3, r8
 800169e:	0412      	lsls	r2, r2, #16
 80016a0:	0c12      	lsrs	r2, r2, #16
 80016a2:	0016      	movs	r6, r2
 80016a4:	9801      	ldr	r0, [sp, #4]
 80016a6:	0c1d      	lsrs	r5, r3, #16
 80016a8:	0c03      	lsrs	r3, r0, #16
 80016aa:	0400      	lsls	r0, r0, #16
 80016ac:	0c00      	lsrs	r0, r0, #16
 80016ae:	4346      	muls	r6, r0
 80016b0:	46b4      	mov	ip, r6
 80016b2:	001e      	movs	r6, r3
 80016b4:	436e      	muls	r6, r5
 80016b6:	9600      	str	r6, [sp, #0]
 80016b8:	0016      	movs	r6, r2
 80016ba:	0007      	movs	r7, r0
 80016bc:	435e      	muls	r6, r3
 80016be:	4661      	mov	r1, ip
 80016c0:	46b0      	mov	r8, r6
 80016c2:	436f      	muls	r7, r5
 80016c4:	0c0e      	lsrs	r6, r1, #16
 80016c6:	44b8      	add	r8, r7
 80016c8:	4446      	add	r6, r8
 80016ca:	42b7      	cmp	r7, r6
 80016cc:	d905      	bls.n	80016da <__aeabi_dmul+0x1fe>
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	0249      	lsls	r1, r1, #9
 80016d2:	4688      	mov	r8, r1
 80016d4:	9f00      	ldr	r7, [sp, #0]
 80016d6:	4447      	add	r7, r8
 80016d8:	9700      	str	r7, [sp, #0]
 80016da:	4661      	mov	r1, ip
 80016dc:	0409      	lsls	r1, r1, #16
 80016de:	0c09      	lsrs	r1, r1, #16
 80016e0:	0c37      	lsrs	r7, r6, #16
 80016e2:	0436      	lsls	r6, r6, #16
 80016e4:	468c      	mov	ip, r1
 80016e6:	0031      	movs	r1, r6
 80016e8:	4461      	add	r1, ip
 80016ea:	9101      	str	r1, [sp, #4]
 80016ec:	0011      	movs	r1, r2
 80016ee:	0c26      	lsrs	r6, r4, #16
 80016f0:	0424      	lsls	r4, r4, #16
 80016f2:	0c24      	lsrs	r4, r4, #16
 80016f4:	4361      	muls	r1, r4
 80016f6:	468c      	mov	ip, r1
 80016f8:	0021      	movs	r1, r4
 80016fa:	4369      	muls	r1, r5
 80016fc:	4689      	mov	r9, r1
 80016fe:	4661      	mov	r1, ip
 8001700:	0c09      	lsrs	r1, r1, #16
 8001702:	4688      	mov	r8, r1
 8001704:	4372      	muls	r2, r6
 8001706:	444a      	add	r2, r9
 8001708:	4442      	add	r2, r8
 800170a:	4375      	muls	r5, r6
 800170c:	4591      	cmp	r9, r2
 800170e:	d903      	bls.n	8001718 <__aeabi_dmul+0x23c>
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	0249      	lsls	r1, r1, #9
 8001714:	4688      	mov	r8, r1
 8001716:	4445      	add	r5, r8
 8001718:	0c11      	lsrs	r1, r2, #16
 800171a:	4688      	mov	r8, r1
 800171c:	4661      	mov	r1, ip
 800171e:	0409      	lsls	r1, r1, #16
 8001720:	0c09      	lsrs	r1, r1, #16
 8001722:	468c      	mov	ip, r1
 8001724:	0412      	lsls	r2, r2, #16
 8001726:	4462      	add	r2, ip
 8001728:	18b9      	adds	r1, r7, r2
 800172a:	9102      	str	r1, [sp, #8]
 800172c:	4651      	mov	r1, sl
 800172e:	0c09      	lsrs	r1, r1, #16
 8001730:	468c      	mov	ip, r1
 8001732:	4651      	mov	r1, sl
 8001734:	040f      	lsls	r7, r1, #16
 8001736:	0c3f      	lsrs	r7, r7, #16
 8001738:	0039      	movs	r1, r7
 800173a:	4341      	muls	r1, r0
 800173c:	4445      	add	r5, r8
 800173e:	4688      	mov	r8, r1
 8001740:	4661      	mov	r1, ip
 8001742:	4341      	muls	r1, r0
 8001744:	468a      	mov	sl, r1
 8001746:	4641      	mov	r1, r8
 8001748:	4660      	mov	r0, ip
 800174a:	0c09      	lsrs	r1, r1, #16
 800174c:	4689      	mov	r9, r1
 800174e:	4358      	muls	r0, r3
 8001750:	437b      	muls	r3, r7
 8001752:	4453      	add	r3, sl
 8001754:	444b      	add	r3, r9
 8001756:	459a      	cmp	sl, r3
 8001758:	d903      	bls.n	8001762 <__aeabi_dmul+0x286>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	0249      	lsls	r1, r1, #9
 800175e:	4689      	mov	r9, r1
 8001760:	4448      	add	r0, r9
 8001762:	0c19      	lsrs	r1, r3, #16
 8001764:	4689      	mov	r9, r1
 8001766:	4641      	mov	r1, r8
 8001768:	0409      	lsls	r1, r1, #16
 800176a:	0c09      	lsrs	r1, r1, #16
 800176c:	4688      	mov	r8, r1
 800176e:	0039      	movs	r1, r7
 8001770:	4361      	muls	r1, r4
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	4443      	add	r3, r8
 8001776:	4688      	mov	r8, r1
 8001778:	4661      	mov	r1, ip
 800177a:	434c      	muls	r4, r1
 800177c:	4371      	muls	r1, r6
 800177e:	468c      	mov	ip, r1
 8001780:	4641      	mov	r1, r8
 8001782:	4377      	muls	r7, r6
 8001784:	0c0e      	lsrs	r6, r1, #16
 8001786:	193f      	adds	r7, r7, r4
 8001788:	19f6      	adds	r6, r6, r7
 800178a:	4448      	add	r0, r9
 800178c:	42b4      	cmp	r4, r6
 800178e:	d903      	bls.n	8001798 <__aeabi_dmul+0x2bc>
 8001790:	2180      	movs	r1, #128	@ 0x80
 8001792:	0249      	lsls	r1, r1, #9
 8001794:	4689      	mov	r9, r1
 8001796:	44cc      	add	ip, r9
 8001798:	9902      	ldr	r1, [sp, #8]
 800179a:	9f00      	ldr	r7, [sp, #0]
 800179c:	4689      	mov	r9, r1
 800179e:	0431      	lsls	r1, r6, #16
 80017a0:	444f      	add	r7, r9
 80017a2:	4689      	mov	r9, r1
 80017a4:	4641      	mov	r1, r8
 80017a6:	4297      	cmp	r7, r2
 80017a8:	4192      	sbcs	r2, r2
 80017aa:	040c      	lsls	r4, r1, #16
 80017ac:	0c24      	lsrs	r4, r4, #16
 80017ae:	444c      	add	r4, r9
 80017b0:	18ff      	adds	r7, r7, r3
 80017b2:	4252      	negs	r2, r2
 80017b4:	1964      	adds	r4, r4, r5
 80017b6:	18a1      	adds	r1, r4, r2
 80017b8:	429f      	cmp	r7, r3
 80017ba:	419b      	sbcs	r3, r3
 80017bc:	4688      	mov	r8, r1
 80017be:	4682      	mov	sl, r0
 80017c0:	425b      	negs	r3, r3
 80017c2:	4699      	mov	r9, r3
 80017c4:	4590      	cmp	r8, r2
 80017c6:	4192      	sbcs	r2, r2
 80017c8:	42ac      	cmp	r4, r5
 80017ca:	41a4      	sbcs	r4, r4
 80017cc:	44c2      	add	sl, r8
 80017ce:	44d1      	add	r9, sl
 80017d0:	4252      	negs	r2, r2
 80017d2:	4264      	negs	r4, r4
 80017d4:	4314      	orrs	r4, r2
 80017d6:	4599      	cmp	r9, r3
 80017d8:	419b      	sbcs	r3, r3
 80017da:	4582      	cmp	sl, r0
 80017dc:	4192      	sbcs	r2, r2
 80017de:	425b      	negs	r3, r3
 80017e0:	4252      	negs	r2, r2
 80017e2:	4313      	orrs	r3, r2
 80017e4:	464a      	mov	r2, r9
 80017e6:	0c36      	lsrs	r6, r6, #16
 80017e8:	19a4      	adds	r4, r4, r6
 80017ea:	18e3      	adds	r3, r4, r3
 80017ec:	4463      	add	r3, ip
 80017ee:	025b      	lsls	r3, r3, #9
 80017f0:	0dd2      	lsrs	r2, r2, #23
 80017f2:	431a      	orrs	r2, r3
 80017f4:	9901      	ldr	r1, [sp, #4]
 80017f6:	4692      	mov	sl, r2
 80017f8:	027a      	lsls	r2, r7, #9
 80017fa:	430a      	orrs	r2, r1
 80017fc:	1e50      	subs	r0, r2, #1
 80017fe:	4182      	sbcs	r2, r0
 8001800:	0dff      	lsrs	r7, r7, #23
 8001802:	4317      	orrs	r7, r2
 8001804:	464a      	mov	r2, r9
 8001806:	0252      	lsls	r2, r2, #9
 8001808:	4317      	orrs	r7, r2
 800180a:	46b8      	mov	r8, r7
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	d500      	bpl.n	8001812 <__aeabi_dmul+0x336>
 8001810:	e6ed      	b.n	80015ee <__aeabi_dmul+0x112>
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <__aeabi_dmul+0x36c>)
 8001814:	9a03      	ldr	r2, [sp, #12]
 8001816:	445b      	add	r3, fp
 8001818:	4691      	mov	r9, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	dc00      	bgt.n	8001820 <__aeabi_dmul+0x344>
 800181e:	e0ac      	b.n	800197a <__aeabi_dmul+0x49e>
 8001820:	003a      	movs	r2, r7
 8001822:	0752      	lsls	r2, r2, #29
 8001824:	d100      	bne.n	8001828 <__aeabi_dmul+0x34c>
 8001826:	e710      	b.n	800164a <__aeabi_dmul+0x16e>
 8001828:	220f      	movs	r2, #15
 800182a:	4658      	mov	r0, fp
 800182c:	403a      	ands	r2, r7
 800182e:	2a04      	cmp	r2, #4
 8001830:	d000      	beq.n	8001834 <__aeabi_dmul+0x358>
 8001832:	e6f9      	b.n	8001628 <__aeabi_dmul+0x14c>
 8001834:	e709      	b.n	800164a <__aeabi_dmul+0x16e>
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	000007ff 	.word	0x000007ff
 800183c:	fffffc01 	.word	0xfffffc01
 8001840:	feffffff 	.word	0xfeffffff
 8001844:	000007fe 	.word	0x000007fe
 8001848:	000003ff 	.word	0x000003ff
 800184c:	0022      	movs	r2, r4
 800184e:	4332      	orrs	r2, r6
 8001850:	d06f      	beq.n	8001932 <__aeabi_dmul+0x456>
 8001852:	2c00      	cmp	r4, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dmul+0x37c>
 8001856:	e0c2      	b.n	80019de <__aeabi_dmul+0x502>
 8001858:	0020      	movs	r0, r4
 800185a:	f000 fddf 	bl	800241c <__clzsi2>
 800185e:	0002      	movs	r2, r0
 8001860:	0003      	movs	r3, r0
 8001862:	3a0b      	subs	r2, #11
 8001864:	201d      	movs	r0, #29
 8001866:	1a82      	subs	r2, r0, r2
 8001868:	0030      	movs	r0, r6
 800186a:	0019      	movs	r1, r3
 800186c:	40d0      	lsrs	r0, r2
 800186e:	3908      	subs	r1, #8
 8001870:	408c      	lsls	r4, r1
 8001872:	0002      	movs	r2, r0
 8001874:	4322      	orrs	r2, r4
 8001876:	0034      	movs	r4, r6
 8001878:	408c      	lsls	r4, r1
 800187a:	4659      	mov	r1, fp
 800187c:	1acb      	subs	r3, r1, r3
 800187e:	4986      	ldr	r1, [pc, #536]	@ (8001a98 <__aeabi_dmul+0x5bc>)
 8001880:	468b      	mov	fp, r1
 8001882:	449b      	add	fp, r3
 8001884:	2d0a      	cmp	r5, #10
 8001886:	dd00      	ble.n	800188a <__aeabi_dmul+0x3ae>
 8001888:	e6a4      	b.n	80015d4 <__aeabi_dmul+0xf8>
 800188a:	4649      	mov	r1, r9
 800188c:	9b00      	ldr	r3, [sp, #0]
 800188e:	9401      	str	r4, [sp, #4]
 8001890:	4059      	eors	r1, r3
 8001892:	b2cb      	uxtb	r3, r1
 8001894:	0014      	movs	r4, r2
 8001896:	2000      	movs	r0, #0
 8001898:	9303      	str	r3, [sp, #12]
 800189a:	2d02      	cmp	r5, #2
 800189c:	dd00      	ble.n	80018a0 <__aeabi_dmul+0x3c4>
 800189e:	e667      	b.n	8001570 <__aeabi_dmul+0x94>
 80018a0:	e6fb      	b.n	800169a <__aeabi_dmul+0x1be>
 80018a2:	4653      	mov	r3, sl
 80018a4:	4303      	orrs	r3, r0
 80018a6:	4698      	mov	r8, r3
 80018a8:	d03c      	beq.n	8001924 <__aeabi_dmul+0x448>
 80018aa:	4653      	mov	r3, sl
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dmul+0x3d6>
 80018b0:	e0a3      	b.n	80019fa <__aeabi_dmul+0x51e>
 80018b2:	4650      	mov	r0, sl
 80018b4:	f000 fdb2 	bl	800241c <__clzsi2>
 80018b8:	230b      	movs	r3, #11
 80018ba:	425b      	negs	r3, r3
 80018bc:	469c      	mov	ip, r3
 80018be:	0002      	movs	r2, r0
 80018c0:	4484      	add	ip, r0
 80018c2:	0011      	movs	r1, r2
 80018c4:	4650      	mov	r0, sl
 80018c6:	3908      	subs	r1, #8
 80018c8:	4088      	lsls	r0, r1
 80018ca:	231d      	movs	r3, #29
 80018cc:	4680      	mov	r8, r0
 80018ce:	4660      	mov	r0, ip
 80018d0:	1a1b      	subs	r3, r3, r0
 80018d2:	0020      	movs	r0, r4
 80018d4:	40d8      	lsrs	r0, r3
 80018d6:	0003      	movs	r3, r0
 80018d8:	4640      	mov	r0, r8
 80018da:	4303      	orrs	r3, r0
 80018dc:	469a      	mov	sl, r3
 80018de:	0023      	movs	r3, r4
 80018e0:	408b      	lsls	r3, r1
 80018e2:	4698      	mov	r8, r3
 80018e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a98 <__aeabi_dmul+0x5bc>)
 80018e6:	2500      	movs	r5, #0
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	469b      	mov	fp, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	e61a      	b.n	8001528 <__aeabi_dmul+0x4c>
 80018f2:	2d0f      	cmp	r5, #15
 80018f4:	d000      	beq.n	80018f8 <__aeabi_dmul+0x41c>
 80018f6:	e0c9      	b.n	8001a8c <__aeabi_dmul+0x5b0>
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	4652      	mov	r2, sl
 80018fc:	031b      	lsls	r3, r3, #12
 80018fe:	421a      	tst	r2, r3
 8001900:	d002      	beq.n	8001908 <__aeabi_dmul+0x42c>
 8001902:	421c      	tst	r4, r3
 8001904:	d100      	bne.n	8001908 <__aeabi_dmul+0x42c>
 8001906:	e092      	b.n	8001a2e <__aeabi_dmul+0x552>
 8001908:	2480      	movs	r4, #128	@ 0x80
 800190a:	4653      	mov	r3, sl
 800190c:	0324      	lsls	r4, r4, #12
 800190e:	431c      	orrs	r4, r3
 8001910:	0324      	lsls	r4, r4, #12
 8001912:	4642      	mov	r2, r8
 8001914:	0b24      	lsrs	r4, r4, #12
 8001916:	e63e      	b.n	8001596 <__aeabi_dmul+0xba>
 8001918:	469b      	mov	fp, r3
 800191a:	2303      	movs	r3, #3
 800191c:	4680      	mov	r8, r0
 800191e:	250c      	movs	r5, #12
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	e601      	b.n	8001528 <__aeabi_dmul+0x4c>
 8001924:	2300      	movs	r3, #0
 8001926:	469a      	mov	sl, r3
 8001928:	469b      	mov	fp, r3
 800192a:	3301      	adds	r3, #1
 800192c:	2504      	movs	r5, #4
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	e5fa      	b.n	8001528 <__aeabi_dmul+0x4c>
 8001932:	2101      	movs	r1, #1
 8001934:	430d      	orrs	r5, r1
 8001936:	2d0a      	cmp	r5, #10
 8001938:	dd00      	ble.n	800193c <__aeabi_dmul+0x460>
 800193a:	e64b      	b.n	80015d4 <__aeabi_dmul+0xf8>
 800193c:	4649      	mov	r1, r9
 800193e:	9800      	ldr	r0, [sp, #0]
 8001940:	4041      	eors	r1, r0
 8001942:	b2c9      	uxtb	r1, r1
 8001944:	9103      	str	r1, [sp, #12]
 8001946:	2d02      	cmp	r5, #2
 8001948:	dc00      	bgt.n	800194c <__aeabi_dmul+0x470>
 800194a:	e096      	b.n	8001a7a <__aeabi_dmul+0x59e>
 800194c:	2300      	movs	r3, #0
 800194e:	2400      	movs	r4, #0
 8001950:	2001      	movs	r0, #1
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	e60c      	b.n	8001570 <__aeabi_dmul+0x94>
 8001956:	4649      	mov	r1, r9
 8001958:	2302      	movs	r3, #2
 800195a:	9a00      	ldr	r2, [sp, #0]
 800195c:	432b      	orrs	r3, r5
 800195e:	4051      	eors	r1, r2
 8001960:	b2ca      	uxtb	r2, r1
 8001962:	9203      	str	r2, [sp, #12]
 8001964:	2b0a      	cmp	r3, #10
 8001966:	dd00      	ble.n	800196a <__aeabi_dmul+0x48e>
 8001968:	e634      	b.n	80015d4 <__aeabi_dmul+0xf8>
 800196a:	2d00      	cmp	r5, #0
 800196c:	d157      	bne.n	8001a1e <__aeabi_dmul+0x542>
 800196e:	9b03      	ldr	r3, [sp, #12]
 8001970:	4699      	mov	r9, r3
 8001972:	2400      	movs	r4, #0
 8001974:	2200      	movs	r2, #0
 8001976:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <__aeabi_dmul+0x5c0>)
 8001978:	e60e      	b.n	8001598 <__aeabi_dmul+0xbc>
 800197a:	4658      	mov	r0, fp
 800197c:	2101      	movs	r1, #1
 800197e:	1ac9      	subs	r1, r1, r3
 8001980:	2938      	cmp	r1, #56	@ 0x38
 8001982:	dd00      	ble.n	8001986 <__aeabi_dmul+0x4aa>
 8001984:	e62f      	b.n	80015e6 <__aeabi_dmul+0x10a>
 8001986:	291f      	cmp	r1, #31
 8001988:	dd56      	ble.n	8001a38 <__aeabi_dmul+0x55c>
 800198a:	221f      	movs	r2, #31
 800198c:	4654      	mov	r4, sl
 800198e:	4252      	negs	r2, r2
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	40dc      	lsrs	r4, r3
 8001994:	2920      	cmp	r1, #32
 8001996:	d007      	beq.n	80019a8 <__aeabi_dmul+0x4cc>
 8001998:	4b41      	ldr	r3, [pc, #260]	@ (8001aa0 <__aeabi_dmul+0x5c4>)
 800199a:	4642      	mov	r2, r8
 800199c:	469c      	mov	ip, r3
 800199e:	4653      	mov	r3, sl
 80019a0:	4460      	add	r0, ip
 80019a2:	4083      	lsls	r3, r0
 80019a4:	431a      	orrs	r2, r3
 80019a6:	4690      	mov	r8, r2
 80019a8:	4642      	mov	r2, r8
 80019aa:	2107      	movs	r1, #7
 80019ac:	1e53      	subs	r3, r2, #1
 80019ae:	419a      	sbcs	r2, r3
 80019b0:	000b      	movs	r3, r1
 80019b2:	4322      	orrs	r2, r4
 80019b4:	4013      	ands	r3, r2
 80019b6:	2400      	movs	r4, #0
 80019b8:	4211      	tst	r1, r2
 80019ba:	d009      	beq.n	80019d0 <__aeabi_dmul+0x4f4>
 80019bc:	230f      	movs	r3, #15
 80019be:	4013      	ands	r3, r2
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d05d      	beq.n	8001a80 <__aeabi_dmul+0x5a4>
 80019c4:	1d11      	adds	r1, r2, #4
 80019c6:	4291      	cmp	r1, r2
 80019c8:	419b      	sbcs	r3, r3
 80019ca:	000a      	movs	r2, r1
 80019cc:	425b      	negs	r3, r3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	08d2      	lsrs	r2, r2, #3
 80019d2:	431a      	orrs	r2, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	e5df      	b.n	8001598 <__aeabi_dmul+0xbc>
 80019d8:	9b03      	ldr	r3, [sp, #12]
 80019da:	4699      	mov	r9, r3
 80019dc:	e5fa      	b.n	80015d4 <__aeabi_dmul+0xf8>
 80019de:	9801      	ldr	r0, [sp, #4]
 80019e0:	f000 fd1c 	bl	800241c <__clzsi2>
 80019e4:	0002      	movs	r2, r0
 80019e6:	0003      	movs	r3, r0
 80019e8:	3215      	adds	r2, #21
 80019ea:	3320      	adds	r3, #32
 80019ec:	2a1c      	cmp	r2, #28
 80019ee:	dc00      	bgt.n	80019f2 <__aeabi_dmul+0x516>
 80019f0:	e738      	b.n	8001864 <__aeabi_dmul+0x388>
 80019f2:	9a01      	ldr	r2, [sp, #4]
 80019f4:	3808      	subs	r0, #8
 80019f6:	4082      	lsls	r2, r0
 80019f8:	e73f      	b.n	800187a <__aeabi_dmul+0x39e>
 80019fa:	f000 fd0f 	bl	800241c <__clzsi2>
 80019fe:	2315      	movs	r3, #21
 8001a00:	469c      	mov	ip, r3
 8001a02:	4484      	add	ip, r0
 8001a04:	0002      	movs	r2, r0
 8001a06:	4663      	mov	r3, ip
 8001a08:	3220      	adds	r2, #32
 8001a0a:	2b1c      	cmp	r3, #28
 8001a0c:	dc00      	bgt.n	8001a10 <__aeabi_dmul+0x534>
 8001a0e:	e758      	b.n	80018c2 <__aeabi_dmul+0x3e6>
 8001a10:	2300      	movs	r3, #0
 8001a12:	4698      	mov	r8, r3
 8001a14:	0023      	movs	r3, r4
 8001a16:	3808      	subs	r0, #8
 8001a18:	4083      	lsls	r3, r0
 8001a1a:	469a      	mov	sl, r3
 8001a1c:	e762      	b.n	80018e4 <__aeabi_dmul+0x408>
 8001a1e:	001d      	movs	r5, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	2400      	movs	r4, #0
 8001a24:	2002      	movs	r0, #2
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	e5a2      	b.n	8001570 <__aeabi_dmul+0x94>
 8001a2a:	9002      	str	r0, [sp, #8]
 8001a2c:	e632      	b.n	8001694 <__aeabi_dmul+0x1b8>
 8001a2e:	431c      	orrs	r4, r3
 8001a30:	9b00      	ldr	r3, [sp, #0]
 8001a32:	9a01      	ldr	r2, [sp, #4]
 8001a34:	4699      	mov	r9, r3
 8001a36:	e5ae      	b.n	8001596 <__aeabi_dmul+0xba>
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <__aeabi_dmul+0x5c8>)
 8001a3a:	4652      	mov	r2, sl
 8001a3c:	18c3      	adds	r3, r0, r3
 8001a3e:	4640      	mov	r0, r8
 8001a40:	409a      	lsls	r2, r3
 8001a42:	40c8      	lsrs	r0, r1
 8001a44:	4302      	orrs	r2, r0
 8001a46:	4640      	mov	r0, r8
 8001a48:	4098      	lsls	r0, r3
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	1e58      	subs	r0, r3, #1
 8001a4e:	4183      	sbcs	r3, r0
 8001a50:	4654      	mov	r4, sl
 8001a52:	431a      	orrs	r2, r3
 8001a54:	40cc      	lsrs	r4, r1
 8001a56:	0753      	lsls	r3, r2, #29
 8001a58:	d009      	beq.n	8001a6e <__aeabi_dmul+0x592>
 8001a5a:	230f      	movs	r3, #15
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d005      	beq.n	8001a6e <__aeabi_dmul+0x592>
 8001a62:	1d13      	adds	r3, r2, #4
 8001a64:	4293      	cmp	r3, r2
 8001a66:	4192      	sbcs	r2, r2
 8001a68:	4252      	negs	r2, r2
 8001a6a:	18a4      	adds	r4, r4, r2
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	0223      	lsls	r3, r4, #8
 8001a70:	d508      	bpl.n	8001a84 <__aeabi_dmul+0x5a8>
 8001a72:	2301      	movs	r3, #1
 8001a74:	2400      	movs	r4, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	e58e      	b.n	8001598 <__aeabi_dmul+0xbc>
 8001a7a:	4689      	mov	r9, r1
 8001a7c:	2400      	movs	r4, #0
 8001a7e:	e58b      	b.n	8001598 <__aeabi_dmul+0xbc>
 8001a80:	2300      	movs	r3, #0
 8001a82:	e7a5      	b.n	80019d0 <__aeabi_dmul+0x4f4>
 8001a84:	0763      	lsls	r3, r4, #29
 8001a86:	0264      	lsls	r4, r4, #9
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	e7a1      	b.n	80019d0 <__aeabi_dmul+0x4f4>
 8001a8c:	9b00      	ldr	r3, [sp, #0]
 8001a8e:	46a2      	mov	sl, r4
 8001a90:	4699      	mov	r9, r3
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	4698      	mov	r8, r3
 8001a96:	e737      	b.n	8001908 <__aeabi_dmul+0x42c>
 8001a98:	fffffc0d 	.word	0xfffffc0d
 8001a9c:	000007ff 	.word	0x000007ff
 8001aa0:	0000043e 	.word	0x0000043e
 8001aa4:	0000041e 	.word	0x0000041e

08001aa8 <__aeabi_dsub>:
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	4657      	mov	r7, sl
 8001aac:	464e      	mov	r6, r9
 8001aae:	4645      	mov	r5, r8
 8001ab0:	46de      	mov	lr, fp
 8001ab2:	b5e0      	push	{r5, r6, r7, lr}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	9000      	str	r0, [sp, #0]
 8001ab8:	9101      	str	r1, [sp, #4]
 8001aba:	030c      	lsls	r4, r1, #12
 8001abc:	004d      	lsls	r5, r1, #1
 8001abe:	0fce      	lsrs	r6, r1, #31
 8001ac0:	0a61      	lsrs	r1, r4, #9
 8001ac2:	9c00      	ldr	r4, [sp, #0]
 8001ac4:	005f      	lsls	r7, r3, #1
 8001ac6:	0f64      	lsrs	r4, r4, #29
 8001ac8:	430c      	orrs	r4, r1
 8001aca:	9900      	ldr	r1, [sp, #0]
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	00c8      	lsls	r0, r1, #3
 8001ad2:	0319      	lsls	r1, r3, #12
 8001ad4:	0d7b      	lsrs	r3, r7, #21
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	9b01      	ldr	r3, [sp, #4]
 8001ada:	4fcc      	ldr	r7, [pc, #816]	@ (8001e0c <__aeabi_dsub+0x364>)
 8001adc:	0fdb      	lsrs	r3, r3, #31
 8001ade:	469c      	mov	ip, r3
 8001ae0:	0a4b      	lsrs	r3, r1, #9
 8001ae2:	9900      	ldr	r1, [sp, #0]
 8001ae4:	4680      	mov	r8, r0
 8001ae6:	0f49      	lsrs	r1, r1, #29
 8001ae8:	4319      	orrs	r1, r3
 8001aea:	9b00      	ldr	r3, [sp, #0]
 8001aec:	468b      	mov	fp, r1
 8001aee:	00da      	lsls	r2, r3, #3
 8001af0:	4692      	mov	sl, r2
 8001af2:	0d6d      	lsrs	r5, r5, #21
 8001af4:	45b9      	cmp	r9, r7
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x52>
 8001af8:	e0bf      	b.n	8001c7a <__aeabi_dsub+0x1d2>
 8001afa:	2301      	movs	r3, #1
 8001afc:	4661      	mov	r1, ip
 8001afe:	4059      	eors	r1, r3
 8001b00:	464b      	mov	r3, r9
 8001b02:	468c      	mov	ip, r1
 8001b04:	1aeb      	subs	r3, r5, r3
 8001b06:	428e      	cmp	r6, r1
 8001b08:	d075      	beq.n	8001bf6 <__aeabi_dsub+0x14e>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	dc00      	bgt.n	8001b10 <__aeabi_dsub+0x68>
 8001b0e:	e2a3      	b.n	8002058 <__aeabi_dsub+0x5b0>
 8001b10:	4649      	mov	r1, r9
 8001b12:	2900      	cmp	r1, #0
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x70>
 8001b16:	e0ce      	b.n	8001cb6 <__aeabi_dsub+0x20e>
 8001b18:	42bd      	cmp	r5, r7
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dsub+0x76>
 8001b1c:	e200      	b.n	8001f20 <__aeabi_dsub+0x478>
 8001b1e:	2701      	movs	r7, #1
 8001b20:	2b38      	cmp	r3, #56	@ 0x38
 8001b22:	dc19      	bgt.n	8001b58 <__aeabi_dsub+0xb0>
 8001b24:	2780      	movs	r7, #128	@ 0x80
 8001b26:	4659      	mov	r1, fp
 8001b28:	043f      	lsls	r7, r7, #16
 8001b2a:	4339      	orrs	r1, r7
 8001b2c:	468b      	mov	fp, r1
 8001b2e:	2b1f      	cmp	r3, #31
 8001b30:	dd00      	ble.n	8001b34 <__aeabi_dsub+0x8c>
 8001b32:	e1fa      	b.n	8001f2a <__aeabi_dsub+0x482>
 8001b34:	2720      	movs	r7, #32
 8001b36:	1af9      	subs	r1, r7, r3
 8001b38:	468c      	mov	ip, r1
 8001b3a:	4659      	mov	r1, fp
 8001b3c:	4667      	mov	r7, ip
 8001b3e:	40b9      	lsls	r1, r7
 8001b40:	000f      	movs	r7, r1
 8001b42:	0011      	movs	r1, r2
 8001b44:	40d9      	lsrs	r1, r3
 8001b46:	430f      	orrs	r7, r1
 8001b48:	4661      	mov	r1, ip
 8001b4a:	408a      	lsls	r2, r1
 8001b4c:	1e51      	subs	r1, r2, #1
 8001b4e:	418a      	sbcs	r2, r1
 8001b50:	4659      	mov	r1, fp
 8001b52:	40d9      	lsrs	r1, r3
 8001b54:	4317      	orrs	r7, r2
 8001b56:	1a64      	subs	r4, r4, r1
 8001b58:	1bc7      	subs	r7, r0, r7
 8001b5a:	42b8      	cmp	r0, r7
 8001b5c:	4180      	sbcs	r0, r0
 8001b5e:	4240      	negs	r0, r0
 8001b60:	1a24      	subs	r4, r4, r0
 8001b62:	0223      	lsls	r3, r4, #8
 8001b64:	d400      	bmi.n	8001b68 <__aeabi_dsub+0xc0>
 8001b66:	e140      	b.n	8001dea <__aeabi_dsub+0x342>
 8001b68:	0264      	lsls	r4, r4, #9
 8001b6a:	0a64      	lsrs	r4, r4, #9
 8001b6c:	2c00      	cmp	r4, #0
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0xca>
 8001b70:	e154      	b.n	8001e1c <__aeabi_dsub+0x374>
 8001b72:	0020      	movs	r0, r4
 8001b74:	f000 fc52 	bl	800241c <__clzsi2>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	3b08      	subs	r3, #8
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	0038      	movs	r0, r7
 8001b80:	1aca      	subs	r2, r1, r3
 8001b82:	40d0      	lsrs	r0, r2
 8001b84:	409c      	lsls	r4, r3
 8001b86:	0002      	movs	r2, r0
 8001b88:	409f      	lsls	r7, r3
 8001b8a:	4322      	orrs	r2, r4
 8001b8c:	429d      	cmp	r5, r3
 8001b8e:	dd00      	ble.n	8001b92 <__aeabi_dsub+0xea>
 8001b90:	e1a6      	b.n	8001ee0 <__aeabi_dsub+0x438>
 8001b92:	1b58      	subs	r0, r3, r5
 8001b94:	3001      	adds	r0, #1
 8001b96:	1a09      	subs	r1, r1, r0
 8001b98:	003c      	movs	r4, r7
 8001b9a:	408f      	lsls	r7, r1
 8001b9c:	40c4      	lsrs	r4, r0
 8001b9e:	1e7b      	subs	r3, r7, #1
 8001ba0:	419f      	sbcs	r7, r3
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	408b      	lsls	r3, r1
 8001ba6:	4327      	orrs	r7, r4
 8001ba8:	431f      	orrs	r7, r3
 8001baa:	40c2      	lsrs	r2, r0
 8001bac:	003b      	movs	r3, r7
 8001bae:	0014      	movs	r4, r2
 8001bb0:	2500      	movs	r5, #0
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x110>
 8001bb6:	e1f7      	b.n	8001fa8 <__aeabi_dsub+0x500>
 8001bb8:	077b      	lsls	r3, r7, #29
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x116>
 8001bbc:	e377      	b.n	80022ae <__aeabi_dsub+0x806>
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	0038      	movs	r0, r7
 8001bc2:	403b      	ands	r3, r7
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d004      	beq.n	8001bd2 <__aeabi_dsub+0x12a>
 8001bc8:	1d38      	adds	r0, r7, #4
 8001bca:	42b8      	cmp	r0, r7
 8001bcc:	41bf      	sbcs	r7, r7
 8001bce:	427f      	negs	r7, r7
 8001bd0:	19e4      	adds	r4, r4, r7
 8001bd2:	0223      	lsls	r3, r4, #8
 8001bd4:	d400      	bmi.n	8001bd8 <__aeabi_dsub+0x130>
 8001bd6:	e368      	b.n	80022aa <__aeabi_dsub+0x802>
 8001bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001e0c <__aeabi_dsub+0x364>)
 8001bda:	3501      	adds	r5, #1
 8001bdc:	429d      	cmp	r5, r3
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x13a>
 8001be0:	e0f4      	b.n	8001dcc <__aeabi_dsub+0x324>
 8001be2:	4b8b      	ldr	r3, [pc, #556]	@ (8001e10 <__aeabi_dsub+0x368>)
 8001be4:	056d      	lsls	r5, r5, #21
 8001be6:	401c      	ands	r4, r3
 8001be8:	0d6d      	lsrs	r5, r5, #21
 8001bea:	0767      	lsls	r7, r4, #29
 8001bec:	08c0      	lsrs	r0, r0, #3
 8001bee:	0264      	lsls	r4, r4, #9
 8001bf0:	4307      	orrs	r7, r0
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	e0ec      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	dc00      	bgt.n	8001bfc <__aeabi_dsub+0x154>
 8001bfa:	e329      	b.n	8002250 <__aeabi_dsub+0x7a8>
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	2900      	cmp	r1, #0
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x15c>
 8001c02:	e0d6      	b.n	8001db2 <__aeabi_dsub+0x30a>
 8001c04:	4659      	mov	r1, fp
 8001c06:	4311      	orrs	r1, r2
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x164>
 8001c0a:	e12e      	b.n	8001e6a <__aeabi_dsub+0x3c2>
 8001c0c:	1e59      	subs	r1, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x16c>
 8001c12:	e1e6      	b.n	8001fe2 <__aeabi_dsub+0x53a>
 8001c14:	42bb      	cmp	r3, r7
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0x172>
 8001c18:	e182      	b.n	8001f20 <__aeabi_dsub+0x478>
 8001c1a:	2701      	movs	r7, #1
 8001c1c:	000b      	movs	r3, r1
 8001c1e:	2938      	cmp	r1, #56	@ 0x38
 8001c20:	dc14      	bgt.n	8001c4c <__aeabi_dsub+0x1a4>
 8001c22:	2b1f      	cmp	r3, #31
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_dsub+0x180>
 8001c26:	e23c      	b.n	80020a2 <__aeabi_dsub+0x5fa>
 8001c28:	2720      	movs	r7, #32
 8001c2a:	1af9      	subs	r1, r7, r3
 8001c2c:	468c      	mov	ip, r1
 8001c2e:	4659      	mov	r1, fp
 8001c30:	4667      	mov	r7, ip
 8001c32:	40b9      	lsls	r1, r7
 8001c34:	000f      	movs	r7, r1
 8001c36:	0011      	movs	r1, r2
 8001c38:	40d9      	lsrs	r1, r3
 8001c3a:	430f      	orrs	r7, r1
 8001c3c:	4661      	mov	r1, ip
 8001c3e:	408a      	lsls	r2, r1
 8001c40:	1e51      	subs	r1, r2, #1
 8001c42:	418a      	sbcs	r2, r1
 8001c44:	4659      	mov	r1, fp
 8001c46:	40d9      	lsrs	r1, r3
 8001c48:	4317      	orrs	r7, r2
 8001c4a:	1864      	adds	r4, r4, r1
 8001c4c:	183f      	adds	r7, r7, r0
 8001c4e:	4287      	cmp	r7, r0
 8001c50:	4180      	sbcs	r0, r0
 8001c52:	4240      	negs	r0, r0
 8001c54:	1824      	adds	r4, r4, r0
 8001c56:	0223      	lsls	r3, r4, #8
 8001c58:	d400      	bmi.n	8001c5c <__aeabi_dsub+0x1b4>
 8001c5a:	e0c6      	b.n	8001dea <__aeabi_dsub+0x342>
 8001c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e0c <__aeabi_dsub+0x364>)
 8001c5e:	3501      	adds	r5, #1
 8001c60:	429d      	cmp	r5, r3
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x1be>
 8001c64:	e0b2      	b.n	8001dcc <__aeabi_dsub+0x324>
 8001c66:	2101      	movs	r1, #1
 8001c68:	4b69      	ldr	r3, [pc, #420]	@ (8001e10 <__aeabi_dsub+0x368>)
 8001c6a:	087a      	lsrs	r2, r7, #1
 8001c6c:	401c      	ands	r4, r3
 8001c6e:	4039      	ands	r1, r7
 8001c70:	430a      	orrs	r2, r1
 8001c72:	07e7      	lsls	r7, r4, #31
 8001c74:	4317      	orrs	r7, r2
 8001c76:	0864      	lsrs	r4, r4, #1
 8001c78:	e79e      	b.n	8001bb8 <__aeabi_dsub+0x110>
 8001c7a:	4b66      	ldr	r3, [pc, #408]	@ (8001e14 <__aeabi_dsub+0x36c>)
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	468a      	mov	sl, r1
 8001c80:	18eb      	adds	r3, r5, r3
 8001c82:	2900      	cmp	r1, #0
 8001c84:	d028      	beq.n	8001cd8 <__aeabi_dsub+0x230>
 8001c86:	4566      	cmp	r6, ip
 8001c88:	d02c      	beq.n	8001ce4 <__aeabi_dsub+0x23c>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d05b      	beq.n	8001d46 <__aeabi_dsub+0x29e>
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x1ec>
 8001c92:	e12c      	b.n	8001eee <__aeabi_dsub+0x446>
 8001c94:	465b      	mov	r3, fp
 8001c96:	4666      	mov	r6, ip
 8001c98:	075f      	lsls	r7, r3, #29
 8001c9a:	08d2      	lsrs	r2, r2, #3
 8001c9c:	4317      	orrs	r7, r2
 8001c9e:	08dd      	lsrs	r5, r3, #3
 8001ca0:	003b      	movs	r3, r7
 8001ca2:	432b      	orrs	r3, r5
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x200>
 8001ca6:	e0e2      	b.n	8001e6e <__aeabi_dsub+0x3c6>
 8001ca8:	2480      	movs	r4, #128	@ 0x80
 8001caa:	0324      	lsls	r4, r4, #12
 8001cac:	432c      	orrs	r4, r5
 8001cae:	0324      	lsls	r4, r4, #12
 8001cb0:	4d56      	ldr	r5, [pc, #344]	@ (8001e0c <__aeabi_dsub+0x364>)
 8001cb2:	0b24      	lsrs	r4, r4, #12
 8001cb4:	e08c      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8001cb6:	4659      	mov	r1, fp
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x216>
 8001cbc:	e0d5      	b.n	8001e6a <__aeabi_dsub+0x3c2>
 8001cbe:	1e59      	subs	r1, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x21e>
 8001cc4:	e1b9      	b.n	800203a <__aeabi_dsub+0x592>
 8001cc6:	42bb      	cmp	r3, r7
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x224>
 8001cca:	e1b1      	b.n	8002030 <__aeabi_dsub+0x588>
 8001ccc:	2701      	movs	r7, #1
 8001cce:	000b      	movs	r3, r1
 8001cd0:	2938      	cmp	r1, #56	@ 0x38
 8001cd2:	dd00      	ble.n	8001cd6 <__aeabi_dsub+0x22e>
 8001cd4:	e740      	b.n	8001b58 <__aeabi_dsub+0xb0>
 8001cd6:	e72a      	b.n	8001b2e <__aeabi_dsub+0x86>
 8001cd8:	4661      	mov	r1, ip
 8001cda:	2701      	movs	r7, #1
 8001cdc:	4079      	eors	r1, r7
 8001cde:	468c      	mov	ip, r1
 8001ce0:	4566      	cmp	r6, ip
 8001ce2:	d1d2      	bne.n	8001c8a <__aeabi_dsub+0x1e2>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x242>
 8001ce8:	e0c5      	b.n	8001e76 <__aeabi_dsub+0x3ce>
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_dsub+0x248>
 8001cee:	e155      	b.n	8001f9c <__aeabi_dsub+0x4f4>
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	0025      	movs	r5, r4
 8001cf4:	4305      	orrs	r5, r0
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dsub+0x252>
 8001cf8:	e212      	b.n	8002120 <__aeabi_dsub+0x678>
 8001cfa:	1e59      	subs	r1, r3, #1
 8001cfc:	468c      	mov	ip, r1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dsub+0x25c>
 8001d02:	e249      	b.n	8002198 <__aeabi_dsub+0x6f0>
 8001d04:	4d41      	ldr	r5, [pc, #260]	@ (8001e0c <__aeabi_dsub+0x364>)
 8001d06:	42ab      	cmp	r3, r5
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x264>
 8001d0a:	e28f      	b.n	800222c <__aeabi_dsub+0x784>
 8001d0c:	2701      	movs	r7, #1
 8001d0e:	2938      	cmp	r1, #56	@ 0x38
 8001d10:	dc11      	bgt.n	8001d36 <__aeabi_dsub+0x28e>
 8001d12:	4663      	mov	r3, ip
 8001d14:	2b1f      	cmp	r3, #31
 8001d16:	dd00      	ble.n	8001d1a <__aeabi_dsub+0x272>
 8001d18:	e25b      	b.n	80021d2 <__aeabi_dsub+0x72a>
 8001d1a:	4661      	mov	r1, ip
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	0027      	movs	r7, r4
 8001d20:	1a5b      	subs	r3, r3, r1
 8001d22:	0005      	movs	r5, r0
 8001d24:	4098      	lsls	r0, r3
 8001d26:	409f      	lsls	r7, r3
 8001d28:	40cd      	lsrs	r5, r1
 8001d2a:	1e43      	subs	r3, r0, #1
 8001d2c:	4198      	sbcs	r0, r3
 8001d2e:	40cc      	lsrs	r4, r1
 8001d30:	432f      	orrs	r7, r5
 8001d32:	4307      	orrs	r7, r0
 8001d34:	44a3      	add	fp, r4
 8001d36:	18bf      	adds	r7, r7, r2
 8001d38:	4297      	cmp	r7, r2
 8001d3a:	4192      	sbcs	r2, r2
 8001d3c:	4252      	negs	r2, r2
 8001d3e:	445a      	add	r2, fp
 8001d40:	0014      	movs	r4, r2
 8001d42:	464d      	mov	r5, r9
 8001d44:	e787      	b.n	8001c56 <__aeabi_dsub+0x1ae>
 8001d46:	4f34      	ldr	r7, [pc, #208]	@ (8001e18 <__aeabi_dsub+0x370>)
 8001d48:	1c6b      	adds	r3, r5, #1
 8001d4a:	423b      	tst	r3, r7
 8001d4c:	d000      	beq.n	8001d50 <__aeabi_dsub+0x2a8>
 8001d4e:	e0b6      	b.n	8001ebe <__aeabi_dsub+0x416>
 8001d50:	4659      	mov	r1, fp
 8001d52:	0023      	movs	r3, r4
 8001d54:	4311      	orrs	r1, r2
 8001d56:	000f      	movs	r7, r1
 8001d58:	4303      	orrs	r3, r0
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_dsub+0x2b8>
 8001d5e:	e126      	b.n	8001fae <__aeabi_dsub+0x506>
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x2be>
 8001d64:	e1c0      	b.n	80020e8 <__aeabi_dsub+0x640>
 8001d66:	2900      	cmp	r1, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x2c4>
 8001d6a:	e0a1      	b.n	8001eb0 <__aeabi_dsub+0x408>
 8001d6c:	1a83      	subs	r3, r0, r2
 8001d6e:	4698      	mov	r8, r3
 8001d70:	465b      	mov	r3, fp
 8001d72:	4540      	cmp	r0, r8
 8001d74:	41ad      	sbcs	r5, r5
 8001d76:	1ae3      	subs	r3, r4, r3
 8001d78:	426d      	negs	r5, r5
 8001d7a:	1b5b      	subs	r3, r3, r5
 8001d7c:	2580      	movs	r5, #128	@ 0x80
 8001d7e:	042d      	lsls	r5, r5, #16
 8001d80:	422b      	tst	r3, r5
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x2de>
 8001d84:	e14b      	b.n	800201e <__aeabi_dsub+0x576>
 8001d86:	465b      	mov	r3, fp
 8001d88:	1a10      	subs	r0, r2, r0
 8001d8a:	4282      	cmp	r2, r0
 8001d8c:	4192      	sbcs	r2, r2
 8001d8e:	1b1c      	subs	r4, r3, r4
 8001d90:	0007      	movs	r7, r0
 8001d92:	2601      	movs	r6, #1
 8001d94:	4663      	mov	r3, ip
 8001d96:	4252      	negs	r2, r2
 8001d98:	1aa4      	subs	r4, r4, r2
 8001d9a:	4327      	orrs	r7, r4
 8001d9c:	401e      	ands	r6, r3
 8001d9e:	2f00      	cmp	r7, #0
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x2fc>
 8001da2:	e142      	b.n	800202a <__aeabi_dsub+0x582>
 8001da4:	422c      	tst	r4, r5
 8001da6:	d100      	bne.n	8001daa <__aeabi_dsub+0x302>
 8001da8:	e26d      	b.n	8002286 <__aeabi_dsub+0x7de>
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <__aeabi_dsub+0x368>)
 8001dac:	2501      	movs	r5, #1
 8001dae:	401c      	ands	r4, r3
 8001db0:	e71b      	b.n	8001bea <__aeabi_dsub+0x142>
 8001db2:	42bd      	cmp	r5, r7
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x310>
 8001db6:	e13b      	b.n	8002030 <__aeabi_dsub+0x588>
 8001db8:	2701      	movs	r7, #1
 8001dba:	2b38      	cmp	r3, #56	@ 0x38
 8001dbc:	dd00      	ble.n	8001dc0 <__aeabi_dsub+0x318>
 8001dbe:	e745      	b.n	8001c4c <__aeabi_dsub+0x1a4>
 8001dc0:	2780      	movs	r7, #128	@ 0x80
 8001dc2:	4659      	mov	r1, fp
 8001dc4:	043f      	lsls	r7, r7, #16
 8001dc6:	4339      	orrs	r1, r7
 8001dc8:	468b      	mov	fp, r1
 8001dca:	e72a      	b.n	8001c22 <__aeabi_dsub+0x17a>
 8001dcc:	2400      	movs	r4, #0
 8001dce:	2700      	movs	r7, #0
 8001dd0:	052d      	lsls	r5, r5, #20
 8001dd2:	4325      	orrs	r5, r4
 8001dd4:	07f6      	lsls	r6, r6, #31
 8001dd6:	4335      	orrs	r5, r6
 8001dd8:	0038      	movs	r0, r7
 8001dda:	0029      	movs	r1, r5
 8001ddc:	b003      	add	sp, #12
 8001dde:	bcf0      	pop	{r4, r5, r6, r7}
 8001de0:	46bb      	mov	fp, r7
 8001de2:	46b2      	mov	sl, r6
 8001de4:	46a9      	mov	r9, r5
 8001de6:	46a0      	mov	r8, r4
 8001de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dea:	077b      	lsls	r3, r7, #29
 8001dec:	d004      	beq.n	8001df8 <__aeabi_dsub+0x350>
 8001dee:	230f      	movs	r3, #15
 8001df0:	403b      	ands	r3, r7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x350>
 8001df6:	e6e7      	b.n	8001bc8 <__aeabi_dsub+0x120>
 8001df8:	002b      	movs	r3, r5
 8001dfa:	08f8      	lsrs	r0, r7, #3
 8001dfc:	4a03      	ldr	r2, [pc, #12]	@ (8001e0c <__aeabi_dsub+0x364>)
 8001dfe:	0767      	lsls	r7, r4, #29
 8001e00:	4307      	orrs	r7, r0
 8001e02:	08e5      	lsrs	r5, r4, #3
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x362>
 8001e08:	e74a      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 8001e0a:	e0a5      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 8001e0c:	000007ff 	.word	0x000007ff
 8001e10:	ff7fffff 	.word	0xff7fffff
 8001e14:	fffff801 	.word	0xfffff801
 8001e18:	000007fe 	.word	0x000007fe
 8001e1c:	0038      	movs	r0, r7
 8001e1e:	f000 fafd 	bl	800241c <__clzsi2>
 8001e22:	0003      	movs	r3, r0
 8001e24:	3318      	adds	r3, #24
 8001e26:	2b1f      	cmp	r3, #31
 8001e28:	dc00      	bgt.n	8001e2c <__aeabi_dsub+0x384>
 8001e2a:	e6a7      	b.n	8001b7c <__aeabi_dsub+0xd4>
 8001e2c:	003a      	movs	r2, r7
 8001e2e:	3808      	subs	r0, #8
 8001e30:	4082      	lsls	r2, r0
 8001e32:	429d      	cmp	r5, r3
 8001e34:	dd00      	ble.n	8001e38 <__aeabi_dsub+0x390>
 8001e36:	e08a      	b.n	8001f4e <__aeabi_dsub+0x4a6>
 8001e38:	1b5b      	subs	r3, r3, r5
 8001e3a:	1c58      	adds	r0, r3, #1
 8001e3c:	281f      	cmp	r0, #31
 8001e3e:	dc00      	bgt.n	8001e42 <__aeabi_dsub+0x39a>
 8001e40:	e1d8      	b.n	80021f4 <__aeabi_dsub+0x74c>
 8001e42:	0017      	movs	r7, r2
 8001e44:	3b1f      	subs	r3, #31
 8001e46:	40df      	lsrs	r7, r3
 8001e48:	2820      	cmp	r0, #32
 8001e4a:	d005      	beq.n	8001e58 <__aeabi_dsub+0x3b0>
 8001e4c:	2340      	movs	r3, #64	@ 0x40
 8001e4e:	1a1b      	subs	r3, r3, r0
 8001e50:	409a      	lsls	r2, r3
 8001e52:	1e53      	subs	r3, r2, #1
 8001e54:	419a      	sbcs	r2, r3
 8001e56:	4317      	orrs	r7, r2
 8001e58:	2500      	movs	r5, #0
 8001e5a:	2f00      	cmp	r7, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x3b8>
 8001e5e:	e0e5      	b.n	800202c <__aeabi_dsub+0x584>
 8001e60:	077b      	lsls	r3, r7, #29
 8001e62:	d000      	beq.n	8001e66 <__aeabi_dsub+0x3be>
 8001e64:	e6ab      	b.n	8001bbe <__aeabi_dsub+0x116>
 8001e66:	002c      	movs	r4, r5
 8001e68:	e7c6      	b.n	8001df8 <__aeabi_dsub+0x350>
 8001e6a:	08c0      	lsrs	r0, r0, #3
 8001e6c:	e7c6      	b.n	8001dfc <__aeabi_dsub+0x354>
 8001e6e:	2700      	movs	r7, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4dd1      	ldr	r5, [pc, #836]	@ (80021b8 <__aeabi_dsub+0x710>)
 8001e74:	e7ac      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8001e76:	4fd1      	ldr	r7, [pc, #836]	@ (80021bc <__aeabi_dsub+0x714>)
 8001e78:	1c6b      	adds	r3, r5, #1
 8001e7a:	423b      	tst	r3, r7
 8001e7c:	d171      	bne.n	8001f62 <__aeabi_dsub+0x4ba>
 8001e7e:	0023      	movs	r3, r4
 8001e80:	4303      	orrs	r3, r0
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d000      	beq.n	8001e88 <__aeabi_dsub+0x3e0>
 8001e86:	e14e      	b.n	8002126 <__aeabi_dsub+0x67e>
 8001e88:	4657      	mov	r7, sl
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x3e8>
 8001e8e:	e1b5      	b.n	80021fc <__aeabi_dsub+0x754>
 8001e90:	2f00      	cmp	r7, #0
 8001e92:	d00d      	beq.n	8001eb0 <__aeabi_dsub+0x408>
 8001e94:	1883      	adds	r3, r0, r2
 8001e96:	4283      	cmp	r3, r0
 8001e98:	4180      	sbcs	r0, r0
 8001e9a:	445c      	add	r4, fp
 8001e9c:	4240      	negs	r0, r0
 8001e9e:	1824      	adds	r4, r4, r0
 8001ea0:	0222      	lsls	r2, r4, #8
 8001ea2:	d500      	bpl.n	8001ea6 <__aeabi_dsub+0x3fe>
 8001ea4:	e1c8      	b.n	8002238 <__aeabi_dsub+0x790>
 8001ea6:	001f      	movs	r7, r3
 8001ea8:	4698      	mov	r8, r3
 8001eaa:	4327      	orrs	r7, r4
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x408>
 8001eae:	e0bc      	b.n	800202a <__aeabi_dsub+0x582>
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	0767      	lsls	r7, r4, #29
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	431f      	orrs	r7, r3
 8001eb8:	08e5      	lsrs	r5, r4, #3
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e04c      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 8001ebe:	1a83      	subs	r3, r0, r2
 8001ec0:	4698      	mov	r8, r3
 8001ec2:	465b      	mov	r3, fp
 8001ec4:	4540      	cmp	r0, r8
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	1ae3      	subs	r3, r4, r3
 8001eca:	427f      	negs	r7, r7
 8001ecc:	1bdb      	subs	r3, r3, r7
 8001ece:	021f      	lsls	r7, r3, #8
 8001ed0:	d47c      	bmi.n	8001fcc <__aeabi_dsub+0x524>
 8001ed2:	4647      	mov	r7, r8
 8001ed4:	431f      	orrs	r7, r3
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x432>
 8001ed8:	e0a6      	b.n	8002028 <__aeabi_dsub+0x580>
 8001eda:	001c      	movs	r4, r3
 8001edc:	4647      	mov	r7, r8
 8001ede:	e645      	b.n	8001b6c <__aeabi_dsub+0xc4>
 8001ee0:	4cb7      	ldr	r4, [pc, #732]	@ (80021c0 <__aeabi_dsub+0x718>)
 8001ee2:	1aed      	subs	r5, r5, r3
 8001ee4:	4014      	ands	r4, r2
 8001ee6:	077b      	lsls	r3, r7, #29
 8001ee8:	d000      	beq.n	8001eec <__aeabi_dsub+0x444>
 8001eea:	e780      	b.n	8001dee <__aeabi_dsub+0x346>
 8001eec:	e784      	b.n	8001df8 <__aeabi_dsub+0x350>
 8001eee:	464b      	mov	r3, r9
 8001ef0:	0025      	movs	r5, r4
 8001ef2:	4305      	orrs	r5, r0
 8001ef4:	d066      	beq.n	8001fc4 <__aeabi_dsub+0x51c>
 8001ef6:	1e5f      	subs	r7, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d100      	bne.n	8001efe <__aeabi_dsub+0x456>
 8001efc:	e0fc      	b.n	80020f8 <__aeabi_dsub+0x650>
 8001efe:	4dae      	ldr	r5, [pc, #696]	@ (80021b8 <__aeabi_dsub+0x710>)
 8001f00:	42ab      	cmp	r3, r5
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x45e>
 8001f04:	e15e      	b.n	80021c4 <__aeabi_dsub+0x71c>
 8001f06:	4666      	mov	r6, ip
 8001f08:	2f38      	cmp	r7, #56	@ 0x38
 8001f0a:	dc00      	bgt.n	8001f0e <__aeabi_dsub+0x466>
 8001f0c:	e0b4      	b.n	8002078 <__aeabi_dsub+0x5d0>
 8001f0e:	2001      	movs	r0, #1
 8001f10:	1a17      	subs	r7, r2, r0
 8001f12:	42ba      	cmp	r2, r7
 8001f14:	4192      	sbcs	r2, r2
 8001f16:	465b      	mov	r3, fp
 8001f18:	4252      	negs	r2, r2
 8001f1a:	464d      	mov	r5, r9
 8001f1c:	1a9c      	subs	r4, r3, r2
 8001f1e:	e620      	b.n	8001b62 <__aeabi_dsub+0xba>
 8001f20:	0767      	lsls	r7, r4, #29
 8001f22:	08c0      	lsrs	r0, r0, #3
 8001f24:	4307      	orrs	r7, r0
 8001f26:	08e5      	lsrs	r5, r4, #3
 8001f28:	e6ba      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 8001f2a:	001f      	movs	r7, r3
 8001f2c:	4659      	mov	r1, fp
 8001f2e:	3f20      	subs	r7, #32
 8001f30:	40f9      	lsrs	r1, r7
 8001f32:	000f      	movs	r7, r1
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d005      	beq.n	8001f44 <__aeabi_dsub+0x49c>
 8001f38:	2140      	movs	r1, #64	@ 0x40
 8001f3a:	1acb      	subs	r3, r1, r3
 8001f3c:	4659      	mov	r1, fp
 8001f3e:	4099      	lsls	r1, r3
 8001f40:	430a      	orrs	r2, r1
 8001f42:	4692      	mov	sl, r2
 8001f44:	4653      	mov	r3, sl
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	4193      	sbcs	r3, r2
 8001f4a:	431f      	orrs	r7, r3
 8001f4c:	e604      	b.n	8001b58 <__aeabi_dsub+0xb0>
 8001f4e:	1aeb      	subs	r3, r5, r3
 8001f50:	4d9b      	ldr	r5, [pc, #620]	@ (80021c0 <__aeabi_dsub+0x718>)
 8001f52:	4015      	ands	r5, r2
 8001f54:	076f      	lsls	r7, r5, #29
 8001f56:	08ed      	lsrs	r5, r5, #3
 8001f58:	032c      	lsls	r4, r5, #12
 8001f5a:	055d      	lsls	r5, r3, #21
 8001f5c:	0b24      	lsrs	r4, r4, #12
 8001f5e:	0d6d      	lsrs	r5, r5, #21
 8001f60:	e736      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8001f62:	4d95      	ldr	r5, [pc, #596]	@ (80021b8 <__aeabi_dsub+0x710>)
 8001f64:	42ab      	cmp	r3, r5
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x4c2>
 8001f68:	e0d6      	b.n	8002118 <__aeabi_dsub+0x670>
 8001f6a:	1882      	adds	r2, r0, r2
 8001f6c:	0021      	movs	r1, r4
 8001f6e:	4282      	cmp	r2, r0
 8001f70:	4180      	sbcs	r0, r0
 8001f72:	4459      	add	r1, fp
 8001f74:	4240      	negs	r0, r0
 8001f76:	1808      	adds	r0, r1, r0
 8001f78:	07c7      	lsls	r7, r0, #31
 8001f7a:	0852      	lsrs	r2, r2, #1
 8001f7c:	4317      	orrs	r7, r2
 8001f7e:	0844      	lsrs	r4, r0, #1
 8001f80:	0752      	lsls	r2, r2, #29
 8001f82:	d400      	bmi.n	8001f86 <__aeabi_dsub+0x4de>
 8001f84:	e185      	b.n	8002292 <__aeabi_dsub+0x7ea>
 8001f86:	220f      	movs	r2, #15
 8001f88:	001d      	movs	r5, r3
 8001f8a:	403a      	ands	r2, r7
 8001f8c:	2a04      	cmp	r2, #4
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dsub+0x4ea>
 8001f90:	e61a      	b.n	8001bc8 <__aeabi_dsub+0x120>
 8001f92:	08ff      	lsrs	r7, r7, #3
 8001f94:	0764      	lsls	r4, r4, #29
 8001f96:	4327      	orrs	r7, r4
 8001f98:	0905      	lsrs	r5, r0, #4
 8001f9a:	e7dd      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 8001f9c:	465b      	mov	r3, fp
 8001f9e:	08d2      	lsrs	r2, r2, #3
 8001fa0:	075f      	lsls	r7, r3, #29
 8001fa2:	4317      	orrs	r7, r2
 8001fa4:	08dd      	lsrs	r5, r3, #3
 8001fa6:	e67b      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 8001fa8:	2700      	movs	r7, #0
 8001faa:	2400      	movs	r4, #0
 8001fac:	e710      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d000      	beq.n	8001fb4 <__aeabi_dsub+0x50c>
 8001fb2:	e0d6      	b.n	8002162 <__aeabi_dsub+0x6ba>
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d000      	beq.n	8001fba <__aeabi_dsub+0x512>
 8001fb8:	e12f      	b.n	800221a <__aeabi_dsub+0x772>
 8001fba:	2480      	movs	r4, #128	@ 0x80
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	4d7e      	ldr	r5, [pc, #504]	@ (80021b8 <__aeabi_dsub+0x710>)
 8001fc0:	0324      	lsls	r4, r4, #12
 8001fc2:	e705      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8001fc4:	4666      	mov	r6, ip
 8001fc6:	465c      	mov	r4, fp
 8001fc8:	08d0      	lsrs	r0, r2, #3
 8001fca:	e717      	b.n	8001dfc <__aeabi_dsub+0x354>
 8001fcc:	465b      	mov	r3, fp
 8001fce:	1a17      	subs	r7, r2, r0
 8001fd0:	42ba      	cmp	r2, r7
 8001fd2:	4192      	sbcs	r2, r2
 8001fd4:	1b1c      	subs	r4, r3, r4
 8001fd6:	2601      	movs	r6, #1
 8001fd8:	4663      	mov	r3, ip
 8001fda:	4252      	negs	r2, r2
 8001fdc:	1aa4      	subs	r4, r4, r2
 8001fde:	401e      	ands	r6, r3
 8001fe0:	e5c4      	b.n	8001b6c <__aeabi_dsub+0xc4>
 8001fe2:	1883      	adds	r3, r0, r2
 8001fe4:	4283      	cmp	r3, r0
 8001fe6:	4180      	sbcs	r0, r0
 8001fe8:	445c      	add	r4, fp
 8001fea:	4240      	negs	r0, r0
 8001fec:	1825      	adds	r5, r4, r0
 8001fee:	022a      	lsls	r2, r5, #8
 8001ff0:	d400      	bmi.n	8001ff4 <__aeabi_dsub+0x54c>
 8001ff2:	e0da      	b.n	80021aa <__aeabi_dsub+0x702>
 8001ff4:	4a72      	ldr	r2, [pc, #456]	@ (80021c0 <__aeabi_dsub+0x718>)
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	4015      	ands	r5, r2
 8001ffa:	07ea      	lsls	r2, r5, #31
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	0869      	lsrs	r1, r5, #1
 8002000:	075b      	lsls	r3, r3, #29
 8002002:	d400      	bmi.n	8002006 <__aeabi_dsub+0x55e>
 8002004:	e14a      	b.n	800229c <__aeabi_dsub+0x7f4>
 8002006:	230f      	movs	r3, #15
 8002008:	4013      	ands	r3, r2
 800200a:	2b04      	cmp	r3, #4
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x568>
 800200e:	e0fc      	b.n	800220a <__aeabi_dsub+0x762>
 8002010:	1d17      	adds	r7, r2, #4
 8002012:	4297      	cmp	r7, r2
 8002014:	41a4      	sbcs	r4, r4
 8002016:	4264      	negs	r4, r4
 8002018:	2502      	movs	r5, #2
 800201a:	1864      	adds	r4, r4, r1
 800201c:	e6ec      	b.n	8001df8 <__aeabi_dsub+0x350>
 800201e:	4647      	mov	r7, r8
 8002020:	001c      	movs	r4, r3
 8002022:	431f      	orrs	r7, r3
 8002024:	d000      	beq.n	8002028 <__aeabi_dsub+0x580>
 8002026:	e743      	b.n	8001eb0 <__aeabi_dsub+0x408>
 8002028:	2600      	movs	r6, #0
 800202a:	2500      	movs	r5, #0
 800202c:	2400      	movs	r4, #0
 800202e:	e6cf      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8002030:	08c0      	lsrs	r0, r0, #3
 8002032:	0767      	lsls	r7, r4, #29
 8002034:	4307      	orrs	r7, r0
 8002036:	08e5      	lsrs	r5, r4, #3
 8002038:	e632      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 800203a:	1a87      	subs	r7, r0, r2
 800203c:	465b      	mov	r3, fp
 800203e:	42b8      	cmp	r0, r7
 8002040:	4180      	sbcs	r0, r0
 8002042:	1ae4      	subs	r4, r4, r3
 8002044:	4240      	negs	r0, r0
 8002046:	1a24      	subs	r4, r4, r0
 8002048:	0223      	lsls	r3, r4, #8
 800204a:	d428      	bmi.n	800209e <__aeabi_dsub+0x5f6>
 800204c:	0763      	lsls	r3, r4, #29
 800204e:	08ff      	lsrs	r7, r7, #3
 8002050:	431f      	orrs	r7, r3
 8002052:	08e5      	lsrs	r5, r4, #3
 8002054:	2301      	movs	r3, #1
 8002056:	e77f      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d100      	bne.n	800205e <__aeabi_dsub+0x5b6>
 800205c:	e673      	b.n	8001d46 <__aeabi_dsub+0x29e>
 800205e:	464b      	mov	r3, r9
 8002060:	1b5f      	subs	r7, r3, r5
 8002062:	003b      	movs	r3, r7
 8002064:	2d00      	cmp	r5, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x5c2>
 8002068:	e742      	b.n	8001ef0 <__aeabi_dsub+0x448>
 800206a:	2f38      	cmp	r7, #56	@ 0x38
 800206c:	dd00      	ble.n	8002070 <__aeabi_dsub+0x5c8>
 800206e:	e0ec      	b.n	800224a <__aeabi_dsub+0x7a2>
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	000e      	movs	r6, r1
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	431c      	orrs	r4, r3
 8002078:	2f1f      	cmp	r7, #31
 800207a:	dc25      	bgt.n	80020c8 <__aeabi_dsub+0x620>
 800207c:	2520      	movs	r5, #32
 800207e:	0023      	movs	r3, r4
 8002080:	1bed      	subs	r5, r5, r7
 8002082:	0001      	movs	r1, r0
 8002084:	40a8      	lsls	r0, r5
 8002086:	40ab      	lsls	r3, r5
 8002088:	40f9      	lsrs	r1, r7
 800208a:	1e45      	subs	r5, r0, #1
 800208c:	41a8      	sbcs	r0, r5
 800208e:	430b      	orrs	r3, r1
 8002090:	40fc      	lsrs	r4, r7
 8002092:	4318      	orrs	r0, r3
 8002094:	465b      	mov	r3, fp
 8002096:	1b1b      	subs	r3, r3, r4
 8002098:	469b      	mov	fp, r3
 800209a:	e739      	b.n	8001f10 <__aeabi_dsub+0x468>
 800209c:	4666      	mov	r6, ip
 800209e:	2501      	movs	r5, #1
 80020a0:	e562      	b.n	8001b68 <__aeabi_dsub+0xc0>
 80020a2:	001f      	movs	r7, r3
 80020a4:	4659      	mov	r1, fp
 80020a6:	3f20      	subs	r7, #32
 80020a8:	40f9      	lsrs	r1, r7
 80020aa:	468c      	mov	ip, r1
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d005      	beq.n	80020bc <__aeabi_dsub+0x614>
 80020b0:	2740      	movs	r7, #64	@ 0x40
 80020b2:	4659      	mov	r1, fp
 80020b4:	1afb      	subs	r3, r7, r3
 80020b6:	4099      	lsls	r1, r3
 80020b8:	430a      	orrs	r2, r1
 80020ba:	4692      	mov	sl, r2
 80020bc:	4657      	mov	r7, sl
 80020be:	1e7b      	subs	r3, r7, #1
 80020c0:	419f      	sbcs	r7, r3
 80020c2:	4663      	mov	r3, ip
 80020c4:	431f      	orrs	r7, r3
 80020c6:	e5c1      	b.n	8001c4c <__aeabi_dsub+0x1a4>
 80020c8:	003b      	movs	r3, r7
 80020ca:	0025      	movs	r5, r4
 80020cc:	3b20      	subs	r3, #32
 80020ce:	40dd      	lsrs	r5, r3
 80020d0:	2f20      	cmp	r7, #32
 80020d2:	d004      	beq.n	80020de <__aeabi_dsub+0x636>
 80020d4:	2340      	movs	r3, #64	@ 0x40
 80020d6:	1bdb      	subs	r3, r3, r7
 80020d8:	409c      	lsls	r4, r3
 80020da:	4320      	orrs	r0, r4
 80020dc:	4680      	mov	r8, r0
 80020de:	4640      	mov	r0, r8
 80020e0:	1e43      	subs	r3, r0, #1
 80020e2:	4198      	sbcs	r0, r3
 80020e4:	4328      	orrs	r0, r5
 80020e6:	e713      	b.n	8001f10 <__aeabi_dsub+0x468>
 80020e8:	2900      	cmp	r1, #0
 80020ea:	d09d      	beq.n	8002028 <__aeabi_dsub+0x580>
 80020ec:	2601      	movs	r6, #1
 80020ee:	4663      	mov	r3, ip
 80020f0:	465c      	mov	r4, fp
 80020f2:	4690      	mov	r8, r2
 80020f4:	401e      	ands	r6, r3
 80020f6:	e6db      	b.n	8001eb0 <__aeabi_dsub+0x408>
 80020f8:	1a17      	subs	r7, r2, r0
 80020fa:	465b      	mov	r3, fp
 80020fc:	42ba      	cmp	r2, r7
 80020fe:	4192      	sbcs	r2, r2
 8002100:	1b1c      	subs	r4, r3, r4
 8002102:	4252      	negs	r2, r2
 8002104:	1aa4      	subs	r4, r4, r2
 8002106:	0223      	lsls	r3, r4, #8
 8002108:	d4c8      	bmi.n	800209c <__aeabi_dsub+0x5f4>
 800210a:	0763      	lsls	r3, r4, #29
 800210c:	08ff      	lsrs	r7, r7, #3
 800210e:	431f      	orrs	r7, r3
 8002110:	4666      	mov	r6, ip
 8002112:	2301      	movs	r3, #1
 8002114:	08e5      	lsrs	r5, r4, #3
 8002116:	e71f      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 8002118:	001d      	movs	r5, r3
 800211a:	2400      	movs	r4, #0
 800211c:	2700      	movs	r7, #0
 800211e:	e657      	b.n	8001dd0 <__aeabi_dsub+0x328>
 8002120:	465c      	mov	r4, fp
 8002122:	08d0      	lsrs	r0, r2, #3
 8002124:	e66a      	b.n	8001dfc <__aeabi_dsub+0x354>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x684>
 800212a:	e737      	b.n	8001f9c <__aeabi_dsub+0x4f4>
 800212c:	4653      	mov	r3, sl
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	0767      	lsls	r7, r4, #29
 8002132:	4307      	orrs	r7, r0
 8002134:	08e5      	lsrs	r5, r4, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x694>
 800213a:	e5b1      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	031b      	lsls	r3, r3, #12
 8002140:	421d      	tst	r5, r3
 8002142:	d008      	beq.n	8002156 <__aeabi_dsub+0x6ae>
 8002144:	4659      	mov	r1, fp
 8002146:	08c8      	lsrs	r0, r1, #3
 8002148:	4218      	tst	r0, r3
 800214a:	d104      	bne.n	8002156 <__aeabi_dsub+0x6ae>
 800214c:	08d2      	lsrs	r2, r2, #3
 800214e:	0749      	lsls	r1, r1, #29
 8002150:	430a      	orrs	r2, r1
 8002152:	0017      	movs	r7, r2
 8002154:	0005      	movs	r5, r0
 8002156:	0f7b      	lsrs	r3, r7, #29
 8002158:	00ff      	lsls	r7, r7, #3
 800215a:	08ff      	lsrs	r7, r7, #3
 800215c:	075b      	lsls	r3, r3, #29
 800215e:	431f      	orrs	r7, r3
 8002160:	e59e      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 8002162:	08c0      	lsrs	r0, r0, #3
 8002164:	0763      	lsls	r3, r4, #29
 8002166:	4318      	orrs	r0, r3
 8002168:	08e5      	lsrs	r5, r4, #3
 800216a:	2900      	cmp	r1, #0
 800216c:	d053      	beq.n	8002216 <__aeabi_dsub+0x76e>
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	031b      	lsls	r3, r3, #12
 8002172:	421d      	tst	r5, r3
 8002174:	d00a      	beq.n	800218c <__aeabi_dsub+0x6e4>
 8002176:	4659      	mov	r1, fp
 8002178:	08cc      	lsrs	r4, r1, #3
 800217a:	421c      	tst	r4, r3
 800217c:	d106      	bne.n	800218c <__aeabi_dsub+0x6e4>
 800217e:	2601      	movs	r6, #1
 8002180:	4663      	mov	r3, ip
 8002182:	0025      	movs	r5, r4
 8002184:	08d0      	lsrs	r0, r2, #3
 8002186:	0749      	lsls	r1, r1, #29
 8002188:	4308      	orrs	r0, r1
 800218a:	401e      	ands	r6, r3
 800218c:	0f47      	lsrs	r7, r0, #29
 800218e:	00c0      	lsls	r0, r0, #3
 8002190:	08c0      	lsrs	r0, r0, #3
 8002192:	077f      	lsls	r7, r7, #29
 8002194:	4307      	orrs	r7, r0
 8002196:	e583      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 8002198:	1883      	adds	r3, r0, r2
 800219a:	4293      	cmp	r3, r2
 800219c:	4192      	sbcs	r2, r2
 800219e:	445c      	add	r4, fp
 80021a0:	4252      	negs	r2, r2
 80021a2:	18a5      	adds	r5, r4, r2
 80021a4:	022a      	lsls	r2, r5, #8
 80021a6:	d500      	bpl.n	80021aa <__aeabi_dsub+0x702>
 80021a8:	e724      	b.n	8001ff4 <__aeabi_dsub+0x54c>
 80021aa:	076f      	lsls	r7, r5, #29
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	431f      	orrs	r7, r3
 80021b0:	08ed      	lsrs	r5, r5, #3
 80021b2:	2301      	movs	r3, #1
 80021b4:	e6d0      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	000007ff 	.word	0x000007ff
 80021bc:	000007fe 	.word	0x000007fe
 80021c0:	ff7fffff 	.word	0xff7fffff
 80021c4:	465b      	mov	r3, fp
 80021c6:	08d2      	lsrs	r2, r2, #3
 80021c8:	075f      	lsls	r7, r3, #29
 80021ca:	4666      	mov	r6, ip
 80021cc:	4317      	orrs	r7, r2
 80021ce:	08dd      	lsrs	r5, r3, #3
 80021d0:	e566      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 80021d2:	0025      	movs	r5, r4
 80021d4:	3b20      	subs	r3, #32
 80021d6:	40dd      	lsrs	r5, r3
 80021d8:	4663      	mov	r3, ip
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d005      	beq.n	80021ea <__aeabi_dsub+0x742>
 80021de:	2340      	movs	r3, #64	@ 0x40
 80021e0:	4661      	mov	r1, ip
 80021e2:	1a5b      	subs	r3, r3, r1
 80021e4:	409c      	lsls	r4, r3
 80021e6:	4320      	orrs	r0, r4
 80021e8:	4680      	mov	r8, r0
 80021ea:	4647      	mov	r7, r8
 80021ec:	1e7b      	subs	r3, r7, #1
 80021ee:	419f      	sbcs	r7, r3
 80021f0:	432f      	orrs	r7, r5
 80021f2:	e5a0      	b.n	8001d36 <__aeabi_dsub+0x28e>
 80021f4:	2120      	movs	r1, #32
 80021f6:	2700      	movs	r7, #0
 80021f8:	1a09      	subs	r1, r1, r0
 80021fa:	e4d2      	b.n	8001ba2 <__aeabi_dsub+0xfa>
 80021fc:	2f00      	cmp	r7, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dsub+0x75a>
 8002200:	e713      	b.n	800202a <__aeabi_dsub+0x582>
 8002202:	465c      	mov	r4, fp
 8002204:	0017      	movs	r7, r2
 8002206:	2500      	movs	r5, #0
 8002208:	e5f6      	b.n	8001df8 <__aeabi_dsub+0x350>
 800220a:	08d7      	lsrs	r7, r2, #3
 800220c:	0749      	lsls	r1, r1, #29
 800220e:	2302      	movs	r3, #2
 8002210:	430f      	orrs	r7, r1
 8002212:	092d      	lsrs	r5, r5, #4
 8002214:	e6a0      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 8002216:	0007      	movs	r7, r0
 8002218:	e542      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 800221a:	465b      	mov	r3, fp
 800221c:	2601      	movs	r6, #1
 800221e:	075f      	lsls	r7, r3, #29
 8002220:	08dd      	lsrs	r5, r3, #3
 8002222:	4663      	mov	r3, ip
 8002224:	08d2      	lsrs	r2, r2, #3
 8002226:	4317      	orrs	r7, r2
 8002228:	401e      	ands	r6, r3
 800222a:	e539      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 800222c:	465b      	mov	r3, fp
 800222e:	08d2      	lsrs	r2, r2, #3
 8002230:	075f      	lsls	r7, r3, #29
 8002232:	4317      	orrs	r7, r2
 8002234:	08dd      	lsrs	r5, r3, #3
 8002236:	e533      	b.n	8001ca0 <__aeabi_dsub+0x1f8>
 8002238:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <__aeabi_dsub+0x80c>)
 800223a:	08db      	lsrs	r3, r3, #3
 800223c:	4022      	ands	r2, r4
 800223e:	0757      	lsls	r7, r2, #29
 8002240:	0252      	lsls	r2, r2, #9
 8002242:	2501      	movs	r5, #1
 8002244:	431f      	orrs	r7, r3
 8002246:	0b14      	lsrs	r4, r2, #12
 8002248:	e5c2      	b.n	8001dd0 <__aeabi_dsub+0x328>
 800224a:	000e      	movs	r6, r1
 800224c:	2001      	movs	r0, #1
 800224e:	e65f      	b.n	8001f10 <__aeabi_dsub+0x468>
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <__aeabi_dsub+0x7c8>
 8002254:	464b      	mov	r3, r9
 8002256:	1b5b      	subs	r3, r3, r5
 8002258:	469c      	mov	ip, r3
 800225a:	2d00      	cmp	r5, #0
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x7b8>
 800225e:	e548      	b.n	8001cf2 <__aeabi_dsub+0x24a>
 8002260:	2701      	movs	r7, #1
 8002262:	2b38      	cmp	r3, #56	@ 0x38
 8002264:	dd00      	ble.n	8002268 <__aeabi_dsub+0x7c0>
 8002266:	e566      	b.n	8001d36 <__aeabi_dsub+0x28e>
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	041b      	lsls	r3, r3, #16
 800226c:	431c      	orrs	r4, r3
 800226e:	e550      	b.n	8001d12 <__aeabi_dsub+0x26a>
 8002270:	1c6b      	adds	r3, r5, #1
 8002272:	4d11      	ldr	r5, [pc, #68]	@ (80022b8 <__aeabi_dsub+0x810>)
 8002274:	422b      	tst	r3, r5
 8002276:	d000      	beq.n	800227a <__aeabi_dsub+0x7d2>
 8002278:	e673      	b.n	8001f62 <__aeabi_dsub+0x4ba>
 800227a:	4659      	mov	r1, fp
 800227c:	0023      	movs	r3, r4
 800227e:	4311      	orrs	r1, r2
 8002280:	468a      	mov	sl, r1
 8002282:	4303      	orrs	r3, r0
 8002284:	e600      	b.n	8001e88 <__aeabi_dsub+0x3e0>
 8002286:	0767      	lsls	r7, r4, #29
 8002288:	08c0      	lsrs	r0, r0, #3
 800228a:	2300      	movs	r3, #0
 800228c:	4307      	orrs	r7, r0
 800228e:	08e5      	lsrs	r5, r4, #3
 8002290:	e662      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 8002292:	0764      	lsls	r4, r4, #29
 8002294:	08ff      	lsrs	r7, r7, #3
 8002296:	4327      	orrs	r7, r4
 8002298:	0905      	lsrs	r5, r0, #4
 800229a:	e65d      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 800229c:	08d2      	lsrs	r2, r2, #3
 800229e:	0749      	lsls	r1, r1, #29
 80022a0:	4311      	orrs	r1, r2
 80022a2:	000f      	movs	r7, r1
 80022a4:	2302      	movs	r3, #2
 80022a6:	092d      	lsrs	r5, r5, #4
 80022a8:	e656      	b.n	8001f58 <__aeabi_dsub+0x4b0>
 80022aa:	0007      	movs	r7, r0
 80022ac:	e5a4      	b.n	8001df8 <__aeabi_dsub+0x350>
 80022ae:	0038      	movs	r0, r7
 80022b0:	e48f      	b.n	8001bd2 <__aeabi_dsub+0x12a>
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	ff7fffff 	.word	0xff7fffff
 80022b8:	000007fe 	.word	0x000007fe

080022bc <__aeabi_dcmpun>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	46c6      	mov	lr, r8
 80022c0:	031e      	lsls	r6, r3, #12
 80022c2:	0b36      	lsrs	r6, r6, #12
 80022c4:	46b0      	mov	r8, r6
 80022c6:	4e0d      	ldr	r6, [pc, #52]	@ (80022fc <__aeabi_dcmpun+0x40>)
 80022c8:	030c      	lsls	r4, r1, #12
 80022ca:	004d      	lsls	r5, r1, #1
 80022cc:	005f      	lsls	r7, r3, #1
 80022ce:	b500      	push	{lr}
 80022d0:	0b24      	lsrs	r4, r4, #12
 80022d2:	0d6d      	lsrs	r5, r5, #21
 80022d4:	0d7f      	lsrs	r7, r7, #21
 80022d6:	42b5      	cmp	r5, r6
 80022d8:	d00b      	beq.n	80022f2 <__aeabi_dcmpun+0x36>
 80022da:	4908      	ldr	r1, [pc, #32]	@ (80022fc <__aeabi_dcmpun+0x40>)
 80022dc:	2000      	movs	r0, #0
 80022de:	428f      	cmp	r7, r1
 80022e0:	d104      	bne.n	80022ec <__aeabi_dcmpun+0x30>
 80022e2:	4646      	mov	r6, r8
 80022e4:	4316      	orrs	r6, r2
 80022e6:	0030      	movs	r0, r6
 80022e8:	1e43      	subs	r3, r0, #1
 80022ea:	4198      	sbcs	r0, r3
 80022ec:	bc80      	pop	{r7}
 80022ee:	46b8      	mov	r8, r7
 80022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f2:	4304      	orrs	r4, r0
 80022f4:	2001      	movs	r0, #1
 80022f6:	2c00      	cmp	r4, #0
 80022f8:	d1f8      	bne.n	80022ec <__aeabi_dcmpun+0x30>
 80022fa:	e7ee      	b.n	80022da <__aeabi_dcmpun+0x1e>
 80022fc:	000007ff 	.word	0x000007ff

08002300 <__aeabi_d2iz>:
 8002300:	000b      	movs	r3, r1
 8002302:	0002      	movs	r2, r0
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	4d16      	ldr	r5, [pc, #88]	@ (8002360 <__aeabi_d2iz+0x60>)
 8002308:	030c      	lsls	r4, r1, #12
 800230a:	b082      	sub	sp, #8
 800230c:	0049      	lsls	r1, r1, #1
 800230e:	2000      	movs	r0, #0
 8002310:	9200      	str	r2, [sp, #0]
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	0b24      	lsrs	r4, r4, #12
 8002316:	0d49      	lsrs	r1, r1, #21
 8002318:	0fde      	lsrs	r6, r3, #31
 800231a:	42a9      	cmp	r1, r5
 800231c:	dd04      	ble.n	8002328 <__aeabi_d2iz+0x28>
 800231e:	4811      	ldr	r0, [pc, #68]	@ (8002364 <__aeabi_d2iz+0x64>)
 8002320:	4281      	cmp	r1, r0
 8002322:	dd03      	ble.n	800232c <__aeabi_d2iz+0x2c>
 8002324:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <__aeabi_d2iz+0x68>)
 8002326:	18f0      	adds	r0, r6, r3
 8002328:	b002      	add	sp, #8
 800232a:	bd70      	pop	{r4, r5, r6, pc}
 800232c:	2080      	movs	r0, #128	@ 0x80
 800232e:	0340      	lsls	r0, r0, #13
 8002330:	4320      	orrs	r0, r4
 8002332:	4c0e      	ldr	r4, [pc, #56]	@ (800236c <__aeabi_d2iz+0x6c>)
 8002334:	1a64      	subs	r4, r4, r1
 8002336:	2c1f      	cmp	r4, #31
 8002338:	dd08      	ble.n	800234c <__aeabi_d2iz+0x4c>
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <__aeabi_d2iz+0x70>)
 800233c:	1a5b      	subs	r3, r3, r1
 800233e:	40d8      	lsrs	r0, r3
 8002340:	0003      	movs	r3, r0
 8002342:	4258      	negs	r0, r3
 8002344:	2e00      	cmp	r6, #0
 8002346:	d1ef      	bne.n	8002328 <__aeabi_d2iz+0x28>
 8002348:	0018      	movs	r0, r3
 800234a:	e7ed      	b.n	8002328 <__aeabi_d2iz+0x28>
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <__aeabi_d2iz+0x74>)
 800234e:	9a00      	ldr	r2, [sp, #0]
 8002350:	469c      	mov	ip, r3
 8002352:	0003      	movs	r3, r0
 8002354:	4461      	add	r1, ip
 8002356:	408b      	lsls	r3, r1
 8002358:	40e2      	lsrs	r2, r4
 800235a:	4313      	orrs	r3, r2
 800235c:	e7f1      	b.n	8002342 <__aeabi_d2iz+0x42>
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	000003fe 	.word	0x000003fe
 8002364:	0000041d 	.word	0x0000041d
 8002368:	7fffffff 	.word	0x7fffffff
 800236c:	00000433 	.word	0x00000433
 8002370:	00000413 	.word	0x00000413
 8002374:	fffffbed 	.word	0xfffffbed

08002378 <__aeabi_i2d>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	2800      	cmp	r0, #0
 800237c:	d016      	beq.n	80023ac <__aeabi_i2d+0x34>
 800237e:	17c3      	asrs	r3, r0, #31
 8002380:	18c5      	adds	r5, r0, r3
 8002382:	405d      	eors	r5, r3
 8002384:	0fc4      	lsrs	r4, r0, #31
 8002386:	0028      	movs	r0, r5
 8002388:	f000 f848 	bl	800241c <__clzsi2>
 800238c:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <__aeabi_i2d+0x58>)
 800238e:	1a1b      	subs	r3, r3, r0
 8002390:	055b      	lsls	r3, r3, #21
 8002392:	0d5b      	lsrs	r3, r3, #21
 8002394:	280a      	cmp	r0, #10
 8002396:	dc14      	bgt.n	80023c2 <__aeabi_i2d+0x4a>
 8002398:	0002      	movs	r2, r0
 800239a:	002e      	movs	r6, r5
 800239c:	3215      	adds	r2, #21
 800239e:	4096      	lsls	r6, r2
 80023a0:	220b      	movs	r2, #11
 80023a2:	1a12      	subs	r2, r2, r0
 80023a4:	40d5      	lsrs	r5, r2
 80023a6:	032d      	lsls	r5, r5, #12
 80023a8:	0b2d      	lsrs	r5, r5, #12
 80023aa:	e003      	b.n	80023b4 <__aeabi_i2d+0x3c>
 80023ac:	2400      	movs	r4, #0
 80023ae:	2300      	movs	r3, #0
 80023b0:	2500      	movs	r5, #0
 80023b2:	2600      	movs	r6, #0
 80023b4:	051b      	lsls	r3, r3, #20
 80023b6:	432b      	orrs	r3, r5
 80023b8:	07e4      	lsls	r4, r4, #31
 80023ba:	4323      	orrs	r3, r4
 80023bc:	0030      	movs	r0, r6
 80023be:	0019      	movs	r1, r3
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	380b      	subs	r0, #11
 80023c4:	4085      	lsls	r5, r0
 80023c6:	032d      	lsls	r5, r5, #12
 80023c8:	2600      	movs	r6, #0
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	e7f2      	b.n	80023b4 <__aeabi_i2d+0x3c>
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	0000041e 	.word	0x0000041e

080023d4 <__aeabi_ui2d>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	1e04      	subs	r4, r0, #0
 80023d8:	d010      	beq.n	80023fc <__aeabi_ui2d+0x28>
 80023da:	f000 f81f 	bl	800241c <__clzsi2>
 80023de:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <__aeabi_ui2d+0x44>)
 80023e0:	1a1b      	subs	r3, r3, r0
 80023e2:	055b      	lsls	r3, r3, #21
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	280a      	cmp	r0, #10
 80023e8:	dc0f      	bgt.n	800240a <__aeabi_ui2d+0x36>
 80023ea:	220b      	movs	r2, #11
 80023ec:	0021      	movs	r1, r4
 80023ee:	1a12      	subs	r2, r2, r0
 80023f0:	40d1      	lsrs	r1, r2
 80023f2:	3015      	adds	r0, #21
 80023f4:	030a      	lsls	r2, r1, #12
 80023f6:	4084      	lsls	r4, r0
 80023f8:	0b12      	lsrs	r2, r2, #12
 80023fa:	e001      	b.n	8002400 <__aeabi_ui2d+0x2c>
 80023fc:	2300      	movs	r3, #0
 80023fe:	2200      	movs	r2, #0
 8002400:	051b      	lsls	r3, r3, #20
 8002402:	4313      	orrs	r3, r2
 8002404:	0020      	movs	r0, r4
 8002406:	0019      	movs	r1, r3
 8002408:	bd10      	pop	{r4, pc}
 800240a:	0022      	movs	r2, r4
 800240c:	380b      	subs	r0, #11
 800240e:	4082      	lsls	r2, r0
 8002410:	0312      	lsls	r2, r2, #12
 8002412:	2400      	movs	r4, #0
 8002414:	0b12      	lsrs	r2, r2, #12
 8002416:	e7f3      	b.n	8002400 <__aeabi_ui2d+0x2c>
 8002418:	0000041e 	.word	0x0000041e

0800241c <__clzsi2>:
 800241c:	211c      	movs	r1, #28
 800241e:	2301      	movs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	4298      	cmp	r0, r3
 8002424:	d301      	bcc.n	800242a <__clzsi2+0xe>
 8002426:	0c00      	lsrs	r0, r0, #16
 8002428:	3910      	subs	r1, #16
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	4298      	cmp	r0, r3
 800242e:	d301      	bcc.n	8002434 <__clzsi2+0x18>
 8002430:	0a00      	lsrs	r0, r0, #8
 8002432:	3908      	subs	r1, #8
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	4298      	cmp	r0, r3
 8002438:	d301      	bcc.n	800243e <__clzsi2+0x22>
 800243a:	0900      	lsrs	r0, r0, #4
 800243c:	3904      	subs	r1, #4
 800243e:	a202      	add	r2, pc, #8	@ (adr r2, 8002448 <__clzsi2+0x2c>)
 8002440:	5c10      	ldrb	r0, [r2, r0]
 8002442:	1840      	adds	r0, r0, r1
 8002444:	4770      	bx	lr
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	02020304 	.word	0x02020304
 800244c:	01010101 	.word	0x01010101
	...

08002458 <Termistor>:
static void MX_RTC_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
double Termistor(uint32_t analogValue)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
double temperature;
uint32_t adcval = 4096 - analogValue;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2280      	movs	r2, #128	@ 0x80
 8002464:	0152      	lsls	r2, r2, #5
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]

temperature = log((adcval * 10000) / (4095 - adcval));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4a2b      	ldr	r2, [pc, #172]	@ (800251c <Termistor+0xc4>)
 800246e:	435a      	muls	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	492b      	ldr	r1, [pc, #172]	@ (8002520 <Termistor+0xc8>)
 8002474:	1acb      	subs	r3, r1, r3
 8002476:	0019      	movs	r1, r3
 8002478:	0010      	movs	r0, r2
 800247a:	f7fd fe5d 	bl	8000138 <__udivsi3>
 800247e:	0003      	movs	r3, r0
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff ffa7 	bl	80023d4 <__aeabi_ui2d>
 8002486:	0002      	movs	r2, r0
 8002488:	000b      	movs	r3, r1
 800248a:	0010      	movs	r0, r2
 800248c:	0019      	movs	r1, r3
 800248e:	f006 fc5d 	bl	8008d4c <log>
 8002492:	0002      	movs	r2, r0
 8002494:	000b      	movs	r3, r1
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	60fb      	str	r3, [r7, #12]
temperature = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * temperature * temperature)) * temperature);
 800249a:	4a22      	ldr	r2, [pc, #136]	@ (8002524 <Termistor+0xcc>)
 800249c:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <Termistor+0xd0>)
 800249e:	68b8      	ldr	r0, [r7, #8]
 80024a0:	68f9      	ldr	r1, [r7, #12]
 80024a2:	f7ff f81b 	bl	80014dc <__aeabi_dmul>
 80024a6:	0002      	movs	r2, r0
 80024a8:	000b      	movs	r3, r1
 80024aa:	0010      	movs	r0, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f7ff f813 	bl	80014dc <__aeabi_dmul>
 80024b6:	0002      	movs	r2, r0
 80024b8:	000b      	movs	r3, r1
 80024ba:	0010      	movs	r0, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <Termistor+0xd4>)
 80024c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <Termistor+0xd8>)
 80024c2:	f7fe f80b 	bl	80004dc <__aeabi_dadd>
 80024c6:	0002      	movs	r2, r0
 80024c8:	000b      	movs	r3, r1
 80024ca:	0010      	movs	r0, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f7ff f803 	bl	80014dc <__aeabi_dmul>
 80024d6:	0002      	movs	r2, r0
 80024d8:	000b      	movs	r3, r1
 80024da:	0010      	movs	r0, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	4a15      	ldr	r2, [pc, #84]	@ (8002534 <Termistor+0xdc>)
 80024e0:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <Termistor+0xe0>)
 80024e2:	f7fd fffb 	bl	80004dc <__aeabi_dadd>
 80024e6:	0002      	movs	r2, r0
 80024e8:	000b      	movs	r3, r1
 80024ea:	2000      	movs	r0, #0
 80024ec:	4913      	ldr	r1, [pc, #76]	@ (800253c <Termistor+0xe4>)
 80024ee:	f7fe fbbb 	bl	8000c68 <__aeabi_ddiv>
 80024f2:	0002      	movs	r2, r0
 80024f4:	000b      	movs	r3, r1
 80024f6:	60ba      	str	r2, [r7, #8]
 80024f8:	60fb      	str	r3, [r7, #12]
temperature = temperature - 273.15;
 80024fa:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <Termistor+0xe8>)
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <Termistor+0xec>)
 80024fe:	68b8      	ldr	r0, [r7, #8]
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	f7ff fad1 	bl	8001aa8 <__aeabi_dsub>
 8002506:	0002      	movs	r2, r0
 8002508:	000b      	movs	r3, r1
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	60fb      	str	r3, [r7, #12]
return temperature;
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	0010      	movs	r0, r2
 8002514:	0019      	movs	r1, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b006      	add	sp, #24
 800251a:	bd80      	pop	{r7, pc}
 800251c:	00002710 	.word	0x00002710
 8002520:	00000fff 	.word	0x00000fff
 8002524:	14170d19 	.word	0x14170d19
 8002528:	3e7788eb 	.word	0x3e7788eb
 800252c:	6fb4c3c2 	.word	0x6fb4c3c2
 8002530:	3f2eafee 	.word	0x3f2eafee
 8002534:	6edeb890 	.word	0x6edeb890
 8002538:	3f527ffd 	.word	0x3f527ffd
 800253c:	3ff00000 	.word	0x3ff00000
 8002540:	66666666 	.word	0x66666666
 8002544:	40711266 	.word	0x40711266

08002548 <R_map_value>:

uint16_t R_map_value(uint16_t adc_value) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	0002      	movs	r2, r0
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	801a      	strh	r2, [r3, #0]
	uint16_t resistor;
	resistor = (adc_value * 10000) / 4095;
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	4a08      	ldr	r2, [pc, #32]	@ (800257c <R_map_value+0x34>)
 800255a:	4353      	muls	r3, r2
 800255c:	4908      	ldr	r1, [pc, #32]	@ (8002580 <R_map_value+0x38>)
 800255e:	0018      	movs	r0, r3
 8002560:	f7fd fe74 	bl	800024c <__divsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	210e      	movs	r1, #14
 800256a:	187b      	adds	r3, r7, r1
 800256c:	801a      	strh	r2, [r3, #0]
    return resistor;
 800256e:	187b      	adds	r3, r7, r1
 8002570:	881b      	ldrh	r3, [r3, #0]
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b004      	add	sp, #16
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	00002710 	.word	0x00002710
 8002580:	00000fff 	.word	0x00000fff

08002584 <map_to_percentage>:

uint16_t map_to_percentage(uint16_t adc_value) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	0002      	movs	r2, r0
 800258c:	1dbb      	adds	r3, r7, #6
 800258e:	801a      	strh	r2, [r3, #0]
    return (adc_value * 100) / 4095;
 8002590:	1dbb      	adds	r3, r7, #6
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	2264      	movs	r2, #100	@ 0x64
 8002596:	4353      	muls	r3, r2
 8002598:	4904      	ldr	r1, [pc, #16]	@ (80025ac <map_to_percentage+0x28>)
 800259a:	0018      	movs	r0, r3
 800259c:	f7fd fe56 	bl	800024c <__divsi3>
 80025a0:	0003      	movs	r3, r0
 80025a2:	b29b      	uxth	r3, r3
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	00000fff 	.word	0x00000fff

080025b0 <HAL_ADC_ConvCpltCallback>:
//__attribute__((section(".adcarray"))) uint16_t ADC_VAL[4];  // cortex M7 only
int isADCFinished = 0;
int count = 0;
char buffer[200];  // Yeterince büyük bir buffer ayır
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	isADCFinished = 1;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x18>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	20000380 	.word	0x20000380

080025cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025cc:	b5b0      	push	{r4, r5, r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d2:	f000 fcd7 	bl	8002f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d6:	f000 f887 	bl	80026e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025da:	f000 fa05 	bl	80029e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80025de:	f000 f9e5 	bl	80029ac <MX_DMA_Init>
  MX_RTC_Init();
 80025e2:	f000 f981 	bl	80028e8 <MX_RTC_Init>
  MX_ADC1_Init();
 80025e6:	f000 f8dd 	bl	80027a4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80025ea:	f000 f9ab 	bl	8002944 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  void ADC_System_Init(void);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_VAL, 4);
 80025ee:	4933      	ldr	r1, [pc, #204]	@ (80026bc <main+0xf0>)
 80025f0:	4b33      	ldr	r3, [pc, #204]	@ (80026c0 <main+0xf4>)
 80025f2:	2204      	movs	r2, #4
 80025f4:	0018      	movs	r0, r3
 80025f6:	f001 f85f 	bl	80036b8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  count++;
 80025fa:	4b32      	ldr	r3, [pc, #200]	@ (80026c4 <main+0xf8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	4b30      	ldr	r3, [pc, #192]	@ (80026c4 <main+0xf8>)
 8002602:	601a      	str	r2, [r3, #0]
	     HAL_Delay(500);
 8002604:	23fa      	movs	r3, #250	@ 0xfa
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	0018      	movs	r0, r3
 800260a:	f000 fd41 	bl	8003090 <HAL_Delay>

	     if (isADCFinished == 1)
 800260e:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <main+0xfc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <main+0x5c>
	     {
	 	  //process data
	 	  isADCFinished = 0;
 8002616:	4b2c      	ldr	r3, [pc, #176]	@ (80026c8 <main+0xfc>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
	 	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_VAL, 4);
 800261c:	4927      	ldr	r1, [pc, #156]	@ (80026bc <main+0xf0>)
 800261e:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <main+0xf4>)
 8002620:	2204      	movs	r2, #4
 8002622:	0018      	movs	r0, r3
 8002624:	f001 f848 	bl	80036b8 <HAL_ADC_Start_DMA>
	     }

	     Trimpot1_Resistance_Value = R_map_value(ADC_VAL[0]);
 8002628:	4b24      	ldr	r3, [pc, #144]	@ (80026bc <main+0xf0>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff ff8b 	bl	8002548 <R_map_value>
 8002632:	0003      	movs	r3, r0
 8002634:	001a      	movs	r2, r3
 8002636:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <main+0x100>)
 8002638:	801a      	strh	r2, [r3, #0]
	     Trimpot2_Resistance_Value = R_map_value(ADC_VAL[1]);
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <main+0xf0>)
 800263c:	885b      	ldrh	r3, [r3, #2]
 800263e:	0018      	movs	r0, r3
 8002640:	f7ff ff82 	bl	8002548 <R_map_value>
 8002644:	0003      	movs	r3, r0
 8002646:	001a      	movs	r2, r3
 8002648:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <main+0x104>)
 800264a:	801a      	strh	r2, [r3, #0]
	     Temperature = Termistor(ADC_VAL[2]);
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <main+0xf0>)
 800264e:	889b      	ldrh	r3, [r3, #4]
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff ff01 	bl	8002458 <Termistor>
 8002656:	0002      	movs	r2, r0
 8002658:	000b      	movs	r3, r1
 800265a:	0010      	movs	r0, r2
 800265c:	0019      	movs	r1, r3
 800265e:	f7fd ff1f 	bl	80004a0 <__aeabi_d2uiz>
 8002662:	0003      	movs	r3, r0
 8002664:	b29a      	uxth	r2, r3
 8002666:	4b1b      	ldr	r3, [pc, #108]	@ (80026d4 <main+0x108>)
 8002668:	801a      	strh	r2, [r3, #0]
	     Light_Percentage = map_to_percentage(ADC_VAL[3]);
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <main+0xf0>)
 800266c:	88db      	ldrh	r3, [r3, #6]
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff ff88 	bl	8002584 <map_to_percentage>
 8002674:	0003      	movs	r3, r0
 8002676:	001a      	movs	r2, r3
 8002678:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <main+0x10c>)
 800267a:	801a      	strh	r2, [r3, #0]

	     // Verileri alt alta gelecek şekilde formatla
	        sprintf(buffer,
 800267c:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <main+0x100>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	001c      	movs	r4, r3
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <main+0x104>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	001d      	movs	r5, r3
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <main+0x108>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	001a      	movs	r2, r3
 800268e:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <main+0x10c>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	4912      	ldr	r1, [pc, #72]	@ (80026dc <main+0x110>)
 8002694:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <main+0x114>)
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	9200      	str	r2, [sp, #0]
 800269a:	002b      	movs	r3, r5
 800269c:	0022      	movs	r2, r4
 800269e:	f004 f989 	bl	80069b4 <siprintf>
	                Trimpot1_Resistance_Value,
	                Trimpot2_Resistance_Value,
	                Temperature,
	                Light_Percentage);

	        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80026a2:	4b0f      	ldr	r3, [pc, #60]	@ (80026e0 <main+0x114>)
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7fd fd2b 	bl	8000100 <strlen>
 80026aa:	0003      	movs	r3, r0
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	425b      	negs	r3, r3
 80026b2:	490b      	ldr	r1, [pc, #44]	@ (80026e0 <main+0x114>)
 80026b4:	480b      	ldr	r0, [pc, #44]	@ (80026e4 <main+0x118>)
 80026b6:	f003 f817 	bl	80056e8 <HAL_UART_Transmit>
	  count++;
 80026ba:	e79e      	b.n	80025fa <main+0x2e>
 80026bc:	20000370 	.word	0x20000370
 80026c0:	200001f0 	.word	0x200001f0
 80026c4:	20000384 	.word	0x20000384
 80026c8:	20000380 	.word	0x20000380
 80026cc:	20000378 	.word	0x20000378
 80026d0:	2000037a 	.word	0x2000037a
 80026d4:	2000037c 	.word	0x2000037c
 80026d8:	2000037e 	.word	0x2000037e
 80026dc:	08009140 	.word	0x08009140
 80026e0:	20000388 	.word	0x20000388
 80026e4:	200002dc 	.word	0x200002dc

080026e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b093      	sub	sp, #76	@ 0x4c
 80026ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ee:	2414      	movs	r4, #20
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	0018      	movs	r0, r3
 80026f4:	2334      	movs	r3, #52	@ 0x34
 80026f6:	001a      	movs	r2, r3
 80026f8:	2100      	movs	r1, #0
 80026fa:	f004 f9c9 	bl	8006a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	0018      	movs	r0, r3
 8002702:	2310      	movs	r3, #16
 8002704:	001a      	movs	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	f004 f9c2 	bl	8006a90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	0018      	movs	r0, r3
 8002712:	f002 f819 	bl	8004748 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002716:	193b      	adds	r3, r7, r4
 8002718:	220a      	movs	r2, #10
 800271a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800271c:	193b      	adds	r3, r7, r4
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	0052      	lsls	r2, r2, #1
 8002722:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002724:	0021      	movs	r1, r4
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2240      	movs	r2, #64	@ 0x40
 8002730:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2201      	movs	r2, #1
 8002736:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2202      	movs	r2, #2
 800273c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2202      	movs	r2, #2
 8002742:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002744:	187b      	adds	r3, r7, r1
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2208      	movs	r2, #8
 800274e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	0292      	lsls	r2, r2, #10
 8002756:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002758:	187b      	adds	r3, r7, r1
 800275a:	2280      	movs	r2, #128	@ 0x80
 800275c:	0592      	lsls	r2, r2, #22
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002760:	187b      	adds	r3, r7, r1
 8002762:	0018      	movs	r0, r3
 8002764:	f002 f83c 	bl	80047e0 <HAL_RCC_OscConfig>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800276c:	f000 f9d0 	bl	8002b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2207      	movs	r2, #7
 8002774:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2202      	movs	r2, #2
 800277a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2102      	movs	r1, #2
 800278c:	0018      	movs	r0, r3
 800278e:	f002 fb37 	bl	8004e00 <HAL_RCC_ClockConfig>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002796:	f000 f9bb 	bl	8002b10 <Error_Handler>
  }
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b013      	add	sp, #76	@ 0x4c
 80027a0:	bd90      	pop	{r4, r7, pc}
	...

080027a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	0018      	movs	r0, r3
 80027ae:	230c      	movs	r3, #12
 80027b0:	001a      	movs	r2, r3
 80027b2:	2100      	movs	r1, #0
 80027b4:	f004 f96c 	bl	8006a90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027b8:	4b46      	ldr	r3, [pc, #280]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027ba:	4a47      	ldr	r2, [pc, #284]	@ (80028d8 <MX_ADC1_Init+0x134>)
 80027bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027be:	4b45      	ldr	r3, [pc, #276]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027c0:	2280      	movs	r2, #128	@ 0x80
 80027c2:	0612      	lsls	r2, r2, #24
 80027c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027c6:	4b43      	ldr	r3, [pc, #268]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027cc:	4b41      	ldr	r3, [pc, #260]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027d2:	4b40      	ldr	r3, [pc, #256]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	0392      	lsls	r2, r2, #14
 80027d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027da:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027dc:	2204      	movs	r2, #4
 80027de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027e0:	4b3c      	ldr	r3, [pc, #240]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80027e6:	4b3b      	ldr	r3, [pc, #236]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027ec:	4b39      	ldr	r3, [pc, #228]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80027f2:	4b38      	ldr	r3, [pc, #224]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027f4:	2204      	movs	r2, #4
 80027f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027f8:	4b36      	ldr	r3, [pc, #216]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80027fa:	2220      	movs	r2, #32
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002800:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <MX_ADC1_Init+0x130>)
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002806:	4b33      	ldr	r3, [pc, #204]	@ (80028d4 <MX_ADC1_Init+0x130>)
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800280c:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <MX_ADC1_Init+0x130>)
 800280e:	222c      	movs	r2, #44	@ 0x2c
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002814:	4b2f      	ldr	r3, [pc, #188]	@ (80028d4 <MX_ADC1_Init+0x130>)
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800281a:	4b2e      	ldr	r3, [pc, #184]	@ (80028d4 <MX_ADC1_Init+0x130>)
 800281c:	2206      	movs	r2, #6
 800281e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002820:	4b2c      	ldr	r3, [pc, #176]	@ (80028d4 <MX_ADC1_Init+0x130>)
 8002822:	2206      	movs	r2, #6
 8002824:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002826:	4b2b      	ldr	r3, [pc, #172]	@ (80028d4 <MX_ADC1_Init+0x130>)
 8002828:	223c      	movs	r2, #60	@ 0x3c
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800282e:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <MX_ADC1_Init+0x130>)
 8002830:	2200      	movs	r2, #0
 8002832:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002834:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <MX_ADC1_Init+0x130>)
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fd96 	bl	8003368 <HAL_ADC_Init>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002840:	f000 f966 	bl	8002b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2200      	movs	r2, #0
 800284e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002856:	1d3a      	adds	r2, r7, #4
 8002858:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <MX_ADC1_Init+0x130>)
 800285a:	0011      	movs	r1, r2
 800285c:	0018      	movs	r0, r3
 800285e:	f000 ffc9 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d001      	beq.n	800286a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002866:	f000 f953 	bl	8002b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	4a1b      	ldr	r2, [pc, #108]	@ (80028dc <MX_ADC1_Init+0x138>)
 800286e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2204      	movs	r2, #4
 8002874:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002876:	1d3a      	adds	r2, r7, #4
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <MX_ADC1_Init+0x130>)
 800287a:	0011      	movs	r1, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f000 ffb9 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002886:	f000 f943 	bl	8002b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <MX_ADC1_Init+0x13c>)
 800288e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2208      	movs	r2, #8
 8002894:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002896:	1d3a      	adds	r2, r7, #4
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <MX_ADC1_Init+0x130>)
 800289a:	0011      	movs	r1, r2
 800289c:	0018      	movs	r0, r3
 800289e:	f000 ffa9 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d001      	beq.n	80028aa <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80028a6:	f000 f933 	bl	8002b10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <MX_ADC1_Init+0x140>)
 80028ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	220c      	movs	r2, #12
 80028b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b6:	1d3a      	adds	r2, r7, #4
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <MX_ADC1_Init+0x130>)
 80028ba:	0011      	movs	r1, r2
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 ff99 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d001      	beq.n	80028ca <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80028c6:	f000 f923 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	200001f0 	.word	0x200001f0
 80028d8:	40012400 	.word	0x40012400
 80028dc:	04000002 	.word	0x04000002
 80028e0:	10000010 	.word	0x10000010
 80028e4:	14000020 	.word	0x14000020

080028e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <MX_RTC_Init+0x54>)
 80028ee:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <MX_RTC_Init+0x58>)
 80028f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <MX_RTC_Init+0x54>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80028f8:	4b10      	ldr	r3, [pc, #64]	@ (800293c <MX_RTC_Init+0x54>)
 80028fa:	227f      	movs	r2, #127	@ 0x7f
 80028fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <MX_RTC_Init+0x54>)
 8002900:	22ff      	movs	r2, #255	@ 0xff
 8002902:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002904:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <MX_RTC_Init+0x54>)
 8002906:	2200      	movs	r2, #0
 8002908:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <MX_RTC_Init+0x54>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002910:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <MX_RTC_Init+0x54>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <MX_RTC_Init+0x54>)
 8002918:	2280      	movs	r2, #128	@ 0x80
 800291a:	05d2      	lsls	r2, r2, #23
 800291c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800291e:	4b07      	ldr	r3, [pc, #28]	@ (800293c <MX_RTC_Init+0x54>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <MX_RTC_Init+0x54>)
 8002926:	0018      	movs	r0, r3
 8002928:	f002 fd3a 	bl	80053a0 <HAL_RTC_Init>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	d001      	beq.n	8002934 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8002930:	f000 f8ee 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002934:	46c0      	nop			@ (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	200002b0 	.word	0x200002b0
 8002940:	40002800 	.word	0x40002800

08002944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 800294a:	4a17      	ldr	r2, [pc, #92]	@ (80029a8 <MX_USART2_UART_Init+0x64>)
 800294c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 8002950:	22e1      	movs	r2, #225	@ 0xe1
 8002952:	0252      	lsls	r2, r2, #9
 8002954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 8002982:	2200      	movs	r2, #0
 8002984:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002986:	4b07      	ldr	r3, [pc, #28]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 8002988:	2200      	movs	r2, #0
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <MX_USART2_UART_Init+0x60>)
 800298e:	0018      	movs	r0, r3
 8002990:	f002 fe54 	bl	800563c <HAL_UART_Init>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002998:	f000 f8ba 	bl	8002b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800299c:	46c0      	nop			@ (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	200002dc 	.word	0x200002dc
 80029a8:	40004400 	.word	0x40004400

080029ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <MX_DMA_Init+0x38>)
 80029b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029b6:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <MX_DMA_Init+0x38>)
 80029b8:	2101      	movs	r1, #1
 80029ba:	430a      	orrs	r2, r1
 80029bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <MX_DMA_Init+0x38>)
 80029c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c2:	2201      	movs	r2, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2009      	movs	r0, #9
 80029d0:	f001 faa8 	bl	8003f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029d4:	2009      	movs	r0, #9
 80029d6:	f001 faba 	bl	8003f4e <HAL_NVIC_EnableIRQ>

}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000

080029e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b08b      	sub	sp, #44	@ 0x2c
 80029ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	2414      	movs	r4, #20
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	0018      	movs	r0, r3
 80029f4:	2314      	movs	r3, #20
 80029f6:	001a      	movs	r2, r3
 80029f8:	2100      	movs	r1, #0
 80029fa:	f004 f849 	bl	8006a90 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a02:	4b3e      	ldr	r3, [pc, #248]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a04:	2120      	movs	r1, #32
 8002a06:	430a      	orrs	r2, r1
 8002a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0e:	2220      	movs	r2, #32
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b39      	ldr	r3, [pc, #228]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a1a:	4b38      	ldr	r3, [pc, #224]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a22:	4b36      	ldr	r3, [pc, #216]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a26:	2201      	movs	r2, #1
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	4b33      	ldr	r3, [pc, #204]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a32:	4b32      	ldr	r3, [pc, #200]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a34:	2102      	movs	r1, #2
 8002a36:	430a      	orrs	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a3a:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a46:	4b2d      	ldr	r3, [pc, #180]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a4c:	2108      	movs	r1, #8
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a52:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <MX_GPIO_Init+0x114>)
 8002a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a56:	2208      	movs	r2, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin, GPIO_PIN_RESET);
 8002a5e:	4928      	ldr	r1, [pc, #160]	@ (8002b00 <MX_GPIO_Init+0x118>)
 8002a60:	23a0      	movs	r3, #160	@ 0xa0
 8002a62:	05db      	lsls	r3, r3, #23
 8002a64:	2200      	movs	r2, #0
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 fe50 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RGB_B_Pin, GPIO_PIN_RESET);
 8002a6c:	4925      	ldr	r1, [pc, #148]	@ (8002b04 <MX_GPIO_Init+0x11c>)
 8002a6e:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <MX_GPIO_Init+0x120>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f001 fe4a 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin, GPIO_PIN_RESET);
 8002a78:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <MX_GPIO_Init+0x124>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f001 fe44 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGB_R_Pin RGB_G_Pin LED1_RED_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin|RGB_G_Pin|LED1_RED_Pin;
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	4a1e      	ldr	r2, [pc, #120]	@ (8002b00 <MX_GPIO_Init+0x118>)
 8002a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	193a      	adds	r2, r7, r4
 8002a9e:	23a0      	movs	r3, #160	@ 0xa0
 8002aa0:	05db      	lsls	r3, r3, #23
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f001 fccd 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RGB_B_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RGB_B_Pin;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	4a15      	ldr	r2, [pc, #84]	@ (8002b04 <MX_GPIO_Init+0x11c>)
 8002aae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <MX_GPIO_Init+0x120>)
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f001 fcbb 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_GREEN_Pin LED3_BLUE_Pin LED4_WHITE_Pin LED5_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin|LED3_BLUE_Pin|LED4_WHITE_Pin|LED5_YELLOW_Pin;
 8002ace:	0021      	movs	r1, r4
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2201      	movs	r2, #1
 8002ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	4a08      	ldr	r2, [pc, #32]	@ (8002b0c <MX_GPIO_Init+0x124>)
 8002aec:	0019      	movs	r1, r3
 8002aee:	0010      	movs	r0, r2
 8002af0:	f001 fca8 	bl	8004444 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b00b      	add	sp, #44	@ 0x2c
 8002afa:	bd90      	pop	{r4, r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	00008140 	.word	0x00008140
 8002b04:	00001008 	.word	0x00001008
 8002b08:	50000400 	.word	0x50000400
 8002b0c:	50000c00 	.word	0x50000c00

08002b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b14:	b672      	cpsid	i
}
 8002b16:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	e7fd      	b.n	8002b18 <Error_Handler+0x8>

08002b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b40:	2180      	movs	r1, #128	@ 0x80
 8002b42:	0549      	lsls	r1, r1, #21
 8002b44:	430a      	orrs	r2, r1
 8002b46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_MspInit+0x44>)
 8002b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	4013      	ands	r3, r2
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b08b      	sub	sp, #44	@ 0x2c
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	2414      	movs	r4, #20
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	0018      	movs	r0, r3
 8002b72:	2314      	movs	r3, #20
 8002b74:	001a      	movs	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f003 ff8a 	bl	8006a90 <memset>
  if(hadc->Instance==ADC1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2d      	ldr	r2, [pc, #180]	@ (8002c38 <HAL_ADC_MspInit+0xd4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d154      	bne.n	8002c30 <HAL_ADC_MspInit+0xcc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b86:	4b2d      	ldr	r3, [pc, #180]	@ (8002c3c <HAL_ADC_MspInit+0xd8>)
 8002b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c3c <HAL_ADC_MspInit+0xd8>)
 8002b8c:	2180      	movs	r1, #128	@ 0x80
 8002b8e:	0349      	lsls	r1, r1, #13
 8002b90:	430a      	orrs	r2, r1
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b94:	4b29      	ldr	r3, [pc, #164]	@ (8002c3c <HAL_ADC_MspInit+0xd8>)
 8002b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	035b      	lsls	r3, r3, #13
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b26      	ldr	r3, [pc, #152]	@ (8002c3c <HAL_ADC_MspInit+0xd8>)
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba6:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_ADC_MspInit+0xd8>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bae:	4b23      	ldr	r3, [pc, #140]	@ (8002c3c <HAL_ADC_MspInit+0xd8>)
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = A1_IN0_TRIMPOT1_Pin|A1_IN0_TRIMPOT2_Pin|A1_IN4_NTC_Pin|A1_IN4_LDR_Pin;
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	2233      	movs	r2, #51	@ 0x33
 8002bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	193a      	adds	r2, r7, r4
 8002bce:	23a0      	movs	r3, #160	@ 0xa0
 8002bd0:	05db      	lsls	r3, r3, #23
 8002bd2:	0011      	movs	r1, r2
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f001 fc35 	bl	8004444 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002bda:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002bdc:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_ADC_MspInit+0xe0>)
 8002bde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002be0:	4b17      	ldr	r3, [pc, #92]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002be2:	2205      	movs	r2, #5
 8002be4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002bfa:	2280      	movs	r2, #128	@ 0x80
 8002bfc:	0052      	lsls	r2, r2, #1
 8002bfe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002c02:	2280      	movs	r2, #128	@ 0x80
 8002c04:	00d2      	lsls	r2, r2, #3
 8002c06:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c08:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c14:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f001 f9c2 	bl	8003fa0 <HAL_DMA_Init>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002c20:	f7ff ff76 	bl	8002b10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a06      	ldr	r2, [pc, #24]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002c28:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_ADC_MspInit+0xdc>)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c30:	46c0      	nop			@ (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b00b      	add	sp, #44	@ 0x2c
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	40012400 	.word	0x40012400
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	20000254 	.word	0x20000254
 8002c44:	40020008 	.word	0x40020008

08002c48 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b08b      	sub	sp, #44	@ 0x2c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c50:	2410      	movs	r4, #16
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	0018      	movs	r0, r3
 8002c56:	2318      	movs	r3, #24
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f003 ff18 	bl	8006a90 <memset>
  if(hrtc->Instance==RTC)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a15      	ldr	r2, [pc, #84]	@ (8002cbc <HAL_RTC_MspInit+0x74>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d124      	bne.n	8002cb4 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c6a:	193b      	adds	r3, r7, r4
 8002c6c:	2280      	movs	r2, #128	@ 0x80
 8002c6e:	0292      	lsls	r2, r2, #10
 8002c70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	0092      	lsls	r2, r2, #2
 8002c78:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f002 fa69 	bl	8005154 <HAL_RCCEx_PeriphCLKConfig>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002c86:	f7ff ff43 	bl	8002b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <HAL_RTC_MspInit+0x78>)
 8002c8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <HAL_RTC_MspInit+0x78>)
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	0209      	lsls	r1, r1, #8
 8002c94:	430a      	orrs	r2, r1
 8002c96:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RTC_MspInit+0x78>)
 8002c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <HAL_RTC_MspInit+0x78>)
 8002c9e:	2180      	movs	r1, #128	@ 0x80
 8002ca0:	00c9      	lsls	r1, r1, #3
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ca6:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RTC_MspInit+0x78>)
 8002ca8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b00b      	add	sp, #44	@ 0x2c
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	40002800 	.word	0x40002800
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b08b      	sub	sp, #44	@ 0x2c
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	2414      	movs	r4, #20
 8002cce:	193b      	adds	r3, r7, r4
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	2314      	movs	r3, #20
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f003 feda 	bl	8006a90 <memset>
  if(huart->Instance==USART2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d50 <HAL_UART_MspInit+0x8c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d130      	bne.n	8002d48 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_UART_MspInit+0x90>)
 8002ce8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_UART_MspInit+0x90>)
 8002cec:	2180      	movs	r1, #128	@ 0x80
 8002cee:	0289      	lsls	r1, r1, #10
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_UART_MspInit+0x90>)
 8002cf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cf8:	2380      	movs	r3, #128	@ 0x80
 8002cfa:	029b      	lsls	r3, r3, #10
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <HAL_UART_MspInit+0x90>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d06:	4b13      	ldr	r3, [pc, #76]	@ (8002d54 <HAL_UART_MspInit+0x90>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d0e:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_UART_MspInit+0x90>)
 8002d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d12:	2201      	movs	r2, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d1a:	0021      	movs	r1, r4
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2202      	movs	r2, #2
 8002d26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2201      	movs	r2, #1
 8002d38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	187a      	adds	r2, r7, r1
 8002d3c:	23a0      	movs	r3, #160	@ 0xa0
 8002d3e:	05db      	lsls	r3, r3, #23
 8002d40:	0011      	movs	r1, r2
 8002d42:	0018      	movs	r0, r3
 8002d44:	f001 fb7e 	bl	8004444 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d48:	46c0      	nop			@ (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b00b      	add	sp, #44	@ 0x2c
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40021000 	.word	0x40021000

08002d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d5c:	46c0      	nop			@ (mov r8, r8)
 8002d5e:	e7fd      	b.n	8002d5c <NMI_Handler+0x4>

08002d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d64:	46c0      	nop			@ (mov r8, r8)
 8002d66:	e7fd      	b.n	8002d64 <HardFault_Handler+0x4>

08002d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d80:	f000 f96a 	bl	8003058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002d84:	f001 f900 	bl	8003f88 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d94:	4b03      	ldr	r3, [pc, #12]	@ (8002da4 <DMA1_Channel1_IRQHandler+0x14>)
 8002d96:	0018      	movs	r0, r3
 8002d98:	f001 fa12 	bl	80041c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	20000254 	.word	0x20000254

08002da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  return 1;
 8002dac:	2301      	movs	r3, #1
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <_kill>:

int _kill(int pid, int sig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dbe:	f003 fec1 	bl	8006b44 <__errno>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	2216      	movs	r2, #22
 8002dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	425b      	negs	r3, r3
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_exit>:

void _exit (int status)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ddc:	2301      	movs	r3, #1
 8002dde:	425a      	negs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0011      	movs	r1, r2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff ffe5 	bl	8002db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	e7fd      	b.n	8002dea <_exit+0x16>

08002dee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e00a      	b.n	8002e16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e00:	e000      	b.n	8002e04 <_read+0x16>
 8002e02:	bf00      	nop
 8002e04:	0001      	movs	r1, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	b2ca      	uxtb	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	dbf0      	blt.n	8002e00 <_read+0x12>
  }

  return len;
 8002e1e:	687b      	ldr	r3, [r7, #4]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e009      	b.n	8002e4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	60ba      	str	r2, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	e000      	b.n	8002e48 <_write+0x20>
 8002e46:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbf1      	blt.n	8002e3a <_write+0x12>
  }
  return len;
 8002e56:	687b      	ldr	r3, [r7, #4]
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b006      	add	sp, #24
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_close>:

int _close(int file)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	425b      	negs	r3, r3
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2280      	movs	r2, #128	@ 0x80
 8002e82:	0192      	lsls	r2, r2, #6
 8002e84:	605a      	str	r2, [r3, #4]
  return 0;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_isatty>:

int _isatty(int file)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e98:	2301      	movs	r3, #1
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b004      	add	sp, #16
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec0:	4a14      	ldr	r2, [pc, #80]	@ (8002f14 <_sbrk+0x5c>)
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <_sbrk+0x60>)
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ecc:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <_sbrk+0x64>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <_sbrk+0x64>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <_sbrk+0x68>)
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <_sbrk+0x64>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	18d3      	adds	r3, r2, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d207      	bcs.n	8002ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee8:	f003 fe2c 	bl	8006b44 <__errno>
 8002eec:	0003      	movs	r3, r0
 8002eee:	220c      	movs	r2, #12
 8002ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	e009      	b.n	8002f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef8:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <_sbrk+0x64>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efe:	4b07      	ldr	r3, [pc, #28]	@ (8002f1c <_sbrk+0x64>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	18d2      	adds	r2, r2, r3
 8002f06:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <_sbrk+0x64>)
 8002f08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b006      	add	sp, #24
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20002000 	.word	0x20002000
 8002f18:	00000400 	.word	0x00000400
 8002f1c:	20000450 	.word	0x20000450
 8002f20:	200005a8 	.word	0x200005a8

08002f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f30:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f34:	f7ff fff6 	bl	8002f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f38:	480c      	ldr	r0, [pc, #48]	@ (8002f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f3a:	490d      	ldr	r1, [pc, #52]	@ (8002f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f74 <LoopForever+0xe>)
  movs r3, #0
 8002f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f40:	e002      	b.n	8002f48 <LoopCopyDataInit>

08002f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f46:	3304      	adds	r3, #4

08002f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f4c:	d3f9      	bcc.n	8002f42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f50:	4c0a      	ldr	r4, [pc, #40]	@ (8002f7c <LoopForever+0x16>)
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f54:	e001      	b.n	8002f5a <LoopFillZerobss>

08002f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f58:	3204      	adds	r2, #4

08002f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f5c:	d3fb      	bcc.n	8002f56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f5e:	f003 fdf7 	bl	8006b50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f62:	f7ff fb33 	bl	80025cc <main>

08002f66 <LoopForever>:

LoopForever:
  b LoopForever
 8002f66:	e7fe      	b.n	8002f66 <LoopForever>
  ldr   r0, =_estack
 8002f68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f70:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002f74:	080095d4 	.word	0x080095d4
  ldr r2, =_sbss
 8002f78:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002f7c:	200005a4 	.word	0x200005a4

08002f80 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f80:	e7fe      	b.n	8002f80 <ADC1_IRQHandler>
	...

08002f84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_Init+0x3c>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <HAL_Init+0x3c>)
 8002f96:	2180      	movs	r1, #128	@ 0x80
 8002f98:	0049      	lsls	r1, r1, #1
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f9e:	2003      	movs	r0, #3
 8002fa0:	f000 f810 	bl	8002fc4 <HAL_InitTick>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e001      	b.n	8002fb4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7ff fdb4 	bl	8002b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	781b      	ldrb	r3, [r3, #0]
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fcc:	230f      	movs	r3, #15
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HAL_InitTick+0x88>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02b      	beq.n	8003034 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <HAL_InitTick+0x8c>)
 8002fde:	681c      	ldr	r4, [r3, #0]
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <HAL_InitTick+0x88>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	23fa      	movs	r3, #250	@ 0xfa
 8002fe8:	0098      	lsls	r0, r3, #2
 8002fea:	f7fd f8a5 	bl	8000138 <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	0020      	movs	r0, r4
 8002ff4:	f7fd f8a0 	bl	8000138 <__udivsi3>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 ffb7 	bl	8003f6e <HAL_SYSTICK_Config>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d112      	bne.n	800302a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d80a      	bhi.n	8003020 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	2301      	movs	r3, #1
 800300e:	425b      	negs	r3, r3
 8003010:	2200      	movs	r2, #0
 8003012:	0018      	movs	r0, r3
 8003014:	f000 ff86 	bl	8003f24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003018:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_InitTick+0x90>)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e00d      	b.n	800303c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003020:	230f      	movs	r3, #15
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e008      	b.n	800303c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800302a:	230f      	movs	r3, #15
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e003      	b.n	800303c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003034:	230f      	movs	r3, #15
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800303c:	230f      	movs	r3, #15
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	781b      	ldrb	r3, [r3, #0]
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b005      	add	sp, #20
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	20000008 	.word	0x20000008
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800305c:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_IncTick+0x1c>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	001a      	movs	r2, r3
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_IncTick+0x20>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	18d2      	adds	r2, r2, r3
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <HAL_IncTick+0x20>)
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	20000008 	.word	0x20000008
 8003078:	20000454 	.word	0x20000454

0800307c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  return uwTick;
 8003080:	4b02      	ldr	r3, [pc, #8]	@ (800308c <HAL_GetTick+0x10>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	20000454 	.word	0x20000454

08003090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff fff0 	bl	800307c <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	d005      	beq.n	80030b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030aa:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <HAL_Delay+0x44>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	001a      	movs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	f7ff ffe0 	bl	800307c <HAL_GetTick>
 80030bc:	0002      	movs	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d8f7      	bhi.n	80030b8 <HAL_Delay+0x28>
  {
  }
}
 80030c8:	46c0      	nop			@ (mov r8, r8)
 80030ca:	46c0      	nop			@ (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	20000008 	.word	0x20000008

080030d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80030e8:	401a      	ands	r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	fe3fffff 	.word	0xfe3fffff

08003100 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	23e0      	movs	r3, #224	@ 0xe0
 800310e:	045b      	lsls	r3, r3, #17
 8003110:	4013      	ands	r3, r2
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}

0800311a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	2104      	movs	r1, #4
 800312e:	400a      	ands	r2, r1
 8003130:	2107      	movs	r1, #7
 8003132:	4091      	lsls	r1, r2
 8003134:	000a      	movs	r2, r1
 8003136:	43d2      	mvns	r2, r2
 8003138:	401a      	ands	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2104      	movs	r1, #4
 800313e:	400b      	ands	r3, r1
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4099      	lsls	r1, r3
 8003144:	000b      	movs	r3, r1
 8003146:	431a      	orrs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800314c:	46c0      	nop			@ (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bd80      	pop	{r7, pc}

08003154 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	2104      	movs	r1, #4
 8003166:	400a      	ands	r2, r1
 8003168:	2107      	movs	r1, #7
 800316a:	4091      	lsls	r1, r2
 800316c:	000a      	movs	r2, r1
 800316e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2104      	movs	r1, #4
 8003174:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003176:	40da      	lsrs	r2, r3
 8003178:	0013      	movs	r3, r2
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b002      	add	sp, #8
 8003180:	bd80      	pop	{r7, pc}

08003182 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	23c0      	movs	r3, #192	@ 0xc0
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4013      	ands	r3, r2
 8003194:	d101      	bne.n	800319a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800319a:	2300      	movs	r3, #0
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	211f      	movs	r1, #31
 80031b8:	400a      	ands	r2, r1
 80031ba:	210f      	movs	r1, #15
 80031bc:	4091      	lsls	r1, r2
 80031be:	000a      	movs	r2, r1
 80031c0:	43d2      	mvns	r2, r2
 80031c2:	401a      	ands	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	210f      	movs	r1, #15
 80031ca:	4019      	ands	r1, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	201f      	movs	r0, #31
 80031d0:	4003      	ands	r3, r0
 80031d2:	4099      	lsls	r1, r3
 80031d4:	000b      	movs	r3, r1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	035b      	lsls	r3, r3, #13
 80031f6:	0b5b      	lsrs	r3, r3, #13
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}

08003206 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	0352      	lsls	r2, r2, #13
 8003218:	0b52      	lsrs	r2, r2, #13
 800321a:	43d2      	mvns	r2, r2
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	0212      	lsls	r2, r2, #8
 8003240:	43d2      	mvns	r2, r2
 8003242:	401a      	ands	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	400b      	ands	r3, r1
 800324c:	4904      	ldr	r1, [pc, #16]	@ (8003260 <LL_ADC_SetChannelSamplingTime+0x34>)
 800324e:	400b      	ands	r3, r1
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b004      	add	sp, #16
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			@ (mov r8, r8)
 8003260:	07ffff00 	.word	0x07ffff00

08003264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a05      	ldr	r2, [pc, #20]	@ (8003288 <LL_ADC_EnableInternalRegulator+0x24>)
 8003272:	4013      	ands	r3, r2
 8003274:	2280      	movs	r2, #128	@ 0x80
 8003276:	0552      	lsls	r2, r2, #21
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	6fffffe8 	.word	0x6fffffe8

0800328c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	401a      	ands	r2, r3
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	055b      	lsls	r3, r3, #21
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a04      	ldr	r2, [pc, #16]	@ (80032d4 <LL_ADC_Enable+0x20>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	2201      	movs	r2, #1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	7fffffe8 	.word	0x7fffffe8

080032d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <LL_ADC_Disable+0x20>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	2202      	movs	r2, #2
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	7fffffe8 	.word	0x7fffffe8

080032fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <LL_ADC_IsEnabled+0x18>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <LL_ADC_IsEnabled+0x1a>
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <LL_ADC_REG_StartConversion+0x20>)
 800332e:	4013      	ands	r3, r2
 8003330:	2204      	movs	r2, #4
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003338:	46c0      	nop			@ (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	7fffffe8 	.word	0x7fffffe8

08003344 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2204      	movs	r2, #4
 8003352:	4013      	ands	r3, r2
 8003354:	2b04      	cmp	r3, #4
 8003356:	d101      	bne.n	800335c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b002      	add	sp, #8
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003370:	231f      	movs	r3, #31
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e17f      	b.n	800368e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f7ff fbe3 	bl	8002b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2254      	movs	r2, #84	@ 0x54
 80033a8:	2100      	movs	r1, #0
 80033aa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff ff6b 	bl	800328c <LL_ADC_IsInternalRegulatorEnabled>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d115      	bne.n	80033e6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff ff50 	bl	8003264 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c4:	4bb4      	ldr	r3, [pc, #720]	@ (8003698 <HAL_ADC_Init+0x330>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	49b4      	ldr	r1, [pc, #720]	@ (800369c <HAL_ADC_Init+0x334>)
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7fc feb4 	bl	8000138 <__udivsi3>
 80033d0:	0003      	movs	r3, r0
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033d8:	e002      	b.n	80033e0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3b01      	subs	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f9      	bne.n	80033da <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7ff ff4e 	bl	800328c <LL_ADC_IsInternalRegulatorEnabled>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d10f      	bne.n	8003414 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	2210      	movs	r2, #16
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	2201      	movs	r2, #1
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800340c:	231f      	movs	r3, #31
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff ff93 	bl	8003344 <LL_ADC_REG_IsConversionOngoing>
 800341e:	0003      	movs	r3, r0
 8003420:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	2210      	movs	r2, #16
 8003428:	4013      	ands	r3, r2
 800342a:	d000      	beq.n	800342e <HAL_ADC_Init+0xc6>
 800342c:	e122      	b.n	8003674 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d000      	beq.n	8003436 <HAL_ADC_Init+0xce>
 8003434:	e11e      	b.n	8003674 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	4a99      	ldr	r2, [pc, #612]	@ (80036a0 <HAL_ADC_Init+0x338>)
 800343c:	4013      	ands	r3, r2
 800343e:	2202      	movs	r2, #2
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff ff56 	bl	80032fc <LL_ADC_IsEnabled>
 8003450:	1e03      	subs	r3, r0, #0
 8003452:	d000      	beq.n	8003456 <HAL_ADC_Init+0xee>
 8003454:	e0ad      	b.n	80035b2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	7e1b      	ldrb	r3, [r3, #24]
 800345e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003460:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7e5b      	ldrb	r3, [r3, #25]
 8003466:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003468:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7e9b      	ldrb	r3, [r3, #26]
 800346e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003470:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_ADC_Init+0x118>
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	015b      	lsls	r3, r3, #5
 800347e:	e000      	b.n	8003482 <HAL_ADC_Init+0x11a>
 8003480:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003482:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003488:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	da04      	bge.n	800349c <HAL_ADC_Init+0x134>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	e001      	b.n	80034a0 <HAL_ADC_Init+0x138>
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80034a0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	212c      	movs	r1, #44	@ 0x2c
 80034a6:	5c5b      	ldrb	r3, [r3, r1]
 80034a8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034aa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d115      	bne.n	80034e8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e9b      	ldrb	r3, [r3, #26]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0252      	lsls	r2, r2, #9
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e00b      	b.n	80034e8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	2220      	movs	r2, #32
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	2201      	movs	r2, #1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034f4:	23e0      	movs	r3, #224	@ 0xe0
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034fe:	4313      	orrs	r3, r2
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a65      	ldr	r2, [pc, #404]	@ (80036a4 <HAL_ADC_Init+0x33c>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	0f9b      	lsrs	r3, r3, #30
 8003522:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003528:	4313      	orrs	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	223c      	movs	r2, #60	@ 0x3c
 8003534:	5c9b      	ldrb	r3, [r3, r2]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d111      	bne.n	800355e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0f9b      	lsrs	r3, r3, #30
 8003540:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003546:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800354c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003552:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	2201      	movs	r2, #1
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4a50      	ldr	r2, [pc, #320]	@ (80036a8 <HAL_ADC_Init+0x340>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	430a      	orrs	r2, r1
 8003572:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	23c0      	movs	r3, #192	@ 0xc0
 800357a:	061b      	lsls	r3, r3, #24
 800357c:	429a      	cmp	r2, r3
 800357e:	d018      	beq.n	80035b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	05db      	lsls	r3, r3, #23
 8003588:	429a      	cmp	r2, r3
 800358a:	d012      	beq.n	80035b2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	429a      	cmp	r2, r3
 8003596:	d00c      	beq.n	80035b2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003598:	4b44      	ldr	r3, [pc, #272]	@ (80036ac <HAL_ADC_Init+0x344>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a44      	ldr	r2, [pc, #272]	@ (80036b0 <HAL_ADC_Init+0x348>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	23f0      	movs	r3, #240	@ 0xf0
 80035a8:	039b      	lsls	r3, r3, #14
 80035aa:	401a      	ands	r2, r3
 80035ac:	4b3f      	ldr	r3, [pc, #252]	@ (80036ac <HAL_ADC_Init+0x344>)
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ba:	001a      	movs	r2, r3
 80035bc:	2100      	movs	r1, #0
 80035be:	f7ff fdac 	bl	800311a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ca:	493a      	ldr	r1, [pc, #232]	@ (80036b4 <HAL_ADC_Init+0x34c>)
 80035cc:	001a      	movs	r2, r3
 80035ce:	f7ff fda4 	bl	800311a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2110      	movs	r1, #16
 80035e6:	4249      	negs	r1, r1
 80035e8:	430a      	orrs	r2, r1
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80035ec:	e018      	b.n	8003620 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	039b      	lsls	r3, r3, #14
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d112      	bne.n	8003620 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	3b01      	subs	r3, #1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	221c      	movs	r2, #28
 800360a:	4013      	ands	r3, r2
 800360c:	2210      	movs	r2, #16
 800360e:	4252      	negs	r2, r2
 8003610:	409a      	lsls	r2, r3
 8003612:	0011      	movs	r1, r2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fd94 	bl	8003154 <LL_ADC_GetSamplingTimeCommonChannels>
 800362c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003632:	429a      	cmp	r2, r3
 8003634:	d10b      	bne.n	800364e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	2203      	movs	r2, #3
 8003642:	4393      	bics	r3, r2
 8003644:	2201      	movs	r2, #1
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800364c:	e01c      	b.n	8003688 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003652:	2212      	movs	r2, #18
 8003654:	4393      	bics	r3, r2
 8003656:	2210      	movs	r2, #16
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	2201      	movs	r2, #1
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800366a:	231f      	movs	r3, #31
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003672:	e009      	b.n	8003688 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	2210      	movs	r2, #16
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003680:	231f      	movs	r3, #31
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003688:	231f      	movs	r3, #31
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	781b      	ldrb	r3, [r3, #0]
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b008      	add	sp, #32
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	20000000 	.word	0x20000000
 800369c:	00030d40 	.word	0x00030d40
 80036a0:	fffffefd 	.word	0xfffffefd
 80036a4:	ffde0201 	.word	0xffde0201
 80036a8:	1ffffc02 	.word	0x1ffffc02
 80036ac:	40012708 	.word	0x40012708
 80036b0:	ffc3ffff 	.word	0xffc3ffff
 80036b4:	07ffff04 	.word	0x07ffff04

080036b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80036b8:	b5b0      	push	{r4, r5, r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff fe3b 	bl	8003344 <LL_ADC_REG_IsConversionOngoing>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d16c      	bne.n	80037ac <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2254      	movs	r2, #84	@ 0x54
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_Start_DMA+0x28>
 80036dc:	2302      	movs	r3, #2
 80036de:	e06c      	b.n	80037ba <HAL_ADC_Start_DMA+0x102>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2254      	movs	r2, #84	@ 0x54
 80036e4:	2101      	movs	r1, #1
 80036e6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	d113      	bne.n	800371c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff fdff 	bl	80032fc <LL_ADC_IsEnabled>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d004      	beq.n	800370c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0018      	movs	r0, r3
 8003708:	f7ff fde6 	bl	80032d8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	430a      	orrs	r2, r1
 800371a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800371c:	2517      	movs	r5, #23
 800371e:	197c      	adds	r4, r7, r5
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	0018      	movs	r0, r3
 8003724:	f000 fa3e 	bl	8003ba4 <ADC_Enable>
 8003728:	0003      	movs	r3, r0
 800372a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800372c:	002c      	movs	r4, r5
 800372e:	193b      	adds	r3, r7, r4
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d13e      	bne.n	80037b4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	4a22      	ldr	r2, [pc, #136]	@ (80037c4 <HAL_ADC_Start_DMA+0x10c>)
 800373c:	4013      	ands	r3, r2
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	0052      	lsls	r2, r2, #1
 8003742:	431a      	orrs	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003752:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <HAL_ADC_Start_DMA+0x110>)
 8003754:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375a:	4a1c      	ldr	r2, [pc, #112]	@ (80037cc <HAL_ADC_Start_DMA+0x114>)
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003762:	4a1b      	ldr	r2, [pc, #108]	@ (80037d0 <HAL_ADC_Start_DMA+0x118>)
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	221c      	movs	r2, #28
 800376c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2254      	movs	r2, #84	@ 0x54
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2110      	movs	r1, #16
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3340      	adds	r3, #64	@ 0x40
 8003790:	0019      	movs	r1, r3
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	193c      	adds	r4, r7, r4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f000 fc8c 	bl	80040b4 <HAL_DMA_Start_IT>
 800379c:	0003      	movs	r3, r0
 800379e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fdbb 	bl	8003320 <LL_ADC_REG_StartConversion>
 80037aa:	e003      	b.n	80037b4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037ac:	2317      	movs	r3, #23
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2202      	movs	r2, #2
 80037b2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80037b4:	2317      	movs	r3, #23
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	781b      	ldrb	r3, [r3, #0]
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b006      	add	sp, #24
 80037c0:	bdb0      	pop	{r4, r5, r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	fffff0fe 	.word	0xfffff0fe
 80037c8:	08003cb1 	.word	0x08003cb1
 80037cc:	08003d79 	.word	0x08003d79
 80037d0:	08003d97 	.word	0x08003d97

080037d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037dc:	46c0      	nop			@ (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037fe:	2317      	movs	r3, #23
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2254      	movs	r2, #84	@ 0x54
 800380e:	5c9b      	ldrb	r3, [r3, r2]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x24>
 8003814:	2302      	movs	r3, #2
 8003816:	e1c0      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x3a6>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2254      	movs	r2, #84	@ 0x54
 800381c:	2101      	movs	r1, #1
 800381e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	0018      	movs	r0, r3
 8003826:	f7ff fd8d 	bl	8003344 <LL_ADC_REG_IsConversionOngoing>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d000      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x3c>
 800382e:	e1a3      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d100      	bne.n	800383a <HAL_ADC_ConfigChannel+0x46>
 8003838:	e143      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	429a      	cmp	r2, r3
 8003844:	d004      	beq.n	8003850 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800384a:	4ac1      	ldr	r2, [pc, #772]	@ (8003b50 <HAL_ADC_ConfigChannel+0x35c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d108      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0019      	movs	r1, r3
 800385a:	0010      	movs	r0, r2
 800385c:	f7ff fcc2 	bl	80031e4 <LL_ADC_REG_SetSequencerChAdd>
 8003860:	e0c9      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	211f      	movs	r1, #31
 800386c:	400b      	ands	r3, r1
 800386e:	210f      	movs	r1, #15
 8003870:	4099      	lsls	r1, r3
 8003872:	000b      	movs	r3, r1
 8003874:	43db      	mvns	r3, r3
 8003876:	4013      	ands	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	035b      	lsls	r3, r3, #13
 8003880:	0b5b      	lsrs	r3, r3, #13
 8003882:	d105      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x9c>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	221f      	movs	r2, #31
 800388c:	4013      	ands	r3, r2
 800388e:	e098      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d000      	beq.n	800389c <HAL_ADC_ConfigChannel+0xa8>
 800389a:	e091      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x1cc>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2202      	movs	r2, #2
 80038a2:	4013      	ands	r3, r2
 80038a4:	d000      	beq.n	80038a8 <HAL_ADC_ConfigChannel+0xb4>
 80038a6:	e089      	b.n	80039bc <HAL_ADC_ConfigChannel+0x1c8>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2204      	movs	r2, #4
 80038ae:	4013      	ands	r3, r2
 80038b0:	d000      	beq.n	80038b4 <HAL_ADC_ConfigChannel+0xc0>
 80038b2:	e081      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x1c4>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2208      	movs	r2, #8
 80038ba:	4013      	ands	r3, r2
 80038bc:	d000      	beq.n	80038c0 <HAL_ADC_ConfigChannel+0xcc>
 80038be:	e079      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x1c0>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4013      	ands	r3, r2
 80038c8:	d000      	beq.n	80038cc <HAL_ADC_ConfigChannel+0xd8>
 80038ca:	e071      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x1bc>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	d000      	beq.n	80038d8 <HAL_ADC_ConfigChannel+0xe4>
 80038d6:	e069      	b.n	80039ac <HAL_ADC_ConfigChannel+0x1b8>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2240      	movs	r2, #64	@ 0x40
 80038de:	4013      	ands	r3, r2
 80038e0:	d000      	beq.n	80038e4 <HAL_ADC_ConfigChannel+0xf0>
 80038e2:	e061      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x1b4>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	4013      	ands	r3, r2
 80038ec:	d000      	beq.n	80038f0 <HAL_ADC_ConfigChannel+0xfc>
 80038ee:	e059      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1b0>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2380      	movs	r3, #128	@ 0x80
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	d151      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x1ac>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	@ 0x80
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d149      	bne.n	800399c <HAL_ADC_ConfigChannel+0x1a8>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2380      	movs	r3, #128	@ 0x80
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4013      	ands	r3, r2
 8003912:	d141      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x1a4>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4013      	ands	r3, r2
 800391e:	d139      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x1a0>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	015b      	lsls	r3, r3, #5
 8003928:	4013      	ands	r3, r2
 800392a:	d131      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x19c>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2380      	movs	r3, #128	@ 0x80
 8003932:	019b      	lsls	r3, r3, #6
 8003934:	4013      	ands	r3, r2
 8003936:	d129      	bne.n	800398c <HAL_ADC_ConfigChannel+0x198>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	4013      	ands	r3, r2
 8003942:	d121      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x194>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2380      	movs	r3, #128	@ 0x80
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	4013      	ands	r3, r2
 800394e:	d119      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x190>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	025b      	lsls	r3, r3, #9
 8003958:	4013      	ands	r3, r2
 800395a:	d111      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x18c>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	2380      	movs	r3, #128	@ 0x80
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	4013      	ands	r3, r2
 8003966:	d109      	bne.n	800397c <HAL_ADC_ConfigChannel+0x188>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2380      	movs	r3, #128	@ 0x80
 800396e:	02db      	lsls	r3, r3, #11
 8003970:	4013      	ands	r3, r2
 8003972:	d001      	beq.n	8003978 <HAL_ADC_ConfigChannel+0x184>
 8003974:	2312      	movs	r3, #18
 8003976:	e024      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003978:	2300      	movs	r3, #0
 800397a:	e022      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 800397c:	2311      	movs	r3, #17
 800397e:	e020      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003980:	2310      	movs	r3, #16
 8003982:	e01e      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003984:	230f      	movs	r3, #15
 8003986:	e01c      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003988:	230e      	movs	r3, #14
 800398a:	e01a      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 800398c:	230d      	movs	r3, #13
 800398e:	e018      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003990:	230c      	movs	r3, #12
 8003992:	e016      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003994:	230b      	movs	r3, #11
 8003996:	e014      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 8003998:	230a      	movs	r3, #10
 800399a:	e012      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 800399c:	2309      	movs	r3, #9
 800399e:	e010      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a0:	2308      	movs	r3, #8
 80039a2:	e00e      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a4:	2307      	movs	r3, #7
 80039a6:	e00c      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a8:	2306      	movs	r3, #6
 80039aa:	e00a      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039ac:	2305      	movs	r3, #5
 80039ae:	e008      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b0:	2304      	movs	r3, #4
 80039b2:	e006      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b4:	2303      	movs	r3, #3
 80039b6:	e004      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e002      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x1ce>
 80039c0:	2300      	movs	r3, #0
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	6852      	ldr	r2, [r2, #4]
 80039c6:	201f      	movs	r0, #31
 80039c8:	4002      	ands	r2, r0
 80039ca:	4093      	lsls	r3, r2
 80039cc:	000a      	movs	r2, r1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d808      	bhi.n	80039f6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	001a      	movs	r2, r3
 80039f2:	f7ff fbd7 	bl	80031a4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	001a      	movs	r2, r3
 8003a04:	f7ff fc12 	bl	800322c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db00      	blt.n	8003a12 <HAL_ADC_ConfigChannel+0x21e>
 8003a10:	e0bc      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a12:	4b50      	ldr	r3, [pc, #320]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7ff fb73 	bl	8003100 <LL_ADC_GetCommonPathInternalCh>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a4d      	ldr	r2, [pc, #308]	@ (8003b58 <HAL_ADC_ConfigChannel+0x364>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d122      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a30:	d11d      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2280      	movs	r2, #128	@ 0x80
 8003a36:	0412      	lsls	r2, r2, #16
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	4a46      	ldr	r2, [pc, #280]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	0010      	movs	r0, r2
 8003a40:	f7ff fb4a 	bl	80030d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a44:	4b45      	ldr	r3, [pc, #276]	@ (8003b5c <HAL_ADC_ConfigChannel+0x368>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4945      	ldr	r1, [pc, #276]	@ (8003b60 <HAL_ADC_ConfigChannel+0x36c>)
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fc fb74 	bl	8000138 <__udivsi3>
 8003a50:	0003      	movs	r3, r0
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	0013      	movs	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	189b      	adds	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a5e:	e002      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f9      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a6c:	e08e      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3c      	ldr	r2, [pc, #240]	@ (8003b64 <HAL_ADC_ConfigChannel+0x370>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d10e      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	045b      	lsls	r3, r3, #17
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d109      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2280      	movs	r2, #128	@ 0x80
 8003a86:	0452      	lsls	r2, r2, #17
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	4a32      	ldr	r2, [pc, #200]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	0010      	movs	r0, r2
 8003a90:	f7ff fb22 	bl	80030d8 <LL_ADC_SetCommonPathInternalCh>
 8003a94:	e07a      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a33      	ldr	r2, [pc, #204]	@ (8003b68 <HAL_ADC_ConfigChannel+0x374>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d000      	beq.n	8003aa2 <HAL_ADC_ConfigChannel+0x2ae>
 8003aa0:	e074      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	03db      	lsls	r3, r3, #15
 8003aa8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003aaa:	d000      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x2ba>
 8003aac:	e06e      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2280      	movs	r2, #128	@ 0x80
 8003ab2:	03d2      	lsls	r2, r2, #15
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003ab8:	0019      	movs	r1, r3
 8003aba:	0010      	movs	r0, r2
 8003abc:	f7ff fb0c 	bl	80030d8 <LL_ADC_SetCommonPathInternalCh>
 8003ac0:	e064      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8003b50 <HAL_ADC_ConfigChannel+0x35c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d107      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	0010      	movs	r0, r2
 8003ae4:	f7ff fb8f 	bl	8003206 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	da4d      	bge.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003af0:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff fb04 	bl	8003100 <LL_ADC_GetCommonPathInternalCh>
 8003af8:	0003      	movs	r3, r0
 8003afa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a15      	ldr	r2, [pc, #84]	@ (8003b58 <HAL_ADC_ConfigChannel+0x364>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <HAL_ADC_ConfigChannel+0x378>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	4a11      	ldr	r2, [pc, #68]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	0010      	movs	r0, r2
 8003b12:	f7ff fae1 	bl	80030d8 <LL_ADC_SetCommonPathInternalCh>
 8003b16:	e039      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a11      	ldr	r2, [pc, #68]	@ (8003b64 <HAL_ADC_ConfigChannel+0x370>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <HAL_ADC_ConfigChannel+0x37c>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	f7ff fad3 	bl	80030d8 <LL_ADC_SetCommonPathInternalCh>
 8003b32:	e02b      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <HAL_ADC_ConfigChannel+0x374>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d126      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4a0c      	ldr	r2, [pc, #48]	@ (8003b74 <HAL_ADC_ConfigChannel+0x380>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	4a03      	ldr	r2, [pc, #12]	@ (8003b54 <HAL_ADC_ConfigChannel+0x360>)
 8003b46:	0019      	movs	r1, r3
 8003b48:	0010      	movs	r0, r2
 8003b4a:	f7ff fac5 	bl	80030d8 <LL_ADC_SetCommonPathInternalCh>
 8003b4e:	e01d      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x398>
 8003b50:	80000004 	.word	0x80000004
 8003b54:	40012708 	.word	0x40012708
 8003b58:	b0001000 	.word	0xb0001000
 8003b5c:	20000000 	.word	0x20000000
 8003b60:	00030d40 	.word	0x00030d40
 8003b64:	b8004000 	.word	0xb8004000
 8003b68:	b4002000 	.word	0xb4002000
 8003b6c:	ff7fffff 	.word	0xff7fffff
 8003b70:	feffffff 	.word	0xfeffffff
 8003b74:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003b84:	2317      	movs	r3, #23
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2254      	movs	r2, #84	@ 0x54
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003b94:	2317      	movs	r3, #23
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	781b      	ldrb	r3, [r3, #0]
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b006      	add	sp, #24
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			@ (mov r8, r8)

08003ba4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff fba1 	bl	80032fc <LL_ADC_IsEnabled>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d000      	beq.n	8003bc0 <ADC_Enable+0x1c>
 8003bbe:	e069      	b.n	8003c94 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4a36      	ldr	r2, [pc, #216]	@ (8003ca0 <ADC_Enable+0xfc>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d00d      	beq.n	8003be8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	2201      	movs	r2, #1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e056      	b.n	8003c96 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff fb61 	bl	80032b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca4 <ADC_Enable+0x100>)
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff fa83 	bl	8003100 <LL_ADC_GetCommonPathInternalCh>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	4013      	ands	r3, r2
 8003c02:	d00f      	beq.n	8003c24 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c04:	4b28      	ldr	r3, [pc, #160]	@ (8003ca8 <ADC_Enable+0x104>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4928      	ldr	r1, [pc, #160]	@ (8003cac <ADC_Enable+0x108>)
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f7fc fa94 	bl	8000138 <__udivsi3>
 8003c10:	0003      	movs	r3, r0
 8003c12:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8003c14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c16:	e002      	b.n	8003c1e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f9      	bne.n	8003c18 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7e5b      	ldrb	r3, [r3, #25]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d033      	beq.n	8003c94 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003c2c:	f7ff fa26 	bl	800307c <HAL_GetTick>
 8003c30:	0003      	movs	r3, r0
 8003c32:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c34:	e027      	b.n	8003c86 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f7ff fb5e 	bl	80032fc <LL_ADC_IsEnabled>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d104      	bne.n	8003c4e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7ff fb33 	bl	80032b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c4e:	f7ff fa15 	bl	800307c <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d914      	bls.n	8003c86 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2201      	movs	r2, #1
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d00d      	beq.n	8003c86 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6e:	2210      	movs	r2, #16
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e007      	b.n	8003c96 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d1d0      	bne.n	8003c36 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b004      	add	sp, #16
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	80000017 	.word	0x80000017
 8003ca4:	40012708 	.word	0x40012708
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	00030d40 	.word	0x00030d40

08003cb0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	2250      	movs	r2, #80	@ 0x50
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d141      	bne.n	8003d4c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	2280      	movs	r2, #128	@ 0x80
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7ff fa51 	bl	8003182 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ce0:	1e03      	subs	r3, r0, #0
 8003ce2:	d02e      	beq.n	8003d42 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	7e9b      	ldrb	r3, [r3, #26]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d12a      	bne.n	8003d42 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d123      	bne.n	8003d42 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff fb20 	bl	8003344 <LL_ADC_REG_IsConversionOngoing>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d110      	bne.n	8003d2a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	210c      	movs	r1, #12
 8003d14:	438a      	bics	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1c:	4a15      	ldr	r2, [pc, #84]	@ (8003d74 <ADC_DMAConvCplt+0xc4>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2201      	movs	r2, #1
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d28:	e00b      	b.n	8003d42 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	2220      	movs	r2, #32
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7fe fc33 	bl	80025b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d4a:	e00f      	b.n	8003d6c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d50:	2210      	movs	r2, #16
 8003d52:	4013      	ands	r3, r2
 8003d54:	d004      	beq.n	8003d60 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff fd43 	bl	80037e4 <HAL_ADC_ErrorCallback>
}
 8003d5e:	e005      	b.n	8003d6c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	0010      	movs	r0, r2
 8003d6a:	4798      	blx	r3
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b004      	add	sp, #16
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	fffffefe 	.word	0xfffffefe

08003d78 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7ff fd23 	bl	80037d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	2240      	movs	r2, #64	@ 0x40
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db4:	2204      	movs	r2, #4
 8003db6:	431a      	orrs	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7ff fd10 	bl	80037e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	1dfb      	adds	r3, r7, #7
 8003dd6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dde:	d809      	bhi.n	8003df4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de0:	1dfb      	adds	r3, r7, #7
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	001a      	movs	r2, r3
 8003de6:	231f      	movs	r3, #31
 8003de8:	401a      	ands	r2, r3
 8003dea:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <__NVIC_EnableIRQ+0x30>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	4091      	lsls	r1, r2
 8003df0:	000a      	movs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	e000e100 	.word	0xe000e100

08003e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	0002      	movs	r2, r0
 8003e08:	6039      	str	r1, [r7, #0]
 8003e0a:	1dfb      	adds	r3, r7, #7
 8003e0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	1dfb      	adds	r3, r7, #7
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e14:	d828      	bhi.n	8003e68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e16:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed4 <__NVIC_SetPriority+0xd4>)
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	33c0      	adds	r3, #192	@ 0xc0
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	589b      	ldr	r3, [r3, r2]
 8003e26:	1dfa      	adds	r2, r7, #7
 8003e28:	7812      	ldrb	r2, [r2, #0]
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	400a      	ands	r2, r1
 8003e30:	00d2      	lsls	r2, r2, #3
 8003e32:	21ff      	movs	r1, #255	@ 0xff
 8003e34:	4091      	lsls	r1, r2
 8003e36:	000a      	movs	r2, r1
 8003e38:	43d2      	mvns	r2, r2
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	22ff      	movs	r2, #255	@ 0xff
 8003e44:	401a      	ands	r2, r3
 8003e46:	1dfb      	adds	r3, r7, #7
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	4003      	ands	r3, r0
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e54:	481f      	ldr	r0, [pc, #124]	@ (8003ed4 <__NVIC_SetPriority+0xd4>)
 8003e56:	1dfb      	adds	r3, r7, #7
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	089b      	lsrs	r3, r3, #2
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	33c0      	adds	r3, #192	@ 0xc0
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e66:	e031      	b.n	8003ecc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed8 <__NVIC_SetPriority+0xd8>)
 8003e6a:	1dfb      	adds	r3, r7, #7
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	0019      	movs	r1, r3
 8003e70:	230f      	movs	r3, #15
 8003e72:	400b      	ands	r3, r1
 8003e74:	3b08      	subs	r3, #8
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	3306      	adds	r3, #6
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	3304      	adds	r3, #4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	1dfa      	adds	r2, r7, #7
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	0011      	movs	r1, r2
 8003e88:	2203      	movs	r2, #3
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	00d2      	lsls	r2, r2, #3
 8003e8e:	21ff      	movs	r1, #255	@ 0xff
 8003e90:	4091      	lsls	r1, r2
 8003e92:	000a      	movs	r2, r1
 8003e94:	43d2      	mvns	r2, r2
 8003e96:	401a      	ands	r2, r3
 8003e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	22ff      	movs	r2, #255	@ 0xff
 8003ea0:	401a      	ands	r2, r3
 8003ea2:	1dfb      	adds	r3, r7, #7
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	4003      	ands	r3, r0
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eb0:	4809      	ldr	r0, [pc, #36]	@ (8003ed8 <__NVIC_SetPriority+0xd8>)
 8003eb2:	1dfb      	adds	r3, r7, #7
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	001c      	movs	r4, r3
 8003eb8:	230f      	movs	r3, #15
 8003eba:	4023      	ands	r3, r4
 8003ebc:	3b08      	subs	r3, #8
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	3306      	adds	r3, #6
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	18c3      	adds	r3, r0, r3
 8003ec8:	3304      	adds	r3, #4
 8003eca:	601a      	str	r2, [r3, #0]
}
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bd90      	pop	{r4, r7, pc}
 8003ed4:	e000e100 	.word	0xe000e100
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1e5a      	subs	r2, r3, #1
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	045b      	lsls	r3, r3, #17
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d301      	bcc.n	8003ef4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e010      	b.n	8003f16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <SysTick_Config+0x44>)
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	3a01      	subs	r2, #1
 8003efa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efc:	2301      	movs	r3, #1
 8003efe:	425b      	negs	r3, r3
 8003f00:	2103      	movs	r1, #3
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff ff7c 	bl	8003e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <SysTick_Config+0x44>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0e:	4b04      	ldr	r3, [pc, #16]	@ (8003f20 <SysTick_Config+0x44>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b002      	add	sp, #8
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	e000e010 	.word	0xe000e010

08003f24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	210f      	movs	r1, #15
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	1c02      	adds	r2, r0, #0
 8003f34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	0011      	movs	r1, r2
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff ff5d 	bl	8003e00 <__NVIC_SetPriority>
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b004      	add	sp, #16
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	0002      	movs	r2, r0
 8003f56:	1dfb      	adds	r3, r7, #7
 8003f58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	b25b      	sxtb	r3, r3
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7ff ff33 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b002      	add	sp, #8
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff ffaf 	bl	8003edc <SysTick_Config>
 8003f7e:	0003      	movs	r3, r0
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003f8c:	f000 f803 	bl	8003f96 <HAL_SYSTICK_Callback>
}
 8003f90:	46c0      	nop			@ (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e077      	b.n	80040a2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80040ac <HAL_DMA_Init+0x10c>)
 8003fb8:	4694      	mov	ip, r2
 8003fba:	4463      	add	r3, ip
 8003fbc:	2114      	movs	r1, #20
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7fc f8ba 	bl	8000138 <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2225      	movs	r2, #37	@ 0x25
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4934      	ldr	r1, [pc, #208]	@ (80040b0 <HAL_DMA_Init+0x110>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 f9c1 	bl	80043a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	2380      	movs	r3, #128	@ 0x80
 8004028:	01db      	lsls	r3, r3, #7
 800402a:	429a      	cmp	r2, r3
 800402c:	d102      	bne.n	8004034 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403c:	213f      	movs	r1, #63	@ 0x3f
 800403e:	400a      	ands	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800404a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d011      	beq.n	8004078 <HAL_DMA_Init+0xd8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d80d      	bhi.n	8004078 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f9cc 	bl	80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	e008      	b.n	800408a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2225      	movs	r2, #37	@ 0x25
 8004094:	2101      	movs	r1, #1
 8004096:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	0018      	movs	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b002      	add	sp, #8
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	bffdfff8 	.word	0xbffdfff8
 80040b0:	ffff800f 	.word	0xffff800f

080040b4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2317      	movs	r3, #23
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2224      	movs	r2, #36	@ 0x24
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Start_IT+0x24>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e06f      	b.n	80041b8 <HAL_DMA_Start_IT+0x104>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2224      	movs	r2, #36	@ 0x24
 80040dc:	2101      	movs	r1, #1
 80040de:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2225      	movs	r2, #37	@ 0x25
 80040e4:	5c9b      	ldrb	r3, [r3, r2]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d157      	bne.n	800419c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2225      	movs	r2, #37	@ 0x25
 80040f0:	2102      	movs	r1, #2
 80040f2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2101      	movs	r1, #1
 8004106:	438a      	bics	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f907 	bl	8004324 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	210e      	movs	r1, #14
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e00f      	b.n	8004150 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2104      	movs	r1, #4
 800413c:	438a      	bics	r2, r1
 800413e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	210a      	movs	r1, #10
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	025b      	lsls	r3, r3, #9
 800415a:	4013      	ands	r3, r2
 800415c:	d008      	beq.n	8004170 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004168:	2180      	movs	r1, #128	@ 0x80
 800416a:	0049      	lsls	r1, r1, #1
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004182:	2180      	movs	r1, #128	@ 0x80
 8004184:	0049      	lsls	r1, r1, #1
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e00a      	b.n	80041b2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2280      	movs	r2, #128	@ 0x80
 80041a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2224      	movs	r2, #36	@ 0x24
 80041a6:	2100      	movs	r1, #0
 80041a8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80041aa:	2317      	movs	r3, #23
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80041b2:	2317      	movs	r3, #23
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	781b      	ldrb	r3, [r3, #0]
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b006      	add	sp, #24
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80041c8:	4b55      	ldr	r3, [pc, #340]	@ (8004320 <HAL_DMA_IRQHandler+0x160>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	221c      	movs	r2, #28
 80041dc:	4013      	ands	r3, r2
 80041de:	2204      	movs	r2, #4
 80041e0:	409a      	lsls	r2, r3
 80041e2:	0013      	movs	r3, r2
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	d027      	beq.n	800423a <HAL_DMA_IRQHandler+0x7a>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2204      	movs	r2, #4
 80041ee:	4013      	ands	r3, r2
 80041f0:	d023      	beq.n	800423a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2220      	movs	r2, #32
 80041fa:	4013      	ands	r3, r2
 80041fc:	d107      	bne.n	800420e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2104      	movs	r1, #4
 800420a:	438a      	bics	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800420e:	4b44      	ldr	r3, [pc, #272]	@ (8004320 <HAL_DMA_IRQHandler+0x160>)
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	221c      	movs	r2, #28
 8004218:	4013      	ands	r3, r2
 800421a:	2204      	movs	r2, #4
 800421c:	409a      	lsls	r2, r3
 800421e:	4b40      	ldr	r3, [pc, #256]	@ (8004320 <HAL_DMA_IRQHandler+0x160>)
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004228:	2b00      	cmp	r3, #0
 800422a:	d100      	bne.n	800422e <HAL_DMA_IRQHandler+0x6e>
 800422c:	e073      	b.n	8004316 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	0010      	movs	r0, r2
 8004236:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004238:	e06d      	b.n	8004316 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	221c      	movs	r2, #28
 8004240:	4013      	ands	r3, r2
 8004242:	2202      	movs	r2, #2
 8004244:	409a      	lsls	r2, r3
 8004246:	0013      	movs	r3, r2
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	d02e      	beq.n	80042ac <HAL_DMA_IRQHandler+0xec>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2202      	movs	r2, #2
 8004252:	4013      	ands	r3, r2
 8004254:	d02a      	beq.n	80042ac <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2220      	movs	r2, #32
 800425e:	4013      	ands	r3, r2
 8004260:	d10b      	bne.n	800427a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	210a      	movs	r1, #10
 800426e:	438a      	bics	r2, r1
 8004270:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2225      	movs	r2, #37	@ 0x25
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800427a:	4b29      	ldr	r3, [pc, #164]	@ (8004320 <HAL_DMA_IRQHandler+0x160>)
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	221c      	movs	r2, #28
 8004284:	4013      	ands	r3, r2
 8004286:	2202      	movs	r2, #2
 8004288:	409a      	lsls	r2, r3
 800428a:	4b25      	ldr	r3, [pc, #148]	@ (8004320 <HAL_DMA_IRQHandler+0x160>)
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	@ 0x24
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d03a      	beq.n	8004316 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	0010      	movs	r0, r2
 80042a8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80042aa:	e034      	b.n	8004316 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	221c      	movs	r2, #28
 80042b2:	4013      	ands	r3, r2
 80042b4:	2208      	movs	r2, #8
 80042b6:	409a      	lsls	r2, r3
 80042b8:	0013      	movs	r3, r2
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4013      	ands	r3, r2
 80042be:	d02b      	beq.n	8004318 <HAL_DMA_IRQHandler+0x158>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2208      	movs	r2, #8
 80042c4:	4013      	ands	r3, r2
 80042c6:	d027      	beq.n	8004318 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	210e      	movs	r1, #14
 80042d4:	438a      	bics	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <HAL_DMA_IRQHandler+0x160>)
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	221c      	movs	r2, #28
 80042e2:	4013      	ands	r3, r2
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <HAL_DMA_IRQHandler+0x160>)
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2225      	movs	r2, #37	@ 0x25
 80042f8:	2101      	movs	r1, #1
 80042fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	@ 0x24
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	0010      	movs	r0, r2
 8004314:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	46c0      	nop			@ (mov r8, r8)
}
 800431a:	46bd      	mov	sp, r7
 800431c:	b004      	add	sp, #16
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40020000 	.word	0x40020000

08004324 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800433a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d004      	beq.n	800434e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800434c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800434e:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <DMA_SetConfig+0x7c>)
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	221c      	movs	r2, #28
 8004358:	4013      	ands	r3, r2
 800435a:	2201      	movs	r2, #1
 800435c:	409a      	lsls	r2, r3
 800435e:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <DMA_SetConfig+0x7c>)
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b10      	cmp	r3, #16
 8004372:	d108      	bne.n	8004386 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004384:	e007      	b.n	8004396 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]
}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	40020000 	.word	0x40020000

080043a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	4a10      	ldr	r2, [pc, #64]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80043b4:	4694      	mov	ip, r2
 80043b6:	4463      	add	r3, ip
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	001a      	movs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	001a      	movs	r2, r3
 80043c6:	23ff      	movs	r3, #255	@ 0xff
 80043c8:	4013      	ands	r3, r2
 80043ca:	3b08      	subs	r3, #8
 80043cc:	2114      	movs	r1, #20
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fb feb2 	bl	8000138 <__udivsi3>
 80043d4:	0003      	movs	r3, r0
 80043d6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a07      	ldr	r2, [pc, #28]	@ (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80043dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	221f      	movs	r2, #31
 80043e2:	4013      	ands	r3, r2
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	10008200 	.word	0x10008200
 80043f8:	40020880 	.word	0x40020880

080043fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	223f      	movs	r2, #63	@ 0x3f
 800440a:	4013      	ands	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004412:	4694      	mov	ip, r2
 8004414:	4463      	add	r3, ip
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	001a      	movs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a07      	ldr	r2, [pc, #28]	@ (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3b01      	subs	r3, #1
 8004428:	2203      	movs	r2, #3
 800442a:	4013      	ands	r3, r2
 800442c:	2201      	movs	r2, #1
 800442e:	409a      	lsls	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004434:	46c0      	nop			@ (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b004      	add	sp, #16
 800443a:	bd80      	pop	{r7, pc}
 800443c:	1000823f 	.word	0x1000823f
 8004440:	40020940 	.word	0x40020940

08004444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004452:	e147      	b.n	80046e4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4091      	lsls	r1, r2
 800445e:	000a      	movs	r2, r1
 8004460:	4013      	ands	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d100      	bne.n	800446c <HAL_GPIO_Init+0x28>
 800446a:	e138      	b.n	80046de <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2203      	movs	r2, #3
 8004472:	4013      	ands	r3, r2
 8004474:	2b01      	cmp	r3, #1
 8004476:	d005      	beq.n	8004484 <HAL_GPIO_Init+0x40>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2203      	movs	r2, #3
 800447e:	4013      	ands	r3, r2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d130      	bne.n	80044e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2203      	movs	r2, #3
 8004490:	409a      	lsls	r2, r3
 8004492:	0013      	movs	r3, r2
 8004494:	43da      	mvns	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	409a      	lsls	r2, r3
 80044a6:	0013      	movs	r3, r2
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044ba:	2201      	movs	r2, #1
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	409a      	lsls	r2, r3
 80044c0:	0013      	movs	r3, r2
 80044c2:	43da      	mvns	r2, r3
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	2201      	movs	r2, #1
 80044d2:	401a      	ands	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	409a      	lsls	r2, r3
 80044d8:	0013      	movs	r3, r2
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2203      	movs	r2, #3
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d017      	beq.n	8004522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	2203      	movs	r2, #3
 80044fe:	409a      	lsls	r2, r3
 8004500:	0013      	movs	r3, r2
 8004502:	43da      	mvns	r2, r3
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	0013      	movs	r3, r2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2203      	movs	r2, #3
 8004528:	4013      	ands	r3, r2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d123      	bne.n	8004576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	08da      	lsrs	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3208      	adds	r2, #8
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	58d3      	ldr	r3, [r2, r3]
 800453a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2207      	movs	r2, #7
 8004540:	4013      	ands	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	220f      	movs	r2, #15
 8004546:	409a      	lsls	r2, r3
 8004548:	0013      	movs	r3, r2
 800454a:	43da      	mvns	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2107      	movs	r1, #7
 800455a:	400b      	ands	r3, r1
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	409a      	lsls	r2, r3
 8004560:	0013      	movs	r3, r2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	08da      	lsrs	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3208      	adds	r2, #8
 8004570:	0092      	lsls	r2, r2, #2
 8004572:	6939      	ldr	r1, [r7, #16]
 8004574:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	2203      	movs	r2, #3
 8004582:	409a      	lsls	r2, r3
 8004584:	0013      	movs	r3, r2
 8004586:	43da      	mvns	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2203      	movs	r2, #3
 8004594:	401a      	ands	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	0013      	movs	r3, r2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	23c0      	movs	r3, #192	@ 0xc0
 80045b0:	029b      	lsls	r3, r3, #10
 80045b2:	4013      	ands	r3, r2
 80045b4:	d100      	bne.n	80045b8 <HAL_GPIO_Init+0x174>
 80045b6:	e092      	b.n	80046de <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80045b8:	4a50      	ldr	r2, [pc, #320]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	089b      	lsrs	r3, r3, #2
 80045be:	3318      	adds	r3, #24
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	589b      	ldr	r3, [r3, r2]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2203      	movs	r2, #3
 80045ca:	4013      	ands	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	220f      	movs	r2, #15
 80045d0:	409a      	lsls	r2, r3
 80045d2:	0013      	movs	r3, r2
 80045d4:	43da      	mvns	r2, r3
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	23a0      	movs	r3, #160	@ 0xa0
 80045e0:	05db      	lsls	r3, r3, #23
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d013      	beq.n	800460e <HAL_GPIO_Init+0x1ca>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a45      	ldr	r2, [pc, #276]	@ (8004700 <HAL_GPIO_Init+0x2bc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00d      	beq.n	800460a <HAL_GPIO_Init+0x1c6>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a44      	ldr	r2, [pc, #272]	@ (8004704 <HAL_GPIO_Init+0x2c0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <HAL_GPIO_Init+0x1c2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a43      	ldr	r2, [pc, #268]	@ (8004708 <HAL_GPIO_Init+0x2c4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_GPIO_Init+0x1be>
 80045fe:	2303      	movs	r3, #3
 8004600:	e006      	b.n	8004610 <HAL_GPIO_Init+0x1cc>
 8004602:	2305      	movs	r3, #5
 8004604:	e004      	b.n	8004610 <HAL_GPIO_Init+0x1cc>
 8004606:	2302      	movs	r3, #2
 8004608:	e002      	b.n	8004610 <HAL_GPIO_Init+0x1cc>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_GPIO_Init+0x1cc>
 800460e:	2300      	movs	r3, #0
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	2103      	movs	r1, #3
 8004614:	400a      	ands	r2, r1
 8004616:	00d2      	lsls	r2, r2, #3
 8004618:	4093      	lsls	r3, r2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004620:	4936      	ldr	r1, [pc, #216]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	3318      	adds	r3, #24
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800462e:	4b33      	ldr	r3, [pc, #204]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	43da      	mvns	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4013      	ands	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	2380      	movs	r3, #128	@ 0x80
 8004644:	035b      	lsls	r3, r3, #13
 8004646:	4013      	ands	r3, r2
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004652:	4b2a      	ldr	r3, [pc, #168]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004658:	4b28      	ldr	r3, [pc, #160]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43da      	mvns	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	039b      	lsls	r3, r3, #14
 8004670:	4013      	ands	r3, r2
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800467c:	4b1f      	ldr	r3, [pc, #124]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004682:	4a1e      	ldr	r2, [pc, #120]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 8004684:	2384      	movs	r3, #132	@ 0x84
 8004686:	58d3      	ldr	r3, [r2, r3]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	43da      	mvns	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	2380      	movs	r3, #128	@ 0x80
 800469a:	029b      	lsls	r3, r3, #10
 800469c:	4013      	ands	r3, r2
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046a8:	4914      	ldr	r1, [pc, #80]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 80046aa:	2284      	movs	r2, #132	@ 0x84
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80046b0:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 80046b2:	2380      	movs	r3, #128	@ 0x80
 80046b4:	58d3      	ldr	r3, [r2, r3]
 80046b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43da      	mvns	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	4013      	ands	r3, r2
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046d6:	4909      	ldr	r1, [pc, #36]	@ (80046fc <HAL_GPIO_Init+0x2b8>)
 80046d8:	2280      	movs	r2, #128	@ 0x80
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	3301      	adds	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	40da      	lsrs	r2, r3
 80046ec:	1e13      	subs	r3, r2, #0
 80046ee:	d000      	beq.n	80046f2 <HAL_GPIO_Init+0x2ae>
 80046f0:	e6b0      	b.n	8004454 <HAL_GPIO_Init+0x10>
  }
}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	46c0      	nop			@ (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b006      	add	sp, #24
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40021800 	.word	0x40021800
 8004700:	50000400 	.word	0x50000400
 8004704:	50000800 	.word	0x50000800
 8004708:	50000c00 	.word	0x50000c00

0800470c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	0008      	movs	r0, r1
 8004716:	0011      	movs	r1, r2
 8004718:	1cbb      	adds	r3, r7, #2
 800471a:	1c02      	adds	r2, r0, #0
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	1c7b      	adds	r3, r7, #1
 8004720:	1c0a      	adds	r2, r1, #0
 8004722:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004724:	1c7b      	adds	r3, r7, #1
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800472c:	1cbb      	adds	r3, r7, #2
 800472e:	881a      	ldrh	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004734:	e003      	b.n	800473e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004736:	1cbb      	adds	r3, r7, #2
 8004738:	881a      	ldrh	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a19      	ldr	r2, [pc, #100]	@ (80047bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004756:	4013      	ands	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	430a      	orrs	r2, r1
 8004760:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	2380      	movs	r3, #128	@ 0x80
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d11f      	bne.n	80047ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800476c:	4b14      	ldr	r3, [pc, #80]	@ (80047c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	0013      	movs	r3, r2
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	189b      	adds	r3, r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4912      	ldr	r1, [pc, #72]	@ (80047c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800477a:	0018      	movs	r0, r3
 800477c:	f7fb fcdc 	bl	8000138 <__udivsi3>
 8004780:	0003      	movs	r3, r0
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004786:	e008      	b.n	800479a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b01      	subs	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e001      	b.n	800479a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e009      	b.n	80047ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800479a:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	2380      	movs	r3, #128	@ 0x80
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	401a      	ands	r2, r3
 80047a4:	2380      	movs	r3, #128	@ 0x80
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d0ed      	beq.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b004      	add	sp, #16
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	40007000 	.word	0x40007000
 80047bc:	fffff9ff 	.word	0xfffff9ff
 80047c0:	20000000 	.word	0x20000000
 80047c4:	000f4240 	.word	0x000f4240

080047c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80047cc:	4b03      	ldr	r3, [pc, #12]	@ (80047dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	23e0      	movs	r3, #224	@ 0xe0
 80047d2:	01db      	lsls	r3, r3, #7
 80047d4:	4013      	ands	r3, r2
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000

080047e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e2f3      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2201      	movs	r2, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	d100      	bne.n	80047fe <HAL_RCC_OscConfig+0x1e>
 80047fc:	e07c      	b.n	80048f8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fe:	4bc3      	ldr	r3, [pc, #780]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2238      	movs	r2, #56	@ 0x38
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004808:	4bc0      	ldr	r3, [pc, #768]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2203      	movs	r2, #3
 800480e:	4013      	ands	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b10      	cmp	r3, #16
 8004816:	d102      	bne.n	800481e <HAL_RCC_OscConfig+0x3e>
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b03      	cmp	r3, #3
 800481c:	d002      	beq.n	8004824 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d10b      	bne.n	800483c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	4bb9      	ldr	r3, [pc, #740]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	029b      	lsls	r3, r3, #10
 800482c:	4013      	ands	r3, r2
 800482e:	d062      	beq.n	80048f6 <HAL_RCC_OscConfig+0x116>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d15e      	bne.n	80048f6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e2ce      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	025b      	lsls	r3, r3, #9
 8004844:	429a      	cmp	r2, r3
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x78>
 8004848:	4bb0      	ldr	r3, [pc, #704]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4baf      	ldr	r3, [pc, #700]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 800484e:	2180      	movs	r1, #128	@ 0x80
 8004850:	0249      	lsls	r1, r1, #9
 8004852:	430a      	orrs	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e020      	b.n	800489a <HAL_RCC_OscConfig+0xba>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	23a0      	movs	r3, #160	@ 0xa0
 800485e:	02db      	lsls	r3, r3, #11
 8004860:	429a      	cmp	r2, r3
 8004862:	d10e      	bne.n	8004882 <HAL_RCC_OscConfig+0xa2>
 8004864:	4ba9      	ldr	r3, [pc, #676]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4ba8      	ldr	r3, [pc, #672]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 800486a:	2180      	movs	r1, #128	@ 0x80
 800486c:	02c9      	lsls	r1, r1, #11
 800486e:	430a      	orrs	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	4ba6      	ldr	r3, [pc, #664]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4ba5      	ldr	r3, [pc, #660]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004878:	2180      	movs	r1, #128	@ 0x80
 800487a:	0249      	lsls	r1, r1, #9
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	e00b      	b.n	800489a <HAL_RCC_OscConfig+0xba>
 8004882:	4ba2      	ldr	r3, [pc, #648]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4ba1      	ldr	r3, [pc, #644]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004888:	49a1      	ldr	r1, [pc, #644]	@ (8004b10 <HAL_RCC_OscConfig+0x330>)
 800488a:	400a      	ands	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	4b9f      	ldr	r3, [pc, #636]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b9e      	ldr	r3, [pc, #632]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004894:	499f      	ldr	r1, [pc, #636]	@ (8004b14 <HAL_RCC_OscConfig+0x334>)
 8004896:	400a      	ands	r2, r1
 8004898:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fe fbeb 	bl	800307c <HAL_GetTick>
 80048a6:	0003      	movs	r3, r0
 80048a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ac:	f7fe fbe6 	bl	800307c <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b64      	cmp	r3, #100	@ 0x64
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e28d      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048be:	4b93      	ldr	r3, [pc, #588]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	029b      	lsls	r3, r3, #10
 80048c6:	4013      	ands	r3, r2
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0xcc>
 80048ca:	e015      	b.n	80048f8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fe fbd6 	bl	800307c <HAL_GetTick>
 80048d0:	0003      	movs	r3, r0
 80048d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d6:	f7fe fbd1 	bl	800307c <HAL_GetTick>
 80048da:	0002      	movs	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b64      	cmp	r3, #100	@ 0x64
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e278      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e8:	4b88      	ldr	r3, [pc, #544]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	@ 0x80
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	4013      	ands	r3, r2
 80048f2:	d1f0      	bne.n	80048d6 <HAL_RCC_OscConfig+0xf6>
 80048f4:	e000      	b.n	80048f8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2202      	movs	r2, #2
 80048fe:	4013      	ands	r3, r2
 8004900:	d100      	bne.n	8004904 <HAL_RCC_OscConfig+0x124>
 8004902:	e099      	b.n	8004a38 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004904:	4b81      	ldr	r3, [pc, #516]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2238      	movs	r2, #56	@ 0x38
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800490e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2203      	movs	r2, #3
 8004914:	4013      	ands	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b10      	cmp	r3, #16
 800491c:	d102      	bne.n	8004924 <HAL_RCC_OscConfig+0x144>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d002      	beq.n	800492a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d135      	bne.n	8004996 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800492a:	4b78      	ldr	r3, [pc, #480]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4013      	ands	r3, r2
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x162>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e24b      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b72      	ldr	r3, [pc, #456]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a74      	ldr	r2, [pc, #464]	@ (8004b18 <HAL_RCC_OscConfig+0x338>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	021a      	lsls	r2, r3, #8
 8004952:	4b6e      	ldr	r3, [pc, #440]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d112      	bne.n	8004984 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800495e:	4b6b      	ldr	r3, [pc, #428]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6e      	ldr	r2, [pc, #440]	@ (8004b1c <HAL_RCC_OscConfig+0x33c>)
 8004964:	4013      	ands	r3, r2
 8004966:	0019      	movs	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	4b67      	ldr	r3, [pc, #412]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 800496e:	430a      	orrs	r2, r1
 8004970:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004972:	4b66      	ldr	r3, [pc, #408]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	0adb      	lsrs	r3, r3, #11
 8004978:	2207      	movs	r2, #7
 800497a:	4013      	ands	r3, r2
 800497c:	4a68      	ldr	r2, [pc, #416]	@ (8004b20 <HAL_RCC_OscConfig+0x340>)
 800497e:	40da      	lsrs	r2, r3
 8004980:	4b68      	ldr	r3, [pc, #416]	@ (8004b24 <HAL_RCC_OscConfig+0x344>)
 8004982:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004984:	4b68      	ldr	r3, [pc, #416]	@ (8004b28 <HAL_RCC_OscConfig+0x348>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	0018      	movs	r0, r3
 800498a:	f7fe fb1b 	bl	8002fc4 <HAL_InitTick>
 800498e:	1e03      	subs	r3, r0, #0
 8004990:	d051      	beq.n	8004a36 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e221      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d030      	beq.n	8004a00 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800499e:	4b5b      	ldr	r3, [pc, #364]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b1c <HAL_RCC_OscConfig+0x33c>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	4b57      	ldr	r3, [pc, #348]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80049b2:	4b56      	ldr	r3, [pc, #344]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b55      	ldr	r3, [pc, #340]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80049b8:	2180      	movs	r1, #128	@ 0x80
 80049ba:	0049      	lsls	r1, r1, #1
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fe fb5c 	bl	800307c <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ca:	f7fe fb57 	bl	800307c <HAL_GetTick>
 80049ce:	0002      	movs	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1fe      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049dc:	4b4b      	ldr	r3, [pc, #300]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	2380      	movs	r3, #128	@ 0x80
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4013      	ands	r3, r2
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e8:	4b48      	ldr	r3, [pc, #288]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004b18 <HAL_RCC_OscConfig+0x338>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	4b44      	ldr	r3, [pc, #272]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	e01b      	b.n	8004a38 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004a00:	4b42      	ldr	r3, [pc, #264]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b41      	ldr	r3, [pc, #260]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a06:	4949      	ldr	r1, [pc, #292]	@ (8004b2c <HAL_RCC_OscConfig+0x34c>)
 8004a08:	400a      	ands	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fe fb36 	bl	800307c <HAL_GetTick>
 8004a10:	0003      	movs	r3, r0
 8004a12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a16:	f7fe fb31 	bl	800307c <HAL_GetTick>
 8004a1a:	0002      	movs	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e1d8      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a28:	4b38      	ldr	r3, [pc, #224]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	2380      	movs	r3, #128	@ 0x80
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4013      	ands	r3, r2
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0x236>
 8004a34:	e000      	b.n	8004a38 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d047      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a42:	4b32      	ldr	r3, [pc, #200]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2238      	movs	r2, #56	@ 0x38
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b18      	cmp	r3, #24
 8004a4c:	d10a      	bne.n	8004a64 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a52:	2202      	movs	r2, #2
 8004a54:	4013      	ands	r3, r2
 8004a56:	d03c      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2f2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d138      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e1ba      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d019      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a6c:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a70:	4b26      	ldr	r3, [pc, #152]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a72:	2101      	movs	r1, #1
 8004a74:	430a      	orrs	r2, r1
 8004a76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fe fb00 	bl	800307c <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a82:	f7fe fafb 	bl	800307c <HAL_GetTick>
 8004a86:	0002      	movs	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e1a2      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a94:	4b1d      	ldr	r3, [pc, #116]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a98:	2202      	movs	r2, #2
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d0f1      	beq.n	8004a82 <HAL_RCC_OscConfig+0x2a2>
 8004a9e:	e018      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004aa2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fe fae6 	bl	800307c <HAL_GetTick>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab6:	f7fe fae1 	bl	800307c <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e188      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ac8:	4b10      	ldr	r3, [pc, #64]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004acc:	2202      	movs	r2, #2
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d1f1      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d100      	bne.n	8004ade <HAL_RCC_OscConfig+0x2fe>
 8004adc:	e0c6      	b.n	8004c6c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ade:	231f      	movs	r3, #31
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004ae6:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2238      	movs	r2, #56	@ 0x38
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d11e      	bne.n	8004b30 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_RCC_OscConfig+0x32c>)
 8004af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af6:	2202      	movs	r2, #2
 8004af8:	4013      	ands	r3, r2
 8004afa:	d100      	bne.n	8004afe <HAL_RCC_OscConfig+0x31e>
 8004afc:	e0b6      	b.n	8004c6c <HAL_RCC_OscConfig+0x48c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d000      	beq.n	8004b08 <HAL_RCC_OscConfig+0x328>
 8004b06:	e0b1      	b.n	8004c6c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e166      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	fffeffff 	.word	0xfffeffff
 8004b14:	fffbffff 	.word	0xfffbffff
 8004b18:	ffff80ff 	.word	0xffff80ff
 8004b1c:	ffffc7ff 	.word	0xffffc7ff
 8004b20:	00f42400 	.word	0x00f42400
 8004b24:	20000000 	.word	0x20000000
 8004b28:	20000004 	.word	0x20000004
 8004b2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b30:	4bac      	ldr	r3, [pc, #688]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004b32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	055b      	lsls	r3, r3, #21
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d101      	bne.n	8004b40 <HAL_RCC_OscConfig+0x360>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x362>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d011      	beq.n	8004b6a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	4ba7      	ldr	r3, [pc, #668]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004b48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b4a:	4ba6      	ldr	r3, [pc, #664]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004b4c:	2180      	movs	r1, #128	@ 0x80
 8004b4e:	0549      	lsls	r1, r1, #21
 8004b50:	430a      	orrs	r2, r1
 8004b52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b54:	4ba3      	ldr	r3, [pc, #652]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	055b      	lsls	r3, r3, #21
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004b62:	231f      	movs	r3, #31
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8004de8 <HAL_RCC_OscConfig+0x608>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	2380      	movs	r3, #128	@ 0x80
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4013      	ands	r3, r2
 8004b74:	d11a      	bne.n	8004bac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b76:	4b9c      	ldr	r3, [pc, #624]	@ (8004de8 <HAL_RCC_OscConfig+0x608>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b9b      	ldr	r3, [pc, #620]	@ (8004de8 <HAL_RCC_OscConfig+0x608>)
 8004b7c:	2180      	movs	r1, #128	@ 0x80
 8004b7e:	0049      	lsls	r1, r1, #1
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b84:	f7fe fa7a 	bl	800307c <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8e:	f7fe fa75 	bl	800307c <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e11c      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ba0:	4b91      	ldr	r3, [pc, #580]	@ (8004de8 <HAL_RCC_OscConfig+0x608>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4013      	ands	r3, r2
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x3e2>
 8004bb4:	4b8b      	ldr	r3, [pc, #556]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bba:	2101      	movs	r1, #1
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bc0:	e01c      	b.n	8004bfc <HAL_RCC_OscConfig+0x41c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCC_OscConfig+0x404>
 8004bca:	4b86      	ldr	r3, [pc, #536]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bce:	4b85      	ldr	r3, [pc, #532]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bd0:	2104      	movs	r1, #4
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bd6:	4b83      	ldr	r3, [pc, #524]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bda:	4b82      	ldr	r3, [pc, #520]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bdc:	2101      	movs	r1, #1
 8004bde:	430a      	orrs	r2, r1
 8004be0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004be2:	e00b      	b.n	8004bfc <HAL_RCC_OscConfig+0x41c>
 8004be4:	4b7f      	ldr	r3, [pc, #508]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004be6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004be8:	4b7e      	ldr	r3, [pc, #504]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bea:	2101      	movs	r1, #1
 8004bec:	438a      	bics	r2, r1
 8004bee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bf0:	4b7c      	ldr	r3, [pc, #496]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d014      	beq.n	8004c2e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fe fa3a 	bl	800307c <HAL_GetTick>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0c:	e009      	b.n	8004c22 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fe fa35 	bl	800307c <HAL_GetTick>
 8004c12:	0002      	movs	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	4a74      	ldr	r2, [pc, #464]	@ (8004dec <HAL_RCC_OscConfig+0x60c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e0db      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c22:	4b70      	ldr	r3, [pc, #448]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c26:	2202      	movs	r2, #2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x42e>
 8004c2c:	e013      	b.n	8004c56 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fa25 	bl	800307c <HAL_GetTick>
 8004c32:	0003      	movs	r3, r0
 8004c34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c36:	e009      	b.n	8004c4c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fe fa20 	bl	800307c <HAL_GetTick>
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	4a6a      	ldr	r2, [pc, #424]	@ (8004dec <HAL_RCC_OscConfig+0x60c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e0c6      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c4c:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c50:	2202      	movs	r2, #2
 8004c52:	4013      	ands	r3, r2
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c56:	231f      	movs	r3, #31
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c60:	4b60      	ldr	r3, [pc, #384]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c64:	4b5f      	ldr	r3, [pc, #380]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004c66:	4962      	ldr	r1, [pc, #392]	@ (8004df0 <HAL_RCC_OscConfig+0x610>)
 8004c68:	400a      	ands	r2, r1
 8004c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d100      	bne.n	8004c76 <HAL_RCC_OscConfig+0x496>
 8004c74:	e0b0      	b.n	8004dd8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c76:	4b5b      	ldr	r3, [pc, #364]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2238      	movs	r2, #56	@ 0x38
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d100      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4a4>
 8004c82:	e078      	b.n	8004d76 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d153      	bne.n	8004d34 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8c:	4b55      	ldr	r3, [pc, #340]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b54      	ldr	r3, [pc, #336]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004c92:	4958      	ldr	r1, [pc, #352]	@ (8004df4 <HAL_RCC_OscConfig+0x614>)
 8004c94:	400a      	ands	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fe f9f0 	bl	800307c <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fe f9eb 	bl	800307c <HAL_GetTick>
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e092      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	049b      	lsls	r3, r3, #18
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc0:	4b48      	ldr	r3, [pc, #288]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8004df8 <HAL_RCC_OscConfig+0x618>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004cea:	430a      	orrs	r2, r1
 8004cec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cee:	4b3d      	ldr	r3, [pc, #244]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	0449      	lsls	r1, r1, #17
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004cfc:	4b39      	ldr	r3, [pc, #228]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	4b38      	ldr	r3, [pc, #224]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d02:	2180      	movs	r1, #128	@ 0x80
 8004d04:	0549      	lsls	r1, r1, #21
 8004d06:	430a      	orrs	r2, r1
 8004d08:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fe f9b7 	bl	800307c <HAL_GetTick>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fe f9b2 	bl	800307c <HAL_GetTick>
 8004d18:	0002      	movs	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e059      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d26:	4b2f      	ldr	r3, [pc, #188]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	2380      	movs	r3, #128	@ 0x80
 8004d2c:	049b      	lsls	r3, r3, #18
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0x534>
 8004d32:	e051      	b.n	8004dd8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d34:	4b2b      	ldr	r3, [pc, #172]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b2a      	ldr	r3, [pc, #168]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d3a:	492e      	ldr	r1, [pc, #184]	@ (8004df4 <HAL_RCC_OscConfig+0x614>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe f99c 	bl	800307c <HAL_GetTick>
 8004d44:	0003      	movs	r3, r0
 8004d46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4a:	f7fe f997 	bl	800307c <HAL_GetTick>
 8004d4e:	0002      	movs	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e03e      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5c:	4b21      	ldr	r3, [pc, #132]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	2380      	movs	r3, #128	@ 0x80
 8004d62:	049b      	lsls	r3, r3, #18
 8004d64:	4013      	ands	r3, r2
 8004d66:	d1f0      	bne.n	8004d4a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004d68:	4b1e      	ldr	r3, [pc, #120]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d6e:	4923      	ldr	r1, [pc, #140]	@ (8004dfc <HAL_RCC_OscConfig+0x61c>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	60da      	str	r2, [r3, #12]
 8004d74:	e030      	b.n	8004dd8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e02b      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004d82:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <HAL_RCC_OscConfig+0x604>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d11e      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2270      	movs	r2, #112	@ 0x70
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d117      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	23fe      	movs	r3, #254	@ 0xfe
 8004da8:	01db      	lsls	r3, r3, #7
 8004daa:	401a      	ands	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d10e      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	23f8      	movs	r3, #248	@ 0xf8
 8004dba:	039b      	lsls	r3, r3, #14
 8004dbc:	401a      	ands	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d106      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	0f5b      	lsrs	r3, r3, #29
 8004dca:	075a      	lsls	r2, r3, #29
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b008      	add	sp, #32
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40007000 	.word	0x40007000
 8004dec:	00001388 	.word	0x00001388
 8004df0:	efffffff 	.word	0xefffffff
 8004df4:	feffffff 	.word	0xfeffffff
 8004df8:	1fc1808c 	.word	0x1fc1808c
 8004dfc:	effefffc 	.word	0xeffefffc

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0e9      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b76      	ldr	r3, [pc, #472]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2207      	movs	r2, #7
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d91e      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b73      	ldr	r3, [pc, #460]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2207      	movs	r2, #7
 8004e28:	4393      	bics	r3, r2
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	4b70      	ldr	r3, [pc, #448]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e34:	f7fe f922 	bl	800307c <HAL_GetTick>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e3c:	e009      	b.n	8004e52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3e:	f7fe f91d 	bl	800307c <HAL_GetTick>
 8004e42:	0002      	movs	r2, r0
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	4a6a      	ldr	r2, [pc, #424]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e0ca      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e52:	4b67      	ldr	r3, [pc, #412]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2207      	movs	r2, #7
 8004e58:	4013      	ands	r3, r2
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d1ee      	bne.n	8004e3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2202      	movs	r2, #2
 8004e66:	4013      	ands	r3, r2
 8004e68:	d015      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	4013      	ands	r3, r2
 8004e72:	d006      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004e74:	4b60      	ldr	r3, [pc, #384]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e7a:	21e0      	movs	r1, #224	@ 0xe0
 8004e7c:	01c9      	lsls	r1, r1, #7
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e82:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4a5d      	ldr	r2, [pc, #372]	@ (8004ffc <HAL_RCC_ClockConfig+0x1fc>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	4b59      	ldr	r3, [pc, #356]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d057      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ea8:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	2380      	movs	r3, #128	@ 0x80
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d12b      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e097      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d107      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	2380      	movs	r3, #128	@ 0x80
 8004ec6:	049b      	lsls	r3, r3, #18
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d11f      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e08b      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed8:	4b47      	ldr	r3, [pc, #284]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d113      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e07f      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d106      	bne.n	8004efe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ef0:	4b41      	ldr	r3, [pc, #260]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e074      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e06d      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2207      	movs	r2, #7
 8004f12:	4393      	bics	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	4b37      	ldr	r3, [pc, #220]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f20:	f7fe f8ac 	bl	800307c <HAL_GetTick>
 8004f24:	0003      	movs	r3, r0
 8004f26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f28:	e009      	b.n	8004f3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2a:	f7fe f8a7 	bl	800307c <HAL_GetTick>
 8004f2e:	0002      	movs	r2, r0
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e054      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2238      	movs	r2, #56	@ 0x38
 8004f44:	401a      	ands	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1ec      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f50:	4b27      	ldr	r3, [pc, #156]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2207      	movs	r2, #7
 8004f56:	4013      	ands	r3, r2
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d21e      	bcs.n	8004f9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2207      	movs	r2, #7
 8004f64:	4393      	bics	r3, r2
 8004f66:	0019      	movs	r1, r3
 8004f68:	4b21      	ldr	r3, [pc, #132]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f70:	f7fe f884 	bl	800307c <HAL_GetTick>
 8004f74:	0003      	movs	r3, r0
 8004f76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f78:	e009      	b.n	8004f8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7a:	f7fe f87f 	bl	800307c <HAL_GetTick>
 8004f7e:	0002      	movs	r2, r0
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e02c      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f8e:	4b18      	ldr	r3, [pc, #96]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2207      	movs	r2, #7
 8004f94:	4013      	ands	r3, r2
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d1ee      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa6:	4b14      	ldr	r3, [pc, #80]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <HAL_RCC_ClockConfig+0x200>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	4b10      	ldr	r3, [pc, #64]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004fba:	f000 f829 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8004fbe:	0001      	movs	r1, r0
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	220f      	movs	r2, #15
 8004fc8:	401a      	ands	r2, r3
 8004fca:	4b0e      	ldr	r3, [pc, #56]	@ (8005004 <HAL_RCC_ClockConfig+0x204>)
 8004fcc:	0092      	lsls	r2, r2, #2
 8004fce:	58d3      	ldr	r3, [r2, r3]
 8004fd0:	221f      	movs	r2, #31
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	000a      	movs	r2, r1
 8004fd6:	40da      	lsrs	r2, r3
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_RCC_ClockConfig+0x208>)
 8004fda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <HAL_RCC_ClockConfig+0x20c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7fd ffef 	bl	8002fc4 <HAL_InitTick>
 8004fe6:	0003      	movs	r3, r0
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b004      	add	sp, #16
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40022000 	.word	0x40022000
 8004ff4:	00001388 	.word	0x00001388
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	fffff0ff 	.word	0xfffff0ff
 8005000:	ffff8fff 	.word	0xffff8fff
 8005004:	080091e0 	.word	0x080091e0
 8005008:	20000000 	.word	0x20000000
 800500c:	20000004 	.word	0x20000004

08005010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005016:	4b3c      	ldr	r3, [pc, #240]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2238      	movs	r2, #56	@ 0x38
 800501c:	4013      	ands	r3, r2
 800501e:	d10f      	bne.n	8005040 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005020:	4b39      	ldr	r3, [pc, #228]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0adb      	lsrs	r3, r3, #11
 8005026:	2207      	movs	r2, #7
 8005028:	4013      	ands	r3, r2
 800502a:	2201      	movs	r2, #1
 800502c:	409a      	lsls	r2, r3
 800502e:	0013      	movs	r3, r2
 8005030:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	4835      	ldr	r0, [pc, #212]	@ (800510c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005036:	f7fb f87f 	bl	8000138 <__udivsi3>
 800503a:	0003      	movs	r3, r0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	e05d      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005040:	4b31      	ldr	r3, [pc, #196]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2238      	movs	r2, #56	@ 0x38
 8005046:	4013      	ands	r3, r2
 8005048:	2b08      	cmp	r3, #8
 800504a:	d102      	bne.n	8005052 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800504c:	4b30      	ldr	r3, [pc, #192]	@ (8005110 <HAL_RCC_GetSysClockFreq+0x100>)
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	e054      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005052:	4b2d      	ldr	r3, [pc, #180]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	2238      	movs	r2, #56	@ 0x38
 8005058:	4013      	ands	r3, r2
 800505a:	2b10      	cmp	r3, #16
 800505c:	d138      	bne.n	80050d0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800505e:	4b2a      	ldr	r3, [pc, #168]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2203      	movs	r2, #3
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005068:	4b27      	ldr	r3, [pc, #156]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	2207      	movs	r2, #7
 8005070:	4013      	ands	r3, r2
 8005072:	3301      	adds	r3, #1
 8005074:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d10d      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	4824      	ldr	r0, [pc, #144]	@ (8005110 <HAL_RCC_GetSysClockFreq+0x100>)
 8005080:	f7fb f85a 	bl	8000138 <__udivsi3>
 8005084:	0003      	movs	r3, r0
 8005086:	0019      	movs	r1, r3
 8005088:	4b1f      	ldr	r3, [pc, #124]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	227f      	movs	r2, #127	@ 0x7f
 8005090:	4013      	ands	r3, r2
 8005092:	434b      	muls	r3, r1
 8005094:	617b      	str	r3, [r7, #20]
        break;
 8005096:	e00d      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	481c      	ldr	r0, [pc, #112]	@ (800510c <HAL_RCC_GetSysClockFreq+0xfc>)
 800509c:	f7fb f84c 	bl	8000138 <__udivsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	0019      	movs	r1, r3
 80050a4:	4b18      	ldr	r3, [pc, #96]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	227f      	movs	r2, #127	@ 0x7f
 80050ac:	4013      	ands	r3, r2
 80050ae:	434b      	muls	r3, r1
 80050b0:	617b      	str	r3, [r7, #20]
        break;
 80050b2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80050b4:	4b14      	ldr	r3, [pc, #80]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	0f5b      	lsrs	r3, r3, #29
 80050ba:	2207      	movs	r2, #7
 80050bc:	4013      	ands	r3, r2
 80050be:	3301      	adds	r3, #1
 80050c0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	6978      	ldr	r0, [r7, #20]
 80050c6:	f7fb f837 	bl	8000138 <__udivsi3>
 80050ca:	0003      	movs	r3, r0
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e015      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80050d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2238      	movs	r2, #56	@ 0x38
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d103      	bne.n	80050e4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80050dc:	2380      	movs	r3, #128	@ 0x80
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e00b      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80050e4:	4b08      	ldr	r3, [pc, #32]	@ (8005108 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2238      	movs	r2, #56	@ 0x38
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b18      	cmp	r3, #24
 80050ee:	d103      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80050f0:	23fa      	movs	r3, #250	@ 0xfa
 80050f2:	01db      	lsls	r3, r3, #7
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e001      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050fc:	693b      	ldr	r3, [r7, #16]
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b006      	add	sp, #24
 8005104:	bd80      	pop	{r7, pc}
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	40021000 	.word	0x40021000
 800510c:	00f42400 	.word	0x00f42400
 8005110:	007a1200 	.word	0x007a1200

08005114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005118:	4b02      	ldr	r3, [pc, #8]	@ (8005124 <HAL_RCC_GetHCLKFreq+0x10>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	20000000 	.word	0x20000000

08005128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005128:	b5b0      	push	{r4, r5, r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800512c:	f7ff fff2 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8005130:	0004      	movs	r4, r0
 8005132:	f7ff fb49 	bl	80047c8 <LL_RCC_GetAPB1Prescaler>
 8005136:	0003      	movs	r3, r0
 8005138:	0b1a      	lsrs	r2, r3, #12
 800513a:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800513c:	0092      	lsls	r2, r2, #2
 800513e:	58d3      	ldr	r3, [r2, r3]
 8005140:	221f      	movs	r2, #31
 8005142:	4013      	ands	r3, r2
 8005144:	40dc      	lsrs	r4, r3
 8005146:	0023      	movs	r3, r4
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	bdb0      	pop	{r4, r5, r7, pc}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	08009220 	.word	0x08009220

08005154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800515c:	2313      	movs	r3, #19
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005164:	2312      	movs	r3, #18
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	4013      	ands	r3, r2
 8005176:	d100      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005178:	e0a3      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517a:	2011      	movs	r0, #17
 800517c:	183b      	adds	r3, r7, r0
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005182:	4b7f      	ldr	r3, [pc, #508]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005184:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005186:	2380      	movs	r3, #128	@ 0x80
 8005188:	055b      	lsls	r3, r3, #21
 800518a:	4013      	ands	r3, r2
 800518c:	d110      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	4b7c      	ldr	r3, [pc, #496]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005192:	4b7b      	ldr	r3, [pc, #492]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005194:	2180      	movs	r1, #128	@ 0x80
 8005196:	0549      	lsls	r1, r1, #21
 8005198:	430a      	orrs	r2, r1
 800519a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800519c:	4b78      	ldr	r3, [pc, #480]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800519e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	055b      	lsls	r3, r3, #21
 80051a4:	4013      	ands	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051aa:	183b      	adds	r3, r7, r0
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051b0:	4b74      	ldr	r3, [pc, #464]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b73      	ldr	r3, [pc, #460]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80051b6:	2180      	movs	r1, #128	@ 0x80
 80051b8:	0049      	lsls	r1, r1, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051be:	f7fd ff5d 	bl	800307c <HAL_GetTick>
 80051c2:	0003      	movs	r3, r0
 80051c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051c6:	e00b      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c8:	f7fd ff58 	bl	800307c <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d904      	bls.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80051d6:	2313      	movs	r3, #19
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	2203      	movs	r2, #3
 80051dc:	701a      	strb	r2, [r3, #0]
        break;
 80051de:	e005      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e0:	4b68      	ldr	r3, [pc, #416]	@ (8005384 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2380      	movs	r3, #128	@ 0x80
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	d0ed      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80051ec:	2313      	movs	r3, #19
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d154      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051f6:	4b62      	ldr	r3, [pc, #392]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80051f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051fa:	23c0      	movs	r3, #192	@ 0xc0
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4013      	ands	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d019      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	429a      	cmp	r2, r3
 8005210:	d014      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005212:	4b5b      	ldr	r3, [pc, #364]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005216:	4a5c      	ldr	r2, [pc, #368]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005218:	4013      	ands	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800521c:	4b58      	ldr	r3, [pc, #352]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800521e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005220:	4b57      	ldr	r3, [pc, #348]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005222:	2180      	movs	r1, #128	@ 0x80
 8005224:	0249      	lsls	r1, r1, #9
 8005226:	430a      	orrs	r2, r1
 8005228:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800522a:	4b55      	ldr	r3, [pc, #340]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800522c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800522e:	4b54      	ldr	r3, [pc, #336]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005230:	4956      	ldr	r1, [pc, #344]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005232:	400a      	ands	r2, r1
 8005234:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005236:	4b52      	ldr	r3, [pc, #328]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2201      	movs	r2, #1
 8005240:	4013      	ands	r3, r2
 8005242:	d016      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd ff1a 	bl	800307c <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800524c:	e00c      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fd ff15 	bl	800307c <HAL_GetTick>
 8005252:	0002      	movs	r2, r0
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	4a4d      	ldr	r2, [pc, #308]	@ (8005390 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d904      	bls.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800525e:	2313      	movs	r3, #19
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	2203      	movs	r2, #3
 8005264:	701a      	strb	r2, [r3, #0]
            break;
 8005266:	e004      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005268:	4b45      	ldr	r3, [pc, #276]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800526a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526c:	2202      	movs	r2, #2
 800526e:	4013      	ands	r3, r2
 8005270:	d0ed      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005272:	2313      	movs	r3, #19
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800527c:	4b40      	ldr	r3, [pc, #256]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800527e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005280:	4a41      	ldr	r2, [pc, #260]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	4b3d      	ldr	r3, [pc, #244]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800528c:	430a      	orrs	r2, r1
 800528e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005290:	e00c      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005292:	2312      	movs	r3, #18
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	2213      	movs	r2, #19
 8005298:	18ba      	adds	r2, r7, r2
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e005      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	2312      	movs	r3, #18
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2213      	movs	r2, #19
 80052a6:	18ba      	adds	r2, r7, r2
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ac:	2311      	movs	r3, #17
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d105      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b6:	4b32      	ldr	r3, [pc, #200]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ba:	4b31      	ldr	r3, [pc, #196]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052bc:	4935      	ldr	r1, [pc, #212]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052be:	400a      	ands	r2, r1
 80052c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2201      	movs	r2, #1
 80052c8:	4013      	ands	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d0:	2203      	movs	r2, #3
 80052d2:	4393      	bics	r3, r2
 80052d4:	0019      	movs	r1, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	4b29      	ldr	r3, [pc, #164]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052dc:	430a      	orrs	r2, r1
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2220      	movs	r2, #32
 80052e6:	4013      	ands	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ea:	4b25      	ldr	r3, [pc, #148]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	0019      	movs	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	4b21      	ldr	r3, [pc, #132]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80052fa:	430a      	orrs	r2, r1
 80052fc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	01db      	lsls	r3, r3, #7
 8005306:	4013      	ands	r3, r2
 8005308:	d015      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800530a:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800530c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	0899      	lsrs	r1, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	4b1a      	ldr	r3, [pc, #104]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005318:	430a      	orrs	r2, r1
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	2380      	movs	r3, #128	@ 0x80
 8005322:	05db      	lsls	r3, r3, #23
 8005324:	429a      	cmp	r2, r3
 8005326:	d106      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005328:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800532e:	2180      	movs	r1, #128	@ 0x80
 8005330:	0249      	lsls	r1, r1, #9
 8005332:	430a      	orrs	r2, r1
 8005334:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	@ 0x80
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	4013      	ands	r3, r2
 8005340:	d016      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005342:	4b0f      	ldr	r3, [pc, #60]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005346:	4a15      	ldr	r2, [pc, #84]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005348:	4013      	ands	r3, r2
 800534a:	0019      	movs	r1, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	4b0b      	ldr	r3, [pc, #44]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005352:	430a      	orrs	r2, r1
 8005354:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	2380      	movs	r3, #128	@ 0x80
 800535c:	01db      	lsls	r3, r3, #7
 800535e:	429a      	cmp	r2, r3
 8005360:	d106      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005362:	4b07      	ldr	r3, [pc, #28]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005368:	2180      	movs	r1, #128	@ 0x80
 800536a:	0249      	lsls	r1, r1, #9
 800536c:	430a      	orrs	r2, r1
 800536e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005370:	2312      	movs	r3, #18
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	781b      	ldrb	r3, [r3, #0]
}
 8005376:	0018      	movs	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	b006      	add	sp, #24
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	40021000 	.word	0x40021000
 8005384:	40007000 	.word	0x40007000
 8005388:	fffffcff 	.word	0xfffffcff
 800538c:	fffeffff 	.word	0xfffeffff
 8005390:	00001388 	.word	0x00001388
 8005394:	efffffff 	.word	0xefffffff
 8005398:	ffffcfff 	.word	0xffffcfff
 800539c:	ffff3fff 	.word	0xffff3fff

080053a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053a0:	b5b0      	push	{r4, r5, r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053a8:	230f      	movs	r3, #15
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d100      	bne.n	80053b8 <HAL_RTC_Init+0x18>
 80053b6:	e08c      	b.n	80054d2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2229      	movs	r2, #41	@ 0x29
 80053bc:	5c9b      	ldrb	r3, [r3, r2]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2228      	movs	r2, #40	@ 0x28
 80053c8:	2100      	movs	r1, #0
 80053ca:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2288      	movs	r2, #136	@ 0x88
 80053d0:	0212      	lsls	r2, r2, #8
 80053d2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7fd fc36 	bl	8002c48 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2229      	movs	r2, #41	@ 0x29
 80053e0:	2102      	movs	r1, #2
 80053e2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2210      	movs	r2, #16
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	d062      	beq.n	80054b8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	22ca      	movs	r2, #202	@ 0xca
 80053f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2253      	movs	r2, #83	@ 0x53
 8005400:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005402:	250f      	movs	r5, #15
 8005404:	197c      	adds	r4, r7, r5
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 f891 	bl	8005530 <RTC_EnterInitMode>
 800540e:	0003      	movs	r3, r0
 8005410:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005412:	0028      	movs	r0, r5
 8005414:	183b      	adds	r3, r7, r0
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d12c      	bne.n	8005476 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	492e      	ldr	r1, [pc, #184]	@ (80054e0 <HAL_RTC_Init+0x140>)
 8005428:	400a      	ands	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6999      	ldr	r1, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6912      	ldr	r2, [r2, #16]
 8005452:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6919      	ldr	r1, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	041a      	lsls	r2, r3, #16
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005468:	183c      	adds	r4, r7, r0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f000 f8a1 	bl	80055b4 <RTC_ExitInitMode>
 8005472:	0003      	movs	r3, r0
 8005474:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005476:	230f      	movs	r3, #15
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	00d2      	lsls	r2, r2, #3
 800548c:	08d2      	lsrs	r2, r2, #3
 800548e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6999      	ldr	r1, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	22ff      	movs	r2, #255	@ 0xff
 80054b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80054b6:	e003      	b.n	80054c0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80054b8:	230f      	movs	r3, #15
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80054c0:	230f      	movs	r3, #15
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2229      	movs	r2, #41	@ 0x29
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80054d2:	230f      	movs	r3, #15
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	781b      	ldrb	r3, [r3, #0]
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b004      	add	sp, #16
 80054de:	bdb0      	pop	{r4, r5, r7, pc}
 80054e0:	fb8fffbf 	.word	0xfb8fffbf

080054e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0e      	ldr	r2, [pc, #56]	@ (800552c <HAL_RTC_WaitForSynchro+0x48>)
 80054f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80054f4:	f7fd fdc2 	bl	800307c <HAL_GetTick>
 80054f8:	0003      	movs	r3, r0
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80054fc:	e00a      	b.n	8005514 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054fe:	f7fd fdbd 	bl	800307c <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	23fa      	movs	r3, #250	@ 0xfa
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	429a      	cmp	r2, r3
 800550e:	d901      	bls.n	8005514 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e006      	b.n	8005522 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	4013      	ands	r3, r2
 800551e:	d0ee      	beq.n	80054fe <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	0018      	movs	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	b004      	add	sp, #16
 8005528:	bd80      	pop	{r7, pc}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	0001005f 	.word	0x0001005f

08005530 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005538:	230f      	movs	r3, #15
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2240      	movs	r2, #64	@ 0x40
 8005548:	4013      	ands	r3, r2
 800554a:	d12c      	bne.n	80055a6 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2180      	movs	r1, #128	@ 0x80
 8005558:	430a      	orrs	r2, r1
 800555a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800555c:	f7fd fd8e 	bl	800307c <HAL_GetTick>
 8005560:	0003      	movs	r3, r0
 8005562:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005564:	e014      	b.n	8005590 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005566:	f7fd fd89 	bl	800307c <HAL_GetTick>
 800556a:	0002      	movs	r2, r0
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	200f      	movs	r0, #15
 8005572:	183b      	adds	r3, r7, r0
 8005574:	1839      	adds	r1, r7, r0
 8005576:	7809      	ldrb	r1, [r1, #0]
 8005578:	7019      	strb	r1, [r3, #0]
 800557a:	23fa      	movs	r3, #250	@ 0xfa
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	429a      	cmp	r2, r3
 8005580:	d906      	bls.n	8005590 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005582:	183b      	adds	r3, r7, r0
 8005584:	2203      	movs	r2, #3
 8005586:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2229      	movs	r2, #41	@ 0x29
 800558c:	2103      	movs	r1, #3
 800558e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2240      	movs	r2, #64	@ 0x40
 8005598:	4013      	ands	r3, r2
 800559a:	d104      	bne.n	80055a6 <RTC_EnterInitMode+0x76>
 800559c:	230f      	movs	r3, #15
 800559e:	18fb      	adds	r3, r7, r3
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d1df      	bne.n	8005566 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80055a6:	230f      	movs	r3, #15
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	781b      	ldrb	r3, [r3, #0]
}
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b004      	add	sp, #16
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	240f      	movs	r4, #15
 80055be:	193b      	adds	r3, r7, r4
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80055c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005638 <RTC_ExitInitMode+0x84>)
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005638 <RTC_ExitInitMode+0x84>)
 80055ca:	2180      	movs	r1, #128	@ 0x80
 80055cc:	438a      	bics	r2, r1
 80055ce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80055d0:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <RTC_ExitInitMode+0x84>)
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2220      	movs	r2, #32
 80055d6:	4013      	ands	r3, r2
 80055d8:	d10d      	bne.n	80055f6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	0018      	movs	r0, r3
 80055de:	f7ff ff81 	bl	80054e4 <HAL_RTC_WaitForSynchro>
 80055e2:	1e03      	subs	r3, r0, #0
 80055e4:	d021      	beq.n	800562a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2229      	movs	r2, #41	@ 0x29
 80055ea:	2103      	movs	r1, #3
 80055ec:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	2203      	movs	r2, #3
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e019      	b.n	800562a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80055f6:	4b10      	ldr	r3, [pc, #64]	@ (8005638 <RTC_ExitInitMode+0x84>)
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <RTC_ExitInitMode+0x84>)
 80055fc:	2120      	movs	r1, #32
 80055fe:	438a      	bics	r2, r1
 8005600:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0018      	movs	r0, r3
 8005606:	f7ff ff6d 	bl	80054e4 <HAL_RTC_WaitForSynchro>
 800560a:	1e03      	subs	r3, r0, #0
 800560c:	d007      	beq.n	800561e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2229      	movs	r2, #41	@ 0x29
 8005612:	2103      	movs	r1, #3
 8005614:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005616:	230f      	movs	r3, #15
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	2203      	movs	r2, #3
 800561c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <RTC_ExitInitMode+0x84>)
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <RTC_ExitInitMode+0x84>)
 8005624:	2120      	movs	r1, #32
 8005626:	430a      	orrs	r2, r1
 8005628:	619a      	str	r2, [r3, #24]
  }

  return status;
 800562a:	230f      	movs	r3, #15
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	781b      	ldrb	r3, [r3, #0]
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	b005      	add	sp, #20
 8005636:	bd90      	pop	{r4, r7, pc}
 8005638:	40002800 	.word	0x40002800

0800563c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e046      	b.n	80056dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2288      	movs	r2, #136	@ 0x88
 8005652:	589b      	ldr	r3, [r3, r2]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2284      	movs	r2, #132	@ 0x84
 800565c:	2100      	movs	r1, #0
 800565e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0018      	movs	r0, r3
 8005664:	f7fd fb2e 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2288      	movs	r2, #136	@ 0x88
 800566c:	2124      	movs	r1, #36	@ 0x24
 800566e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2101      	movs	r1, #1
 800567c:	438a      	bics	r2, r1
 800567e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0018      	movs	r0, r3
 800568c:	f000 fa3a 	bl	8005b04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0018      	movs	r0, r3
 8005694:	f000 f8cc 	bl	8005830 <UART_SetConfig>
 8005698:	0003      	movs	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e01c      	b.n	80056dc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	490d      	ldr	r1, [pc, #52]	@ (80056e4 <HAL_UART_Init+0xa8>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	212a      	movs	r1, #42	@ 0x2a
 80056be:	438a      	bics	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2101      	movs	r1, #1
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 fac9 	bl	8005c6c <UART_CheckIdleState>
 80056da:	0003      	movs	r3, r0
}
 80056dc:	0018      	movs	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	b002      	add	sp, #8
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	ffffb7ff 	.word	0xffffb7ff

080056e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	@ 0x28
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	1dbb      	adds	r3, r7, #6
 80056f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2288      	movs	r2, #136	@ 0x88
 80056fc:	589b      	ldr	r3, [r3, r2]
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d000      	beq.n	8005704 <HAL_UART_Transmit+0x1c>
 8005702:	e090      	b.n	8005826 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_UART_Transmit+0x2a>
 800570a:	1dbb      	adds	r3, r7, #6
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e088      	b.n	8005828 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	2380      	movs	r3, #128	@ 0x80
 800571c:	015b      	lsls	r3, r3, #5
 800571e:	429a      	cmp	r2, r3
 8005720:	d109      	bne.n	8005736 <HAL_UART_Transmit+0x4e>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d105      	bne.n	8005736 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2201      	movs	r2, #1
 800572e:	4013      	ands	r3, r2
 8005730:	d001      	beq.n	8005736 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e078      	b.n	8005828 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2290      	movs	r2, #144	@ 0x90
 800573a:	2100      	movs	r1, #0
 800573c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2288      	movs	r2, #136	@ 0x88
 8005742:	2121      	movs	r1, #33	@ 0x21
 8005744:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005746:	f7fd fc99 	bl	800307c <HAL_GetTick>
 800574a:	0003      	movs	r3, r0
 800574c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1dba      	adds	r2, r7, #6
 8005752:	2154      	movs	r1, #84	@ 0x54
 8005754:	8812      	ldrh	r2, [r2, #0]
 8005756:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	1dba      	adds	r2, r7, #6
 800575c:	2156      	movs	r1, #86	@ 0x56
 800575e:	8812      	ldrh	r2, [r2, #0]
 8005760:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	2380      	movs	r3, #128	@ 0x80
 8005768:	015b      	lsls	r3, r3, #5
 800576a:	429a      	cmp	r2, r3
 800576c:	d108      	bne.n	8005780 <HAL_UART_Transmit+0x98>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e003      	b.n	8005788 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005788:	e030      	b.n	80057ec <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	0013      	movs	r3, r2
 8005794:	2200      	movs	r2, #0
 8005796:	2180      	movs	r1, #128	@ 0x80
 8005798:	f000 fb12 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d005      	beq.n	80057ac <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2288      	movs	r2, #136	@ 0x88
 80057a4:	2120      	movs	r1, #32
 80057a6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e03d      	b.n	8005828 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	001a      	movs	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	05d2      	lsls	r2, r2, #23
 80057be:	0dd2      	lsrs	r2, r2, #23
 80057c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3302      	adds	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e007      	b.n	80057da <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2256      	movs	r2, #86	@ 0x56
 80057de:	5a9b      	ldrh	r3, [r3, r2]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b299      	uxth	r1, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2256      	movs	r2, #86	@ 0x56
 80057ea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2256      	movs	r2, #86	@ 0x56
 80057f0:	5a9b      	ldrh	r3, [r3, r2]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1c8      	bne.n	800578a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	0013      	movs	r3, r2
 8005802:	2200      	movs	r2, #0
 8005804:	2140      	movs	r1, #64	@ 0x40
 8005806:	f000 fadb 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 800580a:	1e03      	subs	r3, r0, #0
 800580c:	d005      	beq.n	800581a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2288      	movs	r2, #136	@ 0x88
 8005812:	2120      	movs	r1, #32
 8005814:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e006      	b.n	8005828 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2288      	movs	r2, #136	@ 0x88
 800581e:	2120      	movs	r1, #32
 8005820:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b008      	add	sp, #32
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005838:	231a      	movs	r3, #26
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	431a      	orrs	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	4313      	orrs	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4aa1      	ldr	r2, [pc, #644]	@ (8005ae4 <UART_SetConfig+0x2b4>)
 8005860:	4013      	ands	r3, r2
 8005862:	0019      	movs	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a9c      	ldr	r2, [pc, #624]	@ (8005ae8 <UART_SetConfig+0x2b8>)
 8005876:	4013      	ands	r3, r2
 8005878:	0019      	movs	r1, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	4313      	orrs	r3, r2
 8005894:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4a93      	ldr	r2, [pc, #588]	@ (8005aec <UART_SetConfig+0x2bc>)
 800589e:	4013      	ands	r3, r2
 80058a0:	0019      	movs	r1, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	220f      	movs	r2, #15
 80058b4:	4393      	bics	r3, r2
 80058b6:	0019      	movs	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a89      	ldr	r2, [pc, #548]	@ (8005af0 <UART_SetConfig+0x2c0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d127      	bne.n	800591e <UART_SetConfig+0xee>
 80058ce:	4b89      	ldr	r3, [pc, #548]	@ (8005af4 <UART_SetConfig+0x2c4>)
 80058d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d2:	2203      	movs	r2, #3
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d017      	beq.n	800590a <UART_SetConfig+0xda>
 80058da:	d81b      	bhi.n	8005914 <UART_SetConfig+0xe4>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d00a      	beq.n	80058f6 <UART_SetConfig+0xc6>
 80058e0:	d818      	bhi.n	8005914 <UART_SetConfig+0xe4>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <UART_SetConfig+0xbc>
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d00a      	beq.n	8005900 <UART_SetConfig+0xd0>
 80058ea:	e013      	b.n	8005914 <UART_SetConfig+0xe4>
 80058ec:	231b      	movs	r3, #27
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e021      	b.n	800593a <UART_SetConfig+0x10a>
 80058f6:	231b      	movs	r3, #27
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	2202      	movs	r2, #2
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e01c      	b.n	800593a <UART_SetConfig+0x10a>
 8005900:	231b      	movs	r3, #27
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	2204      	movs	r2, #4
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e017      	b.n	800593a <UART_SetConfig+0x10a>
 800590a:	231b      	movs	r3, #27
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	2208      	movs	r2, #8
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	e012      	b.n	800593a <UART_SetConfig+0x10a>
 8005914:	231b      	movs	r3, #27
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	2210      	movs	r2, #16
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e00d      	b.n	800593a <UART_SetConfig+0x10a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a75      	ldr	r2, [pc, #468]	@ (8005af8 <UART_SetConfig+0x2c8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d104      	bne.n	8005932 <UART_SetConfig+0x102>
 8005928:	231b      	movs	r3, #27
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	e003      	b.n	800593a <UART_SetConfig+0x10a>
 8005932:	231b      	movs	r3, #27
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	2210      	movs	r2, #16
 8005938:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	2380      	movs	r3, #128	@ 0x80
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	429a      	cmp	r2, r3
 8005944:	d000      	beq.n	8005948 <UART_SetConfig+0x118>
 8005946:	e065      	b.n	8005a14 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8005948:	231b      	movs	r3, #27
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b08      	cmp	r3, #8
 8005950:	d015      	beq.n	800597e <UART_SetConfig+0x14e>
 8005952:	dc18      	bgt.n	8005986 <UART_SetConfig+0x156>
 8005954:	2b04      	cmp	r3, #4
 8005956:	d00d      	beq.n	8005974 <UART_SetConfig+0x144>
 8005958:	dc15      	bgt.n	8005986 <UART_SetConfig+0x156>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <UART_SetConfig+0x134>
 800595e:	2b02      	cmp	r3, #2
 8005960:	d005      	beq.n	800596e <UART_SetConfig+0x13e>
 8005962:	e010      	b.n	8005986 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005964:	f7ff fbe0 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8005968:	0003      	movs	r3, r0
 800596a:	617b      	str	r3, [r7, #20]
        break;
 800596c:	e012      	b.n	8005994 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800596e:	4b63      	ldr	r3, [pc, #396]	@ (8005afc <UART_SetConfig+0x2cc>)
 8005970:	617b      	str	r3, [r7, #20]
        break;
 8005972:	e00f      	b.n	8005994 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005974:	f7ff fb4c 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8005978:	0003      	movs	r3, r0
 800597a:	617b      	str	r3, [r7, #20]
        break;
 800597c:	e00a      	b.n	8005994 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800597e:	2380      	movs	r3, #128	@ 0x80
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	617b      	str	r3, [r7, #20]
        break;
 8005984:	e006      	b.n	8005994 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800598a:	231a      	movs	r3, #26
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
        break;
 8005992:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d100      	bne.n	800599c <UART_SetConfig+0x16c>
 800599a:	e08d      	b.n	8005ab8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059a0:	4b57      	ldr	r3, [pc, #348]	@ (8005b00 <UART_SetConfig+0x2d0>)
 80059a2:	0052      	lsls	r2, r2, #1
 80059a4:	5ad3      	ldrh	r3, [r2, r3]
 80059a6:	0019      	movs	r1, r3
 80059a8:	6978      	ldr	r0, [r7, #20]
 80059aa:	f7fa fbc5 	bl	8000138 <__udivsi3>
 80059ae:	0003      	movs	r3, r0
 80059b0:	005a      	lsls	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	18d2      	adds	r2, r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	0019      	movs	r1, r3
 80059c0:	0010      	movs	r0, r2
 80059c2:	f7fa fbb9 	bl	8000138 <__udivsi3>
 80059c6:	0003      	movs	r3, r0
 80059c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b0f      	cmp	r3, #15
 80059ce:	d91c      	bls.n	8005a0a <UART_SetConfig+0x1da>
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	025b      	lsls	r3, r3, #9
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d217      	bcs.n	8005a0a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	b29a      	uxth	r2, r3
 80059de:	200e      	movs	r0, #14
 80059e0:	183b      	adds	r3, r7, r0
 80059e2:	210f      	movs	r1, #15
 80059e4:	438a      	bics	r2, r1
 80059e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2207      	movs	r2, #7
 80059f0:	4013      	ands	r3, r2
 80059f2:	b299      	uxth	r1, r3
 80059f4:	183b      	adds	r3, r7, r0
 80059f6:	183a      	adds	r2, r7, r0
 80059f8:	8812      	ldrh	r2, [r2, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	183a      	adds	r2, r7, r0
 8005a04:	8812      	ldrh	r2, [r2, #0]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e056      	b.n	8005ab8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005a0a:	231a      	movs	r3, #26
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e051      	b.n	8005ab8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a14:	231b      	movs	r3, #27
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d015      	beq.n	8005a4a <UART_SetConfig+0x21a>
 8005a1e:	dc18      	bgt.n	8005a52 <UART_SetConfig+0x222>
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d00d      	beq.n	8005a40 <UART_SetConfig+0x210>
 8005a24:	dc15      	bgt.n	8005a52 <UART_SetConfig+0x222>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <UART_SetConfig+0x200>
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d005      	beq.n	8005a3a <UART_SetConfig+0x20a>
 8005a2e:	e010      	b.n	8005a52 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a30:	f7ff fb7a 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 8005a34:	0003      	movs	r3, r0
 8005a36:	617b      	str	r3, [r7, #20]
        break;
 8005a38:	e012      	b.n	8005a60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a3a:	4b30      	ldr	r3, [pc, #192]	@ (8005afc <UART_SetConfig+0x2cc>)
 8005a3c:	617b      	str	r3, [r7, #20]
        break;
 8005a3e:	e00f      	b.n	8005a60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a40:	f7ff fae6 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8005a44:	0003      	movs	r3, r0
 8005a46:	617b      	str	r3, [r7, #20]
        break;
 8005a48:	e00a      	b.n	8005a60 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	617b      	str	r3, [r7, #20]
        break;
 8005a50:	e006      	b.n	8005a60 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a56:	231a      	movs	r3, #26
 8005a58:	18fb      	adds	r3, r7, r3
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
        break;
 8005a5e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d028      	beq.n	8005ab8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a6a:	4b25      	ldr	r3, [pc, #148]	@ (8005b00 <UART_SetConfig+0x2d0>)
 8005a6c:	0052      	lsls	r2, r2, #1
 8005a6e:	5ad3      	ldrh	r3, [r2, r3]
 8005a70:	0019      	movs	r1, r3
 8005a72:	6978      	ldr	r0, [r7, #20]
 8005a74:	f7fa fb60 	bl	8000138 <__udivsi3>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	18d2      	adds	r2, r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	0019      	movs	r1, r3
 8005a8a:	0010      	movs	r0, r2
 8005a8c:	f7fa fb54 	bl	8000138 <__udivsi3>
 8005a90:	0003      	movs	r3, r0
 8005a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2b0f      	cmp	r3, #15
 8005a98:	d90a      	bls.n	8005ab0 <UART_SetConfig+0x280>
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	2380      	movs	r3, #128	@ 0x80
 8005a9e:	025b      	lsls	r3, r3, #9
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d205      	bcs.n	8005ab0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60da      	str	r2, [r3, #12]
 8005aae:	e003      	b.n	8005ab8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab0:	231a      	movs	r3, #26
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	226a      	movs	r2, #106	@ 0x6a
 8005abc:	2101      	movs	r1, #1
 8005abe:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2268      	movs	r2, #104	@ 0x68
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005ad4:	231a      	movs	r3, #26
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	781b      	ldrb	r3, [r3, #0]
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b008      	add	sp, #32
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	cfff69f3 	.word	0xcfff69f3
 8005ae8:	ffffcfff 	.word	0xffffcfff
 8005aec:	11fff4ff 	.word	0x11fff4ff
 8005af0:	40013800 	.word	0x40013800
 8005af4:	40021000 	.word	0x40021000
 8005af8:	40004400 	.word	0x40004400
 8005afc:	00f42400 	.word	0x00f42400
 8005b00:	08009240 	.word	0x08009240

08005b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	2208      	movs	r2, #8
 8005b12:	4013      	ands	r3, r2
 8005b14:	d00b      	beq.n	8005b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005c48 <UART_AdvFeatureConfig+0x144>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	0019      	movs	r1, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	2201      	movs	r2, #1
 8005b34:	4013      	ands	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4a43      	ldr	r2, [pc, #268]	@ (8005c4c <UART_AdvFeatureConfig+0x148>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	0019      	movs	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b54:	2202      	movs	r2, #2
 8005b56:	4013      	ands	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4a3b      	ldr	r2, [pc, #236]	@ (8005c50 <UART_AdvFeatureConfig+0x14c>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	0019      	movs	r1, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	2204      	movs	r2, #4
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4a34      	ldr	r2, [pc, #208]	@ (8005c54 <UART_AdvFeatureConfig+0x150>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	0019      	movs	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	2210      	movs	r2, #16
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d00b      	beq.n	8005bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c58 <UART_AdvFeatureConfig+0x154>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	0019      	movs	r1, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	2220      	movs	r2, #32
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4a25      	ldr	r2, [pc, #148]	@ (8005c5c <UART_AdvFeatureConfig+0x158>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	0019      	movs	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	2240      	movs	r2, #64	@ 0x40
 8005bde:	4013      	ands	r3, r2
 8005be0:	d01d      	beq.n	8005c1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c60 <UART_AdvFeatureConfig+0x15c>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	0019      	movs	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bfe:	2380      	movs	r3, #128	@ 0x80
 8005c00:	035b      	lsls	r3, r3, #13
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d10b      	bne.n	8005c1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	@ (8005c64 <UART_AdvFeatureConfig+0x160>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	0019      	movs	r1, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c22:	2280      	movs	r2, #128	@ 0x80
 8005c24:	4013      	ands	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005c68 <UART_AdvFeatureConfig+0x164>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	605a      	str	r2, [r3, #4]
  }
}
 8005c40:	46c0      	nop			@ (mov r8, r8)
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b002      	add	sp, #8
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	ffff7fff 	.word	0xffff7fff
 8005c4c:	fffdffff 	.word	0xfffdffff
 8005c50:	fffeffff 	.word	0xfffeffff
 8005c54:	fffbffff 	.word	0xfffbffff
 8005c58:	ffffefff 	.word	0xffffefff
 8005c5c:	ffffdfff 	.word	0xffffdfff
 8005c60:	ffefffff 	.word	0xffefffff
 8005c64:	ff9fffff 	.word	0xff9fffff
 8005c68:	fff7ffff 	.word	0xfff7ffff

08005c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b092      	sub	sp, #72	@ 0x48
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2290      	movs	r2, #144	@ 0x90
 8005c78:	2100      	movs	r1, #0
 8005c7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c7c:	f7fd f9fe 	bl	800307c <HAL_GetTick>
 8005c80:	0003      	movs	r3, r0
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d12d      	bne.n	8005cee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c94:	2280      	movs	r2, #128	@ 0x80
 8005c96:	0391      	lsls	r1, r2, #14
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4a47      	ldr	r2, [pc, #284]	@ (8005db8 <UART_CheckIdleState+0x14c>)
 8005c9c:	9200      	str	r2, [sp, #0]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f000 f88e 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005ca4:	1e03      	subs	r3, r0, #0
 8005ca6:	d022      	beq.n	8005cee <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	f383 8810 	msr	PRIMASK, r3
}
 8005cbc:	46c0      	nop			@ (mov r8, r8)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2180      	movs	r1, #128	@ 0x80
 8005cca:	438a      	bics	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2288      	movs	r2, #136	@ 0x88
 8005cde:	2120      	movs	r1, #32
 8005ce0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2284      	movs	r2, #132	@ 0x84
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e060      	b.n	8005db0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d146      	bne.n	8005d8a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfe:	2280      	movs	r2, #128	@ 0x80
 8005d00:	03d1      	lsls	r1, r2, #15
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	@ (8005db8 <UART_CheckIdleState+0x14c>)
 8005d06:	9200      	str	r2, [sp, #0]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f000 f859 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005d0e:	1e03      	subs	r3, r0, #0
 8005d10:	d03b      	beq.n	8005d8a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d12:	f3ef 8310 	mrs	r3, PRIMASK
 8005d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d18:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f383 8810 	msr	PRIMASK, r3
}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4922      	ldr	r1, [pc, #136]	@ (8005dbc <UART_CheckIdleState+0x150>)
 8005d34:	400a      	ands	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f383 8810 	msr	PRIMASK, r3
}
 8005d42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d44:	f3ef 8310 	mrs	r3, PRIMASK
 8005d48:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d4e:	2301      	movs	r3, #1
 8005d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			@ (mov r8, r8)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2101      	movs	r1, #1
 8005d66:	438a      	bics	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	228c      	movs	r2, #140	@ 0x8c
 8005d7a:	2120      	movs	r1, #32
 8005d7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2284      	movs	r2, #132	@ 0x84
 8005d82:	2100      	movs	r1, #0
 8005d84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e012      	b.n	8005db0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2288      	movs	r2, #136	@ 0x88
 8005d8e:	2120      	movs	r1, #32
 8005d90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	228c      	movs	r2, #140	@ 0x8c
 8005d96:	2120      	movs	r1, #32
 8005d98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2284      	movs	r2, #132	@ 0x84
 8005daa:	2100      	movs	r1, #0
 8005dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b010      	add	sp, #64	@ 0x40
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	01ffffff 	.word	0x01ffffff
 8005dbc:	fffffedf 	.word	0xfffffedf

08005dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	1dfb      	adds	r3, r7, #7
 8005dce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd0:	e051      	b.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	d04e      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd8:	f7fd f950 	bl	800307c <HAL_GetTick>
 8005ddc:	0002      	movs	r2, r0
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <UART_WaitOnFlagUntilTimeout+0x2e>
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e051      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2204      	movs	r2, #4
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d03b      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b80      	cmp	r3, #128	@ 0x80
 8005e02:	d038      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d035      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	2208      	movs	r2, #8
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d111      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 f83c 	bl	8005ea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2290      	movs	r2, #144	@ 0x90
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2284      	movs	r2, #132	@ 0x84
 8005e34:	2100      	movs	r1, #0
 8005e36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e02c      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	2380      	movs	r3, #128	@ 0x80
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	401a      	ands	r2, r3
 8005e48:	2380      	movs	r3, #128	@ 0x80
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d112      	bne.n	8005e76 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2280      	movs	r2, #128	@ 0x80
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 f81f 	bl	8005ea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2290      	movs	r2, #144	@ 0x90
 8005e66:	2120      	movs	r1, #32
 8005e68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2284      	movs	r2, #132	@ 0x84
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e00f      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	425a      	negs	r2, r3
 8005e86:	4153      	adcs	r3, r2
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d09e      	beq.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08e      	sub	sp, #56	@ 0x38
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8005eac:	617b      	str	r3, [r7, #20]
  return(result);
 8005eae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f383 8810 	msr	PRIMASK, r3
}
 8005ebc:	46c0      	nop			@ (mov r8, r8)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4926      	ldr	r1, [pc, #152]	@ (8005f64 <UART_EndRxTransfer+0xc4>)
 8005eca:	400a      	ands	r2, r1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f383 8810 	msr	PRIMASK, r3
}
 8005ed8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eda:	f3ef 8310 	mrs	r3, PRIMASK
 8005ede:	623b      	str	r3, [r7, #32]
  return(result);
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	f383 8810 	msr	PRIMASK, r3
}
 8005eee:	46c0      	nop			@ (mov r8, r8)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	491b      	ldr	r1, [pc, #108]	@ (8005f68 <UART_EndRxTransfer+0xc8>)
 8005efc:	400a      	ands	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	f383 8810 	msr	PRIMASK, r3
}
 8005f0a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d118      	bne.n	8005f46 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f14:	f3ef 8310 	mrs	r3, PRIMASK
 8005f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1e:	2301      	movs	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f383 8810 	msr	PRIMASK, r3
}
 8005f28:	46c0      	nop			@ (mov r8, r8)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2110      	movs	r1, #16
 8005f36:	438a      	bics	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f383 8810 	msr	PRIMASK, r3
}
 8005f44:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	228c      	movs	r2, #140	@ 0x8c
 8005f4a:	2120      	movs	r1, #32
 8005f4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b00e      	add	sp, #56	@ 0x38
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	fffffedf 	.word	0xfffffedf
 8005f68:	effffffe 	.word	0xeffffffe

08005f6c <__cvt>:
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	001f      	movs	r7, r3
 8005f70:	2300      	movs	r3, #0
 8005f72:	0016      	movs	r6, r2
 8005f74:	b08b      	sub	sp, #44	@ 0x2c
 8005f76:	429f      	cmp	r7, r3
 8005f78:	da04      	bge.n	8005f84 <__cvt+0x18>
 8005f7a:	2180      	movs	r1, #128	@ 0x80
 8005f7c:	0609      	lsls	r1, r1, #24
 8005f7e:	187b      	adds	r3, r7, r1
 8005f80:	001f      	movs	r7, r3
 8005f82:	232d      	movs	r3, #45	@ 0x2d
 8005f84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f86:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005f88:	7013      	strb	r3, [r2, #0]
 8005f8a:	2320      	movs	r3, #32
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	439d      	bics	r5, r3
 8005f90:	2d46      	cmp	r5, #70	@ 0x46
 8005f92:	d007      	beq.n	8005fa4 <__cvt+0x38>
 8005f94:	002b      	movs	r3, r5
 8005f96:	3b45      	subs	r3, #69	@ 0x45
 8005f98:	4259      	negs	r1, r3
 8005f9a:	414b      	adcs	r3, r1
 8005f9c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005f9e:	3a01      	subs	r2, #1
 8005fa0:	18cb      	adds	r3, r1, r3
 8005fa2:	9310      	str	r3, [sp, #64]	@ 0x40
 8005fa4:	ab09      	add	r3, sp, #36	@ 0x24
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	ab08      	add	r3, sp, #32
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005fae:	9200      	str	r2, [sp, #0]
 8005fb0:	9302      	str	r3, [sp, #8]
 8005fb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fb4:	0032      	movs	r2, r6
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	003b      	movs	r3, r7
 8005fba:	f000 fe81 	bl	8006cc0 <_dtoa_r>
 8005fbe:	0004      	movs	r4, r0
 8005fc0:	2d47      	cmp	r5, #71	@ 0x47
 8005fc2:	d11b      	bne.n	8005ffc <__cvt+0x90>
 8005fc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005fc6:	07db      	lsls	r3, r3, #31
 8005fc8:	d511      	bpl.n	8005fee <__cvt+0x82>
 8005fca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fcc:	18c3      	adds	r3, r0, r3
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	0030      	movs	r0, r6
 8005fd6:	0039      	movs	r1, r7
 8005fd8:	f7fa fa34 	bl	8000444 <__aeabi_dcmpeq>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d001      	beq.n	8005fe4 <__cvt+0x78>
 8005fe0:	9b07      	ldr	r3, [sp, #28]
 8005fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe4:	2230      	movs	r2, #48	@ 0x30
 8005fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe8:	9907      	ldr	r1, [sp, #28]
 8005fea:	428b      	cmp	r3, r1
 8005fec:	d320      	bcc.n	8006030 <__cvt+0xc4>
 8005fee:	0020      	movs	r0, r4
 8005ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005ff4:	1b1b      	subs	r3, r3, r4
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	b00b      	add	sp, #44	@ 0x2c
 8005ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ffe:	18c3      	adds	r3, r0, r3
 8006000:	9307      	str	r3, [sp, #28]
 8006002:	2d46      	cmp	r5, #70	@ 0x46
 8006004:	d1e4      	bne.n	8005fd0 <__cvt+0x64>
 8006006:	7803      	ldrb	r3, [r0, #0]
 8006008:	2b30      	cmp	r3, #48	@ 0x30
 800600a:	d10c      	bne.n	8006026 <__cvt+0xba>
 800600c:	2200      	movs	r2, #0
 800600e:	2300      	movs	r3, #0
 8006010:	0030      	movs	r0, r6
 8006012:	0039      	movs	r1, r7
 8006014:	f7fa fa16 	bl	8000444 <__aeabi_dcmpeq>
 8006018:	2800      	cmp	r0, #0
 800601a:	d104      	bne.n	8006026 <__cvt+0xba>
 800601c:	2301      	movs	r3, #1
 800601e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006028:	9a07      	ldr	r2, [sp, #28]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	18d3      	adds	r3, r2, r3
 800602e:	e7ce      	b.n	8005fce <__cvt+0x62>
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	9109      	str	r1, [sp, #36]	@ 0x24
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e7d6      	b.n	8005fe6 <__cvt+0x7a>

08006038 <__exponent>:
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603a:	232b      	movs	r3, #43	@ 0x2b
 800603c:	b085      	sub	sp, #20
 800603e:	0005      	movs	r5, r0
 8006040:	1e0c      	subs	r4, r1, #0
 8006042:	7002      	strb	r2, [r0, #0]
 8006044:	da01      	bge.n	800604a <__exponent+0x12>
 8006046:	424c      	negs	r4, r1
 8006048:	3302      	adds	r3, #2
 800604a:	706b      	strb	r3, [r5, #1]
 800604c:	2c09      	cmp	r4, #9
 800604e:	dd2c      	ble.n	80060aa <__exponent+0x72>
 8006050:	ab02      	add	r3, sp, #8
 8006052:	1dde      	adds	r6, r3, #7
 8006054:	0020      	movs	r0, r4
 8006056:	210a      	movs	r1, #10
 8006058:	f7fa f9de 	bl	8000418 <__aeabi_idivmod>
 800605c:	0037      	movs	r7, r6
 800605e:	3130      	adds	r1, #48	@ 0x30
 8006060:	3e01      	subs	r6, #1
 8006062:	0020      	movs	r0, r4
 8006064:	7031      	strb	r1, [r6, #0]
 8006066:	210a      	movs	r1, #10
 8006068:	9401      	str	r4, [sp, #4]
 800606a:	f7fa f8ef 	bl	800024c <__divsi3>
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	0004      	movs	r4, r0
 8006072:	2b63      	cmp	r3, #99	@ 0x63
 8006074:	dcee      	bgt.n	8006054 <__exponent+0x1c>
 8006076:	1eba      	subs	r2, r7, #2
 8006078:	1ca8      	adds	r0, r5, #2
 800607a:	0001      	movs	r1, r0
 800607c:	0013      	movs	r3, r2
 800607e:	3430      	adds	r4, #48	@ 0x30
 8006080:	7014      	strb	r4, [r2, #0]
 8006082:	ac02      	add	r4, sp, #8
 8006084:	3407      	adds	r4, #7
 8006086:	429c      	cmp	r4, r3
 8006088:	d80a      	bhi.n	80060a0 <__exponent+0x68>
 800608a:	2300      	movs	r3, #0
 800608c:	4294      	cmp	r4, r2
 800608e:	d303      	bcc.n	8006098 <__exponent+0x60>
 8006090:	3309      	adds	r3, #9
 8006092:	aa02      	add	r2, sp, #8
 8006094:	189b      	adds	r3, r3, r2
 8006096:	1bdb      	subs	r3, r3, r7
 8006098:	18c0      	adds	r0, r0, r3
 800609a:	1b40      	subs	r0, r0, r5
 800609c:	b005      	add	sp, #20
 800609e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a0:	781c      	ldrb	r4, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	700c      	strb	r4, [r1, #0]
 80060a6:	3101      	adds	r1, #1
 80060a8:	e7eb      	b.n	8006082 <__exponent+0x4a>
 80060aa:	2330      	movs	r3, #48	@ 0x30
 80060ac:	18e4      	adds	r4, r4, r3
 80060ae:	70ab      	strb	r3, [r5, #2]
 80060b0:	1d28      	adds	r0, r5, #4
 80060b2:	70ec      	strb	r4, [r5, #3]
 80060b4:	e7f1      	b.n	800609a <__exponent+0x62>
	...

080060b8 <_printf_float>:
 80060b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ba:	b097      	sub	sp, #92	@ 0x5c
 80060bc:	000d      	movs	r5, r1
 80060be:	920a      	str	r2, [sp, #40]	@ 0x28
 80060c0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80060c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80060c6:	f000 fceb 	bl	8006aa0 <_localeconv_r>
 80060ca:	6803      	ldr	r3, [r0, #0]
 80060cc:	0018      	movs	r0, r3
 80060ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80060d0:	f7fa f816 	bl	8000100 <strlen>
 80060d4:	2300      	movs	r3, #0
 80060d6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80060d8:	9314      	str	r3, [sp, #80]	@ 0x50
 80060da:	7e2b      	ldrb	r3, [r5, #24]
 80060dc:	2207      	movs	r2, #7
 80060de:	930c      	str	r3, [sp, #48]	@ 0x30
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80060e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	05c9      	lsls	r1, r1, #23
 80060ea:	d545      	bpl.n	8006178 <_printf_float+0xc0>
 80060ec:	189b      	adds	r3, r3, r2
 80060ee:	4393      	bics	r3, r2
 80060f0:	001a      	movs	r2, r3
 80060f2:	3208      	adds	r2, #8
 80060f4:	6022      	str	r2, [r4, #0]
 80060f6:	2201      	movs	r2, #1
 80060f8:	681e      	ldr	r6, [r3, #0]
 80060fa:	685f      	ldr	r7, [r3, #4]
 80060fc:	007b      	lsls	r3, r7, #1
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	9311      	str	r3, [sp, #68]	@ 0x44
 8006102:	9610      	str	r6, [sp, #64]	@ 0x40
 8006104:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006106:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006108:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800610a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800610c:	4ba7      	ldr	r3, [pc, #668]	@ (80063ac <_printf_float+0x2f4>)
 800610e:	4252      	negs	r2, r2
 8006110:	f7fc f8d4 	bl	80022bc <__aeabi_dcmpun>
 8006114:	2800      	cmp	r0, #0
 8006116:	d131      	bne.n	800617c <_printf_float+0xc4>
 8006118:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800611a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800611c:	2201      	movs	r2, #1
 800611e:	4ba3      	ldr	r3, [pc, #652]	@ (80063ac <_printf_float+0x2f4>)
 8006120:	4252      	negs	r2, r2
 8006122:	f7fa f99f 	bl	8000464 <__aeabi_dcmple>
 8006126:	2800      	cmp	r0, #0
 8006128:	d128      	bne.n	800617c <_printf_float+0xc4>
 800612a:	2200      	movs	r2, #0
 800612c:	2300      	movs	r3, #0
 800612e:	0030      	movs	r0, r6
 8006130:	0039      	movs	r1, r7
 8006132:	f7fa f98d 	bl	8000450 <__aeabi_dcmplt>
 8006136:	2800      	cmp	r0, #0
 8006138:	d003      	beq.n	8006142 <_printf_float+0x8a>
 800613a:	002b      	movs	r3, r5
 800613c:	222d      	movs	r2, #45	@ 0x2d
 800613e:	3343      	adds	r3, #67	@ 0x43
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006144:	4f9a      	ldr	r7, [pc, #616]	@ (80063b0 <_printf_float+0x2f8>)
 8006146:	2b47      	cmp	r3, #71	@ 0x47
 8006148:	d800      	bhi.n	800614c <_printf_float+0x94>
 800614a:	4f9a      	ldr	r7, [pc, #616]	@ (80063b4 <_printf_float+0x2fc>)
 800614c:	2303      	movs	r3, #3
 800614e:	2400      	movs	r4, #0
 8006150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006152:	612b      	str	r3, [r5, #16]
 8006154:	3301      	adds	r3, #1
 8006156:	439a      	bics	r2, r3
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800615c:	0029      	movs	r1, r5
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006164:	aa15      	add	r2, sp, #84	@ 0x54
 8006166:	f000 f9e5 	bl	8006534 <_printf_common>
 800616a:	3001      	adds	r0, #1
 800616c:	d000      	beq.n	8006170 <_printf_float+0xb8>
 800616e:	e09e      	b.n	80062ae <_printf_float+0x1f6>
 8006170:	2001      	movs	r0, #1
 8006172:	4240      	negs	r0, r0
 8006174:	b017      	add	sp, #92	@ 0x5c
 8006176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006178:	3307      	adds	r3, #7
 800617a:	e7b8      	b.n	80060ee <_printf_float+0x36>
 800617c:	0032      	movs	r2, r6
 800617e:	003b      	movs	r3, r7
 8006180:	0030      	movs	r0, r6
 8006182:	0039      	movs	r1, r7
 8006184:	f7fc f89a 	bl	80022bc <__aeabi_dcmpun>
 8006188:	2800      	cmp	r0, #0
 800618a:	d00b      	beq.n	80061a4 <_printf_float+0xec>
 800618c:	2f00      	cmp	r7, #0
 800618e:	da03      	bge.n	8006198 <_printf_float+0xe0>
 8006190:	002b      	movs	r3, r5
 8006192:	222d      	movs	r2, #45	@ 0x2d
 8006194:	3343      	adds	r3, #67	@ 0x43
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800619a:	4f87      	ldr	r7, [pc, #540]	@ (80063b8 <_printf_float+0x300>)
 800619c:	2b47      	cmp	r3, #71	@ 0x47
 800619e:	d8d5      	bhi.n	800614c <_printf_float+0x94>
 80061a0:	4f86      	ldr	r7, [pc, #536]	@ (80063bc <_printf_float+0x304>)
 80061a2:	e7d3      	b.n	800614c <_printf_float+0x94>
 80061a4:	2220      	movs	r2, #32
 80061a6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80061a8:	686b      	ldr	r3, [r5, #4]
 80061aa:	4394      	bics	r4, r2
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	d146      	bne.n	800623e <_printf_float+0x186>
 80061b0:	3307      	adds	r3, #7
 80061b2:	606b      	str	r3, [r5, #4]
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4313      	orrs	r3, r2
 80061bc:	2200      	movs	r2, #0
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	9206      	str	r2, [sp, #24]
 80061c2:	aa14      	add	r2, sp, #80	@ 0x50
 80061c4:	9205      	str	r2, [sp, #20]
 80061c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80061c8:	a90a      	add	r1, sp, #40	@ 0x28
 80061ca:	9204      	str	r2, [sp, #16]
 80061cc:	aa13      	add	r2, sp, #76	@ 0x4c
 80061ce:	9203      	str	r2, [sp, #12]
 80061d0:	2223      	movs	r2, #35	@ 0x23
 80061d2:	1852      	adds	r2, r2, r1
 80061d4:	9202      	str	r2, [sp, #8]
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	686b      	ldr	r3, [r5, #4]
 80061da:	0032      	movs	r2, r6
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e0:	003b      	movs	r3, r7
 80061e2:	f7ff fec3 	bl	8005f6c <__cvt>
 80061e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061e8:	0007      	movs	r7, r0
 80061ea:	2c47      	cmp	r4, #71	@ 0x47
 80061ec:	d12d      	bne.n	800624a <_printf_float+0x192>
 80061ee:	1cd3      	adds	r3, r2, #3
 80061f0:	db02      	blt.n	80061f8 <_printf_float+0x140>
 80061f2:	686b      	ldr	r3, [r5, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dd47      	ble.n	8006288 <_printf_float+0x1d0>
 80061f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061fa:	3b02      	subs	r3, #2
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8006200:	0028      	movs	r0, r5
 8006202:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006204:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006206:	3901      	subs	r1, #1
 8006208:	3050      	adds	r0, #80	@ 0x50
 800620a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800620c:	f7ff ff14 	bl	8006038 <__exponent>
 8006210:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006212:	0004      	movs	r4, r0
 8006214:	1813      	adds	r3, r2, r0
 8006216:	612b      	str	r3, [r5, #16]
 8006218:	2a01      	cmp	r2, #1
 800621a:	dc02      	bgt.n	8006222 <_printf_float+0x16a>
 800621c:	682a      	ldr	r2, [r5, #0]
 800621e:	07d2      	lsls	r2, r2, #31
 8006220:	d501      	bpl.n	8006226 <_printf_float+0x16e>
 8006222:	3301      	adds	r3, #1
 8006224:	612b      	str	r3, [r5, #16]
 8006226:	2323      	movs	r3, #35	@ 0x23
 8006228:	aa0a      	add	r2, sp, #40	@ 0x28
 800622a:	189b      	adds	r3, r3, r2
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d100      	bne.n	8006234 <_printf_float+0x17c>
 8006232:	e792      	b.n	800615a <_printf_float+0xa2>
 8006234:	002b      	movs	r3, r5
 8006236:	222d      	movs	r2, #45	@ 0x2d
 8006238:	3343      	adds	r3, #67	@ 0x43
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e78d      	b.n	800615a <_printf_float+0xa2>
 800623e:	2c47      	cmp	r4, #71	@ 0x47
 8006240:	d1b8      	bne.n	80061b4 <_printf_float+0xfc>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1b6      	bne.n	80061b4 <_printf_float+0xfc>
 8006246:	3301      	adds	r3, #1
 8006248:	e7b3      	b.n	80061b2 <_printf_float+0xfa>
 800624a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800624c:	2b65      	cmp	r3, #101	@ 0x65
 800624e:	d9d7      	bls.n	8006200 <_printf_float+0x148>
 8006250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006252:	2b66      	cmp	r3, #102	@ 0x66
 8006254:	d11a      	bne.n	800628c <_printf_float+0x1d4>
 8006256:	686b      	ldr	r3, [r5, #4]
 8006258:	2a00      	cmp	r2, #0
 800625a:	dd09      	ble.n	8006270 <_printf_float+0x1b8>
 800625c:	612a      	str	r2, [r5, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <_printf_float+0x1b0>
 8006262:	6829      	ldr	r1, [r5, #0]
 8006264:	07c9      	lsls	r1, r1, #31
 8006266:	d50b      	bpl.n	8006280 <_printf_float+0x1c8>
 8006268:	3301      	adds	r3, #1
 800626a:	189b      	adds	r3, r3, r2
 800626c:	612b      	str	r3, [r5, #16]
 800626e:	e007      	b.n	8006280 <_printf_float+0x1c8>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <_printf_float+0x1c4>
 8006274:	2201      	movs	r2, #1
 8006276:	6829      	ldr	r1, [r5, #0]
 8006278:	4211      	tst	r1, r2
 800627a:	d000      	beq.n	800627e <_printf_float+0x1c6>
 800627c:	1c9a      	adds	r2, r3, #2
 800627e:	612a      	str	r2, [r5, #16]
 8006280:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006282:	2400      	movs	r4, #0
 8006284:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006286:	e7ce      	b.n	8006226 <_printf_float+0x16e>
 8006288:	2367      	movs	r3, #103	@ 0x67
 800628a:	930c      	str	r3, [sp, #48]	@ 0x30
 800628c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800628e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006290:	4299      	cmp	r1, r3
 8006292:	db06      	blt.n	80062a2 <_printf_float+0x1ea>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	6129      	str	r1, [r5, #16]
 8006298:	07db      	lsls	r3, r3, #31
 800629a:	d5f1      	bpl.n	8006280 <_printf_float+0x1c8>
 800629c:	3101      	adds	r1, #1
 800629e:	6129      	str	r1, [r5, #16]
 80062a0:	e7ee      	b.n	8006280 <_printf_float+0x1c8>
 80062a2:	2201      	movs	r2, #1
 80062a4:	2900      	cmp	r1, #0
 80062a6:	dce0      	bgt.n	800626a <_printf_float+0x1b2>
 80062a8:	1892      	adds	r2, r2, r2
 80062aa:	1a52      	subs	r2, r2, r1
 80062ac:	e7dd      	b.n	800626a <_printf_float+0x1b2>
 80062ae:	682a      	ldr	r2, [r5, #0]
 80062b0:	0553      	lsls	r3, r2, #21
 80062b2:	d408      	bmi.n	80062c6 <_printf_float+0x20e>
 80062b4:	692b      	ldr	r3, [r5, #16]
 80062b6:	003a      	movs	r2, r7
 80062b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062bc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062be:	47a0      	blx	r4
 80062c0:	3001      	adds	r0, #1
 80062c2:	d129      	bne.n	8006318 <_printf_float+0x260>
 80062c4:	e754      	b.n	8006170 <_printf_float+0xb8>
 80062c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062c8:	2b65      	cmp	r3, #101	@ 0x65
 80062ca:	d800      	bhi.n	80062ce <_printf_float+0x216>
 80062cc:	e0db      	b.n	8006486 <_printf_float+0x3ce>
 80062ce:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80062d0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	f7fa f8b5 	bl	8000444 <__aeabi_dcmpeq>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d033      	beq.n	8006346 <_printf_float+0x28e>
 80062de:	2301      	movs	r3, #1
 80062e0:	4a37      	ldr	r2, [pc, #220]	@ (80063c0 <_printf_float+0x308>)
 80062e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80062e8:	47a0      	blx	r4
 80062ea:	3001      	adds	r0, #1
 80062ec:	d100      	bne.n	80062f0 <_printf_float+0x238>
 80062ee:	e73f      	b.n	8006170 <_printf_float+0xb8>
 80062f0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80062f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062f4:	42b3      	cmp	r3, r6
 80062f6:	db02      	blt.n	80062fe <_printf_float+0x246>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	07db      	lsls	r3, r3, #31
 80062fc:	d50c      	bpl.n	8006318 <_printf_float+0x260>
 80062fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006302:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006308:	47a0      	blx	r4
 800630a:	2400      	movs	r4, #0
 800630c:	3001      	adds	r0, #1
 800630e:	d100      	bne.n	8006312 <_printf_float+0x25a>
 8006310:	e72e      	b.n	8006170 <_printf_float+0xb8>
 8006312:	1e73      	subs	r3, r6, #1
 8006314:	42a3      	cmp	r3, r4
 8006316:	dc0a      	bgt.n	800632e <_printf_float+0x276>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	079b      	lsls	r3, r3, #30
 800631c:	d500      	bpl.n	8006320 <_printf_float+0x268>
 800631e:	e106      	b.n	800652e <_printf_float+0x476>
 8006320:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006322:	68e8      	ldr	r0, [r5, #12]
 8006324:	4298      	cmp	r0, r3
 8006326:	db00      	blt.n	800632a <_printf_float+0x272>
 8006328:	e724      	b.n	8006174 <_printf_float+0xbc>
 800632a:	0018      	movs	r0, r3
 800632c:	e722      	b.n	8006174 <_printf_float+0xbc>
 800632e:	002a      	movs	r2, r5
 8006330:	2301      	movs	r3, #1
 8006332:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006334:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006336:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006338:	321a      	adds	r2, #26
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	d100      	bne.n	8006342 <_printf_float+0x28a>
 8006340:	e716      	b.n	8006170 <_printf_float+0xb8>
 8006342:	3401      	adds	r4, #1
 8006344:	e7e5      	b.n	8006312 <_printf_float+0x25a>
 8006346:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006348:	2b00      	cmp	r3, #0
 800634a:	dc3b      	bgt.n	80063c4 <_printf_float+0x30c>
 800634c:	2301      	movs	r3, #1
 800634e:	4a1c      	ldr	r2, [pc, #112]	@ (80063c0 <_printf_float+0x308>)
 8006350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006354:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006356:	47a0      	blx	r4
 8006358:	3001      	adds	r0, #1
 800635a:	d100      	bne.n	800635e <_printf_float+0x2a6>
 800635c:	e708      	b.n	8006170 <_printf_float+0xb8>
 800635e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006360:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006362:	4333      	orrs	r3, r6
 8006364:	d102      	bne.n	800636c <_printf_float+0x2b4>
 8006366:	682b      	ldr	r3, [r5, #0]
 8006368:	07db      	lsls	r3, r3, #31
 800636a:	d5d5      	bpl.n	8006318 <_printf_float+0x260>
 800636c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800636e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006370:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006374:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006376:	47a0      	blx	r4
 8006378:	2300      	movs	r3, #0
 800637a:	3001      	adds	r0, #1
 800637c:	d100      	bne.n	8006380 <_printf_float+0x2c8>
 800637e:	e6f7      	b.n	8006170 <_printf_float+0xb8>
 8006380:	930c      	str	r3, [sp, #48]	@ 0x30
 8006382:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006384:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006386:	425b      	negs	r3, r3
 8006388:	4293      	cmp	r3, r2
 800638a:	dc01      	bgt.n	8006390 <_printf_float+0x2d8>
 800638c:	0033      	movs	r3, r6
 800638e:	e792      	b.n	80062b6 <_printf_float+0x1fe>
 8006390:	002a      	movs	r2, r5
 8006392:	2301      	movs	r3, #1
 8006394:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006398:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800639a:	321a      	adds	r2, #26
 800639c:	47a0      	blx	r4
 800639e:	3001      	adds	r0, #1
 80063a0:	d100      	bne.n	80063a4 <_printf_float+0x2ec>
 80063a2:	e6e5      	b.n	8006170 <_printf_float+0xb8>
 80063a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063a6:	3301      	adds	r3, #1
 80063a8:	e7ea      	b.n	8006380 <_printf_float+0x2c8>
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	7fefffff 	.word	0x7fefffff
 80063b0:	0800925c 	.word	0x0800925c
 80063b4:	08009258 	.word	0x08009258
 80063b8:	08009264 	.word	0x08009264
 80063bc:	08009260 	.word	0x08009260
 80063c0:	08009268 	.word	0x08009268
 80063c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063c6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80063c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80063ca:	429e      	cmp	r6, r3
 80063cc:	dd00      	ble.n	80063d0 <_printf_float+0x318>
 80063ce:	001e      	movs	r6, r3
 80063d0:	2e00      	cmp	r6, #0
 80063d2:	dc31      	bgt.n	8006438 <_printf_float+0x380>
 80063d4:	43f3      	mvns	r3, r6
 80063d6:	2400      	movs	r4, #0
 80063d8:	17db      	asrs	r3, r3, #31
 80063da:	4033      	ands	r3, r6
 80063dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80063de:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80063e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063e2:	1af3      	subs	r3, r6, r3
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	dc30      	bgt.n	800644a <_printf_float+0x392>
 80063e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80063ec:	429a      	cmp	r2, r3
 80063ee:	dc38      	bgt.n	8006462 <_printf_float+0x3aa>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	07db      	lsls	r3, r3, #31
 80063f4:	d435      	bmi.n	8006462 <_printf_float+0x3aa>
 80063f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80063f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80063fc:	1b9b      	subs	r3, r3, r6
 80063fe:	1b14      	subs	r4, r2, r4
 8006400:	429c      	cmp	r4, r3
 8006402:	dd00      	ble.n	8006406 <_printf_float+0x34e>
 8006404:	001c      	movs	r4, r3
 8006406:	2c00      	cmp	r4, #0
 8006408:	dc34      	bgt.n	8006474 <_printf_float+0x3bc>
 800640a:	43e3      	mvns	r3, r4
 800640c:	2600      	movs	r6, #0
 800640e:	17db      	asrs	r3, r3, #31
 8006410:	401c      	ands	r4, r3
 8006412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006414:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	1b1b      	subs	r3, r3, r4
 800641a:	42b3      	cmp	r3, r6
 800641c:	dc00      	bgt.n	8006420 <_printf_float+0x368>
 800641e:	e77b      	b.n	8006318 <_printf_float+0x260>
 8006420:	002a      	movs	r2, r5
 8006422:	2301      	movs	r3, #1
 8006424:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006428:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800642a:	321a      	adds	r2, #26
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	d100      	bne.n	8006434 <_printf_float+0x37c>
 8006432:	e69d      	b.n	8006170 <_printf_float+0xb8>
 8006434:	3601      	adds	r6, #1
 8006436:	e7ec      	b.n	8006412 <_printf_float+0x35a>
 8006438:	0033      	movs	r3, r6
 800643a:	003a      	movs	r2, r7
 800643c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800643e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006440:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006442:	47a0      	blx	r4
 8006444:	3001      	adds	r0, #1
 8006446:	d1c5      	bne.n	80063d4 <_printf_float+0x31c>
 8006448:	e692      	b.n	8006170 <_printf_float+0xb8>
 800644a:	002a      	movs	r2, r5
 800644c:	2301      	movs	r3, #1
 800644e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006450:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006452:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006454:	321a      	adds	r2, #26
 8006456:	47b0      	blx	r6
 8006458:	3001      	adds	r0, #1
 800645a:	d100      	bne.n	800645e <_printf_float+0x3a6>
 800645c:	e688      	b.n	8006170 <_printf_float+0xb8>
 800645e:	3401      	adds	r4, #1
 8006460:	e7bd      	b.n	80063de <_printf_float+0x326>
 8006462:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006464:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006466:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006468:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800646a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800646c:	47a0      	blx	r4
 800646e:	3001      	adds	r0, #1
 8006470:	d1c1      	bne.n	80063f6 <_printf_float+0x33e>
 8006472:	e67d      	b.n	8006170 <_printf_float+0xb8>
 8006474:	19ba      	adds	r2, r7, r6
 8006476:	0023      	movs	r3, r4
 8006478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800647a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800647c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800647e:	47b0      	blx	r6
 8006480:	3001      	adds	r0, #1
 8006482:	d1c2      	bne.n	800640a <_printf_float+0x352>
 8006484:	e674      	b.n	8006170 <_printf_float+0xb8>
 8006486:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006488:	930c      	str	r3, [sp, #48]	@ 0x30
 800648a:	2b01      	cmp	r3, #1
 800648c:	dc02      	bgt.n	8006494 <_printf_float+0x3dc>
 800648e:	2301      	movs	r3, #1
 8006490:	421a      	tst	r2, r3
 8006492:	d039      	beq.n	8006508 <_printf_float+0x450>
 8006494:	2301      	movs	r3, #1
 8006496:	003a      	movs	r2, r7
 8006498:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800649a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800649c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800649e:	47b0      	blx	r6
 80064a0:	3001      	adds	r0, #1
 80064a2:	d100      	bne.n	80064a6 <_printf_float+0x3ee>
 80064a4:	e664      	b.n	8006170 <_printf_float+0xb8>
 80064a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80064aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80064b0:	47b0      	blx	r6
 80064b2:	3001      	adds	r0, #1
 80064b4:	d100      	bne.n	80064b8 <_printf_float+0x400>
 80064b6:	e65b      	b.n	8006170 <_printf_float+0xb8>
 80064b8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80064ba:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80064bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064be:	2200      	movs	r2, #0
 80064c0:	3b01      	subs	r3, #1
 80064c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80064c4:	2300      	movs	r3, #0
 80064c6:	f7f9 ffbd 	bl	8000444 <__aeabi_dcmpeq>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d11a      	bne.n	8006504 <_printf_float+0x44c>
 80064ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064d0:	1c7a      	adds	r2, r7, #1
 80064d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80064d8:	47b0      	blx	r6
 80064da:	3001      	adds	r0, #1
 80064dc:	d10e      	bne.n	80064fc <_printf_float+0x444>
 80064de:	e647      	b.n	8006170 <_printf_float+0xb8>
 80064e0:	002a      	movs	r2, r5
 80064e2:	2301      	movs	r3, #1
 80064e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80064ea:	321a      	adds	r2, #26
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	d100      	bne.n	80064f4 <_printf_float+0x43c>
 80064f2:	e63d      	b.n	8006170 <_printf_float+0xb8>
 80064f4:	3601      	adds	r6, #1
 80064f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064f8:	429e      	cmp	r6, r3
 80064fa:	dbf1      	blt.n	80064e0 <_printf_float+0x428>
 80064fc:	002a      	movs	r2, r5
 80064fe:	0023      	movs	r3, r4
 8006500:	3250      	adds	r2, #80	@ 0x50
 8006502:	e6d9      	b.n	80062b8 <_printf_float+0x200>
 8006504:	2600      	movs	r6, #0
 8006506:	e7f6      	b.n	80064f6 <_printf_float+0x43e>
 8006508:	003a      	movs	r2, r7
 800650a:	e7e2      	b.n	80064d2 <_printf_float+0x41a>
 800650c:	002a      	movs	r2, r5
 800650e:	2301      	movs	r3, #1
 8006510:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006514:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006516:	3219      	adds	r2, #25
 8006518:	47b0      	blx	r6
 800651a:	3001      	adds	r0, #1
 800651c:	d100      	bne.n	8006520 <_printf_float+0x468>
 800651e:	e627      	b.n	8006170 <_printf_float+0xb8>
 8006520:	3401      	adds	r4, #1
 8006522:	68eb      	ldr	r3, [r5, #12]
 8006524:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	42a3      	cmp	r3, r4
 800652a:	dcef      	bgt.n	800650c <_printf_float+0x454>
 800652c:	e6f8      	b.n	8006320 <_printf_float+0x268>
 800652e:	2400      	movs	r4, #0
 8006530:	e7f7      	b.n	8006522 <_printf_float+0x46a>
 8006532:	46c0      	nop			@ (mov r8, r8)

08006534 <_printf_common>:
 8006534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006536:	0016      	movs	r6, r2
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	688a      	ldr	r2, [r1, #8]
 800653c:	690b      	ldr	r3, [r1, #16]
 800653e:	000c      	movs	r4, r1
 8006540:	9000      	str	r0, [sp, #0]
 8006542:	4293      	cmp	r3, r2
 8006544:	da00      	bge.n	8006548 <_printf_common+0x14>
 8006546:	0013      	movs	r3, r2
 8006548:	0022      	movs	r2, r4
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	3243      	adds	r2, #67	@ 0x43
 800654e:	7812      	ldrb	r2, [r2, #0]
 8006550:	2a00      	cmp	r2, #0
 8006552:	d001      	beq.n	8006558 <_printf_common+0x24>
 8006554:	3301      	adds	r3, #1
 8006556:	6033      	str	r3, [r6, #0]
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	069b      	lsls	r3, r3, #26
 800655c:	d502      	bpl.n	8006564 <_printf_common+0x30>
 800655e:	6833      	ldr	r3, [r6, #0]
 8006560:	3302      	adds	r3, #2
 8006562:	6033      	str	r3, [r6, #0]
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	2306      	movs	r3, #6
 8006568:	0015      	movs	r5, r2
 800656a:	401d      	ands	r5, r3
 800656c:	421a      	tst	r2, r3
 800656e:	d027      	beq.n	80065c0 <_printf_common+0x8c>
 8006570:	0023      	movs	r3, r4
 8006572:	3343      	adds	r3, #67	@ 0x43
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	1e5a      	subs	r2, r3, #1
 8006578:	4193      	sbcs	r3, r2
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	0692      	lsls	r2, r2, #26
 800657e:	d430      	bmi.n	80065e2 <_printf_common+0xae>
 8006580:	0022      	movs	r2, r4
 8006582:	9901      	ldr	r1, [sp, #4]
 8006584:	9800      	ldr	r0, [sp, #0]
 8006586:	9d08      	ldr	r5, [sp, #32]
 8006588:	3243      	adds	r2, #67	@ 0x43
 800658a:	47a8      	blx	r5
 800658c:	3001      	adds	r0, #1
 800658e:	d025      	beq.n	80065dc <_printf_common+0xa8>
 8006590:	2206      	movs	r2, #6
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	2500      	movs	r5, #0
 8006596:	4013      	ands	r3, r2
 8006598:	2b04      	cmp	r3, #4
 800659a:	d105      	bne.n	80065a8 <_printf_common+0x74>
 800659c:	6833      	ldr	r3, [r6, #0]
 800659e:	68e5      	ldr	r5, [r4, #12]
 80065a0:	1aed      	subs	r5, r5, r3
 80065a2:	43eb      	mvns	r3, r5
 80065a4:	17db      	asrs	r3, r3, #31
 80065a6:	401d      	ands	r5, r3
 80065a8:	68a3      	ldr	r3, [r4, #8]
 80065aa:	6922      	ldr	r2, [r4, #16]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	dd01      	ble.n	80065b4 <_printf_common+0x80>
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	18ed      	adds	r5, r5, r3
 80065b4:	2600      	movs	r6, #0
 80065b6:	42b5      	cmp	r5, r6
 80065b8:	d120      	bne.n	80065fc <_printf_common+0xc8>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e010      	b.n	80065e0 <_printf_common+0xac>
 80065be:	3501      	adds	r5, #1
 80065c0:	68e3      	ldr	r3, [r4, #12]
 80065c2:	6832      	ldr	r2, [r6, #0]
 80065c4:	1a9b      	subs	r3, r3, r2
 80065c6:	42ab      	cmp	r3, r5
 80065c8:	ddd2      	ble.n	8006570 <_printf_common+0x3c>
 80065ca:	0022      	movs	r2, r4
 80065cc:	2301      	movs	r3, #1
 80065ce:	9901      	ldr	r1, [sp, #4]
 80065d0:	9800      	ldr	r0, [sp, #0]
 80065d2:	9f08      	ldr	r7, [sp, #32]
 80065d4:	3219      	adds	r2, #25
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	d1f0      	bne.n	80065be <_printf_common+0x8a>
 80065dc:	2001      	movs	r0, #1
 80065de:	4240      	negs	r0, r0
 80065e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065e2:	2030      	movs	r0, #48	@ 0x30
 80065e4:	18e1      	adds	r1, r4, r3
 80065e6:	3143      	adds	r1, #67	@ 0x43
 80065e8:	7008      	strb	r0, [r1, #0]
 80065ea:	0021      	movs	r1, r4
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	3145      	adds	r1, #69	@ 0x45
 80065f0:	7809      	ldrb	r1, [r1, #0]
 80065f2:	18a2      	adds	r2, r4, r2
 80065f4:	3243      	adds	r2, #67	@ 0x43
 80065f6:	3302      	adds	r3, #2
 80065f8:	7011      	strb	r1, [r2, #0]
 80065fa:	e7c1      	b.n	8006580 <_printf_common+0x4c>
 80065fc:	0022      	movs	r2, r4
 80065fe:	2301      	movs	r3, #1
 8006600:	9901      	ldr	r1, [sp, #4]
 8006602:	9800      	ldr	r0, [sp, #0]
 8006604:	9f08      	ldr	r7, [sp, #32]
 8006606:	321a      	adds	r2, #26
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	d0e6      	beq.n	80065dc <_printf_common+0xa8>
 800660e:	3601      	adds	r6, #1
 8006610:	e7d1      	b.n	80065b6 <_printf_common+0x82>
	...

08006614 <_printf_i>:
 8006614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006616:	b08b      	sub	sp, #44	@ 0x2c
 8006618:	9206      	str	r2, [sp, #24]
 800661a:	000a      	movs	r2, r1
 800661c:	3243      	adds	r2, #67	@ 0x43
 800661e:	9307      	str	r3, [sp, #28]
 8006620:	9005      	str	r0, [sp, #20]
 8006622:	9203      	str	r2, [sp, #12]
 8006624:	7e0a      	ldrb	r2, [r1, #24]
 8006626:	000c      	movs	r4, r1
 8006628:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800662a:	2a78      	cmp	r2, #120	@ 0x78
 800662c:	d809      	bhi.n	8006642 <_printf_i+0x2e>
 800662e:	2a62      	cmp	r2, #98	@ 0x62
 8006630:	d80b      	bhi.n	800664a <_printf_i+0x36>
 8006632:	2a00      	cmp	r2, #0
 8006634:	d100      	bne.n	8006638 <_printf_i+0x24>
 8006636:	e0ba      	b.n	80067ae <_printf_i+0x19a>
 8006638:	497a      	ldr	r1, [pc, #488]	@ (8006824 <_printf_i+0x210>)
 800663a:	9104      	str	r1, [sp, #16]
 800663c:	2a58      	cmp	r2, #88	@ 0x58
 800663e:	d100      	bne.n	8006642 <_printf_i+0x2e>
 8006640:	e08e      	b.n	8006760 <_printf_i+0x14c>
 8006642:	0025      	movs	r5, r4
 8006644:	3542      	adds	r5, #66	@ 0x42
 8006646:	702a      	strb	r2, [r5, #0]
 8006648:	e022      	b.n	8006690 <_printf_i+0x7c>
 800664a:	0010      	movs	r0, r2
 800664c:	3863      	subs	r0, #99	@ 0x63
 800664e:	2815      	cmp	r0, #21
 8006650:	d8f7      	bhi.n	8006642 <_printf_i+0x2e>
 8006652:	f7f9 fd67 	bl	8000124 <__gnu_thumb1_case_shi>
 8006656:	0016      	.short	0x0016
 8006658:	fff6001f 	.word	0xfff6001f
 800665c:	fff6fff6 	.word	0xfff6fff6
 8006660:	001ffff6 	.word	0x001ffff6
 8006664:	fff6fff6 	.word	0xfff6fff6
 8006668:	fff6fff6 	.word	0xfff6fff6
 800666c:	0036009f 	.word	0x0036009f
 8006670:	fff6007e 	.word	0xfff6007e
 8006674:	00b0fff6 	.word	0x00b0fff6
 8006678:	0036fff6 	.word	0x0036fff6
 800667c:	fff6fff6 	.word	0xfff6fff6
 8006680:	0082      	.short	0x0082
 8006682:	0025      	movs	r5, r4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	3542      	adds	r5, #66	@ 0x42
 8006688:	1d11      	adds	r1, r2, #4
 800668a:	6019      	str	r1, [r3, #0]
 800668c:	6813      	ldr	r3, [r2, #0]
 800668e:	702b      	strb	r3, [r5, #0]
 8006690:	2301      	movs	r3, #1
 8006692:	e09e      	b.n	80067d2 <_printf_i+0x1be>
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	6809      	ldr	r1, [r1, #0]
 8006698:	1d02      	adds	r2, r0, #4
 800669a:	060d      	lsls	r5, r1, #24
 800669c:	d50b      	bpl.n	80066b6 <_printf_i+0xa2>
 800669e:	6806      	ldr	r6, [r0, #0]
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	da03      	bge.n	80066ae <_printf_i+0x9a>
 80066a6:	232d      	movs	r3, #45	@ 0x2d
 80066a8:	9a03      	ldr	r2, [sp, #12]
 80066aa:	4276      	negs	r6, r6
 80066ac:	7013      	strb	r3, [r2, #0]
 80066ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006824 <_printf_i+0x210>)
 80066b0:	270a      	movs	r7, #10
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	e018      	b.n	80066e8 <_printf_i+0xd4>
 80066b6:	6806      	ldr	r6, [r0, #0]
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	0649      	lsls	r1, r1, #25
 80066bc:	d5f1      	bpl.n	80066a2 <_printf_i+0x8e>
 80066be:	b236      	sxth	r6, r6
 80066c0:	e7ef      	b.n	80066a2 <_printf_i+0x8e>
 80066c2:	6808      	ldr	r0, [r1, #0]
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	c940      	ldmia	r1!, {r6}
 80066c8:	0605      	lsls	r5, r0, #24
 80066ca:	d402      	bmi.n	80066d2 <_printf_i+0xbe>
 80066cc:	0640      	lsls	r0, r0, #25
 80066ce:	d500      	bpl.n	80066d2 <_printf_i+0xbe>
 80066d0:	b2b6      	uxth	r6, r6
 80066d2:	6019      	str	r1, [r3, #0]
 80066d4:	4b53      	ldr	r3, [pc, #332]	@ (8006824 <_printf_i+0x210>)
 80066d6:	270a      	movs	r7, #10
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	2a6f      	cmp	r2, #111	@ 0x6f
 80066dc:	d100      	bne.n	80066e0 <_printf_i+0xcc>
 80066de:	3f02      	subs	r7, #2
 80066e0:	0023      	movs	r3, r4
 80066e2:	2200      	movs	r2, #0
 80066e4:	3343      	adds	r3, #67	@ 0x43
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	6863      	ldr	r3, [r4, #4]
 80066ea:	60a3      	str	r3, [r4, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	db06      	blt.n	80066fe <_printf_i+0xea>
 80066f0:	2104      	movs	r1, #4
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	9d03      	ldr	r5, [sp, #12]
 80066f6:	438a      	bics	r2, r1
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	4333      	orrs	r3, r6
 80066fc:	d00c      	beq.n	8006718 <_printf_i+0x104>
 80066fe:	9d03      	ldr	r5, [sp, #12]
 8006700:	0030      	movs	r0, r6
 8006702:	0039      	movs	r1, r7
 8006704:	f7f9 fd9e 	bl	8000244 <__aeabi_uidivmod>
 8006708:	9b04      	ldr	r3, [sp, #16]
 800670a:	3d01      	subs	r5, #1
 800670c:	5c5b      	ldrb	r3, [r3, r1]
 800670e:	702b      	strb	r3, [r5, #0]
 8006710:	0033      	movs	r3, r6
 8006712:	0006      	movs	r6, r0
 8006714:	429f      	cmp	r7, r3
 8006716:	d9f3      	bls.n	8006700 <_printf_i+0xec>
 8006718:	2f08      	cmp	r7, #8
 800671a:	d109      	bne.n	8006730 <_printf_i+0x11c>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	07db      	lsls	r3, r3, #31
 8006720:	d506      	bpl.n	8006730 <_printf_i+0x11c>
 8006722:	6862      	ldr	r2, [r4, #4]
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	429a      	cmp	r2, r3
 8006728:	dc02      	bgt.n	8006730 <_printf_i+0x11c>
 800672a:	2330      	movs	r3, #48	@ 0x30
 800672c:	3d01      	subs	r5, #1
 800672e:	702b      	strb	r3, [r5, #0]
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	1b5b      	subs	r3, r3, r5
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	9b07      	ldr	r3, [sp, #28]
 8006738:	0021      	movs	r1, r4
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	9805      	ldr	r0, [sp, #20]
 800673e:	9b06      	ldr	r3, [sp, #24]
 8006740:	aa09      	add	r2, sp, #36	@ 0x24
 8006742:	f7ff fef7 	bl	8006534 <_printf_common>
 8006746:	3001      	adds	r0, #1
 8006748:	d148      	bne.n	80067dc <_printf_i+0x1c8>
 800674a:	2001      	movs	r0, #1
 800674c:	4240      	negs	r0, r0
 800674e:	b00b      	add	sp, #44	@ 0x2c
 8006750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006752:	2220      	movs	r2, #32
 8006754:	6809      	ldr	r1, [r1, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	6022      	str	r2, [r4, #0]
 800675a:	2278      	movs	r2, #120	@ 0x78
 800675c:	4932      	ldr	r1, [pc, #200]	@ (8006828 <_printf_i+0x214>)
 800675e:	9104      	str	r1, [sp, #16]
 8006760:	0021      	movs	r1, r4
 8006762:	3145      	adds	r1, #69	@ 0x45
 8006764:	700a      	strb	r2, [r1, #0]
 8006766:	6819      	ldr	r1, [r3, #0]
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	c940      	ldmia	r1!, {r6}
 800676c:	0610      	lsls	r0, r2, #24
 800676e:	d402      	bmi.n	8006776 <_printf_i+0x162>
 8006770:	0650      	lsls	r0, r2, #25
 8006772:	d500      	bpl.n	8006776 <_printf_i+0x162>
 8006774:	b2b6      	uxth	r6, r6
 8006776:	6019      	str	r1, [r3, #0]
 8006778:	07d3      	lsls	r3, r2, #31
 800677a:	d502      	bpl.n	8006782 <_printf_i+0x16e>
 800677c:	2320      	movs	r3, #32
 800677e:	4313      	orrs	r3, r2
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	2e00      	cmp	r6, #0
 8006784:	d001      	beq.n	800678a <_printf_i+0x176>
 8006786:	2710      	movs	r7, #16
 8006788:	e7aa      	b.n	80066e0 <_printf_i+0xcc>
 800678a:	2220      	movs	r2, #32
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	4393      	bics	r3, r2
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	e7f8      	b.n	8006786 <_printf_i+0x172>
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	680d      	ldr	r5, [r1, #0]
 8006798:	1d10      	adds	r0, r2, #4
 800679a:	6949      	ldr	r1, [r1, #20]
 800679c:	6018      	str	r0, [r3, #0]
 800679e:	6813      	ldr	r3, [r2, #0]
 80067a0:	062e      	lsls	r6, r5, #24
 80067a2:	d501      	bpl.n	80067a8 <_printf_i+0x194>
 80067a4:	6019      	str	r1, [r3, #0]
 80067a6:	e002      	b.n	80067ae <_printf_i+0x19a>
 80067a8:	066d      	lsls	r5, r5, #25
 80067aa:	d5fb      	bpl.n	80067a4 <_printf_i+0x190>
 80067ac:	8019      	strh	r1, [r3, #0]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9d03      	ldr	r5, [sp, #12]
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	e7bf      	b.n	8006736 <_printf_i+0x122>
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	1d11      	adds	r1, r2, #4
 80067ba:	6019      	str	r1, [r3, #0]
 80067bc:	6815      	ldr	r5, [r2, #0]
 80067be:	2100      	movs	r1, #0
 80067c0:	0028      	movs	r0, r5
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	f000 f9eb 	bl	8006b9e <memchr>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d001      	beq.n	80067d0 <_printf_i+0x1bc>
 80067cc:	1b40      	subs	r0, r0, r5
 80067ce:	6060      	str	r0, [r4, #4]
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	6123      	str	r3, [r4, #16]
 80067d4:	2300      	movs	r3, #0
 80067d6:	9a03      	ldr	r2, [sp, #12]
 80067d8:	7013      	strb	r3, [r2, #0]
 80067da:	e7ac      	b.n	8006736 <_printf_i+0x122>
 80067dc:	002a      	movs	r2, r5
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	9906      	ldr	r1, [sp, #24]
 80067e2:	9805      	ldr	r0, [sp, #20]
 80067e4:	9d07      	ldr	r5, [sp, #28]
 80067e6:	47a8      	blx	r5
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0ae      	beq.n	800674a <_printf_i+0x136>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	079b      	lsls	r3, r3, #30
 80067f0:	d415      	bmi.n	800681e <_printf_i+0x20a>
 80067f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f4:	68e0      	ldr	r0, [r4, #12]
 80067f6:	4298      	cmp	r0, r3
 80067f8:	daa9      	bge.n	800674e <_printf_i+0x13a>
 80067fa:	0018      	movs	r0, r3
 80067fc:	e7a7      	b.n	800674e <_printf_i+0x13a>
 80067fe:	0022      	movs	r2, r4
 8006800:	2301      	movs	r3, #1
 8006802:	9906      	ldr	r1, [sp, #24]
 8006804:	9805      	ldr	r0, [sp, #20]
 8006806:	9e07      	ldr	r6, [sp, #28]
 8006808:	3219      	adds	r2, #25
 800680a:	47b0      	blx	r6
 800680c:	3001      	adds	r0, #1
 800680e:	d09c      	beq.n	800674a <_printf_i+0x136>
 8006810:	3501      	adds	r5, #1
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	42ab      	cmp	r3, r5
 800681a:	dcf0      	bgt.n	80067fe <_printf_i+0x1ea>
 800681c:	e7e9      	b.n	80067f2 <_printf_i+0x1de>
 800681e:	2500      	movs	r5, #0
 8006820:	e7f7      	b.n	8006812 <_printf_i+0x1fe>
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	0800926a 	.word	0x0800926a
 8006828:	0800927b 	.word	0x0800927b

0800682c <std>:
 800682c:	2300      	movs	r3, #0
 800682e:	b510      	push	{r4, lr}
 8006830:	0004      	movs	r4, r0
 8006832:	6003      	str	r3, [r0, #0]
 8006834:	6043      	str	r3, [r0, #4]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	@ 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	6103      	str	r3, [r0, #16]
 8006840:	6143      	str	r3, [r0, #20]
 8006842:	6183      	str	r3, [r0, #24]
 8006844:	0019      	movs	r1, r3
 8006846:	2208      	movs	r2, #8
 8006848:	305c      	adds	r0, #92	@ 0x5c
 800684a:	f000 f921 	bl	8006a90 <memset>
 800684e:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <std+0x50>)
 8006850:	6224      	str	r4, [r4, #32]
 8006852:	6263      	str	r3, [r4, #36]	@ 0x24
 8006854:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <std+0x54>)
 8006856:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <std+0x58>)
 800685a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <std+0x5c>)
 800685e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006860:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <std+0x60>)
 8006862:	429c      	cmp	r4, r3
 8006864:	d005      	beq.n	8006872 <std+0x46>
 8006866:	4b0a      	ldr	r3, [pc, #40]	@ (8006890 <std+0x64>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d002      	beq.n	8006872 <std+0x46>
 800686c:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <std+0x68>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d103      	bne.n	800687a <std+0x4e>
 8006872:	0020      	movs	r0, r4
 8006874:	3058      	adds	r0, #88	@ 0x58
 8006876:	f000 f98f 	bl	8006b98 <__retarget_lock_init_recursive>
 800687a:	bd10      	pop	{r4, pc}
 800687c:	080069f9 	.word	0x080069f9
 8006880:	08006a21 	.word	0x08006a21
 8006884:	08006a59 	.word	0x08006a59
 8006888:	08006a85 	.word	0x08006a85
 800688c:	20000458 	.word	0x20000458
 8006890:	200004c0 	.word	0x200004c0
 8006894:	20000528 	.word	0x20000528

08006898 <stdio_exit_handler>:
 8006898:	b510      	push	{r4, lr}
 800689a:	4a03      	ldr	r2, [pc, #12]	@ (80068a8 <stdio_exit_handler+0x10>)
 800689c:	4903      	ldr	r1, [pc, #12]	@ (80068ac <stdio_exit_handler+0x14>)
 800689e:	4804      	ldr	r0, [pc, #16]	@ (80068b0 <stdio_exit_handler+0x18>)
 80068a0:	f000 f86c 	bl	800697c <_fwalk_sglue>
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	080085ad 	.word	0x080085ad
 80068b0:	2000001c 	.word	0x2000001c

080068b4 <cleanup_stdio>:
 80068b4:	6841      	ldr	r1, [r0, #4]
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <cleanup_stdio+0x30>)
 80068b8:	b510      	push	{r4, lr}
 80068ba:	0004      	movs	r4, r0
 80068bc:	4299      	cmp	r1, r3
 80068be:	d001      	beq.n	80068c4 <cleanup_stdio+0x10>
 80068c0:	f001 fe74 	bl	80085ac <_fflush_r>
 80068c4:	68a1      	ldr	r1, [r4, #8]
 80068c6:	4b08      	ldr	r3, [pc, #32]	@ (80068e8 <cleanup_stdio+0x34>)
 80068c8:	4299      	cmp	r1, r3
 80068ca:	d002      	beq.n	80068d2 <cleanup_stdio+0x1e>
 80068cc:	0020      	movs	r0, r4
 80068ce:	f001 fe6d 	bl	80085ac <_fflush_r>
 80068d2:	68e1      	ldr	r1, [r4, #12]
 80068d4:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <cleanup_stdio+0x38>)
 80068d6:	4299      	cmp	r1, r3
 80068d8:	d002      	beq.n	80068e0 <cleanup_stdio+0x2c>
 80068da:	0020      	movs	r0, r4
 80068dc:	f001 fe66 	bl	80085ac <_fflush_r>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	20000458 	.word	0x20000458
 80068e8:	200004c0 	.word	0x200004c0
 80068ec:	20000528 	.word	0x20000528

080068f0 <global_stdio_init.part.0>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4b09      	ldr	r3, [pc, #36]	@ (8006918 <global_stdio_init.part.0+0x28>)
 80068f4:	4a09      	ldr	r2, [pc, #36]	@ (800691c <global_stdio_init.part.0+0x2c>)
 80068f6:	2104      	movs	r1, #4
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	4809      	ldr	r0, [pc, #36]	@ (8006920 <global_stdio_init.part.0+0x30>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	f7ff ff95 	bl	800682c <std>
 8006902:	2201      	movs	r2, #1
 8006904:	2109      	movs	r1, #9
 8006906:	4807      	ldr	r0, [pc, #28]	@ (8006924 <global_stdio_init.part.0+0x34>)
 8006908:	f7ff ff90 	bl	800682c <std>
 800690c:	2202      	movs	r2, #2
 800690e:	2112      	movs	r1, #18
 8006910:	4805      	ldr	r0, [pc, #20]	@ (8006928 <global_stdio_init.part.0+0x38>)
 8006912:	f7ff ff8b 	bl	800682c <std>
 8006916:	bd10      	pop	{r4, pc}
 8006918:	20000590 	.word	0x20000590
 800691c:	08006899 	.word	0x08006899
 8006920:	20000458 	.word	0x20000458
 8006924:	200004c0 	.word	0x200004c0
 8006928:	20000528 	.word	0x20000528

0800692c <__sfp_lock_acquire>:
 800692c:	b510      	push	{r4, lr}
 800692e:	4802      	ldr	r0, [pc, #8]	@ (8006938 <__sfp_lock_acquire+0xc>)
 8006930:	f000 f933 	bl	8006b9a <__retarget_lock_acquire_recursive>
 8006934:	bd10      	pop	{r4, pc}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	20000599 	.word	0x20000599

0800693c <__sfp_lock_release>:
 800693c:	b510      	push	{r4, lr}
 800693e:	4802      	ldr	r0, [pc, #8]	@ (8006948 <__sfp_lock_release+0xc>)
 8006940:	f000 f92c 	bl	8006b9c <__retarget_lock_release_recursive>
 8006944:	bd10      	pop	{r4, pc}
 8006946:	46c0      	nop			@ (mov r8, r8)
 8006948:	20000599 	.word	0x20000599

0800694c <__sinit>:
 800694c:	b510      	push	{r4, lr}
 800694e:	0004      	movs	r4, r0
 8006950:	f7ff ffec 	bl	800692c <__sfp_lock_acquire>
 8006954:	6a23      	ldr	r3, [r4, #32]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <__sinit+0x14>
 800695a:	f7ff ffef 	bl	800693c <__sfp_lock_release>
 800695e:	bd10      	pop	{r4, pc}
 8006960:	4b04      	ldr	r3, [pc, #16]	@ (8006974 <__sinit+0x28>)
 8006962:	6223      	str	r3, [r4, #32]
 8006964:	4b04      	ldr	r3, [pc, #16]	@ (8006978 <__sinit+0x2c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f6      	bne.n	800695a <__sinit+0xe>
 800696c:	f7ff ffc0 	bl	80068f0 <global_stdio_init.part.0>
 8006970:	e7f3      	b.n	800695a <__sinit+0xe>
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	080068b5 	.word	0x080068b5
 8006978:	20000590 	.word	0x20000590

0800697c <_fwalk_sglue>:
 800697c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800697e:	0014      	movs	r4, r2
 8006980:	2600      	movs	r6, #0
 8006982:	9000      	str	r0, [sp, #0]
 8006984:	9101      	str	r1, [sp, #4]
 8006986:	68a5      	ldr	r5, [r4, #8]
 8006988:	6867      	ldr	r7, [r4, #4]
 800698a:	3f01      	subs	r7, #1
 800698c:	d504      	bpl.n	8006998 <_fwalk_sglue+0x1c>
 800698e:	6824      	ldr	r4, [r4, #0]
 8006990:	2c00      	cmp	r4, #0
 8006992:	d1f8      	bne.n	8006986 <_fwalk_sglue+0xa>
 8006994:	0030      	movs	r0, r6
 8006996:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006998:	89ab      	ldrh	r3, [r5, #12]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d908      	bls.n	80069b0 <_fwalk_sglue+0x34>
 800699e:	220e      	movs	r2, #14
 80069a0:	5eab      	ldrsh	r3, [r5, r2]
 80069a2:	3301      	adds	r3, #1
 80069a4:	d004      	beq.n	80069b0 <_fwalk_sglue+0x34>
 80069a6:	0029      	movs	r1, r5
 80069a8:	9800      	ldr	r0, [sp, #0]
 80069aa:	9b01      	ldr	r3, [sp, #4]
 80069ac:	4798      	blx	r3
 80069ae:	4306      	orrs	r6, r0
 80069b0:	3568      	adds	r5, #104	@ 0x68
 80069b2:	e7ea      	b.n	800698a <_fwalk_sglue+0xe>

080069b4 <siprintf>:
 80069b4:	b40e      	push	{r1, r2, r3}
 80069b6:	b510      	push	{r4, lr}
 80069b8:	2400      	movs	r4, #0
 80069ba:	490c      	ldr	r1, [pc, #48]	@ (80069ec <siprintf+0x38>)
 80069bc:	b09d      	sub	sp, #116	@ 0x74
 80069be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80069c0:	9002      	str	r0, [sp, #8]
 80069c2:	9006      	str	r0, [sp, #24]
 80069c4:	9107      	str	r1, [sp, #28]
 80069c6:	9104      	str	r1, [sp, #16]
 80069c8:	4809      	ldr	r0, [pc, #36]	@ (80069f0 <siprintf+0x3c>)
 80069ca:	490a      	ldr	r1, [pc, #40]	@ (80069f4 <siprintf+0x40>)
 80069cc:	cb04      	ldmia	r3!, {r2}
 80069ce:	9105      	str	r1, [sp, #20]
 80069d0:	6800      	ldr	r0, [r0, #0]
 80069d2:	a902      	add	r1, sp, #8
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80069d8:	f001 fc64 	bl	80082a4 <_svfiprintf_r>
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	701c      	strb	r4, [r3, #0]
 80069e0:	b01d      	add	sp, #116	@ 0x74
 80069e2:	bc10      	pop	{r4}
 80069e4:	bc08      	pop	{r3}
 80069e6:	b003      	add	sp, #12
 80069e8:	4718      	bx	r3
 80069ea:	46c0      	nop			@ (mov r8, r8)
 80069ec:	7fffffff 	.word	0x7fffffff
 80069f0:	20000018 	.word	0x20000018
 80069f4:	ffff0208 	.word	0xffff0208

080069f8 <__sread>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	000c      	movs	r4, r1
 80069fc:	250e      	movs	r5, #14
 80069fe:	5f49      	ldrsh	r1, [r1, r5]
 8006a00:	f000 f878 	bl	8006af4 <_read_r>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	db03      	blt.n	8006a10 <__sread+0x18>
 8006a08:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006a0a:	181b      	adds	r3, r3, r0
 8006a0c:	6563      	str	r3, [r4, #84]	@ 0x54
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	4a02      	ldr	r2, [pc, #8]	@ (8006a1c <__sread+0x24>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	e7f9      	b.n	8006a0e <__sread+0x16>
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	ffffefff 	.word	0xffffefff

08006a20 <__swrite>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	001f      	movs	r7, r3
 8006a24:	898b      	ldrh	r3, [r1, #12]
 8006a26:	0005      	movs	r5, r0
 8006a28:	000c      	movs	r4, r1
 8006a2a:	0016      	movs	r6, r2
 8006a2c:	05db      	lsls	r3, r3, #23
 8006a2e:	d505      	bpl.n	8006a3c <__swrite+0x1c>
 8006a30:	230e      	movs	r3, #14
 8006a32:	5ec9      	ldrsh	r1, [r1, r3]
 8006a34:	2200      	movs	r2, #0
 8006a36:	2302      	movs	r3, #2
 8006a38:	f000 f848 	bl	8006acc <_lseek_r>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	4a05      	ldr	r2, [pc, #20]	@ (8006a54 <__swrite+0x34>)
 8006a40:	0028      	movs	r0, r5
 8006a42:	4013      	ands	r3, r2
 8006a44:	81a3      	strh	r3, [r4, #12]
 8006a46:	0032      	movs	r2, r6
 8006a48:	230e      	movs	r3, #14
 8006a4a:	5ee1      	ldrsh	r1, [r4, r3]
 8006a4c:	003b      	movs	r3, r7
 8006a4e:	f000 f865 	bl	8006b1c <_write_r>
 8006a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a54:	ffffefff 	.word	0xffffefff

08006a58 <__sseek>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	000c      	movs	r4, r1
 8006a5c:	250e      	movs	r5, #14
 8006a5e:	5f49      	ldrsh	r1, [r1, r5]
 8006a60:	f000 f834 	bl	8006acc <_lseek_r>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	1c42      	adds	r2, r0, #1
 8006a68:	d103      	bne.n	8006a72 <__sseek+0x1a>
 8006a6a:	4a05      	ldr	r2, [pc, #20]	@ (8006a80 <__sseek+0x28>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	2280      	movs	r2, #128	@ 0x80
 8006a74:	0152      	lsls	r2, r2, #5
 8006a76:	4313      	orrs	r3, r2
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a7c:	e7f8      	b.n	8006a70 <__sseek+0x18>
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	ffffefff 	.word	0xffffefff

08006a84 <__sclose>:
 8006a84:	b510      	push	{r4, lr}
 8006a86:	230e      	movs	r3, #14
 8006a88:	5ec9      	ldrsh	r1, [r1, r3]
 8006a8a:	f000 f80d 	bl	8006aa8 <_close_r>
 8006a8e:	bd10      	pop	{r4, pc}

08006a90 <memset>:
 8006a90:	0003      	movs	r3, r0
 8006a92:	1882      	adds	r2, r0, r2
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d100      	bne.n	8006a9a <memset+0xa>
 8006a98:	4770      	bx	lr
 8006a9a:	7019      	strb	r1, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	e7f9      	b.n	8006a94 <memset+0x4>

08006aa0 <_localeconv_r>:
 8006aa0:	4800      	ldr	r0, [pc, #0]	@ (8006aa4 <_localeconv_r+0x4>)
 8006aa2:	4770      	bx	lr
 8006aa4:	20000158 	.word	0x20000158

08006aa8 <_close_r>:
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	b570      	push	{r4, r5, r6, lr}
 8006aac:	4d06      	ldr	r5, [pc, #24]	@ (8006ac8 <_close_r+0x20>)
 8006aae:	0004      	movs	r4, r0
 8006ab0:	0008      	movs	r0, r1
 8006ab2:	602b      	str	r3, [r5, #0]
 8006ab4:	f7fc f9d4 	bl	8002e60 <_close>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d103      	bne.n	8006ac4 <_close_r+0x1c>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d000      	beq.n	8006ac4 <_close_r+0x1c>
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
 8006ac6:	46c0      	nop			@ (mov r8, r8)
 8006ac8:	20000594 	.word	0x20000594

08006acc <_lseek_r>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	0004      	movs	r4, r0
 8006ad0:	0008      	movs	r0, r1
 8006ad2:	0011      	movs	r1, r2
 8006ad4:	001a      	movs	r2, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4d05      	ldr	r5, [pc, #20]	@ (8006af0 <_lseek_r+0x24>)
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fc f9e1 	bl	8002ea2 <_lseek>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d103      	bne.n	8006aec <_lseek_r+0x20>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d000      	beq.n	8006aec <_lseek_r+0x20>
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	20000594 	.word	0x20000594

08006af4 <_read_r>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	0004      	movs	r4, r0
 8006af8:	0008      	movs	r0, r1
 8006afa:	0011      	movs	r1, r2
 8006afc:	001a      	movs	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	4d05      	ldr	r5, [pc, #20]	@ (8006b18 <_read_r+0x24>)
 8006b02:	602b      	str	r3, [r5, #0]
 8006b04:	f7fc f973 	bl	8002dee <_read>
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d103      	bne.n	8006b14 <_read_r+0x20>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d000      	beq.n	8006b14 <_read_r+0x20>
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	bd70      	pop	{r4, r5, r6, pc}
 8006b16:	46c0      	nop			@ (mov r8, r8)
 8006b18:	20000594 	.word	0x20000594

08006b1c <_write_r>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	0004      	movs	r4, r0
 8006b20:	0008      	movs	r0, r1
 8006b22:	0011      	movs	r1, r2
 8006b24:	001a      	movs	r2, r3
 8006b26:	2300      	movs	r3, #0
 8006b28:	4d05      	ldr	r5, [pc, #20]	@ (8006b40 <_write_r+0x24>)
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fc f97c 	bl	8002e28 <_write>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d103      	bne.n	8006b3c <_write_r+0x20>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d000      	beq.n	8006b3c <_write_r+0x20>
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	bd70      	pop	{r4, r5, r6, pc}
 8006b3e:	46c0      	nop			@ (mov r8, r8)
 8006b40:	20000594 	.word	0x20000594

08006b44 <__errno>:
 8006b44:	4b01      	ldr	r3, [pc, #4]	@ (8006b4c <__errno+0x8>)
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	4770      	bx	lr
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	20000018 	.word	0x20000018

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	2600      	movs	r6, #0
 8006b54:	4c0c      	ldr	r4, [pc, #48]	@ (8006b88 <__libc_init_array+0x38>)
 8006b56:	4d0d      	ldr	r5, [pc, #52]	@ (8006b8c <__libc_init_array+0x3c>)
 8006b58:	1b64      	subs	r4, r4, r5
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	42a6      	cmp	r6, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	2600      	movs	r6, #0
 8006b62:	f002 fae1 	bl	8009128 <_init>
 8006b66:	4c0a      	ldr	r4, [pc, #40]	@ (8006b90 <__libc_init_array+0x40>)
 8006b68:	4d0a      	ldr	r5, [pc, #40]	@ (8006b94 <__libc_init_array+0x44>)
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	42a6      	cmp	r6, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	00b3      	lsls	r3, r6, #2
 8006b76:	58eb      	ldr	r3, [r5, r3]
 8006b78:	4798      	blx	r3
 8006b7a:	3601      	adds	r6, #1
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	00b3      	lsls	r3, r6, #2
 8006b80:	58eb      	ldr	r3, [r5, r3]
 8006b82:	4798      	blx	r3
 8006b84:	3601      	adds	r6, #1
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	080095cc 	.word	0x080095cc
 8006b8c:	080095cc 	.word	0x080095cc
 8006b90:	080095d0 	.word	0x080095d0
 8006b94:	080095cc 	.word	0x080095cc

08006b98 <__retarget_lock_init_recursive>:
 8006b98:	4770      	bx	lr

08006b9a <__retarget_lock_acquire_recursive>:
 8006b9a:	4770      	bx	lr

08006b9c <__retarget_lock_release_recursive>:
 8006b9c:	4770      	bx	lr

08006b9e <memchr>:
 8006b9e:	b2c9      	uxtb	r1, r1
 8006ba0:	1882      	adds	r2, r0, r2
 8006ba2:	4290      	cmp	r0, r2
 8006ba4:	d101      	bne.n	8006baa <memchr+0xc>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	4770      	bx	lr
 8006baa:	7803      	ldrb	r3, [r0, #0]
 8006bac:	428b      	cmp	r3, r1
 8006bae:	d0fb      	beq.n	8006ba8 <memchr+0xa>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	e7f6      	b.n	8006ba2 <memchr+0x4>

08006bb4 <quorem>:
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	6903      	ldr	r3, [r0, #16]
 8006bb8:	690c      	ldr	r4, [r1, #16]
 8006bba:	b089      	sub	sp, #36	@ 0x24
 8006bbc:	9003      	str	r0, [sp, #12]
 8006bbe:	9106      	str	r1, [sp, #24]
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	db63      	blt.n	8006c8e <quorem+0xda>
 8006bc6:	000b      	movs	r3, r1
 8006bc8:	3c01      	subs	r4, #1
 8006bca:	3314      	adds	r3, #20
 8006bcc:	00a5      	lsls	r5, r4, #2
 8006bce:	9304      	str	r3, [sp, #16]
 8006bd0:	195b      	adds	r3, r3, r5
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	3314      	adds	r3, #20
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	195d      	adds	r5, r3, r5
 8006bdc:	9b05      	ldr	r3, [sp, #20]
 8006bde:	682f      	ldr	r7, [r5, #0]
 8006be0:	681e      	ldr	r6, [r3, #0]
 8006be2:	0038      	movs	r0, r7
 8006be4:	3601      	adds	r6, #1
 8006be6:	0031      	movs	r1, r6
 8006be8:	f7f9 faa6 	bl	8000138 <__udivsi3>
 8006bec:	9002      	str	r0, [sp, #8]
 8006bee:	42b7      	cmp	r7, r6
 8006bf0:	d327      	bcc.n	8006c42 <quorem+0x8e>
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	2700      	movs	r7, #0
 8006bf6:	469c      	mov	ip, r3
 8006bf8:	9e01      	ldr	r6, [sp, #4]
 8006bfa:	9707      	str	r7, [sp, #28]
 8006bfc:	4662      	mov	r2, ip
 8006bfe:	ca08      	ldmia	r2!, {r3}
 8006c00:	6830      	ldr	r0, [r6, #0]
 8006c02:	4694      	mov	ip, r2
 8006c04:	9a02      	ldr	r2, [sp, #8]
 8006c06:	b299      	uxth	r1, r3
 8006c08:	4351      	muls	r1, r2
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	4353      	muls	r3, r2
 8006c0e:	19c9      	adds	r1, r1, r7
 8006c10:	0c0a      	lsrs	r2, r1, #16
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	b289      	uxth	r1, r1
 8006c16:	b282      	uxth	r2, r0
 8006c18:	1a52      	subs	r2, r2, r1
 8006c1a:	9907      	ldr	r1, [sp, #28]
 8006c1c:	0c1f      	lsrs	r7, r3, #16
 8006c1e:	1852      	adds	r2, r2, r1
 8006c20:	0c00      	lsrs	r0, r0, #16
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	1411      	asrs	r1, r2, #16
 8006c26:	1ac3      	subs	r3, r0, r3
 8006c28:	185b      	adds	r3, r3, r1
 8006c2a:	1419      	asrs	r1, r3, #16
 8006c2c:	b292      	uxth	r2, r2
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	431a      	orrs	r2, r3
 8006c32:	9b05      	ldr	r3, [sp, #20]
 8006c34:	9107      	str	r1, [sp, #28]
 8006c36:	c604      	stmia	r6!, {r2}
 8006c38:	4563      	cmp	r3, ip
 8006c3a:	d2df      	bcs.n	8006bfc <quorem+0x48>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02b      	beq.n	8006c9a <quorem+0xe6>
 8006c42:	9906      	ldr	r1, [sp, #24]
 8006c44:	9803      	ldr	r0, [sp, #12]
 8006c46:	f001 f9b7 	bl	8007fb8 <__mcmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	db1e      	blt.n	8006c8c <quorem+0xd8>
 8006c4e:	2600      	movs	r6, #0
 8006c50:	9d01      	ldr	r5, [sp, #4]
 8006c52:	9904      	ldr	r1, [sp, #16]
 8006c54:	c901      	ldmia	r1!, {r0}
 8006c56:	682b      	ldr	r3, [r5, #0]
 8006c58:	b287      	uxth	r7, r0
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	1bd2      	subs	r2, r2, r7
 8006c5e:	1992      	adds	r2, r2, r6
 8006c60:	0c00      	lsrs	r0, r0, #16
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	1a1b      	subs	r3, r3, r0
 8006c66:	1410      	asrs	r0, r2, #16
 8006c68:	181b      	adds	r3, r3, r0
 8006c6a:	141e      	asrs	r6, r3, #16
 8006c6c:	b292      	uxth	r2, r2
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	431a      	orrs	r2, r3
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	c504      	stmia	r5!, {r2}
 8006c76:	428b      	cmp	r3, r1
 8006c78:	d2ec      	bcs.n	8006c54 <quorem+0xa0>
 8006c7a:	9a01      	ldr	r2, [sp, #4]
 8006c7c:	00a3      	lsls	r3, r4, #2
 8006c7e:	18d3      	adds	r3, r2, r3
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	d014      	beq.n	8006cb0 <quorem+0xfc>
 8006c86:	9b02      	ldr	r3, [sp, #8]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	9302      	str	r3, [sp, #8]
 8006c8c:	9802      	ldr	r0, [sp, #8]
 8006c8e:	b009      	add	sp, #36	@ 0x24
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <quorem+0xee>
 8006c98:	3c01      	subs	r4, #1
 8006c9a:	9b01      	ldr	r3, [sp, #4]
 8006c9c:	3d04      	subs	r5, #4
 8006c9e:	42ab      	cmp	r3, r5
 8006ca0:	d3f7      	bcc.n	8006c92 <quorem+0xde>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	611c      	str	r4, [r3, #16]
 8006ca6:	e7cc      	b.n	8006c42 <quorem+0x8e>
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	d104      	bne.n	8006cb8 <quorem+0x104>
 8006cae:	3c01      	subs	r4, #1
 8006cb0:	9a01      	ldr	r2, [sp, #4]
 8006cb2:	3b04      	subs	r3, #4
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d3f7      	bcc.n	8006ca8 <quorem+0xf4>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	611c      	str	r4, [r3, #16]
 8006cbc:	e7e3      	b.n	8006c86 <quorem+0xd2>
	...

08006cc0 <_dtoa_r>:
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	0014      	movs	r4, r2
 8006cc4:	001d      	movs	r5, r3
 8006cc6:	69c6      	ldr	r6, [r0, #28]
 8006cc8:	b09d      	sub	sp, #116	@ 0x74
 8006cca:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ccc:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006cce:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006cd0:	9003      	str	r0, [sp, #12]
 8006cd2:	2e00      	cmp	r6, #0
 8006cd4:	d10f      	bne.n	8006cf6 <_dtoa_r+0x36>
 8006cd6:	2010      	movs	r0, #16
 8006cd8:	f000 fe2c 	bl	8007934 <malloc>
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	1e02      	subs	r2, r0, #0
 8006ce0:	61d8      	str	r0, [r3, #28]
 8006ce2:	d104      	bne.n	8006cee <_dtoa_r+0x2e>
 8006ce4:	21ef      	movs	r1, #239	@ 0xef
 8006ce6:	4bc7      	ldr	r3, [pc, #796]	@ (8007004 <_dtoa_r+0x344>)
 8006ce8:	48c7      	ldr	r0, [pc, #796]	@ (8007008 <_dtoa_r+0x348>)
 8006cea:	f001 fcb9 	bl	8008660 <__assert_func>
 8006cee:	6046      	str	r6, [r0, #4]
 8006cf0:	6086      	str	r6, [r0, #8]
 8006cf2:	6006      	str	r6, [r0, #0]
 8006cf4:	60c6      	str	r6, [r0, #12]
 8006cf6:	9b03      	ldr	r3, [sp, #12]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	6819      	ldr	r1, [r3, #0]
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d00b      	beq.n	8006d18 <_dtoa_r+0x58>
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	2301      	movs	r3, #1
 8006d04:	4093      	lsls	r3, r2
 8006d06:	604a      	str	r2, [r1, #4]
 8006d08:	608b      	str	r3, [r1, #8]
 8006d0a:	9803      	ldr	r0, [sp, #12]
 8006d0c:	f000 ff12 	bl	8007b34 <_Bfree>
 8006d10:	2200      	movs	r2, #0
 8006d12:	9b03      	ldr	r3, [sp, #12]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	da1e      	bge.n	8006d5a <_dtoa_r+0x9a>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	006b      	lsls	r3, r5, #1
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d26:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006d28:	4bb8      	ldr	r3, [pc, #736]	@ (800700c <_dtoa_r+0x34c>)
 8006d2a:	4ab8      	ldr	r2, [pc, #736]	@ (800700c <_dtoa_r+0x34c>)
 8006d2c:	403b      	ands	r3, r7
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d116      	bne.n	8006d60 <_dtoa_r+0xa0>
 8006d32:	4bb7      	ldr	r3, [pc, #732]	@ (8007010 <_dtoa_r+0x350>)
 8006d34:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	033b      	lsls	r3, r7, #12
 8006d3a:	0b1b      	lsrs	r3, r3, #12
 8006d3c:	4323      	orrs	r3, r4
 8006d3e:	d101      	bne.n	8006d44 <_dtoa_r+0x84>
 8006d40:	f000 fd80 	bl	8007844 <_dtoa_r+0xb84>
 8006d44:	4bb3      	ldr	r3, [pc, #716]	@ (8007014 <_dtoa_r+0x354>)
 8006d46:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d48:	9308      	str	r3, [sp, #32]
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	d002      	beq.n	8006d54 <_dtoa_r+0x94>
 8006d4e:	4bb2      	ldr	r3, [pc, #712]	@ (8007018 <_dtoa_r+0x358>)
 8006d50:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	9808      	ldr	r0, [sp, #32]
 8006d56:	b01d      	add	sp, #116	@ 0x74
 8006d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	e7e2      	b.n	8006d26 <_dtoa_r+0x66>
 8006d60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d64:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d68:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006d6a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f7f9 fb68 	bl	8000444 <__aeabi_dcmpeq>
 8006d74:	1e06      	subs	r6, r0, #0
 8006d76:	d00b      	beq.n	8006d90 <_dtoa_r+0xd0>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <_dtoa_r+0xca>
 8006d84:	4ba5      	ldr	r3, [pc, #660]	@ (800701c <_dtoa_r+0x35c>)
 8006d86:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4ba5      	ldr	r3, [pc, #660]	@ (8007020 <_dtoa_r+0x360>)
 8006d8c:	9308      	str	r3, [sp, #32]
 8006d8e:	e7e1      	b.n	8006d54 <_dtoa_r+0x94>
 8006d90:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	9803      	ldr	r0, [sp, #12]
 8006d9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d9e:	f001 f9c1 	bl	8008124 <__d2b>
 8006da2:	007a      	lsls	r2, r7, #1
 8006da4:	9005      	str	r0, [sp, #20]
 8006da6:	0d52      	lsrs	r2, r2, #21
 8006da8:	d100      	bne.n	8006dac <_dtoa_r+0xec>
 8006daa:	e07b      	b.n	8006ea4 <_dtoa_r+0x1e4>
 8006dac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006dae:	9618      	str	r6, [sp, #96]	@ 0x60
 8006db0:	0319      	lsls	r1, r3, #12
 8006db2:	4b9c      	ldr	r3, [pc, #624]	@ (8007024 <_dtoa_r+0x364>)
 8006db4:	0b09      	lsrs	r1, r1, #12
 8006db6:	430b      	orrs	r3, r1
 8006db8:	499b      	ldr	r1, [pc, #620]	@ (8007028 <_dtoa_r+0x368>)
 8006dba:	1857      	adds	r7, r2, r1
 8006dbc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006dbe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006dc0:	0019      	movs	r1, r3
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	4b99      	ldr	r3, [pc, #612]	@ (800702c <_dtoa_r+0x36c>)
 8006dc6:	f7fa fe6f 	bl	8001aa8 <__aeabi_dsub>
 8006dca:	4a99      	ldr	r2, [pc, #612]	@ (8007030 <_dtoa_r+0x370>)
 8006dcc:	4b99      	ldr	r3, [pc, #612]	@ (8007034 <_dtoa_r+0x374>)
 8006dce:	f7fa fb85 	bl	80014dc <__aeabi_dmul>
 8006dd2:	4a99      	ldr	r2, [pc, #612]	@ (8007038 <_dtoa_r+0x378>)
 8006dd4:	4b99      	ldr	r3, [pc, #612]	@ (800703c <_dtoa_r+0x37c>)
 8006dd6:	f7f9 fb81 	bl	80004dc <__aeabi_dadd>
 8006dda:	0004      	movs	r4, r0
 8006ddc:	0038      	movs	r0, r7
 8006dde:	000d      	movs	r5, r1
 8006de0:	f7fb faca 	bl	8002378 <__aeabi_i2d>
 8006de4:	4a96      	ldr	r2, [pc, #600]	@ (8007040 <_dtoa_r+0x380>)
 8006de6:	4b97      	ldr	r3, [pc, #604]	@ (8007044 <_dtoa_r+0x384>)
 8006de8:	f7fa fb78 	bl	80014dc <__aeabi_dmul>
 8006dec:	0002      	movs	r2, r0
 8006dee:	000b      	movs	r3, r1
 8006df0:	0020      	movs	r0, r4
 8006df2:	0029      	movs	r1, r5
 8006df4:	f7f9 fb72 	bl	80004dc <__aeabi_dadd>
 8006df8:	0004      	movs	r4, r0
 8006dfa:	000d      	movs	r5, r1
 8006dfc:	f7fb fa80 	bl	8002300 <__aeabi_d2iz>
 8006e00:	2200      	movs	r2, #0
 8006e02:	9004      	str	r0, [sp, #16]
 8006e04:	2300      	movs	r3, #0
 8006e06:	0020      	movs	r0, r4
 8006e08:	0029      	movs	r1, r5
 8006e0a:	f7f9 fb21 	bl	8000450 <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d00b      	beq.n	8006e2a <_dtoa_r+0x16a>
 8006e12:	9804      	ldr	r0, [sp, #16]
 8006e14:	f7fb fab0 	bl	8002378 <__aeabi_i2d>
 8006e18:	002b      	movs	r3, r5
 8006e1a:	0022      	movs	r2, r4
 8006e1c:	f7f9 fb12 	bl	8000444 <__aeabi_dcmpeq>
 8006e20:	4243      	negs	r3, r0
 8006e22:	4158      	adcs	r0, r3
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	1a1b      	subs	r3, r3, r0
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	2b16      	cmp	r3, #22
 8006e32:	d810      	bhi.n	8006e56 <_dtoa_r+0x196>
 8006e34:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006e36:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006e38:	9a04      	ldr	r2, [sp, #16]
 8006e3a:	4b83      	ldr	r3, [pc, #524]	@ (8007048 <_dtoa_r+0x388>)
 8006e3c:	00d2      	lsls	r2, r2, #3
 8006e3e:	189b      	adds	r3, r3, r2
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f7f9 fb04 	bl	8000450 <__aeabi_dcmplt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d047      	beq.n	8006edc <_dtoa_r+0x21c>
 8006e4c:	9b04      	ldr	r3, [sp, #16]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	9304      	str	r3, [sp, #16]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e56:	2200      	movs	r2, #0
 8006e58:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006e5a:	9206      	str	r2, [sp, #24]
 8006e5c:	1bdb      	subs	r3, r3, r7
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	d53e      	bpl.n	8006ee0 <_dtoa_r+0x220>
 8006e62:	2201      	movs	r2, #1
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	9306      	str	r3, [sp, #24]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	db38      	blt.n	8006ee4 <_dtoa_r+0x224>
 8006e72:	9a04      	ldr	r2, [sp, #16]
 8006e74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e76:	4694      	mov	ip, r2
 8006e78:	4463      	add	r3, ip
 8006e7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e84:	2401      	movs	r4, #1
 8006e86:	2b09      	cmp	r3, #9
 8006e88:	d862      	bhi.n	8006f50 <_dtoa_r+0x290>
 8006e8a:	2b05      	cmp	r3, #5
 8006e8c:	dd02      	ble.n	8006e94 <_dtoa_r+0x1d4>
 8006e8e:	2400      	movs	r4, #0
 8006e90:	3b04      	subs	r3, #4
 8006e92:	9322      	str	r3, [sp, #136]	@ 0x88
 8006e94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e96:	1e98      	subs	r0, r3, #2
 8006e98:	2803      	cmp	r0, #3
 8006e9a:	d863      	bhi.n	8006f64 <_dtoa_r+0x2a4>
 8006e9c:	f7f9 f938 	bl	8000110 <__gnu_thumb1_case_uqi>
 8006ea0:	2b385654 	.word	0x2b385654
 8006ea4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006ea6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006ea8:	18f6      	adds	r6, r6, r3
 8006eaa:	4b68      	ldr	r3, [pc, #416]	@ (800704c <_dtoa_r+0x38c>)
 8006eac:	18f2      	adds	r2, r6, r3
 8006eae:	2a20      	cmp	r2, #32
 8006eb0:	dd0f      	ble.n	8006ed2 <_dtoa_r+0x212>
 8006eb2:	2340      	movs	r3, #64	@ 0x40
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	409f      	lsls	r7, r3
 8006eb8:	4b65      	ldr	r3, [pc, #404]	@ (8007050 <_dtoa_r+0x390>)
 8006eba:	0038      	movs	r0, r7
 8006ebc:	18f3      	adds	r3, r6, r3
 8006ebe:	40dc      	lsrs	r4, r3
 8006ec0:	4320      	orrs	r0, r4
 8006ec2:	f7fb fa87 	bl	80023d4 <__aeabi_ui2d>
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4b62      	ldr	r3, [pc, #392]	@ (8007054 <_dtoa_r+0x394>)
 8006eca:	1e77      	subs	r7, r6, #1
 8006ecc:	18cb      	adds	r3, r1, r3
 8006ece:	9218      	str	r2, [sp, #96]	@ 0x60
 8006ed0:	e776      	b.n	8006dc0 <_dtoa_r+0x100>
 8006ed2:	2320      	movs	r3, #32
 8006ed4:	0020      	movs	r0, r4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	4098      	lsls	r0, r3
 8006eda:	e7f2      	b.n	8006ec2 <_dtoa_r+0x202>
 8006edc:	9015      	str	r0, [sp, #84]	@ 0x54
 8006ede:	e7ba      	b.n	8006e56 <_dtoa_r+0x196>
 8006ee0:	920d      	str	r2, [sp, #52]	@ 0x34
 8006ee2:	e7c3      	b.n	8006e6c <_dtoa_r+0x1ac>
 8006ee4:	9b06      	ldr	r3, [sp, #24]
 8006ee6:	9a04      	ldr	r2, [sp, #16]
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	9306      	str	r3, [sp, #24]
 8006eec:	4253      	negs	r3, r2
 8006eee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	9314      	str	r3, [sp, #80]	@ 0x50
 8006ef4:	e7c5      	b.n	8006e82 <_dtoa_r+0x1c2>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006efa:	9310      	str	r3, [sp, #64]	@ 0x40
 8006efc:	4694      	mov	ip, r2
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	4463      	add	r3, ip
 8006f02:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f04:	3301      	adds	r3, #1
 8006f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	dc08      	bgt.n	8006f1e <_dtoa_r+0x25e>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e006      	b.n	8006f1e <_dtoa_r+0x25e>
 8006f10:	2301      	movs	r3, #1
 8006f12:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dd28      	ble.n	8006f6c <_dtoa_r+0x2ac>
 8006f1a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f1e:	9a03      	ldr	r2, [sp, #12]
 8006f20:	2100      	movs	r1, #0
 8006f22:	69d0      	ldr	r0, [r2, #28]
 8006f24:	2204      	movs	r2, #4
 8006f26:	0015      	movs	r5, r2
 8006f28:	3514      	adds	r5, #20
 8006f2a:	429d      	cmp	r5, r3
 8006f2c:	d923      	bls.n	8006f76 <_dtoa_r+0x2b6>
 8006f2e:	6041      	str	r1, [r0, #4]
 8006f30:	9803      	ldr	r0, [sp, #12]
 8006f32:	f000 fdbb 	bl	8007aac <_Balloc>
 8006f36:	9008      	str	r0, [sp, #32]
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d11f      	bne.n	8006f7c <_dtoa_r+0x2bc>
 8006f3c:	21b0      	movs	r1, #176	@ 0xb0
 8006f3e:	4b46      	ldr	r3, [pc, #280]	@ (8007058 <_dtoa_r+0x398>)
 8006f40:	4831      	ldr	r0, [pc, #196]	@ (8007008 <_dtoa_r+0x348>)
 8006f42:	9a08      	ldr	r2, [sp, #32]
 8006f44:	31ff      	adds	r1, #255	@ 0xff
 8006f46:	e6d0      	b.n	8006cea <_dtoa_r+0x2a>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e7e2      	b.n	8006f12 <_dtoa_r+0x252>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	e7d3      	b.n	8006ef8 <_dtoa_r+0x238>
 8006f50:	2300      	movs	r3, #0
 8006f52:	9410      	str	r4, [sp, #64]	@ 0x40
 8006f54:	9322      	str	r3, [sp, #136]	@ 0x88
 8006f56:	3b01      	subs	r3, #1
 8006f58:	2200      	movs	r2, #0
 8006f5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f5e:	3313      	adds	r3, #19
 8006f60:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006f62:	e7dc      	b.n	8006f1e <_dtoa_r+0x25e>
 8006f64:	2301      	movs	r3, #1
 8006f66:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f68:	3b02      	subs	r3, #2
 8006f6a:	e7f5      	b.n	8006f58 <_dtoa_r+0x298>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	001a      	movs	r2, r3
 8006f70:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f74:	e7f4      	b.n	8006f60 <_dtoa_r+0x2a0>
 8006f76:	3101      	adds	r1, #1
 8006f78:	0052      	lsls	r2, r2, #1
 8006f7a:	e7d4      	b.n	8006f26 <_dtoa_r+0x266>
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	9a08      	ldr	r2, [sp, #32]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f86:	2b0e      	cmp	r3, #14
 8006f88:	d900      	bls.n	8006f8c <_dtoa_r+0x2cc>
 8006f8a:	e0d6      	b.n	800713a <_dtoa_r+0x47a>
 8006f8c:	2c00      	cmp	r4, #0
 8006f8e:	d100      	bne.n	8006f92 <_dtoa_r+0x2d2>
 8006f90:	e0d3      	b.n	800713a <_dtoa_r+0x47a>
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd63      	ble.n	8007060 <_dtoa_r+0x3a0>
 8006f98:	210f      	movs	r1, #15
 8006f9a:	9a04      	ldr	r2, [sp, #16]
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007048 <_dtoa_r+0x388>)
 8006f9e:	400a      	ands	r2, r1
 8006fa0:	00d2      	lsls	r2, r2, #3
 8006fa2:	189b      	adds	r3, r3, r2
 8006fa4:	681e      	ldr	r6, [r3, #0]
 8006fa6:	685f      	ldr	r7, [r3, #4]
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	2402      	movs	r4, #2
 8006fac:	111d      	asrs	r5, r3, #4
 8006fae:	05db      	lsls	r3, r3, #23
 8006fb0:	d50a      	bpl.n	8006fc8 <_dtoa_r+0x308>
 8006fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800705c <_dtoa_r+0x39c>)
 8006fb4:	400d      	ands	r5, r1
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006fbc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006fbe:	f7f9 fe53 	bl	8000c68 <__aeabi_ddiv>
 8006fc2:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	4b24      	ldr	r3, [pc, #144]	@ (800705c <_dtoa_r+0x39c>)
 8006fca:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	d108      	bne.n	8006fe2 <_dtoa_r+0x322>
 8006fd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006fd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fd4:	0032      	movs	r2, r6
 8006fd6:	003b      	movs	r3, r7
 8006fd8:	f7f9 fe46 	bl	8000c68 <__aeabi_ddiv>
 8006fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fde:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006fe0:	e059      	b.n	8007096 <_dtoa_r+0x3d6>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	421d      	tst	r5, r3
 8006fe6:	d009      	beq.n	8006ffc <_dtoa_r+0x33c>
 8006fe8:	18e4      	adds	r4, r4, r3
 8006fea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fec:	0030      	movs	r0, r6
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	0039      	movs	r1, r7
 8006ff4:	f7fa fa72 	bl	80014dc <__aeabi_dmul>
 8006ff8:	0006      	movs	r6, r0
 8006ffa:	000f      	movs	r7, r1
 8006ffc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ffe:	106d      	asrs	r5, r5, #1
 8007000:	3308      	adds	r3, #8
 8007002:	e7e2      	b.n	8006fca <_dtoa_r+0x30a>
 8007004:	08009299 	.word	0x08009299
 8007008:	080092b0 	.word	0x080092b0
 800700c:	7ff00000 	.word	0x7ff00000
 8007010:	0000270f 	.word	0x0000270f
 8007014:	08009295 	.word	0x08009295
 8007018:	08009298 	.word	0x08009298
 800701c:	08009269 	.word	0x08009269
 8007020:	08009268 	.word	0x08009268
 8007024:	3ff00000 	.word	0x3ff00000
 8007028:	fffffc01 	.word	0xfffffc01
 800702c:	3ff80000 	.word	0x3ff80000
 8007030:	636f4361 	.word	0x636f4361
 8007034:	3fd287a7 	.word	0x3fd287a7
 8007038:	8b60c8b3 	.word	0x8b60c8b3
 800703c:	3fc68a28 	.word	0x3fc68a28
 8007040:	509f79fb 	.word	0x509f79fb
 8007044:	3fd34413 	.word	0x3fd34413
 8007048:	08009400 	.word	0x08009400
 800704c:	00000432 	.word	0x00000432
 8007050:	00000412 	.word	0x00000412
 8007054:	fe100000 	.word	0xfe100000
 8007058:	08009308 	.word	0x08009308
 800705c:	080093d8 	.word	0x080093d8
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	2402      	movs	r4, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d016      	beq.n	8007096 <_dtoa_r+0x3d6>
 8007068:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800706a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800706c:	220f      	movs	r2, #15
 800706e:	425d      	negs	r5, r3
 8007070:	402a      	ands	r2, r5
 8007072:	4bd5      	ldr	r3, [pc, #852]	@ (80073c8 <_dtoa_r+0x708>)
 8007074:	00d2      	lsls	r2, r2, #3
 8007076:	189b      	adds	r3, r3, r2
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f7fa fa2e 	bl	80014dc <__aeabi_dmul>
 8007080:	2701      	movs	r7, #1
 8007082:	2300      	movs	r3, #0
 8007084:	900a      	str	r0, [sp, #40]	@ 0x28
 8007086:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007088:	4ed0      	ldr	r6, [pc, #832]	@ (80073cc <_dtoa_r+0x70c>)
 800708a:	112d      	asrs	r5, r5, #4
 800708c:	2d00      	cmp	r5, #0
 800708e:	d000      	beq.n	8007092 <_dtoa_r+0x3d2>
 8007090:	e095      	b.n	80071be <_dtoa_r+0x4fe>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1a2      	bne.n	8006fdc <_dtoa_r+0x31c>
 8007096:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007098:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800709a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800709c:	2b00      	cmp	r3, #0
 800709e:	d100      	bne.n	80070a2 <_dtoa_r+0x3e2>
 80070a0:	e098      	b.n	80071d4 <_dtoa_r+0x514>
 80070a2:	2200      	movs	r2, #0
 80070a4:	0030      	movs	r0, r6
 80070a6:	0039      	movs	r1, r7
 80070a8:	4bc9      	ldr	r3, [pc, #804]	@ (80073d0 <_dtoa_r+0x710>)
 80070aa:	f7f9 f9d1 	bl	8000450 <__aeabi_dcmplt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d100      	bne.n	80070b4 <_dtoa_r+0x3f4>
 80070b2:	e08f      	b.n	80071d4 <_dtoa_r+0x514>
 80070b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d100      	bne.n	80070bc <_dtoa_r+0x3fc>
 80070ba:	e08b      	b.n	80071d4 <_dtoa_r+0x514>
 80070bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070be:	2b00      	cmp	r3, #0
 80070c0:	dd37      	ble.n	8007132 <_dtoa_r+0x472>
 80070c2:	9b04      	ldr	r3, [sp, #16]
 80070c4:	2200      	movs	r2, #0
 80070c6:	3b01      	subs	r3, #1
 80070c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80070ca:	0030      	movs	r0, r6
 80070cc:	4bc1      	ldr	r3, [pc, #772]	@ (80073d4 <_dtoa_r+0x714>)
 80070ce:	0039      	movs	r1, r7
 80070d0:	f7fa fa04 	bl	80014dc <__aeabi_dmul>
 80070d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80070d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070da:	3401      	adds	r4, #1
 80070dc:	0020      	movs	r0, r4
 80070de:	9311      	str	r3, [sp, #68]	@ 0x44
 80070e0:	f7fb f94a 	bl	8002378 <__aeabi_i2d>
 80070e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070e8:	f7fa f9f8 	bl	80014dc <__aeabi_dmul>
 80070ec:	4bba      	ldr	r3, [pc, #744]	@ (80073d8 <_dtoa_r+0x718>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	f7f9 f9f4 	bl	80004dc <__aeabi_dadd>
 80070f4:	4bb9      	ldr	r3, [pc, #740]	@ (80073dc <_dtoa_r+0x71c>)
 80070f6:	0006      	movs	r6, r0
 80070f8:	18cf      	adds	r7, r1, r3
 80070fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d16d      	bne.n	80071dc <_dtoa_r+0x51c>
 8007100:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007102:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007104:	2200      	movs	r2, #0
 8007106:	4bb6      	ldr	r3, [pc, #728]	@ (80073e0 <_dtoa_r+0x720>)
 8007108:	f7fa fcce 	bl	8001aa8 <__aeabi_dsub>
 800710c:	0032      	movs	r2, r6
 800710e:	003b      	movs	r3, r7
 8007110:	0004      	movs	r4, r0
 8007112:	000d      	movs	r5, r1
 8007114:	f7f9 f9b0 	bl	8000478 <__aeabi_dcmpgt>
 8007118:	2800      	cmp	r0, #0
 800711a:	d000      	beq.n	800711e <_dtoa_r+0x45e>
 800711c:	e2b6      	b.n	800768c <_dtoa_r+0x9cc>
 800711e:	2180      	movs	r1, #128	@ 0x80
 8007120:	0609      	lsls	r1, r1, #24
 8007122:	187b      	adds	r3, r7, r1
 8007124:	0032      	movs	r2, r6
 8007126:	0020      	movs	r0, r4
 8007128:	0029      	movs	r1, r5
 800712a:	f7f9 f991 	bl	8000450 <__aeabi_dcmplt>
 800712e:	2800      	cmp	r0, #0
 8007130:	d128      	bne.n	8007184 <_dtoa_r+0x4c4>
 8007132:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007134:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007136:	930a      	str	r3, [sp, #40]	@ 0x28
 8007138:	940b      	str	r4, [sp, #44]	@ 0x2c
 800713a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800713c:	2b00      	cmp	r3, #0
 800713e:	da00      	bge.n	8007142 <_dtoa_r+0x482>
 8007140:	e174      	b.n	800742c <_dtoa_r+0x76c>
 8007142:	9a04      	ldr	r2, [sp, #16]
 8007144:	2a0e      	cmp	r2, #14
 8007146:	dd00      	ble.n	800714a <_dtoa_r+0x48a>
 8007148:	e170      	b.n	800742c <_dtoa_r+0x76c>
 800714a:	4b9f      	ldr	r3, [pc, #636]	@ (80073c8 <_dtoa_r+0x708>)
 800714c:	00d2      	lsls	r2, r2, #3
 800714e:	189b      	adds	r3, r3, r2
 8007150:	685c      	ldr	r4, [r3, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	9306      	str	r3, [sp, #24]
 8007156:	9407      	str	r4, [sp, #28]
 8007158:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800715a:	2b00      	cmp	r3, #0
 800715c:	db00      	blt.n	8007160 <_dtoa_r+0x4a0>
 800715e:	e0e7      	b.n	8007330 <_dtoa_r+0x670>
 8007160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	dd00      	ble.n	8007168 <_dtoa_r+0x4a8>
 8007166:	e0e3      	b.n	8007330 <_dtoa_r+0x670>
 8007168:	d10c      	bne.n	8007184 <_dtoa_r+0x4c4>
 800716a:	9806      	ldr	r0, [sp, #24]
 800716c:	9907      	ldr	r1, [sp, #28]
 800716e:	2200      	movs	r2, #0
 8007170:	4b9b      	ldr	r3, [pc, #620]	@ (80073e0 <_dtoa_r+0x720>)
 8007172:	f7fa f9b3 	bl	80014dc <__aeabi_dmul>
 8007176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800717a:	f7f9 f987 	bl	800048c <__aeabi_dcmpge>
 800717e:	2800      	cmp	r0, #0
 8007180:	d100      	bne.n	8007184 <_dtoa_r+0x4c4>
 8007182:	e286      	b.n	8007692 <_dtoa_r+0x9d2>
 8007184:	2600      	movs	r6, #0
 8007186:	0037      	movs	r7, r6
 8007188:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800718a:	9c08      	ldr	r4, [sp, #32]
 800718c:	43db      	mvns	r3, r3
 800718e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007190:	9704      	str	r7, [sp, #16]
 8007192:	2700      	movs	r7, #0
 8007194:	0031      	movs	r1, r6
 8007196:	9803      	ldr	r0, [sp, #12]
 8007198:	f000 fccc 	bl	8007b34 <_Bfree>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d100      	bne.n	80071a4 <_dtoa_r+0x4e4>
 80071a2:	e0bb      	b.n	800731c <_dtoa_r+0x65c>
 80071a4:	2f00      	cmp	r7, #0
 80071a6:	d005      	beq.n	80071b4 <_dtoa_r+0x4f4>
 80071a8:	429f      	cmp	r7, r3
 80071aa:	d003      	beq.n	80071b4 <_dtoa_r+0x4f4>
 80071ac:	0039      	movs	r1, r7
 80071ae:	9803      	ldr	r0, [sp, #12]
 80071b0:	f000 fcc0 	bl	8007b34 <_Bfree>
 80071b4:	9904      	ldr	r1, [sp, #16]
 80071b6:	9803      	ldr	r0, [sp, #12]
 80071b8:	f000 fcbc 	bl	8007b34 <_Bfree>
 80071bc:	e0ae      	b.n	800731c <_dtoa_r+0x65c>
 80071be:	423d      	tst	r5, r7
 80071c0:	d005      	beq.n	80071ce <_dtoa_r+0x50e>
 80071c2:	6832      	ldr	r2, [r6, #0]
 80071c4:	6873      	ldr	r3, [r6, #4]
 80071c6:	f7fa f989 	bl	80014dc <__aeabi_dmul>
 80071ca:	003b      	movs	r3, r7
 80071cc:	3401      	adds	r4, #1
 80071ce:	106d      	asrs	r5, r5, #1
 80071d0:	3608      	adds	r6, #8
 80071d2:	e75b      	b.n	800708c <_dtoa_r+0x3cc>
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80071d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071da:	e77f      	b.n	80070dc <_dtoa_r+0x41c>
 80071dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071de:	4b7a      	ldr	r3, [pc, #488]	@ (80073c8 <_dtoa_r+0x708>)
 80071e0:	3a01      	subs	r2, #1
 80071e2:	00d2      	lsls	r2, r2, #3
 80071e4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2900      	cmp	r1, #0
 80071ee:	d04c      	beq.n	800728a <_dtoa_r+0x5ca>
 80071f0:	2000      	movs	r0, #0
 80071f2:	497c      	ldr	r1, [pc, #496]	@ (80073e4 <_dtoa_r+0x724>)
 80071f4:	f7f9 fd38 	bl	8000c68 <__aeabi_ddiv>
 80071f8:	0032      	movs	r2, r6
 80071fa:	003b      	movs	r3, r7
 80071fc:	f7fa fc54 	bl	8001aa8 <__aeabi_dsub>
 8007200:	9a08      	ldr	r2, [sp, #32]
 8007202:	0006      	movs	r6, r0
 8007204:	4694      	mov	ip, r2
 8007206:	000f      	movs	r7, r1
 8007208:	9b08      	ldr	r3, [sp, #32]
 800720a:	9316      	str	r3, [sp, #88]	@ 0x58
 800720c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800720e:	4463      	add	r3, ip
 8007210:	9311      	str	r3, [sp, #68]	@ 0x44
 8007212:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007214:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007216:	f7fb f873 	bl	8002300 <__aeabi_d2iz>
 800721a:	0005      	movs	r5, r0
 800721c:	f7fb f8ac 	bl	8002378 <__aeabi_i2d>
 8007220:	0002      	movs	r2, r0
 8007222:	000b      	movs	r3, r1
 8007224:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007226:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007228:	f7fa fc3e 	bl	8001aa8 <__aeabi_dsub>
 800722c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800722e:	3530      	adds	r5, #48	@ 0x30
 8007230:	1c5c      	adds	r4, r3, #1
 8007232:	701d      	strb	r5, [r3, #0]
 8007234:	0032      	movs	r2, r6
 8007236:	003b      	movs	r3, r7
 8007238:	900a      	str	r0, [sp, #40]	@ 0x28
 800723a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800723c:	f7f9 f908 	bl	8000450 <__aeabi_dcmplt>
 8007240:	2800      	cmp	r0, #0
 8007242:	d16b      	bne.n	800731c <_dtoa_r+0x65c>
 8007244:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007248:	2000      	movs	r0, #0
 800724a:	4961      	ldr	r1, [pc, #388]	@ (80073d0 <_dtoa_r+0x710>)
 800724c:	f7fa fc2c 	bl	8001aa8 <__aeabi_dsub>
 8007250:	0032      	movs	r2, r6
 8007252:	003b      	movs	r3, r7
 8007254:	f7f9 f8fc 	bl	8000450 <__aeabi_dcmplt>
 8007258:	2800      	cmp	r0, #0
 800725a:	d000      	beq.n	800725e <_dtoa_r+0x59e>
 800725c:	e0c6      	b.n	80073ec <_dtoa_r+0x72c>
 800725e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007260:	42a3      	cmp	r3, r4
 8007262:	d100      	bne.n	8007266 <_dtoa_r+0x5a6>
 8007264:	e765      	b.n	8007132 <_dtoa_r+0x472>
 8007266:	2200      	movs	r2, #0
 8007268:	0030      	movs	r0, r6
 800726a:	0039      	movs	r1, r7
 800726c:	4b59      	ldr	r3, [pc, #356]	@ (80073d4 <_dtoa_r+0x714>)
 800726e:	f7fa f935 	bl	80014dc <__aeabi_dmul>
 8007272:	2200      	movs	r2, #0
 8007274:	0006      	movs	r6, r0
 8007276:	000f      	movs	r7, r1
 8007278:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800727a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800727c:	4b55      	ldr	r3, [pc, #340]	@ (80073d4 <_dtoa_r+0x714>)
 800727e:	f7fa f92d 	bl	80014dc <__aeabi_dmul>
 8007282:	9416      	str	r4, [sp, #88]	@ 0x58
 8007284:	900a      	str	r0, [sp, #40]	@ 0x28
 8007286:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007288:	e7c3      	b.n	8007212 <_dtoa_r+0x552>
 800728a:	0030      	movs	r0, r6
 800728c:	0039      	movs	r1, r7
 800728e:	f7fa f925 	bl	80014dc <__aeabi_dmul>
 8007292:	9d08      	ldr	r5, [sp, #32]
 8007294:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007296:	002b      	movs	r3, r5
 8007298:	4694      	mov	ip, r2
 800729a:	9016      	str	r0, [sp, #88]	@ 0x58
 800729c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800729e:	4463      	add	r3, ip
 80072a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80072a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072a6:	f7fb f82b 	bl	8002300 <__aeabi_d2iz>
 80072aa:	0004      	movs	r4, r0
 80072ac:	f7fb f864 	bl	8002378 <__aeabi_i2d>
 80072b0:	000b      	movs	r3, r1
 80072b2:	0002      	movs	r2, r0
 80072b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072b8:	f7fa fbf6 	bl	8001aa8 <__aeabi_dsub>
 80072bc:	3430      	adds	r4, #48	@ 0x30
 80072be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072c0:	702c      	strb	r4, [r5, #0]
 80072c2:	3501      	adds	r5, #1
 80072c4:	0006      	movs	r6, r0
 80072c6:	000f      	movs	r7, r1
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	d12a      	bne.n	8007322 <_dtoa_r+0x662>
 80072cc:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80072ce:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80072d0:	9b08      	ldr	r3, [sp, #32]
 80072d2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80072d4:	469c      	mov	ip, r3
 80072d6:	2200      	movs	r2, #0
 80072d8:	4b42      	ldr	r3, [pc, #264]	@ (80073e4 <_dtoa_r+0x724>)
 80072da:	4464      	add	r4, ip
 80072dc:	f7f9 f8fe 	bl	80004dc <__aeabi_dadd>
 80072e0:	0002      	movs	r2, r0
 80072e2:	000b      	movs	r3, r1
 80072e4:	0030      	movs	r0, r6
 80072e6:	0039      	movs	r1, r7
 80072e8:	f7f9 f8c6 	bl	8000478 <__aeabi_dcmpgt>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d000      	beq.n	80072f2 <_dtoa_r+0x632>
 80072f0:	e07c      	b.n	80073ec <_dtoa_r+0x72c>
 80072f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80072f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072f6:	2000      	movs	r0, #0
 80072f8:	493a      	ldr	r1, [pc, #232]	@ (80073e4 <_dtoa_r+0x724>)
 80072fa:	f7fa fbd5 	bl	8001aa8 <__aeabi_dsub>
 80072fe:	0002      	movs	r2, r0
 8007300:	000b      	movs	r3, r1
 8007302:	0030      	movs	r0, r6
 8007304:	0039      	movs	r1, r7
 8007306:	f7f9 f8a3 	bl	8000450 <__aeabi_dcmplt>
 800730a:	2800      	cmp	r0, #0
 800730c:	d100      	bne.n	8007310 <_dtoa_r+0x650>
 800730e:	e710      	b.n	8007132 <_dtoa_r+0x472>
 8007310:	0023      	movs	r3, r4
 8007312:	3c01      	subs	r4, #1
 8007314:	7822      	ldrb	r2, [r4, #0]
 8007316:	2a30      	cmp	r2, #48	@ 0x30
 8007318:	d0fa      	beq.n	8007310 <_dtoa_r+0x650>
 800731a:	001c      	movs	r4, r3
 800731c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800731e:	9304      	str	r3, [sp, #16]
 8007320:	e042      	b.n	80073a8 <_dtoa_r+0x6e8>
 8007322:	2200      	movs	r2, #0
 8007324:	4b2b      	ldr	r3, [pc, #172]	@ (80073d4 <_dtoa_r+0x714>)
 8007326:	f7fa f8d9 	bl	80014dc <__aeabi_dmul>
 800732a:	900a      	str	r0, [sp, #40]	@ 0x28
 800732c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800732e:	e7b8      	b.n	80072a2 <_dtoa_r+0x5e2>
 8007330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007332:	9d08      	ldr	r5, [sp, #32]
 8007334:	3b01      	subs	r3, #1
 8007336:	195b      	adds	r3, r3, r5
 8007338:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800733a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800733c:	930a      	str	r3, [sp, #40]	@ 0x28
 800733e:	9a06      	ldr	r2, [sp, #24]
 8007340:	9b07      	ldr	r3, [sp, #28]
 8007342:	0030      	movs	r0, r6
 8007344:	0039      	movs	r1, r7
 8007346:	f7f9 fc8f 	bl	8000c68 <__aeabi_ddiv>
 800734a:	f7fa ffd9 	bl	8002300 <__aeabi_d2iz>
 800734e:	9009      	str	r0, [sp, #36]	@ 0x24
 8007350:	f7fb f812 	bl	8002378 <__aeabi_i2d>
 8007354:	9a06      	ldr	r2, [sp, #24]
 8007356:	9b07      	ldr	r3, [sp, #28]
 8007358:	f7fa f8c0 	bl	80014dc <__aeabi_dmul>
 800735c:	0002      	movs	r2, r0
 800735e:	000b      	movs	r3, r1
 8007360:	0030      	movs	r0, r6
 8007362:	0039      	movs	r1, r7
 8007364:	f7fa fba0 	bl	8001aa8 <__aeabi_dsub>
 8007368:	002b      	movs	r3, r5
 800736a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800736c:	3501      	adds	r5, #1
 800736e:	3230      	adds	r2, #48	@ 0x30
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007374:	002c      	movs	r4, r5
 8007376:	429a      	cmp	r2, r3
 8007378:	d14b      	bne.n	8007412 <_dtoa_r+0x752>
 800737a:	0002      	movs	r2, r0
 800737c:	000b      	movs	r3, r1
 800737e:	f7f9 f8ad 	bl	80004dc <__aeabi_dadd>
 8007382:	9a06      	ldr	r2, [sp, #24]
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	0006      	movs	r6, r0
 8007388:	000f      	movs	r7, r1
 800738a:	f7f9 f875 	bl	8000478 <__aeabi_dcmpgt>
 800738e:	2800      	cmp	r0, #0
 8007390:	d12a      	bne.n	80073e8 <_dtoa_r+0x728>
 8007392:	9a06      	ldr	r2, [sp, #24]
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	0030      	movs	r0, r6
 8007398:	0039      	movs	r1, r7
 800739a:	f7f9 f853 	bl	8000444 <__aeabi_dcmpeq>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d002      	beq.n	80073a8 <_dtoa_r+0x6e8>
 80073a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a4:	07dd      	lsls	r5, r3, #31
 80073a6:	d41f      	bmi.n	80073e8 <_dtoa_r+0x728>
 80073a8:	9905      	ldr	r1, [sp, #20]
 80073aa:	9803      	ldr	r0, [sp, #12]
 80073ac:	f000 fbc2 	bl	8007b34 <_Bfree>
 80073b0:	2300      	movs	r3, #0
 80073b2:	7023      	strb	r3, [r4, #0]
 80073b4:	9b04      	ldr	r3, [sp, #16]
 80073b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073b8:	3301      	adds	r3, #1
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d100      	bne.n	80073c4 <_dtoa_r+0x704>
 80073c2:	e4c7      	b.n	8006d54 <_dtoa_r+0x94>
 80073c4:	601c      	str	r4, [r3, #0]
 80073c6:	e4c5      	b.n	8006d54 <_dtoa_r+0x94>
 80073c8:	08009400 	.word	0x08009400
 80073cc:	080093d8 	.word	0x080093d8
 80073d0:	3ff00000 	.word	0x3ff00000
 80073d4:	40240000 	.word	0x40240000
 80073d8:	401c0000 	.word	0x401c0000
 80073dc:	fcc00000 	.word	0xfcc00000
 80073e0:	40140000 	.word	0x40140000
 80073e4:	3fe00000 	.word	0x3fe00000
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80073ec:	0023      	movs	r3, r4
 80073ee:	001c      	movs	r4, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	2a39      	cmp	r2, #57	@ 0x39
 80073f6:	d108      	bne.n	800740a <_dtoa_r+0x74a>
 80073f8:	9a08      	ldr	r2, [sp, #32]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d1f7      	bne.n	80073ee <_dtoa_r+0x72e>
 80073fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007400:	9908      	ldr	r1, [sp, #32]
 8007402:	3201      	adds	r2, #1
 8007404:	920c      	str	r2, [sp, #48]	@ 0x30
 8007406:	2230      	movs	r2, #48	@ 0x30
 8007408:	700a      	strb	r2, [r1, #0]
 800740a:	781a      	ldrb	r2, [r3, #0]
 800740c:	3201      	adds	r2, #1
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	e784      	b.n	800731c <_dtoa_r+0x65c>
 8007412:	2200      	movs	r2, #0
 8007414:	4bc6      	ldr	r3, [pc, #792]	@ (8007730 <_dtoa_r+0xa70>)
 8007416:	f7fa f861 	bl	80014dc <__aeabi_dmul>
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	0006      	movs	r6, r0
 8007420:	000f      	movs	r7, r1
 8007422:	f7f9 f80f 	bl	8000444 <__aeabi_dcmpeq>
 8007426:	2800      	cmp	r0, #0
 8007428:	d089      	beq.n	800733e <_dtoa_r+0x67e>
 800742a:	e7bd      	b.n	80073a8 <_dtoa_r+0x6e8>
 800742c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800742e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007430:	9c06      	ldr	r4, [sp, #24]
 8007432:	2f00      	cmp	r7, #0
 8007434:	d014      	beq.n	8007460 <_dtoa_r+0x7a0>
 8007436:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007438:	2a01      	cmp	r2, #1
 800743a:	dd00      	ble.n	800743e <_dtoa_r+0x77e>
 800743c:	e0e4      	b.n	8007608 <_dtoa_r+0x948>
 800743e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007440:	2a00      	cmp	r2, #0
 8007442:	d100      	bne.n	8007446 <_dtoa_r+0x786>
 8007444:	e0da      	b.n	80075fc <_dtoa_r+0x93c>
 8007446:	4abb      	ldr	r2, [pc, #748]	@ (8007734 <_dtoa_r+0xa74>)
 8007448:	189b      	adds	r3, r3, r2
 800744a:	9a06      	ldr	r2, [sp, #24]
 800744c:	2101      	movs	r1, #1
 800744e:	18d2      	adds	r2, r2, r3
 8007450:	9206      	str	r2, [sp, #24]
 8007452:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007454:	9803      	ldr	r0, [sp, #12]
 8007456:	18d3      	adds	r3, r2, r3
 8007458:	930d      	str	r3, [sp, #52]	@ 0x34
 800745a:	f000 fc23 	bl	8007ca4 <__i2b>
 800745e:	0007      	movs	r7, r0
 8007460:	2c00      	cmp	r4, #0
 8007462:	d00e      	beq.n	8007482 <_dtoa_r+0x7c2>
 8007464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007466:	2b00      	cmp	r3, #0
 8007468:	dd0b      	ble.n	8007482 <_dtoa_r+0x7c2>
 800746a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800746c:	0023      	movs	r3, r4
 800746e:	4294      	cmp	r4, r2
 8007470:	dd00      	ble.n	8007474 <_dtoa_r+0x7b4>
 8007472:	0013      	movs	r3, r2
 8007474:	9a06      	ldr	r2, [sp, #24]
 8007476:	1ae4      	subs	r4, r4, r3
 8007478:	1ad2      	subs	r2, r2, r3
 800747a:	9206      	str	r2, [sp, #24]
 800747c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	930d      	str	r3, [sp, #52]	@ 0x34
 8007482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d021      	beq.n	80074cc <_dtoa_r+0x80c>
 8007488:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	d100      	bne.n	8007490 <_dtoa_r+0x7d0>
 800748e:	e0d3      	b.n	8007638 <_dtoa_r+0x978>
 8007490:	9e05      	ldr	r6, [sp, #20]
 8007492:	2d00      	cmp	r5, #0
 8007494:	d014      	beq.n	80074c0 <_dtoa_r+0x800>
 8007496:	0039      	movs	r1, r7
 8007498:	002a      	movs	r2, r5
 800749a:	9803      	ldr	r0, [sp, #12]
 800749c:	f000 fcc4 	bl	8007e28 <__pow5mult>
 80074a0:	9a05      	ldr	r2, [sp, #20]
 80074a2:	0001      	movs	r1, r0
 80074a4:	0007      	movs	r7, r0
 80074a6:	9803      	ldr	r0, [sp, #12]
 80074a8:	f000 fc14 	bl	8007cd4 <__multiply>
 80074ac:	0006      	movs	r6, r0
 80074ae:	9905      	ldr	r1, [sp, #20]
 80074b0:	9803      	ldr	r0, [sp, #12]
 80074b2:	f000 fb3f 	bl	8007b34 <_Bfree>
 80074b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074b8:	9605      	str	r6, [sp, #20]
 80074ba:	1b5b      	subs	r3, r3, r5
 80074bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074be:	d005      	beq.n	80074cc <_dtoa_r+0x80c>
 80074c0:	0031      	movs	r1, r6
 80074c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80074c4:	9803      	ldr	r0, [sp, #12]
 80074c6:	f000 fcaf 	bl	8007e28 <__pow5mult>
 80074ca:	9005      	str	r0, [sp, #20]
 80074cc:	2101      	movs	r1, #1
 80074ce:	9803      	ldr	r0, [sp, #12]
 80074d0:	f000 fbe8 	bl	8007ca4 <__i2b>
 80074d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074d6:	0006      	movs	r6, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d100      	bne.n	80074de <_dtoa_r+0x81e>
 80074dc:	e1bc      	b.n	8007858 <_dtoa_r+0xb98>
 80074de:	001a      	movs	r2, r3
 80074e0:	0001      	movs	r1, r0
 80074e2:	9803      	ldr	r0, [sp, #12]
 80074e4:	f000 fca0 	bl	8007e28 <__pow5mult>
 80074e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074ea:	0006      	movs	r6, r0
 80074ec:	2500      	movs	r5, #0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	dc16      	bgt.n	8007520 <_dtoa_r+0x860>
 80074f2:	2500      	movs	r5, #0
 80074f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074f6:	42ab      	cmp	r3, r5
 80074f8:	d10e      	bne.n	8007518 <_dtoa_r+0x858>
 80074fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074fc:	031b      	lsls	r3, r3, #12
 80074fe:	42ab      	cmp	r3, r5
 8007500:	d10a      	bne.n	8007518 <_dtoa_r+0x858>
 8007502:	4b8d      	ldr	r3, [pc, #564]	@ (8007738 <_dtoa_r+0xa78>)
 8007504:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007506:	4213      	tst	r3, r2
 8007508:	d006      	beq.n	8007518 <_dtoa_r+0x858>
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	3501      	adds	r5, #1
 800750e:	3301      	adds	r3, #1
 8007510:	9306      	str	r3, [sp, #24]
 8007512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007514:	3301      	adds	r3, #1
 8007516:	930d      	str	r3, [sp, #52]	@ 0x34
 8007518:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800751a:	2001      	movs	r0, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <_dtoa_r+0x872>
 8007520:	6933      	ldr	r3, [r6, #16]
 8007522:	3303      	adds	r3, #3
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	18f3      	adds	r3, r6, r3
 8007528:	6858      	ldr	r0, [r3, #4]
 800752a:	f000 fb6b 	bl	8007c04 <__hi0bits>
 800752e:	2320      	movs	r3, #32
 8007530:	1a18      	subs	r0, r3, r0
 8007532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007534:	1818      	adds	r0, r3, r0
 8007536:	0002      	movs	r2, r0
 8007538:	231f      	movs	r3, #31
 800753a:	401a      	ands	r2, r3
 800753c:	4218      	tst	r0, r3
 800753e:	d100      	bne.n	8007542 <_dtoa_r+0x882>
 8007540:	e081      	b.n	8007646 <_dtoa_r+0x986>
 8007542:	3301      	adds	r3, #1
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	2b04      	cmp	r3, #4
 8007548:	dd79      	ble.n	800763e <_dtoa_r+0x97e>
 800754a:	231c      	movs	r3, #28
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	9a06      	ldr	r2, [sp, #24]
 8007550:	18e4      	adds	r4, r4, r3
 8007552:	18d2      	adds	r2, r2, r3
 8007554:	9206      	str	r2, [sp, #24]
 8007556:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007558:	18d3      	adds	r3, r2, r3
 800755a:	930d      	str	r3, [sp, #52]	@ 0x34
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	dd05      	ble.n	800756e <_dtoa_r+0x8ae>
 8007562:	001a      	movs	r2, r3
 8007564:	9905      	ldr	r1, [sp, #20]
 8007566:	9803      	ldr	r0, [sp, #12]
 8007568:	f000 fcba 	bl	8007ee0 <__lshift>
 800756c:	9005      	str	r0, [sp, #20]
 800756e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007570:	2b00      	cmp	r3, #0
 8007572:	dd05      	ble.n	8007580 <_dtoa_r+0x8c0>
 8007574:	0031      	movs	r1, r6
 8007576:	001a      	movs	r2, r3
 8007578:	9803      	ldr	r0, [sp, #12]
 800757a:	f000 fcb1 	bl	8007ee0 <__lshift>
 800757e:	0006      	movs	r6, r0
 8007580:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007582:	2b00      	cmp	r3, #0
 8007584:	d061      	beq.n	800764a <_dtoa_r+0x98a>
 8007586:	0031      	movs	r1, r6
 8007588:	9805      	ldr	r0, [sp, #20]
 800758a:	f000 fd15 	bl	8007fb8 <__mcmp>
 800758e:	2800      	cmp	r0, #0
 8007590:	da5b      	bge.n	800764a <_dtoa_r+0x98a>
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	220a      	movs	r2, #10
 8007596:	3b01      	subs	r3, #1
 8007598:	930c      	str	r3, [sp, #48]	@ 0x30
 800759a:	9905      	ldr	r1, [sp, #20]
 800759c:	2300      	movs	r3, #0
 800759e:	9803      	ldr	r0, [sp, #12]
 80075a0:	f000 faec 	bl	8007b7c <__multadd>
 80075a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075a6:	9005      	str	r0, [sp, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d100      	bne.n	80075ae <_dtoa_r+0x8ee>
 80075ac:	e15b      	b.n	8007866 <_dtoa_r+0xba6>
 80075ae:	2300      	movs	r3, #0
 80075b0:	0039      	movs	r1, r7
 80075b2:	220a      	movs	r2, #10
 80075b4:	9803      	ldr	r0, [sp, #12]
 80075b6:	f000 fae1 	bl	8007b7c <__multadd>
 80075ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075bc:	0007      	movs	r7, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dc4d      	bgt.n	800765e <_dtoa_r+0x99e>
 80075c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	dd46      	ble.n	8007656 <_dtoa_r+0x996>
 80075c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d000      	beq.n	80075d0 <_dtoa_r+0x910>
 80075ce:	e5db      	b.n	8007188 <_dtoa_r+0x4c8>
 80075d0:	0031      	movs	r1, r6
 80075d2:	2205      	movs	r2, #5
 80075d4:	9803      	ldr	r0, [sp, #12]
 80075d6:	f000 fad1 	bl	8007b7c <__multadd>
 80075da:	0006      	movs	r6, r0
 80075dc:	0001      	movs	r1, r0
 80075de:	9805      	ldr	r0, [sp, #20]
 80075e0:	f000 fcea 	bl	8007fb8 <__mcmp>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	dc00      	bgt.n	80075ea <_dtoa_r+0x92a>
 80075e8:	e5ce      	b.n	8007188 <_dtoa_r+0x4c8>
 80075ea:	9b08      	ldr	r3, [sp, #32]
 80075ec:	9a08      	ldr	r2, [sp, #32]
 80075ee:	1c5c      	adds	r4, r3, #1
 80075f0:	2331      	movs	r3, #49	@ 0x31
 80075f2:	7013      	strb	r3, [r2, #0]
 80075f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075f6:	3301      	adds	r3, #1
 80075f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80075fa:	e5c9      	b.n	8007190 <_dtoa_r+0x4d0>
 80075fc:	2336      	movs	r3, #54	@ 0x36
 80075fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007600:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007602:	1a9b      	subs	r3, r3, r2
 8007604:	9c06      	ldr	r4, [sp, #24]
 8007606:	e720      	b.n	800744a <_dtoa_r+0x78a>
 8007608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760a:	1e5d      	subs	r5, r3, #1
 800760c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800760e:	42ab      	cmp	r3, r5
 8007610:	db08      	blt.n	8007624 <_dtoa_r+0x964>
 8007612:	1b5d      	subs	r5, r3, r5
 8007614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	daf4      	bge.n	8007604 <_dtoa_r+0x944>
 800761a:	9b06      	ldr	r3, [sp, #24]
 800761c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800761e:	1a9c      	subs	r4, r3, r2
 8007620:	2300      	movs	r3, #0
 8007622:	e712      	b.n	800744a <_dtoa_r+0x78a>
 8007624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007626:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007628:	1aeb      	subs	r3, r5, r3
 800762a:	18d3      	adds	r3, r2, r3
 800762c:	9314      	str	r3, [sp, #80]	@ 0x50
 800762e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007630:	9c06      	ldr	r4, [sp, #24]
 8007632:	2500      	movs	r5, #0
 8007634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007636:	e708      	b.n	800744a <_dtoa_r+0x78a>
 8007638:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800763a:	9905      	ldr	r1, [sp, #20]
 800763c:	e742      	b.n	80074c4 <_dtoa_r+0x804>
 800763e:	2b04      	cmp	r3, #4
 8007640:	d08c      	beq.n	800755c <_dtoa_r+0x89c>
 8007642:	331c      	adds	r3, #28
 8007644:	e783      	b.n	800754e <_dtoa_r+0x88e>
 8007646:	0013      	movs	r3, r2
 8007648:	e7fb      	b.n	8007642 <_dtoa_r+0x982>
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	930c      	str	r3, [sp, #48]	@ 0x30
 800764e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007650:	930e      	str	r3, [sp, #56]	@ 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	ddb5      	ble.n	80075c2 <_dtoa_r+0x902>
 8007656:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d100      	bne.n	800765e <_dtoa_r+0x99e>
 800765c:	e107      	b.n	800786e <_dtoa_r+0xbae>
 800765e:	2c00      	cmp	r4, #0
 8007660:	dd05      	ble.n	800766e <_dtoa_r+0x9ae>
 8007662:	0039      	movs	r1, r7
 8007664:	0022      	movs	r2, r4
 8007666:	9803      	ldr	r0, [sp, #12]
 8007668:	f000 fc3a 	bl	8007ee0 <__lshift>
 800766c:	0007      	movs	r7, r0
 800766e:	9704      	str	r7, [sp, #16]
 8007670:	2d00      	cmp	r5, #0
 8007672:	d020      	beq.n	80076b6 <_dtoa_r+0x9f6>
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	9803      	ldr	r0, [sp, #12]
 8007678:	f000 fa18 	bl	8007aac <_Balloc>
 800767c:	1e04      	subs	r4, r0, #0
 800767e:	d10c      	bne.n	800769a <_dtoa_r+0x9da>
 8007680:	0022      	movs	r2, r4
 8007682:	4b2e      	ldr	r3, [pc, #184]	@ (800773c <_dtoa_r+0xa7c>)
 8007684:	482e      	ldr	r0, [pc, #184]	@ (8007740 <_dtoa_r+0xa80>)
 8007686:	492f      	ldr	r1, [pc, #188]	@ (8007744 <_dtoa_r+0xa84>)
 8007688:	f7ff fb2f 	bl	8006cea <_dtoa_r+0x2a>
 800768c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800768e:	0037      	movs	r7, r6
 8007690:	e7ab      	b.n	80075ea <_dtoa_r+0x92a>
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007696:	930c      	str	r3, [sp, #48]	@ 0x30
 8007698:	e7f9      	b.n	800768e <_dtoa_r+0x9ce>
 800769a:	0039      	movs	r1, r7
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	310c      	adds	r1, #12
 80076a0:	3202      	adds	r2, #2
 80076a2:	0092      	lsls	r2, r2, #2
 80076a4:	300c      	adds	r0, #12
 80076a6:	f000 ffd1 	bl	800864c <memcpy>
 80076aa:	2201      	movs	r2, #1
 80076ac:	0021      	movs	r1, r4
 80076ae:	9803      	ldr	r0, [sp, #12]
 80076b0:	f000 fc16 	bl	8007ee0 <__lshift>
 80076b4:	9004      	str	r0, [sp, #16]
 80076b6:	9b08      	ldr	r3, [sp, #32]
 80076b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ba:	9306      	str	r3, [sp, #24]
 80076bc:	3b01      	subs	r3, #1
 80076be:	189b      	adds	r3, r3, r2
 80076c0:	2201      	movs	r2, #1
 80076c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80076c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076c6:	4013      	ands	r3, r2
 80076c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80076ca:	0031      	movs	r1, r6
 80076cc:	9805      	ldr	r0, [sp, #20]
 80076ce:	f7ff fa71 	bl	8006bb4 <quorem>
 80076d2:	0039      	movs	r1, r7
 80076d4:	0005      	movs	r5, r0
 80076d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80076d8:	9805      	ldr	r0, [sp, #20]
 80076da:	f000 fc6d 	bl	8007fb8 <__mcmp>
 80076de:	9a04      	ldr	r2, [sp, #16]
 80076e0:	900d      	str	r0, [sp, #52]	@ 0x34
 80076e2:	0031      	movs	r1, r6
 80076e4:	9803      	ldr	r0, [sp, #12]
 80076e6:	f000 fc83 	bl	8007ff0 <__mdiff>
 80076ea:	2201      	movs	r2, #1
 80076ec:	68c3      	ldr	r3, [r0, #12]
 80076ee:	0004      	movs	r4, r0
 80076f0:	3530      	adds	r5, #48	@ 0x30
 80076f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <_dtoa_r+0xa42>
 80076f8:	0001      	movs	r1, r0
 80076fa:	9805      	ldr	r0, [sp, #20]
 80076fc:	f000 fc5c 	bl	8007fb8 <__mcmp>
 8007700:	9009      	str	r0, [sp, #36]	@ 0x24
 8007702:	0021      	movs	r1, r4
 8007704:	9803      	ldr	r0, [sp, #12]
 8007706:	f000 fa15 	bl	8007b34 <_Bfree>
 800770a:	9b06      	ldr	r3, [sp, #24]
 800770c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800770e:	1c5c      	adds	r4, r3, #1
 8007710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007712:	4313      	orrs	r3, r2
 8007714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007716:	4313      	orrs	r3, r2
 8007718:	d116      	bne.n	8007748 <_dtoa_r+0xa88>
 800771a:	2d39      	cmp	r5, #57	@ 0x39
 800771c:	d02f      	beq.n	800777e <_dtoa_r+0xabe>
 800771e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007720:	2b00      	cmp	r3, #0
 8007722:	dd01      	ble.n	8007728 <_dtoa_r+0xa68>
 8007724:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007726:	3531      	adds	r5, #49	@ 0x31
 8007728:	9b06      	ldr	r3, [sp, #24]
 800772a:	701d      	strb	r5, [r3, #0]
 800772c:	e532      	b.n	8007194 <_dtoa_r+0x4d4>
 800772e:	46c0      	nop			@ (mov r8, r8)
 8007730:	40240000 	.word	0x40240000
 8007734:	00000433 	.word	0x00000433
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	08009308 	.word	0x08009308
 8007740:	080092b0 	.word	0x080092b0
 8007744:	000002ef 	.word	0x000002ef
 8007748:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800774a:	2b00      	cmp	r3, #0
 800774c:	db04      	blt.n	8007758 <_dtoa_r+0xa98>
 800774e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007750:	4313      	orrs	r3, r2
 8007752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007754:	4313      	orrs	r3, r2
 8007756:	d11e      	bne.n	8007796 <_dtoa_r+0xad6>
 8007758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775a:	2b00      	cmp	r3, #0
 800775c:	dde4      	ble.n	8007728 <_dtoa_r+0xa68>
 800775e:	9905      	ldr	r1, [sp, #20]
 8007760:	2201      	movs	r2, #1
 8007762:	9803      	ldr	r0, [sp, #12]
 8007764:	f000 fbbc 	bl	8007ee0 <__lshift>
 8007768:	0031      	movs	r1, r6
 800776a:	9005      	str	r0, [sp, #20]
 800776c:	f000 fc24 	bl	8007fb8 <__mcmp>
 8007770:	2800      	cmp	r0, #0
 8007772:	dc02      	bgt.n	800777a <_dtoa_r+0xaba>
 8007774:	d1d8      	bne.n	8007728 <_dtoa_r+0xa68>
 8007776:	07eb      	lsls	r3, r5, #31
 8007778:	d5d6      	bpl.n	8007728 <_dtoa_r+0xa68>
 800777a:	2d39      	cmp	r5, #57	@ 0x39
 800777c:	d1d2      	bne.n	8007724 <_dtoa_r+0xa64>
 800777e:	2339      	movs	r3, #57	@ 0x39
 8007780:	9a06      	ldr	r2, [sp, #24]
 8007782:	7013      	strb	r3, [r2, #0]
 8007784:	0023      	movs	r3, r4
 8007786:	001c      	movs	r4, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	2a39      	cmp	r2, #57	@ 0x39
 800778e:	d050      	beq.n	8007832 <_dtoa_r+0xb72>
 8007790:	3201      	adds	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e4fe      	b.n	8007194 <_dtoa_r+0x4d4>
 8007796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	dd03      	ble.n	80077a4 <_dtoa_r+0xae4>
 800779c:	2d39      	cmp	r5, #57	@ 0x39
 800779e:	d0ee      	beq.n	800777e <_dtoa_r+0xabe>
 80077a0:	3501      	adds	r5, #1
 80077a2:	e7c1      	b.n	8007728 <_dtoa_r+0xa68>
 80077a4:	9b06      	ldr	r3, [sp, #24]
 80077a6:	9a06      	ldr	r2, [sp, #24]
 80077a8:	701d      	strb	r5, [r3, #0]
 80077aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d02b      	beq.n	8007808 <_dtoa_r+0xb48>
 80077b0:	2300      	movs	r3, #0
 80077b2:	220a      	movs	r2, #10
 80077b4:	9905      	ldr	r1, [sp, #20]
 80077b6:	9803      	ldr	r0, [sp, #12]
 80077b8:	f000 f9e0 	bl	8007b7c <__multadd>
 80077bc:	9b04      	ldr	r3, [sp, #16]
 80077be:	9005      	str	r0, [sp, #20]
 80077c0:	429f      	cmp	r7, r3
 80077c2:	d109      	bne.n	80077d8 <_dtoa_r+0xb18>
 80077c4:	0039      	movs	r1, r7
 80077c6:	2300      	movs	r3, #0
 80077c8:	220a      	movs	r2, #10
 80077ca:	9803      	ldr	r0, [sp, #12]
 80077cc:	f000 f9d6 	bl	8007b7c <__multadd>
 80077d0:	0007      	movs	r7, r0
 80077d2:	9004      	str	r0, [sp, #16]
 80077d4:	9406      	str	r4, [sp, #24]
 80077d6:	e778      	b.n	80076ca <_dtoa_r+0xa0a>
 80077d8:	0039      	movs	r1, r7
 80077da:	2300      	movs	r3, #0
 80077dc:	220a      	movs	r2, #10
 80077de:	9803      	ldr	r0, [sp, #12]
 80077e0:	f000 f9cc 	bl	8007b7c <__multadd>
 80077e4:	2300      	movs	r3, #0
 80077e6:	0007      	movs	r7, r0
 80077e8:	220a      	movs	r2, #10
 80077ea:	9904      	ldr	r1, [sp, #16]
 80077ec:	9803      	ldr	r0, [sp, #12]
 80077ee:	f000 f9c5 	bl	8007b7c <__multadd>
 80077f2:	9004      	str	r0, [sp, #16]
 80077f4:	e7ee      	b.n	80077d4 <_dtoa_r+0xb14>
 80077f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077f8:	2401      	movs	r4, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dd00      	ble.n	8007800 <_dtoa_r+0xb40>
 80077fe:	001c      	movs	r4, r3
 8007800:	9704      	str	r7, [sp, #16]
 8007802:	2700      	movs	r7, #0
 8007804:	9b08      	ldr	r3, [sp, #32]
 8007806:	191c      	adds	r4, r3, r4
 8007808:	9905      	ldr	r1, [sp, #20]
 800780a:	2201      	movs	r2, #1
 800780c:	9803      	ldr	r0, [sp, #12]
 800780e:	f000 fb67 	bl	8007ee0 <__lshift>
 8007812:	0031      	movs	r1, r6
 8007814:	9005      	str	r0, [sp, #20]
 8007816:	f000 fbcf 	bl	8007fb8 <__mcmp>
 800781a:	2800      	cmp	r0, #0
 800781c:	dcb2      	bgt.n	8007784 <_dtoa_r+0xac4>
 800781e:	d101      	bne.n	8007824 <_dtoa_r+0xb64>
 8007820:	07ed      	lsls	r5, r5, #31
 8007822:	d4af      	bmi.n	8007784 <_dtoa_r+0xac4>
 8007824:	0023      	movs	r3, r4
 8007826:	001c      	movs	r4, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	2a30      	cmp	r2, #48	@ 0x30
 800782e:	d0fa      	beq.n	8007826 <_dtoa_r+0xb66>
 8007830:	e4b0      	b.n	8007194 <_dtoa_r+0x4d4>
 8007832:	9a08      	ldr	r2, [sp, #32]
 8007834:	429a      	cmp	r2, r3
 8007836:	d1a6      	bne.n	8007786 <_dtoa_r+0xac6>
 8007838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800783a:	3301      	adds	r3, #1
 800783c:	930c      	str	r3, [sp, #48]	@ 0x30
 800783e:	2331      	movs	r3, #49	@ 0x31
 8007840:	7013      	strb	r3, [r2, #0]
 8007842:	e4a7      	b.n	8007194 <_dtoa_r+0x4d4>
 8007844:	4b14      	ldr	r3, [pc, #80]	@ (8007898 <_dtoa_r+0xbd8>)
 8007846:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007848:	9308      	str	r3, [sp, #32]
 800784a:	4b14      	ldr	r3, [pc, #80]	@ (800789c <_dtoa_r+0xbdc>)
 800784c:	2a00      	cmp	r2, #0
 800784e:	d001      	beq.n	8007854 <_dtoa_r+0xb94>
 8007850:	f7ff fa7e 	bl	8006d50 <_dtoa_r+0x90>
 8007854:	f7ff fa7e 	bl	8006d54 <_dtoa_r+0x94>
 8007858:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800785a:	2b01      	cmp	r3, #1
 800785c:	dc00      	bgt.n	8007860 <_dtoa_r+0xba0>
 800785e:	e648      	b.n	80074f2 <_dtoa_r+0x832>
 8007860:	2001      	movs	r0, #1
 8007862:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007864:	e665      	b.n	8007532 <_dtoa_r+0x872>
 8007866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	dc00      	bgt.n	800786e <_dtoa_r+0xbae>
 800786c:	e6a9      	b.n	80075c2 <_dtoa_r+0x902>
 800786e:	2400      	movs	r4, #0
 8007870:	0031      	movs	r1, r6
 8007872:	9805      	ldr	r0, [sp, #20]
 8007874:	f7ff f99e 	bl	8006bb4 <quorem>
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	3030      	adds	r0, #48	@ 0x30
 800787c:	5518      	strb	r0, [r3, r4]
 800787e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007880:	3401      	adds	r4, #1
 8007882:	0005      	movs	r5, r0
 8007884:	42a3      	cmp	r3, r4
 8007886:	ddb6      	ble.n	80077f6 <_dtoa_r+0xb36>
 8007888:	2300      	movs	r3, #0
 800788a:	220a      	movs	r2, #10
 800788c:	9905      	ldr	r1, [sp, #20]
 800788e:	9803      	ldr	r0, [sp, #12]
 8007890:	f000 f974 	bl	8007b7c <__multadd>
 8007894:	9005      	str	r0, [sp, #20]
 8007896:	e7eb      	b.n	8007870 <_dtoa_r+0xbb0>
 8007898:	0800928c 	.word	0x0800928c
 800789c:	08009294 	.word	0x08009294

080078a0 <_free_r>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	0005      	movs	r5, r0
 80078a4:	1e0c      	subs	r4, r1, #0
 80078a6:	d010      	beq.n	80078ca <_free_r+0x2a>
 80078a8:	3c04      	subs	r4, #4
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da00      	bge.n	80078b2 <_free_r+0x12>
 80078b0:	18e4      	adds	r4, r4, r3
 80078b2:	0028      	movs	r0, r5
 80078b4:	f000 f8ea 	bl	8007a8c <__malloc_lock>
 80078b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007930 <_free_r+0x90>)
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <_free_r+0x2c>
 80078c0:	6063      	str	r3, [r4, #4]
 80078c2:	6014      	str	r4, [r2, #0]
 80078c4:	0028      	movs	r0, r5
 80078c6:	f000 f8e9 	bl	8007a9c <__malloc_unlock>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	d908      	bls.n	80078e2 <_free_r+0x42>
 80078d0:	6820      	ldr	r0, [r4, #0]
 80078d2:	1821      	adds	r1, r4, r0
 80078d4:	428b      	cmp	r3, r1
 80078d6:	d1f3      	bne.n	80078c0 <_free_r+0x20>
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	1809      	adds	r1, r1, r0
 80078de:	6021      	str	r1, [r4, #0]
 80078e0:	e7ee      	b.n	80078c0 <_free_r+0x20>
 80078e2:	001a      	movs	r2, r3
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <_free_r+0x4e>
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	d9f9      	bls.n	80078e2 <_free_r+0x42>
 80078ee:	6811      	ldr	r1, [r2, #0]
 80078f0:	1850      	adds	r0, r2, r1
 80078f2:	42a0      	cmp	r0, r4
 80078f4:	d10b      	bne.n	800790e <_free_r+0x6e>
 80078f6:	6820      	ldr	r0, [r4, #0]
 80078f8:	1809      	adds	r1, r1, r0
 80078fa:	1850      	adds	r0, r2, r1
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	4283      	cmp	r3, r0
 8007900:	d1e0      	bne.n	80078c4 <_free_r+0x24>
 8007902:	6818      	ldr	r0, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	1841      	adds	r1, r0, r1
 8007908:	6011      	str	r1, [r2, #0]
 800790a:	6053      	str	r3, [r2, #4]
 800790c:	e7da      	b.n	80078c4 <_free_r+0x24>
 800790e:	42a0      	cmp	r0, r4
 8007910:	d902      	bls.n	8007918 <_free_r+0x78>
 8007912:	230c      	movs	r3, #12
 8007914:	602b      	str	r3, [r5, #0]
 8007916:	e7d5      	b.n	80078c4 <_free_r+0x24>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	1821      	adds	r1, r4, r0
 800791c:	428b      	cmp	r3, r1
 800791e:	d103      	bne.n	8007928 <_free_r+0x88>
 8007920:	6819      	ldr	r1, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	1809      	adds	r1, r1, r0
 8007926:	6021      	str	r1, [r4, #0]
 8007928:	6063      	str	r3, [r4, #4]
 800792a:	6054      	str	r4, [r2, #4]
 800792c:	e7ca      	b.n	80078c4 <_free_r+0x24>
 800792e:	46c0      	nop			@ (mov r8, r8)
 8007930:	200005a0 	.word	0x200005a0

08007934 <malloc>:
 8007934:	b510      	push	{r4, lr}
 8007936:	4b03      	ldr	r3, [pc, #12]	@ (8007944 <malloc+0x10>)
 8007938:	0001      	movs	r1, r0
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	f000 f826 	bl	800798c <_malloc_r>
 8007940:	bd10      	pop	{r4, pc}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	20000018 	.word	0x20000018

08007948 <sbrk_aligned>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4e0f      	ldr	r6, [pc, #60]	@ (8007988 <sbrk_aligned+0x40>)
 800794c:	000d      	movs	r5, r1
 800794e:	6831      	ldr	r1, [r6, #0]
 8007950:	0004      	movs	r4, r0
 8007952:	2900      	cmp	r1, #0
 8007954:	d102      	bne.n	800795c <sbrk_aligned+0x14>
 8007956:	f000 fe67 	bl	8008628 <_sbrk_r>
 800795a:	6030      	str	r0, [r6, #0]
 800795c:	0029      	movs	r1, r5
 800795e:	0020      	movs	r0, r4
 8007960:	f000 fe62 	bl	8008628 <_sbrk_r>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d103      	bne.n	8007970 <sbrk_aligned+0x28>
 8007968:	2501      	movs	r5, #1
 800796a:	426d      	negs	r5, r5
 800796c:	0028      	movs	r0, r5
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	2303      	movs	r3, #3
 8007972:	1cc5      	adds	r5, r0, #3
 8007974:	439d      	bics	r5, r3
 8007976:	42a8      	cmp	r0, r5
 8007978:	d0f8      	beq.n	800796c <sbrk_aligned+0x24>
 800797a:	1a29      	subs	r1, r5, r0
 800797c:	0020      	movs	r0, r4
 800797e:	f000 fe53 	bl	8008628 <_sbrk_r>
 8007982:	3001      	adds	r0, #1
 8007984:	d1f2      	bne.n	800796c <sbrk_aligned+0x24>
 8007986:	e7ef      	b.n	8007968 <sbrk_aligned+0x20>
 8007988:	2000059c 	.word	0x2000059c

0800798c <_malloc_r>:
 800798c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800798e:	2203      	movs	r2, #3
 8007990:	1ccb      	adds	r3, r1, #3
 8007992:	4393      	bics	r3, r2
 8007994:	3308      	adds	r3, #8
 8007996:	0005      	movs	r5, r0
 8007998:	001f      	movs	r7, r3
 800799a:	2b0c      	cmp	r3, #12
 800799c:	d234      	bcs.n	8007a08 <_malloc_r+0x7c>
 800799e:	270c      	movs	r7, #12
 80079a0:	42b9      	cmp	r1, r7
 80079a2:	d833      	bhi.n	8007a0c <_malloc_r+0x80>
 80079a4:	0028      	movs	r0, r5
 80079a6:	f000 f871 	bl	8007a8c <__malloc_lock>
 80079aa:	4e37      	ldr	r6, [pc, #220]	@ (8007a88 <_malloc_r+0xfc>)
 80079ac:	6833      	ldr	r3, [r6, #0]
 80079ae:	001c      	movs	r4, r3
 80079b0:	2c00      	cmp	r4, #0
 80079b2:	d12f      	bne.n	8007a14 <_malloc_r+0x88>
 80079b4:	0039      	movs	r1, r7
 80079b6:	0028      	movs	r0, r5
 80079b8:	f7ff ffc6 	bl	8007948 <sbrk_aligned>
 80079bc:	0004      	movs	r4, r0
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	d15f      	bne.n	8007a82 <_malloc_r+0xf6>
 80079c2:	6834      	ldr	r4, [r6, #0]
 80079c4:	9400      	str	r4, [sp, #0]
 80079c6:	9b00      	ldr	r3, [sp, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d14a      	bne.n	8007a62 <_malloc_r+0xd6>
 80079cc:	2c00      	cmp	r4, #0
 80079ce:	d052      	beq.n	8007a76 <_malloc_r+0xea>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	0028      	movs	r0, r5
 80079d4:	18e3      	adds	r3, r4, r3
 80079d6:	9900      	ldr	r1, [sp, #0]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	f000 fe25 	bl	8008628 <_sbrk_r>
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	4283      	cmp	r3, r0
 80079e2:	d148      	bne.n	8007a76 <_malloc_r+0xea>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	0028      	movs	r0, r5
 80079e8:	1aff      	subs	r7, r7, r3
 80079ea:	0039      	movs	r1, r7
 80079ec:	f7ff ffac 	bl	8007948 <sbrk_aligned>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d040      	beq.n	8007a76 <_malloc_r+0xea>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	19db      	adds	r3, r3, r7
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	6833      	ldr	r3, [r6, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	2a00      	cmp	r2, #0
 8007a00:	d133      	bne.n	8007a6a <_malloc_r+0xde>
 8007a02:	9b00      	ldr	r3, [sp, #0]
 8007a04:	6033      	str	r3, [r6, #0]
 8007a06:	e019      	b.n	8007a3c <_malloc_r+0xb0>
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dac9      	bge.n	80079a0 <_malloc_r+0x14>
 8007a0c:	230c      	movs	r3, #12
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	2000      	movs	r0, #0
 8007a12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a14:	6821      	ldr	r1, [r4, #0]
 8007a16:	1bc9      	subs	r1, r1, r7
 8007a18:	d420      	bmi.n	8007a5c <_malloc_r+0xd0>
 8007a1a:	290b      	cmp	r1, #11
 8007a1c:	d90a      	bls.n	8007a34 <_malloc_r+0xa8>
 8007a1e:	19e2      	adds	r2, r4, r7
 8007a20:	6027      	str	r7, [r4, #0]
 8007a22:	42a3      	cmp	r3, r4
 8007a24:	d104      	bne.n	8007a30 <_malloc_r+0xa4>
 8007a26:	6032      	str	r2, [r6, #0]
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	6011      	str	r1, [r2, #0]
 8007a2c:	6053      	str	r3, [r2, #4]
 8007a2e:	e005      	b.n	8007a3c <_malloc_r+0xb0>
 8007a30:	605a      	str	r2, [r3, #4]
 8007a32:	e7f9      	b.n	8007a28 <_malloc_r+0x9c>
 8007a34:	6862      	ldr	r2, [r4, #4]
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	d10e      	bne.n	8007a58 <_malloc_r+0xcc>
 8007a3a:	6032      	str	r2, [r6, #0]
 8007a3c:	0028      	movs	r0, r5
 8007a3e:	f000 f82d 	bl	8007a9c <__malloc_unlock>
 8007a42:	0020      	movs	r0, r4
 8007a44:	2207      	movs	r2, #7
 8007a46:	300b      	adds	r0, #11
 8007a48:	1d23      	adds	r3, r4, #4
 8007a4a:	4390      	bics	r0, r2
 8007a4c:	1ac2      	subs	r2, r0, r3
 8007a4e:	4298      	cmp	r0, r3
 8007a50:	d0df      	beq.n	8007a12 <_malloc_r+0x86>
 8007a52:	1a1b      	subs	r3, r3, r0
 8007a54:	50a3      	str	r3, [r4, r2]
 8007a56:	e7dc      	b.n	8007a12 <_malloc_r+0x86>
 8007a58:	605a      	str	r2, [r3, #4]
 8007a5a:	e7ef      	b.n	8007a3c <_malloc_r+0xb0>
 8007a5c:	0023      	movs	r3, r4
 8007a5e:	6864      	ldr	r4, [r4, #4]
 8007a60:	e7a6      	b.n	80079b0 <_malloc_r+0x24>
 8007a62:	9c00      	ldr	r4, [sp, #0]
 8007a64:	6863      	ldr	r3, [r4, #4]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	e7ad      	b.n	80079c6 <_malloc_r+0x3a>
 8007a6a:	001a      	movs	r2, r3
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	d1fb      	bne.n	8007a6a <_malloc_r+0xde>
 8007a72:	2300      	movs	r3, #0
 8007a74:	e7da      	b.n	8007a2c <_malloc_r+0xa0>
 8007a76:	230c      	movs	r3, #12
 8007a78:	0028      	movs	r0, r5
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	f000 f80e 	bl	8007a9c <__malloc_unlock>
 8007a80:	e7c6      	b.n	8007a10 <_malloc_r+0x84>
 8007a82:	6007      	str	r7, [r0, #0]
 8007a84:	e7da      	b.n	8007a3c <_malloc_r+0xb0>
 8007a86:	46c0      	nop			@ (mov r8, r8)
 8007a88:	200005a0 	.word	0x200005a0

08007a8c <__malloc_lock>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	4802      	ldr	r0, [pc, #8]	@ (8007a98 <__malloc_lock+0xc>)
 8007a90:	f7ff f883 	bl	8006b9a <__retarget_lock_acquire_recursive>
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	20000598 	.word	0x20000598

08007a9c <__malloc_unlock>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	4802      	ldr	r0, [pc, #8]	@ (8007aa8 <__malloc_unlock+0xc>)
 8007aa0:	f7ff f87c 	bl	8006b9c <__retarget_lock_release_recursive>
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	46c0      	nop			@ (mov r8, r8)
 8007aa8:	20000598 	.word	0x20000598

08007aac <_Balloc>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	69c5      	ldr	r5, [r0, #28]
 8007ab0:	0006      	movs	r6, r0
 8007ab2:	000c      	movs	r4, r1
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	d10e      	bne.n	8007ad6 <_Balloc+0x2a>
 8007ab8:	2010      	movs	r0, #16
 8007aba:	f7ff ff3b 	bl	8007934 <malloc>
 8007abe:	1e02      	subs	r2, r0, #0
 8007ac0:	61f0      	str	r0, [r6, #28]
 8007ac2:	d104      	bne.n	8007ace <_Balloc+0x22>
 8007ac4:	216b      	movs	r1, #107	@ 0x6b
 8007ac6:	4b19      	ldr	r3, [pc, #100]	@ (8007b2c <_Balloc+0x80>)
 8007ac8:	4819      	ldr	r0, [pc, #100]	@ (8007b30 <_Balloc+0x84>)
 8007aca:	f000 fdc9 	bl	8008660 <__assert_func>
 8007ace:	6045      	str	r5, [r0, #4]
 8007ad0:	6085      	str	r5, [r0, #8]
 8007ad2:	6005      	str	r5, [r0, #0]
 8007ad4:	60c5      	str	r5, [r0, #12]
 8007ad6:	69f5      	ldr	r5, [r6, #28]
 8007ad8:	68eb      	ldr	r3, [r5, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d013      	beq.n	8007b06 <_Balloc+0x5a>
 8007ade:	69f3      	ldr	r3, [r6, #28]
 8007ae0:	00a2      	lsls	r2, r4, #2
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	189b      	adds	r3, r3, r2
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d118      	bne.n	8007b1e <_Balloc+0x72>
 8007aec:	2101      	movs	r1, #1
 8007aee:	000d      	movs	r5, r1
 8007af0:	40a5      	lsls	r5, r4
 8007af2:	1d6a      	adds	r2, r5, #5
 8007af4:	0030      	movs	r0, r6
 8007af6:	0092      	lsls	r2, r2, #2
 8007af8:	f000 fdd0 	bl	800869c <_calloc_r>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d00c      	beq.n	8007b1a <_Balloc+0x6e>
 8007b00:	6044      	str	r4, [r0, #4]
 8007b02:	6085      	str	r5, [r0, #8]
 8007b04:	e00d      	b.n	8007b22 <_Balloc+0x76>
 8007b06:	2221      	movs	r2, #33	@ 0x21
 8007b08:	2104      	movs	r1, #4
 8007b0a:	0030      	movs	r0, r6
 8007b0c:	f000 fdc6 	bl	800869c <_calloc_r>
 8007b10:	69f3      	ldr	r3, [r6, #28]
 8007b12:	60e8      	str	r0, [r5, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e1      	bne.n	8007ade <_Balloc+0x32>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	6802      	ldr	r2, [r0, #0]
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6103      	str	r3, [r0, #16]
 8007b26:	60c3      	str	r3, [r0, #12]
 8007b28:	e7f8      	b.n	8007b1c <_Balloc+0x70>
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	08009299 	.word	0x08009299
 8007b30:	08009319 	.word	0x08009319

08007b34 <_Bfree>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	69c6      	ldr	r6, [r0, #28]
 8007b38:	0005      	movs	r5, r0
 8007b3a:	000c      	movs	r4, r1
 8007b3c:	2e00      	cmp	r6, #0
 8007b3e:	d10e      	bne.n	8007b5e <_Bfree+0x2a>
 8007b40:	2010      	movs	r0, #16
 8007b42:	f7ff fef7 	bl	8007934 <malloc>
 8007b46:	1e02      	subs	r2, r0, #0
 8007b48:	61e8      	str	r0, [r5, #28]
 8007b4a:	d104      	bne.n	8007b56 <_Bfree+0x22>
 8007b4c:	218f      	movs	r1, #143	@ 0x8f
 8007b4e:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <_Bfree+0x40>)
 8007b50:	4809      	ldr	r0, [pc, #36]	@ (8007b78 <_Bfree+0x44>)
 8007b52:	f000 fd85 	bl	8008660 <__assert_func>
 8007b56:	6046      	str	r6, [r0, #4]
 8007b58:	6086      	str	r6, [r0, #8]
 8007b5a:	6006      	str	r6, [r0, #0]
 8007b5c:	60c6      	str	r6, [r0, #12]
 8007b5e:	2c00      	cmp	r4, #0
 8007b60:	d007      	beq.n	8007b72 <_Bfree+0x3e>
 8007b62:	69eb      	ldr	r3, [r5, #28]
 8007b64:	6862      	ldr	r2, [r4, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	0092      	lsls	r2, r2, #2
 8007b6a:	189b      	adds	r3, r3, r2
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	6022      	str	r2, [r4, #0]
 8007b70:	601c      	str	r4, [r3, #0]
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	08009299 	.word	0x08009299
 8007b78:	08009319 	.word	0x08009319

08007b7c <__multadd>:
 8007b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b7e:	000f      	movs	r7, r1
 8007b80:	9001      	str	r0, [sp, #4]
 8007b82:	000c      	movs	r4, r1
 8007b84:	001e      	movs	r6, r3
 8007b86:	2000      	movs	r0, #0
 8007b88:	690d      	ldr	r5, [r1, #16]
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	3001      	adds	r0, #1
 8007b90:	b299      	uxth	r1, r3
 8007b92:	4351      	muls	r1, r2
 8007b94:	0c1b      	lsrs	r3, r3, #16
 8007b96:	4353      	muls	r3, r2
 8007b98:	1989      	adds	r1, r1, r6
 8007b9a:	0c0e      	lsrs	r6, r1, #16
 8007b9c:	199b      	adds	r3, r3, r6
 8007b9e:	0c1e      	lsrs	r6, r3, #16
 8007ba0:	b289      	uxth	r1, r1
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	185b      	adds	r3, r3, r1
 8007ba6:	c708      	stmia	r7!, {r3}
 8007ba8:	4285      	cmp	r5, r0
 8007baa:	dcef      	bgt.n	8007b8c <__multadd+0x10>
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	d022      	beq.n	8007bf6 <__multadd+0x7a>
 8007bb0:	68a3      	ldr	r3, [r4, #8]
 8007bb2:	42ab      	cmp	r3, r5
 8007bb4:	dc19      	bgt.n	8007bea <__multadd+0x6e>
 8007bb6:	6861      	ldr	r1, [r4, #4]
 8007bb8:	9801      	ldr	r0, [sp, #4]
 8007bba:	3101      	adds	r1, #1
 8007bbc:	f7ff ff76 	bl	8007aac <_Balloc>
 8007bc0:	1e07      	subs	r7, r0, #0
 8007bc2:	d105      	bne.n	8007bd0 <__multadd+0x54>
 8007bc4:	003a      	movs	r2, r7
 8007bc6:	21ba      	movs	r1, #186	@ 0xba
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007bfc <__multadd+0x80>)
 8007bca:	480d      	ldr	r0, [pc, #52]	@ (8007c00 <__multadd+0x84>)
 8007bcc:	f000 fd48 	bl	8008660 <__assert_func>
 8007bd0:	0021      	movs	r1, r4
 8007bd2:	6922      	ldr	r2, [r4, #16]
 8007bd4:	310c      	adds	r1, #12
 8007bd6:	3202      	adds	r2, #2
 8007bd8:	0092      	lsls	r2, r2, #2
 8007bda:	300c      	adds	r0, #12
 8007bdc:	f000 fd36 	bl	800864c <memcpy>
 8007be0:	0021      	movs	r1, r4
 8007be2:	9801      	ldr	r0, [sp, #4]
 8007be4:	f7ff ffa6 	bl	8007b34 <_Bfree>
 8007be8:	003c      	movs	r4, r7
 8007bea:	1d2b      	adds	r3, r5, #4
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	18e3      	adds	r3, r4, r3
 8007bf0:	3501      	adds	r5, #1
 8007bf2:	605e      	str	r6, [r3, #4]
 8007bf4:	6125      	str	r5, [r4, #16]
 8007bf6:	0020      	movs	r0, r4
 8007bf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	08009308 	.word	0x08009308
 8007c00:	08009319 	.word	0x08009319

08007c04 <__hi0bits>:
 8007c04:	2280      	movs	r2, #128	@ 0x80
 8007c06:	0003      	movs	r3, r0
 8007c08:	0252      	lsls	r2, r2, #9
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d201      	bcs.n	8007c14 <__hi0bits+0x10>
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	3010      	adds	r0, #16
 8007c14:	2280      	movs	r2, #128	@ 0x80
 8007c16:	0452      	lsls	r2, r2, #17
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d201      	bcs.n	8007c20 <__hi0bits+0x1c>
 8007c1c:	3008      	adds	r0, #8
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	2280      	movs	r2, #128	@ 0x80
 8007c22:	0552      	lsls	r2, r2, #21
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d201      	bcs.n	8007c2c <__hi0bits+0x28>
 8007c28:	3004      	adds	r0, #4
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	2280      	movs	r2, #128	@ 0x80
 8007c2e:	05d2      	lsls	r2, r2, #23
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d201      	bcs.n	8007c38 <__hi0bits+0x34>
 8007c34:	3002      	adds	r0, #2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	db03      	blt.n	8007c44 <__hi0bits+0x40>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	4213      	tst	r3, r2
 8007c40:	d100      	bne.n	8007c44 <__hi0bits+0x40>
 8007c42:	2020      	movs	r0, #32
 8007c44:	4770      	bx	lr

08007c46 <__lo0bits>:
 8007c46:	6803      	ldr	r3, [r0, #0]
 8007c48:	0001      	movs	r1, r0
 8007c4a:	2207      	movs	r2, #7
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	4010      	ands	r0, r2
 8007c50:	4213      	tst	r3, r2
 8007c52:	d00d      	beq.n	8007c70 <__lo0bits+0x2a>
 8007c54:	3a06      	subs	r2, #6
 8007c56:	2000      	movs	r0, #0
 8007c58:	4213      	tst	r3, r2
 8007c5a:	d105      	bne.n	8007c68 <__lo0bits+0x22>
 8007c5c:	3002      	adds	r0, #2
 8007c5e:	4203      	tst	r3, r0
 8007c60:	d003      	beq.n	8007c6a <__lo0bits+0x24>
 8007c62:	40d3      	lsrs	r3, r2
 8007c64:	0010      	movs	r0, r2
 8007c66:	600b      	str	r3, [r1, #0]
 8007c68:	4770      	bx	lr
 8007c6a:	089b      	lsrs	r3, r3, #2
 8007c6c:	600b      	str	r3, [r1, #0]
 8007c6e:	e7fb      	b.n	8007c68 <__lo0bits+0x22>
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d101      	bne.n	8007c7a <__lo0bits+0x34>
 8007c76:	2010      	movs	r0, #16
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	d101      	bne.n	8007c84 <__lo0bits+0x3e>
 8007c80:	3008      	adds	r0, #8
 8007c82:	0a1b      	lsrs	r3, r3, #8
 8007c84:	071a      	lsls	r2, r3, #28
 8007c86:	d101      	bne.n	8007c8c <__lo0bits+0x46>
 8007c88:	3004      	adds	r0, #4
 8007c8a:	091b      	lsrs	r3, r3, #4
 8007c8c:	079a      	lsls	r2, r3, #30
 8007c8e:	d101      	bne.n	8007c94 <__lo0bits+0x4e>
 8007c90:	3002      	adds	r0, #2
 8007c92:	089b      	lsrs	r3, r3, #2
 8007c94:	07da      	lsls	r2, r3, #31
 8007c96:	d4e9      	bmi.n	8007c6c <__lo0bits+0x26>
 8007c98:	3001      	adds	r0, #1
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	d1e6      	bne.n	8007c6c <__lo0bits+0x26>
 8007c9e:	2020      	movs	r0, #32
 8007ca0:	e7e2      	b.n	8007c68 <__lo0bits+0x22>
	...

08007ca4 <__i2b>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	000c      	movs	r4, r1
 8007ca8:	2101      	movs	r1, #1
 8007caa:	f7ff feff 	bl	8007aac <_Balloc>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d107      	bne.n	8007cc2 <__i2b+0x1e>
 8007cb2:	2146      	movs	r1, #70	@ 0x46
 8007cb4:	4c05      	ldr	r4, [pc, #20]	@ (8007ccc <__i2b+0x28>)
 8007cb6:	0002      	movs	r2, r0
 8007cb8:	4b05      	ldr	r3, [pc, #20]	@ (8007cd0 <__i2b+0x2c>)
 8007cba:	0020      	movs	r0, r4
 8007cbc:	31ff      	adds	r1, #255	@ 0xff
 8007cbe:	f000 fccf 	bl	8008660 <__assert_func>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	6144      	str	r4, [r0, #20]
 8007cc6:	6103      	str	r3, [r0, #16]
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	46c0      	nop			@ (mov r8, r8)
 8007ccc:	08009319 	.word	0x08009319
 8007cd0:	08009308 	.word	0x08009308

08007cd4 <__multiply>:
 8007cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd6:	0014      	movs	r4, r2
 8007cd8:	690a      	ldr	r2, [r1, #16]
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	000d      	movs	r5, r1
 8007cde:	b089      	sub	sp, #36	@ 0x24
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	db02      	blt.n	8007cea <__multiply+0x16>
 8007ce4:	0023      	movs	r3, r4
 8007ce6:	000c      	movs	r4, r1
 8007ce8:	001d      	movs	r5, r3
 8007cea:	6927      	ldr	r7, [r4, #16]
 8007cec:	692e      	ldr	r6, [r5, #16]
 8007cee:	6861      	ldr	r1, [r4, #4]
 8007cf0:	19bb      	adds	r3, r7, r6
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	68a3      	ldr	r3, [r4, #8]
 8007cf6:	19ba      	adds	r2, r7, r6
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	da00      	bge.n	8007cfe <__multiply+0x2a>
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	f7ff fed5 	bl	8007aac <_Balloc>
 8007d02:	4684      	mov	ip, r0
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d106      	bne.n	8007d16 <__multiply+0x42>
 8007d08:	21b1      	movs	r1, #177	@ 0xb1
 8007d0a:	4662      	mov	r2, ip
 8007d0c:	4b44      	ldr	r3, [pc, #272]	@ (8007e20 <__multiply+0x14c>)
 8007d0e:	4845      	ldr	r0, [pc, #276]	@ (8007e24 <__multiply+0x150>)
 8007d10:	0049      	lsls	r1, r1, #1
 8007d12:	f000 fca5 	bl	8008660 <__assert_func>
 8007d16:	0002      	movs	r2, r0
 8007d18:	19bb      	adds	r3, r7, r6
 8007d1a:	3214      	adds	r2, #20
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	18d3      	adds	r3, r2, r3
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	2100      	movs	r1, #0
 8007d24:	0013      	movs	r3, r2
 8007d26:	9801      	ldr	r0, [sp, #4]
 8007d28:	4283      	cmp	r3, r0
 8007d2a:	d328      	bcc.n	8007d7e <__multiply+0xaa>
 8007d2c:	0023      	movs	r3, r4
 8007d2e:	00bf      	lsls	r7, r7, #2
 8007d30:	3314      	adds	r3, #20
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	3514      	adds	r5, #20
 8007d36:	19db      	adds	r3, r3, r7
 8007d38:	00b6      	lsls	r6, r6, #2
 8007d3a:	9302      	str	r3, [sp, #8]
 8007d3c:	19ab      	adds	r3, r5, r6
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	2304      	movs	r3, #4
 8007d42:	9305      	str	r3, [sp, #20]
 8007d44:	0023      	movs	r3, r4
 8007d46:	9902      	ldr	r1, [sp, #8]
 8007d48:	3315      	adds	r3, #21
 8007d4a:	4299      	cmp	r1, r3
 8007d4c:	d305      	bcc.n	8007d5a <__multiply+0x86>
 8007d4e:	1b0c      	subs	r4, r1, r4
 8007d50:	3c15      	subs	r4, #21
 8007d52:	08a4      	lsrs	r4, r4, #2
 8007d54:	3401      	adds	r4, #1
 8007d56:	00a3      	lsls	r3, r4, #2
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	9b07      	ldr	r3, [sp, #28]
 8007d5c:	429d      	cmp	r5, r3
 8007d5e:	d310      	bcc.n	8007d82 <__multiply+0xae>
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dd05      	ble.n	8007d72 <__multiply+0x9e>
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	3b04      	subs	r3, #4
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d052      	beq.n	8007e18 <__multiply+0x144>
 8007d72:	4663      	mov	r3, ip
 8007d74:	4660      	mov	r0, ip
 8007d76:	9a00      	ldr	r2, [sp, #0]
 8007d78:	611a      	str	r2, [r3, #16]
 8007d7a:	b009      	add	sp, #36	@ 0x24
 8007d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d7e:	c302      	stmia	r3!, {r1}
 8007d80:	e7d1      	b.n	8007d26 <__multiply+0x52>
 8007d82:	682c      	ldr	r4, [r5, #0]
 8007d84:	b2a4      	uxth	r4, r4
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	d01f      	beq.n	8007dca <__multiply+0xf6>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	0017      	movs	r7, r2
 8007d8e:	9e04      	ldr	r6, [sp, #16]
 8007d90:	9303      	str	r3, [sp, #12]
 8007d92:	ce08      	ldmia	r6!, {r3}
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	9306      	str	r3, [sp, #24]
 8007d98:	466b      	mov	r3, sp
 8007d9a:	8b1b      	ldrh	r3, [r3, #24]
 8007d9c:	b288      	uxth	r0, r1
 8007d9e:	4363      	muls	r3, r4
 8007da0:	181b      	adds	r3, r3, r0
 8007da2:	9803      	ldr	r0, [sp, #12]
 8007da4:	0c09      	lsrs	r1, r1, #16
 8007da6:	181b      	adds	r3, r3, r0
 8007da8:	9806      	ldr	r0, [sp, #24]
 8007daa:	0c00      	lsrs	r0, r0, #16
 8007dac:	4360      	muls	r0, r4
 8007dae:	1840      	adds	r0, r0, r1
 8007db0:	0c19      	lsrs	r1, r3, #16
 8007db2:	1841      	adds	r1, r0, r1
 8007db4:	0c08      	lsrs	r0, r1, #16
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	0409      	lsls	r1, r1, #16
 8007dba:	4319      	orrs	r1, r3
 8007dbc:	9b02      	ldr	r3, [sp, #8]
 8007dbe:	9003      	str	r0, [sp, #12]
 8007dc0:	c702      	stmia	r7!, {r1}
 8007dc2:	42b3      	cmp	r3, r6
 8007dc4:	d8e5      	bhi.n	8007d92 <__multiply+0xbe>
 8007dc6:	9b05      	ldr	r3, [sp, #20]
 8007dc8:	50d0      	str	r0, [r2, r3]
 8007dca:	682c      	ldr	r4, [r5, #0]
 8007dcc:	0c24      	lsrs	r4, r4, #16
 8007dce:	d020      	beq.n	8007e12 <__multiply+0x13e>
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	0010      	movs	r0, r2
 8007dd4:	6813      	ldr	r3, [r2, #0]
 8007dd6:	9e04      	ldr	r6, [sp, #16]
 8007dd8:	9103      	str	r1, [sp, #12]
 8007dda:	6831      	ldr	r1, [r6, #0]
 8007ddc:	6807      	ldr	r7, [r0, #0]
 8007dde:	b289      	uxth	r1, r1
 8007de0:	4361      	muls	r1, r4
 8007de2:	0c3f      	lsrs	r7, r7, #16
 8007de4:	19c9      	adds	r1, r1, r7
 8007de6:	9f03      	ldr	r7, [sp, #12]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	19c9      	adds	r1, r1, r7
 8007dec:	040f      	lsls	r7, r1, #16
 8007dee:	431f      	orrs	r7, r3
 8007df0:	6007      	str	r7, [r0, #0]
 8007df2:	ce80      	ldmia	r6!, {r7}
 8007df4:	6843      	ldr	r3, [r0, #4]
 8007df6:	0c3f      	lsrs	r7, r7, #16
 8007df8:	4367      	muls	r7, r4
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	0c09      	lsrs	r1, r1, #16
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	185b      	adds	r3, r3, r1
 8007e02:	0c19      	lsrs	r1, r3, #16
 8007e04:	9103      	str	r1, [sp, #12]
 8007e06:	9902      	ldr	r1, [sp, #8]
 8007e08:	3004      	adds	r0, #4
 8007e0a:	42b1      	cmp	r1, r6
 8007e0c:	d8e5      	bhi.n	8007dda <__multiply+0x106>
 8007e0e:	9905      	ldr	r1, [sp, #20]
 8007e10:	5053      	str	r3, [r2, r1]
 8007e12:	3504      	adds	r5, #4
 8007e14:	3204      	adds	r2, #4
 8007e16:	e7a0      	b.n	8007d5a <__multiply+0x86>
 8007e18:	9b00      	ldr	r3, [sp, #0]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	e79f      	b.n	8007d60 <__multiply+0x8c>
 8007e20:	08009308 	.word	0x08009308
 8007e24:	08009319 	.word	0x08009319

08007e28 <__pow5mult>:
 8007e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	0015      	movs	r5, r2
 8007e2e:	0007      	movs	r7, r0
 8007e30:	000e      	movs	r6, r1
 8007e32:	401a      	ands	r2, r3
 8007e34:	421d      	tst	r5, r3
 8007e36:	d008      	beq.n	8007e4a <__pow5mult+0x22>
 8007e38:	4925      	ldr	r1, [pc, #148]	@ (8007ed0 <__pow5mult+0xa8>)
 8007e3a:	3a01      	subs	r2, #1
 8007e3c:	0092      	lsls	r2, r2, #2
 8007e3e:	5852      	ldr	r2, [r2, r1]
 8007e40:	2300      	movs	r3, #0
 8007e42:	0031      	movs	r1, r6
 8007e44:	f7ff fe9a 	bl	8007b7c <__multadd>
 8007e48:	0006      	movs	r6, r0
 8007e4a:	10ad      	asrs	r5, r5, #2
 8007e4c:	d03d      	beq.n	8007eca <__pow5mult+0xa2>
 8007e4e:	69fc      	ldr	r4, [r7, #28]
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	d10f      	bne.n	8007e74 <__pow5mult+0x4c>
 8007e54:	2010      	movs	r0, #16
 8007e56:	f7ff fd6d 	bl	8007934 <malloc>
 8007e5a:	1e02      	subs	r2, r0, #0
 8007e5c:	61f8      	str	r0, [r7, #28]
 8007e5e:	d105      	bne.n	8007e6c <__pow5mult+0x44>
 8007e60:	21b4      	movs	r1, #180	@ 0xb4
 8007e62:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed4 <__pow5mult+0xac>)
 8007e64:	481c      	ldr	r0, [pc, #112]	@ (8007ed8 <__pow5mult+0xb0>)
 8007e66:	31ff      	adds	r1, #255	@ 0xff
 8007e68:	f000 fbfa 	bl	8008660 <__assert_func>
 8007e6c:	6044      	str	r4, [r0, #4]
 8007e6e:	6084      	str	r4, [r0, #8]
 8007e70:	6004      	str	r4, [r0, #0]
 8007e72:	60c4      	str	r4, [r0, #12]
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	689c      	ldr	r4, [r3, #8]
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	2c00      	cmp	r4, #0
 8007e7c:	d108      	bne.n	8007e90 <__pow5mult+0x68>
 8007e7e:	0038      	movs	r0, r7
 8007e80:	4916      	ldr	r1, [pc, #88]	@ (8007edc <__pow5mult+0xb4>)
 8007e82:	f7ff ff0f 	bl	8007ca4 <__i2b>
 8007e86:	9b01      	ldr	r3, [sp, #4]
 8007e88:	0004      	movs	r4, r0
 8007e8a:	6098      	str	r0, [r3, #8]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	6003      	str	r3, [r0, #0]
 8007e90:	2301      	movs	r3, #1
 8007e92:	421d      	tst	r5, r3
 8007e94:	d00a      	beq.n	8007eac <__pow5mult+0x84>
 8007e96:	0031      	movs	r1, r6
 8007e98:	0022      	movs	r2, r4
 8007e9a:	0038      	movs	r0, r7
 8007e9c:	f7ff ff1a 	bl	8007cd4 <__multiply>
 8007ea0:	0031      	movs	r1, r6
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	0038      	movs	r0, r7
 8007ea6:	f7ff fe45 	bl	8007b34 <_Bfree>
 8007eaa:	9e01      	ldr	r6, [sp, #4]
 8007eac:	106d      	asrs	r5, r5, #1
 8007eae:	d00c      	beq.n	8007eca <__pow5mult+0xa2>
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d107      	bne.n	8007ec6 <__pow5mult+0x9e>
 8007eb6:	0022      	movs	r2, r4
 8007eb8:	0021      	movs	r1, r4
 8007eba:	0038      	movs	r0, r7
 8007ebc:	f7ff ff0a 	bl	8007cd4 <__multiply>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6020      	str	r0, [r4, #0]
 8007ec4:	6003      	str	r3, [r0, #0]
 8007ec6:	0004      	movs	r4, r0
 8007ec8:	e7e2      	b.n	8007e90 <__pow5mult+0x68>
 8007eca:	0030      	movs	r0, r6
 8007ecc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	080093cc 	.word	0x080093cc
 8007ed4:	08009299 	.word	0x08009299
 8007ed8:	08009319 	.word	0x08009319
 8007edc:	00000271 	.word	0x00000271

08007ee0 <__lshift>:
 8007ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee2:	000c      	movs	r4, r1
 8007ee4:	0016      	movs	r6, r2
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	1157      	asrs	r7, r2, #5
 8007eea:	b085      	sub	sp, #20
 8007eec:	18fb      	adds	r3, r7, r3
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	6849      	ldr	r1, [r1, #4]
 8007ef6:	68a3      	ldr	r3, [r4, #8]
 8007ef8:	9002      	str	r0, [sp, #8]
 8007efa:	9a00      	ldr	r2, [sp, #0]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	db10      	blt.n	8007f22 <__lshift+0x42>
 8007f00:	9802      	ldr	r0, [sp, #8]
 8007f02:	f7ff fdd3 	bl	8007aac <_Balloc>
 8007f06:	2300      	movs	r3, #0
 8007f08:	0001      	movs	r1, r0
 8007f0a:	0005      	movs	r5, r0
 8007f0c:	001a      	movs	r2, r3
 8007f0e:	3114      	adds	r1, #20
 8007f10:	4298      	cmp	r0, r3
 8007f12:	d10c      	bne.n	8007f2e <__lshift+0x4e>
 8007f14:	21ef      	movs	r1, #239	@ 0xef
 8007f16:	002a      	movs	r2, r5
 8007f18:	4b25      	ldr	r3, [pc, #148]	@ (8007fb0 <__lshift+0xd0>)
 8007f1a:	4826      	ldr	r0, [pc, #152]	@ (8007fb4 <__lshift+0xd4>)
 8007f1c:	0049      	lsls	r1, r1, #1
 8007f1e:	f000 fb9f 	bl	8008660 <__assert_func>
 8007f22:	3101      	adds	r1, #1
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	e7e8      	b.n	8007efa <__lshift+0x1a>
 8007f28:	0098      	lsls	r0, r3, #2
 8007f2a:	500a      	str	r2, [r1, r0]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	42bb      	cmp	r3, r7
 8007f30:	dbfa      	blt.n	8007f28 <__lshift+0x48>
 8007f32:	43fb      	mvns	r3, r7
 8007f34:	17db      	asrs	r3, r3, #31
 8007f36:	401f      	ands	r7, r3
 8007f38:	00bf      	lsls	r7, r7, #2
 8007f3a:	0023      	movs	r3, r4
 8007f3c:	201f      	movs	r0, #31
 8007f3e:	19c9      	adds	r1, r1, r7
 8007f40:	0037      	movs	r7, r6
 8007f42:	6922      	ldr	r2, [r4, #16]
 8007f44:	3314      	adds	r3, #20
 8007f46:	0092      	lsls	r2, r2, #2
 8007f48:	189a      	adds	r2, r3, r2
 8007f4a:	4007      	ands	r7, r0
 8007f4c:	4206      	tst	r6, r0
 8007f4e:	d029      	beq.n	8007fa4 <__lshift+0xc4>
 8007f50:	3001      	adds	r0, #1
 8007f52:	1bc0      	subs	r0, r0, r7
 8007f54:	9003      	str	r0, [sp, #12]
 8007f56:	468c      	mov	ip, r1
 8007f58:	2000      	movs	r0, #0
 8007f5a:	681e      	ldr	r6, [r3, #0]
 8007f5c:	40be      	lsls	r6, r7
 8007f5e:	4306      	orrs	r6, r0
 8007f60:	4660      	mov	r0, ip
 8007f62:	c040      	stmia	r0!, {r6}
 8007f64:	4684      	mov	ip, r0
 8007f66:	9e03      	ldr	r6, [sp, #12]
 8007f68:	cb01      	ldmia	r3!, {r0}
 8007f6a:	40f0      	lsrs	r0, r6
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d8f4      	bhi.n	8007f5a <__lshift+0x7a>
 8007f70:	0026      	movs	r6, r4
 8007f72:	3615      	adds	r6, #21
 8007f74:	2304      	movs	r3, #4
 8007f76:	42b2      	cmp	r2, r6
 8007f78:	d304      	bcc.n	8007f84 <__lshift+0xa4>
 8007f7a:	1b13      	subs	r3, r2, r4
 8007f7c:	3b15      	subs	r3, #21
 8007f7e:	089b      	lsrs	r3, r3, #2
 8007f80:	3301      	adds	r3, #1
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	50c8      	str	r0, [r1, r3]
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d002      	beq.n	8007f90 <__lshift+0xb0>
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	9b00      	ldr	r3, [sp, #0]
 8007f92:	9802      	ldr	r0, [sp, #8]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	0021      	movs	r1, r4
 8007f98:	612b      	str	r3, [r5, #16]
 8007f9a:	f7ff fdcb 	bl	8007b34 <_Bfree>
 8007f9e:	0028      	movs	r0, r5
 8007fa0:	b005      	add	sp, #20
 8007fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa4:	cb01      	ldmia	r3!, {r0}
 8007fa6:	c101      	stmia	r1!, {r0}
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d8fb      	bhi.n	8007fa4 <__lshift+0xc4>
 8007fac:	e7f0      	b.n	8007f90 <__lshift+0xb0>
 8007fae:	46c0      	nop			@ (mov r8, r8)
 8007fb0:	08009308 	.word	0x08009308
 8007fb4:	08009319 	.word	0x08009319

08007fb8 <__mcmp>:
 8007fb8:	b530      	push	{r4, r5, lr}
 8007fba:	690b      	ldr	r3, [r1, #16]
 8007fbc:	6904      	ldr	r4, [r0, #16]
 8007fbe:	0002      	movs	r2, r0
 8007fc0:	1ae0      	subs	r0, r4, r3
 8007fc2:	429c      	cmp	r4, r3
 8007fc4:	d10f      	bne.n	8007fe6 <__mcmp+0x2e>
 8007fc6:	3214      	adds	r2, #20
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	3114      	adds	r1, #20
 8007fcc:	0014      	movs	r4, r2
 8007fce:	18c9      	adds	r1, r1, r3
 8007fd0:	18d2      	adds	r2, r2, r3
 8007fd2:	3a04      	subs	r2, #4
 8007fd4:	3904      	subs	r1, #4
 8007fd6:	6815      	ldr	r5, [r2, #0]
 8007fd8:	680b      	ldr	r3, [r1, #0]
 8007fda:	429d      	cmp	r5, r3
 8007fdc:	d004      	beq.n	8007fe8 <__mcmp+0x30>
 8007fde:	2001      	movs	r0, #1
 8007fe0:	429d      	cmp	r5, r3
 8007fe2:	d200      	bcs.n	8007fe6 <__mcmp+0x2e>
 8007fe4:	3802      	subs	r0, #2
 8007fe6:	bd30      	pop	{r4, r5, pc}
 8007fe8:	4294      	cmp	r4, r2
 8007fea:	d3f2      	bcc.n	8007fd2 <__mcmp+0x1a>
 8007fec:	e7fb      	b.n	8007fe6 <__mcmp+0x2e>
	...

08007ff0 <__mdiff>:
 8007ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff2:	000c      	movs	r4, r1
 8007ff4:	b087      	sub	sp, #28
 8007ff6:	9000      	str	r0, [sp, #0]
 8007ff8:	0011      	movs	r1, r2
 8007ffa:	0020      	movs	r0, r4
 8007ffc:	0017      	movs	r7, r2
 8007ffe:	f7ff ffdb 	bl	8007fb8 <__mcmp>
 8008002:	1e05      	subs	r5, r0, #0
 8008004:	d110      	bne.n	8008028 <__mdiff+0x38>
 8008006:	0001      	movs	r1, r0
 8008008:	9800      	ldr	r0, [sp, #0]
 800800a:	f7ff fd4f 	bl	8007aac <_Balloc>
 800800e:	1e02      	subs	r2, r0, #0
 8008010:	d104      	bne.n	800801c <__mdiff+0x2c>
 8008012:	4b40      	ldr	r3, [pc, #256]	@ (8008114 <__mdiff+0x124>)
 8008014:	4840      	ldr	r0, [pc, #256]	@ (8008118 <__mdiff+0x128>)
 8008016:	4941      	ldr	r1, [pc, #260]	@ (800811c <__mdiff+0x12c>)
 8008018:	f000 fb22 	bl	8008660 <__assert_func>
 800801c:	2301      	movs	r3, #1
 800801e:	6145      	str	r5, [r0, #20]
 8008020:	6103      	str	r3, [r0, #16]
 8008022:	0010      	movs	r0, r2
 8008024:	b007      	add	sp, #28
 8008026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008028:	2600      	movs	r6, #0
 800802a:	42b0      	cmp	r0, r6
 800802c:	da03      	bge.n	8008036 <__mdiff+0x46>
 800802e:	0023      	movs	r3, r4
 8008030:	003c      	movs	r4, r7
 8008032:	001f      	movs	r7, r3
 8008034:	3601      	adds	r6, #1
 8008036:	6861      	ldr	r1, [r4, #4]
 8008038:	9800      	ldr	r0, [sp, #0]
 800803a:	f7ff fd37 	bl	8007aac <_Balloc>
 800803e:	1e02      	subs	r2, r0, #0
 8008040:	d103      	bne.n	800804a <__mdiff+0x5a>
 8008042:	4b34      	ldr	r3, [pc, #208]	@ (8008114 <__mdiff+0x124>)
 8008044:	4834      	ldr	r0, [pc, #208]	@ (8008118 <__mdiff+0x128>)
 8008046:	4936      	ldr	r1, [pc, #216]	@ (8008120 <__mdiff+0x130>)
 8008048:	e7e6      	b.n	8008018 <__mdiff+0x28>
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	3414      	adds	r4, #20
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	18e3      	adds	r3, r4, r3
 8008054:	0021      	movs	r1, r4
 8008056:	9401      	str	r4, [sp, #4]
 8008058:	003c      	movs	r4, r7
 800805a:	9302      	str	r3, [sp, #8]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	3414      	adds	r4, #20
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	18e3      	adds	r3, r4, r3
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	0003      	movs	r3, r0
 8008068:	60c6      	str	r6, [r0, #12]
 800806a:	468c      	mov	ip, r1
 800806c:	2000      	movs	r0, #0
 800806e:	3314      	adds	r3, #20
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	9305      	str	r3, [sp, #20]
 8008074:	4663      	mov	r3, ip
 8008076:	cb20      	ldmia	r3!, {r5}
 8008078:	b2a9      	uxth	r1, r5
 800807a:	000e      	movs	r6, r1
 800807c:	469c      	mov	ip, r3
 800807e:	cc08      	ldmia	r4!, {r3}
 8008080:	0c2d      	lsrs	r5, r5, #16
 8008082:	b299      	uxth	r1, r3
 8008084:	1a71      	subs	r1, r6, r1
 8008086:	1809      	adds	r1, r1, r0
 8008088:	0c1b      	lsrs	r3, r3, #16
 800808a:	1408      	asrs	r0, r1, #16
 800808c:	1aeb      	subs	r3, r5, r3
 800808e:	181b      	adds	r3, r3, r0
 8008090:	1418      	asrs	r0, r3, #16
 8008092:	b289      	uxth	r1, r1
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	4319      	orrs	r1, r3
 8008098:	9b05      	ldr	r3, [sp, #20]
 800809a:	c302      	stmia	r3!, {r1}
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d8e7      	bhi.n	8008074 <__mdiff+0x84>
 80080a4:	0039      	movs	r1, r7
 80080a6:	9c03      	ldr	r4, [sp, #12]
 80080a8:	3115      	adds	r1, #21
 80080aa:	2304      	movs	r3, #4
 80080ac:	428c      	cmp	r4, r1
 80080ae:	d304      	bcc.n	80080ba <__mdiff+0xca>
 80080b0:	1be3      	subs	r3, r4, r7
 80080b2:	3b15      	subs	r3, #21
 80080b4:	089b      	lsrs	r3, r3, #2
 80080b6:	3301      	adds	r3, #1
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	9901      	ldr	r1, [sp, #4]
 80080bc:	18cd      	adds	r5, r1, r3
 80080be:	9904      	ldr	r1, [sp, #16]
 80080c0:	002e      	movs	r6, r5
 80080c2:	18cb      	adds	r3, r1, r3
 80080c4:	001f      	movs	r7, r3
 80080c6:	9902      	ldr	r1, [sp, #8]
 80080c8:	428e      	cmp	r6, r1
 80080ca:	d311      	bcc.n	80080f0 <__mdiff+0x100>
 80080cc:	9c02      	ldr	r4, [sp, #8]
 80080ce:	1ee9      	subs	r1, r5, #3
 80080d0:	2000      	movs	r0, #0
 80080d2:	428c      	cmp	r4, r1
 80080d4:	d304      	bcc.n	80080e0 <__mdiff+0xf0>
 80080d6:	0021      	movs	r1, r4
 80080d8:	3103      	adds	r1, #3
 80080da:	1b49      	subs	r1, r1, r5
 80080dc:	0889      	lsrs	r1, r1, #2
 80080de:	0088      	lsls	r0, r1, #2
 80080e0:	181b      	adds	r3, r3, r0
 80080e2:	3b04      	subs	r3, #4
 80080e4:	6819      	ldr	r1, [r3, #0]
 80080e6:	2900      	cmp	r1, #0
 80080e8:	d010      	beq.n	800810c <__mdiff+0x11c>
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	6113      	str	r3, [r2, #16]
 80080ee:	e798      	b.n	8008022 <__mdiff+0x32>
 80080f0:	4684      	mov	ip, r0
 80080f2:	ce02      	ldmia	r6!, {r1}
 80080f4:	b288      	uxth	r0, r1
 80080f6:	4460      	add	r0, ip
 80080f8:	1400      	asrs	r0, r0, #16
 80080fa:	0c0c      	lsrs	r4, r1, #16
 80080fc:	1904      	adds	r4, r0, r4
 80080fe:	4461      	add	r1, ip
 8008100:	1420      	asrs	r0, r4, #16
 8008102:	b289      	uxth	r1, r1
 8008104:	0424      	lsls	r4, r4, #16
 8008106:	4321      	orrs	r1, r4
 8008108:	c702      	stmia	r7!, {r1}
 800810a:	e7dc      	b.n	80080c6 <__mdiff+0xd6>
 800810c:	9900      	ldr	r1, [sp, #0]
 800810e:	3901      	subs	r1, #1
 8008110:	9100      	str	r1, [sp, #0]
 8008112:	e7e6      	b.n	80080e2 <__mdiff+0xf2>
 8008114:	08009308 	.word	0x08009308
 8008118:	08009319 	.word	0x08009319
 800811c:	00000237 	.word	0x00000237
 8008120:	00000245 	.word	0x00000245

08008124 <__d2b>:
 8008124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008126:	2101      	movs	r1, #1
 8008128:	0016      	movs	r6, r2
 800812a:	001f      	movs	r7, r3
 800812c:	f7ff fcbe 	bl	8007aac <_Balloc>
 8008130:	1e04      	subs	r4, r0, #0
 8008132:	d105      	bne.n	8008140 <__d2b+0x1c>
 8008134:	0022      	movs	r2, r4
 8008136:	4b25      	ldr	r3, [pc, #148]	@ (80081cc <__d2b+0xa8>)
 8008138:	4825      	ldr	r0, [pc, #148]	@ (80081d0 <__d2b+0xac>)
 800813a:	4926      	ldr	r1, [pc, #152]	@ (80081d4 <__d2b+0xb0>)
 800813c:	f000 fa90 	bl	8008660 <__assert_func>
 8008140:	033b      	lsls	r3, r7, #12
 8008142:	007d      	lsls	r5, r7, #1
 8008144:	0b1b      	lsrs	r3, r3, #12
 8008146:	0d6d      	lsrs	r5, r5, #21
 8008148:	d002      	beq.n	8008150 <__d2b+0x2c>
 800814a:	2280      	movs	r2, #128	@ 0x80
 800814c:	0352      	lsls	r2, r2, #13
 800814e:	4313      	orrs	r3, r2
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	2e00      	cmp	r6, #0
 8008154:	d025      	beq.n	80081a2 <__d2b+0x7e>
 8008156:	4668      	mov	r0, sp
 8008158:	9600      	str	r6, [sp, #0]
 800815a:	f7ff fd74 	bl	8007c46 <__lo0bits>
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	9900      	ldr	r1, [sp, #0]
 8008162:	2800      	cmp	r0, #0
 8008164:	d01b      	beq.n	800819e <__d2b+0x7a>
 8008166:	2220      	movs	r2, #32
 8008168:	001e      	movs	r6, r3
 800816a:	1a12      	subs	r2, r2, r0
 800816c:	4096      	lsls	r6, r2
 800816e:	0032      	movs	r2, r6
 8008170:	40c3      	lsrs	r3, r0
 8008172:	430a      	orrs	r2, r1
 8008174:	6162      	str	r2, [r4, #20]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	9e01      	ldr	r6, [sp, #4]
 800817a:	61a6      	str	r6, [r4, #24]
 800817c:	1e73      	subs	r3, r6, #1
 800817e:	419e      	sbcs	r6, r3
 8008180:	3601      	adds	r6, #1
 8008182:	6126      	str	r6, [r4, #16]
 8008184:	2d00      	cmp	r5, #0
 8008186:	d014      	beq.n	80081b2 <__d2b+0x8e>
 8008188:	2635      	movs	r6, #53	@ 0x35
 800818a:	4b13      	ldr	r3, [pc, #76]	@ (80081d8 <__d2b+0xb4>)
 800818c:	18ed      	adds	r5, r5, r3
 800818e:	9b08      	ldr	r3, [sp, #32]
 8008190:	182d      	adds	r5, r5, r0
 8008192:	601d      	str	r5, [r3, #0]
 8008194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008196:	1a36      	subs	r6, r6, r0
 8008198:	601e      	str	r6, [r3, #0]
 800819a:	0020      	movs	r0, r4
 800819c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800819e:	6161      	str	r1, [r4, #20]
 80081a0:	e7ea      	b.n	8008178 <__d2b+0x54>
 80081a2:	a801      	add	r0, sp, #4
 80081a4:	f7ff fd4f 	bl	8007c46 <__lo0bits>
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	2601      	movs	r6, #1
 80081ac:	6163      	str	r3, [r4, #20]
 80081ae:	3020      	adds	r0, #32
 80081b0:	e7e7      	b.n	8008182 <__d2b+0x5e>
 80081b2:	4b0a      	ldr	r3, [pc, #40]	@ (80081dc <__d2b+0xb8>)
 80081b4:	18c0      	adds	r0, r0, r3
 80081b6:	9b08      	ldr	r3, [sp, #32]
 80081b8:	6018      	str	r0, [r3, #0]
 80081ba:	4b09      	ldr	r3, [pc, #36]	@ (80081e0 <__d2b+0xbc>)
 80081bc:	18f3      	adds	r3, r6, r3
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	18e3      	adds	r3, r4, r3
 80081c2:	6958      	ldr	r0, [r3, #20]
 80081c4:	f7ff fd1e 	bl	8007c04 <__hi0bits>
 80081c8:	0176      	lsls	r6, r6, #5
 80081ca:	e7e3      	b.n	8008194 <__d2b+0x70>
 80081cc:	08009308 	.word	0x08009308
 80081d0:	08009319 	.word	0x08009319
 80081d4:	0000030f 	.word	0x0000030f
 80081d8:	fffffbcd 	.word	0xfffffbcd
 80081dc:	fffffbce 	.word	0xfffffbce
 80081e0:	3fffffff 	.word	0x3fffffff

080081e4 <__ssputs_r>:
 80081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081e6:	688e      	ldr	r6, [r1, #8]
 80081e8:	b085      	sub	sp, #20
 80081ea:	001f      	movs	r7, r3
 80081ec:	000c      	movs	r4, r1
 80081ee:	680b      	ldr	r3, [r1, #0]
 80081f0:	9002      	str	r0, [sp, #8]
 80081f2:	9203      	str	r2, [sp, #12]
 80081f4:	42be      	cmp	r6, r7
 80081f6:	d830      	bhi.n	800825a <__ssputs_r+0x76>
 80081f8:	210c      	movs	r1, #12
 80081fa:	5e62      	ldrsh	r2, [r4, r1]
 80081fc:	2190      	movs	r1, #144	@ 0x90
 80081fe:	00c9      	lsls	r1, r1, #3
 8008200:	420a      	tst	r2, r1
 8008202:	d028      	beq.n	8008256 <__ssputs_r+0x72>
 8008204:	2003      	movs	r0, #3
 8008206:	6921      	ldr	r1, [r4, #16]
 8008208:	1a5b      	subs	r3, r3, r1
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	6963      	ldr	r3, [r4, #20]
 800820e:	4343      	muls	r3, r0
 8008210:	9801      	ldr	r0, [sp, #4]
 8008212:	0fdd      	lsrs	r5, r3, #31
 8008214:	18ed      	adds	r5, r5, r3
 8008216:	1c7b      	adds	r3, r7, #1
 8008218:	181b      	adds	r3, r3, r0
 800821a:	106d      	asrs	r5, r5, #1
 800821c:	42ab      	cmp	r3, r5
 800821e:	d900      	bls.n	8008222 <__ssputs_r+0x3e>
 8008220:	001d      	movs	r5, r3
 8008222:	0552      	lsls	r2, r2, #21
 8008224:	d528      	bpl.n	8008278 <__ssputs_r+0x94>
 8008226:	0029      	movs	r1, r5
 8008228:	9802      	ldr	r0, [sp, #8]
 800822a:	f7ff fbaf 	bl	800798c <_malloc_r>
 800822e:	1e06      	subs	r6, r0, #0
 8008230:	d02c      	beq.n	800828c <__ssputs_r+0xa8>
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	6921      	ldr	r1, [r4, #16]
 8008236:	f000 fa09 	bl	800864c <memcpy>
 800823a:	89a2      	ldrh	r2, [r4, #12]
 800823c:	4b18      	ldr	r3, [pc, #96]	@ (80082a0 <__ssputs_r+0xbc>)
 800823e:	401a      	ands	r2, r3
 8008240:	2380      	movs	r3, #128	@ 0x80
 8008242:	4313      	orrs	r3, r2
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	6126      	str	r6, [r4, #16]
 800824a:	18f6      	adds	r6, r6, r3
 800824c:	6026      	str	r6, [r4, #0]
 800824e:	003e      	movs	r6, r7
 8008250:	6165      	str	r5, [r4, #20]
 8008252:	1aed      	subs	r5, r5, r3
 8008254:	60a5      	str	r5, [r4, #8]
 8008256:	42be      	cmp	r6, r7
 8008258:	d900      	bls.n	800825c <__ssputs_r+0x78>
 800825a:	003e      	movs	r6, r7
 800825c:	0032      	movs	r2, r6
 800825e:	9903      	ldr	r1, [sp, #12]
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	f000 f9ce 	bl	8008602 <memmove>
 8008266:	2000      	movs	r0, #0
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	1b9b      	subs	r3, r3, r6
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	199b      	adds	r3, r3, r6
 8008272:	6023      	str	r3, [r4, #0]
 8008274:	b005      	add	sp, #20
 8008276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008278:	002a      	movs	r2, r5
 800827a:	9802      	ldr	r0, [sp, #8]
 800827c:	f000 fa4d 	bl	800871a <_realloc_r>
 8008280:	1e06      	subs	r6, r0, #0
 8008282:	d1e0      	bne.n	8008246 <__ssputs_r+0x62>
 8008284:	6921      	ldr	r1, [r4, #16]
 8008286:	9802      	ldr	r0, [sp, #8]
 8008288:	f7ff fb0a 	bl	80078a0 <_free_r>
 800828c:	230c      	movs	r3, #12
 800828e:	2001      	movs	r0, #1
 8008290:	9a02      	ldr	r2, [sp, #8]
 8008292:	4240      	negs	r0, r0
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	89a2      	ldrh	r2, [r4, #12]
 8008298:	3334      	adds	r3, #52	@ 0x34
 800829a:	4313      	orrs	r3, r2
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	e7e9      	b.n	8008274 <__ssputs_r+0x90>
 80082a0:	fffffb7f 	.word	0xfffffb7f

080082a4 <_svfiprintf_r>:
 80082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a6:	b0a1      	sub	sp, #132	@ 0x84
 80082a8:	9003      	str	r0, [sp, #12]
 80082aa:	001d      	movs	r5, r3
 80082ac:	898b      	ldrh	r3, [r1, #12]
 80082ae:	000f      	movs	r7, r1
 80082b0:	0016      	movs	r6, r2
 80082b2:	061b      	lsls	r3, r3, #24
 80082b4:	d511      	bpl.n	80082da <_svfiprintf_r+0x36>
 80082b6:	690b      	ldr	r3, [r1, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10e      	bne.n	80082da <_svfiprintf_r+0x36>
 80082bc:	2140      	movs	r1, #64	@ 0x40
 80082be:	f7ff fb65 	bl	800798c <_malloc_r>
 80082c2:	6038      	str	r0, [r7, #0]
 80082c4:	6138      	str	r0, [r7, #16]
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d105      	bne.n	80082d6 <_svfiprintf_r+0x32>
 80082ca:	230c      	movs	r3, #12
 80082cc:	9a03      	ldr	r2, [sp, #12]
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	2001      	movs	r0, #1
 80082d2:	4240      	negs	r0, r0
 80082d4:	e0cf      	b.n	8008476 <_svfiprintf_r+0x1d2>
 80082d6:	2340      	movs	r3, #64	@ 0x40
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	2300      	movs	r3, #0
 80082dc:	ac08      	add	r4, sp, #32
 80082de:	6163      	str	r3, [r4, #20]
 80082e0:	3320      	adds	r3, #32
 80082e2:	7663      	strb	r3, [r4, #25]
 80082e4:	3310      	adds	r3, #16
 80082e6:	76a3      	strb	r3, [r4, #26]
 80082e8:	9507      	str	r5, [sp, #28]
 80082ea:	0035      	movs	r5, r6
 80082ec:	782b      	ldrb	r3, [r5, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <_svfiprintf_r+0x52>
 80082f2:	2b25      	cmp	r3, #37	@ 0x25
 80082f4:	d148      	bne.n	8008388 <_svfiprintf_r+0xe4>
 80082f6:	1bab      	subs	r3, r5, r6
 80082f8:	9305      	str	r3, [sp, #20]
 80082fa:	42b5      	cmp	r5, r6
 80082fc:	d00b      	beq.n	8008316 <_svfiprintf_r+0x72>
 80082fe:	0032      	movs	r2, r6
 8008300:	0039      	movs	r1, r7
 8008302:	9803      	ldr	r0, [sp, #12]
 8008304:	f7ff ff6e 	bl	80081e4 <__ssputs_r>
 8008308:	3001      	adds	r0, #1
 800830a:	d100      	bne.n	800830e <_svfiprintf_r+0x6a>
 800830c:	e0ae      	b.n	800846c <_svfiprintf_r+0x1c8>
 800830e:	6963      	ldr	r3, [r4, #20]
 8008310:	9a05      	ldr	r2, [sp, #20]
 8008312:	189b      	adds	r3, r3, r2
 8008314:	6163      	str	r3, [r4, #20]
 8008316:	782b      	ldrb	r3, [r5, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d100      	bne.n	800831e <_svfiprintf_r+0x7a>
 800831c:	e0a6      	b.n	800846c <_svfiprintf_r+0x1c8>
 800831e:	2201      	movs	r2, #1
 8008320:	2300      	movs	r3, #0
 8008322:	4252      	negs	r2, r2
 8008324:	6062      	str	r2, [r4, #4]
 8008326:	a904      	add	r1, sp, #16
 8008328:	3254      	adds	r2, #84	@ 0x54
 800832a:	1852      	adds	r2, r2, r1
 800832c:	1c6e      	adds	r6, r5, #1
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	60e3      	str	r3, [r4, #12]
 8008332:	60a3      	str	r3, [r4, #8]
 8008334:	7013      	strb	r3, [r2, #0]
 8008336:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008338:	4b54      	ldr	r3, [pc, #336]	@ (800848c <_svfiprintf_r+0x1e8>)
 800833a:	2205      	movs	r2, #5
 800833c:	0018      	movs	r0, r3
 800833e:	7831      	ldrb	r1, [r6, #0]
 8008340:	9305      	str	r3, [sp, #20]
 8008342:	f7fe fc2c 	bl	8006b9e <memchr>
 8008346:	1c75      	adds	r5, r6, #1
 8008348:	2800      	cmp	r0, #0
 800834a:	d11f      	bne.n	800838c <_svfiprintf_r+0xe8>
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	06d3      	lsls	r3, r2, #27
 8008350:	d504      	bpl.n	800835c <_svfiprintf_r+0xb8>
 8008352:	2353      	movs	r3, #83	@ 0x53
 8008354:	a904      	add	r1, sp, #16
 8008356:	185b      	adds	r3, r3, r1
 8008358:	2120      	movs	r1, #32
 800835a:	7019      	strb	r1, [r3, #0]
 800835c:	0713      	lsls	r3, r2, #28
 800835e:	d504      	bpl.n	800836a <_svfiprintf_r+0xc6>
 8008360:	2353      	movs	r3, #83	@ 0x53
 8008362:	a904      	add	r1, sp, #16
 8008364:	185b      	adds	r3, r3, r1
 8008366:	212b      	movs	r1, #43	@ 0x2b
 8008368:	7019      	strb	r1, [r3, #0]
 800836a:	7833      	ldrb	r3, [r6, #0]
 800836c:	2b2a      	cmp	r3, #42	@ 0x2a
 800836e:	d016      	beq.n	800839e <_svfiprintf_r+0xfa>
 8008370:	0035      	movs	r5, r6
 8008372:	2100      	movs	r1, #0
 8008374:	200a      	movs	r0, #10
 8008376:	68e3      	ldr	r3, [r4, #12]
 8008378:	782a      	ldrb	r2, [r5, #0]
 800837a:	1c6e      	adds	r6, r5, #1
 800837c:	3a30      	subs	r2, #48	@ 0x30
 800837e:	2a09      	cmp	r2, #9
 8008380:	d950      	bls.n	8008424 <_svfiprintf_r+0x180>
 8008382:	2900      	cmp	r1, #0
 8008384:	d111      	bne.n	80083aa <_svfiprintf_r+0x106>
 8008386:	e017      	b.n	80083b8 <_svfiprintf_r+0x114>
 8008388:	3501      	adds	r5, #1
 800838a:	e7af      	b.n	80082ec <_svfiprintf_r+0x48>
 800838c:	9b05      	ldr	r3, [sp, #20]
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	1ac0      	subs	r0, r0, r3
 8008392:	2301      	movs	r3, #1
 8008394:	4083      	lsls	r3, r0
 8008396:	4313      	orrs	r3, r2
 8008398:	002e      	movs	r6, r5
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	e7cc      	b.n	8008338 <_svfiprintf_r+0x94>
 800839e:	9b07      	ldr	r3, [sp, #28]
 80083a0:	1d19      	adds	r1, r3, #4
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	9107      	str	r1, [sp, #28]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	db01      	blt.n	80083ae <_svfiprintf_r+0x10a>
 80083aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ac:	e004      	b.n	80083b8 <_svfiprintf_r+0x114>
 80083ae:	425b      	negs	r3, r3
 80083b0:	60e3      	str	r3, [r4, #12]
 80083b2:	2302      	movs	r3, #2
 80083b4:	4313      	orrs	r3, r2
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	782b      	ldrb	r3, [r5, #0]
 80083ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80083bc:	d10c      	bne.n	80083d8 <_svfiprintf_r+0x134>
 80083be:	786b      	ldrb	r3, [r5, #1]
 80083c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083c2:	d134      	bne.n	800842e <_svfiprintf_r+0x18a>
 80083c4:	9b07      	ldr	r3, [sp, #28]
 80083c6:	3502      	adds	r5, #2
 80083c8:	1d1a      	adds	r2, r3, #4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	9207      	str	r2, [sp, #28]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da01      	bge.n	80083d6 <_svfiprintf_r+0x132>
 80083d2:	2301      	movs	r3, #1
 80083d4:	425b      	negs	r3, r3
 80083d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d8:	4e2d      	ldr	r6, [pc, #180]	@ (8008490 <_svfiprintf_r+0x1ec>)
 80083da:	2203      	movs	r2, #3
 80083dc:	0030      	movs	r0, r6
 80083de:	7829      	ldrb	r1, [r5, #0]
 80083e0:	f7fe fbdd 	bl	8006b9e <memchr>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d006      	beq.n	80083f6 <_svfiprintf_r+0x152>
 80083e8:	2340      	movs	r3, #64	@ 0x40
 80083ea:	1b80      	subs	r0, r0, r6
 80083ec:	4083      	lsls	r3, r0
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	3501      	adds	r5, #1
 80083f2:	4313      	orrs	r3, r2
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	7829      	ldrb	r1, [r5, #0]
 80083f8:	2206      	movs	r2, #6
 80083fa:	4826      	ldr	r0, [pc, #152]	@ (8008494 <_svfiprintf_r+0x1f0>)
 80083fc:	1c6e      	adds	r6, r5, #1
 80083fe:	7621      	strb	r1, [r4, #24]
 8008400:	f7fe fbcd 	bl	8006b9e <memchr>
 8008404:	2800      	cmp	r0, #0
 8008406:	d038      	beq.n	800847a <_svfiprintf_r+0x1d6>
 8008408:	4b23      	ldr	r3, [pc, #140]	@ (8008498 <_svfiprintf_r+0x1f4>)
 800840a:	2b00      	cmp	r3, #0
 800840c:	d122      	bne.n	8008454 <_svfiprintf_r+0x1b0>
 800840e:	2207      	movs	r2, #7
 8008410:	9b07      	ldr	r3, [sp, #28]
 8008412:	3307      	adds	r3, #7
 8008414:	4393      	bics	r3, r2
 8008416:	3308      	adds	r3, #8
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	6963      	ldr	r3, [r4, #20]
 800841c:	9a04      	ldr	r2, [sp, #16]
 800841e:	189b      	adds	r3, r3, r2
 8008420:	6163      	str	r3, [r4, #20]
 8008422:	e762      	b.n	80082ea <_svfiprintf_r+0x46>
 8008424:	4343      	muls	r3, r0
 8008426:	0035      	movs	r5, r6
 8008428:	2101      	movs	r1, #1
 800842a:	189b      	adds	r3, r3, r2
 800842c:	e7a4      	b.n	8008378 <_svfiprintf_r+0xd4>
 800842e:	2300      	movs	r3, #0
 8008430:	200a      	movs	r0, #10
 8008432:	0019      	movs	r1, r3
 8008434:	3501      	adds	r5, #1
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	782a      	ldrb	r2, [r5, #0]
 800843a:	1c6e      	adds	r6, r5, #1
 800843c:	3a30      	subs	r2, #48	@ 0x30
 800843e:	2a09      	cmp	r2, #9
 8008440:	d903      	bls.n	800844a <_svfiprintf_r+0x1a6>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0c8      	beq.n	80083d8 <_svfiprintf_r+0x134>
 8008446:	9109      	str	r1, [sp, #36]	@ 0x24
 8008448:	e7c6      	b.n	80083d8 <_svfiprintf_r+0x134>
 800844a:	4341      	muls	r1, r0
 800844c:	0035      	movs	r5, r6
 800844e:	2301      	movs	r3, #1
 8008450:	1889      	adds	r1, r1, r2
 8008452:	e7f1      	b.n	8008438 <_svfiprintf_r+0x194>
 8008454:	aa07      	add	r2, sp, #28
 8008456:	9200      	str	r2, [sp, #0]
 8008458:	0021      	movs	r1, r4
 800845a:	003a      	movs	r2, r7
 800845c:	4b0f      	ldr	r3, [pc, #60]	@ (800849c <_svfiprintf_r+0x1f8>)
 800845e:	9803      	ldr	r0, [sp, #12]
 8008460:	f7fd fe2a 	bl	80060b8 <_printf_float>
 8008464:	9004      	str	r0, [sp, #16]
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	3301      	adds	r3, #1
 800846a:	d1d6      	bne.n	800841a <_svfiprintf_r+0x176>
 800846c:	89bb      	ldrh	r3, [r7, #12]
 800846e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008470:	065b      	lsls	r3, r3, #25
 8008472:	d500      	bpl.n	8008476 <_svfiprintf_r+0x1d2>
 8008474:	e72c      	b.n	80082d0 <_svfiprintf_r+0x2c>
 8008476:	b021      	add	sp, #132	@ 0x84
 8008478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847a:	aa07      	add	r2, sp, #28
 800847c:	9200      	str	r2, [sp, #0]
 800847e:	0021      	movs	r1, r4
 8008480:	003a      	movs	r2, r7
 8008482:	4b06      	ldr	r3, [pc, #24]	@ (800849c <_svfiprintf_r+0x1f8>)
 8008484:	9803      	ldr	r0, [sp, #12]
 8008486:	f7fe f8c5 	bl	8006614 <_printf_i>
 800848a:	e7eb      	b.n	8008464 <_svfiprintf_r+0x1c0>
 800848c:	08009372 	.word	0x08009372
 8008490:	08009378 	.word	0x08009378
 8008494:	0800937c 	.word	0x0800937c
 8008498:	080060b9 	.word	0x080060b9
 800849c:	080081e5 	.word	0x080081e5

080084a0 <__sflush_r>:
 80084a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a2:	220c      	movs	r2, #12
 80084a4:	5e8b      	ldrsh	r3, [r1, r2]
 80084a6:	0005      	movs	r5, r0
 80084a8:	000c      	movs	r4, r1
 80084aa:	071a      	lsls	r2, r3, #28
 80084ac:	d456      	bmi.n	800855c <__sflush_r+0xbc>
 80084ae:	684a      	ldr	r2, [r1, #4]
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	dc02      	bgt.n	80084ba <__sflush_r+0x1a>
 80084b4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	dd4e      	ble.n	8008558 <__sflush_r+0xb8>
 80084ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80084bc:	2f00      	cmp	r7, #0
 80084be:	d04b      	beq.n	8008558 <__sflush_r+0xb8>
 80084c0:	2200      	movs	r2, #0
 80084c2:	2080      	movs	r0, #128	@ 0x80
 80084c4:	682e      	ldr	r6, [r5, #0]
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	001a      	movs	r2, r3
 80084ca:	0140      	lsls	r0, r0, #5
 80084cc:	6a21      	ldr	r1, [r4, #32]
 80084ce:	4002      	ands	r2, r0
 80084d0:	4203      	tst	r3, r0
 80084d2:	d033      	beq.n	800853c <__sflush_r+0x9c>
 80084d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	075b      	lsls	r3, r3, #29
 80084da:	d506      	bpl.n	80084ea <__sflush_r+0x4a>
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d001      	beq.n	80084ea <__sflush_r+0x4a>
 80084e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084e8:	1ad2      	subs	r2, r2, r3
 80084ea:	2300      	movs	r3, #0
 80084ec:	0028      	movs	r0, r5
 80084ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80084f0:	6a21      	ldr	r1, [r4, #32]
 80084f2:	47b8      	blx	r7
 80084f4:	89a2      	ldrh	r2, [r4, #12]
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d106      	bne.n	8008508 <__sflush_r+0x68>
 80084fa:	6829      	ldr	r1, [r5, #0]
 80084fc:	291d      	cmp	r1, #29
 80084fe:	d846      	bhi.n	800858e <__sflush_r+0xee>
 8008500:	4b29      	ldr	r3, [pc, #164]	@ (80085a8 <__sflush_r+0x108>)
 8008502:	40cb      	lsrs	r3, r1
 8008504:	07db      	lsls	r3, r3, #31
 8008506:	d542      	bpl.n	800858e <__sflush_r+0xee>
 8008508:	2300      	movs	r3, #0
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	04d2      	lsls	r2, r2, #19
 8008512:	d505      	bpl.n	8008520 <__sflush_r+0x80>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <__sflush_r+0x7e>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d100      	bne.n	8008520 <__sflush_r+0x80>
 800851e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008522:	602e      	str	r6, [r5, #0]
 8008524:	2900      	cmp	r1, #0
 8008526:	d017      	beq.n	8008558 <__sflush_r+0xb8>
 8008528:	0023      	movs	r3, r4
 800852a:	3344      	adds	r3, #68	@ 0x44
 800852c:	4299      	cmp	r1, r3
 800852e:	d002      	beq.n	8008536 <__sflush_r+0x96>
 8008530:	0028      	movs	r0, r5
 8008532:	f7ff f9b5 	bl	80078a0 <_free_r>
 8008536:	2300      	movs	r3, #0
 8008538:	6363      	str	r3, [r4, #52]	@ 0x34
 800853a:	e00d      	b.n	8008558 <__sflush_r+0xb8>
 800853c:	2301      	movs	r3, #1
 800853e:	0028      	movs	r0, r5
 8008540:	47b8      	blx	r7
 8008542:	0002      	movs	r2, r0
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d1c6      	bne.n	80084d6 <__sflush_r+0x36>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0c3      	beq.n	80084d6 <__sflush_r+0x36>
 800854e:	2b1d      	cmp	r3, #29
 8008550:	d001      	beq.n	8008556 <__sflush_r+0xb6>
 8008552:	2b16      	cmp	r3, #22
 8008554:	d11a      	bne.n	800858c <__sflush_r+0xec>
 8008556:	602e      	str	r6, [r5, #0]
 8008558:	2000      	movs	r0, #0
 800855a:	e01e      	b.n	800859a <__sflush_r+0xfa>
 800855c:	690e      	ldr	r6, [r1, #16]
 800855e:	2e00      	cmp	r6, #0
 8008560:	d0fa      	beq.n	8008558 <__sflush_r+0xb8>
 8008562:	680f      	ldr	r7, [r1, #0]
 8008564:	600e      	str	r6, [r1, #0]
 8008566:	1bba      	subs	r2, r7, r6
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	079b      	lsls	r3, r3, #30
 800856e:	d100      	bne.n	8008572 <__sflush_r+0xd2>
 8008570:	694a      	ldr	r2, [r1, #20]
 8008572:	60a2      	str	r2, [r4, #8]
 8008574:	9b01      	ldr	r3, [sp, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	ddee      	ble.n	8008558 <__sflush_r+0xb8>
 800857a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800857c:	0032      	movs	r2, r6
 800857e:	001f      	movs	r7, r3
 8008580:	0028      	movs	r0, r5
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	47b8      	blx	r7
 8008588:	2800      	cmp	r0, #0
 800858a:	dc07      	bgt.n	800859c <__sflush_r+0xfc>
 800858c:	89a2      	ldrh	r2, [r4, #12]
 800858e:	2340      	movs	r3, #64	@ 0x40
 8008590:	2001      	movs	r0, #1
 8008592:	4313      	orrs	r3, r2
 8008594:	b21b      	sxth	r3, r3
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	4240      	negs	r0, r0
 800859a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	1836      	adds	r6, r6, r0
 80085a0:	1a1b      	subs	r3, r3, r0
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	e7e6      	b.n	8008574 <__sflush_r+0xd4>
 80085a6:	46c0      	nop			@ (mov r8, r8)
 80085a8:	20400001 	.word	0x20400001

080085ac <_fflush_r>:
 80085ac:	690b      	ldr	r3, [r1, #16]
 80085ae:	b570      	push	{r4, r5, r6, lr}
 80085b0:	0005      	movs	r5, r0
 80085b2:	000c      	movs	r4, r1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <_fflush_r+0x12>
 80085b8:	2500      	movs	r5, #0
 80085ba:	0028      	movs	r0, r5
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	2800      	cmp	r0, #0
 80085c0:	d004      	beq.n	80085cc <_fflush_r+0x20>
 80085c2:	6a03      	ldr	r3, [r0, #32]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <_fflush_r+0x20>
 80085c8:	f7fe f9c0 	bl	800694c <__sinit>
 80085cc:	220c      	movs	r2, #12
 80085ce:	5ea3      	ldrsh	r3, [r4, r2]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0f1      	beq.n	80085b8 <_fflush_r+0xc>
 80085d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085d6:	07d2      	lsls	r2, r2, #31
 80085d8:	d404      	bmi.n	80085e4 <_fflush_r+0x38>
 80085da:	059b      	lsls	r3, r3, #22
 80085dc:	d402      	bmi.n	80085e4 <_fflush_r+0x38>
 80085de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085e0:	f7fe fadb 	bl	8006b9a <__retarget_lock_acquire_recursive>
 80085e4:	0028      	movs	r0, r5
 80085e6:	0021      	movs	r1, r4
 80085e8:	f7ff ff5a 	bl	80084a0 <__sflush_r>
 80085ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085ee:	0005      	movs	r5, r0
 80085f0:	07db      	lsls	r3, r3, #31
 80085f2:	d4e2      	bmi.n	80085ba <_fflush_r+0xe>
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	059b      	lsls	r3, r3, #22
 80085f8:	d4df      	bmi.n	80085ba <_fflush_r+0xe>
 80085fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085fc:	f7fe face 	bl	8006b9c <__retarget_lock_release_recursive>
 8008600:	e7db      	b.n	80085ba <_fflush_r+0xe>

08008602 <memmove>:
 8008602:	b510      	push	{r4, lr}
 8008604:	4288      	cmp	r0, r1
 8008606:	d902      	bls.n	800860e <memmove+0xc>
 8008608:	188b      	adds	r3, r1, r2
 800860a:	4298      	cmp	r0, r3
 800860c:	d308      	bcc.n	8008620 <memmove+0x1e>
 800860e:	2300      	movs	r3, #0
 8008610:	429a      	cmp	r2, r3
 8008612:	d007      	beq.n	8008624 <memmove+0x22>
 8008614:	5ccc      	ldrb	r4, [r1, r3]
 8008616:	54c4      	strb	r4, [r0, r3]
 8008618:	3301      	adds	r3, #1
 800861a:	e7f9      	b.n	8008610 <memmove+0xe>
 800861c:	5c8b      	ldrb	r3, [r1, r2]
 800861e:	5483      	strb	r3, [r0, r2]
 8008620:	3a01      	subs	r2, #1
 8008622:	d2fb      	bcs.n	800861c <memmove+0x1a>
 8008624:	bd10      	pop	{r4, pc}
	...

08008628 <_sbrk_r>:
 8008628:	2300      	movs	r3, #0
 800862a:	b570      	push	{r4, r5, r6, lr}
 800862c:	4d06      	ldr	r5, [pc, #24]	@ (8008648 <_sbrk_r+0x20>)
 800862e:	0004      	movs	r4, r0
 8008630:	0008      	movs	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7fa fc40 	bl	8002eb8 <_sbrk>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d103      	bne.n	8008644 <_sbrk_r+0x1c>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d000      	beq.n	8008644 <_sbrk_r+0x1c>
 8008642:	6023      	str	r3, [r4, #0]
 8008644:	bd70      	pop	{r4, r5, r6, pc}
 8008646:	46c0      	nop			@ (mov r8, r8)
 8008648:	20000594 	.word	0x20000594

0800864c <memcpy>:
 800864c:	2300      	movs	r3, #0
 800864e:	b510      	push	{r4, lr}
 8008650:	429a      	cmp	r2, r3
 8008652:	d100      	bne.n	8008656 <memcpy+0xa>
 8008654:	bd10      	pop	{r4, pc}
 8008656:	5ccc      	ldrb	r4, [r1, r3]
 8008658:	54c4      	strb	r4, [r0, r3]
 800865a:	3301      	adds	r3, #1
 800865c:	e7f8      	b.n	8008650 <memcpy+0x4>
	...

08008660 <__assert_func>:
 8008660:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008662:	0014      	movs	r4, r2
 8008664:	001a      	movs	r2, r3
 8008666:	4b09      	ldr	r3, [pc, #36]	@ (800868c <__assert_func+0x2c>)
 8008668:	0005      	movs	r5, r0
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	000e      	movs	r6, r1
 800866e:	68d8      	ldr	r0, [r3, #12]
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <__assert_func+0x30>)
 8008672:	2c00      	cmp	r4, #0
 8008674:	d101      	bne.n	800867a <__assert_func+0x1a>
 8008676:	4b07      	ldr	r3, [pc, #28]	@ (8008694 <__assert_func+0x34>)
 8008678:	001c      	movs	r4, r3
 800867a:	4907      	ldr	r1, [pc, #28]	@ (8008698 <__assert_func+0x38>)
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	9402      	str	r4, [sp, #8]
 8008680:	002b      	movs	r3, r5
 8008682:	9600      	str	r6, [sp, #0]
 8008684:	f000 f886 	bl	8008794 <fiprintf>
 8008688:	f000 f894 	bl	80087b4 <abort>
 800868c:	20000018 	.word	0x20000018
 8008690:	0800938d 	.word	0x0800938d
 8008694:	080093c8 	.word	0x080093c8
 8008698:	0800939a 	.word	0x0800939a

0800869c <_calloc_r>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	0c0b      	lsrs	r3, r1, #16
 80086a0:	0c15      	lsrs	r5, r2, #16
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d11e      	bne.n	80086e4 <_calloc_r+0x48>
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	d10c      	bne.n	80086c4 <_calloc_r+0x28>
 80086aa:	b289      	uxth	r1, r1
 80086ac:	b294      	uxth	r4, r2
 80086ae:	434c      	muls	r4, r1
 80086b0:	0021      	movs	r1, r4
 80086b2:	f7ff f96b 	bl	800798c <_malloc_r>
 80086b6:	1e05      	subs	r5, r0, #0
 80086b8:	d01b      	beq.n	80086f2 <_calloc_r+0x56>
 80086ba:	0022      	movs	r2, r4
 80086bc:	2100      	movs	r1, #0
 80086be:	f7fe f9e7 	bl	8006a90 <memset>
 80086c2:	e016      	b.n	80086f2 <_calloc_r+0x56>
 80086c4:	1c2b      	adds	r3, r5, #0
 80086c6:	1c0c      	adds	r4, r1, #0
 80086c8:	b289      	uxth	r1, r1
 80086ca:	b292      	uxth	r2, r2
 80086cc:	434a      	muls	r2, r1
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	b2a1      	uxth	r1, r4
 80086d2:	4359      	muls	r1, r3
 80086d4:	0c14      	lsrs	r4, r2, #16
 80086d6:	190c      	adds	r4, r1, r4
 80086d8:	0c23      	lsrs	r3, r4, #16
 80086da:	d107      	bne.n	80086ec <_calloc_r+0x50>
 80086dc:	0424      	lsls	r4, r4, #16
 80086de:	b292      	uxth	r2, r2
 80086e0:	4314      	orrs	r4, r2
 80086e2:	e7e5      	b.n	80086b0 <_calloc_r+0x14>
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	d101      	bne.n	80086ec <_calloc_r+0x50>
 80086e8:	1c14      	adds	r4, r2, #0
 80086ea:	e7ed      	b.n	80086c8 <_calloc_r+0x2c>
 80086ec:	230c      	movs	r3, #12
 80086ee:	2500      	movs	r5, #0
 80086f0:	6003      	str	r3, [r0, #0]
 80086f2:	0028      	movs	r0, r5
 80086f4:	bd70      	pop	{r4, r5, r6, pc}

080086f6 <__ascii_mbtowc>:
 80086f6:	b082      	sub	sp, #8
 80086f8:	2900      	cmp	r1, #0
 80086fa:	d100      	bne.n	80086fe <__ascii_mbtowc+0x8>
 80086fc:	a901      	add	r1, sp, #4
 80086fe:	1e10      	subs	r0, r2, #0
 8008700:	d006      	beq.n	8008710 <__ascii_mbtowc+0x1a>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d006      	beq.n	8008714 <__ascii_mbtowc+0x1e>
 8008706:	7813      	ldrb	r3, [r2, #0]
 8008708:	600b      	str	r3, [r1, #0]
 800870a:	7810      	ldrb	r0, [r2, #0]
 800870c:	1e43      	subs	r3, r0, #1
 800870e:	4198      	sbcs	r0, r3
 8008710:	b002      	add	sp, #8
 8008712:	4770      	bx	lr
 8008714:	2002      	movs	r0, #2
 8008716:	4240      	negs	r0, r0
 8008718:	e7fa      	b.n	8008710 <__ascii_mbtowc+0x1a>

0800871a <_realloc_r>:
 800871a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800871c:	0006      	movs	r6, r0
 800871e:	000c      	movs	r4, r1
 8008720:	0015      	movs	r5, r2
 8008722:	2900      	cmp	r1, #0
 8008724:	d105      	bne.n	8008732 <_realloc_r+0x18>
 8008726:	0011      	movs	r1, r2
 8008728:	f7ff f930 	bl	800798c <_malloc_r>
 800872c:	0004      	movs	r4, r0
 800872e:	0020      	movs	r0, r4
 8008730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008732:	2a00      	cmp	r2, #0
 8008734:	d103      	bne.n	800873e <_realloc_r+0x24>
 8008736:	f7ff f8b3 	bl	80078a0 <_free_r>
 800873a:	002c      	movs	r4, r5
 800873c:	e7f7      	b.n	800872e <_realloc_r+0x14>
 800873e:	f000 f840 	bl	80087c2 <_malloc_usable_size_r>
 8008742:	0007      	movs	r7, r0
 8008744:	4285      	cmp	r5, r0
 8008746:	d802      	bhi.n	800874e <_realloc_r+0x34>
 8008748:	0843      	lsrs	r3, r0, #1
 800874a:	42ab      	cmp	r3, r5
 800874c:	d3ef      	bcc.n	800872e <_realloc_r+0x14>
 800874e:	0029      	movs	r1, r5
 8008750:	0030      	movs	r0, r6
 8008752:	f7ff f91b 	bl	800798c <_malloc_r>
 8008756:	9001      	str	r0, [sp, #4]
 8008758:	2800      	cmp	r0, #0
 800875a:	d101      	bne.n	8008760 <_realloc_r+0x46>
 800875c:	9c01      	ldr	r4, [sp, #4]
 800875e:	e7e6      	b.n	800872e <_realloc_r+0x14>
 8008760:	002a      	movs	r2, r5
 8008762:	42bd      	cmp	r5, r7
 8008764:	d900      	bls.n	8008768 <_realloc_r+0x4e>
 8008766:	003a      	movs	r2, r7
 8008768:	0021      	movs	r1, r4
 800876a:	9801      	ldr	r0, [sp, #4]
 800876c:	f7ff ff6e 	bl	800864c <memcpy>
 8008770:	0021      	movs	r1, r4
 8008772:	0030      	movs	r0, r6
 8008774:	f7ff f894 	bl	80078a0 <_free_r>
 8008778:	e7f0      	b.n	800875c <_realloc_r+0x42>

0800877a <__ascii_wctomb>:
 800877a:	0003      	movs	r3, r0
 800877c:	1e08      	subs	r0, r1, #0
 800877e:	d005      	beq.n	800878c <__ascii_wctomb+0x12>
 8008780:	2aff      	cmp	r2, #255	@ 0xff
 8008782:	d904      	bls.n	800878e <__ascii_wctomb+0x14>
 8008784:	228a      	movs	r2, #138	@ 0x8a
 8008786:	2001      	movs	r0, #1
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	4240      	negs	r0, r0
 800878c:	4770      	bx	lr
 800878e:	2001      	movs	r0, #1
 8008790:	700a      	strb	r2, [r1, #0]
 8008792:	e7fb      	b.n	800878c <__ascii_wctomb+0x12>

08008794 <fiprintf>:
 8008794:	b40e      	push	{r1, r2, r3}
 8008796:	b517      	push	{r0, r1, r2, r4, lr}
 8008798:	4c05      	ldr	r4, [pc, #20]	@ (80087b0 <fiprintf+0x1c>)
 800879a:	ab05      	add	r3, sp, #20
 800879c:	cb04      	ldmia	r3!, {r2}
 800879e:	0001      	movs	r1, r0
 80087a0:	6820      	ldr	r0, [r4, #0]
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	f000 f83c 	bl	8008820 <_vfiprintf_r>
 80087a8:	bc1e      	pop	{r1, r2, r3, r4}
 80087aa:	bc08      	pop	{r3}
 80087ac:	b003      	add	sp, #12
 80087ae:	4718      	bx	r3
 80087b0:	20000018 	.word	0x20000018

080087b4 <abort>:
 80087b4:	2006      	movs	r0, #6
 80087b6:	b510      	push	{r4, lr}
 80087b8:	f000 fa18 	bl	8008bec <raise>
 80087bc:	2001      	movs	r0, #1
 80087be:	f7fa fb09 	bl	8002dd4 <_exit>

080087c2 <_malloc_usable_size_r>:
 80087c2:	1f0b      	subs	r3, r1, #4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	1f18      	subs	r0, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da01      	bge.n	80087d0 <_malloc_usable_size_r+0xe>
 80087cc:	580b      	ldr	r3, [r1, r0]
 80087ce:	18c0      	adds	r0, r0, r3
 80087d0:	4770      	bx	lr

080087d2 <__sfputc_r>:
 80087d2:	6893      	ldr	r3, [r2, #8]
 80087d4:	b510      	push	{r4, lr}
 80087d6:	3b01      	subs	r3, #1
 80087d8:	6093      	str	r3, [r2, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	da04      	bge.n	80087e8 <__sfputc_r+0x16>
 80087de:	6994      	ldr	r4, [r2, #24]
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	db07      	blt.n	80087f4 <__sfputc_r+0x22>
 80087e4:	290a      	cmp	r1, #10
 80087e6:	d005      	beq.n	80087f4 <__sfputc_r+0x22>
 80087e8:	6813      	ldr	r3, [r2, #0]
 80087ea:	1c58      	adds	r0, r3, #1
 80087ec:	6010      	str	r0, [r2, #0]
 80087ee:	7019      	strb	r1, [r3, #0]
 80087f0:	0008      	movs	r0, r1
 80087f2:	bd10      	pop	{r4, pc}
 80087f4:	f000 f930 	bl	8008a58 <__swbuf_r>
 80087f8:	0001      	movs	r1, r0
 80087fa:	e7f9      	b.n	80087f0 <__sfputc_r+0x1e>

080087fc <__sfputs_r>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	0006      	movs	r6, r0
 8008800:	000f      	movs	r7, r1
 8008802:	0014      	movs	r4, r2
 8008804:	18d5      	adds	r5, r2, r3
 8008806:	42ac      	cmp	r4, r5
 8008808:	d101      	bne.n	800880e <__sfputs_r+0x12>
 800880a:	2000      	movs	r0, #0
 800880c:	e007      	b.n	800881e <__sfputs_r+0x22>
 800880e:	7821      	ldrb	r1, [r4, #0]
 8008810:	003a      	movs	r2, r7
 8008812:	0030      	movs	r0, r6
 8008814:	f7ff ffdd 	bl	80087d2 <__sfputc_r>
 8008818:	3401      	adds	r4, #1
 800881a:	1c43      	adds	r3, r0, #1
 800881c:	d1f3      	bne.n	8008806 <__sfputs_r+0xa>
 800881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008820 <_vfiprintf_r>:
 8008820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008822:	b0a1      	sub	sp, #132	@ 0x84
 8008824:	000f      	movs	r7, r1
 8008826:	0015      	movs	r5, r2
 8008828:	001e      	movs	r6, r3
 800882a:	9003      	str	r0, [sp, #12]
 800882c:	2800      	cmp	r0, #0
 800882e:	d004      	beq.n	800883a <_vfiprintf_r+0x1a>
 8008830:	6a03      	ldr	r3, [r0, #32]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <_vfiprintf_r+0x1a>
 8008836:	f7fe f889 	bl	800694c <__sinit>
 800883a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800883c:	07db      	lsls	r3, r3, #31
 800883e:	d405      	bmi.n	800884c <_vfiprintf_r+0x2c>
 8008840:	89bb      	ldrh	r3, [r7, #12]
 8008842:	059b      	lsls	r3, r3, #22
 8008844:	d402      	bmi.n	800884c <_vfiprintf_r+0x2c>
 8008846:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008848:	f7fe f9a7 	bl	8006b9a <__retarget_lock_acquire_recursive>
 800884c:	89bb      	ldrh	r3, [r7, #12]
 800884e:	071b      	lsls	r3, r3, #28
 8008850:	d502      	bpl.n	8008858 <_vfiprintf_r+0x38>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d113      	bne.n	8008880 <_vfiprintf_r+0x60>
 8008858:	0039      	movs	r1, r7
 800885a:	9803      	ldr	r0, [sp, #12]
 800885c:	f000 f93e 	bl	8008adc <__swsetup_r>
 8008860:	2800      	cmp	r0, #0
 8008862:	d00d      	beq.n	8008880 <_vfiprintf_r+0x60>
 8008864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008866:	07db      	lsls	r3, r3, #31
 8008868:	d503      	bpl.n	8008872 <_vfiprintf_r+0x52>
 800886a:	2001      	movs	r0, #1
 800886c:	4240      	negs	r0, r0
 800886e:	b021      	add	sp, #132	@ 0x84
 8008870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008872:	89bb      	ldrh	r3, [r7, #12]
 8008874:	059b      	lsls	r3, r3, #22
 8008876:	d4f8      	bmi.n	800886a <_vfiprintf_r+0x4a>
 8008878:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800887a:	f7fe f98f 	bl	8006b9c <__retarget_lock_release_recursive>
 800887e:	e7f4      	b.n	800886a <_vfiprintf_r+0x4a>
 8008880:	2300      	movs	r3, #0
 8008882:	ac08      	add	r4, sp, #32
 8008884:	6163      	str	r3, [r4, #20]
 8008886:	3320      	adds	r3, #32
 8008888:	7663      	strb	r3, [r4, #25]
 800888a:	3310      	adds	r3, #16
 800888c:	76a3      	strb	r3, [r4, #26]
 800888e:	9607      	str	r6, [sp, #28]
 8008890:	002e      	movs	r6, r5
 8008892:	7833      	ldrb	r3, [r6, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <_vfiprintf_r+0x7c>
 8008898:	2b25      	cmp	r3, #37	@ 0x25
 800889a:	d148      	bne.n	800892e <_vfiprintf_r+0x10e>
 800889c:	1b73      	subs	r3, r6, r5
 800889e:	9305      	str	r3, [sp, #20]
 80088a0:	42ae      	cmp	r6, r5
 80088a2:	d00b      	beq.n	80088bc <_vfiprintf_r+0x9c>
 80088a4:	002a      	movs	r2, r5
 80088a6:	0039      	movs	r1, r7
 80088a8:	9803      	ldr	r0, [sp, #12]
 80088aa:	f7ff ffa7 	bl	80087fc <__sfputs_r>
 80088ae:	3001      	adds	r0, #1
 80088b0:	d100      	bne.n	80088b4 <_vfiprintf_r+0x94>
 80088b2:	e0ae      	b.n	8008a12 <_vfiprintf_r+0x1f2>
 80088b4:	6963      	ldr	r3, [r4, #20]
 80088b6:	9a05      	ldr	r2, [sp, #20]
 80088b8:	189b      	adds	r3, r3, r2
 80088ba:	6163      	str	r3, [r4, #20]
 80088bc:	7833      	ldrb	r3, [r6, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d100      	bne.n	80088c4 <_vfiprintf_r+0xa4>
 80088c2:	e0a6      	b.n	8008a12 <_vfiprintf_r+0x1f2>
 80088c4:	2201      	movs	r2, #1
 80088c6:	2300      	movs	r3, #0
 80088c8:	4252      	negs	r2, r2
 80088ca:	6062      	str	r2, [r4, #4]
 80088cc:	a904      	add	r1, sp, #16
 80088ce:	3254      	adds	r2, #84	@ 0x54
 80088d0:	1852      	adds	r2, r2, r1
 80088d2:	1c75      	adds	r5, r6, #1
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	60e3      	str	r3, [r4, #12]
 80088d8:	60a3      	str	r3, [r4, #8]
 80088da:	7013      	strb	r3, [r2, #0]
 80088dc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80088de:	4b59      	ldr	r3, [pc, #356]	@ (8008a44 <_vfiprintf_r+0x224>)
 80088e0:	2205      	movs	r2, #5
 80088e2:	0018      	movs	r0, r3
 80088e4:	7829      	ldrb	r1, [r5, #0]
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	f7fe f959 	bl	8006b9e <memchr>
 80088ec:	1c6e      	adds	r6, r5, #1
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d11f      	bne.n	8008932 <_vfiprintf_r+0x112>
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	06d3      	lsls	r3, r2, #27
 80088f6:	d504      	bpl.n	8008902 <_vfiprintf_r+0xe2>
 80088f8:	2353      	movs	r3, #83	@ 0x53
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	185b      	adds	r3, r3, r1
 80088fe:	2120      	movs	r1, #32
 8008900:	7019      	strb	r1, [r3, #0]
 8008902:	0713      	lsls	r3, r2, #28
 8008904:	d504      	bpl.n	8008910 <_vfiprintf_r+0xf0>
 8008906:	2353      	movs	r3, #83	@ 0x53
 8008908:	a904      	add	r1, sp, #16
 800890a:	185b      	adds	r3, r3, r1
 800890c:	212b      	movs	r1, #43	@ 0x2b
 800890e:	7019      	strb	r1, [r3, #0]
 8008910:	782b      	ldrb	r3, [r5, #0]
 8008912:	2b2a      	cmp	r3, #42	@ 0x2a
 8008914:	d016      	beq.n	8008944 <_vfiprintf_r+0x124>
 8008916:	002e      	movs	r6, r5
 8008918:	2100      	movs	r1, #0
 800891a:	200a      	movs	r0, #10
 800891c:	68e3      	ldr	r3, [r4, #12]
 800891e:	7832      	ldrb	r2, [r6, #0]
 8008920:	1c75      	adds	r5, r6, #1
 8008922:	3a30      	subs	r2, #48	@ 0x30
 8008924:	2a09      	cmp	r2, #9
 8008926:	d950      	bls.n	80089ca <_vfiprintf_r+0x1aa>
 8008928:	2900      	cmp	r1, #0
 800892a:	d111      	bne.n	8008950 <_vfiprintf_r+0x130>
 800892c:	e017      	b.n	800895e <_vfiprintf_r+0x13e>
 800892e:	3601      	adds	r6, #1
 8008930:	e7af      	b.n	8008892 <_vfiprintf_r+0x72>
 8008932:	9b05      	ldr	r3, [sp, #20]
 8008934:	6822      	ldr	r2, [r4, #0]
 8008936:	1ac0      	subs	r0, r0, r3
 8008938:	2301      	movs	r3, #1
 800893a:	4083      	lsls	r3, r0
 800893c:	4313      	orrs	r3, r2
 800893e:	0035      	movs	r5, r6
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	e7cc      	b.n	80088de <_vfiprintf_r+0xbe>
 8008944:	9b07      	ldr	r3, [sp, #28]
 8008946:	1d19      	adds	r1, r3, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	9107      	str	r1, [sp, #28]
 800894c:	2b00      	cmp	r3, #0
 800894e:	db01      	blt.n	8008954 <_vfiprintf_r+0x134>
 8008950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008952:	e004      	b.n	800895e <_vfiprintf_r+0x13e>
 8008954:	425b      	negs	r3, r3
 8008956:	60e3      	str	r3, [r4, #12]
 8008958:	2302      	movs	r3, #2
 800895a:	4313      	orrs	r3, r2
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	7833      	ldrb	r3, [r6, #0]
 8008960:	2b2e      	cmp	r3, #46	@ 0x2e
 8008962:	d10c      	bne.n	800897e <_vfiprintf_r+0x15e>
 8008964:	7873      	ldrb	r3, [r6, #1]
 8008966:	2b2a      	cmp	r3, #42	@ 0x2a
 8008968:	d134      	bne.n	80089d4 <_vfiprintf_r+0x1b4>
 800896a:	9b07      	ldr	r3, [sp, #28]
 800896c:	3602      	adds	r6, #2
 800896e:	1d1a      	adds	r2, r3, #4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	9207      	str	r2, [sp, #28]
 8008974:	2b00      	cmp	r3, #0
 8008976:	da01      	bge.n	800897c <_vfiprintf_r+0x15c>
 8008978:	2301      	movs	r3, #1
 800897a:	425b      	negs	r3, r3
 800897c:	9309      	str	r3, [sp, #36]	@ 0x24
 800897e:	4d32      	ldr	r5, [pc, #200]	@ (8008a48 <_vfiprintf_r+0x228>)
 8008980:	2203      	movs	r2, #3
 8008982:	0028      	movs	r0, r5
 8008984:	7831      	ldrb	r1, [r6, #0]
 8008986:	f7fe f90a 	bl	8006b9e <memchr>
 800898a:	2800      	cmp	r0, #0
 800898c:	d006      	beq.n	800899c <_vfiprintf_r+0x17c>
 800898e:	2340      	movs	r3, #64	@ 0x40
 8008990:	1b40      	subs	r0, r0, r5
 8008992:	4083      	lsls	r3, r0
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	3601      	adds	r6, #1
 8008998:	4313      	orrs	r3, r2
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	7831      	ldrb	r1, [r6, #0]
 800899e:	2206      	movs	r2, #6
 80089a0:	482a      	ldr	r0, [pc, #168]	@ (8008a4c <_vfiprintf_r+0x22c>)
 80089a2:	1c75      	adds	r5, r6, #1
 80089a4:	7621      	strb	r1, [r4, #24]
 80089a6:	f7fe f8fa 	bl	8006b9e <memchr>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d040      	beq.n	8008a30 <_vfiprintf_r+0x210>
 80089ae:	4b28      	ldr	r3, [pc, #160]	@ (8008a50 <_vfiprintf_r+0x230>)
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d122      	bne.n	80089fa <_vfiprintf_r+0x1da>
 80089b4:	2207      	movs	r2, #7
 80089b6:	9b07      	ldr	r3, [sp, #28]
 80089b8:	3307      	adds	r3, #7
 80089ba:	4393      	bics	r3, r2
 80089bc:	3308      	adds	r3, #8
 80089be:	9307      	str	r3, [sp, #28]
 80089c0:	6963      	ldr	r3, [r4, #20]
 80089c2:	9a04      	ldr	r2, [sp, #16]
 80089c4:	189b      	adds	r3, r3, r2
 80089c6:	6163      	str	r3, [r4, #20]
 80089c8:	e762      	b.n	8008890 <_vfiprintf_r+0x70>
 80089ca:	4343      	muls	r3, r0
 80089cc:	002e      	movs	r6, r5
 80089ce:	2101      	movs	r1, #1
 80089d0:	189b      	adds	r3, r3, r2
 80089d2:	e7a4      	b.n	800891e <_vfiprintf_r+0xfe>
 80089d4:	2300      	movs	r3, #0
 80089d6:	200a      	movs	r0, #10
 80089d8:	0019      	movs	r1, r3
 80089da:	3601      	adds	r6, #1
 80089dc:	6063      	str	r3, [r4, #4]
 80089de:	7832      	ldrb	r2, [r6, #0]
 80089e0:	1c75      	adds	r5, r6, #1
 80089e2:	3a30      	subs	r2, #48	@ 0x30
 80089e4:	2a09      	cmp	r2, #9
 80089e6:	d903      	bls.n	80089f0 <_vfiprintf_r+0x1d0>
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0c8      	beq.n	800897e <_vfiprintf_r+0x15e>
 80089ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80089ee:	e7c6      	b.n	800897e <_vfiprintf_r+0x15e>
 80089f0:	4341      	muls	r1, r0
 80089f2:	002e      	movs	r6, r5
 80089f4:	2301      	movs	r3, #1
 80089f6:	1889      	adds	r1, r1, r2
 80089f8:	e7f1      	b.n	80089de <_vfiprintf_r+0x1be>
 80089fa:	aa07      	add	r2, sp, #28
 80089fc:	9200      	str	r2, [sp, #0]
 80089fe:	0021      	movs	r1, r4
 8008a00:	003a      	movs	r2, r7
 8008a02:	4b14      	ldr	r3, [pc, #80]	@ (8008a54 <_vfiprintf_r+0x234>)
 8008a04:	9803      	ldr	r0, [sp, #12]
 8008a06:	f7fd fb57 	bl	80060b8 <_printf_float>
 8008a0a:	9004      	str	r0, [sp, #16]
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	d1d6      	bne.n	80089c0 <_vfiprintf_r+0x1a0>
 8008a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a14:	07db      	lsls	r3, r3, #31
 8008a16:	d405      	bmi.n	8008a24 <_vfiprintf_r+0x204>
 8008a18:	89bb      	ldrh	r3, [r7, #12]
 8008a1a:	059b      	lsls	r3, r3, #22
 8008a1c:	d402      	bmi.n	8008a24 <_vfiprintf_r+0x204>
 8008a1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008a20:	f7fe f8bc 	bl	8006b9c <__retarget_lock_release_recursive>
 8008a24:	89bb      	ldrh	r3, [r7, #12]
 8008a26:	065b      	lsls	r3, r3, #25
 8008a28:	d500      	bpl.n	8008a2c <_vfiprintf_r+0x20c>
 8008a2a:	e71e      	b.n	800886a <_vfiprintf_r+0x4a>
 8008a2c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008a2e:	e71e      	b.n	800886e <_vfiprintf_r+0x4e>
 8008a30:	aa07      	add	r2, sp, #28
 8008a32:	9200      	str	r2, [sp, #0]
 8008a34:	0021      	movs	r1, r4
 8008a36:	003a      	movs	r2, r7
 8008a38:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <_vfiprintf_r+0x234>)
 8008a3a:	9803      	ldr	r0, [sp, #12]
 8008a3c:	f7fd fdea 	bl	8006614 <_printf_i>
 8008a40:	e7e3      	b.n	8008a0a <_vfiprintf_r+0x1ea>
 8008a42:	46c0      	nop			@ (mov r8, r8)
 8008a44:	08009372 	.word	0x08009372
 8008a48:	08009378 	.word	0x08009378
 8008a4c:	0800937c 	.word	0x0800937c
 8008a50:	080060b9 	.word	0x080060b9
 8008a54:	080087fd 	.word	0x080087fd

08008a58 <__swbuf_r>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	0006      	movs	r6, r0
 8008a5c:	000d      	movs	r5, r1
 8008a5e:	0014      	movs	r4, r2
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d004      	beq.n	8008a6e <__swbuf_r+0x16>
 8008a64:	6a03      	ldr	r3, [r0, #32]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <__swbuf_r+0x16>
 8008a6a:	f7fd ff6f 	bl	800694c <__sinit>
 8008a6e:	69a3      	ldr	r3, [r4, #24]
 8008a70:	60a3      	str	r3, [r4, #8]
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	071b      	lsls	r3, r3, #28
 8008a76:	d502      	bpl.n	8008a7e <__swbuf_r+0x26>
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d109      	bne.n	8008a92 <__swbuf_r+0x3a>
 8008a7e:	0021      	movs	r1, r4
 8008a80:	0030      	movs	r0, r6
 8008a82:	f000 f82b 	bl	8008adc <__swsetup_r>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d003      	beq.n	8008a92 <__swbuf_r+0x3a>
 8008a8a:	2501      	movs	r5, #1
 8008a8c:	426d      	negs	r5, r5
 8008a8e:	0028      	movs	r0, r5
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	6820      	ldr	r0, [r4, #0]
 8008a96:	b2ef      	uxtb	r7, r5
 8008a98:	1ac0      	subs	r0, r0, r3
 8008a9a:	6963      	ldr	r3, [r4, #20]
 8008a9c:	b2ed      	uxtb	r5, r5
 8008a9e:	4283      	cmp	r3, r0
 8008aa0:	dc05      	bgt.n	8008aae <__swbuf_r+0x56>
 8008aa2:	0021      	movs	r1, r4
 8008aa4:	0030      	movs	r0, r6
 8008aa6:	f7ff fd81 	bl	80085ac <_fflush_r>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d1ed      	bne.n	8008a8a <__swbuf_r+0x32>
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	60a3      	str	r3, [r4, #8]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	6022      	str	r2, [r4, #0]
 8008abc:	701f      	strb	r7, [r3, #0]
 8008abe:	6963      	ldr	r3, [r4, #20]
 8008ac0:	4283      	cmp	r3, r0
 8008ac2:	d004      	beq.n	8008ace <__swbuf_r+0x76>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	07db      	lsls	r3, r3, #31
 8008ac8:	d5e1      	bpl.n	8008a8e <__swbuf_r+0x36>
 8008aca:	2d0a      	cmp	r5, #10
 8008acc:	d1df      	bne.n	8008a8e <__swbuf_r+0x36>
 8008ace:	0021      	movs	r1, r4
 8008ad0:	0030      	movs	r0, r6
 8008ad2:	f7ff fd6b 	bl	80085ac <_fflush_r>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d0d9      	beq.n	8008a8e <__swbuf_r+0x36>
 8008ada:	e7d6      	b.n	8008a8a <__swbuf_r+0x32>

08008adc <__swsetup_r>:
 8008adc:	4b2d      	ldr	r3, [pc, #180]	@ (8008b94 <__swsetup_r+0xb8>)
 8008ade:	b570      	push	{r4, r5, r6, lr}
 8008ae0:	0005      	movs	r5, r0
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	000c      	movs	r4, r1
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d004      	beq.n	8008af4 <__swsetup_r+0x18>
 8008aea:	6a03      	ldr	r3, [r0, #32]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <__swsetup_r+0x18>
 8008af0:	f7fd ff2c 	bl	800694c <__sinit>
 8008af4:	220c      	movs	r2, #12
 8008af6:	5ea3      	ldrsh	r3, [r4, r2]
 8008af8:	071a      	lsls	r2, r3, #28
 8008afa:	d423      	bmi.n	8008b44 <__swsetup_r+0x68>
 8008afc:	06da      	lsls	r2, r3, #27
 8008afe:	d407      	bmi.n	8008b10 <__swsetup_r+0x34>
 8008b00:	2209      	movs	r2, #9
 8008b02:	602a      	str	r2, [r5, #0]
 8008b04:	2240      	movs	r2, #64	@ 0x40
 8008b06:	2001      	movs	r0, #1
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	4240      	negs	r0, r0
 8008b0e:	e03a      	b.n	8008b86 <__swsetup_r+0xaa>
 8008b10:	075b      	lsls	r3, r3, #29
 8008b12:	d513      	bpl.n	8008b3c <__swsetup_r+0x60>
 8008b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b16:	2900      	cmp	r1, #0
 8008b18:	d008      	beq.n	8008b2c <__swsetup_r+0x50>
 8008b1a:	0023      	movs	r3, r4
 8008b1c:	3344      	adds	r3, #68	@ 0x44
 8008b1e:	4299      	cmp	r1, r3
 8008b20:	d002      	beq.n	8008b28 <__swsetup_r+0x4c>
 8008b22:	0028      	movs	r0, r5
 8008b24:	f7fe febc 	bl	80078a0 <_free_r>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b2c:	2224      	movs	r2, #36	@ 0x24
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	4393      	bics	r3, r2
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	2300      	movs	r3, #0
 8008b36:	6063      	str	r3, [r4, #4]
 8008b38:	6923      	ldr	r3, [r4, #16]
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	2308      	movs	r3, #8
 8008b3e:	89a2      	ldrh	r2, [r4, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10b      	bne.n	8008b62 <__swsetup_r+0x86>
 8008b4a:	21a0      	movs	r1, #160	@ 0xa0
 8008b4c:	2280      	movs	r2, #128	@ 0x80
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	0089      	lsls	r1, r1, #2
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	400b      	ands	r3, r1
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d003      	beq.n	8008b62 <__swsetup_r+0x86>
 8008b5a:	0021      	movs	r1, r4
 8008b5c:	0028      	movs	r0, r5
 8008b5e:	f000 f88f 	bl	8008c80 <__smakebuf_r>
 8008b62:	220c      	movs	r2, #12
 8008b64:	5ea3      	ldrsh	r3, [r4, r2]
 8008b66:	2101      	movs	r1, #1
 8008b68:	001a      	movs	r2, r3
 8008b6a:	400a      	ands	r2, r1
 8008b6c:	420b      	tst	r3, r1
 8008b6e:	d00b      	beq.n	8008b88 <__swsetup_r+0xac>
 8008b70:	2200      	movs	r2, #0
 8008b72:	60a2      	str	r2, [r4, #8]
 8008b74:	6962      	ldr	r2, [r4, #20]
 8008b76:	4252      	negs	r2, r2
 8008b78:	61a2      	str	r2, [r4, #24]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	6922      	ldr	r2, [r4, #16]
 8008b7e:	4282      	cmp	r2, r0
 8008b80:	d101      	bne.n	8008b86 <__swsetup_r+0xaa>
 8008b82:	061a      	lsls	r2, r3, #24
 8008b84:	d4be      	bmi.n	8008b04 <__swsetup_r+0x28>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	0799      	lsls	r1, r3, #30
 8008b8a:	d400      	bmi.n	8008b8e <__swsetup_r+0xb2>
 8008b8c:	6962      	ldr	r2, [r4, #20]
 8008b8e:	60a2      	str	r2, [r4, #8]
 8008b90:	e7f3      	b.n	8008b7a <__swsetup_r+0x9e>
 8008b92:	46c0      	nop			@ (mov r8, r8)
 8008b94:	20000018 	.word	0x20000018

08008b98 <_raise_r>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	0004      	movs	r4, r0
 8008b9c:	000d      	movs	r5, r1
 8008b9e:	291f      	cmp	r1, #31
 8008ba0:	d904      	bls.n	8008bac <_raise_r+0x14>
 8008ba2:	2316      	movs	r3, #22
 8008ba4:	6003      	str	r3, [r0, #0]
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	4240      	negs	r0, r0
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d004      	beq.n	8008bbc <_raise_r+0x24>
 8008bb2:	008a      	lsls	r2, r1, #2
 8008bb4:	189b      	adds	r3, r3, r2
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	d108      	bne.n	8008bce <_raise_r+0x36>
 8008bbc:	0020      	movs	r0, r4
 8008bbe:	f000 f831 	bl	8008c24 <_getpid_r>
 8008bc2:	002a      	movs	r2, r5
 8008bc4:	0001      	movs	r1, r0
 8008bc6:	0020      	movs	r0, r4
 8008bc8:	f000 f81a 	bl	8008c00 <_kill_r>
 8008bcc:	e7ed      	b.n	8008baa <_raise_r+0x12>
 8008bce:	2a01      	cmp	r2, #1
 8008bd0:	d009      	beq.n	8008be6 <_raise_r+0x4e>
 8008bd2:	1c51      	adds	r1, r2, #1
 8008bd4:	d103      	bne.n	8008bde <_raise_r+0x46>
 8008bd6:	2316      	movs	r3, #22
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	2001      	movs	r0, #1
 8008bdc:	e7e5      	b.n	8008baa <_raise_r+0x12>
 8008bde:	2100      	movs	r1, #0
 8008be0:	0028      	movs	r0, r5
 8008be2:	6019      	str	r1, [r3, #0]
 8008be4:	4790      	blx	r2
 8008be6:	2000      	movs	r0, #0
 8008be8:	e7df      	b.n	8008baa <_raise_r+0x12>
	...

08008bec <raise>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	4b03      	ldr	r3, [pc, #12]	@ (8008bfc <raise+0x10>)
 8008bf0:	0001      	movs	r1, r0
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	f7ff ffd0 	bl	8008b98 <_raise_r>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	46c0      	nop			@ (mov r8, r8)
 8008bfc:	20000018 	.word	0x20000018

08008c00 <_kill_r>:
 8008c00:	2300      	movs	r3, #0
 8008c02:	b570      	push	{r4, r5, r6, lr}
 8008c04:	4d06      	ldr	r5, [pc, #24]	@ (8008c20 <_kill_r+0x20>)
 8008c06:	0004      	movs	r4, r0
 8008c08:	0008      	movs	r0, r1
 8008c0a:	0011      	movs	r1, r2
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	f7fa f8d1 	bl	8002db4 <_kill>
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	d103      	bne.n	8008c1e <_kill_r+0x1e>
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d000      	beq.n	8008c1e <_kill_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	20000594 	.word	0x20000594

08008c24 <_getpid_r>:
 8008c24:	b510      	push	{r4, lr}
 8008c26:	f7fa f8bf 	bl	8002da8 <_getpid>
 8008c2a:	bd10      	pop	{r4, pc}

08008c2c <__swhatbuf_r>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	000e      	movs	r6, r1
 8008c30:	001d      	movs	r5, r3
 8008c32:	230e      	movs	r3, #14
 8008c34:	5ec9      	ldrsh	r1, [r1, r3]
 8008c36:	0014      	movs	r4, r2
 8008c38:	b096      	sub	sp, #88	@ 0x58
 8008c3a:	2900      	cmp	r1, #0
 8008c3c:	da0c      	bge.n	8008c58 <__swhatbuf_r+0x2c>
 8008c3e:	89b2      	ldrh	r2, [r6, #12]
 8008c40:	2380      	movs	r3, #128	@ 0x80
 8008c42:	0011      	movs	r1, r2
 8008c44:	4019      	ands	r1, r3
 8008c46:	421a      	tst	r2, r3
 8008c48:	d114      	bne.n	8008c74 <__swhatbuf_r+0x48>
 8008c4a:	2380      	movs	r3, #128	@ 0x80
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	2000      	movs	r0, #0
 8008c50:	6029      	str	r1, [r5, #0]
 8008c52:	6023      	str	r3, [r4, #0]
 8008c54:	b016      	add	sp, #88	@ 0x58
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	466a      	mov	r2, sp
 8008c5a:	f000 f853 	bl	8008d04 <_fstat_r>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	dbed      	blt.n	8008c3e <__swhatbuf_r+0x12>
 8008c62:	23f0      	movs	r3, #240	@ 0xf0
 8008c64:	9901      	ldr	r1, [sp, #4]
 8008c66:	021b      	lsls	r3, r3, #8
 8008c68:	4019      	ands	r1, r3
 8008c6a:	4b04      	ldr	r3, [pc, #16]	@ (8008c7c <__swhatbuf_r+0x50>)
 8008c6c:	18c9      	adds	r1, r1, r3
 8008c6e:	424b      	negs	r3, r1
 8008c70:	4159      	adcs	r1, r3
 8008c72:	e7ea      	b.n	8008c4a <__swhatbuf_r+0x1e>
 8008c74:	2100      	movs	r1, #0
 8008c76:	2340      	movs	r3, #64	@ 0x40
 8008c78:	e7e9      	b.n	8008c4e <__swhatbuf_r+0x22>
 8008c7a:	46c0      	nop			@ (mov r8, r8)
 8008c7c:	ffffe000 	.word	0xffffe000

08008c80 <__smakebuf_r>:
 8008c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c82:	2602      	movs	r6, #2
 8008c84:	898b      	ldrh	r3, [r1, #12]
 8008c86:	0005      	movs	r5, r0
 8008c88:	000c      	movs	r4, r1
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	4233      	tst	r3, r6
 8008c8e:	d007      	beq.n	8008ca0 <__smakebuf_r+0x20>
 8008c90:	0023      	movs	r3, r4
 8008c92:	3347      	adds	r3, #71	@ 0x47
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	6123      	str	r3, [r4, #16]
 8008c98:	2301      	movs	r3, #1
 8008c9a:	6163      	str	r3, [r4, #20]
 8008c9c:	b005      	add	sp, #20
 8008c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca0:	ab03      	add	r3, sp, #12
 8008ca2:	aa02      	add	r2, sp, #8
 8008ca4:	f7ff ffc2 	bl	8008c2c <__swhatbuf_r>
 8008ca8:	9f02      	ldr	r7, [sp, #8]
 8008caa:	9001      	str	r0, [sp, #4]
 8008cac:	0039      	movs	r1, r7
 8008cae:	0028      	movs	r0, r5
 8008cb0:	f7fe fe6c 	bl	800798c <_malloc_r>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d108      	bne.n	8008cca <__smakebuf_r+0x4a>
 8008cb8:	220c      	movs	r2, #12
 8008cba:	5ea3      	ldrsh	r3, [r4, r2]
 8008cbc:	059a      	lsls	r2, r3, #22
 8008cbe:	d4ed      	bmi.n	8008c9c <__smakebuf_r+0x1c>
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	4393      	bics	r3, r2
 8008cc4:	431e      	orrs	r6, r3
 8008cc6:	81a6      	strh	r6, [r4, #12]
 8008cc8:	e7e2      	b.n	8008c90 <__smakebuf_r+0x10>
 8008cca:	2380      	movs	r3, #128	@ 0x80
 8008ccc:	89a2      	ldrh	r2, [r4, #12]
 8008cce:	6020      	str	r0, [r4, #0]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	6120      	str	r0, [r4, #16]
 8008cd8:	6167      	str	r7, [r4, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00c      	beq.n	8008cf8 <__smakebuf_r+0x78>
 8008cde:	0028      	movs	r0, r5
 8008ce0:	230e      	movs	r3, #14
 8008ce2:	5ee1      	ldrsh	r1, [r4, r3]
 8008ce4:	f000 f820 	bl	8008d28 <_isatty_r>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d005      	beq.n	8008cf8 <__smakebuf_r+0x78>
 8008cec:	2303      	movs	r3, #3
 8008cee:	89a2      	ldrh	r2, [r4, #12]
 8008cf0:	439a      	bics	r2, r3
 8008cf2:	3b02      	subs	r3, #2
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	9a01      	ldr	r2, [sp, #4]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	e7cc      	b.n	8008c9c <__smakebuf_r+0x1c>
	...

08008d04 <_fstat_r>:
 8008d04:	2300      	movs	r3, #0
 8008d06:	b570      	push	{r4, r5, r6, lr}
 8008d08:	4d06      	ldr	r5, [pc, #24]	@ (8008d24 <_fstat_r+0x20>)
 8008d0a:	0004      	movs	r4, r0
 8008d0c:	0008      	movs	r0, r1
 8008d0e:	0011      	movs	r1, r2
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	f7fa f8af 	bl	8002e74 <_fstat>
 8008d16:	1c43      	adds	r3, r0, #1
 8008d18:	d103      	bne.n	8008d22 <_fstat_r+0x1e>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d000      	beq.n	8008d22 <_fstat_r+0x1e>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	20000594 	.word	0x20000594

08008d28 <_isatty_r>:
 8008d28:	2300      	movs	r3, #0
 8008d2a:	b570      	push	{r4, r5, r6, lr}
 8008d2c:	4d06      	ldr	r5, [pc, #24]	@ (8008d48 <_isatty_r+0x20>)
 8008d2e:	0004      	movs	r4, r0
 8008d30:	0008      	movs	r0, r1
 8008d32:	602b      	str	r3, [r5, #0]
 8008d34:	f7fa f8ac 	bl	8002e90 <_isatty>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d103      	bne.n	8008d44 <_isatty_r+0x1c>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d000      	beq.n	8008d44 <_isatty_r+0x1c>
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	bd70      	pop	{r4, r5, r6, pc}
 8008d46:	46c0      	nop			@ (mov r8, r8)
 8008d48:	20000594 	.word	0x20000594

08008d4c <log>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	0004      	movs	r4, r0
 8008d50:	000d      	movs	r5, r1
 8008d52:	f000 f837 	bl	8008dc4 <__ieee754_log>
 8008d56:	0022      	movs	r2, r4
 8008d58:	0006      	movs	r6, r0
 8008d5a:	000f      	movs	r7, r1
 8008d5c:	002b      	movs	r3, r5
 8008d5e:	0020      	movs	r0, r4
 8008d60:	0029      	movs	r1, r5
 8008d62:	f7f9 faab 	bl	80022bc <__aeabi_dcmpun>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d115      	bne.n	8008d96 <log+0x4a>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	0020      	movs	r0, r4
 8008d70:	0029      	movs	r1, r5
 8008d72:	f7f7 fb81 	bl	8000478 <__aeabi_dcmpgt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d10d      	bne.n	8008d96 <log+0x4a>
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	0020      	movs	r0, r4
 8008d80:	0029      	movs	r1, r5
 8008d82:	f7f7 fb5f 	bl	8000444 <__aeabi_dcmpeq>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d008      	beq.n	8008d9c <log+0x50>
 8008d8a:	f7fd fedb 	bl	8006b44 <__errno>
 8008d8e:	2322      	movs	r3, #34	@ 0x22
 8008d90:	2600      	movs	r6, #0
 8008d92:	4f07      	ldr	r7, [pc, #28]	@ (8008db0 <log+0x64>)
 8008d94:	6003      	str	r3, [r0, #0]
 8008d96:	0030      	movs	r0, r6
 8008d98:	0039      	movs	r1, r7
 8008d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d9c:	f7fd fed2 	bl	8006b44 <__errno>
 8008da0:	2321      	movs	r3, #33	@ 0x21
 8008da2:	6003      	str	r3, [r0, #0]
 8008da4:	4803      	ldr	r0, [pc, #12]	@ (8008db4 <log+0x68>)
 8008da6:	f000 f807 	bl	8008db8 <nan>
 8008daa:	0006      	movs	r6, r0
 8008dac:	000f      	movs	r7, r1
 8008dae:	e7f2      	b.n	8008d96 <log+0x4a>
 8008db0:	fff00000 	.word	0xfff00000
 8008db4:	080093c8 	.word	0x080093c8

08008db8 <nan>:
 8008db8:	2000      	movs	r0, #0
 8008dba:	4901      	ldr	r1, [pc, #4]	@ (8008dc0 <nan+0x8>)
 8008dbc:	4770      	bx	lr
 8008dbe:	46c0      	nop			@ (mov r8, r8)
 8008dc0:	7ff80000 	.word	0x7ff80000

08008dc4 <__ieee754_log>:
 8008dc4:	2380      	movs	r3, #128	@ 0x80
 8008dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dc8:	035b      	lsls	r3, r3, #13
 8008dca:	000e      	movs	r6, r1
 8008dcc:	b08d      	sub	sp, #52	@ 0x34
 8008dce:	4299      	cmp	r1, r3
 8008dd0:	da23      	bge.n	8008e1a <__ieee754_log+0x56>
 8008dd2:	004b      	lsls	r3, r1, #1
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	4303      	orrs	r3, r0
 8008dd8:	d107      	bne.n	8008dea <__ieee754_log+0x26>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2000      	movs	r0, #0
 8008de0:	49b4      	ldr	r1, [pc, #720]	@ (80090b4 <__ieee754_log+0x2f0>)
 8008de2:	f7f7 ff41 	bl	8000c68 <__aeabi_ddiv>
 8008de6:	b00d      	add	sp, #52	@ 0x34
 8008de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dea:	2900      	cmp	r1, #0
 8008dec:	da06      	bge.n	8008dfc <__ieee754_log+0x38>
 8008dee:	0002      	movs	r2, r0
 8008df0:	000b      	movs	r3, r1
 8008df2:	f7f8 fe59 	bl	8001aa8 <__aeabi_dsub>
 8008df6:	2200      	movs	r2, #0
 8008df8:	2300      	movs	r3, #0
 8008dfa:	e7f2      	b.n	8008de2 <__ieee754_log+0x1e>
 8008dfc:	4bae      	ldr	r3, [pc, #696]	@ (80090b8 <__ieee754_log+0x2f4>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f7f8 fb6c 	bl	80014dc <__aeabi_dmul>
 8008e04:	2336      	movs	r3, #54	@ 0x36
 8008e06:	000e      	movs	r6, r1
 8008e08:	425b      	negs	r3, r3
 8008e0a:	4aac      	ldr	r2, [pc, #688]	@ (80090bc <__ieee754_log+0x2f8>)
 8008e0c:	4296      	cmp	r6, r2
 8008e0e:	dd06      	ble.n	8008e1e <__ieee754_log+0x5a>
 8008e10:	0002      	movs	r2, r0
 8008e12:	000b      	movs	r3, r1
 8008e14:	f7f7 fb62 	bl	80004dc <__aeabi_dadd>
 8008e18:	e7e5      	b.n	8008de6 <__ieee754_log+0x22>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e7f5      	b.n	8008e0a <__ieee754_log+0x46>
 8008e1e:	4ca8      	ldr	r4, [pc, #672]	@ (80090c0 <__ieee754_log+0x2fc>)
 8008e20:	1532      	asrs	r2, r6, #20
 8008e22:	1912      	adds	r2, r2, r4
 8008e24:	0336      	lsls	r6, r6, #12
 8008e26:	4ca7      	ldr	r4, [pc, #668]	@ (80090c4 <__ieee754_log+0x300>)
 8008e28:	18d2      	adds	r2, r2, r3
 8008e2a:	0b33      	lsrs	r3, r6, #12
 8008e2c:	9302      	str	r3, [sp, #8]
 8008e2e:	191b      	adds	r3, r3, r4
 8008e30:	2480      	movs	r4, #128	@ 0x80
 8008e32:	0364      	lsls	r4, r4, #13
 8008e34:	4023      	ands	r3, r4
 8008e36:	4ca4      	ldr	r4, [pc, #656]	@ (80090c8 <__ieee754_log+0x304>)
 8008e38:	9d02      	ldr	r5, [sp, #8]
 8008e3a:	405c      	eors	r4, r3
 8008e3c:	151b      	asrs	r3, r3, #20
 8008e3e:	189b      	adds	r3, r3, r2
 8008e40:	4325      	orrs	r5, r4
 8008e42:	2200      	movs	r2, #0
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	0029      	movs	r1, r5
 8008e48:	4b9f      	ldr	r3, [pc, #636]	@ (80090c8 <__ieee754_log+0x304>)
 8008e4a:	f7f8 fe2d 	bl	8001aa8 <__aeabi_dsub>
 8008e4e:	9b02      	ldr	r3, [sp, #8]
 8008e50:	0006      	movs	r6, r0
 8008e52:	3302      	adds	r3, #2
 8008e54:	031b      	lsls	r3, r3, #12
 8008e56:	000f      	movs	r7, r1
 8008e58:	2200      	movs	r2, #0
 8008e5a:	0b1b      	lsrs	r3, r3, #12
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	dc64      	bgt.n	8008f2a <__ieee754_log+0x166>
 8008e60:	2300      	movs	r3, #0
 8008e62:	f7f7 faef 	bl	8000444 <__aeabi_dcmpeq>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d019      	beq.n	8008e9e <__ieee754_log+0xda>
 8008e6a:	9b00      	ldr	r3, [sp, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d100      	bne.n	8008e72 <__ieee754_log+0xae>
 8008e70:	e11c      	b.n	80090ac <__ieee754_log+0x2e8>
 8008e72:	0018      	movs	r0, r3
 8008e74:	f7f9 fa80 	bl	8002378 <__aeabi_i2d>
 8008e78:	4a94      	ldr	r2, [pc, #592]	@ (80090cc <__ieee754_log+0x308>)
 8008e7a:	4b95      	ldr	r3, [pc, #596]	@ (80090d0 <__ieee754_log+0x30c>)
 8008e7c:	0004      	movs	r4, r0
 8008e7e:	000d      	movs	r5, r1
 8008e80:	f7f8 fb2c 	bl	80014dc <__aeabi_dmul>
 8008e84:	4a93      	ldr	r2, [pc, #588]	@ (80090d4 <__ieee754_log+0x310>)
 8008e86:	0006      	movs	r6, r0
 8008e88:	000f      	movs	r7, r1
 8008e8a:	4b93      	ldr	r3, [pc, #588]	@ (80090d8 <__ieee754_log+0x314>)
 8008e8c:	0020      	movs	r0, r4
 8008e8e:	0029      	movs	r1, r5
 8008e90:	f7f8 fb24 	bl	80014dc <__aeabi_dmul>
 8008e94:	0002      	movs	r2, r0
 8008e96:	000b      	movs	r3, r1
 8008e98:	0030      	movs	r0, r6
 8008e9a:	0039      	movs	r1, r7
 8008e9c:	e7ba      	b.n	8008e14 <__ieee754_log+0x50>
 8008e9e:	4a8f      	ldr	r2, [pc, #572]	@ (80090dc <__ieee754_log+0x318>)
 8008ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80090e0 <__ieee754_log+0x31c>)
 8008ea2:	0030      	movs	r0, r6
 8008ea4:	0039      	movs	r1, r7
 8008ea6:	f7f8 fb19 	bl	80014dc <__aeabi_dmul>
 8008eaa:	0002      	movs	r2, r0
 8008eac:	000b      	movs	r3, r1
 8008eae:	2000      	movs	r0, #0
 8008eb0:	498c      	ldr	r1, [pc, #560]	@ (80090e4 <__ieee754_log+0x320>)
 8008eb2:	f7f8 fdf9 	bl	8001aa8 <__aeabi_dsub>
 8008eb6:	0032      	movs	r2, r6
 8008eb8:	0004      	movs	r4, r0
 8008eba:	000d      	movs	r5, r1
 8008ebc:	003b      	movs	r3, r7
 8008ebe:	0030      	movs	r0, r6
 8008ec0:	0039      	movs	r1, r7
 8008ec2:	f7f8 fb0b 	bl	80014dc <__aeabi_dmul>
 8008ec6:	000b      	movs	r3, r1
 8008ec8:	0002      	movs	r2, r0
 8008eca:	0029      	movs	r1, r5
 8008ecc:	0020      	movs	r0, r4
 8008ece:	f7f8 fb05 	bl	80014dc <__aeabi_dmul>
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	9002      	str	r0, [sp, #8]
 8008ed6:	9103      	str	r1, [sp, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <__ieee754_log+0x126>
 8008edc:	0002      	movs	r2, r0
 8008ede:	000b      	movs	r3, r1
 8008ee0:	0030      	movs	r0, r6
 8008ee2:	0039      	movs	r1, r7
 8008ee4:	f7f8 fde0 	bl	8001aa8 <__aeabi_dsub>
 8008ee8:	e77d      	b.n	8008de6 <__ieee754_log+0x22>
 8008eea:	9800      	ldr	r0, [sp, #0]
 8008eec:	f7f9 fa44 	bl	8002378 <__aeabi_i2d>
 8008ef0:	4a76      	ldr	r2, [pc, #472]	@ (80090cc <__ieee754_log+0x308>)
 8008ef2:	4b77      	ldr	r3, [pc, #476]	@ (80090d0 <__ieee754_log+0x30c>)
 8008ef4:	0004      	movs	r4, r0
 8008ef6:	000d      	movs	r5, r1
 8008ef8:	f7f8 faf0 	bl	80014dc <__aeabi_dmul>
 8008efc:	4a75      	ldr	r2, [pc, #468]	@ (80090d4 <__ieee754_log+0x310>)
 8008efe:	9000      	str	r0, [sp, #0]
 8008f00:	9101      	str	r1, [sp, #4]
 8008f02:	4b75      	ldr	r3, [pc, #468]	@ (80090d8 <__ieee754_log+0x314>)
 8008f04:	0020      	movs	r0, r4
 8008f06:	0029      	movs	r1, r5
 8008f08:	f7f8 fae8 	bl	80014dc <__aeabi_dmul>
 8008f0c:	0002      	movs	r2, r0
 8008f0e:	000b      	movs	r3, r1
 8008f10:	9802      	ldr	r0, [sp, #8]
 8008f12:	9903      	ldr	r1, [sp, #12]
 8008f14:	f7f8 fdc8 	bl	8001aa8 <__aeabi_dsub>
 8008f18:	0032      	movs	r2, r6
 8008f1a:	003b      	movs	r3, r7
 8008f1c:	f7f8 fdc4 	bl	8001aa8 <__aeabi_dsub>
 8008f20:	0002      	movs	r2, r0
 8008f22:	000b      	movs	r3, r1
 8008f24:	9800      	ldr	r0, [sp, #0]
 8008f26:	9901      	ldr	r1, [sp, #4]
 8008f28:	e7dc      	b.n	8008ee4 <__ieee754_log+0x120>
 8008f2a:	2380      	movs	r3, #128	@ 0x80
 8008f2c:	05db      	lsls	r3, r3, #23
 8008f2e:	f7f7 fad5 	bl	80004dc <__aeabi_dadd>
 8008f32:	0002      	movs	r2, r0
 8008f34:	000b      	movs	r3, r1
 8008f36:	0030      	movs	r0, r6
 8008f38:	0039      	movs	r1, r7
 8008f3a:	f7f7 fe95 	bl	8000c68 <__aeabi_ddiv>
 8008f3e:	9004      	str	r0, [sp, #16]
 8008f40:	9105      	str	r1, [sp, #20]
 8008f42:	9800      	ldr	r0, [sp, #0]
 8008f44:	f7f9 fa18 	bl	8002378 <__aeabi_i2d>
 8008f48:	9a04      	ldr	r2, [sp, #16]
 8008f4a:	9b05      	ldr	r3, [sp, #20]
 8008f4c:	9006      	str	r0, [sp, #24]
 8008f4e:	9107      	str	r1, [sp, #28]
 8008f50:	0010      	movs	r0, r2
 8008f52:	0019      	movs	r1, r3
 8008f54:	f7f8 fac2 	bl	80014dc <__aeabi_dmul>
 8008f58:	4a63      	ldr	r2, [pc, #396]	@ (80090e8 <__ieee754_log+0x324>)
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	4694      	mov	ip, r2
 8008f5e:	4463      	add	r3, ip
 8008f60:	0002      	movs	r2, r0
 8008f62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f64:	000b      	movs	r3, r1
 8008f66:	9008      	str	r0, [sp, #32]
 8008f68:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f6a:	f7f8 fab7 	bl	80014dc <__aeabi_dmul>
 8008f6e:	0004      	movs	r4, r0
 8008f70:	000d      	movs	r5, r1
 8008f72:	4a5e      	ldr	r2, [pc, #376]	@ (80090ec <__ieee754_log+0x328>)
 8008f74:	4b5e      	ldr	r3, [pc, #376]	@ (80090f0 <__ieee754_log+0x32c>)
 8008f76:	f7f8 fab1 	bl	80014dc <__aeabi_dmul>
 8008f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80090f4 <__ieee754_log+0x330>)
 8008f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80090f8 <__ieee754_log+0x334>)
 8008f7e:	f7f7 faad 	bl	80004dc <__aeabi_dadd>
 8008f82:	0022      	movs	r2, r4
 8008f84:	002b      	movs	r3, r5
 8008f86:	f7f8 faa9 	bl	80014dc <__aeabi_dmul>
 8008f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80090fc <__ieee754_log+0x338>)
 8008f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009100 <__ieee754_log+0x33c>)
 8008f8e:	f7f7 faa5 	bl	80004dc <__aeabi_dadd>
 8008f92:	0022      	movs	r2, r4
 8008f94:	002b      	movs	r3, r5
 8008f96:	f7f8 faa1 	bl	80014dc <__aeabi_dmul>
 8008f9a:	4a5a      	ldr	r2, [pc, #360]	@ (8009104 <__ieee754_log+0x340>)
 8008f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009108 <__ieee754_log+0x344>)
 8008f9e:	f7f7 fa9d 	bl	80004dc <__aeabi_dadd>
 8008fa2:	9a08      	ldr	r2, [sp, #32]
 8008fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa6:	f7f8 fa99 	bl	80014dc <__aeabi_dmul>
 8008faa:	4a58      	ldr	r2, [pc, #352]	@ (800910c <__ieee754_log+0x348>)
 8008fac:	9008      	str	r0, [sp, #32]
 8008fae:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fb0:	4b57      	ldr	r3, [pc, #348]	@ (8009110 <__ieee754_log+0x34c>)
 8008fb2:	0020      	movs	r0, r4
 8008fb4:	0029      	movs	r1, r5
 8008fb6:	f7f8 fa91 	bl	80014dc <__aeabi_dmul>
 8008fba:	4a56      	ldr	r2, [pc, #344]	@ (8009114 <__ieee754_log+0x350>)
 8008fbc:	4b56      	ldr	r3, [pc, #344]	@ (8009118 <__ieee754_log+0x354>)
 8008fbe:	f7f7 fa8d 	bl	80004dc <__aeabi_dadd>
 8008fc2:	0022      	movs	r2, r4
 8008fc4:	002b      	movs	r3, r5
 8008fc6:	f7f8 fa89 	bl	80014dc <__aeabi_dmul>
 8008fca:	4a54      	ldr	r2, [pc, #336]	@ (800911c <__ieee754_log+0x358>)
 8008fcc:	4b54      	ldr	r3, [pc, #336]	@ (8009120 <__ieee754_log+0x35c>)
 8008fce:	f7f7 fa85 	bl	80004dc <__aeabi_dadd>
 8008fd2:	0022      	movs	r2, r4
 8008fd4:	002b      	movs	r3, r5
 8008fd6:	f7f8 fa81 	bl	80014dc <__aeabi_dmul>
 8008fda:	0002      	movs	r2, r0
 8008fdc:	000b      	movs	r3, r1
 8008fde:	9808      	ldr	r0, [sp, #32]
 8008fe0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fe2:	f7f7 fa7b 	bl	80004dc <__aeabi_dadd>
 8008fe6:	9a02      	ldr	r2, [sp, #8]
 8008fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8009124 <__ieee754_log+0x360>)
 8008fea:	0004      	movs	r4, r0
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ff0:	000d      	movs	r5, r1
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dd34      	ble.n	8009062 <__ieee754_log+0x29e>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80090e4 <__ieee754_log+0x320>)
 8008ffc:	0030      	movs	r0, r6
 8008ffe:	0039      	movs	r1, r7
 8009000:	f7f8 fa6c 	bl	80014dc <__aeabi_dmul>
 8009004:	0032      	movs	r2, r6
 8009006:	003b      	movs	r3, r7
 8009008:	f7f8 fa68 	bl	80014dc <__aeabi_dmul>
 800900c:	0002      	movs	r2, r0
 800900e:	000b      	movs	r3, r1
 8009010:	9002      	str	r0, [sp, #8]
 8009012:	9103      	str	r1, [sp, #12]
 8009014:	0020      	movs	r0, r4
 8009016:	0029      	movs	r1, r5
 8009018:	f7f7 fa60 	bl	80004dc <__aeabi_dadd>
 800901c:	9a04      	ldr	r2, [sp, #16]
 800901e:	9b05      	ldr	r3, [sp, #20]
 8009020:	f7f8 fa5c 	bl	80014dc <__aeabi_dmul>
 8009024:	9b00      	ldr	r3, [sp, #0]
 8009026:	0004      	movs	r4, r0
 8009028:	000d      	movs	r5, r1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <__ieee754_log+0x278>
 800902e:	0002      	movs	r2, r0
 8009030:	000b      	movs	r3, r1
 8009032:	9802      	ldr	r0, [sp, #8]
 8009034:	9903      	ldr	r1, [sp, #12]
 8009036:	f7f8 fd37 	bl	8001aa8 <__aeabi_dsub>
 800903a:	e74f      	b.n	8008edc <__ieee754_log+0x118>
 800903c:	4a23      	ldr	r2, [pc, #140]	@ (80090cc <__ieee754_log+0x308>)
 800903e:	4b24      	ldr	r3, [pc, #144]	@ (80090d0 <__ieee754_log+0x30c>)
 8009040:	9806      	ldr	r0, [sp, #24]
 8009042:	9907      	ldr	r1, [sp, #28]
 8009044:	f7f8 fa4a 	bl	80014dc <__aeabi_dmul>
 8009048:	4a22      	ldr	r2, [pc, #136]	@ (80090d4 <__ieee754_log+0x310>)
 800904a:	9000      	str	r0, [sp, #0]
 800904c:	9101      	str	r1, [sp, #4]
 800904e:	9806      	ldr	r0, [sp, #24]
 8009050:	9907      	ldr	r1, [sp, #28]
 8009052:	4b21      	ldr	r3, [pc, #132]	@ (80090d8 <__ieee754_log+0x314>)
 8009054:	f7f8 fa42 	bl	80014dc <__aeabi_dmul>
 8009058:	0022      	movs	r2, r4
 800905a:	002b      	movs	r3, r5
 800905c:	f7f7 fa3e 	bl	80004dc <__aeabi_dadd>
 8009060:	e754      	b.n	8008f0c <__ieee754_log+0x148>
 8009062:	0002      	movs	r2, r0
 8009064:	000b      	movs	r3, r1
 8009066:	0030      	movs	r0, r6
 8009068:	0039      	movs	r1, r7
 800906a:	f7f8 fd1d 	bl	8001aa8 <__aeabi_dsub>
 800906e:	9a04      	ldr	r2, [sp, #16]
 8009070:	9b05      	ldr	r3, [sp, #20]
 8009072:	f7f8 fa33 	bl	80014dc <__aeabi_dmul>
 8009076:	9b00      	ldr	r3, [sp, #0]
 8009078:	0004      	movs	r4, r0
 800907a:	000d      	movs	r5, r1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <__ieee754_log+0x2c2>
 8009080:	0002      	movs	r2, r0
 8009082:	000b      	movs	r3, r1
 8009084:	e72c      	b.n	8008ee0 <__ieee754_log+0x11c>
 8009086:	4a11      	ldr	r2, [pc, #68]	@ (80090cc <__ieee754_log+0x308>)
 8009088:	4b11      	ldr	r3, [pc, #68]	@ (80090d0 <__ieee754_log+0x30c>)
 800908a:	9806      	ldr	r0, [sp, #24]
 800908c:	9907      	ldr	r1, [sp, #28]
 800908e:	f7f8 fa25 	bl	80014dc <__aeabi_dmul>
 8009092:	4a10      	ldr	r2, [pc, #64]	@ (80090d4 <__ieee754_log+0x310>)
 8009094:	9000      	str	r0, [sp, #0]
 8009096:	9101      	str	r1, [sp, #4]
 8009098:	9806      	ldr	r0, [sp, #24]
 800909a:	9907      	ldr	r1, [sp, #28]
 800909c:	4b0e      	ldr	r3, [pc, #56]	@ (80090d8 <__ieee754_log+0x314>)
 800909e:	f7f8 fa1d 	bl	80014dc <__aeabi_dmul>
 80090a2:	0002      	movs	r2, r0
 80090a4:	000b      	movs	r3, r1
 80090a6:	0020      	movs	r0, r4
 80090a8:	0029      	movs	r1, r5
 80090aa:	e733      	b.n	8008f14 <__ieee754_log+0x150>
 80090ac:	2000      	movs	r0, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	e699      	b.n	8008de6 <__ieee754_log+0x22>
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	c3500000 	.word	0xc3500000
 80090b8:	43500000 	.word	0x43500000
 80090bc:	7fefffff 	.word	0x7fefffff
 80090c0:	fffffc01 	.word	0xfffffc01
 80090c4:	00095f64 	.word	0x00095f64
 80090c8:	3ff00000 	.word	0x3ff00000
 80090cc:	fee00000 	.word	0xfee00000
 80090d0:	3fe62e42 	.word	0x3fe62e42
 80090d4:	35793c76 	.word	0x35793c76
 80090d8:	3dea39ef 	.word	0x3dea39ef
 80090dc:	55555555 	.word	0x55555555
 80090e0:	3fd55555 	.word	0x3fd55555
 80090e4:	3fe00000 	.word	0x3fe00000
 80090e8:	fff9eb86 	.word	0xfff9eb86
 80090ec:	df3e5244 	.word	0xdf3e5244
 80090f0:	3fc2f112 	.word	0x3fc2f112
 80090f4:	96cb03de 	.word	0x96cb03de
 80090f8:	3fc74664 	.word	0x3fc74664
 80090fc:	94229359 	.word	0x94229359
 8009100:	3fd24924 	.word	0x3fd24924
 8009104:	55555593 	.word	0x55555593
 8009108:	3fe55555 	.word	0x3fe55555
 800910c:	d078c69f 	.word	0xd078c69f
 8009110:	3fc39a09 	.word	0x3fc39a09
 8009114:	1d8e78af 	.word	0x1d8e78af
 8009118:	3fcc71c5 	.word	0x3fcc71c5
 800911c:	9997fa04 	.word	0x9997fa04
 8009120:	3fd99999 	.word	0x3fd99999
 8009124:	0006b851 	.word	0x0006b851

08009128 <_init>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	46c0      	nop			@ (mov r8, r8)
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr

08009134 <_fini>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	46c0      	nop			@ (mov r8, r8)
 8009138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913a:	bc08      	pop	{r3}
 800913c:	469e      	mov	lr, r3
 800913e:	4770      	bx	lr
